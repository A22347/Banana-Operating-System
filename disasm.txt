
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5f 7b 00 00       	call   c0007b7f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 20 02 c0       	mov    eax,0xc0022048
c0000025:	3d 48 20 02 c0       	cmp    eax,0xc0022048
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 20 02 c0       	push   0xc0022048
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 20 02 c0       	mov    eax,0xc0022048
c0000051:	2d 48 20 02 c0       	sub    eax,0xc0022048
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 20 02 c0       	push   0xc0022048
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc ef 01 c0       	mov    ebx,0xc001efcc
c0000097:	81 eb c8 ef 01 c0    	sub    ebx,0xc001efc8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 ef 01 c0       	mov    esi,0xc001efc8
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 20 02 c0       	push   0xc0022048
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 48 20 02 c0       	push   0xc0022048
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 5b 46 01 00       	call   c0014908 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 17 a5 00 00       	call   c000a7dc <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 39 46 01 00       	call   c0014908 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 42 4b 01 00       	call   c0014e30 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 99 51 01 00       	call   c0015490 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 31 04 01 00       	jmp    c00107b0 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	83 ec 1c             	sub    esp,0x1c
c00003d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00003db:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00003df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00003e3:	39 cd                	cmp    ebp,ecx
c00003e5:	0f 83 45 01 00 00    	jae    c0000530 <memmove+0x160>
c00003eb:	85 d2                	test   edx,edx
c00003ed:	0f 84 2e 01 00 00    	je     c0000521 <memmove+0x151>
c00003f3:	8d 59 10             	lea    ebx,[ecx+0x10]
c00003f6:	39 dd                	cmp    ebp,ebx
c00003f8:	0f 93 44 24 0f       	setae  BYTE PTR [esp+0xf]
c00003fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0000402:	8d 5d 10             	lea    ebx,[ebp+0x10]
c0000405:	39 d9                	cmp    ecx,ebx
c0000407:	0f 93 c3             	setae  bl
c000040a:	08 c3                	or     bl,al
c000040c:	88 d8                	mov    al,bl
c000040e:	8d 5a ff             	lea    ebx,[edx-0x1]
c0000411:	83 fb 0e             	cmp    ebx,0xe
c0000414:	0f 97 c3             	seta   bl
c0000417:	84 d8                	test   al,bl
c0000419:	0f 84 41 01 00 00    	je     c0000560 <memmove+0x190>
c000041f:	89 eb                	mov    ebx,ebp
c0000421:	09 cb                	or     ebx,ecx
c0000423:	f6 c3 0f             	test   bl,0xf
c0000426:	0f 85 34 01 00 00    	jne    c0000560 <memmove+0x190>
c000042c:	89 d7                	mov    edi,edx
c000042e:	89 cb                	mov    ebx,ecx
c0000430:	83 e7 f0             	and    edi,0xfffffff0
c0000433:	89 ee                	mov    esi,ebp
c0000435:	01 cf                	add    edi,ecx
c0000437:	89 f6                	mov    esi,esi
c0000439:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000440:	0f 28 03             	movaps xmm0,XMMWORD PTR [ebx]
c0000443:	83 c3 10             	add    ebx,0x10
c0000446:	83 c6 10             	add    esi,0x10
c0000449:	0f 29 46 f0          	movaps XMMWORD PTR [esi-0x10],xmm0
c000044d:	39 fb                	cmp    ebx,edi
c000044f:	75 ef                	jne    c0000440 <memmove+0x70>
c0000451:	89 d7                	mov    edi,edx
c0000453:	89 d6                	mov    esi,edx
c0000455:	83 e7 f0             	and    edi,0xfffffff0
c0000458:	29 fe                	sub    esi,edi
c000045a:	01 f9                	add    ecx,edi
c000045c:	8d 5c 3d 00          	lea    ebx,[ebp+edi*1+0x0]
c0000460:	39 fa                	cmp    edx,edi
c0000462:	0f 84 b9 00 00 00    	je     c0000521 <memmove+0x151>
c0000468:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c000046b:	83 fe 01             	cmp    esi,0x1
c000046e:	88 03                	mov    BYTE PTR [ebx],al
c0000470:	0f 84 ab 00 00 00    	je     c0000521 <memmove+0x151>
c0000476:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000047a:	83 fe 02             	cmp    esi,0x2
c000047d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0000480:	0f 84 9b 00 00 00    	je     c0000521 <memmove+0x151>
c0000486:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048a:	83 fe 03             	cmp    esi,0x3
c000048d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0000490:	0f 84 8b 00 00 00    	je     c0000521 <memmove+0x151>
c0000496:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c000049a:	83 fe 04             	cmp    esi,0x4
c000049d:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00004a0:	74 7f                	je     c0000521 <memmove+0x151>
c00004a2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00004a6:	83 fe 05             	cmp    esi,0x5
c00004a9:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00004ac:	74 73                	je     c0000521 <memmove+0x151>
c00004ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00004b2:	83 fe 06             	cmp    esi,0x6
c00004b5:	88 43 05             	mov    BYTE PTR [ebx+0x5],al
c00004b8:	74 67                	je     c0000521 <memmove+0x151>
c00004ba:	0f b6 41 06          	movzx  eax,BYTE PTR [ecx+0x6]
c00004be:	83 fe 07             	cmp    esi,0x7
c00004c1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00004c4:	74 5b                	je     c0000521 <memmove+0x151>
c00004c6:	0f b6 41 07          	movzx  eax,BYTE PTR [ecx+0x7]
c00004ca:	83 fe 08             	cmp    esi,0x8
c00004cd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00004d0:	74 4f                	je     c0000521 <memmove+0x151>
c00004d2:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
c00004d6:	83 fe 09             	cmp    esi,0x9
c00004d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00004dc:	74 43                	je     c0000521 <memmove+0x151>
c00004de:	0f b6 41 09          	movzx  eax,BYTE PTR [ecx+0x9]
c00004e2:	83 fe 0a             	cmp    esi,0xa
c00004e5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00004e8:	74 37                	je     c0000521 <memmove+0x151>
c00004ea:	0f b6 41 0a          	movzx  eax,BYTE PTR [ecx+0xa]
c00004ee:	83 fe 0b             	cmp    esi,0xb
c00004f1:	88 43 0a             	mov    BYTE PTR [ebx+0xa],al
c00004f4:	74 2b                	je     c0000521 <memmove+0x151>
c00004f6:	0f b6 41 0b          	movzx  eax,BYTE PTR [ecx+0xb]
c00004fa:	83 fe 0c             	cmp    esi,0xc
c00004fd:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0000500:	74 1f                	je     c0000521 <memmove+0x151>
c0000502:	0f b6 41 0c          	movzx  eax,BYTE PTR [ecx+0xc]
c0000506:	83 fe 0d             	cmp    esi,0xd
c0000509:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c000050c:	74 13                	je     c0000521 <memmove+0x151>
c000050e:	0f b6 41 0d          	movzx  eax,BYTE PTR [ecx+0xd]
c0000512:	83 fe 0e             	cmp    esi,0xe
c0000515:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0000518:	74 07                	je     c0000521 <memmove+0x151>
c000051a:	0f b6 41 0e          	movzx  eax,BYTE PTR [ecx+0xe]
c000051e:	88 43 0e             	mov    BYTE PTR [ebx+0xe],al
c0000521:	83 c4 1c             	add    esp,0x1c
c0000524:	89 e8                	mov    eax,ebp
c0000526:	5b                   	pop    ebx
c0000527:	5e                   	pop    esi
c0000528:	5f                   	pop    edi
c0000529:	5d                   	pop    ebp
c000052a:	c3                   	ret    
c000052b:	90                   	nop
c000052c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000530:	76 ef                	jbe    c0000521 <memmove+0x151>
c0000532:	85 d2                	test   edx,edx
c0000534:	74 eb                	je     c0000521 <memmove+0x151>
c0000536:	8d 59 ff             	lea    ebx,[ecx-0x1]
c0000539:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0000544:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000547:	4a                   	dec    edx
c0000548:	75 f6                	jne    c0000540 <memmove+0x170>
c000054a:	83 c4 1c             	add    esp,0x1c
c000054d:	89 e8                	mov    eax,ebp
c000054f:	5b                   	pop    ebx
c0000550:	5e                   	pop    esi
c0000551:	5f                   	pop    edi
c0000552:	5d                   	pop    ebp
c0000553:	c3                   	ret    
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000560:	01 ea                	add    edx,ebp
c0000562:	89 eb                	mov    ebx,ebp
c0000564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000056a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000570:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000573:	43                   	inc    ebx
c0000574:	41                   	inc    ecx
c0000575:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000578:	39 d3                	cmp    ebx,edx
c000057a:	75 f4                	jne    c0000570 <memmove+0x1a0>
c000057c:	eb a3                	jmp    c0000521 <memmove+0x151>
c000057e:	66 90                	xchg   ax,ax

c0000580 <memset>:
c0000580:	83 ec 0c             	sub    esp,0xc
c0000583:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000587:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000058b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000058e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000592:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000596:	85 d2                	test   edx,edx
c0000598:	74 1b                	je     c00005b5 <memset+0x35>
c000059a:	83 fa 08             	cmp    edx,0x8
c000059d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00005a2:	89 f7                	mov    edi,esi
c00005a4:	73 2a                	jae    c00005d0 <memset+0x50>
c00005a6:	83 e2 07             	and    edx,0x7
c00005a9:	74 0a                	je     c00005b5 <memset+0x35>
c00005ab:	31 c0                	xor    eax,eax
c00005ad:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00005b0:	40                   	inc    eax
c00005b1:	39 d0                	cmp    eax,edx
c00005b3:	72 f8                	jb     c00005ad <memset+0x2d>
c00005b5:	89 f0                	mov    eax,esi
c00005b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00005ba:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00005be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00005c2:	83 c4 0c             	add    esp,0xc
c00005c5:	c3                   	ret    
c00005c6:	8d 76 00             	lea    esi,[esi+0x0]
c00005c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005d0:	0f b6 c3             	movzx  eax,bl
c00005d3:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c00005d9:	f7 c6 01 00 00 00    	test   esi,0x1
c00005df:	75 1d                	jne    c00005fe <memset+0x7e>
c00005e1:	f7 c7 02 00 00 00    	test   edi,0x2
c00005e7:	75 1d                	jne    c0000606 <memset+0x86>
c00005e9:	f7 c7 04 00 00 00    	test   edi,0x4
c00005ef:	75 20                	jne    c0000611 <memset+0x91>
c00005f1:	89 d1                	mov    ecx,edx
c00005f3:	c1 e9 02             	shr    ecx,0x2
c00005f6:	fc                   	cld    
c00005f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00005f9:	83 e2 03             	and    edx,0x3
c00005fc:	eb a8                	jmp    c00005a6 <memset+0x26>
c00005fe:	88 06                	mov    BYTE PTR [esi],al
c0000600:	8d 7e 01             	lea    edi,[esi+0x1]
c0000603:	4a                   	dec    edx
c0000604:	eb db                	jmp    c00005e1 <memset+0x61>
c0000606:	66 89 07             	mov    WORD PTR [edi],ax
c0000609:	83 ea 02             	sub    edx,0x2
c000060c:	83 c7 02             	add    edi,0x2
c000060f:	eb d8                	jmp    c00005e9 <memset+0x69>
c0000611:	89 07                	mov    DWORD PTR [edi],eax
c0000613:	83 ea 04             	sub    edx,0x4
c0000616:	83 c7 04             	add    edi,0x4
c0000619:	eb d6                	jmp    c00005f1 <memset+0x71>
c000061b:	90                   	nop
c000061c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000620 <strlen>:
c0000620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000624:	31 c0                	xor    eax,eax
c0000626:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000629:	74 15                	je     c0000640 <strlen+0x20>
c000062b:	90                   	nop
c000062c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000630:	40                   	inc    eax
c0000631:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000635:	75 f9                	jne    c0000630 <strlen+0x10>
c0000637:	c3                   	ret    
c0000638:	90                   	nop
c0000639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000640:	c3                   	ret    
c0000641:	eb 0d                	jmp    c0000650 <strpbrk>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop

c0000650 <strpbrk>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000657:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000065b:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c000065e:	84 db                	test   bl,bl
c0000660:	74 32                	je     c0000694 <strpbrk+0x44>
c0000662:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c0000665:	84 c0                	test   al,al
c0000667:	74 23                	je     c000068c <strpbrk+0x3c>
c0000669:	38 d8                	cmp    al,bl
c000066b:	74 29                	je     c0000696 <strpbrk+0x46>
c000066d:	89 fa                	mov    edx,edi
c000066f:	90                   	nop
c0000670:	eb 12                	jmp    c0000684 <strpbrk+0x34>
c0000672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	38 d9                	cmp    cl,bl
c0000682:	74 12                	je     c0000696 <strpbrk+0x46>
c0000684:	42                   	inc    edx
c0000685:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0000688:	84 c9                	test   cl,cl
c000068a:	75 f4                	jne    c0000680 <strpbrk+0x30>
c000068c:	46                   	inc    esi
c000068d:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000690:	84 db                	test   bl,bl
c0000692:	75 d1                	jne    c0000665 <strpbrk+0x15>
c0000694:	31 f6                	xor    esi,esi
c0000696:	5b                   	pop    ebx
c0000697:	89 f0                	mov    eax,esi
c0000699:	5e                   	pop    esi
c000069a:	5f                   	pop    edi
c000069b:	c3                   	ret    
c000069c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00006a0 <strtok>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	83 ec 08             	sub    esp,0x8
c00006a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00006ad:	85 db                	test   ebx,ebx
c00006af:	75 13                	jne    c00006c4 <strtok+0x24>
c00006b1:	eb 4d                	jmp    c0000700 <strtok+0x60>
c00006b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006c0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c3:	43                   	inc    ebx
c00006c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00006c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00006cb:	e8 80 ff ff ff       	call   c0000650 <strpbrk>
c00006d0:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c00006d5:	39 d8                	cmp    eax,ebx
c00006d7:	74 e7                	je     c00006c0 <strtok+0x20>
c00006d9:	85 c0                	test   eax,eax
c00006db:	74 2d                	je     c000070a <strtok+0x6a>
c00006dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00006e0:	8d 50 01             	lea    edx,[eax+0x1]
c00006e3:	89 d8                	mov    eax,ebx
c00006e5:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00006eb:	83 c4 08             	add    esp,0x8
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	c3                   	ret    
c00006f1:	eb 0d                	jmp    c0000700 <strtok+0x60>
c00006f3:	90                   	nop
c00006f4:	90                   	nop
c00006f5:	90                   	nop
c00006f6:	90                   	nop
c00006f7:	90                   	nop
c00006f8:	90                   	nop
c00006f9:	90                   	nop
c00006fa:	90                   	nop
c00006fb:	90                   	nop
c00006fc:	90                   	nop
c00006fd:	90                   	nop
c00006fe:	90                   	nop
c00006ff:	90                   	nop
c0000700:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000706:	85 db                	test   ebx,ebx
c0000708:	75 ba                	jne    c00006c4 <strtok+0x24>
c000070a:	83 c4 08             	add    esp,0x8
c000070d:	31 c0                	xor    eax,eax
c000070f:	5b                   	pop    ebx
c0000710:	5e                   	pop    esi
c0000711:	c3                   	ret    
c0000712:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strcpy>:
c0000720:	53                   	push   ebx
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000729:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000072c:	89 c3                	mov    ebx,eax
c000072e:	84 d2                	test   dl,dl
c0000730:	74 19                	je     c000074b <strcpy+0x2b>
c0000732:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000740:	88 13                	mov    BYTE PTR [ebx],dl
c0000742:	41                   	inc    ecx
c0000743:	43                   	inc    ebx
c0000744:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strcpy+0x20>
c000074b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000074e:	5b                   	pop    ebx
c000074f:	c3                   	ret    

c0000750 <strncpy>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000075b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075f:	85 db                	test   ebx,ebx
c0000761:	74 3f                	je     c00007a2 <strncpy+0x52>
c0000763:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0000766:	8d 43 ff             	lea    eax,[ebx-0x1]
c0000769:	8d 7a 01             	lea    edi,[edx+0x1]
c000076c:	88 0a                	mov    BYTE PTR [edx],cl
c000076e:	84 c9                	test   cl,cl
c0000770:	74 3e                	je     c00007b0 <strncpy+0x60>
c0000772:	85 c0                	test   eax,eax
c0000774:	74 2c                	je     c00007a2 <strncpy+0x52>
c0000776:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c000077a:	8d 43 fe             	lea    eax,[ebx-0x2]
c000077d:	8d 7a 02             	lea    edi,[edx+0x2]
c0000780:	8d 5e 02             	lea    ebx,[esi+0x2]
c0000783:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c0000786:	84 c9                	test   cl,cl
c0000788:	75 14                	jne    c000079e <strncpy+0x4e>
c000078a:	eb 24                	jmp    c00007b0 <strncpy+0x60>
c000078c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000790:	43                   	inc    ebx
c0000791:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000795:	47                   	inc    edi
c0000796:	48                   	dec    eax
c0000797:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000079a:	84 c9                	test   cl,cl
c000079c:	74 12                	je     c00007b0 <strncpy+0x60>
c000079e:	85 c0                	test   eax,eax
c00007a0:	75 ee                	jne    c0000790 <strncpy+0x40>
c00007a2:	5b                   	pop    ebx
c00007a3:	89 d0                	mov    eax,edx
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	85 c0                	test   eax,eax
c00007b2:	74 ee                	je     c00007a2 <strncpy+0x52>
c00007b4:	83 f8 08             	cmp    eax,0x8
c00007b7:	89 c3                	mov    ebx,eax
c00007b9:	73 35                	jae    c00007f0 <strncpy+0xa0>
c00007bb:	f6 c3 04             	test   bl,0x4
c00007be:	74 09                	je     c00007c9 <strncpy+0x79>
c00007c0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00007c6:	83 c7 04             	add    edi,0x4
c00007c9:	f6 c3 02             	test   bl,0x2
c00007cc:	74 08                	je     c00007d6 <strncpy+0x86>
c00007ce:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007d3:	83 c7 02             	add    edi,0x2
c00007d6:	f6 c3 01             	test   bl,0x1
c00007d9:	74 c7                	je     c00007a2 <strncpy+0x52>
c00007db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00007de:	89 d0                	mov    eax,edx
c00007e0:	5b                   	pop    ebx
c00007e1:	5e                   	pop    esi
c00007e2:	5f                   	pop    edi
c00007e3:	c3                   	ret    
c00007e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00007f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00007f6:	75 1f                	jne    c0000817 <strncpy+0xc7>
c00007f8:	f7 c7 02 00 00 00    	test   edi,0x2
c00007fe:	75 2c                	jne    c000082c <strncpy+0xdc>
c0000800:	f7 c7 04 00 00 00    	test   edi,0x4
c0000806:	75 16                	jne    c000081e <strncpy+0xce>
c0000808:	89 d9                	mov    ecx,ebx
c000080a:	c1 e9 02             	shr    ecx,0x2
c000080d:	fc                   	cld    
c000080e:	31 c0                	xor    eax,eax
c0000810:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000812:	83 e3 03             	and    ebx,0x3
c0000815:	eb a4                	jmp    c00007bb <strncpy+0x6b>
c0000817:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000081a:	4b                   	dec    ebx
c000081b:	47                   	inc    edi
c000081c:	eb da                	jmp    c00007f8 <strncpy+0xa8>
c000081e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000824:	83 eb 04             	sub    ebx,0x4
c0000827:	83 c7 04             	add    edi,0x4
c000082a:	eb dc                	jmp    c0000808 <strncpy+0xb8>
c000082c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000831:	83 eb 02             	sub    ebx,0x2
c0000834:	83 c7 02             	add    edi,0x2
c0000837:	eb c7                	jmp    c0000800 <strncpy+0xb0>
c0000839:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000840 <strcmp>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000084a:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c000084d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000850:	38 d1                	cmp    cl,dl
c0000852:	75 1d                	jne    c0000871 <strcmp+0x31>
c0000854:	84 c9                	test   cl,cl
c0000856:	74 28                	je     c0000880 <strcmp+0x40>
c0000858:	b8 01 00 00 00       	mov    eax,0x1
c000085d:	eb 06                	jmp    c0000865 <strcmp+0x25>
c000085f:	90                   	nop
c0000860:	40                   	inc    eax
c0000861:	84 d2                	test   dl,dl
c0000863:	74 1b                	je     c0000880 <strcmp+0x40>
c0000865:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c0000869:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	74 ef                	je     c0000860 <strcmp+0x20>
c0000871:	5b                   	pop    ebx
c0000872:	0f b6 c2             	movzx  eax,dl
c0000875:	29 c8                	sub    eax,ecx
c0000877:	5e                   	pop    esi
c0000878:	c3                   	ret    
c0000879:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000880:	5b                   	pop    ebx
c0000881:	31 c0                	xor    eax,eax
c0000883:	5e                   	pop    esi
c0000884:	c3                   	ret    
c0000885:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000890 <strchr>:
c0000890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000894:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000897:	84 d2                	test   dl,dl
c0000899:	74 21                	je     c00008bc <strchr+0x2c>
c000089b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00008a0:	38 ca                	cmp    dl,cl
c00008a2:	75 10                	jne    c00008b4 <strchr+0x24>
c00008a4:	eb 19                	jmp    c00008bf <strchr+0x2f>
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	38 ca                	cmp    dl,cl
c00008b2:	74 0a                	je     c00008be <strchr+0x2e>
c00008b4:	40                   	inc    eax
c00008b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00008b8:	84 d2                	test   dl,dl
c00008ba:	75 f4                	jne    c00008b0 <strchr+0x20>
c00008bc:	31 c0                	xor    eax,eax
c00008be:	c3                   	ret    
c00008bf:	90                   	nop
c00008c0:	c3                   	ret    
c00008c1:	eb 0d                	jmp    c00008d0 <strncmp>
c00008c3:	90                   	nop
c00008c4:	90                   	nop
c00008c5:	90                   	nop
c00008c6:	90                   	nop
c00008c7:	90                   	nop
c00008c8:	90                   	nop
c00008c9:	90                   	nop
c00008ca:	90                   	nop
c00008cb:	90                   	nop
c00008cc:	90                   	nop
c00008cd:	90                   	nop
c00008ce:	90                   	nop
c00008cf:	90                   	nop

c00008d0 <strncmp>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00008d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00008df:	85 ff                	test   edi,edi
c00008e1:	74 31                	je     c0000914 <strncmp+0x44>
c00008e3:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00008e6:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008e9:	38 d1                	cmp    cl,dl
c00008eb:	75 33                	jne    c0000920 <strncmp+0x50>
c00008ed:	8d 46 01             	lea    eax,[esi+0x1]
c00008f0:	84 c9                	test   cl,cl
c00008f2:	74 20                	je     c0000914 <strncmp+0x44>
c00008f4:	01 fe                	add    esi,edi
c00008f6:	eb 17                	jmp    c000090f <strncmp+0x3f>
c00008f8:	90                   	nop
c00008f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000900:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000903:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000906:	38 ca                	cmp    dl,cl
c0000908:	75 16                	jne    c0000920 <strncmp+0x50>
c000090a:	40                   	inc    eax
c000090b:	84 d2                	test   dl,dl
c000090d:	74 05                	je     c0000914 <strncmp+0x44>
c000090f:	43                   	inc    ebx
c0000910:	39 c6                	cmp    esi,eax
c0000912:	75 ec                	jne    c0000900 <strncmp+0x30>
c0000914:	5b                   	pop    ebx
c0000915:	31 c0                	xor    eax,eax
c0000917:	5e                   	pop    esi
c0000918:	5f                   	pop    edi
c0000919:	c3                   	ret    
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	5b                   	pop    ebx
c0000921:	0f b6 c2             	movzx  eax,dl
c0000924:	29 c8                	sub    eax,ecx
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000930 <strcat>:
c0000930:	56                   	push   esi
c0000931:	53                   	push   ebx
c0000932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000936:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000093a:	89 c3                	mov    ebx,eax
c000093c:	eb 04                	jmp    c0000942 <strcat+0x12>
c000093e:	66 90                	xchg   ax,ax
c0000940:	89 d3                	mov    ebx,edx
c0000942:	8d 53 01             	lea    edx,[ebx+0x1]
c0000945:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000949:	75 f5                	jne    c0000940 <strcat+0x10>
c000094b:	31 d2                	xor    edx,edx
c000094d:	8d 76 00             	lea    esi,[esi+0x0]
c0000950:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c0000954:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000957:	42                   	inc    edx
c0000958:	84 c9                	test   cl,cl
c000095a:	75 f4                	jne    c0000950 <strcat+0x20>
c000095c:	5b                   	pop    ebx
c000095d:	5e                   	pop    esi
c000095e:	c3                   	ret    
c000095f:	90                   	nop

c0000960 <strncat>:
c0000960:	56                   	push   esi
c0000961:	53                   	push   ebx
c0000962:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000096e:	85 f6                	test   esi,esi
c0000970:	74 2f                	je     c00009a1 <strncat+0x41>
c0000972:	89 c2                	mov    edx,eax
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000980:	42                   	inc    edx
c0000981:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000985:	75 f9                	jne    c0000980 <strncat+0x20>
c0000987:	01 ce                	add    esi,ecx
c0000989:	eb 0a                	jmp    c0000995 <strncat+0x35>
c000098b:	90                   	nop
c000098c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000990:	39 f1                	cmp    ecx,esi
c0000992:	74 1c                	je     c00009b0 <strncat+0x50>
c0000994:	42                   	inc    edx
c0000995:	41                   	inc    ecx
c0000996:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000099a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000099d:	84 db                	test   bl,bl
c000099f:	75 ef                	jne    c0000990 <strncat+0x30>
c00009a1:	5b                   	pop    ebx
c00009a2:	5e                   	pop    esi
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	8d 76 00             	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00009c0 <strstr>:
c00009c0:	57                   	push   edi
c00009c1:	56                   	push   esi
c00009c2:	53                   	push   ebx
c00009c3:	83 ec 0c             	sub    esp,0xc
c00009c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00009ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00009d1:	e8 4a fc ff ff       	call   c0000620 <strlen>
c00009d6:	85 c0                	test   eax,eax
c00009d8:	89 c6                	mov    esi,eax
c00009da:	75 19                	jne    c00009f5 <strstr+0x35>
c00009dc:	eb 32                	jmp    c0000a10 <strstr+0x50>
c00009de:	66 90                	xchg   ax,ax
c00009e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00009e4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00009e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009eb:	e8 90 f9 ff ff       	call   c0000380 <memcmp>
c00009f0:	85 c0                	test   eax,eax
c00009f2:	74 1c                	je     c0000a10 <strstr+0x50>
c00009f4:	43                   	inc    ebx
c00009f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009f8:	e8 23 fc ff ff       	call   c0000620 <strlen>
c00009fd:	39 f0                	cmp    eax,esi
c00009ff:	73 df                	jae    c00009e0 <strstr+0x20>
c0000a01:	83 c4 0c             	add    esp,0xc
c0000a04:	31 c0                	xor    eax,eax
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	c3                   	ret    
c0000a0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a10:	83 c4 0c             	add    esp,0xc
c0000a13:	89 d8                	mov    eax,ebx
c0000a15:	5b                   	pop    ebx
c0000a16:	5e                   	pop    esi
c0000a17:	5f                   	pop    edi
c0000a18:	c3                   	ret    
c0000a19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000a20 <toupper>:
c0000a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a24:	0f b6 d0             	movzx  edx,al
c0000a27:	f6 82 e0 ef 01 c0 02 	test   BYTE PTR [edx-0x3ffe1020],0x2
c0000a2e:	74 03                	je     c0000a33 <toupper+0x13>
c0000a30:	83 e8 20             	sub    eax,0x20
c0000a33:	c3                   	ret    
c0000a34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a40 <tolower>:
c0000a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a44:	0f b6 d0             	movzx  edx,al
c0000a47:	f6 82 e0 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe1020],0x1
c0000a4e:	74 03                	je     c0000a53 <tolower+0x13>
c0000a50:	83 c0 20             	add    eax,0x20
c0000a53:	c3                   	ret    
c0000a54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a60 <simple_strtoul>:
c0000a60:	55                   	push   ebp
c0000a61:	57                   	push   edi
c0000a62:	56                   	push   esi
c0000a63:	53                   	push   ebx
c0000a64:	83 ec 0c             	sub    esp,0xc
c0000a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0000a6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0000a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0000a76:	89 c2                	mov    edx,eax
c0000a78:	0f b6 80 e0 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1020]
c0000a7f:	c0 e8 03             	shr    al,0x3
c0000a82:	24 01                	and    al,0x1
c0000a84:	74 1e                	je     c0000aa4 <simple_strtoul+0x44>
c0000a86:	8d 76 00             	lea    esi,[esi+0x0]
c0000a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a94:	89 c2                	mov    edx,eax
c0000a96:	0f b6 80 e0 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1020]
c0000a9d:	c0 e8 03             	shr    al,0x3
c0000aa0:	24 01                	and    al,0x1
c0000aa2:	75 ec                	jne    c0000a90 <simple_strtoul+0x30>
c0000aa4:	80 fa 09             	cmp    dl,0x9
c0000aa7:	74 e7                	je     c0000a90 <simple_strtoul+0x30>
c0000aa9:	80 fa 2d             	cmp    dl,0x2d
c0000aac:	0f 84 3e 01 00 00    	je     c0000bf0 <simple_strtoul+0x190>
c0000ab2:	31 c0                	xor    eax,eax
c0000ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ab8:	31 c0                	xor    eax,eax
c0000aba:	80 fa 2b             	cmp    dl,0x2b
c0000abd:	0f 94 c0             	sete   al
c0000ac0:	01 c1                	add    ecx,eax
c0000ac2:	85 ff                	test   edi,edi
c0000ac4:	0f 85 c6 00 00 00    	jne    c0000b90 <simple_strtoul+0x130>
c0000aca:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000acd:	bf 0a 00 00 00       	mov    edi,0xa
c0000ad2:	80 fb 30             	cmp    bl,0x30
c0000ad5:	0f 84 70 01 00 00    	je     c0000c4b <simple_strtoul+0x1eb>
c0000adb:	84 db                	test   bl,bl
c0000add:	0f 84 3d 01 00 00    	je     c0000c20 <simple_strtoul+0x1c0>
c0000ae3:	31 c0                	xor    eax,eax
c0000ae5:	31 ed                	xor    ebp,ebp
c0000ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000aeb:	31 f6                	xor    esi,esi
c0000aed:	eb 2e                	jmp    c0000b1d <simple_strtoul+0xbd>
c0000aef:	90                   	nop
c0000af0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000af3:	39 fb                	cmp    ebx,edi
c0000af5:	73 59                	jae    c0000b50 <simple_strtoul+0xf0>
c0000af7:	89 d8                	mov    eax,ebx
c0000af9:	31 d2                	xor    edx,edx
c0000afb:	f7 d0                	not    eax
c0000afd:	f7 f7                	div    edi
c0000aff:	39 f0                	cmp    eax,esi
c0000b01:	0f 82 d9 00 00 00    	jb     c0000be0 <simple_strtoul+0x180>
c0000b07:	0f af f7             	imul   esi,edi
c0000b0a:	01 de                	add    esi,ebx
c0000b0c:	bb 01 00 00 00       	mov    ebx,0x1
c0000b11:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000b15:	41                   	inc    ecx
c0000b16:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b19:	84 db                	test   bl,bl
c0000b1b:	74 33                	je     c0000b50 <simple_strtoul+0xf0>
c0000b1d:	0f b6 c3             	movzx  eax,bl
c0000b20:	f6 80 e0 ef 01 c0 04 	test   BYTE PTR [eax-0x3ffe1020],0x4
c0000b27:	75 c7                	jne    c0000af0 <simple_strtoul+0x90>
c0000b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2c:	e8 ef fe ff ff       	call   c0000a20 <toupper>
c0000b31:	0f b6 d0             	movzx  edx,al
c0000b34:	f6 82 e0 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe1020],0x1
c0000b3b:	74 13                	je     c0000b50 <simple_strtoul+0xf0>
c0000b3d:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b40:	39 fb                	cmp    ebx,edi
c0000b42:	72 b3                	jb     c0000af7 <simple_strtoul+0x97>
c0000b44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000b4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000b54:	85 d2                	test   edx,edx
c0000b56:	74 12                	je     c0000b6a <simple_strtoul+0x10a>
c0000b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000b5c:	09 f0                	or     eax,esi
c0000b5e:	0f 84 9c 00 00 00    	je     c0000c00 <simple_strtoul+0x1a0>
c0000b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b68:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6a:	4d                   	dec    ebp
c0000b6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000b70:	0f 44 f0             	cmove  esi,eax
c0000b73:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000b78:	75 02                	jne    c0000b7c <simple_strtoul+0x11c>
c0000b7a:	f7 de                	neg    esi
c0000b7c:	83 c4 0c             	add    esp,0xc
c0000b7f:	89 f0                	mov    eax,esi
c0000b81:	5b                   	pop    ebx
c0000b82:	5e                   	pop    esi
c0000b83:	5f                   	pop    edi
c0000b84:	5d                   	pop    ebp
c0000b85:	c3                   	ret    
c0000b86:	8d 76 00             	lea    esi,[esi+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b93:	83 f8 22             	cmp    eax,0x22
c0000b96:	0f 87 84 00 00 00    	ja     c0000c20 <simple_strtoul+0x1c0>
c0000b9c:	83 ff 08             	cmp    edi,0x8
c0000b9f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000ba2:	0f 84 c6 00 00 00    	je     c0000c6e <simple_strtoul+0x20e>
c0000ba8:	83 ff 10             	cmp    edi,0x10
c0000bab:	0f 85 2a ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bb1:	80 fb 30             	cmp    bl,0x30
c0000bb4:	bf 10 00 00 00       	mov    edi,0x10
c0000bb9:	0f 85 1c ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bbf:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc6:	89 c3                	mov    ebx,eax
c0000bc8:	e8 73 fe ff ff       	call   c0000a40 <tolower>
c0000bcd:	83 f8 78             	cmp    eax,0x78
c0000bd0:	0f 84 c1 00 00 00    	je     c0000c97 <simple_strtoul+0x237>
c0000bd6:	41                   	inc    ecx
c0000bd7:	e9 ff fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000bdc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000be0:	bd 01 00 00 00       	mov    ebp,0x1
c0000be5:	31 f6                	xor    esi,esi
c0000be7:	e9 29 ff ff ff       	jmp    c0000b15 <simple_strtoul+0xb5>
c0000bec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000bf0:	b8 01 00 00 00       	mov    eax,0x1
c0000bf5:	41                   	inc    ecx
c0000bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000bfa:	e9 c3 fe ff ff       	jmp    c0000ac2 <simple_strtoul+0x62>
c0000bff:	90                   	nop
c0000c00:	85 c9                	test   ecx,ecx
c0000c02:	74 39                	je     c0000c3d <simple_strtoul+0x1dd>
c0000c04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c08:	31 f6                	xor    esi,esi
c0000c0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c0e:	89 38                	mov    DWORD PTR [eax],edi
c0000c10:	e9 55 ff ff ff       	jmp    c0000b6a <simple_strtoul+0x10a>
c0000c15:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000c19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000c20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c24:	85 c0                	test   eax,eax
c0000c26:	74 1c                	je     c0000c44 <simple_strtoul+0x1e4>
c0000c28:	85 c9                	test   ecx,ecx
c0000c2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c2e:	74 5a                	je     c0000c8a <simple_strtoul+0x22a>
c0000c30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c34:	31 f6                	xor    esi,esi
c0000c36:	89 38                	mov    DWORD PTR [eax],edi
c0000c38:	e9 36 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c3d:	31 f6                	xor    esi,esi
c0000c3f:	e9 20 ff ff ff       	jmp    c0000b64 <simple_strtoul+0x104>
c0000c44:	31 f6                	xor    esi,esi
c0000c46:	e9 28 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c4b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0000c52:	89 c3                	mov    ebx,eax
c0000c54:	e8 e7 fd ff ff       	call   c0000a40 <tolower>
c0000c59:	83 f8 78             	cmp    eax,0x78
c0000c5c:	74 20                	je     c0000c7e <simple_strtoul+0x21e>
c0000c5e:	41                   	inc    ecx
c0000c5f:	80 fb 30             	cmp    bl,0x30
c0000c62:	74 13                	je     c0000c77 <simple_strtoul+0x217>
c0000c64:	bf 08 00 00 00       	mov    edi,0x8
c0000c69:	e9 6d fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000c6e:	80 fb 30             	cmp    bl,0x30
c0000c71:	0f 85 64 fe ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000c77:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000c7b:	41                   	inc    ecx
c0000c7c:	eb e6                	jmp    c0000c64 <simple_strtoul+0x204>
c0000c7e:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c82:	83 c1 02             	add    ecx,0x2
c0000c85:	e9 27 ff ff ff       	jmp    c0000bb1 <simple_strtoul+0x151>
c0000c8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c90:	31 f6                	xor    esi,esi
c0000c92:	e9 dc fe ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c97:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c9b:	83 c1 02             	add    ecx,0x2
c0000c9e:	e9 38 fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>

c0000ca3 <largebin_index>:
c0000ca3:	89 c2                	mov    edx,eax
c0000ca5:	c1 ea 08             	shr    edx,0x8
c0000ca8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cae:	77 10                	ja     c0000cc0 <largebin_index+0x1d>
c0000cb0:	0f bd d2             	bsr    edx,edx
c0000cb3:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cb6:	d3 e8                	shr    eax,cl
c0000cb8:	83 e0 03             	and    eax,0x3
c0000cbb:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cbf:	c3                   	ret    
c0000cc0:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cc5:	c3                   	ret    

c0000cc6 <malloc_init_state>:
c0000cc6:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc9:	53                   	push   ebx
c0000cca:	89 d1                	mov    ecx,edx
c0000ccc:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cd2:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000cd5:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd8:	83 c2 08             	add    edx,0x8
c0000cdb:	39 da                	cmp    edx,ebx
c0000cdd:	75 f3                	jne    c0000cd2 <malloc_init_state+0xc>
c0000cdf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ceb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cff:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d09:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d10:	83 e2 03             	and    edx,0x3
c0000d13:	5b                   	pop    ebx
c0000d14:	83 ca 48             	or     edx,0x48
c0000d17:	89 10                	mov    DWORD PTR [eax],edx
c0000d19:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d1c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d26:	c3                   	ret    

c0000d27 <malloc_consolidate>:
c0000d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d29:	85 d2                	test   edx,edx
c0000d2b:	0f 84 d8 00 00 00    	je     c0000e09 <malloc_consolidate+0xe2>
c0000d31:	55                   	push   ebp
c0000d32:	83 e2 fd             	and    edx,0xfffffffd
c0000d35:	57                   	push   edi
c0000d36:	89 c5                	mov    ebp,eax
c0000d38:	56                   	push   esi
c0000d39:	53                   	push   ebx
c0000d3a:	8d 78 34             	lea    edi,[eax+0x34]
c0000d3d:	83 ec 10             	sub    esp,0x10
c0000d40:	89 10                	mov    DWORD PTR [eax],edx
c0000d42:	c1 ea 03             	shr    edx,0x3
c0000d45:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d49:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d4d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d54:	85 d2                	test   edx,edx
c0000d56:	0f 84 98 00 00 00    	je     c0000df4 <malloc_consolidate+0xcd>
c0000d5c:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d63:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d66:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d6d:	89 f9                	mov    ecx,edi
c0000d6f:	83 e1 fe             	and    ecx,0xfffffffe
c0000d72:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d75:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d78:	83 e3 fc             	and    ebx,0xfffffffc
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d81:	75 14                	jne    c0000d97 <malloc_consolidate+0x70>
c0000d83:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d85:	29 fa                	sub    edx,edi
c0000d87:	01 f9                	add    ecx,edi
c0000d89:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d8c:	89 fb                	mov    ebx,edi
c0000d8e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d91:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d94:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d97:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d9a:	74 40                	je     c0000ddc <malloc_consolidate+0xb5>
c0000d9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d9f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000da2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000da6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da9:	83 e7 01             	and    edi,0x1
c0000dac:	75 0e                	jne    c0000dbc <malloc_consolidate+0x95>
c0000dae:	01 d9                	add    ecx,ebx
c0000db0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000db3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000db6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000dbc:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dbf:	89 ce                	mov    esi,ecx
c0000dc1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dc4:	83 ce 01             	or     esi,0x1
c0000dc7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dca:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dcd:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dd1:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dd4:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dd7:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dda:	eb 0c                	jmp    c0000de8 <malloc_consolidate+0xc1>
c0000ddc:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ddf:	83 c9 01             	or     ecx,0x1
c0000de2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000de5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dec:	85 d2                	test   edx,edx
c0000dee:	0f 85 6f ff ff ff    	jne    c0000d63 <malloc_consolidate+0x3c>
c0000df4:	83 c5 04             	add    ebp,0x4
c0000df7:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dfb:	0f 85 50 ff ff ff    	jne    c0000d51 <malloc_consolidate+0x2a>
c0000e01:	83 c4 10             	add    esp,0x10
c0000e04:	5b                   	pop    ebx
c0000e05:	5e                   	pop    esi
c0000e06:	5f                   	pop    edi
c0000e07:	5d                   	pop    ebp
c0000e08:	c3                   	ret    
c0000e09:	e9 b8 fe ff ff       	jmp    c0000cc6 <malloc_init_state>

c0000e0e <dlfree>:
c0000e0e:	57                   	push   edi
c0000e0f:	56                   	push   esi
c0000e10:	53                   	push   ebx
c0000e11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e15:	85 db                	test   ebx,ebx
c0000e17:	0f 84 e2 00 00 00    	je     c0000eff <dlfree+0xf1>
c0000e1d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000e29:	89 f0                	mov    eax,esi
c0000e2b:	83 e0 fc             	and    eax,0xfffffffc
c0000e2e:	39 c1                	cmp    ecx,eax
c0000e30:	72 24                	jb     c0000e56 <dlfree+0x48>
c0000e32:	c1 e8 03             	shr    eax,0x3
c0000e35:	83 c9 03             	or     ecx,0x3
c0000e38:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e3e:	83 e8 02             	sub    eax,0x2
c0000e41:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000e48:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e4a:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000e51:	e9 a9 00 00 00       	jmp    c0000eff <dlfree+0xf1>
c0000e56:	83 e6 02             	and    esi,0x2
c0000e59:	0f 85 a0 00 00 00    	jne    c0000eff <dlfree+0xf1>
c0000e5f:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e62:	83 c9 01             	or     ecx,0x1
c0000e65:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e6b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e6e:	83 e1 fc             	and    ecx,0xfffffffc
c0000e71:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e75:	75 13                	jne    c0000e8a <dlfree+0x7c>
c0000e77:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e7a:	29 da                	sub    edx,ebx
c0000e7c:	01 d8                	add    eax,ebx
c0000e7e:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e8a:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e90:	74 40                	je     c0000ed2 <dlfree+0xc4>
c0000e92:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e96:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e99:	f6 c3 01             	test   bl,0x1
c0000e9c:	75 0e                	jne    c0000eac <dlfree+0x9e>
c0000e9e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ea1:	01 c8                	add    eax,ecx
c0000ea3:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ea6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eac:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000eb2:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000eb9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ebc:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000ec2:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ec5:	89 c1                	mov    ecx,eax
c0000ec7:	83 c9 01             	or     ecx,0x1
c0000eca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ecd:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ed0:	eb 10                	jmp    c0000ee2 <dlfree+0xd4>
c0000ed2:	01 c8                	add    eax,ecx
c0000ed4:	89 c1                	mov    ecx,eax
c0000ed6:	83 c9 01             	or     ecx,0x1
c0000ed9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edc:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000ee2:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ee7:	76 16                	jbe    c0000eff <dlfree+0xf1>
c0000ee9:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000ef0:	74 0d                	je     c0000eff <dlfree+0xf1>
c0000ef2:	5b                   	pop    ebx
c0000ef3:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	e9 28 fe ff ff       	jmp    c0000d27 <malloc_consolidate>
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	c3                   	ret    

c0000f03 <sYSMALLOc>:
c0000f03:	55                   	push   ebp
c0000f04:	57                   	push   edi
c0000f05:	56                   	push   esi
c0000f06:	53                   	push   ebx
c0000f07:	89 d3                	mov    ebx,edx
c0000f09:	83 ec 2c             	sub    esp,0x2c
c0000f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f10:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f16:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f19:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f20:	74 1f                	je     c0000f41 <sYSMALLOc+0x3e>
c0000f22:	89 d0                	mov    eax,edx
c0000f24:	e8 fe fd ff ff       	call   c0000d27 <malloc_consolidate>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000f30:	83 e8 07             	sub    eax,0x7
c0000f33:	50                   	push   eax
c0000f34:	e8 33 02 00 00       	call   c000116c <dlmalloc>
c0000f39:	83 c4 10             	add    esp,0x10
c0000f3c:	e9 23 02 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f41:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f48:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000f4e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000f51:	83 c0 10             	add    eax,0x10
c0000f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f58:	01 c2                	add    edx,eax
c0000f5a:	83 e5 fc             	and    ebp,0xfffffffc
c0000f5d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f64:	74 02                	je     c0000f68 <sYSMALLOc+0x65>
c0000f66:	29 ea                	sub    edx,ebp
c0000f68:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000f6c:	f7 d9                	neg    ecx
c0000f6e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000f72:	21 ca                	and    edx,ecx
c0000f74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000f78:	7f 07                	jg     c0000f81 <sYSMALLOc+0x7e>
c0000f7a:	31 c0                	xor    eax,eax
c0000f7c:	e9 e3 01 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f81:	83 ec 0c             	sub    esp,0xc
c0000f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f88:	e8 2f 6a 00 00       	call   c00079bc <sbrk>
c0000f8d:	83 c4 10             	add    esp,0x10
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	89 c6                	mov    esi,eax
c0000f95:	74 e3                	je     c0000f7a <sYSMALLOc+0x77>
c0000f97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f9b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f9e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000fa4:	39 c2                	cmp    edx,eax
c0000fa6:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000fac:	75 11                	jne    c0000fbf <sYSMALLOc+0xbc>
c0000fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb2:	01 e8                	add    eax,ebp
c0000fb4:	83 c8 01             	or     eax,0x1
c0000fb7:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fba:	e9 93 00 00 00       	jmp    c0001052 <sYSMALLOc+0x14f>
c0000fbf:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000fc5:	a8 01                	test   al,0x1
c0000fc7:	0f 84 73 01 00 00    	je     c0001140 <sYSMALLOc+0x23d>
c0000fcd:	85 ed                	test   ebp,ebp
c0000fcf:	74 12                	je     c0000fe3 <sYSMALLOc+0xe0>
c0000fd1:	39 f2                	cmp    edx,esi
c0000fd3:	76 0e                	jbe    c0000fe3 <sYSMALLOc+0xe0>
c0000fd5:	83 e0 fe             	and    eax,0xfffffffe
c0000fd8:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000fde:	e9 5d 01 00 00       	jmp    c0001140 <sYSMALLOc+0x23d>
c0000fe3:	85 ed                	test   ebp,ebp
c0000fe5:	74 0c                	je     c0000ff3 <sYSMALLOc+0xf0>
c0000fe7:	89 f0                	mov    eax,esi
c0000fe9:	29 d0                	sub    eax,edx
c0000feb:	01 c1                	add    ecx,eax
c0000fed:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000ff3:	89 f2                	mov    edx,esi
c0000ff5:	83 e2 07             	and    edx,0x7
c0000ff8:	0f 84 b1 00 00 00    	je     c00010af <sYSMALLOc+0x1ac>
c0000ffe:	b8 08 00 00 00       	mov    eax,0x8
c0001003:	29 d0                	sub    eax,edx
c0001005:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001008:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000100c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001010:	01 e8                	add    eax,ebp
c0001012:	83 ec 0c             	sub    esp,0xc
c0001015:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001018:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000101c:	01 f2                	add    edx,esi
c000101e:	29 d0                	sub    eax,edx
c0001020:	01 d1                	add    ecx,edx
c0001022:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001026:	01 c1                	add    ecx,eax
c0001028:	51                   	push   ecx
c0001029:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000102d:	e8 8a 69 00 00       	call   c00079bc <sbrk>
c0001032:	83 c4 10             	add    esp,0x10
c0001035:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001039:	83 f8 ff             	cmp    eax,0xffffffff
c000103c:	75 7c                	jne    c00010ba <sYSMALLOc+0x1b7>
c000103e:	83 ec 0c             	sub    esp,0xc
c0001041:	6a 00                	push   0x0
c0001043:	e8 74 69 00 00       	call   c00079bc <sbrk>
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	31 c9                	xor    ecx,ecx
c000104d:	83 f8 ff             	cmp    eax,0xffffffff
c0001050:	75 7e                	jne    c00010d0 <sYSMALLOc+0x1cd>
c0001052:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001058:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000105e:	73 06                	jae    c0001066 <sYSMALLOc+0x163>
c0001060:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001066:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106c:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001072:	73 06                	jae    c000107a <sYSMALLOc+0x177>
c0001074:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000107d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001080:	83 e2 fc             	and    edx,0xfffffffc
c0001083:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0001087:	0f 87 ed fe ff ff    	ja     c0000f7a <sYSMALLOc+0x77>
c000108d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001091:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001094:	29 fa                	sub    edx,edi
c0001096:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001099:	89 fb                	mov    ebx,edi
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 cb 01             	or     ebx,0x1
c00010a1:	83 c0 08             	add    eax,0x8
c00010a4:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010aa:	e9 b5 00 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c00010af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b3:	31 c0                	xor    eax,eax
c00010b5:	e9 52 ff ff ff       	jmp    c000100c <sYSMALLOc+0x109>
c00010ba:	39 c6                	cmp    esi,eax
c00010bc:	76 12                	jbe    c00010d0 <sYSMALLOc+0x1cd>
c00010be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010c2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010c9:	01 f0                	add    eax,esi
c00010cb:	e9 7b ff ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c00010d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00010d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00010d7:	29 f0                	sub    eax,esi
c00010d9:	01 c8                	add    eax,ecx
c00010db:	83 c8 01             	or     eax,0x1
c00010de:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00010e1:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c00010e7:	85 ed                	test   ebp,ebp
c00010e9:	0f 84 63 ff ff ff    	je     c0001052 <sYSMALLOc+0x14f>
c00010ef:	8d 45 f4             	lea    eax,[ebp-0xc]
c00010f2:	83 e0 f8             	and    eax,0xfffffff8
c00010f5:	89 c2                	mov    edx,eax
c00010f7:	83 ca 01             	or     edx,0x1
c00010fa:	83 f8 0f             	cmp    eax,0xf
c00010fd:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001100:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001108:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001110:	0f 86 3c ff ff ff    	jbe    c0001052 <sYSMALLOc+0x14f>
c0001116:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000111c:	83 ec 0c             	sub    esp,0xc
c000111f:	83 c7 08             	add    edi,0x8
c0001122:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000112c:	57                   	push   edi
c000112d:	e8 dc fc ff ff       	call   c0000e0e <dlfree>
c0001132:	83 c4 10             	add    esp,0x10
c0001135:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000113b:	e9 12 ff ff ff       	jmp    c0001052 <sYSMALLOc+0x14f>
c0001140:	83 ec 0c             	sub    esp,0xc
c0001143:	6a 00                	push   0x0
c0001145:	e8 72 68 00 00       	call   c00079bc <sbrk>
c000114a:	89 c2                	mov    edx,eax
c000114c:	29 f2                	sub    edx,esi
c000114e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001152:	83 c4 10             	add    esp,0x10
c0001155:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000115b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000115f:	e9 e7 fe ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c0001164:	83 c4 2c             	add    esp,0x2c
c0001167:	5b                   	pop    ebx
c0001168:	5e                   	pop    esi
c0001169:	5f                   	pop    edi
c000116a:	5d                   	pop    ebp
c000116b:	c3                   	ret    

c000116c <dlmalloc>:
c000116c:	55                   	push   ebp
c000116d:	57                   	push   edi
c000116e:	56                   	push   esi
c000116f:	53                   	push   ebx
c0001170:	83 ec 1c             	sub    esp,0x1c
c0001173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001177:	83 f8 df             	cmp    eax,0xffffffdf
c000117a:	0f 87 70 03 00 00    	ja     c00014f0 <dlmalloc+0x384>
c0001180:	83 c0 0b             	add    eax,0xb
c0001183:	be 10 00 00 00       	mov    esi,0x10
c0001188:	83 f8 0f             	cmp    eax,0xf
c000118b:	76 05                	jbe    c0001192 <dlmalloc+0x26>
c000118d:	83 e0 f8             	and    eax,0xfffffff8
c0001190:	89 c6                	mov    esi,eax
c0001192:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001198:	f7 c7 01 00 00 00    	test   edi,0x1
c000119e:	75 17                	jne    c00011b7 <dlmalloc+0x4b>
c00011a0:	85 ff                	test   edi,edi
c00011a2:	0f 85 05 03 00 00    	jne    c00014ad <dlmalloc+0x341>
c00011a8:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00011ad:	e8 75 fb ff ff       	call   c0000d27 <malloc_consolidate>
c00011b2:	e9 f6 02 00 00       	jmp    c00014ad <dlmalloc+0x341>
c00011b7:	39 f7                	cmp    edi,esi
c00011b9:	72 1f                	jb     c00011da <dlmalloc+0x6e>
c00011bb:	89 f2                	mov    edx,esi
c00011bd:	c1 ea 03             	shr    edx,0x3
c00011c0:	83 ea 02             	sub    edx,0x2
c00011c3:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c00011ca:	85 c0                	test   eax,eax
c00011cc:	74 0c                	je     c00011da <dlmalloc+0x6e>
c00011ce:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011d1:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c00011d8:	eb 30                	jmp    c000120a <dlmalloc+0x9e>
c00011da:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e0:	89 f0                	mov    eax,esi
c00011e2:	77 2e                	ja     c0001212 <dlmalloc+0xa6>
c00011e4:	c1 e8 03             	shr    eax,0x3
c00011e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011eb:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c00011f2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011f5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011f8:	39 c3                	cmp    ebx,eax
c00011fa:	74 2e                	je     c000122a <dlmalloc+0xbe>
c00011fc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ff:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001204:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001207:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000120a:	83 c0 08             	add    eax,0x8
c000120d:	e9 e0 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001212:	e8 8c fa ff ff       	call   c0000ca3 <largebin_index>
c0001217:	83 e7 02             	and    edi,0x2
c000121a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000121e:	74 0a                	je     c000122a <dlmalloc+0xbe>
c0001220:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001225:	e8 fd fa ff ff       	call   c0000d27 <malloc_consolidate>
c000122a:	8d 46 10             	lea    eax,[esi+0x10]
c000122d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001231:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001237:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000123d:	0f 84 13 01 00 00    	je     c0001356 <dlmalloc+0x1ea>
c0001243:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001246:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001249:	83 e7 fc             	and    edi,0xfffffffc
c000124c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001252:	77 4c                	ja     c00012a0 <dlmalloc+0x134>
c0001254:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001259:	75 45                	jne    c00012a0 <dlmalloc+0x134>
c000125b:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c0001261:	75 3d                	jne    c00012a0 <dlmalloc+0x134>
c0001263:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001267:	73 37                	jae    c00012a0 <dlmalloc+0x134>
c0001269:	8d 04 33             	lea    eax,[ebx+esi*1]
c000126c:	89 fa                	mov    edx,edi
c000126e:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c0001273:	29 f2                	sub    edx,esi
c0001275:	83 ce 01             	or     esi,0x1
c0001278:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000127d:	89 d1                	mov    ecx,edx
c000127f:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c0001284:	83 c9 01             	or     ecx,0x1
c0001287:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000128e:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001295:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001298:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000129b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000129e:	eb 15                	jmp    c00012b5 <dlmalloc+0x149>
c00012a0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00012a5:	39 fe                	cmp    esi,edi
c00012a7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00012ae:	75 0d                	jne    c00012bd <dlmalloc+0x151>
c00012b0:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00012b8:	e9 35 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00012bd:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012c3:	89 f8                	mov    eax,edi
c00012c5:	77 19                	ja     c00012e0 <dlmalloc+0x174>
c00012c7:	c1 e8 03             	shr    eax,0x3
c00012ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00012cd:	83 c2 0d             	add    edx,0xd
c00012d0:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c00012d7:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012de:	eb 46                	jmp    c0001326 <dlmalloc+0x1ba>
c00012e0:	e8 be f9 ff ff       	call   c0000ca3 <largebin_index>
c00012e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00012e8:	83 c2 0d             	add    edx,0xd
c00012eb:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c00012f2:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012f9:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012fc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001300:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001304:	89 d5                	mov    ebp,edx
c0001306:	74 1e                	je     c0001326 <dlmalloc+0x1ba>
c0001308:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000130b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000130e:	77 12                	ja     c0001322 <dlmalloc+0x1b6>
c0001310:	83 cf 01             	or     edi,0x1
c0001313:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001316:	76 05                	jbe    c000131d <dlmalloc+0x1b1>
c0001318:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000131b:	eb f6                	jmp    c0001313 <dlmalloc+0x1a7>
c000131d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001320:	eb 04                	jmp    c0001326 <dlmalloc+0x1ba>
c0001322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001326:	89 c7                	mov    edi,eax
c0001328:	88 c1                	mov    cl,al
c000132a:	c1 ff 05             	sar    edi,0x5
c000132d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001331:	bf 01 00 00 00       	mov    edi,0x1
c0001336:	d3 e7                	shl    edi,cl
c0001338:	89 f8                	mov    eax,edi
c000133a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000133e:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001345:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001348:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000134b:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000134e:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001351:	e9 db fe ff ff       	jmp    c0001231 <dlmalloc+0xc5>
c0001356:	81 fe ff 00 00 00    	cmp    esi,0xff
c000135c:	76 78                	jbe    c00013d6 <dlmalloc+0x26a>
c000135e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001362:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c0001369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000136f:	39 ca                	cmp    edx,ecx
c0001371:	74 63                	je     c00013d6 <dlmalloc+0x26a>
c0001373:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001376:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001379:	83 e3 fc             	and    ebx,0xfffffffc
c000137c:	39 de                	cmp    esi,ebx
c000137e:	77 52                	ja     c00013d2 <dlmalloc+0x266>
c0001380:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001383:	89 df                	mov    edi,ebx
c0001385:	01 d3                	add    ebx,edx
c0001387:	29 f7                	sub    edi,esi
c0001389:	83 ff 0f             	cmp    edi,0xf
c000138c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000138f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001392:	8d 42 08             	lea    eax,[edx+0x8]
c0001395:	77 09                	ja     c00013a0 <dlmalloc+0x234>
c0001397:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000139b:	e9 52 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013a0:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013a3:	83 ce 01             	or     esi,0x1
c00013a6:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00013ac:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00013b2:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00013b9:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00013c0:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013c3:	89 fa                	mov    edx,edi
c00013c5:	83 ca 01             	or     edx,0x1
c00013c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013cb:	89 3b                	mov    DWORD PTR [ebx],edi
c00013cd:	e9 20 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013d2:	89 c2                	mov    edx,eax
c00013d4:	eb 99                	jmp    c000136f <dlmalloc+0x203>
c00013d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013da:	b8 01 00 00 00       	mov    eax,0x1
c00013df:	41                   	inc    ecx
c00013e0:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c00013e7:	89 cb                	mov    ebx,ecx
c00013e9:	c1 eb 05             	shr    ebx,0x5
c00013ec:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00013f3:	d3 e0                	shl    eax,cl
c00013f5:	39 f8                	cmp    eax,edi
c00013f7:	77 04                	ja     c00013fd <dlmalloc+0x291>
c00013f9:	85 c0                	test   eax,eax
c00013fb:	75 26                	jne    c0001423 <dlmalloc+0x2b7>
c00013fd:	43                   	inc    ebx
c00013fe:	83 fb 02             	cmp    ebx,0x2
c0001401:	0f 87 a6 00 00 00    	ja     c00014ad <dlmalloc+0x341>
c0001407:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000140e:	85 ff                	test   edi,edi
c0001410:	74 eb                	je     c00013fd <dlmalloc+0x291>
c0001412:	89 d8                	mov    eax,ebx
c0001414:	c1 e0 06             	shl    eax,0x6
c0001417:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000141e:	b8 01 00 00 00       	mov    eax,0x1
c0001423:	85 f8                	test   eax,edi
c0001425:	75 07                	jne    c000142e <dlmalloc+0x2c2>
c0001427:	83 c2 08             	add    edx,0x8
c000142a:	01 c0                	add    eax,eax
c000142c:	eb f5                	jmp    c0001423 <dlmalloc+0x2b7>
c000142e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001431:	39 ca                	cmp    edx,ecx
c0001433:	75 14                	jne    c0001449 <dlmalloc+0x2dd>
c0001435:	89 c1                	mov    ecx,eax
c0001437:	83 c2 08             	add    edx,0x8
c000143a:	f7 d1                	not    ecx
c000143c:	01 c0                	add    eax,eax
c000143e:	21 cf                	and    edi,ecx
c0001440:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001447:	eb ac                	jmp    c00013f5 <dlmalloc+0x289>
c0001449:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000144c:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000144f:	83 e0 fc             	and    eax,0xfffffffc
c0001452:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001455:	89 c3                	mov    ebx,eax
c0001457:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000145a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000145d:	29 f3                	sub    ebx,esi
c000145f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001462:	83 fb 0f             	cmp    ebx,0xf
c0001465:	77 09                	ja     c0001470 <dlmalloc+0x304>
c0001467:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000146b:	e9 82 00 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001470:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001473:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001479:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c000147f:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c0001485:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c000148c:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001493:	77 06                	ja     c000149b <dlmalloc+0x32f>
c0001495:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000149b:	83 ce 01             	or     esi,0x1
c000149e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014a1:	89 d9                	mov    ecx,ebx
c00014a3:	83 c9 01             	or     ecx,0x1
c00014a6:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014a9:	89 1a                	mov    DWORD PTR [edx],ebx
c00014ab:	eb 45                	jmp    c00014f2 <dlmalloc+0x386>
c00014ad:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00014b2:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014b8:	83 e2 fc             	and    edx,0xfffffffc
c00014bb:	39 d1                	cmp    ecx,edx
c00014bd:	77 1e                	ja     c00014dd <dlmalloc+0x371>
c00014bf:	89 f3                	mov    ebx,esi
c00014c1:	29 f2                	sub    edx,esi
c00014c3:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014c6:	83 cb 01             	or     ebx,0x1
c00014c9:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c00014cf:	83 ca 01             	or     edx,0x1
c00014d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014d8:	e9 2d fd ff ff       	jmp    c000120a <dlmalloc+0x9e>
c00014dd:	83 c4 1c             	add    esp,0x1c
c00014e0:	89 f0                	mov    eax,esi
c00014e2:	5b                   	pop    ebx
c00014e3:	ba 00 41 02 c0       	mov    edx,0xc0024100
c00014e8:	5e                   	pop    esi
c00014e9:	5f                   	pop    edi
c00014ea:	5d                   	pop    ebp
c00014eb:	e9 13 fa ff ff       	jmp    c0000f03 <sYSMALLOc>
c00014f0:	31 c0                	xor    eax,eax
c00014f2:	83 c4 1c             	add    esp,0x1c
c00014f5:	5b                   	pop    ebx
c00014f6:	5e                   	pop    esi
c00014f7:	5f                   	pop    edi
c00014f8:	5d                   	pop    ebp
c00014f9:	c3                   	ret    

c00014fa <iALLOc>:
c00014fa:	55                   	push   ebp
c00014fb:	89 c5                	mov    ebp,eax
c00014fd:	57                   	push   edi
c00014fe:	56                   	push   esi
c00014ff:	53                   	push   ebx
c0001500:	83 ec 2c             	sub    esp,0x2c
c0001503:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000150b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001516:	75 12                	jne    c000152a <iALLOc+0x30>
c0001518:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000151c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001521:	e8 01 f8 ff ff       	call   c0000d27 <malloc_consolidate>
c0001526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000152a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000152f:	74 12                	je     c0001543 <iALLOc+0x49>
c0001531:	85 ed                	test   ebp,ebp
c0001533:	0f 84 64 01 00 00    	je     c000169d <iALLOc+0x1a3>
c0001539:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001541:	eb 33                	jmp    c0001576 <iALLOc+0x7c>
c0001543:	85 ed                	test   ebp,ebp
c0001545:	75 14                	jne    c000155b <iALLOc+0x61>
c0001547:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000154f:	83 c4 2c             	add    esp,0x2c
c0001552:	5b                   	pop    ebx
c0001553:	5e                   	pop    esi
c0001554:	5f                   	pop    edi
c0001555:	5d                   	pop    ebp
c0001556:	e9 11 fc ff ff       	jmp    c000116c <dlmalloc>
c000155b:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001563:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000156a:	83 f8 0f             	cmp    eax,0xf
c000156d:	76 07                	jbe    c0001576 <iALLOc+0x7c>
c000156f:	83 e0 f8             	and    eax,0xfffffff8
c0001572:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001576:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000157b:	75 09                	jne    c0001586 <iALLOc+0x8c>
c000157d:	89 d0                	mov    eax,edx
c000157f:	31 f6                	xor    esi,esi
c0001581:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001584:	eb 3b                	jmp    c00015c1 <iALLOc+0xc7>
c0001586:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000158e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	83 f8 0f             	cmp    eax,0xf
c0001596:	76 07                	jbe    c000159f <iALLOc+0xa5>
c0001598:	83 e0 f8             	and    eax,0xfffffff8
c000159b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000159f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015a3:	0f af f5             	imul   esi,ebp
c00015a6:	eb 25                	jmp    c00015cd <iALLOc+0xd3>
c00015a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015aa:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015ad:	bb 10 00 00 00       	mov    ebx,0x10
c00015b2:	83 f9 0f             	cmp    ecx,0xf
c00015b5:	76 05                	jbe    c00015bc <iALLOc+0xc2>
c00015b7:	83 e1 f8             	and    ecx,0xfffffff8
c00015ba:	89 cb                	mov    ebx,ecx
c00015bc:	01 de                	add    esi,ebx
c00015be:	83 c0 04             	add    eax,0x4
c00015c1:	39 c7                	cmp    edi,eax
c00015c3:	75 e3                	jne    c00015a8 <iALLOc+0xae>
c00015c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015d1:	83 ec 0c             	sub    esp,0xc
c00015d4:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c00015da:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c00015e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015e8:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015ec:	50                   	push   eax
c00015ed:	e8 7a fb ff ff       	call   c000116c <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c00015fb:	85 c0                	test   eax,eax
c00015fd:	0f 84 92 00 00 00    	je     c0001695 <iALLOc+0x19b>
c0001603:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001606:	8d 78 f8             	lea    edi,[eax-0x8]
c0001609:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000160d:	83 e3 fc             	and    ebx,0xfffffffc
c0001610:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001615:	74 1e                	je     c0001635 <iALLOc+0x13b>
c0001617:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000161b:	89 d9                	mov    ecx,ebx
c000161d:	52                   	push   edx
c000161e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001622:	83 e9 04             	sub    ecx,0x4
c0001625:	51                   	push   ecx
c0001626:	6a 00                	push   0x0
c0001628:	50                   	push   eax
c0001629:	e8 52 ef ff ff       	call   c0000580 <memset>
c000162e:	83 c4 10             	add    esp,0x10
c0001631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001635:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000163a:	75 14                	jne    c0001650 <iALLOc+0x156>
c000163c:	8d 04 37             	lea    eax,[edi+esi*1]
c000163f:	29 f3                	sub    ebx,esi
c0001641:	8d 48 08             	lea    ecx,[eax+0x8]
c0001644:	83 cb 01             	or     ebx,0x1
c0001647:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000164a:	89 f3                	mov    ebx,esi
c000164c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001650:	31 c0                	xor    eax,eax
c0001652:	4d                   	dec    ebp
c0001653:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001657:	8d 4f 08             	lea    ecx,[edi+0x8]
c000165a:	39 c5                	cmp    ebp,eax
c000165c:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000165f:	74 2c                	je     c000168d <iALLOc+0x193>
c0001661:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001665:	85 c9                	test   ecx,ecx
c0001667:	75 15                	jne    c000167e <iALLOc+0x184>
c0001669:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000166c:	8d 71 0b             	lea    esi,[ecx+0xb]
c000166f:	b9 10 00 00 00       	mov    ecx,0x10
c0001674:	83 fe 0f             	cmp    esi,0xf
c0001677:	76 05                	jbe    c000167e <iALLOc+0x184>
c0001679:	83 e6 f8             	and    esi,0xfffffff8
c000167c:	89 f1                	mov    ecx,esi
c000167e:	89 ce                	mov    esi,ecx
c0001680:	29 cb                	sub    ebx,ecx
c0001682:	83 ce 01             	or     esi,0x1
c0001685:	40                   	inc    eax
c0001686:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001689:	01 cf                	add    edi,ecx
c000168b:	eb c6                	jmp    c0001653 <iALLOc+0x159>
c000168d:	83 cb 01             	or     ebx,0x1
c0001690:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001693:	eb 08                	jmp    c000169d <iALLOc+0x1a3>
c0001695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000169d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a1:	83 c4 2c             	add    esp,0x2c
c00016a4:	5b                   	pop    ebx
c00016a5:	5e                   	pop    esi
c00016a6:	5f                   	pop    edi
c00016a7:	5d                   	pop    ebp
c00016a8:	c3                   	ret    

c00016a9 <dlrealloc>:
c00016a9:	55                   	push   ebp
c00016aa:	57                   	push   edi
c00016ab:	56                   	push   esi
c00016ac:	53                   	push   ebx
c00016ad:	83 ec 1c             	sub    esp,0x1c
c00016b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016b8:	85 db                	test   ebx,ebx
c00016ba:	75 10                	jne    c00016cc <dlrealloc+0x23>
c00016bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016c0:	83 c4 1c             	add    esp,0x1c
c00016c3:	5b                   	pop    ebx
c00016c4:	5e                   	pop    esi
c00016c5:	5f                   	pop    edi
c00016c6:	5d                   	pop    ebp
c00016c7:	e9 a0 fa ff ff       	jmp    c000116c <dlmalloc>
c00016cc:	83 f8 df             	cmp    eax,0xffffffdf
c00016cf:	76 07                	jbe    c00016d8 <dlrealloc+0x2f>
c00016d1:	31 db                	xor    ebx,ebx
c00016d3:	e9 6b 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c00016d8:	83 c0 0b             	add    eax,0xb
c00016db:	bd 10 00 00 00       	mov    ebp,0x10
c00016e0:	83 f8 0f             	cmp    eax,0xf
c00016e3:	76 05                	jbe    c00016ea <dlrealloc+0x41>
c00016e5:	83 e0 f8             	and    eax,0xfffffff8
c00016e8:	89 c5                	mov    ebp,eax
c00016ea:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016ed:	8d 7b f8             	lea    edi,[ebx-0x8]
c00016f0:	89 ce                	mov    esi,ecx
c00016f2:	83 e6 fc             	and    esi,0xfffffffc
c00016f5:	f6 c1 02             	test   cl,0x2
c00016f8:	75 d7                	jne    c00016d1 <dlrealloc+0x28>
c00016fa:	39 f5                	cmp    ebp,esi
c00016fc:	0f 86 04 01 00 00    	jbe    c0001806 <dlrealloc+0x15d>
c0001702:	8d 14 37             	lea    edx,[edi+esi*1]
c0001705:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000170b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000170e:	75 33                	jne    c0001743 <dlrealloc+0x9a>
c0001710:	83 e0 fc             	and    eax,0xfffffffc
c0001713:	01 f0                	add    eax,esi
c0001715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001719:	8d 45 10             	lea    eax,[ebp+0x10]
c000171c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001720:	77 49                	ja     c000176b <dlrealloc+0xc2>
c0001722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001726:	83 e1 01             	and    ecx,0x1
c0001729:	01 ef                	add    edi,ebp
c000172b:	09 e9                	or     ecx,ebp
c000172d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001730:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001736:	29 e8                	sub    eax,ebp
c0001738:	83 c8 01             	or     eax,0x1
c000173b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000173e:	e9 00 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c0001743:	89 c1                	mov    ecx,eax
c0001745:	83 e1 fe             	and    ecx,0xfffffffe
c0001748:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000174d:	75 1c                	jne    c000176b <dlrealloc+0xc2>
c000174f:	83 e0 fc             	and    eax,0xfffffffc
c0001752:	01 f0                	add    eax,esi
c0001754:	39 c5                	cmp    ebp,eax
c0001756:	77 13                	ja     c000176b <dlrealloc+0xc2>
c0001758:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000175b:	89 c6                	mov    esi,eax
c000175d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001760:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001763:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001766:	e9 9b 00 00 00       	jmp    c0001806 <dlrealloc+0x15d>
c000176b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000176f:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	50                   	push   eax
c0001776:	e8 f1 f9 ff ff       	call   c000116c <dlmalloc>
c000177b:	83 c4 10             	add    esp,0x10
c000177e:	85 c0                	test   eax,eax
c0001780:	0f 84 4b ff ff ff    	je     c00016d1 <dlrealloc+0x28>
c0001786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000178a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000178d:	39 ca                	cmp    edx,ecx
c000178f:	75 0a                	jne    c000179b <dlrealloc+0xf2>
c0001791:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001794:	83 e0 fc             	and    eax,0xfffffffc
c0001797:	01 c6                	add    esi,eax
c0001799:	eb 6b                	jmp    c0001806 <dlrealloc+0x15d>
c000179b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000179e:	83 f9 27             	cmp    ecx,0x27
c00017a1:	76 08                	jbe    c00017ab <dlrealloc+0x102>
c00017a3:	89 de                	mov    esi,ebx
c00017a5:	89 c7                	mov    edi,eax
c00017a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017a9:	eb 43                	jmp    c00017ee <dlrealloc+0x145>
c00017ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017ad:	83 f9 13             	cmp    ecx,0x13
c00017b0:	89 10                	mov    DWORD PTR [eax],edx
c00017b2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017be:	76 2e                	jbe    c00017ee <dlrealloc+0x145>
c00017c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017c3:	83 f9 1b             	cmp    ecx,0x1b
c00017c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017c9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017cf:	76 1d                	jbe    c00017ee <dlrealloc+0x145>
c00017d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017d4:	83 f9 23             	cmp    ecx,0x23
c00017d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00017da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00017dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00017e0:	76 0c                	jbe    c00017ee <dlrealloc+0x145>
c00017e2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00017e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00017e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00017eb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00017ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f2:	83 ec 0c             	sub    esp,0xc
c00017f5:	53                   	push   ebx
c00017f6:	e8 13 f6 ff ff       	call   c0000e0e <dlfree>
c00017fb:	83 c4 10             	add    esp,0x10
c00017fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001802:	89 c3                	mov    ebx,eax
c0001804:	eb 3d                	jmp    c0001843 <dlrealloc+0x19a>
c0001806:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001809:	8d 04 37             	lea    eax,[edi+esi*1]
c000180c:	89 f2                	mov    edx,esi
c000180e:	29 ea                	sub    edx,ebp
c0001810:	83 e1 01             	and    ecx,0x1
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	77 0b                	ja     c0001823 <dlrealloc+0x17a>
c0001818:	09 ce                	or     esi,ecx
c000181a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000181d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001821:	eb 20                	jmp    c0001843 <dlrealloc+0x19a>
c0001823:	01 ef                	add    edi,ebp
c0001825:	83 ca 01             	or     edx,0x1
c0001828:	09 cd                	or     ebp,ecx
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001830:	83 c7 08             	add    edi,0x8
c0001833:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001836:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000183a:	57                   	push   edi
c000183b:	e8 ce f5 ff ff       	call   c0000e0e <dlfree>
c0001840:	83 c4 10             	add    esp,0x10
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	89 d8                	mov    eax,ebx
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	c3                   	ret    

c000184d <dlmemalign>:
c000184d:	55                   	push   ebp
c000184e:	57                   	push   edi
c000184f:	56                   	push   esi
c0001850:	53                   	push   ebx
c0001851:	83 ec 0c             	sub    esp,0xc
c0001854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001858:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000185c:	83 fa 08             	cmp    edx,0x8
c000185f:	77 10                	ja     c0001871 <dlmemalign+0x24>
c0001861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001865:	83 c4 0c             	add    esp,0xc
c0001868:	5b                   	pop    ebx
c0001869:	5e                   	pop    esi
c000186a:	5f                   	pop    edi
c000186b:	5d                   	pop    ebp
c000186c:	e9 fb f8 ff ff       	jmp    c000116c <dlmalloc>
c0001871:	83 fa 0f             	cmp    edx,0xf
c0001874:	bf 10 00 00 00       	mov    edi,0x10
c0001879:	76 13                	jbe    c000188e <dlmemalign+0x41>
c000187b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000187e:	85 d1                	test   ecx,edx
c0001880:	75 04                	jne    c0001886 <dlmemalign+0x39>
c0001882:	89 d7                	mov    edi,edx
c0001884:	eb 08                	jmp    c000188e <dlmemalign+0x41>
c0001886:	39 d7                	cmp    edi,edx
c0001888:	73 04                	jae    c000188e <dlmemalign+0x41>
c000188a:	01 ff                	add    edi,edi
c000188c:	eb f8                	jmp    c0001886 <dlmemalign+0x39>
c000188e:	83 f8 df             	cmp    eax,0xffffffdf
c0001891:	76 07                	jbe    c000189a <dlmemalign+0x4d>
c0001893:	31 c0                	xor    eax,eax
c0001895:	e9 ce 00 00 00       	jmp    c0001968 <dlmemalign+0x11b>
c000189a:	83 c0 0b             	add    eax,0xb
c000189d:	bd 10 00 00 00       	mov    ebp,0x10
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	76 05                	jbe    c00018ac <dlmemalign+0x5f>
c00018a7:	83 e0 f8             	and    eax,0xfffffff8
c00018aa:	89 c5                	mov    ebp,eax
c00018ac:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b0:	83 ec 0c             	sub    esp,0xc
c00018b3:	50                   	push   eax
c00018b4:	e8 b3 f8 ff ff       	call   c000116c <dlmalloc>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	85 c0                	test   eax,eax
c00018be:	89 c1                	mov    ecx,eax
c00018c0:	74 d1                	je     c0001893 <dlmemalign+0x46>
c00018c2:	8d 70 f8             	lea    esi,[eax-0x8]
c00018c5:	31 d2                	xor    edx,edx
c00018c7:	f7 f7                	div    edi
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 62                	je     c000192f <dlmemalign+0xe2>
c00018cd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d1:	89 f8                	mov    eax,edi
c00018d3:	f7 d8                	neg    eax
c00018d5:	21 c3                	and    ebx,eax
c00018d7:	83 eb 08             	sub    ebx,0x8
c00018da:	89 d8                	mov    eax,ebx
c00018dc:	29 f0                	sub    eax,esi
c00018de:	83 f8 0f             	cmp    eax,0xf
c00018e1:	77 02                	ja     c00018e5 <dlmemalign+0x98>
c00018e3:	01 fb                	add    ebx,edi
c00018e5:	89 d8                	mov    eax,ebx
c00018e7:	29 f0                	sub    eax,esi
c00018e9:	89 c6                	mov    esi,eax
c00018eb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ee:	89 c2                	mov    edx,eax
c00018f0:	83 e2 fc             	and    edx,0xfffffffc
c00018f3:	29 f2                	sub    edx,esi
c00018f5:	a8 02                	test   al,0x2
c00018f7:	74 10                	je     c0001909 <dlmemalign+0xbc>
c00018f9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018fc:	83 ca 02             	or     edx,0x2
c00018ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001902:	8d 43 08             	lea    eax,[ebx+0x8]
c0001905:	89 33                	mov    DWORD PTR [ebx],esi
c0001907:	eb 5f                	jmp    c0001968 <dlmemalign+0x11b>
c0001909:	89 d0                	mov    eax,edx
c000190b:	83 ec 0c             	sub    esp,0xc
c000190e:	83 c8 01             	or     eax,0x1
c0001911:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001914:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001919:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000191c:	83 e0 01             	and    eax,0x1
c000191f:	09 f0                	or     eax,esi
c0001921:	89 de                	mov    esi,ebx
c0001923:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001926:	51                   	push   ecx
c0001927:	e8 e2 f4 ff ff       	call   c0000e0e <dlfree>
c000192c:	83 c4 10             	add    esp,0x10
c000192f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001932:	a8 02                	test   al,0x2
c0001934:	75 2f                	jne    c0001965 <dlmemalign+0x118>
c0001936:	8d 55 10             	lea    edx,[ebp+0x10]
c0001939:	83 e0 fc             	and    eax,0xfffffffc
c000193c:	39 c2                	cmp    edx,eax
c000193e:	73 25                	jae    c0001965 <dlmemalign+0x118>
c0001940:	29 e8                	sub    eax,ebp
c0001942:	83 ec 0c             	sub    esp,0xc
c0001945:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001948:	83 c8 01             	or     eax,0x1
c000194b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001954:	83 e0 01             	and    eax,0x1
c0001957:	09 c5                	or     ebp,eax
c0001959:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000195c:	52                   	push   edx
c000195d:	e8 ac f4 ff ff       	call   c0000e0e <dlfree>
c0001962:	83 c4 10             	add    esp,0x10
c0001965:	8d 46 08             	lea    eax,[esi+0x8]
c0001968:	83 c4 0c             	add    esp,0xc
c000196b:	5b                   	pop    ebx
c000196c:	5e                   	pop    esi
c000196d:	5f                   	pop    edi
c000196e:	5d                   	pop    ebp
c000196f:	c3                   	ret    

c0001970 <dlcalloc>:
c0001970:	53                   	push   ebx
c0001971:	83 ec 14             	sub    esp,0x14
c0001974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001978:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000197d:	50                   	push   eax
c000197e:	e8 e9 f7 ff ff       	call   c000116c <dlmalloc>
c0001983:	83 c4 10             	add    esp,0x10
c0001986:	85 c0                	test   eax,eax
c0001988:	89 c3                	mov    ebx,eax
c000198a:	74 77                	je     c0001a03 <dlcalloc+0x93>
c000198c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000198f:	89 d0                	mov    eax,edx
c0001991:	83 e0 fc             	and    eax,0xfffffffc
c0001994:	f6 c2 02             	test   dl,0x2
c0001997:	75 5a                	jne    c00019f3 <dlcalloc+0x83>
c0001999:	83 e8 04             	sub    eax,0x4
c000199c:	83 f8 27             	cmp    eax,0x27
c000199f:	76 03                	jbe    c00019a4 <dlcalloc+0x34>
c00019a1:	51                   	push   ecx
c00019a2:	eb 53                	jmp    c00019f7 <dlcalloc+0x87>
c00019a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019aa:	83 f8 13             	cmp    eax,0x13
c00019ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019bb:	76 46                	jbe    c0001a03 <dlcalloc+0x93>
c00019bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019c4:	83 f8 1b             	cmp    eax,0x1b
c00019c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ce:	76 33                	jbe    c0001a03 <dlcalloc+0x93>
c00019d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019d7:	83 f8 23             	cmp    eax,0x23
c00019da:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e1:	76 20                	jbe    c0001a03 <dlcalloc+0x93>
c00019e3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ea:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f1:	eb 10                	jmp    c0001a03 <dlcalloc+0x93>
c00019f3:	52                   	push   edx
c00019f4:	83 e8 08             	sub    eax,0x8
c00019f7:	50                   	push   eax
c00019f8:	6a 00                	push   0x0
c00019fa:	53                   	push   ebx
c00019fb:	e8 80 eb ff ff       	call   c0000580 <memset>
c0001a00:	83 c4 10             	add    esp,0x10
c0001a03:	83 c4 08             	add    esp,0x8
c0001a06:	89 d8                	mov    eax,ebx
c0001a08:	5b                   	pop    ebx
c0001a09:	c3                   	ret    

c0001a0a <dlcfree>:
c0001a0a:	e9 ff f3 ff ff       	jmp    c0000e0e <dlfree>

c0001a0f <dlindependent_calloc>:
c0001a0f:	83 ec 28             	sub    esp,0x28
c0001a12:	b9 03 00 00 00       	mov    ecx,0x3
c0001a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a27:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2b:	e8 ca fa ff ff       	call   c00014fa <iALLOc>
c0001a30:	83 c4 2c             	add    esp,0x2c
c0001a33:	c3                   	ret    

c0001a34 <dlindependent_comalloc>:
c0001a34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a38:	31 c9                	xor    ecx,ecx
c0001a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a46:	e9 af fa ff ff       	jmp    c00014fa <iALLOc>

c0001a4b <dlvalloc>:
c0001a4b:	83 ec 0c             	sub    esp,0xc
c0001a4e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a55:	75 0a                	jne    c0001a61 <dlvalloc+0x16>
c0001a57:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5c:	e8 c6 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a61:	50                   	push   eax
c0001a62:	50                   	push   eax
c0001a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a67:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c0001a6d:	e8 db fd ff ff       	call   c000184d <dlmemalign>
c0001a72:	83 c4 1c             	add    esp,0x1c
c0001a75:	c3                   	ret    

c0001a76 <dlpvalloc>:
c0001a76:	83 ec 0c             	sub    esp,0xc
c0001a79:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a80:	75 0a                	jne    c0001a8c <dlpvalloc+0x16>
c0001a82:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a87:	e8 9b f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a8c:	52                   	push   edx
c0001a8d:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a92:	52                   	push   edx
c0001a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	f7 d9                	neg    ecx
c0001a9b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a9f:	21 ca                	and    edx,ecx
c0001aa1:	52                   	push   edx
c0001aa2:	50                   	push   eax
c0001aa3:	e8 a5 fd ff ff       	call   c000184d <dlmemalign>
c0001aa8:	83 c4 1c             	add    esp,0x1c
c0001aab:	c3                   	ret    

c0001aac <dlmalloc_trim>:
c0001aac:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001ab1:	e8 71 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	c3                   	ret    

c0001ab9 <dlmalloc_usable_size>:
c0001ab9:	53                   	push   ebx
c0001aba:	31 c0                	xor    eax,eax
c0001abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac0:	85 c9                	test   ecx,ecx
c0001ac2:	74 24                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ac4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ac7:	f6 c2 02             	test   dl,0x2
c0001aca:	74 08                	je     c0001ad4 <dlmalloc_usable_size+0x1b>
c0001acc:	83 e2 fc             	and    edx,0xfffffffc
c0001acf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad2:	eb 14                	jmp    c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ad4:	89 d3                	mov    ebx,edx
c0001ad6:	31 c0                	xor    eax,eax
c0001ad8:	83 e3 fe             	and    ebx,0xfffffffe
c0001adb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae0:	74 06                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ae2:	83 e2 fc             	and    edx,0xfffffffc
c0001ae5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ae8:	5b                   	pop    ebx
c0001ae9:	c3                   	ret    

c0001aea <dlmallinfo>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 08             	sub    esp,0x8
c0001af1:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afc:	75 0a                	jne    c0001b08 <dlmallinfo+0x1e>
c0001afe:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b03:	e8 1f f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001b08:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001b0d:	31 ed                	xor    ebp,ebp
c0001b0f:	31 c9                	xor    ecx,ecx
c0001b11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b14:	83 e0 fc             	and    eax,0xfffffffc
c0001b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b1b:	31 c0                	xor    eax,eax
c0001b1d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001b24:	85 d2                	test   edx,edx
c0001b26:	74 0e                	je     c0001b36 <dlmallinfo+0x4c>
c0001b28:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b2b:	45                   	inc    ebp
c0001b2c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b2f:	83 e6 fc             	and    esi,0xfffffffc
c0001b32:	01 f1                	add    ecx,esi
c0001b34:	eb ee                	jmp    c0001b24 <dlmallinfo+0x3a>
c0001b36:	40                   	inc    eax
c0001b37:	83 f8 0a             	cmp    eax,0xa
c0001b3a:	75 e1                	jne    c0001b1d <dlmallinfo+0x33>
c0001b3c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b47:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b4a:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001b4f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b52:	39 f0                	cmp    eax,esi
c0001b54:	74 10                	je     c0001b66 <dlmallinfo+0x7c>
c0001b56:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b59:	ff 04 24             	inc    DWORD PTR [esp]
c0001b5c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b5f:	83 e7 fc             	and    edi,0xfffffffc
c0001b62:	01 fa                	add    edx,edi
c0001b64:	eb ec                	jmp    c0001b52 <dlmallinfo+0x68>
c0001b66:	83 c0 08             	add    eax,0x8
c0001b69:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001b6e:	75 df                	jne    c0001b4f <dlmallinfo+0x65>
c0001b70:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001b7e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b81:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b84:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b87:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b8a:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b90:	89 03                	mov    DWORD PTR [ebx],eax
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b9b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b9e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba1:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	89 d8                	mov    eax,ebx
c0001bac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001baf:	83 c4 08             	add    esp,0x8
c0001bb2:	5b                   	pop    ebx
c0001bb3:	5e                   	pop    esi
c0001bb4:	5f                   	pop    edi
c0001bb5:	5d                   	pop    ebp
c0001bb6:	c2 04 00             	ret    0x4

c0001bb9 <dlmalloc_stats>:
c0001bb9:	83 ec 30             	sub    esp,0x30
c0001bbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc0:	50                   	push   eax
c0001bc1:	e8 24 ff ff ff       	call   c0001aea <dlmallinfo>
c0001bc6:	83 c4 30             	add    esp,0x30
c0001bc9:	c3                   	ret    

c0001bca <dlmallopt>:
c0001bca:	56                   	push   esi
c0001bcb:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001bd0:	53                   	push   ebx
c0001bd1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bd9:	e8 49 f1 ff ff       	call   c0000d27 <malloc_consolidate>
c0001bde:	8d 46 04             	lea    eax,[esi+0x4]
c0001be1:	83 f8 05             	cmp    eax,0x5
c0001be4:	77 67                	ja     c0001c4d <dlmallopt+0x83>
c0001be6:	ff 24 85 e4 f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0f1c]
c0001bed:	83 fb 50             	cmp    ebx,0x50
c0001bf0:	77 5b                	ja     c0001c4d <dlmallopt+0x83>
c0001bf2:	85 db                	test   ebx,ebx
c0001bf4:	ba 08 00 00 00       	mov    edx,0x8
c0001bf9:	74 12                	je     c0001c0d <dlmallopt+0x43>
c0001bfb:	83 c3 0b             	add    ebx,0xb
c0001bfe:	ba 10 00 00 00       	mov    edx,0x10
c0001c03:	83 fb 0f             	cmp    ebx,0xf
c0001c06:	76 05                	jbe    c0001c0d <dlmallopt+0x43>
c0001c08:	89 da                	mov    edx,ebx
c0001c0a:	83 e2 f8             	and    edx,0xfffffff8
c0001c0d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001c12:	83 e0 03             	and    eax,0x3
c0001c15:	09 d0                	or     eax,edx
c0001c17:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001c1c:	eb 31                	jmp    c0001c4f <dlmallopt+0x85>
c0001c1e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001c24:	eb 06                	jmp    c0001c2c <dlmallopt+0x62>
c0001c26:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001c2c:	be 01 00 00 00       	mov    esi,0x1
c0001c31:	eb 1c                	jmp    c0001c4f <dlmallopt+0x85>
c0001c33:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001c39:	eb f1                	jmp    c0001c2c <dlmallopt+0x62>
c0001c3b:	31 f6                	xor    esi,esi
c0001c3d:	85 db                	test   ebx,ebx
c0001c3f:	75 0e                	jne    c0001c4f <dlmallopt+0x85>
c0001c41:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001c4b:	eb df                	jmp    c0001c2c <dlmallopt+0x62>
c0001c4d:	31 f6                	xor    esi,esi
c0001c4f:	5b                   	pop    ebx
c0001c50:	89 f0                	mov    eax,esi
c0001c52:	5e                   	pop    esi
c0001c53:	c3                   	ret    

c0001c54 <isblank>:
c0001c54:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c59:	74 09                	je     c0001c64 <isblank+0x10>
c0001c5b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c60:	75 0a                	jne    c0001c6c <isblank+0x18>
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <iscntrl>:
c0001c74:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001c79:	7e 09                	jle    c0001c84 <iscntrl+0x10>
c0001c7b:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001c80:	75 0a                	jne    c0001c8c <iscntrl+0x18>
c0001c82:	66 90                	xchg   ax,ax
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax
c0001c8c:	b8 00 00 00 00       	mov    eax,0x0
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax

c0001c94 <isdigit>:
c0001c94:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c99:	7e 0d                	jle    c0001ca8 <isdigit+0x14>
c0001c9b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ca0:	7f 06                	jg     c0001ca8 <isdigit+0x14>
c0001ca2:	b8 01 00 00 00       	mov    eax,0x1
c0001ca7:	c3                   	ret    
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <islower>:
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 0d                	jle    c0001cc4 <islower+0x14>
c0001cb7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cbc:	7f 06                	jg     c0001cc4 <islower+0x14>
c0001cbe:	b8 01 00 00 00       	mov    eax,0x1
c0001cc3:	c3                   	ret    
c0001cc4:	b8 00 00 00 00       	mov    eax,0x0
c0001cc9:	c3                   	ret    
c0001cca:	66 90                	xchg   ax,ax

c0001ccc <isspace>:
c0001ccc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cd1:	7c 19                	jl     c0001cec <isspace+0x20>
c0001cd3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001cd8:	7e 0a                	jle    c0001ce4 <isspace+0x18>
c0001cda:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cdf:	75 0b                	jne    c0001cec <isspace+0x20>
c0001ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0001ce4:	b8 01 00 00 00       	mov    eax,0x1
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <isupper>:
c0001cf4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cf9:	7e 0d                	jle    c0001d08 <isupper+0x14>
c0001cfb:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d00:	7f 06                	jg     c0001d08 <isupper+0x14>
c0001d02:	b8 01 00 00 00       	mov    eax,0x1
c0001d07:	c3                   	ret    
c0001d08:	b8 00 00 00 00       	mov    eax,0x0
c0001d0d:	c3                   	ret    
c0001d0e:	66 90                	xchg   ax,ax

c0001d10 <isalpha>:
c0001d10:	83 ec 04             	sub    esp,0x4
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 d5 ff ff ff       	call   c0001cf4 <isupper>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 11                	jne    c0001d34 <isalpha+0x24>
c0001d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d2a:	e8 81 ff ff ff       	call   c0001cb0 <islower>
c0001d2f:	85 c0                	test   eax,eax
c0001d31:	74 09                	je     c0001d3c <isalpha+0x2c>
c0001d33:	90                   	nop
c0001d34:	b8 01 00 00 00       	mov    eax,0x1
c0001d39:	eb 09                	jmp    c0001d44 <isalpha+0x34>
c0001d3b:	90                   	nop
c0001d3c:	b8 00 00 00 00       	mov    eax,0x0
c0001d41:	8d 76 00             	lea    esi,[esi+0x0]
c0001d44:	83 c4 04             	add    esp,0x4
c0001d47:	c3                   	ret    

c0001d48 <isalnum>:
c0001d48:	83 ec 04             	sub    esp,0x4
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 b9 ff ff ff       	call   c0001d10 <isalpha>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	75 11                	jne    c0001d6c <isalnum+0x24>
c0001d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d62:	e8 2d ff ff ff       	call   c0001c94 <isdigit>
c0001d67:	85 c0                	test   eax,eax
c0001d69:	74 09                	je     c0001d74 <isalnum+0x2c>
c0001d6b:	90                   	nop
c0001d6c:	b8 01 00 00 00       	mov    eax,0x1
c0001d71:	eb 09                	jmp    c0001d7c <isalnum+0x34>
c0001d73:	90                   	nop
c0001d74:	b8 00 00 00 00       	mov    eax,0x0
c0001d79:	8d 76 00             	lea    esi,[esi+0x0]
c0001d7c:	83 c4 04             	add    esp,0x4
c0001d7f:	c3                   	ret    

c0001d80 <ispunct>:
c0001d80:	83 ec 04             	sub    esp,0x4
c0001d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8a:	e8 b9 ff ff ff       	call   c0001d48 <isalnum>
c0001d8f:	85 c0                	test   eax,eax
c0001d91:	75 29                	jne    c0001dbc <ispunct+0x3c>
c0001d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9a:	e8 2d ff ff ff       	call   c0001ccc <isspace>
c0001d9f:	85 c0                	test   eax,eax
c0001da1:	75 19                	jne    c0001dbc <ispunct+0x3c>
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 c5 fe ff ff       	call   c0001c74 <iscntrl>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 09                	jne    c0001dbc <ispunct+0x3c>
c0001db3:	b8 01 00 00 00       	mov    eax,0x1
c0001db8:	eb 0a                	jmp    c0001dc4 <ispunct+0x44>
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 c4 04             	add    esp,0x4
c0001dc7:	c3                   	ret    

c0001dc8 <isgraph>:
c0001dc8:	83 ec 04             	sub    esp,0x4
c0001dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001dcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd2:	e8 71 ff ff ff       	call   c0001d48 <isalnum>
c0001dd7:	85 c0                	test   eax,eax
c0001dd9:	75 11                	jne    c0001dec <isgraph+0x24>
c0001ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de2:	e8 99 ff ff ff       	call   c0001d80 <ispunct>
c0001de7:	85 c0                	test   eax,eax
c0001de9:	74 09                	je     c0001df4 <isgraph+0x2c>
c0001deb:	90                   	nop
c0001dec:	b8 01 00 00 00       	mov    eax,0x1
c0001df1:	eb 09                	jmp    c0001dfc <isgraph+0x34>
c0001df3:	90                   	nop
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	8d 76 00             	lea    esi,[esi+0x0]
c0001dfc:	83 c4 04             	add    esp,0x4
c0001dff:	c3                   	ret    

c0001e00 <isprint>:
c0001e00:	83 ec 04             	sub    esp,0x4
c0001e03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e0a:	e8 b9 ff ff ff       	call   c0001dc8 <isgraph>
c0001e0f:	85 c0                	test   eax,eax
c0001e11:	75 09                	jne    c0001e1c <isprint+0x1c>
c0001e13:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001e18:	75 0a                	jne    c0001e24 <isprint+0x24>
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 01 00 00 00       	mov    eax,0x1
c0001e21:	eb 09                	jmp    c0001e2c <isprint+0x2c>
c0001e23:	90                   	nop
c0001e24:	b8 00 00 00 00       	mov    eax,0x0
c0001e29:	8d 76 00             	lea    esi,[esi+0x0]
c0001e2c:	83 c4 04             	add    esp,0x4
c0001e2f:	c3                   	ret    

c0001e30 <isxdigit>:
c0001e30:	83 ec 04             	sub    esp,0x4
c0001e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e3a:	e8 55 fe ff ff       	call   c0001c94 <isdigit>
c0001e3f:	85 c0                	test   eax,eax
c0001e41:	75 21                	jne    c0001e64 <isxdigit+0x34>
c0001e43:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001e48:	7e 0a                	jle    c0001e54 <isxdigit+0x24>
c0001e4a:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001e4f:	7e 13                	jle    c0001e64 <isxdigit+0x34>
c0001e51:	8d 76 00             	lea    esi,[esi+0x0]
c0001e54:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001e59:	7e 11                	jle    c0001e6c <isxdigit+0x3c>
c0001e5b:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001e60:	7f 0a                	jg     c0001e6c <isxdigit+0x3c>
c0001e62:	66 90                	xchg   ax,ax
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	eb 09                	jmp    c0001e74 <isxdigit+0x44>
c0001e6b:	90                   	nop
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	8d 76 00             	lea    esi,[esi+0x0]
c0001e74:	83 c4 04             	add    esp,0x4
c0001e77:	c3                   	ret    

c0001e78 <disk_status>:
c0001e78:	31 c0                	xor    eax,eax
c0001e7a:	c3                   	ret    

c0001e7b <disk_initialize>:
c0001e7b:	31 c0                	xor    eax,eax
c0001e7d:	c3                   	ret    

c0001e7e <disk_read>:
c0001e7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e83:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e8f:	e9 c0 69 01 00       	jmp    c0018854 <fatWrapperReadDisk>

c0001e94 <disk_write>:
c0001e94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e99:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ea5:	e9 f2 69 01 00       	jmp    c001889c <fatWrapperWriteDisk>

c0001eaa <disk_ioctl>:
c0001eaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001eb3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eb8:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ec4:	e9 1b 6a 01 00       	jmp    c00188e4 <fatWrapperIoctl>

c0001ec9 <ld_word>:
c0001ec9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ecd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed0:	c1 e2 08             	shl    edx,0x8
c0001ed3:	09 d0                	or     eax,edx
c0001ed5:	c3                   	ret    

c0001ed6 <ld_dword>:
c0001ed6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001eda:	89 d1                	mov    ecx,edx
c0001edc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ee0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee3:	c1 e1 08             	shl    ecx,0x8
c0001ee6:	09 ca                	or     edx,ecx
c0001ee8:	c1 e2 08             	shl    edx,0x8
c0001eeb:	09 d0                	or     eax,edx
c0001eed:	c3                   	ret    

c0001eee <st_word>:
c0001eee:	66 89 10             	mov    WORD PTR [eax],dx
c0001ef1:	c3                   	ret    

c0001ef2 <st_dword>:
c0001ef2:	89 10                	mov    DWORD PTR [eax],edx
c0001ef4:	c3                   	ret    

c0001ef5 <mem_cpy>:
c0001ef5:	85 c9                	test   ecx,ecx
c0001ef7:	74 10                	je     c0001f09 <mem_cpy+0x14>
c0001ef9:	57                   	push   edi
c0001efa:	01 c1                	add    ecx,eax
c0001efc:	56                   	push   esi
c0001efd:	89 c7                	mov    edi,eax
c0001eff:	89 d6                	mov    esi,edx
c0001f01:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f02:	39 f9                	cmp    ecx,edi
c0001f04:	75 fb                	jne    c0001f01 <mem_cpy+0xc>
c0001f06:	5e                   	pop    esi
c0001f07:	5f                   	pop    edi
c0001f08:	c3                   	ret    
c0001f09:	c3                   	ret    

c0001f0a <mem_set>:
c0001f0a:	01 c1                	add    ecx,eax
c0001f0c:	88 10                	mov    BYTE PTR [eax],dl
c0001f0e:	40                   	inc    eax
c0001f0f:	39 c8                	cmp    eax,ecx
c0001f11:	75 f9                	jne    c0001f0c <mem_set+0x2>
c0001f13:	c3                   	ret    

c0001f14 <mem_cmp>:
c0001f14:	57                   	push   edi
c0001f15:	56                   	push   esi
c0001f16:	89 c6                	mov    esi,eax
c0001f18:	53                   	push   ebx
c0001f19:	46                   	inc    esi
c0001f1a:	42                   	inc    edx
c0001f1b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f1f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f23:	29 fb                	sub    ebx,edi
c0001f25:	89 cf                	mov    edi,ecx
c0001f27:	29 f7                	sub    edi,esi
c0001f29:	01 c7                	add    edi,eax
c0001f2b:	74 04                	je     c0001f31 <mem_cmp+0x1d>
c0001f2d:	85 db                	test   ebx,ebx
c0001f2f:	74 e8                	je     c0001f19 <mem_cmp+0x5>
c0001f31:	89 d8                	mov    eax,ebx
c0001f33:	5b                   	pop    ebx
c0001f34:	5e                   	pop    esi
c0001f35:	5f                   	pop    edi
c0001f36:	c3                   	ret    

c0001f37 <chk_chr>:
c0001f37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f3a:	84 c9                	test   cl,cl
c0001f3c:	74 07                	je     c0001f45 <chk_chr+0xe>
c0001f3e:	39 d1                	cmp    ecx,edx
c0001f40:	74 03                	je     c0001f45 <chk_chr+0xe>
c0001f42:	40                   	inc    eax
c0001f43:	eb f2                	jmp    c0001f37 <chk_chr>
c0001f45:	89 c8                	mov    eax,ecx
c0001f47:	c3                   	ret    

c0001f48 <dbc_1st>:
c0001f48:	31 c0                	xor    eax,eax
c0001f4a:	c3                   	ret    

c0001f4b <dbc_2nd>:
c0001f4b:	31 c0                	xor    eax,eax
c0001f4d:	c3                   	ret    

c0001f4e <tchar2uni>:
c0001f4e:	57                   	push   edi
c0001f4f:	56                   	push   esi
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	53                   	push   ebx
c0001f53:	51                   	push   ecx
c0001f54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f56:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001f58:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001f5b:	84 d2                	test   dl,dl
c0001f5d:	78 0a                	js     c0001f69 <tchar2uni+0x1b>
c0001f5f:	0f b6 c2             	movzx  eax,dl
c0001f62:	89 cf                	mov    edi,ecx
c0001f64:	e9 a3 00 00 00       	jmp    c000200c <tchar2uni+0xbe>
c0001f69:	88 d0                	mov    al,dl
c0001f6b:	24 e0                	and    al,0xe0
c0001f6d:	3c c0                	cmp    al,0xc0
c0001f6f:	75 0d                	jne    c0001f7e <tchar2uni+0x30>
c0001f71:	80 e2 1f             	and    dl,0x1f
c0001f74:	0f b6 c2             	movzx  eax,dl
c0001f77:	ba 01 00 00 00       	mov    edx,0x1
c0001f7c:	eb 32                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f7e:	88 d0                	mov    al,dl
c0001f80:	24 f0                	and    al,0xf0
c0001f82:	3c e0                	cmp    al,0xe0
c0001f84:	75 0d                	jne    c0001f93 <tchar2uni+0x45>
c0001f86:	80 e2 0f             	and    dl,0xf
c0001f89:	0f b6 c2             	movzx  eax,dl
c0001f8c:	ba 02 00 00 00       	mov    edx,0x2
c0001f91:	eb 1d                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f93:	88 d0                	mov    al,dl
c0001f95:	24 f8                	and    al,0xf8
c0001f97:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f9b:	83 c8 ff             	or     eax,0xffffffff
c0001f9e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001fa3:	75 6e                	jne    c0002013 <tchar2uni+0xc5>
c0001fa5:	80 e2 07             	and    dl,0x7
c0001fa8:	0f b6 c2             	movzx  eax,dl
c0001fab:	ba 03 00 00 00       	mov    edx,0x3
c0001fb0:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001fb4:	41                   	inc    ecx
c0001fb5:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001fb8:	88 da                	mov    dl,bl
c0001fba:	80 e2 c0             	and    dl,0xc0
c0001fbd:	80 fa 80             	cmp    dl,0x80
c0001fc0:	75 4e                	jne    c0002010 <tchar2uni+0xc2>
c0001fc2:	c1 e0 06             	shl    eax,0x6
c0001fc5:	80 e3 3f             	and    bl,0x3f
c0001fc8:	0f b6 db             	movzx  ebx,bl
c0001fcb:	09 d8                	or     eax,ebx
c0001fcd:	39 f9                	cmp    ecx,edi
c0001fcf:	75 e3                	jne    c0001fb4 <tchar2uni+0x66>
c0001fd1:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001fd7:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001fdd:	76 31                	jbe    c0002010 <tchar2uni+0xc2>
c0001fdf:	8d 50 80             	lea    edx,[eax-0x80]
c0001fe2:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001fe8:	77 26                	ja     c0002010 <tchar2uni+0xc2>
c0001fea:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fef:	76 1b                	jbe    c000200c <tchar2uni+0xbe>
c0001ff1:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001ff7:	25 ff 03 00 00       	and    eax,0x3ff
c0001ffc:	c1 e1 06             	shl    ecx,0x6
c0001fff:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002005:	09 c8                	or     eax,ecx
c0002007:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c000200c:	89 3e                	mov    DWORD PTR [esi],edi
c000200e:	eb 03                	jmp    c0002013 <tchar2uni+0xc5>
c0002010:	83 c8 ff             	or     eax,0xffffffff
c0002013:	5a                   	pop    edx
c0002014:	5b                   	pop    ebx
c0002015:	5e                   	pop    esi
c0002016:	5f                   	pop    edi
c0002017:	c3                   	ret    

c0002018 <put_utf>:
c0002018:	53                   	push   ebx
c0002019:	89 d3                	mov    ebx,edx
c000201b:	31 d2                	xor    edx,edx
c000201d:	83 f8 7f             	cmp    eax,0x7f
c0002020:	77 11                	ja     c0002033 <put_utf+0x1b>
c0002022:	85 c9                	test   ecx,ecx
c0002024:	0f 84 da 00 00 00    	je     c0002104 <put_utf+0xec>
c000202a:	88 03                	mov    BYTE PTR [ebx],al
c000202c:	b2 01                	mov    dl,0x1
c000202e:	e9 d1 00 00 00       	jmp    c0002104 <put_utf+0xec>
c0002033:	3d ff 07 00 00       	cmp    eax,0x7ff
c0002038:	77 21                	ja     c000205b <put_utf+0x43>
c000203a:	83 f9 01             	cmp    ecx,0x1
c000203d:	0f 86 c1 00 00 00    	jbe    c0002104 <put_utf+0xec>
c0002043:	89 c2                	mov    edx,eax
c0002045:	24 3f                	and    al,0x3f
c0002047:	c1 ea 06             	shr    edx,0x6
c000204a:	0c 80                	or     al,0x80
c000204c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000204f:	80 ca c0             	or     dl,0xc0
c0002052:	88 13                	mov    BYTE PTR [ebx],dl
c0002054:	b2 02                	mov    dl,0x2
c0002056:	e9 a9 00 00 00       	jmp    c0002104 <put_utf+0xec>
c000205b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002060:	77 3e                	ja     c00020a0 <put_utf+0x88>
c0002062:	83 f9 02             	cmp    ecx,0x2
c0002065:	0f 86 99 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000206b:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0002071:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002077:	0f 86 87 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000207d:	89 c2                	mov    edx,eax
c000207f:	c1 ea 0c             	shr    edx,0xc
c0002082:	80 ca e0             	or     dl,0xe0
c0002085:	88 13                	mov    BYTE PTR [ebx],dl
c0002087:	89 c2                	mov    edx,eax
c0002089:	24 3f                	and    al,0x3f
c000208b:	c1 ea 06             	shr    edx,0x6
c000208e:	0c 80                	or     al,0x80
c0002090:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002093:	80 e2 3f             	and    dl,0x3f
c0002096:	80 ca 80             	or     dl,0x80
c0002099:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000209c:	b2 03                	mov    dl,0x3
c000209e:	eb 64                	jmp    c0002104 <put_utf+0xec>
c00020a0:	83 f9 03             	cmp    ecx,0x3
c00020a3:	76 5f                	jbe    c0002104 <put_utf+0xec>
c00020a5:	89 c2                	mov    edx,eax
c00020a7:	0f b7 c0             	movzx  eax,ax
c00020aa:	66 31 d2             	xor    dx,dx
c00020ad:	2d 00 dc 00 00       	sub    eax,0xdc00
c00020b2:	81 c2 00 00 00 28    	add    edx,0x28000000
c00020b8:	c1 ea 06             	shr    edx,0x6
c00020bb:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c00020c1:	77 3f                	ja     c0002102 <put_utf+0xea>
c00020c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00020c8:	77 38                	ja     c0002102 <put_utf+0xea>
c00020ca:	09 d0                	or     eax,edx
c00020cc:	05 00 00 01 00       	add    eax,0x10000
c00020d1:	89 c2                	mov    edx,eax
c00020d3:	c1 ea 12             	shr    edx,0x12
c00020d6:	80 ca f0             	or     dl,0xf0
c00020d9:	88 13                	mov    BYTE PTR [ebx],dl
c00020db:	89 c2                	mov    edx,eax
c00020dd:	c1 ea 0c             	shr    edx,0xc
c00020e0:	80 e2 3f             	and    dl,0x3f
c00020e3:	80 ca 80             	or     dl,0x80
c00020e6:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c00020e9:	89 c2                	mov    edx,eax
c00020eb:	24 3f                	and    al,0x3f
c00020ed:	c1 ea 06             	shr    edx,0x6
c00020f0:	0c 80                	or     al,0x80
c00020f2:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00020f5:	80 e2 3f             	and    dl,0x3f
c00020f8:	80 ca 80             	or     dl,0x80
c00020fb:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c00020fe:	b2 04                	mov    dl,0x4
c0002100:	eb 02                	jmp    c0002104 <put_utf+0xec>
c0002102:	31 d2                	xor    edx,edx
c0002104:	5b                   	pop    ebx
c0002105:	88 d0                	mov    al,dl
c0002107:	c3                   	ret    

c0002108 <clst2sect>:
c0002108:	8d 4a fe             	lea    ecx,[edx-0x2]
c000210b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000210e:	83 ea 02             	sub    edx,0x2
c0002111:	39 ca                	cmp    edx,ecx
c0002113:	76 0d                	jbe    c0002122 <clst2sect+0x1a>
c0002115:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002119:	0f af d1             	imul   edx,ecx
c000211c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000211f:	89 d0                	mov    eax,edx
c0002121:	c3                   	ret    
c0002122:	31 c0                	xor    eax,eax
c0002124:	c3                   	ret    

c0002125 <pick_lfn>:
c0002125:	55                   	push   ebp
c0002126:	57                   	push   edi
c0002127:	89 d7                	mov    edi,edx
c0002129:	56                   	push   esi
c000212a:	53                   	push   ebx
c000212b:	89 c3                	mov    ebx,eax
c000212d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002130:	e8 94 fd ff ff       	call   c0001ec9 <ld_word>
c0002135:	66 85 c0             	test   ax,ax
c0002138:	74 04                	je     c000213e <pick_lfn+0x19>
c000213a:	31 c0                	xor    eax,eax
c000213c:	eb 65                	jmp    c00021a3 <pick_lfn+0x7e>
c000213e:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c0002141:	be 01 00 00 00       	mov    esi,0x1
c0002146:	31 ed                	xor    ebp,ebp
c0002148:	83 e1 bf             	and    ecx,0xffffffbf
c000214b:	49                   	dec    ecx
c000214c:	6b c9 0d             	imul   ecx,ecx,0xd
c000214f:	0f b6 85 40 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0dc0]
c0002156:	01 f8                	add    eax,edi
c0002158:	e8 6c fd ff ff       	call   c0001ec9 <ld_word>
c000215d:	85 f6                	test   esi,esi
c000215f:	0f b7 d0             	movzx  edx,ax
c0002162:	74 11                	je     c0002175 <pick_lfn+0x50>
c0002164:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000216a:	77 ce                	ja     c000213a <pick_lfn+0x15>
c000216c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0002170:	89 d6                	mov    esi,edx
c0002172:	41                   	inc    ecx
c0002173:	eb 08                	jmp    c000217d <pick_lfn+0x58>
c0002175:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000217b:	75 bd                	jne    c000213a <pick_lfn+0x15>
c000217d:	45                   	inc    ebp
c000217e:	83 fd 0d             	cmp    ebp,0xd
c0002181:	75 cc                	jne    c000214f <pick_lfn+0x2a>
c0002183:	8a 07                	mov    al,BYTE PTR [edi]
c0002185:	c0 e8 06             	shr    al,0x6
c0002188:	24 01                	and    al,0x1
c000218a:	74 12                	je     c000219e <pick_lfn+0x79>
c000218c:	85 f6                	test   esi,esi
c000218e:	74 0e                	je     c000219e <pick_lfn+0x79>
c0002190:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002196:	77 a2                	ja     c000213a <pick_lfn+0x15>
c0002198:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000219e:	b8 01 00 00 00       	mov    eax,0x1
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	5f                   	pop    edi
c00021a6:	5d                   	pop    ebp
c00021a7:	c3                   	ret    

c00021a8 <put_lfn>:
c00021a8:	55                   	push   ebp
c00021a9:	31 ed                	xor    ebp,ebp
c00021ab:	57                   	push   edi
c00021ac:	89 d7                	mov    edi,edx
c00021ae:	56                   	push   esi
c00021af:	31 f6                	xor    esi,esi
c00021b1:	53                   	push   ebx
c00021b2:	53                   	push   ebx
c00021b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00021b6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00021ba:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021c0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021c3:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021c6:	31 d2                	xor    edx,edx
c00021c8:	e8 21 fd ff ff       	call   c0001eee <st_word>
c00021cd:	0f b6 d9             	movzx  ebx,cl
c00021d0:	4b                   	dec    ebx
c00021d1:	6b db 0d             	imul   ebx,ebx,0xd
c00021d4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00021da:	74 08                	je     c00021e4 <put_lfn+0x3c>
c00021dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00021df:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00021e3:	43                   	inc    ebx
c00021e4:	0f b6 85 40 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0dc0]
c00021eb:	89 f2                	mov    edx,esi
c00021ed:	01 f8                	add    eax,edi
c00021ef:	e8 fa fc ff ff       	call   c0001eee <st_word>
c00021f4:	85 f6                	test   esi,esi
c00021f6:	75 05                	jne    c00021fd <put_lfn+0x55>
c00021f8:	be ff ff 00 00       	mov    esi,0xffff
c00021fd:	45                   	inc    ebp
c00021fe:	83 fd 0d             	cmp    ebp,0xd
c0002201:	75 d1                	jne    c00021d4 <put_lfn+0x2c>
c0002203:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002209:	74 0a                	je     c0002215 <put_lfn+0x6d>
c000220b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000220e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002213:	75 03                	jne    c0002218 <put_lfn+0x70>
c0002215:	80 c9 40             	or     cl,0x40
c0002218:	88 0f                	mov    BYTE PTR [edi],cl
c000221a:	58                   	pop    eax
c000221b:	5b                   	pop    ebx
c000221c:	5e                   	pop    esi
c000221d:	5f                   	pop    edi
c000221e:	5d                   	pop    ebp
c000221f:	c3                   	ret    

c0002220 <gen_numname>:
c0002220:	57                   	push   edi
c0002221:	89 cf                	mov    edi,ecx
c0002223:	56                   	push   esi
c0002224:	b9 0b 00 00 00       	mov    ecx,0xb
c0002229:	53                   	push   ebx
c000222a:	89 c6                	mov    esi,eax
c000222c:	83 ec 10             	sub    esp,0x10
c000222f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002233:	e8 bd fc ff ff       	call   c0001ef5 <mem_cpy>
c0002238:	83 fb 05             	cmp    ebx,0x5
c000223b:	76 2b                	jbe    c0002268 <gen_numname+0x48>
c000223d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c0002240:	85 c0                	test   eax,eax
c0002242:	74 24                	je     c0002268 <gen_numname+0x48>
c0002244:	83 c7 02             	add    edi,0x2
c0002247:	ba 10 00 00 00       	mov    edx,0x10
c000224c:	89 c1                	mov    ecx,eax
c000224e:	01 db                	add    ebx,ebx
c0002250:	d1 e8                	shr    eax,1
c0002252:	83 e1 01             	and    ecx,0x1
c0002255:	01 cb                	add    ebx,ecx
c0002257:	0f ba e3 10          	bt     ebx,0x10
c000225b:	73 06                	jae    c0002263 <gen_numname+0x43>
c000225d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002263:	4a                   	dec    edx
c0002264:	75 e6                	jne    c000224c <gen_numname+0x2c>
c0002266:	eb d5                	jmp    c000223d <gen_numname+0x1d>
c0002268:	bf 07 00 00 00       	mov    edi,0x7
c000226d:	88 da                	mov    dl,bl
c000226f:	80 e2 0f             	and    dl,0xf
c0002272:	88 d0                	mov    al,dl
c0002274:	04 30                	add    al,0x30
c0002276:	3c 39                	cmp    al,0x39
c0002278:	76 04                	jbe    c000227e <gen_numname+0x5e>
c000227a:	88 d0                	mov    al,dl
c000227c:	04 37                	add    al,0x37
c000227e:	8d 4f ff             	lea    ecx,[edi-0x1]
c0002281:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c0002285:	89 d8                	mov    eax,ebx
c0002287:	c1 e8 04             	shr    eax,0x4
c000228a:	83 fb 0f             	cmp    ebx,0xf
c000228d:	76 06                	jbe    c0002295 <gen_numname+0x75>
c000228f:	89 cf                	mov    edi,ecx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	eb d8                	jmp    c000226d <gen_numname+0x4d>
c0002295:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000229a:	31 d2                	xor    edx,edx
c000229c:	83 ef 02             	sub    edi,0x2
c000229f:	8d 04 16             	lea    eax,[esi+edx*1]
c00022a2:	39 ca                	cmp    edx,ecx
c00022a4:	73 18                	jae    c00022be <gen_numname+0x9e>
c00022a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022a9:	3c 20                	cmp    al,0x20
c00022ab:	74 11                	je     c00022be <gen_numname+0x9e>
c00022ad:	e8 96 fc ff ff       	call   c0001f48 <dbc_1st>
c00022b2:	85 c0                	test   eax,eax
c00022b4:	74 05                	je     c00022bb <gen_numname+0x9b>
c00022b6:	39 d7                	cmp    edi,edx
c00022b8:	74 04                	je     c00022be <gen_numname+0x9e>
c00022ba:	42                   	inc    edx
c00022bb:	42                   	inc    edx
c00022bc:	eb e1                	jmp    c000229f <gen_numname+0x7f>
c00022be:	83 f9 07             	cmp    ecx,0x7
c00022c1:	b0 20                	mov    al,0x20
c00022c3:	77 05                	ja     c00022ca <gen_numname+0xaa>
c00022c5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00022c9:	41                   	inc    ecx
c00022ca:	42                   	inc    edx
c00022cb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00022cf:	83 fa 07             	cmp    edx,0x7
c00022d2:	76 ea                	jbe    c00022be <gen_numname+0x9e>
c00022d4:	83 c4 10             	add    esp,0x10
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	5f                   	pop    edi
c00022da:	c3                   	ret    

c00022db <sum_sfn>:
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	31 d2                	xor    edx,edx
c00022df:	d0 ca                	ror    dl,1
c00022e1:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00022e4:	41                   	inc    ecx
c00022e5:	83 f9 0b             	cmp    ecx,0xb
c00022e8:	75 f5                	jne    c00022df <sum_sfn+0x4>
c00022ea:	88 d0                	mov    al,dl
c00022ec:	c3                   	ret    

c00022ed <get_ldnumber>:
c00022ed:	57                   	push   edi
c00022ee:	56                   	push   esi
c00022ef:	83 ce ff             	or     esi,0xffffffff
c00022f2:	53                   	push   ebx
c00022f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00022f5:	85 d2                	test   edx,edx
c00022f7:	74 33                	je     c000232c <get_ldnumber+0x3f>
c00022f9:	89 c7                	mov    edi,eax
c00022fb:	89 d1                	mov    ecx,edx
c00022fd:	41                   	inc    ecx
c00022fe:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002301:	80 fb 1f             	cmp    bl,0x1f
c0002304:	76 05                	jbe    c000230b <get_ldnumber+0x1e>
c0002306:	80 fb 3a             	cmp    bl,0x3a
c0002309:	75 f2                	jne    c00022fd <get_ldnumber+0x10>
c000230b:	31 f6                	xor    esi,esi
c000230d:	80 fb 3a             	cmp    bl,0x3a
c0002310:	75 1a                	jne    c000232c <get_ldnumber+0x3f>
c0002312:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002315:	83 ce ff             	or     esi,0xffffffff
c0002318:	88 d8                	mov    al,bl
c000231a:	2c 30                	sub    al,0x30
c000231c:	3c 09                	cmp    al,0x9
c000231e:	77 0c                	ja     c000232c <get_ldnumber+0x3f>
c0002320:	83 c2 02             	add    edx,0x2
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	75 05                	jne    c000232c <get_ldnumber+0x3f>
c0002327:	89 0f                	mov    DWORD PTR [edi],ecx
c0002329:	8d 73 d0             	lea    esi,[ebx-0x30]
c000232c:	5b                   	pop    ebx
c000232d:	89 f0                	mov    eax,esi
c000232f:	5e                   	pop    esi
c0002330:	5f                   	pop    edi
c0002331:	c3                   	ret    

c0002332 <validate>:
c0002332:	56                   	push   esi
c0002333:	85 c0                	test   eax,eax
c0002335:	53                   	push   ebx
c0002336:	89 d6                	mov    esi,edx
c0002338:	51                   	push   ecx
c0002339:	75 09                	jne    c0002344 <validate+0x12>
c000233b:	b8 09 00 00 00       	mov    eax,0x9
c0002340:	31 d2                	xor    edx,edx
c0002342:	eb 30                	jmp    c0002374 <validate+0x42>
c0002344:	89 c3                	mov    ebx,eax
c0002346:	8b 00                	mov    eax,DWORD PTR [eax]
c0002348:	85 c0                	test   eax,eax
c000234a:	74 ef                	je     c000233b <validate+0x9>
c000234c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000234f:	74 ea                	je     c000233b <validate+0x9>
c0002351:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0002354:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c0002358:	75 e1                	jne    c000233b <validate+0x9>
c000235a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235e:	83 ec 0c             	sub    esp,0xc
c0002361:	50                   	push   eax
c0002362:	e8 11 fb ff ff       	call   c0001e78 <disk_status>
c0002367:	83 c4 10             	add    esp,0x10
c000236a:	24 01                	and    al,0x1
c000236c:	84 c0                	test   al,al
c000236e:	75 cb                	jne    c000233b <validate+0x9>
c0002370:	8b 13                	mov    edx,DWORD PTR [ebx]
c0002372:	31 c0                	xor    eax,eax
c0002374:	89 16                	mov    DWORD PTR [esi],edx
c0002376:	5a                   	pop    edx
c0002377:	5b                   	pop    ebx
c0002378:	5e                   	pop    esi
c0002379:	c3                   	ret    

c000237a <sync_window>:
c000237a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000237e:	74 58                	je     c00023d8 <sync_window+0x5e>
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	51                   	push   ecx
c0002385:	6a 01                	push   0x1
c0002387:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000238a:	8d 70 34             	lea    esi,[eax+0x34]
c000238d:	56                   	push   esi
c000238e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002392:	50                   	push   eax
c0002393:	e8 fc fa ff ff       	call   c0001e94 <disk_write>
c0002398:	83 c4 10             	add    esp,0x10
c000239b:	ba 01 00 00 00       	mov    edx,0x1
c00023a0:	85 c0                	test   eax,eax
c00023a2:	75 2e                	jne    c00023d2 <sync_window+0x58>
c00023a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023ab:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023ae:	89 c1                	mov    ecx,eax
c00023b0:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023b3:	39 d1                	cmp    ecx,edx
c00023b5:	73 19                	jae    c00023d0 <sync_window+0x56>
c00023b7:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023bb:	75 13                	jne    c00023d0 <sync_window+0x56>
c00023bd:	6a 01                	push   0x1
c00023bf:	01 d0                	add    eax,edx
c00023c1:	50                   	push   eax
c00023c2:	56                   	push   esi
c00023c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023c7:	50                   	push   eax
c00023c8:	e8 c7 fa ff ff       	call   c0001e94 <disk_write>
c00023cd:	83 c4 10             	add    esp,0x10
c00023d0:	31 d2                	xor    edx,edx
c00023d2:	89 d0                	mov    eax,edx
c00023d4:	5a                   	pop    edx
c00023d5:	5b                   	pop    ebx
c00023d6:	5e                   	pop    esi
c00023d7:	c3                   	ret    
c00023d8:	31 d2                	xor    edx,edx
c00023da:	89 d0                	mov    eax,edx
c00023dc:	c3                   	ret    

c00023dd <move_window>:
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	31 db                	xor    ebx,ebx
c00023e2:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00023e5:	74 38                	je     c000241f <move_window+0x42>
c00023e7:	89 c6                	mov    esi,eax
c00023e9:	89 d7                	mov    edi,edx
c00023eb:	e8 8a ff ff ff       	call   c000237a <sync_window>
c00023f0:	85 c0                	test   eax,eax
c00023f2:	89 c3                	mov    ebx,eax
c00023f4:	75 29                	jne    c000241f <move_window+0x42>
c00023f6:	6a 01                	push   0x1
c00023f8:	57                   	push   edi
c00023f9:	8d 46 34             	lea    eax,[esi+0x34]
c00023fc:	50                   	push   eax
c00023fd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002401:	50                   	push   eax
c0002402:	e8 77 fa ff ff       	call   c0001e7e <disk_read>
c0002407:	83 c4 10             	add    esp,0x10
c000240a:	ba 01 00 00 00       	mov    edx,0x1
c000240f:	85 c0                	test   eax,eax
c0002411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002416:	0f 45 f8             	cmovne edi,eax
c0002419:	0f 45 da             	cmovne ebx,edx
c000241c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000241f:	89 d8                	mov    eax,ebx
c0002421:	5b                   	pop    ebx
c0002422:	5e                   	pop    esi
c0002423:	5f                   	pop    edi
c0002424:	c3                   	ret    

c0002425 <check_fs>:
c0002425:	53                   	push   ebx
c0002426:	89 c3                	mov    ebx,eax
c0002428:	83 ec 08             	sub    esp,0x8
c000242b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000242f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002436:	e8 a2 ff ff ff       	call   c00023dd <move_window>
c000243b:	ba 04 00 00 00       	mov    edx,0x4
c0002440:	85 c0                	test   eax,eax
c0002442:	75 6a                	jne    c00024ae <check_fs+0x89>
c0002444:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000244a:	e8 7a fa ff ff       	call   c0001ec9 <ld_word>
c000244f:	ba 03 00 00 00       	mov    edx,0x3
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 54                	jne    c00024ae <check_fs+0x89>
c000245a:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000245d:	88 c2                	mov    dl,al
c000245f:	80 c2 18             	add    dl,0x18
c0002462:	80 fa 01             	cmp    dl,0x1
c0002465:	76 09                	jbe    c0002470 <check_fs+0x4b>
c0002467:	3c eb                	cmp    al,0xeb
c0002469:	ba 02 00 00 00       	mov    edx,0x2
c000246e:	75 3e                	jne    c00024ae <check_fs+0x89>
c0002470:	ba 44 13 02 c0       	mov    edx,0xc0021344
c0002475:	b9 03 00 00 00       	mov    ecx,0x3
c000247a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000247d:	e8 92 fa ff ff       	call   c0001f14 <mem_cmp>
c0002482:	31 d2                	xor    edx,edx
c0002484:	85 c0                	test   eax,eax
c0002486:	74 26                	je     c00024ae <check_fs+0x89>
c0002488:	ba fc f0 01 c0       	mov    edx,0xc001f0fc
c000248d:	b9 05 00 00 00       	mov    ecx,0x5
c0002492:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002498:	e8 77 fa ff ff       	call   c0001f14 <mem_cmp>
c000249d:	31 d2                	xor    edx,edx
c000249f:	85 c0                	test   eax,eax
c00024a1:	74 0b                	je     c00024ae <check_fs+0x89>
c00024a3:	31 d2                	xor    edx,edx
c00024a5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024a9:	0f 95 c2             	setne  dl
c00024ac:	01 d2                	add    edx,edx
c00024ae:	83 c4 08             	add    esp,0x8
c00024b1:	89 d0                	mov    eax,edx
c00024b3:	5b                   	pop    ebx
c00024b4:	c3                   	ret    

c00024b5 <find_volume>:
c00024b5:	55                   	push   ebp
c00024b6:	57                   	push   edi
c00024b7:	89 c7                	mov    edi,eax
c00024b9:	56                   	push   esi
c00024ba:	89 d6                	mov    esi,edx
c00024bc:	53                   	push   ebx
c00024bd:	31 d2                	xor    edx,edx
c00024bf:	83 ec 2c             	sub    esp,0x2c
c00024c2:	e8 5e ff ff ff       	call   c0002425 <check_fs>
c00024c7:	85 f6                	test   esi,esi
c00024c9:	0f 94 c3             	sete   bl
c00024cc:	83 f8 02             	cmp    eax,0x2
c00024cf:	74 06                	je     c00024d7 <find_volume+0x22>
c00024d1:	77 5f                	ja     c0002532 <find_volume+0x7d>
c00024d3:	84 db                	test   bl,bl
c00024d5:	75 5b                	jne    c0002532 <find_volume+0x7d>
c00024d7:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c00024dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024e1:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c00024e7:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00024eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024ef:	89 e8                	mov    eax,ebp
c00024f1:	83 c5 10             	add    ebp,0x10
c00024f4:	e8 dd f9 ff ff       	call   c0001ed6 <ld_dword>
c00024f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024fd:	83 c1 04             	add    ecx,0x4
c0002500:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002503:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002507:	75 e2                	jne    c00024eb <find_volume+0x36>
c0002509:	83 fe 01             	cmp    esi,0x1
c000250c:	83 d6 ff             	adc    esi,0xffffffff
c000250f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002513:	b8 03 00 00 00       	mov    eax,0x3
c0002518:	85 d2                	test   edx,edx
c000251a:	74 07                	je     c0002523 <find_volume+0x6e>
c000251c:	89 f8                	mov    eax,edi
c000251e:	e8 02 ff ff ff       	call   c0002425 <check_fs>
c0002523:	83 f8 01             	cmp    eax,0x1
c0002526:	76 0a                	jbe    c0002532 <find_volume+0x7d>
c0002528:	84 db                	test   bl,bl
c000252a:	74 06                	je     c0002532 <find_volume+0x7d>
c000252c:	46                   	inc    esi
c000252d:	83 fe 03             	cmp    esi,0x3
c0002530:	76 dd                	jbe    c000250f <find_volume+0x5a>
c0002532:	83 c4 2c             	add    esp,0x2c
c0002535:	5b                   	pop    ebx
c0002536:	5e                   	pop    esi
c0002537:	5f                   	pop    edi
c0002538:	5d                   	pop    ebp
c0002539:	c3                   	ret    

c000253a <mount_volume>:
c000253a:	55                   	push   ebp
c000253b:	89 d5                	mov    ebp,edx
c000253d:	57                   	push   edi
c000253e:	bf 0b 00 00 00       	mov    edi,0xb
c0002543:	56                   	push   esi
c0002544:	53                   	push   ebx
c0002545:	88 cb                	mov    bl,cl
c0002547:	83 ec 2c             	sub    esp,0x2c
c000254a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002550:	e8 98 fd ff ff       	call   c00022ed <get_ldnumber>
c0002555:	85 c0                	test   eax,eax
c0002557:	0f 88 d0 02 00 00    	js     c000282d <mount_volume+0x2f3>
c000255d:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c0002564:	89 c1                	mov    ecx,eax
c0002566:	bf 0c 00 00 00       	mov    edi,0xc
c000256b:	85 f6                	test   esi,esi
c000256d:	0f 84 ba 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002573:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002576:	80 e3 fe             	and    bl,0xfe
c0002579:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000257c:	74 3d                	je     c00025bb <mount_volume+0x81>
c000257e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002582:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002586:	83 ec 0c             	sub    esp,0xc
c0002589:	50                   	push   eax
c000258a:	e8 e9 f8 ff ff       	call   c0001e78 <disk_status>
c000258f:	83 c4 10             	add    esp,0x10
c0002592:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002596:	88 c2                	mov    dl,al
c0002598:	24 01                	and    al,0x1
c000259a:	84 c0                	test   al,al
c000259c:	75 1d                	jne    c00025bb <mount_volume+0x81>
c000259e:	31 ff                	xor    edi,edi
c00025a0:	84 db                	test   bl,bl
c00025a2:	0f 84 85 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025a8:	80 e2 04             	and    dl,0x4
c00025ab:	0f 84 7c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025b1:	bf 0a 00 00 00       	mov    edi,0xa
c00025b6:	e9 72 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c00025bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00025be:	83 ec 0c             	sub    esp,0xc
c00025c1:	0f b6 c9             	movzx  ecx,cl
c00025c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00025c7:	bf 03 00 00 00       	mov    edi,0x3
c00025cc:	51                   	push   ecx
c00025cd:	e8 a9 f8 ff ff       	call   c0001e7b <disk_initialize>
c00025d2:	83 c4 10             	add    esp,0x10
c00025d5:	88 c1                	mov    cl,al
c00025d7:	80 e1 01             	and    cl,0x1
c00025da:	84 c9                	test   cl,cl
c00025dc:	0f 85 4b 02 00 00    	jne    c000282d <mount_volume+0x2f3>
c00025e2:	84 db                	test   bl,bl
c00025e4:	74 04                	je     c00025ea <mount_volume+0xb0>
c00025e6:	24 04                	and    al,0x4
c00025e8:	75 c7                	jne    c00025b1 <mount_volume+0x77>
c00025ea:	31 d2                	xor    edx,edx
c00025ec:	89 f0                	mov    eax,esi
c00025ee:	e8 c2 fe ff ff       	call   c00024b5 <find_volume>
c00025f3:	bf 01 00 00 00       	mov    edi,0x1
c00025f8:	83 f8 04             	cmp    eax,0x4
c00025fb:	0f 84 2c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002601:	83 f8 01             	cmp    eax,0x1
c0002604:	76 0a                	jbe    c0002610 <mount_volume+0xd6>
c0002606:	bf 0d 00 00 00       	mov    edi,0xd
c000260b:	e9 1d 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c0002610:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002613:	e8 b1 f8 ff ff       	call   c0001ec9 <ld_word>
c0002618:	66 3d 00 02          	cmp    ax,0x200
c000261c:	75 e8                	jne    c0002606 <mount_volume+0xcc>
c000261e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002621:	e8 a3 f8 ff ff       	call   c0001ec9 <ld_word>
c0002626:	0f b7 e8             	movzx  ebp,ax
c0002629:	85 ed                	test   ebp,ebp
c000262b:	75 0a                	jne    c0002637 <mount_volume+0xfd>
c000262d:	8d 46 58             	lea    eax,[esi+0x58]
c0002630:	e8 a1 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002635:	89 c5                	mov    ebp,eax
c0002637:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c000263a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000263d:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c0002641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002645:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c0002648:	88 d8                	mov    al,bl
c000264a:	fe c8                	dec    al
c000264c:	3c 01                	cmp    al,0x1
c000264e:	77 b6                	ja     c0002606 <mount_volume+0xcc>
c0002650:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c0002654:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c0002658:	66 85 d2             	test   dx,dx
c000265b:	74 a9                	je     c0002606 <mount_volume+0xcc>
c000265d:	0f b6 fa             	movzx  edi,dl
c0002660:	8d 47 ff             	lea    eax,[edi-0x1]
c0002663:	85 f8                	test   eax,edi
c0002665:	75 9f                	jne    c0002606 <mount_volume+0xcc>
c0002667:	8d 46 45             	lea    eax,[esi+0x45]
c000266a:	e8 5a f8 ff ff       	call   c0001ec9 <ld_word>
c000266f:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002673:	0f b7 d0             	movzx  edx,ax
c0002676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000267a:	f6 c2 0f             	test   dl,0xf
c000267d:	75 87                	jne    c0002606 <mount_volume+0xcc>
c000267f:	8d 46 47             	lea    eax,[esi+0x47]
c0002682:	e8 42 f8 ff ff       	call   c0001ec9 <ld_word>
c0002687:	0f b7 d0             	movzx  edx,ax
c000268a:	85 d2                	test   edx,edx
c000268c:	75 0a                	jne    c0002698 <mount_volume+0x15e>
c000268e:	8d 46 54             	lea    eax,[esi+0x54]
c0002691:	e8 40 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002696:	89 c2                	mov    edx,eax
c0002698:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000269c:	8d 46 42             	lea    eax,[esi+0x42]
c000269f:	e8 25 f8 ff ff       	call   c0001ec9 <ld_word>
c00026a4:	0f b7 c0             	movzx  eax,ax
c00026a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00026ab:	85 c0                	test   eax,eax
c00026ad:	0f 84 53 ff ff ff    	je     c0002606 <mount_volume+0xcc>
c00026b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026b7:	0f af dd             	imul   ebx,ebp
c00026ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00026be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00026c2:	c1 e9 04             	shr    ecx,0x4
c00026c5:	01 d9                	add    ecx,ebx
c00026c7:	01 c1                	add    ecx,eax
c00026c9:	39 ca                	cmp    edx,ecx
c00026cb:	0f 82 35 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026d1:	89 d3                	mov    ebx,edx
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	29 cb                	sub    ebx,ecx
c00026d7:	89 d8                	mov    eax,ebx
c00026d9:	f7 f7                	div    edi
c00026db:	39 fb                	cmp    ebx,edi
c00026dd:	0f 82 23 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026e3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026e8:	0f 87 18 ff ff ff    	ja     c0002606 <mount_volume+0xcc>
c00026ee:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026f3:	0f 86 25 01 00 00    	jbe    c000281e <mount_volume+0x2e4>
c00026f9:	bb 03 00 00 00       	mov    ebx,0x3
c00026fe:	8d 78 02             	lea    edi,[eax+0x2]
c0002701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002705:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002709:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000270c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000270f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002713:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002717:	83 fb 03             	cmp    ebx,0x3
c000271a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000271d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002720:	75 27                	jne    c0002749 <mount_volume+0x20f>
c0002722:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002725:	e8 9f f7 ff ff       	call   c0001ec9 <ld_word>
c000272a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000272e:	0f b7 c0             	movzx  eax,ax
c0002731:	09 c1                	or     ecx,eax
c0002733:	0f 85 cd fe ff ff    	jne    c0002606 <mount_volume+0xcc>
c0002739:	8d 46 60             	lea    eax,[esi+0x60]
c000273c:	e8 95 f7 ff ff       	call   c0001ed6 <ld_dword>
c0002741:	c1 e7 02             	shl    edi,0x2
c0002744:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002747:	eb 25                	jmp    c000276e <mount_volume+0x234>
c0002749:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000274e:	0f 84 b2 fe ff ff    	je     c0002606 <mount_volume+0xcc>
c0002754:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002758:	8d 14 7f             	lea    edx,[edi+edi*2]
c000275b:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000275e:	83 e7 01             	and    edi,0x1
c0002761:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002764:	d1 ea                	shr    edx,1
c0002766:	01 d7                	add    edi,edx
c0002768:	83 fb 02             	cmp    ebx,0x2
c000276b:	0f 44 f9             	cmove  edi,ecx
c000276e:	81 c7 ff 01 00 00    	add    edi,0x1ff
c0002774:	c1 ef 09             	shr    edi,0x9
c0002777:	39 ef                	cmp    edi,ebp
c0002779:	0f 87 87 fe ff ff    	ja     c0002606 <mount_volume+0xcc>
c000277f:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002786:	83 fb 03             	cmp    ebx,0x3
c0002789:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002790:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002794:	75 6e                	jne    c0002804 <mount_volume+0x2ca>
c0002796:	8d 46 64             	lea    eax,[esi+0x64]
c0002799:	e8 2b f7 ff ff       	call   c0001ec9 <ld_word>
c000279e:	66 48                	dec    ax
c00027a0:	75 62                	jne    c0002804 <mount_volume+0x2ca>
c00027a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00027a6:	89 f0                	mov    eax,esi
c00027a8:	42                   	inc    edx
c00027a9:	e8 2f fc ff ff       	call   c00023dd <move_window>
c00027ae:	85 c0                	test   eax,eax
c00027b0:	75 52                	jne    c0002804 <mount_volume+0x2ca>
c00027b2:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027b6:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00027bc:	e8 08 f7 ff ff       	call   c0001ec9 <ld_word>
c00027c1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c5:	75 3d                	jne    c0002804 <mount_volume+0x2ca>
c00027c7:	8d 46 34             	lea    eax,[esi+0x34]
c00027ca:	e8 07 f7 ff ff       	call   c0001ed6 <ld_dword>
c00027cf:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d4:	75 2e                	jne    c0002804 <mount_volume+0x2ca>
c00027d6:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00027dc:	e8 f5 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027e1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e6:	75 1c                	jne    c0002804 <mount_volume+0x2ca>
c00027e8:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00027ee:	e8 e3 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027f3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00027f6:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00027fc:	e8 d5 f6 ff ff       	call   c0001ed6 <ld_dword>
c0002801:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002804:	88 1e                	mov    BYTE PTR [esi],bl
c0002806:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000280c:	31 ff                	xor    edi,edi
c000280e:	40                   	inc    eax
c000280f:	0f b7 c0             	movzx  eax,ax
c0002812:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002818:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000281c:	eb 0f                	jmp    c000282d <mount_volume+0x2f3>
c000281e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002823:	19 db                	sbb    ebx,ebx
c0002825:	83 c3 02             	add    ebx,0x2
c0002828:	e9 d1 fe ff ff       	jmp    c00026fe <mount_volume+0x1c4>
c000282d:	83 c4 2c             	add    esp,0x2c
c0002830:	89 f8                	mov    eax,edi
c0002832:	5b                   	pop    ebx
c0002833:	5e                   	pop    esi
c0002834:	5f                   	pop    edi
c0002835:	5d                   	pop    ebp
c0002836:	c3                   	ret    

c0002837 <put_fat>:
c0002837:	55                   	push   ebp
c0002838:	bd 02 00 00 00       	mov    ebp,0x2
c000283d:	57                   	push   edi
c000283e:	56                   	push   esi
c000283f:	53                   	push   ebx
c0002840:	83 ec 1c             	sub    esp,0x1c
c0002843:	83 fa 01             	cmp    edx,0x1
c0002846:	0f 86 35 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c000284c:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000284f:	0f 86 2c 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c0002855:	89 c7                	mov    edi,eax
c0002857:	8a 00                	mov    al,BYTE PTR [eax]
c0002859:	89 cb                	mov    ebx,ecx
c000285b:	89 d6                	mov    esi,edx
c000285d:	3c 02                	cmp    al,0x2
c000285f:	0f 84 b0 00 00 00    	je     c0002915 <put_fat+0xde>
c0002865:	3c 03                	cmp    al,0x3
c0002867:	0f 84 d5 00 00 00    	je     c0002942 <put_fat+0x10b>
c000286d:	fe c8                	dec    al
c000286f:	0f 85 0c 01 00 00    	jne    c0002981 <put_fat+0x14a>
c0002875:	89 d1                	mov    ecx,edx
c0002877:	89 f8                	mov    eax,edi
c0002879:	d1 e9                	shr    ecx,1
c000287b:	01 d1                	add    ecx,edx
c000287d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002881:	89 ca                	mov    edx,ecx
c0002883:	c1 ea 09             	shr    edx,0x9
c0002886:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002889:	e8 4f fb ff ff       	call   c00023dd <move_window>
c000288e:	85 c0                	test   eax,eax
c0002890:	89 c5                	mov    ebp,eax
c0002892:	0f 85 e9 00 00 00    	jne    c0002981 <put_fat+0x14a>
c0002898:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000289c:	8d 47 34             	lea    eax,[edi+0x34]
c000289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028a3:	8d 41 01             	lea    eax,[ecx+0x1]
c00028a6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028ac:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c00028b0:	83 e6 01             	and    esi,0x1
c00028b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028b7:	88 d8                	mov    al,bl
c00028b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00028bd:	74 0b                	je     c00028ca <put_fat+0x93>
c00028bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00028c1:	89 da                	mov    edx,ebx
c00028c3:	c1 e2 04             	shl    edx,0x4
c00028c6:	24 0f                	and    al,0xf
c00028c8:	08 d0                	or     al,dl
c00028ca:	88 01                	mov    BYTE PTR [ecx],al
c00028cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028d0:	89 f8                	mov    eax,edi
c00028d2:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028d6:	c1 ea 09             	shr    edx,0x9
c00028d9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028dc:	e8 fc fa ff ff       	call   c00023dd <move_window>
c00028e1:	85 c0                	test   eax,eax
c00028e3:	89 c5                	mov    ebp,eax
c00028e5:	0f 85 96 00 00 00    	jne    c0002981 <put_fat+0x14a>
c00028eb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ef:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00028f5:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00028f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00028fe:	74 05                	je     c0002905 <put_fat+0xce>
c0002900:	c1 eb 04             	shr    ebx,0x4
c0002903:	eb 0c                	jmp    c0002911 <put_fat+0xda>
c0002905:	8a 06                	mov    al,BYTE PTR [esi]
c0002907:	c1 eb 08             	shr    ebx,0x8
c000290a:	80 e3 0f             	and    bl,0xf
c000290d:	24 f0                	and    al,0xf0
c000290f:	08 c3                	or     bl,al
c0002911:	88 1e                	mov    BYTE PTR [esi],bl
c0002913:	eb 27                	jmp    c000293c <put_fat+0x105>
c0002915:	c1 ea 08             	shr    edx,0x8
c0002918:	89 f8                	mov    eax,edi
c000291a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000291d:	e8 bb fa ff ff       	call   c00023dd <move_window>
c0002922:	85 c0                	test   eax,eax
c0002924:	89 c5                	mov    ebp,eax
c0002926:	75 59                	jne    c0002981 <put_fat+0x14a>
c0002928:	01 f6                	add    esi,esi
c000292a:	0f b7 d3             	movzx  edx,bx
c000292d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002933:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002937:	e8 b2 f5 ff ff       	call   c0001eee <st_word>
c000293c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002940:	eb 3f                	jmp    c0002981 <put_fat+0x14a>
c0002942:	c1 ea 07             	shr    edx,0x7
c0002945:	89 f8                	mov    eax,edi
c0002947:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000294a:	e8 8e fa ff ff       	call   c00023dd <move_window>
c000294f:	85 c0                	test   eax,eax
c0002951:	89 c5                	mov    ebp,eax
c0002953:	75 2c                	jne    c0002981 <put_fat+0x14a>
c0002955:	c1 e6 02             	shl    esi,0x2
c0002958:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000295e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002964:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c0002968:	89 f0                	mov    eax,esi
c000296a:	e8 67 f5 ff ff       	call   c0001ed6 <ld_dword>
c000296f:	25 00 00 00 f0       	and    eax,0xf0000000
c0002974:	09 d8                	or     eax,ebx
c0002976:	89 c2                	mov    edx,eax
c0002978:	89 f0                	mov    eax,esi
c000297a:	e8 73 f5 ff ff       	call   c0001ef2 <st_dword>
c000297f:	eb bb                	jmp    c000293c <put_fat+0x105>
c0002981:	83 c4 1c             	add    esp,0x1c
c0002984:	89 e8                	mov    eax,ebp
c0002986:	5b                   	pop    ebx
c0002987:	5e                   	pop    esi
c0002988:	5f                   	pop    edi
c0002989:	5d                   	pop    ebp
c000298a:	c3                   	ret    

c000298b <dir_clear>:
c000298b:	55                   	push   ebp
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	89 c6                	mov    esi,eax
c0002990:	53                   	push   ebx
c0002991:	83 ec 1c             	sub    esp,0x1c
c0002994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002998:	e8 dd f9 ff ff       	call   c000237a <sync_window>
c000299d:	85 c0                	test   eax,eax
c000299f:	0f 85 c1 00 00 00    	jne    c0002a66 <dir_clear+0xdb>
c00029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a9:	89 f0                	mov    eax,esi
c00029ab:	e8 58 f7 ff ff       	call   c0002108 <clst2sect>
c00029b0:	31 d2                	xor    edx,edx
c00029b2:	b9 00 02 00 00       	mov    ecx,0x200
c00029b7:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029ba:	89 c5                	mov    ebp,eax
c00029bc:	8d 46 34             	lea    eax,[esi+0x34]
c00029bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029c3:	e8 42 f5 ff ff       	call   c0001f0a <mem_set>
c00029c8:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00029cc:	b8 00 80 00 00       	mov    eax,0x8000
c00029d1:	c1 e3 09             	shl    ebx,0x9
c00029d4:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00029da:	0f 47 d8             	cmova  ebx,eax
c00029dd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00029e3:	76 16                	jbe    c00029fb <dir_clear+0x70>
c00029e5:	83 ec 0c             	sub    esp,0xc
c00029e8:	53                   	push   ebx
c00029e9:	e8 12 32 00 00       	call   c0005c00 <ff_memalloc>
c00029ee:	83 c4 10             	add    esp,0x10
c00029f1:	85 c0                	test   eax,eax
c00029f3:	89 c7                	mov    edi,eax
c00029f5:	75 76                	jne    c0002a6d <dir_clear+0xe2>
c00029f7:	d1 eb                	shr    ebx,1
c00029f9:	eb e2                	jmp    c00029dd <dir_clear+0x52>
c00029fb:	31 db                	xor    ebx,ebx
c00029fd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a01:	39 d8                	cmp    eax,ebx
c0002a03:	76 53                	jbe    c0002a58 <dir_clear+0xcd>
c0002a05:	6a 01                	push   0x1
c0002a07:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a0a:	50                   	push   eax
c0002a0b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a13:	50                   	push   eax
c0002a14:	e8 7b f4 ff ff       	call   c0001e94 <disk_write>
c0002a19:	83 c4 10             	add    esp,0x10
c0002a1c:	85 c0                	test   eax,eax
c0002a1e:	75 38                	jne    c0002a58 <dir_clear+0xcd>
c0002a20:	43                   	inc    ebx
c0002a21:	eb da                	jmp    c00029fd <dir_clear+0x72>
c0002a23:	52                   	push   edx
c0002a24:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a27:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a2b:	50                   	push   eax
c0002a2c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a30:	57                   	push   edi
c0002a31:	50                   	push   eax
c0002a32:	e8 5d f4 ff ff       	call   c0001e94 <disk_write>
c0002a37:	83 c4 10             	add    esp,0x10
c0002a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3e:	85 c0                	test   eax,eax
c0002a40:	75 0a                	jne    c0002a4c <dir_clear+0xc1>
c0002a42:	01 d3                	add    ebx,edx
c0002a44:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a48:	39 d8                	cmp    eax,ebx
c0002a4a:	77 d7                	ja     c0002a23 <dir_clear+0x98>
c0002a4c:	83 ec 0c             	sub    esp,0xc
c0002a4f:	57                   	push   edi
c0002a50:	e8 bf 31 00 00       	call   c0005c14 <ff_memfree>
c0002a55:	83 c4 10             	add    esp,0x10
c0002a58:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a5c:	39 d8                	cmp    eax,ebx
c0002a5e:	0f 95 c0             	setne  al
c0002a61:	0f b6 c0             	movzx  eax,al
c0002a64:	eb 19                	jmp    c0002a7f <dir_clear+0xf4>
c0002a66:	b8 01 00 00 00       	mov    eax,0x1
c0002a6b:	eb 12                	jmp    c0002a7f <dir_clear+0xf4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	31 d2                	xor    edx,edx
c0002a71:	e8 94 f4 ff ff       	call   c0001f0a <mem_set>
c0002a76:	89 da                	mov    edx,ebx
c0002a78:	31 db                	xor    ebx,ebx
c0002a7a:	c1 ea 09             	shr    edx,0x9
c0002a7d:	eb c5                	jmp    c0002a44 <dir_clear+0xb9>
c0002a7f:	83 c4 1c             	add    esp,0x1c
c0002a82:	5b                   	pop    ebx
c0002a83:	5e                   	pop    esi
c0002a84:	5f                   	pop    edi
c0002a85:	5d                   	pop    ebp
c0002a86:	c3                   	ret    

c0002a87 <create_name>:
c0002a87:	55                   	push   ebp
c0002a88:	89 d1                	mov    ecx,edx
c0002a8a:	57                   	push   edi
c0002a8b:	89 c7                	mov    edi,eax
c0002a8d:	56                   	push   esi
c0002a8e:	31 f6                	xor    esi,esi
c0002a90:	53                   	push   ebx
c0002a91:	83 ec 3c             	sub    esp,0x3c
c0002a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002aa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002aa7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002aab:	e8 9e f4 ff ff       	call   c0001f4e <tchar2uni>
c0002ab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0002ab7:	75 0a                	jne    c0002ac3 <create_name+0x3c>
c0002ab9:	b8 06 00 00 00       	mov    eax,0x6
c0002abe:	e9 8c 02 00 00       	jmp    c0002d4f <create_name+0x2c8>
c0002ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0002ac8:	76 0e                	jbe    c0002ad8 <create_name+0x51>
c0002aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002ace:	89 c2                	mov    edx,eax
c0002ad0:	c1 ea 10             	shr    edx,0x10
c0002ad3:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002ad7:	46                   	inc    esi
c0002ad8:	0f b7 e8             	movzx  ebp,ax
c0002adb:	83 fd 1f             	cmp    ebp,0x1f
c0002ade:	76 3a                	jbe    c0002b1a <create_name+0x93>
c0002ae0:	83 fd 2f             	cmp    ebp,0x2f
c0002ae3:	74 35                	je     c0002b1a <create_name+0x93>
c0002ae5:	83 fd 5c             	cmp    ebp,0x5c
c0002ae8:	74 3e                	je     c0002b28 <create_name+0xa1>
c0002aea:	83 fd 7f             	cmp    ebp,0x7f
c0002aed:	77 18                	ja     c0002b07 <create_name+0x80>
c0002aef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002af3:	89 ea                	mov    edx,ebp
c0002af5:	b8 02 f1 01 c0       	mov    eax,0xc001f102
c0002afa:	e8 38 f4 ff ff       	call   c0001f37 <chk_chr>
c0002aff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b03:	85 c0                	test   eax,eax
c0002b05:	75 b2                	jne    c0002ab9 <create_name+0x32>
c0002b07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b0d:	77 aa                	ja     c0002ab9 <create_name+0x32>
c0002b0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b13:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002b17:	46                   	inc    esi
c0002b18:	eb 89                	jmp    c0002aa3 <create_name+0x1c>
c0002b1a:	83 fd 1f             	cmp    ebp,0x1f
c0002b1d:	b3 04                	mov    bl,0x4
c0002b1f:	76 19                	jbe    c0002b3a <create_name+0xb3>
c0002b21:	eb 05                	jmp    c0002b28 <create_name+0xa1>
c0002b23:	40                   	inc    eax
c0002b24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002b2e:	80 fa 2f             	cmp    dl,0x2f
c0002b31:	74 f0                	je     c0002b23 <create_name+0x9c>
c0002b33:	80 fa 5c             	cmp    dl,0x5c
c0002b36:	74 eb                	je     c0002b23 <create_name+0x9c>
c0002b38:	31 db                	xor    ebx,ebx
c0002b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b3e:	89 01                	mov    DWORD PTR [ecx],eax
c0002b40:	85 f6                	test   esi,esi
c0002b42:	74 16                	je     c0002b5a <create_name+0xd3>
c0002b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b48:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b4d:	83 f8 20             	cmp    eax,0x20
c0002b50:	74 05                	je     c0002b57 <create_name+0xd0>
c0002b52:	83 f8 2e             	cmp    eax,0x2e
c0002b55:	75 03                	jne    c0002b5a <create_name+0xd3>
c0002b57:	4e                   	dec    esi
c0002b58:	eb e6                	jmp    c0002b40 <create_name+0xb9>
c0002b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b5e:	85 f6                	test   esi,esi
c0002b60:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b66:	0f 84 4d ff ff ff    	je     c0002ab9 <create_name+0x32>
c0002b6c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b7c:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002b80:	42                   	inc    edx
c0002b81:	83 f8 20             	cmp    eax,0x20
c0002b84:	75 06                	jne    c0002b8c <create_name+0x105>
c0002b86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b8a:	eb e8                	jmp    c0002b74 <create_name+0xed>
c0002b8c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b91:	75 05                	jne    c0002b98 <create_name+0x111>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 08                	jne    c0002ba0 <create_name+0x119>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	eb 03                	jmp    c0002ba0 <create_name+0x119>
c0002b9d:	4e                   	dec    esi
c0002b9e:	74 0c                	je     c0002bac <create_name+0x125>
c0002ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ba4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002baa:	75 f1                	jne    c0002b9d <create_name+0x116>
c0002bac:	8d 47 20             	lea    eax,[edi+0x20]
c0002baf:	b9 0b 00 00 00       	mov    ecx,0xb
c0002bb4:	ba 20 00 00 00       	mov    edx,0x20
c0002bb9:	31 ed                	xor    ebp,ebp
c0002bbb:	e8 4a f3 ff ff       	call   c0001f0a <mem_set>
c0002bc0:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002bc8:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002bd5:	40                   	inc    eax
c0002bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002bde:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002be2:	85 c9                	test   ecx,ecx
c0002be4:	0f 84 15 01 00 00    	je     c0002cff <create_name+0x278>
c0002bea:	83 f9 20             	cmp    ecx,0x20
c0002bed:	74 0b                	je     c0002bfa <create_name+0x173>
c0002bef:	83 f9 2e             	cmp    ecx,0x2e
c0002bf2:	75 13                	jne    c0002c07 <create_name+0x180>
c0002bf4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002bf8:	74 0d                	je     c0002c07 <create_name+0x180>
c0002bfa:	80 cb 03             	or     bl,0x3
c0002bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c05:	eb c6                	jmp    c0002bcd <create_name+0x146>
c0002c07:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	73 06                	jae    c0002c13 <create_name+0x18c>
c0002c0d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c11:	75 3a                	jne    c0002c4d <create_name+0x1c6>
c0002c13:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002c18:	75 08                	jne    c0002c22 <create_name+0x19b>
c0002c1a:	80 cb 03             	or     bl,0x3
c0002c1d:	e9 dd 00 00 00       	jmp    c0002cff <create_name+0x278>
c0002c22:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c26:	74 0d                	je     c0002c35 <create_name+0x1ae>
c0002c28:	80 cb 03             	or     bl,0x3
c0002c2b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c2f:	0f 87 ca 00 00 00    	ja     c0002cff <create_name+0x278>
c0002c35:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c3a:	bd 08 00 00 00       	mov    ebp,0x8
c0002c3f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002c43:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002c4b:	eb b0                	jmp    c0002bfd <create_name+0x176>
c0002c4d:	83 f9 7f             	cmp    ecx,0x7f
c0002c50:	76 5d                	jbe    c0002caf <create_name+0x228>
c0002c52:	88 da                	mov    dl,bl
c0002c54:	80 ca 02             	or     dl,0x2
c0002c57:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002c5b:	50                   	push   eax
c0002c5c:	50                   	push   eax
c0002c5d:	68 b5 01 00 00       	push   0x1b5
c0002c62:	51                   	push   ecx
c0002c63:	e8 c0 2f 00 00       	call   c0005c28 <ff_uni2oem>
c0002c68:	83 c4 10             	add    esp,0x10
c0002c6b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002c6f:	0f b7 c8             	movzx  ecx,ax
c0002c72:	f6 c1 80             	test   cl,0x80
c0002c75:	74 0c                	je     c0002c83 <create_name+0x1fc>
c0002c77:	83 e1 7f             	and    ecx,0x7f
c0002c7a:	0f b6 89 c0 f1 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe0e40]
c0002c81:	eb 26                	jmp    c0002ca9 <create_name+0x222>
c0002c83:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002c89:	76 1e                	jbe    c0002ca9 <create_name+0x222>
c0002c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002c8f:	48                   	dec    eax
c0002c90:	39 e8                	cmp    eax,ebp
c0002c92:	77 0c                	ja     c0002ca0 <create_name+0x219>
c0002c94:	80 cb 03             	or     bl,0x3
c0002c97:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c9b:	e9 5d ff ff ff       	jmp    c0002bfd <create_name+0x176>
c0002ca0:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002ca4:	88 d3                	mov    bl,dl
c0002ca6:	45                   	inc    ebp
c0002ca7:	eb 4c                	jmp    c0002cf5 <create_name+0x26e>
c0002ca9:	85 c9                	test   ecx,ecx
c0002cab:	88 d3                	mov    bl,dl
c0002cad:	74 18                	je     c0002cc7 <create_name+0x240>
c0002caf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002cb3:	89 ca                	mov    edx,ecx
c0002cb5:	b8 0b f1 01 c0       	mov    eax,0xc001f10b
c0002cba:	e8 78 f2 ff ff       	call   c0001f37 <chk_chr>
c0002cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	74 0a                	je     c0002cd1 <create_name+0x24a>
c0002cc7:	80 cb 03             	or     bl,0x3
c0002cca:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002ccf:	eb 24                	jmp    c0002cf5 <create_name+0x26e>
c0002cd1:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002cd4:	66 83 f8 19          	cmp    ax,0x19
c0002cd8:	77 07                	ja     c0002ce1 <create_name+0x25a>
c0002cda:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002cdf:	eb 14                	jmp    c0002cf5 <create_name+0x26e>
c0002ce1:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002ce4:	66 83 f8 19          	cmp    ax,0x19
c0002ce8:	77 0b                	ja     c0002cf5 <create_name+0x26e>
c0002cea:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002cef:	83 e9 20             	sub    ecx,0x20
c0002cf2:	0f b7 c9             	movzx  ecx,cx
c0002cf5:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002cf9:	45                   	inc    ebp
c0002cfa:	e9 fe fe ff ff       	jmp    c0002bfd <create_name+0x176>
c0002cff:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002d03:	75 04                	jne    c0002d09 <create_name+0x282>
c0002d05:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002d09:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002d0e:	75 05                	jne    c0002d15 <create_name+0x28e>
c0002d10:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002d15:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d19:	24 0c                	and    al,0xc
c0002d1b:	3c 0c                	cmp    al,0xc
c0002d1d:	74 0a                	je     c0002d29 <create_name+0x2a2>
c0002d1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d23:	24 03                	and    al,0x3
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	75 05                	jne    c0002d2e <create_name+0x2a7>
c0002d29:	80 cb 02             	or     bl,0x2
c0002d2c:	eb 1c                	jmp    c0002d4a <create_name+0x2c3>
c0002d2e:	88 d8                	mov    al,bl
c0002d30:	24 02                	and    al,0x2
c0002d32:	75 16                	jne    c0002d4a <create_name+0x2c3>
c0002d34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d38:	24 01                	and    al,0x1
c0002d3a:	74 03                	je     c0002d3f <create_name+0x2b8>
c0002d3c:	80 cb 10             	or     bl,0x10
c0002d3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d43:	24 04                	and    al,0x4
c0002d45:	74 03                	je     c0002d4a <create_name+0x2c3>
c0002d47:	80 cb 08             	or     bl,0x8
c0002d4a:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 3c             	add    esp,0x3c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <cmp_lfn>:
c0002d57:	55                   	push   ebp
c0002d58:	57                   	push   edi
c0002d59:	89 d7                	mov    edi,edx
c0002d5b:	56                   	push   esi
c0002d5c:	53                   	push   ebx
c0002d5d:	83 ec 1c             	sub    esp,0x1c
c0002d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d64:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d67:	e8 5d f1 ff ff       	call   c0001ec9 <ld_word>
c0002d6c:	66 85 c0             	test   ax,ax
c0002d6f:	74 07                	je     c0002d78 <cmp_lfn+0x21>
c0002d71:	31 c0                	xor    eax,eax
c0002d73:	e9 a0 00 00 00       	jmp    c0002e18 <cmp_lfn+0xc1>
c0002d78:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002d7b:	bd 01 00 00 00       	mov    ebp,0x1
c0002d80:	31 c9                	xor    ecx,ecx
c0002d82:	83 e3 3f             	and    ebx,0x3f
c0002d85:	4b                   	dec    ebx
c0002d86:	6b db 0d             	imul   ebx,ebx,0xd
c0002d89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d8d:	0f b6 81 40 f2 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0dc0]
c0002d94:	01 f8                	add    eax,edi
c0002d96:	e8 2e f1 ff ff       	call   c0001ec9 <ld_word>
c0002d9b:	85 ed                	test   ebp,ebp
c0002d9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002da1:	0f b7 f0             	movzx  esi,ax
c0002da4:	74 41                	je     c0002de7 <cmp_lfn+0x90>
c0002da6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002daa:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002db0:	77 bf                	ja     c0002d71 <cmp_lfn+0x1a>
c0002db2:	83 ec 0c             	sub    esp,0xc
c0002db5:	56                   	push   esi
c0002db6:	e8 81 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dbb:	89 c5                	mov    ebp,eax
c0002dbd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002dc8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002dcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0002dcf:	e8 68 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dd4:	83 c4 10             	add    esp,0x10
c0002dd7:	39 c5                	cmp    ebp,eax
c0002dd9:	75 96                	jne    c0002d71 <cmp_lfn+0x1a>
c0002ddb:	89 f5                	mov    ebp,esi
c0002ddd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002de5:	eb 08                	jmp    c0002def <cmp_lfn+0x98>
c0002de7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002ded:	75 82                	jne    c0002d71 <cmp_lfn+0x1a>
c0002def:	41                   	inc    ecx
c0002df0:	83 f9 0d             	cmp    ecx,0xd
c0002df3:	75 94                	jne    c0002d89 <cmp_lfn+0x32>
c0002df5:	8a 07                	mov    al,BYTE PTR [edi]
c0002df7:	c0 e8 06             	shr    al,0x6
c0002dfa:	24 01                	and    al,0x1
c0002dfc:	74 15                	je     c0002e13 <cmp_lfn+0xbc>
c0002dfe:	85 ed                	test   ebp,ebp
c0002e00:	74 11                	je     c0002e13 <cmp_lfn+0xbc>
c0002e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e06:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e0b:	0f 94 c0             	sete   al
c0002e0e:	0f b6 c0             	movzx  eax,al
c0002e11:	eb 05                	jmp    c0002e18 <cmp_lfn+0xc1>
c0002e13:	b8 01 00 00 00       	mov    eax,0x1
c0002e18:	83 c4 1c             	add    esp,0x1c
c0002e1b:	5b                   	pop    ebx
c0002e1c:	5e                   	pop    esi
c0002e1d:	5f                   	pop    edi
c0002e1e:	5d                   	pop    ebp
c0002e1f:	c3                   	ret    

c0002e20 <sync_fs>:
c0002e20:	56                   	push   esi
c0002e21:	53                   	push   ebx
c0002e22:	53                   	push   ebx
c0002e23:	89 c3                	mov    ebx,eax
c0002e25:	e8 50 f5 ff ff       	call   c000237a <sync_window>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	0f 85 9a 00 00 00    	jne    c0002ecc <sync_fs+0xac>
c0002e32:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e35:	75 7b                	jne    c0002eb2 <sync_fs+0x92>
c0002e37:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e3b:	75 75                	jne    c0002eb2 <sync_fs+0x92>
c0002e3d:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e40:	b9 00 02 00 00       	mov    ecx,0x200
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	89 f0                	mov    eax,esi
c0002e49:	e8 bc f0 ff ff       	call   c0001f0a <mem_set>
c0002e4e:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e54:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e59:	e8 90 f0 ff ff       	call   c0001eee <st_word>
c0002e5e:	ba 52 52 61 41       	mov    edx,0x41615252
c0002e63:	89 f0                	mov    eax,esi
c0002e65:	e8 88 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e6a:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002e70:	ba 72 72 41 61       	mov    edx,0x61417272
c0002e75:	e8 78 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e7a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e7d:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e83:	e8 6a f0 ff ff       	call   c0001ef2 <st_dword>
c0002e88:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e8b:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e91:	e8 5c f0 ff ff       	call   c0001ef2 <st_dword>
c0002e96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e99:	6a 01                	push   0x1
c0002e9b:	40                   	inc    eax
c0002e9c:	50                   	push   eax
c0002e9d:	56                   	push   esi
c0002e9e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ea1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ea5:	50                   	push   eax
c0002ea6:	e8 e9 ef ff ff       	call   c0001e94 <disk_write>
c0002eab:	83 c4 10             	add    esp,0x10
c0002eae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eb2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002eb6:	51                   	push   ecx
c0002eb7:	6a 00                	push   0x0
c0002eb9:	6a 00                	push   0x0
c0002ebb:	50                   	push   eax
c0002ebc:	e8 e9 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ec1:	83 c4 10             	add    esp,0x10
c0002ec4:	85 c0                	test   eax,eax
c0002ec6:	0f 95 c0             	setne  al
c0002ec9:	0f b6 c0             	movzx  eax,al
c0002ecc:	5a                   	pop    edx
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	c3                   	ret    

c0002ed0 <create_partition>:
c0002ed0:	55                   	push   ebp
c0002ed1:	0f b6 c0             	movzx  eax,al
c0002ed4:	57                   	push   edi
c0002ed5:	56                   	push   esi
c0002ed6:	53                   	push   ebx
c0002ed7:	83 ec 40             	sub    esp,0x40
c0002eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ede:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ee2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ee6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002eea:	50                   	push   eax
c0002eeb:	6a 01                	push   0x1
c0002eed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002ef1:	e8 b4 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ef6:	83 c4 10             	add    esp,0x10
c0002ef9:	85 c0                	test   eax,eax
c0002efb:	0f 85 66 01 00 00    	jne    c0003067 <create_partition+0x197>
c0002f01:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f05:	b9 05 00 00 00       	mov    ecx,0x5
c0002f0a:	b3 08                	mov    bl,0x8
c0002f0c:	31 d2                	xor    edx,edx
c0002f0e:	0f b6 f3             	movzx  esi,bl
c0002f11:	89 e8                	mov    eax,ebp
c0002f13:	f7 f6                	div    esi
c0002f15:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f1a:	76 07                	jbe    c0002f23 <create_partition+0x53>
c0002f1c:	00 db                	add    bl,bl
c0002f1e:	49                   	dec    ecx
c0002f1f:	75 eb                	jne    c0002f0c <create_partition+0x3c>
c0002f21:	b3 ff                	mov    bl,0xff
c0002f23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f27:	b9 00 02 00 00       	mov    ecx,0x200
c0002f2c:	31 d2                	xor    edx,edx
c0002f2e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f33:	e8 d2 ef ff ff       	call   c0001f0a <mem_set>
c0002f38:	b9 64 00 00 00       	mov    ecx,0x64
c0002f3d:	89 e8                	mov    eax,ebp
c0002f3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002f47:	31 d2                	xor    edx,edx
c0002f49:	f7 f1                	div    ecx
c0002f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f53:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002f59:	0f b6 c3             	movzx  eax,bl
c0002f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f60:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002f65:	0f 96 c2             	setbe  dl
c0002f68:	85 ff                	test   edi,edi
c0002f6a:	0f 95 c0             	setne  al
c0002f6d:	84 c2                	test   dl,al
c0002f6f:	0f 84 c1 00 00 00    	je     c0003036 <create_partition+0x166>
c0002f75:	39 ef                	cmp    edi,ebp
c0002f77:	0f 83 b9 00 00 00    	jae    c0003036 <create_partition+0x166>
c0002f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002f85:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002f88:	83 f9 64             	cmp    ecx,0x64
c0002f8b:	77 0b                	ja     c0002f98 <create_partition+0xc8>
c0002f8d:	74 07                	je     c0002f96 <create_partition+0xc6>
c0002f8f:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f94:	eb 02                	jmp    c0002f98 <create_partition+0xc8>
c0002f96:	89 e9                	mov    ecx,ebp
c0002f98:	89 fa                	mov    edx,edi
c0002f9a:	31 c0                	xor    eax,eax
c0002f9c:	01 ca                	add    edx,ecx
c0002f9e:	73 05                	jae    c0002fa5 <create_partition+0xd5>
c0002fa0:	b8 01 00 00 00       	mov    eax,0x1
c0002fa5:	39 ea                	cmp    edx,ebp
c0002fa7:	77 04                	ja     c0002fad <create_partition+0xdd>
c0002fa9:	85 c0                	test   eax,eax
c0002fab:	74 06                	je     c0002fb3 <create_partition+0xe3>
c0002fad:	89 e9                	mov    ecx,ebp
c0002faf:	29 f9                	sub    ecx,edi
c0002fb1:	eb 04                	jmp    c0002fb7 <create_partition+0xe7>
c0002fb3:	85 c9                	test   ecx,ecx
c0002fb5:	74 7f                	je     c0003036 <create_partition+0x166>
c0002fb7:	89 fa                	mov    edx,edi
c0002fb9:	89 f0                	mov    eax,esi
c0002fbb:	e8 32 ef ff ff       	call   c0001ef2 <st_dword>
c0002fc0:	8d 46 04             	lea    eax,[esi+0x4]
c0002fc3:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002fc8:	83 c6 10             	add    esi,0x10
c0002fcb:	89 ca                	mov    edx,ecx
c0002fcd:	e8 20 ef ff ff       	call   c0001ef2 <st_dword>
c0002fd2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002fd6:	31 d2                	xor    edx,edx
c0002fd8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002fdc:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002fdf:	89 f8                	mov    eax,edi
c0002fe1:	f7 f3                	div    ebx
c0002fe3:	01 cf                	add    edi,ecx
c0002fe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002fe9:	31 d2                	xor    edx,edx
c0002feb:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002fef:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002ff3:	fe c3                	inc    bl
c0002ff5:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002ff8:	89 c2                	mov    edx,eax
c0002ffa:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002ffd:	c1 ea 02             	shr    edx,0x2
c0003000:	8d 47 ff             	lea    eax,[edi-0x1]
c0003003:	80 e2 c0             	and    dl,0xc0
c0003006:	08 da                	or     dl,bl
c0003008:	bb 3f 00 00 00       	mov    ebx,0x3f
c000300d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0003010:	31 d2                	xor    edx,edx
c0003012:	f7 f3                	div    ebx
c0003014:	89 d1                	mov    ecx,edx
c0003016:	31 d2                	xor    edx,edx
c0003018:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c000301c:	fe c1                	inc    cl
c000301e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0003021:	89 c3                	mov    ebx,eax
c0003023:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0003026:	c1 eb 02             	shr    ebx,0x2
c0003029:	80 e3 c0             	and    bl,0xc0
c000302c:	08 d9                	or     cl,bl
c000302e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0003031:	e9 2a ff ff ff       	jmp    c0002f60 <create_partition+0x90>
c0003036:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000303a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000303f:	05 fe 01 00 00       	add    eax,0x1fe
c0003044:	e8 a5 ee ff ff       	call   c0001eee <st_word>
c0003049:	6a 01                	push   0x1
c000304b:	6a 00                	push   0x0
c000304d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003055:	e8 3a ee ff ff       	call   c0001e94 <disk_write>
c000305a:	83 c4 10             	add    esp,0x10
c000305d:	85 c0                	test   eax,eax
c000305f:	0f 95 c0             	setne  al
c0003062:	0f b6 c0             	movzx  eax,al
c0003065:	eb 05                	jmp    c000306c <create_partition+0x19c>
c0003067:	b8 01 00 00 00       	mov    eax,0x1
c000306c:	83 c4 3c             	add    esp,0x3c
c000306f:	5b                   	pop    ebx
c0003070:	5e                   	pop    esi
c0003071:	5f                   	pop    edi
c0003072:	5d                   	pop    ebp
c0003073:	c3                   	ret    

c0003074 <get_fileinfo>:
c0003074:	55                   	push   ebp
c0003075:	57                   	push   edi
c0003076:	56                   	push   esi
c0003077:	53                   	push   ebx
c0003078:	83 ec 1c             	sub    esp,0x1c
c000307b:	8b 30                	mov    esi,DWORD PTR [eax]
c000307d:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003081:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003085:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003089:	0f 84 bc 01 00 00    	je     c000324b <get_fileinfo+0x1d7>
c000308f:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003093:	89 d3                	mov    ebx,edx
c0003095:	89 c6                	mov    esi,eax
c0003097:	74 6c                	je     c0003105 <get_fileinfo+0x91>
c0003099:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030a1:	31 ed                	xor    ebp,ebp
c00030a3:	31 ff                	xor    edi,edi
c00030a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00030ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030b0:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030b4:	85 c0                	test   eax,eax
c00030b6:	74 3e                	je     c00030f6 <get_fileinfo+0x82>
c00030b8:	85 ed                	test   ebp,ebp
c00030ba:	75 0d                	jne    c00030c9 <get_fileinfo+0x55>
c00030bc:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00030c2:	66 81 fa ff 07       	cmp    dx,0x7ff
c00030c7:	76 22                	jbe    c00030eb <get_fileinfo+0x77>
c00030c9:	89 ea                	mov    edx,ebp
c00030cb:	b9 ff 00 00 00       	mov    ecx,0xff
c00030d0:	c1 e2 10             	shl    edx,0x10
c00030d3:	29 f9                	sub    ecx,edi
c00030d5:	09 d0                	or     eax,edx
c00030d7:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00030db:	e8 38 ef ff ff       	call   c0002018 <put_utf>
c00030e0:	84 c0                	test   al,al
c00030e2:	74 10                	je     c00030f4 <get_fileinfo+0x80>
c00030e4:	0f b6 c0             	movzx  eax,al
c00030e7:	01 c7                	add    edi,eax
c00030e9:	31 c0                	xor    eax,eax
c00030eb:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00030f0:	89 c5                	mov    ebp,eax
c00030f2:	eb b1                	jmp    c00030a5 <get_fileinfo+0x31>
c00030f4:	31 ff                	xor    edi,edi
c00030f6:	85 ed                	test   ebp,ebp
c00030f8:	b8 00 00 00 00       	mov    eax,0x0
c00030fd:	0f 45 f8             	cmovne edi,eax
c0003100:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003105:	31 ff                	xor    edi,edi
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	83 f9 0a             	cmp    ecx,0xa
c000310c:	0f 87 a1 00 00 00    	ja     c00031b3 <get_fileinfo+0x13f>
c0003112:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003115:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003118:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000311c:	83 fa 20             	cmp    edx,0x20
c000311f:	0f 84 87 00 00 00    	je     c00031ac <get_fileinfo+0x138>
c0003125:	83 fa 05             	cmp    edx,0x5
c0003128:	75 05                	jne    c000312f <get_fileinfo+0xbb>
c000312a:	ba e5 00 00 00       	mov    edx,0xe5
c000312f:	83 fd 09             	cmp    ebp,0x9
c0003132:	75 0b                	jne    c000313f <get_fileinfo+0xcb>
c0003134:	83 ff 0b             	cmp    edi,0xb
c0003137:	77 06                	ja     c000313f <get_fileinfo+0xcb>
c0003139:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000313e:	47                   	inc    edi
c000313f:	89 d0                	mov    eax,edx
c0003141:	e8 02 ee ff ff       	call   c0001f48 <dbc_1st>
c0003146:	85 c0                	test   eax,eax
c0003148:	74 2e                	je     c0003178 <get_fileinfo+0x104>
c000314a:	83 fd 08             	cmp    ebp,0x8
c000314d:	74 29                	je     c0003178 <get_fileinfo+0x104>
c000314f:	83 fd 0b             	cmp    ebp,0xb
c0003152:	74 24                	je     c0003178 <get_fileinfo+0x104>
c0003154:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003157:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000315b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000315f:	e8 e7 ed ff ff       	call   c0001f4b <dbc_2nd>
c0003164:	85 c0                	test   eax,eax
c0003166:	74 10                	je     c0003178 <get_fileinfo+0x104>
c0003168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000316d:	c1 e2 08             	shl    edx,0x8
c0003170:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003173:	09 d0                	or     eax,edx
c0003175:	0f b7 d0             	movzx  edx,ax
c0003178:	50                   	push   eax
c0003179:	50                   	push   eax
c000317a:	68 b5 01 00 00       	push   0x1b5
c000317f:	52                   	push   edx
c0003180:	e8 3f 2b 00 00       	call   c0005cc4 <ff_oem2uni>
c0003185:	83 c4 10             	add    esp,0x10
c0003188:	0f b7 c0             	movzx  eax,ax
c000318b:	85 c0                	test   eax,eax
c000318d:	75 04                	jne    c0003193 <get_fileinfo+0x11f>
c000318f:	31 ff                	xor    edi,edi
c0003191:	eb 20                	jmp    c00031b3 <get_fileinfo+0x13f>
c0003193:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003197:	b9 0c 00 00 00       	mov    ecx,0xc
c000319c:	29 f9                	sub    ecx,edi
c000319e:	e8 75 ee ff ff       	call   c0002018 <put_utf>
c00031a3:	84 c0                	test   al,al
c00031a5:	74 e8                	je     c000318f <get_fileinfo+0x11b>
c00031a7:	0f b6 c0             	movzx  eax,al
c00031aa:	01 c7                	add    edi,eax
c00031ac:	89 e9                	mov    ecx,ebp
c00031ae:	e9 56 ff ff ff       	jmp    c0003109 <get_fileinfo+0x95>
c00031b3:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00031b8:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00031bc:	75 59                	jne    c0003217 <get_fileinfo+0x1a3>
c00031be:	85 ff                	test   edi,edi
c00031c0:	75 0b                	jne    c00031cd <get_fileinfo+0x159>
c00031c2:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00031c6:	b9 01 00 00 00       	mov    ecx,0x1
c00031cb:	eb 38                	jmp    c0003205 <get_fileinfo+0x191>
c00031cd:	b2 08                	mov    dl,0x8
c00031cf:	31 c9                	xor    ecx,ecx
c00031d1:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c00031d7:	84 c0                	test   al,al
c00031d9:	74 2a                	je     c0003205 <get_fileinfo+0x191>
c00031db:	0f b7 c0             	movzx  eax,ax
c00031de:	83 f8 2e             	cmp    eax,0x2e
c00031e1:	74 19                	je     c00031fc <get_fileinfo+0x188>
c00031e3:	8d 78 bf             	lea    edi,[eax-0x41]
c00031e6:	66 83 ff 19          	cmp    di,0x19
c00031ea:	77 12                	ja     c00031fe <get_fileinfo+0x18a>
c00031ec:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00031ef:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c00031f2:	74 0a                	je     c00031fe <get_fileinfo+0x18a>
c00031f4:	83 c0 20             	add    eax,0x20
c00031f7:	0f b7 c0             	movzx  eax,ax
c00031fa:	eb 02                	jmp    c00031fe <get_fileinfo+0x18a>
c00031fc:	b2 10                	mov    dl,0x10
c00031fe:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003202:	41                   	inc    ecx
c0003203:	eb cc                	jmp    c00031d1 <get_fileinfo+0x15d>
c0003205:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000320a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000320d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003211:	75 04                	jne    c0003217 <get_fileinfo+0x1a3>
c0003213:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003217:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000321a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000321d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003220:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003223:	83 c0 1c             	add    eax,0x1c
c0003226:	e8 ab ec ff ff       	call   c0001ed6 <ld_dword>
c000322b:	89 03                	mov    DWORD PTR [ebx],eax
c000322d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003230:	83 c0 16             	add    eax,0x16
c0003233:	e8 91 ec ff ff       	call   c0001ec9 <ld_word>
c0003238:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000323c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000323f:	83 c0 18             	add    eax,0x18
c0003242:	e8 82 ec ff ff       	call   c0001ec9 <ld_word>
c0003247:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000324b:	83 c4 1c             	add    esp,0x1c
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	5f                   	pop    edi
c0003251:	5d                   	pop    ebp
c0003252:	c3                   	ret    

c0003253 <ld_clust.isra.0>:
c0003253:	56                   	push   esi
c0003254:	88 c1                	mov    cl,al
c0003256:	53                   	push   ebx
c0003257:	89 d6                	mov    esi,edx
c0003259:	8d 42 1a             	lea    eax,[edx+0x1a]
c000325c:	e8 68 ec ff ff       	call   c0001ec9 <ld_word>
c0003261:	80 f9 03             	cmp    cl,0x3
c0003264:	0f b7 d8             	movzx  ebx,ax
c0003267:	75 0d                	jne    c0003276 <ld_clust.isra.0+0x23>
c0003269:	8d 46 14             	lea    eax,[esi+0x14]
c000326c:	e8 58 ec ff ff       	call   c0001ec9 <ld_word>
c0003271:	c1 e0 10             	shl    eax,0x10
c0003274:	09 c3                	or     ebx,eax
c0003276:	89 d8                	mov    eax,ebx
c0003278:	5b                   	pop    ebx
c0003279:	5e                   	pop    esi
c000327a:	c3                   	ret    

c000327b <st_clust.isra.1>:
c000327b:	56                   	push   esi
c000327c:	89 c6                	mov    esi,eax
c000327e:	53                   	push   ebx
c000327f:	89 d3                	mov    ebx,edx
c0003281:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003284:	0f b7 d1             	movzx  edx,cx
c0003287:	e8 62 ec ff ff       	call   c0001eee <st_word>
c000328c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000328f:	75 0f                	jne    c00032a0 <st_clust.isra.1+0x25>
c0003291:	8d 43 14             	lea    eax,[ebx+0x14]
c0003294:	5b                   	pop    ebx
c0003295:	c1 e9 10             	shr    ecx,0x10
c0003298:	89 ca                	mov    edx,ecx
c000329a:	5e                   	pop    esi
c000329b:	e9 4e ec ff ff       	jmp    c0001eee <st_word>
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	c3                   	ret    

c00032a3 <get_fat.isra.2>:
c00032a3:	83 fa 01             	cmp    edx,0x1
c00032a6:	b9 01 00 00 00       	mov    ecx,0x1
c00032ab:	0f 86 f1 00 00 00    	jbe    c00033a2 <get_fat.isra.2+0xff>
c00032b1:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00032b4:	0f 83 e8 00 00 00    	jae    c00033a2 <get_fat.isra.2+0xff>
c00032ba:	55                   	push   ebp
c00032bb:	57                   	push   edi
c00032bc:	89 c7                	mov    edi,eax
c00032be:	56                   	push   esi
c00032bf:	89 d6                	mov    esi,edx
c00032c1:	53                   	push   ebx
c00032c2:	83 ec 0c             	sub    esp,0xc
c00032c5:	8a 00                	mov    al,BYTE PTR [eax]
c00032c7:	3c 02                	cmp    al,0x2
c00032c9:	74 78                	je     c0003343 <get_fat.isra.2+0xa0>
c00032cb:	3c 03                	cmp    al,0x3
c00032cd:	0f 84 97 00 00 00    	je     c000336a <get_fat.isra.2+0xc7>
c00032d3:	fe c8                	dec    al
c00032d5:	0f 85 bd 00 00 00    	jne    c0003398 <get_fat.isra.2+0xf5>
c00032db:	89 d3                	mov    ebx,edx
c00032dd:	89 f8                	mov    eax,edi
c00032df:	d1 eb                	shr    ebx,1
c00032e1:	01 d3                	add    ebx,edx
c00032e3:	89 da                	mov    edx,ebx
c00032e5:	c1 ea 09             	shr    edx,0x9
c00032e8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032eb:	e8 ed f0 ff ff       	call   c00023dd <move_window>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 08                	je     c00032fc <get_fat.isra.2+0x59>
c00032f4:	83 c9 ff             	or     ecx,0xffffffff
c00032f7:	e9 9c 00 00 00       	jmp    c0003398 <get_fat.isra.2+0xf5>
c00032fc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00032ff:	89 f8                	mov    eax,edi
c0003301:	89 ea                	mov    edx,ebp
c0003303:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003309:	c1 ea 09             	shr    edx,0x9
c000330c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003310:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003313:	e8 c5 f0 ff ff       	call   c00023dd <move_window>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 d8                	jne    c00032f4 <get_fat.isra.2+0x51>
c000331c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003322:	0f b6 c3             	movzx  eax,bl
c0003325:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000332a:	c1 e3 08             	shl    ebx,0x8
c000332d:	09 c3                	or     ebx,eax
c000332f:	89 d9                	mov    ecx,ebx
c0003331:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003337:	83 e6 01             	and    esi,0x1
c000333a:	74 5c                	je     c0003398 <get_fat.isra.2+0xf5>
c000333c:	89 d9                	mov    ecx,ebx
c000333e:	c1 e9 04             	shr    ecx,0x4
c0003341:	eb 55                	jmp    c0003398 <get_fat.isra.2+0xf5>
c0003343:	c1 ea 08             	shr    edx,0x8
c0003346:	89 f8                	mov    eax,edi
c0003348:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000334b:	e8 8d f0 ff ff       	call   c00023dd <move_window>
c0003350:	85 c0                	test   eax,eax
c0003352:	75 a0                	jne    c00032f4 <get_fat.isra.2+0x51>
c0003354:	01 f6                	add    esi,esi
c0003356:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000335c:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003360:	e8 64 eb ff ff       	call   c0001ec9 <ld_word>
c0003365:	0f b7 c8             	movzx  ecx,ax
c0003368:	eb 2e                	jmp    c0003398 <get_fat.isra.2+0xf5>
c000336a:	c1 ea 07             	shr    edx,0x7
c000336d:	89 f8                	mov    eax,edi
c000336f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003372:	e8 66 f0 ff ff       	call   c00023dd <move_window>
c0003377:	85 c0                	test   eax,eax
c0003379:	0f 85 75 ff ff ff    	jne    c00032f4 <get_fat.isra.2+0x51>
c000337f:	c1 e6 02             	shl    esi,0x2
c0003382:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003388:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000338c:	e8 45 eb ff ff       	call   c0001ed6 <ld_dword>
c0003391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003396:	89 c1                	mov    ecx,eax
c0003398:	83 c4 0c             	add    esp,0xc
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	5f                   	pop    edi
c00033a0:	5d                   	pop    ebp
c00033a1:	c3                   	ret    
c00033a2:	89 c8                	mov    eax,ecx
c00033a4:	c3                   	ret    

c00033a5 <dir_sdi>:
c00033a5:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00033ab:	0f 87 b6 00 00 00    	ja     c0003467 <dir_sdi+0xc2>
c00033b1:	55                   	push   ebp
c00033b2:	57                   	push   edi
c00033b3:	56                   	push   esi
c00033b4:	53                   	push   ebx
c00033b5:	89 d3                	mov    ebx,edx
c00033b7:	83 ec 1c             	sub    esp,0x1c
c00033ba:	f6 c2 1f             	test   dl,0x1f
c00033bd:	74 0a                	je     c00033c9 <dir_sdi+0x24>
c00033bf:	b8 02 00 00 00       	mov    eax,0x2
c00033c4:	e9 96 00 00 00       	jmp    c000345f <dir_sdi+0xba>
c00033c9:	89 c6                	mov    esi,eax
c00033cb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00033cd:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00033d0:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00033d3:	85 ff                	test   edi,edi
c00033d5:	75 21                	jne    c00033f8 <dir_sdi+0x53>
c00033d7:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00033db:	76 07                	jbe    c00033e4 <dir_sdi+0x3f>
c00033dd:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033e0:	85 c0                	test   eax,eax
c00033e2:	75 12                	jne    c00033f6 <dir_sdi+0x51>
c00033e4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00033e8:	89 da                	mov    edx,ebx
c00033ea:	c1 ea 05             	shr    edx,0x5
c00033ed:	39 c2                	cmp    edx,eax
c00033ef:	73 ce                	jae    c00033bf <dir_sdi+0x1a>
c00033f1:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033f4:	eb 3c                	jmp    c0003432 <dir_sdi+0x8d>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033fc:	c1 e1 09             	shl    ecx,0x9
c00033ff:	39 cb                	cmp    ebx,ecx
c0003401:	72 26                	jb     c0003429 <dir_sdi+0x84>
c0003403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003407:	8b 06                	mov    eax,DWORD PTR [esi]
c0003409:	89 fa                	mov    edx,edi
c000340b:	e8 93 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003410:	83 f8 ff             	cmp    eax,0xffffffff
c0003413:	89 c7                	mov    edi,eax
c0003415:	74 43                	je     c000345a <dir_sdi+0xb5>
c0003417:	83 f8 01             	cmp    eax,0x1
c000341a:	76 a3                	jbe    c00033bf <dir_sdi+0x1a>
c000341c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000341f:	76 9e                	jbe    c00033bf <dir_sdi+0x1a>
c0003421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003425:	29 cb                	sub    ebx,ecx
c0003427:	eb d6                	jmp    c00033ff <dir_sdi+0x5a>
c0003429:	89 fa                	mov    edx,edi
c000342b:	89 e8                	mov    eax,ebp
c000342d:	e8 d6 ec ff ff       	call   c0002108 <clst2sect>
c0003432:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003435:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c0003438:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000343b:	85 d2                	test   edx,edx
c000343d:	74 80                	je     c00033bf <dir_sdi+0x1a>
c000343f:	89 d8                	mov    eax,ebx
c0003441:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003447:	c1 e8 09             	shr    eax,0x9
c000344a:	01 d0                	add    eax,edx
c000344c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344f:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003453:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003456:	31 c0                	xor    eax,eax
c0003458:	eb 05                	jmp    c000345f <dir_sdi+0xba>
c000345a:	b8 01 00 00 00       	mov    eax,0x1
c000345f:	83 c4 1c             	add    esp,0x1c
c0003462:	5b                   	pop    ebx
c0003463:	5e                   	pop    esi
c0003464:	5f                   	pop    edi
c0003465:	5d                   	pop    ebp
c0003466:	c3                   	ret    
c0003467:	b8 02 00 00 00       	mov    eax,0x2
c000346c:	c3                   	ret    

c000346d <create_chain>:
c000346d:	55                   	push   ebp
c000346e:	89 c5                	mov    ebp,eax
c0003470:	57                   	push   edi
c0003471:	89 d7                	mov    edi,edx
c0003473:	56                   	push   esi
c0003474:	53                   	push   ebx
c0003475:	83 ec 1c             	sub    esp,0x1c
c0003478:	85 d2                	test   edx,edx
c000347a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000347c:	75 0e                	jne    c000348c <create_chain+0x1f>
c000347e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003481:	85 c9                	test   ecx,ecx
c0003483:	74 32                	je     c00034b7 <create_chain+0x4a>
c0003485:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003488:	77 32                	ja     c00034bc <create_chain+0x4f>
c000348a:	eb 2b                	jmp    c00034b7 <create_chain+0x4a>
c000348c:	89 d8                	mov    eax,ebx
c000348e:	e8 10 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003493:	83 f8 01             	cmp    eax,0x1
c0003496:	77 0a                	ja     c00034a2 <create_chain+0x35>
c0003498:	b8 01 00 00 00       	mov    eax,0x1
c000349d:	e9 f8 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 ec 00 00 00    	je     c0003597 <create_chain+0x12a>
c00034ab:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034ae:	89 f9                	mov    ecx,edi
c00034b0:	76 0a                	jbe    c00034bc <create_chain+0x4f>
c00034b2:	e9 e3 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034b7:	b9 01 00 00 00       	mov    ecx,0x1
c00034bc:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00034c0:	75 07                	jne    c00034c9 <create_chain+0x5c>
c00034c2:	31 c0                	xor    eax,eax
c00034c4:	e9 d1 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034c9:	39 f9                	cmp    ecx,edi
c00034cb:	75 49                	jne    c0003516 <create_chain+0xa9>
c00034cd:	8d 71 01             	lea    esi,[ecx+0x1]
c00034d0:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034d3:	77 05                	ja     c00034da <create_chain+0x6d>
c00034d5:	be 02 00 00 00       	mov    esi,0x2
c00034da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e1:	89 f2                	mov    edx,esi
c00034e3:	e8 bb fd ff ff       	call   c00032a3 <get_fat.isra.2>
c00034e8:	83 f8 01             	cmp    eax,0x1
c00034eb:	0f 84 a9 00 00 00    	je     c000359a <create_chain+0x12d>
c00034f1:	83 f8 ff             	cmp    eax,0xffffffff
c00034f4:	0f 84 a0 00 00 00    	je     c000359a <create_chain+0x12d>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003500:	74 10                	je     c0003512 <create_chain+0xa5>
c0003502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003505:	83 f8 01             	cmp    eax,0x1
c0003508:	76 0c                	jbe    c0003516 <create_chain+0xa9>
c000350a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000350d:	0f 47 c8             	cmova  ecx,eax
c0003510:	eb 04                	jmp    c0003516 <create_chain+0xa9>
c0003512:	85 f6                	test   esi,esi
c0003514:	75 3b                	jne    c0003551 <create_chain+0xe4>
c0003516:	89 ce                	mov    esi,ecx
c0003518:	46                   	inc    esi
c0003519:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000351c:	77 0a                	ja     c0003528 <create_chain+0xbb>
c000351e:	83 f9 01             	cmp    ecx,0x1
c0003521:	76 9f                	jbe    c00034c2 <create_chain+0x55>
c0003523:	be 02 00 00 00       	mov    esi,0x2
c0003528:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000352c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000352f:	89 f2                	mov    edx,esi
c0003531:	e8 6d fd ff ff       	call   c00032a3 <get_fat.isra.2>
c0003536:	85 c0                	test   eax,eax
c0003538:	74 17                	je     c0003551 <create_chain+0xe4>
c000353a:	83 f8 01             	cmp    eax,0x1
c000353d:	74 5b                	je     c000359a <create_chain+0x12d>
c000353f:	83 f8 ff             	cmp    eax,0xffffffff
c0003542:	74 56                	je     c000359a <create_chain+0x12d>
c0003544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003548:	39 ce                	cmp    esi,ecx
c000354a:	75 cc                	jne    c0003518 <create_chain+0xab>
c000354c:	e9 71 ff ff ff       	jmp    c00034c2 <create_chain+0x55>
c0003551:	83 c9 ff             	or     ecx,0xffffffff
c0003554:	89 f2                	mov    edx,esi
c0003556:	89 d8                	mov    eax,ebx
c0003558:	e8 da f2 ff ff       	call   c0002837 <put_fat>
c000355d:	85 c0                	test   eax,eax
c000355f:	75 0f                	jne    c0003570 <create_chain+0x103>
c0003561:	85 ff                	test   edi,edi
c0003563:	74 0b                	je     c0003570 <create_chain+0x103>
c0003565:	89 f1                	mov    ecx,esi
c0003567:	89 fa                	mov    edx,edi
c0003569:	89 d8                	mov    eax,ebx
c000356b:	e8 c7 f2 ff ff       	call   c0002837 <put_fat>
c0003570:	85 c0                	test   eax,eax
c0003572:	75 1c                	jne    c0003590 <create_chain+0x123>
c0003574:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003577:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000357a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357d:	8d 57 fe             	lea    edx,[edi-0x2]
c0003580:	39 d0                	cmp    eax,edx
c0003582:	77 04                	ja     c0003588 <create_chain+0x11b>
c0003584:	48                   	dec    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000358c:	89 f0                	mov    eax,esi
c000358e:	eb 0a                	jmp    c000359a <create_chain+0x12d>
c0003590:	48                   	dec    eax
c0003591:	0f 85 01 ff ff ff    	jne    c0003498 <create_chain+0x2b>
c0003597:	83 c8 ff             	or     eax,0xffffffff
c000359a:	83 c4 1c             	add    esp,0x1c
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	5d                   	pop    ebp
c00035a1:	c3                   	ret    

c00035a2 <remove_chain>:
c00035a2:	55                   	push   ebp
c00035a3:	57                   	push   edi
c00035a4:	56                   	push   esi
c00035a5:	89 d6                	mov    esi,edx
c00035a7:	53                   	push   ebx
c00035a8:	83 ec 0c             	sub    esp,0xc
c00035ab:	83 fa 01             	cmp    edx,0x1
c00035ae:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035b0:	76 65                	jbe    c0003617 <remove_chain+0x75>
c00035b2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00035b5:	76 60                	jbe    c0003617 <remove_chain+0x75>
c00035b7:	85 c9                	test   ecx,ecx
c00035b9:	89 c5                	mov    ebp,eax
c00035bb:	89 ca                	mov    edx,ecx
c00035bd:	74 0e                	je     c00035cd <remove_chain+0x2b>
c00035bf:	83 c9 ff             	or     ecx,0xffffffff
c00035c2:	89 d8                	mov    eax,ebx
c00035c4:	e8 6e f2 ff ff       	call   c0002837 <put_fat>
c00035c9:	85 c0                	test   eax,eax
c00035cb:	75 56                	jne    c0003623 <remove_chain+0x81>
c00035cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	e8 cc fc ff ff       	call   c00032a3 <get_fat.isra.2>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	89 c7                	mov    edi,eax
c00035db:	75 04                	jne    c00035e1 <remove_chain+0x3f>
c00035dd:	31 c0                	xor    eax,eax
c00035df:	eb 42                	jmp    c0003623 <remove_chain+0x81>
c00035e1:	83 f8 01             	cmp    eax,0x1
c00035e4:	74 31                	je     c0003617 <remove_chain+0x75>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	74 33                	je     c000361e <remove_chain+0x7c>
c00035eb:	31 c9                	xor    ecx,ecx
c00035ed:	89 f2                	mov    edx,esi
c00035ef:	89 d8                	mov    eax,ebx
c00035f1:	e8 41 f2 ff ff       	call   c0002837 <put_fat>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 29                	jne    c0003623 <remove_chain+0x81>
c00035fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003600:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003603:	39 c8                	cmp    eax,ecx
c0003605:	73 08                	jae    c000360f <remove_chain+0x6d>
c0003607:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000360b:	40                   	inc    eax
c000360c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000360f:	39 fa                	cmp    edx,edi
c0003611:	89 fe                	mov    esi,edi
c0003613:	77 b8                	ja     c00035cd <remove_chain+0x2b>
c0003615:	eb c6                	jmp    c00035dd <remove_chain+0x3b>
c0003617:	b8 02 00 00 00       	mov    eax,0x2
c000361c:	eb 05                	jmp    c0003623 <remove_chain+0x81>
c000361e:	b8 01 00 00 00       	mov    eax,0x1
c0003623:	83 c4 0c             	add    esp,0xc
c0003626:	5b                   	pop    ebx
c0003627:	5e                   	pop    esi
c0003628:	5f                   	pop    edi
c0003629:	5d                   	pop    ebp
c000362a:	c3                   	ret    

c000362b <dir_next>:
c000362b:	55                   	push   ebp
c000362c:	57                   	push   edi
c000362d:	56                   	push   esi
c000362e:	53                   	push   ebx
c000362f:	83 ec 1c             	sub    esp,0x1c
c0003632:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003635:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003637:	83 c7 20             	add    edi,0x20
c000363a:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003640:	76 07                	jbe    c0003649 <dir_next+0x1e>
c0003642:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003649:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	85 f6                	test   esi,esi
c0003653:	0f 84 cd 00 00 00    	je     c0003726 <dir_next+0xfb>
c0003659:	89 c3                	mov    ebx,eax
c000365b:	89 f8                	mov    eax,edi
c000365d:	25 ff 01 00 00       	and    eax,0x1ff
c0003662:	89 d1                	mov    ecx,edx
c0003664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003668:	0f 85 a8 00 00 00    	jne    c0003716 <dir_next+0xeb>
c000366e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003671:	46                   	inc    esi
c0003672:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003675:	85 d2                	test   edx,edx
c0003677:	75 22                	jne    c000369b <dir_next+0x70>
c0003679:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000367d:	89 fa                	mov    edx,edi
c000367f:	c1 ea 05             	shr    edx,0x5
c0003682:	39 c2                	cmp    edx,eax
c0003684:	0f 82 8c 00 00 00    	jb     c0003716 <dir_next+0xeb>
c000368a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003691:	b9 04 00 00 00       	mov    ecx,0x4
c0003696:	e9 8b 00 00 00       	jmp    c0003726 <dir_next+0xfb>
c000369b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000369f:	89 fe                	mov    esi,edi
c00036a1:	c1 ee 09             	shr    esi,0x9
c00036a4:	48                   	dec    eax
c00036a5:	85 f0                	test   eax,esi
c00036a7:	75 6d                	jne    c0003716 <dir_next+0xeb>
c00036a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036ad:	89 e8                	mov    eax,ebp
c00036af:	e8 ef fb ff ff       	call   c00032a3 <get_fat.isra.2>
c00036b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b8:	83 f8 01             	cmp    eax,0x1
c00036bb:	89 c6                	mov    esi,eax
c00036bd:	77 07                	ja     c00036c6 <dir_next+0x9b>
c00036bf:	b9 02 00 00 00       	mov    ecx,0x2
c00036c4:	eb 60                	jmp    c0003726 <dir_next+0xfb>
c00036c6:	83 f8 ff             	cmp    eax,0xffffffff
c00036c9:	75 07                	jne    c00036d2 <dir_next+0xa7>
c00036cb:	b9 01 00 00 00       	mov    ecx,0x1
c00036d0:	eb 54                	jmp    c0003726 <dir_next+0xfb>
c00036d2:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00036d5:	77 30                	ja     c0003707 <dir_next+0xdc>
c00036d7:	85 c9                	test   ecx,ecx
c00036d9:	74 af                	je     c000368a <dir_next+0x5f>
c00036db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036de:	89 d8                	mov    eax,ebx
c00036e0:	e8 88 fd ff ff       	call   c000346d <create_chain>
c00036e5:	b9 07 00 00 00       	mov    ecx,0x7
c00036ea:	85 c0                	test   eax,eax
c00036ec:	89 c6                	mov    esi,eax
c00036ee:	74 36                	je     c0003726 <dir_next+0xfb>
c00036f0:	83 f8 01             	cmp    eax,0x1
c00036f3:	74 ca                	je     c00036bf <dir_next+0x94>
c00036f5:	83 f8 ff             	cmp    eax,0xffffffff
c00036f8:	74 d1                	je     c00036cb <dir_next+0xa0>
c00036fa:	89 c2                	mov    edx,eax
c00036fc:	89 e8                	mov    eax,ebp
c00036fe:	e8 88 f2 ff ff       	call   c000298b <dir_clear>
c0003703:	85 c0                	test   eax,eax
c0003705:	75 c4                	jne    c00036cb <dir_next+0xa0>
c0003707:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000370a:	89 f2                	mov    edx,esi
c000370c:	89 e8                	mov    eax,ebp
c000370e:	e8 f5 e9 ff ff       	call   c0002108 <clst2sect>
c0003713:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003716:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000371d:	31 c9                	xor    ecx,ecx
c000371f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003723:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 c8                	mov    eax,ecx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <dir_alloc>:
c0003730:	55                   	push   ebp
c0003731:	89 c5                	mov    ebp,eax
c0003733:	57                   	push   edi
c0003734:	89 d7                	mov    edi,edx
c0003736:	56                   	push   esi
c0003737:	31 d2                	xor    edx,edx
c0003739:	53                   	push   ebx
c000373a:	83 ec 0c             	sub    esp,0xc
c000373d:	8b 30                	mov    esi,DWORD PTR [eax]
c000373f:	e8 61 fc ff ff       	call   c00033a5 <dir_sdi>
c0003744:	85 c0                	test   eax,eax
c0003746:	75 37                	jne    c000377f <dir_alloc+0x4f>
c0003748:	31 db                	xor    ebx,ebx
c000374a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000374d:	89 f0                	mov    eax,esi
c000374f:	e8 89 ec ff ff       	call   c00023dd <move_window>
c0003754:	85 c0                	test   eax,eax
c0003756:	75 27                	jne    c000377f <dir_alloc+0x4f>
c0003758:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000375b:	8a 12                	mov    dl,BYTE PTR [edx]
c000375d:	80 fa e5             	cmp    dl,0xe5
c0003760:	74 04                	je     c0003766 <dir_alloc+0x36>
c0003762:	84 d2                	test   dl,dl
c0003764:	75 07                	jne    c000376d <dir_alloc+0x3d>
c0003766:	43                   	inc    ebx
c0003767:	39 fb                	cmp    ebx,edi
c0003769:	75 04                	jne    c000376f <dir_alloc+0x3f>
c000376b:	eb 1c                	jmp    c0003789 <dir_alloc+0x59>
c000376d:	31 db                	xor    ebx,ebx
c000376f:	ba 01 00 00 00       	mov    edx,0x1
c0003774:	89 e8                	mov    eax,ebp
c0003776:	e8 b0 fe ff ff       	call   c000362b <dir_next>
c000377b:	85 c0                	test   eax,eax
c000377d:	74 cb                	je     c000374a <dir_alloc+0x1a>
c000377f:	83 f8 04             	cmp    eax,0x4
c0003782:	75 05                	jne    c0003789 <dir_alloc+0x59>
c0003784:	b8 07 00 00 00       	mov    eax,0x7
c0003789:	83 c4 0c             	add    esp,0xc
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <dir_read>:
c0003791:	55                   	push   ebp
c0003792:	57                   	push   edi
c0003793:	56                   	push   esi
c0003794:	be 04 00 00 00       	mov    esi,0x4
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00037a3:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a5:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037aa:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037af:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037b2:	85 d2                	test   edx,edx
c00037b4:	0f 84 d8 00 00 00    	je     c0003892 <dir_read+0x101>
c00037ba:	89 e8                	mov    eax,ebp
c00037bc:	e8 1c ec ff ff       	call   c00023dd <move_window>
c00037c1:	85 c0                	test   eax,eax
c00037c3:	89 c6                	mov    esi,eax
c00037c5:	0f 85 d2 00 00 00    	jne    c000389d <dir_read+0x10c>
c00037cb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00037ce:	8a 0f                	mov    cl,BYTE PTR [edi]
c00037d0:	84 c9                	test   cl,cl
c00037d2:	0f 84 c0 00 00 00    	je     c0003898 <dir_read+0x107>
c00037d8:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00037db:	24 3f                	and    al,0x3f
c00037dd:	80 f9 e5             	cmp    cl,0xe5
c00037e0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037e3:	0f 84 8f 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037e9:	80 f9 2e             	cmp    cl,0x2e
c00037ec:	0f 84 86 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037f2:	0f b6 d0             	movzx  edx,al
c00037f5:	83 e2 df             	and    edx,0xffffffdf
c00037f8:	83 fa 08             	cmp    edx,0x8
c00037fb:	0f 94 c2             	sete   dl
c00037fe:	0f b6 d2             	movzx  edx,dl
c0003801:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003805:	75 71                	jne    c0003878 <dir_read+0xe7>
c0003807:	3c 0f                	cmp    al,0xf
c0003809:	75 4c                	jne    c0003857 <dir_read+0xc6>
c000380b:	88 c8                	mov    al,cl
c000380d:	24 40                	and    al,0x40
c000380f:	74 12                	je     c0003823 <dir_read+0x92>
c0003811:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003814:	80 e1 bf             	and    cl,0xbf
c0003817:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000381b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000381e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003821:	eb 06                	jmp    c0003829 <dir_read+0x98>
c0003823:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003827:	75 4f                	jne    c0003878 <dir_read+0xe7>
c0003829:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000382e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003832:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c0003835:	75 46                	jne    c000387d <dir_read+0xec>
c0003837:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000383b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000383e:	89 fa                	mov    edx,edi
c0003840:	e8 e0 e8 ff ff       	call   c0002125 <pick_lfn>
c0003845:	85 c0                	test   eax,eax
c0003847:	74 34                	je     c000387d <dir_read+0xec>
c0003849:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000384d:	88 c8                	mov    al,cl
c000384f:	fe c8                	dec    al
c0003851:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0003855:	eb 26                	jmp    c000387d <dir_read+0xec>
c0003857:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c000385c:	75 11                	jne    c000386f <dir_read+0xde>
c000385e:	89 f8                	mov    eax,edi
c0003860:	e8 76 ea ff ff       	call   c00022db <sum_sfn>
c0003865:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003869:	75 04                	jne    c000386f <dir_read+0xde>
c000386b:	31 f6                	xor    esi,esi
c000386d:	eb 35                	jmp    c00038a4 <dir_read+0x113>
c000386f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003876:	eb 2c                	jmp    c00038a4 <dir_read+0x113>
c0003878:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 d8                	mov    eax,ebx
c0003881:	e8 a5 fd ff ff       	call   c000362b <dir_next>
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	0f 84 1f ff ff ff    	je     c00037af <dir_read+0x1e>
c0003890:	eb 0b                	jmp    c000389d <dir_read+0x10c>
c0003892:	85 f6                	test   esi,esi
c0003894:	74 d5                	je     c000386b <dir_read+0xda>
c0003896:	eb 05                	jmp    c000389d <dir_read+0x10c>
c0003898:	be 04 00 00 00       	mov    esi,0x4
c000389d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a4:	83 c4 1c             	add    esp,0x1c
c00038a7:	89 f0                	mov    eax,esi
c00038a9:	5b                   	pop    ebx
c00038aa:	5e                   	pop    esi
c00038ab:	5f                   	pop    edi
c00038ac:	5d                   	pop    ebp
c00038ad:	c3                   	ret    

c00038ae <dir_remove>:
c00038ae:	57                   	push   edi
c00038af:	56                   	push   esi
c00038b0:	53                   	push   ebx
c00038b1:	89 c3                	mov    ebx,eax
c00038b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00038b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038bb:	83 fa ff             	cmp    edx,0xffffffff
c00038be:	74 09                	je     c00038c9 <dir_remove+0x1b>
c00038c0:	e8 e0 fa ff ff       	call   c00033a5 <dir_sdi>
c00038c5:	85 c0                	test   eax,eax
c00038c7:	75 34                	jne    c00038fd <dir_remove+0x4f>
c00038c9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038cc:	89 f0                	mov    eax,esi
c00038ce:	e8 0a eb ff ff       	call   c00023dd <move_window>
c00038d3:	85 c0                	test   eax,eax
c00038d5:	75 1c                	jne    c00038f3 <dir_remove+0x45>
c00038d7:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038da:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038dd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038e1:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038e4:	73 17                	jae    c00038fd <dir_remove+0x4f>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 d8                	mov    eax,ebx
c00038ea:	e8 3c fd ff ff       	call   c000362b <dir_next>
c00038ef:	85 c0                	test   eax,eax
c00038f1:	74 d6                	je     c00038c9 <dir_remove+0x1b>
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	75 05                	jne    c00038fd <dir_remove+0x4f>
c00038f8:	b8 02 00 00 00       	mov    eax,0x2
c00038fd:	5b                   	pop    ebx
c00038fe:	5e                   	pop    esi
c00038ff:	5f                   	pop    edi
c0003900:	c3                   	ret    

c0003901 <dir_find>:
c0003901:	55                   	push   ebp
c0003902:	31 d2                	xor    edx,edx
c0003904:	57                   	push   edi
c0003905:	56                   	push   esi
c0003906:	53                   	push   ebx
c0003907:	89 c3                	mov    ebx,eax
c0003909:	83 ec 1c             	sub    esp,0x1c
c000390c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000390e:	e8 92 fa ff ff       	call   c00033a5 <dir_sdi>
c0003913:	85 c0                	test   eax,eax
c0003915:	89 c6                	mov    esi,eax
c0003917:	0f 85 03 01 00 00    	jne    c0003a20 <dir_find+0x11f>
c000391d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003924:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003929:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000392e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 a5 ea ff ff       	call   c00023dd <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 de 00 00 00    	jne    c0003a20 <dir_find+0x11f>
c0003942:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003945:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003947:	84 c9                	test   cl,cl
c0003949:	0f 84 cc 00 00 00    	je     c0003a1b <dir_find+0x11a>
c000394f:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003952:	88 c2                	mov    dl,al
c0003954:	80 e2 3f             	and    dl,0x3f
c0003957:	80 f9 e5             	cmp    cl,0xe5
c000395a:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c000395d:	0f 84 97 00 00 00    	je     c00039fa <dir_find+0xf9>
c0003963:	24 08                	and    al,0x8
c0003965:	74 0b                	je     c0003972 <dir_find+0x71>
c0003967:	80 fa 0f             	cmp    dl,0xf
c000396a:	0f 85 8a 00 00 00    	jne    c00039fa <dir_find+0xf9>
c0003970:	eb 05                	jmp    c0003977 <dir_find+0x76>
c0003972:	80 fa 0f             	cmp    dl,0xf
c0003975:	75 56                	jne    c00039cd <dir_find+0xcc>
c0003977:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000397b:	0f 85 85 00 00 00    	jne    c0003a06 <dir_find+0x105>
c0003981:	88 c8                	mov    al,cl
c0003983:	24 40                	and    al,0x40
c0003985:	74 12                	je     c0003999 <dir_find+0x98>
c0003987:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000398a:	80 e1 bf             	and    cl,0xbf
c000398d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003997:	eb 06                	jmp    c000399f <dir_find+0x9e>
c0003999:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000399d:	75 62                	jne    c0003a01 <dir_find+0x100>
c000399f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00039a4:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00039a8:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00039ab:	75 59                	jne    c0003a06 <dir_find+0x105>
c00039ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00039b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039b4:	89 fa                	mov    edx,edi
c00039b6:	e8 9c f3 ff ff       	call   c0002d57 <cmp_lfn>
c00039bb:	85 c0                	test   eax,eax
c00039bd:	74 47                	je     c0003a06 <dir_find+0x105>
c00039bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00039c3:	88 c8                	mov    al,cl
c00039c5:	fe c8                	dec    al
c00039c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00039cb:	eb 39                	jmp    c0003a06 <dir_find+0x105>
c00039cd:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00039d2:	75 0d                	jne    c00039e1 <dir_find+0xe0>
c00039d4:	89 f8                	mov    eax,edi
c00039d6:	e8 00 e9 ff ff       	call   c00022db <sum_sfn>
c00039db:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00039df:	74 3f                	je     c0003a20 <dir_find+0x11f>
c00039e1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039e5:	75 13                	jne    c00039fa <dir_find+0xf9>
c00039e7:	8d 53 20             	lea    edx,[ebx+0x20]
c00039ea:	b9 0b 00 00 00       	mov    ecx,0xb
c00039ef:	89 f8                	mov    eax,edi
c00039f1:	e8 1e e5 ff ff       	call   c0001f14 <mem_cmp>
c00039f6:	85 c0                	test   eax,eax
c00039f8:	74 26                	je     c0003a20 <dir_find+0x11f>
c00039fa:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a01:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003a06:	31 d2                	xor    edx,edx
c0003a08:	89 d8                	mov    eax,ebx
c0003a0a:	e8 1c fc ff ff       	call   c000362b <dir_next>
c0003a0f:	85 c0                	test   eax,eax
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	0f 84 15 ff ff ff    	je     c000392e <dir_find+0x2d>
c0003a19:	eb 05                	jmp    c0003a20 <dir_find+0x11f>
c0003a1b:	be 04 00 00 00       	mov    esi,0x4
c0003a20:	83 c4 1c             	add    esp,0x1c
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	5b                   	pop    ebx
c0003a26:	5e                   	pop    esi
c0003a27:	5f                   	pop    edi
c0003a28:	5d                   	pop    ebp
c0003a29:	c3                   	ret    

c0003a2a <follow_path>:
c0003a2a:	56                   	push   esi
c0003a2b:	53                   	push   ebx
c0003a2c:	89 c3                	mov    ebx,eax
c0003a2e:	83 ec 14             	sub    esp,0x14
c0003a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a3b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a3d:	80 fa 2f             	cmp    dl,0x2f
c0003a40:	75 07                	jne    c0003a49 <follow_path+0x1f>
c0003a42:	40                   	inc    eax
c0003a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a47:	eb ee                	jmp    c0003a37 <follow_path+0xd>
c0003a49:	80 fa 5c             	cmp    dl,0x5c
c0003a4c:	74 f4                	je     c0003a42 <follow_path+0x18>
c0003a4e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a55:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a58:	77 3e                	ja     c0003a98 <follow_path+0x6e>
c0003a5a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a5e:	31 d2                	xor    edx,edx
c0003a60:	89 d8                	mov    eax,ebx
c0003a62:	e8 3e f9 ff ff       	call   c00033a5 <dir_sdi>
c0003a67:	eb 57                	jmp    c0003ac0 <follow_path+0x96>
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 91 fe ff ff       	call   c0003901 <dir_find>
c0003a70:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a73:	85 c0                	test   eax,eax
c0003a75:	75 32                	jne    c0003aa9 <follow_path+0x7f>
c0003a77:	80 e2 04             	and    dl,0x4
c0003a7a:	75 44                	jne    c0003ac0 <follow_path+0x96>
c0003a7c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a80:	74 39                	je     c0003abb <follow_path+0x91>
c0003a82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a85:	25 ff 01 00 00       	and    eax,0x1ff
c0003a8a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a8e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a90:	e8 be f7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003a95:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 e4 ef ff ff       	call   c0002a87 <create_name>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c2                	je     c0003a69 <follow_path+0x3f>
c0003aa7:	eb 17                	jmp    c0003ac0 <follow_path+0x96>
c0003aa9:	83 f8 04             	cmp    eax,0x4
c0003aac:	75 12                	jne    c0003ac0 <follow_path+0x96>
c0003aae:	80 e2 04             	and    dl,0x4
c0003ab1:	ba 05 00 00 00       	mov    edx,0x5
c0003ab6:	0f 44 c2             	cmove  eax,edx
c0003ab9:	eb 05                	jmp    c0003ac0 <follow_path+0x96>
c0003abb:	b8 05 00 00 00       	mov    eax,0x5
c0003ac0:	83 c4 14             	add    esp,0x14
c0003ac3:	5b                   	pop    ebx
c0003ac4:	5e                   	pop    esi
c0003ac5:	c3                   	ret    

c0003ac6 <dir_register>:
c0003ac6:	55                   	push   ebp
c0003ac7:	57                   	push   edi
c0003ac8:	56                   	push   esi
c0003ac9:	be 06 00 00 00       	mov    esi,0x6
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 2c             	sub    esp,0x2c
c0003ad2:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003ad6:	0f 85 65 01 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003adc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ae4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ae6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003ae9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aed:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003af2:	74 06                	je     c0003afa <dir_register+0x34>
c0003af4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003af8:	eb ef                	jmp    c0003ae9 <dir_register+0x23>
c0003afa:	89 c3                	mov    ebx,eax
c0003afc:	b9 0c 00 00 00       	mov    ecx,0xc
c0003b01:	8d 40 20             	lea    eax,[eax+0x20]
c0003b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b08:	89 c2                	mov    edx,eax
c0003b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b0e:	e8 e2 e3 ff ff       	call   c0001ef5 <mem_cpy>
c0003b13:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b18:	74 48                	je     c0003b62 <dir_register+0x9c>
c0003b1a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b1e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b23:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b26:	55                   	push   ebp
c0003b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b2f:	e8 ec e6 ff ff       	call   c0002220 <gen_numname>
c0003b34:	58                   	pop    eax
c0003b35:	89 d8                	mov    eax,ebx
c0003b37:	e8 c5 fd ff ff       	call   c0003901 <dir_find>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 10                	jne    c0003b52 <dir_register+0x8c>
c0003b42:	45                   	inc    ebp
c0003b43:	83 fd 64             	cmp    ebp,0x64
c0003b46:	75 db                	jne    c0003b23 <dir_register+0x5d>
c0003b48:	be 07 00 00 00       	mov    esi,0x7
c0003b4d:	e9 ef 00 00 00       	jmp    c0003c41 <dir_register+0x17b>
c0003b52:	83 f8 04             	cmp    eax,0x4
c0003b55:	0f 85 e6 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b5b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b5f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b62:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b67:	bd 01 00 00 00       	mov    ebp,0x1
c0003b6c:	74 13                	je     c0003b81 <dir_register+0xbb>
c0003b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b72:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b77:	31 d2                	xor    edx,edx
c0003b79:	83 c0 0c             	add    eax,0xc
c0003b7c:	f7 f1                	div    ecx
c0003b7e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b81:	89 ea                	mov    edx,ebp
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 a6 fb ff ff       	call   c0003730 <dir_alloc>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	89 c6                	mov    esi,eax
c0003b8e:	0f 85 ad 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b94:	4d                   	dec    ebp
c0003b95:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b99:	74 67                	je     c0003c02 <dir_register+0x13c>
c0003b9b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	c1 e0 05             	shl    eax,0x5
c0003ba3:	29 c2                	sub    edx,eax
c0003ba5:	89 d8                	mov    eax,ebx
c0003ba7:	e8 f9 f7 ff ff       	call   c00033a5 <dir_sdi>
c0003bac:	85 c0                	test   eax,eax
c0003bae:	89 c6                	mov    esi,eax
c0003bb0:	0f 85 8b 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bba:	e8 1c e7 ff ff       	call   c00022db <sum_sfn>
c0003bbf:	0f b6 e8             	movzx  ebp,al
c0003bc2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bc5:	89 f8                	mov    eax,edi
c0003bc7:	e8 11 e8 ff ff       	call   c00023dd <move_window>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	75 6f                	jne    c0003c41 <dir_register+0x17b>
c0003bd2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003bd7:	83 ec 0c             	sub    esp,0xc
c0003bda:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bdd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003be0:	55                   	push   ebp
c0003be1:	e8 c2 e5 ff ff       	call   c00021a8 <put_lfn>
c0003be6:	31 d2                	xor    edx,edx
c0003be8:	89 d8                	mov    eax,ebx
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	e8 38 fa ff ff       	call   c000362b <dir_next>
c0003bf3:	83 c4 10             	add    esp,0x10
c0003bf6:	85 c0                	test   eax,eax
c0003bf8:	89 c6                	mov    esi,eax
c0003bfa:	75 45                	jne    c0003c41 <dir_register+0x17b>
c0003bfc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003c00:	75 c0                	jne    c0003bc2 <dir_register+0xfc>
c0003c02:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c05:	89 f8                	mov    eax,edi
c0003c07:	e8 d1 e7 ff ff       	call   c00023dd <move_window>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	75 2f                	jne    c0003c41 <dir_register+0x17b>
c0003c12:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c15:	b9 20 00 00 00       	mov    ecx,0x20
c0003c1a:	31 d2                	xor    edx,edx
c0003c1c:	e8 e9 e2 ff ff       	call   c0001f0a <mem_set>
c0003c21:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c24:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c2d:	e8 c3 e2 ff ff       	call   c0001ef5 <mem_cpy>
c0003c32:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c35:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c38:	24 18                	and    al,0x18
c0003c3a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c3d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c41:	83 c4 2c             	add    esp,0x2c
c0003c44:	89 f0                	mov    eax,esi
c0003c46:	5b                   	pop    ebx
c0003c47:	5e                   	pop    esi
c0003c48:	5f                   	pop    edi
c0003c49:	5d                   	pop    ebp
c0003c4a:	c3                   	ret    

c0003c4b <f_mount>:
c0003c4b:	53                   	push   ebx
c0003c4c:	83 ec 18             	sub    esp,0x18
c0003c4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c53:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c5f:	e8 89 e6 ff ff       	call   c00022ed <get_ldnumber>
c0003c64:	89 c2                	mov    edx,eax
c0003c66:	b8 0b 00 00 00       	mov    eax,0xb
c0003c6b:	85 d2                	test   edx,edx
c0003c6d:	78 39                	js     c0003ca8 <f_mount+0x5d>
c0003c6f:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	74 03                	je     c0003c7d <f_mount+0x32>
c0003c7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c81:	85 c0                	test   eax,eax
c0003c83:	74 03                	je     c0003c88 <f_mount+0x3d>
c0003c85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c8c:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c93:	31 c0                	xor    eax,eax
c0003c95:	84 db                	test   bl,bl
c0003c97:	74 0f                	je     c0003ca8 <f_mount+0x5d>
c0003c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c9d:	31 c9                	xor    ecx,ecx
c0003c9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003ca3:	e8 92 e8 ff ff       	call   c000253a <mount_volume>
c0003ca8:	83 c4 18             	add    esp,0x18
c0003cab:	5b                   	pop    ebx
c0003cac:	c3                   	ret    

c0003cad <f_open>:
c0003cad:	55                   	push   ebp
c0003cae:	b8 09 00 00 00       	mov    eax,0x9
c0003cb3:	57                   	push   edi
c0003cb4:	56                   	push   esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 5c             	sub    esp,0x5c
c0003cb9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003cbd:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003cc1:	85 f6                	test   esi,esi
c0003cc3:	0f 84 a6 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003cc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ccd:	88 d8                	mov    al,bl
c0003ccf:	24 3f                	and    al,0x3f
c0003cd1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003cd5:	0f b6 c8             	movzx  ecx,al
c0003cd8:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cdc:	e8 59 e8 ff ff       	call   c000253a <mount_volume>
c0003ce1:	85 c0                	test   eax,eax
c0003ce3:	0f 85 80 02 00 00    	jne    c0003f69 <f_open+0x2bc>
c0003ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ced:	83 ec 0c             	sub    esp,0xc
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	68 00 02 00 00       	push   0x200
c0003cf9:	e8 02 1f 00 00       	call   c0005c00 <ff_memalloc>
c0003cfe:	83 c4 10             	add    esp,0x10
c0003d01:	89 c7                	mov    edi,eax
c0003d03:	b8 11 00 00 00       	mov    eax,0x11
c0003d08:	85 ff                	test   edi,edi
c0003d0a:	0f 84 5f 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d14:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d18:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003d1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1f:	e8 06 fd ff ff       	call   c0003a2a <follow_path>
c0003d24:	85 c0                	test   eax,eax
c0003d26:	75 0d                	jne    c0003d35 <f_open+0x88>
c0003d28:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003d2d:	ba 06 00 00 00       	mov    edx,0x6
c0003d32:	0f 48 c2             	cmovs  eax,edx
c0003d35:	f6 c3 1c             	test   bl,0x1c
c0003d38:	0f 84 d2 00 00 00    	je     c0003e10 <f_open+0x163>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xb6>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 06 02 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 72 fd ff ff       	call   c0003ac6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 f5 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d5c:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003d61:	eb 29                	jmp    c0003d8c <f_open+0xdf>
c0003d63:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003d68:	b8 07 00 00 00       	mov    eax,0x7
c0003d6d:	0f 85 de 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d73:	88 da                	mov    dl,bl
c0003d75:	b8 08 00 00 00       	mov    eax,0x8
c0003d7a:	80 e2 04             	and    dl,0x4
c0003d7d:	0f 85 ce 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d83:	80 e3 08             	and    bl,0x8
c0003d86:	0f 84 b3 00 00 00    	je     c0003e3f <f_open+0x192>
c0003d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d94:	8a 00                	mov    al,BYTE PTR [eax]
c0003d96:	89 ea                	mov    edx,ebp
c0003d98:	e8 b6 f4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003d9d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da2:	89 c3                	mov    ebx,eax
c0003da4:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003da7:	e8 46 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db0:	31 c9                	xor    ecx,ecx
c0003db2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dbe:	e8 b8 f4 ff ff       	call   c000327b <st_clust.isra.1>
c0003dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dc7:	31 d2                	xor    edx,edx
c0003dc9:	83 c0 1c             	add    eax,0x1c
c0003dcc:	e8 21 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd5:	85 db                	test   ebx,ebx
c0003dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003ddb:	74 62                	je     c0003e3f <f_open+0x192>
c0003ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de1:	31 c9                	xor    ecx,ecx
c0003de3:	89 da                	mov    edx,ebx
c0003de5:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003de8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dec:	e8 b1 f7 ff ff       	call   c00035a2 <remove_chain>
c0003df1:	85 c0                	test   eax,eax
c0003df3:	0f 85 58 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dfd:	89 ea                	mov    edx,ebp
c0003dff:	4b                   	dec    ebx
c0003e00:	e8 d8 e5 ff ff       	call   c00023dd <move_window>
c0003e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e09:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	eb 29                	jmp    c0003e39 <f_open+0x18c>
c0003e10:	85 c0                	test   eax,eax
c0003e12:	0f 85 39 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e18:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1c:	b8 04 00 00 00       	mov    eax,0x4
c0003e21:	88 d1                	mov    cl,dl
c0003e23:	80 e1 10             	and    cl,0x10
c0003e26:	0f 85 25 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e2c:	80 e3 02             	and    bl,0x2
c0003e2f:	74 0e                	je     c0003e3f <f_open+0x192>
c0003e31:	80 e2 01             	and    dl,0x1
c0003e34:	b8 07 00 00 00       	mov    eax,0x7
c0003e39:	0f 85 12 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e43:	24 08                	and    al,0x8
c0003e45:	74 05                	je     c0003e4c <f_open+0x19f>
c0003e47:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003e4c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003e54:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e57:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003e5a:	89 da                	mov    edx,ebx
c0003e5c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003e5f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e62:	e8 ec f3 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003e67:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003e6a:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003e6d:	e8 64 e0 ff ff       	call   c0001ed6 <ld_dword>
c0003e72:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003e75:	31 d2                	xor    edx,edx
c0003e77:	89 2e                	mov    DWORD PTR [esi],ebp
c0003e79:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003e81:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003e85:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003e89:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e90:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e97:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e9f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003ea2:	89 d8                	mov    eax,ebx
c0003ea4:	e8 61 e0 ff ff       	call   c0001f0a <mem_set>
c0003ea9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003ead:	24 20                	and    al,0x20
c0003eaf:	75 07                	jne    c0003eb8 <f_open+0x20b>
c0003eb1:	31 c0                	xor    eax,eax
c0003eb3:	e9 99 00 00 00       	jmp    c0003f51 <f_open+0x2a4>
c0003eb8:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003ebb:	85 ed                	test   ebp,ebp
c0003ebd:	74 f2                	je     c0003eb1 <f_open+0x204>
c0003ebf:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003ec9:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003ecd:	31 c0                	xor    eax,eax
c0003ecf:	c1 e1 09             	shl    ecx,0x9
c0003ed2:	85 c0                	test   eax,eax
c0003ed4:	75 2b                	jne    c0003f01 <f_open+0x254>
c0003ed6:	39 cd                	cmp    ebp,ecx
c0003ed8:	76 27                	jbe    c0003f01 <f_open+0x254>
c0003eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ede:	8b 06                	mov    eax,DWORD PTR [esi]
c0003ee0:	e8 be f3 ff ff       	call   c00032a3 <get_fat.isra.2>
c0003ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee9:	89 c2                	mov    edx,eax
c0003eeb:	b8 02 00 00 00       	mov    eax,0x2
c0003ef0:	83 fa 01             	cmp    edx,0x1
c0003ef3:	76 08                	jbe    c0003efd <f_open+0x250>
c0003ef5:	31 c0                	xor    eax,eax
c0003ef7:	83 fa ff             	cmp    edx,0xffffffff
c0003efa:	0f 94 c0             	sete   al
c0003efd:	29 cd                	sub    ebp,ecx
c0003eff:	eb d1                	jmp    c0003ed2 <f_open+0x225>
c0003f01:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003f04:	85 c0                	test   eax,eax
c0003f06:	75 49                	jne    c0003f51 <f_open+0x2a4>
c0003f08:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003f0e:	74 a1                	je     c0003eb1 <f_open+0x204>
c0003f10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f18:	89 c8                	mov    eax,ecx
c0003f1a:	e8 e9 e1 ff ff       	call   c0002108 <clst2sect>
c0003f1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f23:	89 c2                	mov    edx,eax
c0003f25:	b8 02 00 00 00       	mov    eax,0x2
c0003f2a:	85 d2                	test   edx,edx
c0003f2c:	74 23                	je     c0003f51 <f_open+0x2a4>
c0003f2e:	c1 ed 09             	shr    ebp,0x9
c0003f31:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003f35:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003f38:	6a 01                	push   0x1
c0003f3a:	50                   	push   eax
c0003f3b:	53                   	push   ebx
c0003f3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f40:	50                   	push   eax
c0003f41:	e8 38 df ff ff       	call   c0001e7e <disk_read>
c0003f46:	83 c4 10             	add    esp,0x10
c0003f49:	85 c0                	test   eax,eax
c0003f4b:	0f 95 c0             	setne  al
c0003f4e:	0f b6 c0             	movzx  eax,al
c0003f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f55:	83 ec 0c             	sub    esp,0xc
c0003f58:	57                   	push   edi
c0003f59:	e8 b6 1c 00 00       	call   c0005c14 <ff_memfree>
c0003f5e:	83 c4 10             	add    esp,0x10
c0003f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f65:	85 c0                	test   eax,eax
c0003f67:	74 06                	je     c0003f6f <f_open+0x2c2>
c0003f69:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003f6f:	83 c4 5c             	add    esp,0x5c
c0003f72:	5b                   	pop    ebx
c0003f73:	5e                   	pop    esi
c0003f74:	5f                   	pop    edi
c0003f75:	5d                   	pop    ebp
c0003f76:	c3                   	ret    

c0003f77 <f_read>:
c0003f77:	55                   	push   ebp
c0003f78:	57                   	push   edi
c0003f79:	56                   	push   esi
c0003f7a:	53                   	push   ebx
c0003f7b:	83 ec 2c             	sub    esp,0x2c
c0003f7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f8a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	e8 97 e3 ff ff       	call   c0002332 <validate>
c0003f9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9f:	85 c0                	test   eax,eax
c0003fa1:	0f 85 a0 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fa7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003faf:	85 c0                	test   eax,eax
c0003fb1:	0f 85 90 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fb7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fbb:	0f 84 7e 01 00 00    	je     c000413f <f_read+0x1c8>
c0003fc1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fc4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fc7:	39 f8                	cmp    eax,edi
c0003fc9:	0f 46 f8             	cmovbe edi,eax
c0003fcc:	85 ff                	test   edi,edi
c0003fce:	0f 84 73 01 00 00    	je     c0004147 <f_read+0x1d0>
c0003fd4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd7:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fdc:	0f 85 26 01 00 00    	jne    c0004108 <f_read+0x191>
c0003fe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fe6:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fea:	89 c2                	mov    edx,eax
c0003fec:	c1 ea 09             	shr    edx,0x9
c0003fef:	4d                   	dec    ebp
c0003ff0:	21 d5                	and    ebp,edx
c0003ff2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003ff6:	75 42                	jne    c000403a <f_read+0xc3>
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	75 05                	jne    c0004001 <f_read+0x8a>
c0003ffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fff:	eb 0a                	jmp    c000400b <f_read+0x94>
c0004001:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004006:	e8 98 f2 ff ff       	call   c00032a3 <get_fat.isra.2>
c000400b:	83 f8 01             	cmp    eax,0x1
c000400e:	77 11                	ja     c0004021 <f_read+0xaa>
c0004010:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004014:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000401c:	e9 26 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004021:	83 f8 ff             	cmp    eax,0xffffffff
c0004024:	75 11                	jne    c0004037 <f_read+0xc0>
c0004026:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000402a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004032:	e9 10 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004037:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000403a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000403e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004041:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004045:	89 c8                	mov    eax,ecx
c0004047:	e8 bc e0 ff ff       	call   c0002108 <clst2sect>
c000404c:	85 c0                	test   eax,eax
c000404e:	74 c0                	je     c0004010 <f_read+0x99>
c0004050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004054:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000405a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000405d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004061:	76 58                	jbe    c00040bb <f_read+0x144>
c0004063:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004067:	89 fe                	mov    esi,edi
c0004069:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000406d:	c1 ee 09             	shr    esi,0x9
c0004070:	01 f2                	add    edx,esi
c0004072:	39 c2                	cmp    edx,eax
c0004074:	76 06                	jbe    c000407c <f_read+0x105>
c0004076:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000407a:	89 c6                	mov    esi,eax
c000407c:	56                   	push   esi
c000407d:	55                   	push   ebp
c000407e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004082:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004086:	50                   	push   eax
c0004087:	e8 f2 dd ff ff       	call   c0001e7e <disk_read>
c000408c:	83 c4 10             	add    esp,0x10
c000408f:	85 c0                	test   eax,eax
c0004091:	75 93                	jne    c0004026 <f_read+0xaf>
c0004093:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004097:	79 1d                	jns    c00040b6 <f_read+0x13f>
c0004099:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000409c:	29 e8                	sub    eax,ebp
c000409e:	39 f0                	cmp    eax,esi
c00040a0:	73 14                	jae    c00040b6 <f_read+0x13f>
c00040a2:	c1 e0 09             	shl    eax,0x9
c00040a5:	b9 00 02 00 00       	mov    ecx,0x200
c00040aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00040ae:	8d 53 28             	lea    edx,[ebx+0x28]
c00040b1:	e8 3f de ff ff       	call   c0001ef5 <mem_cpy>
c00040b6:	c1 e6 09             	shl    esi,0x9
c00040b9:	eb 70                	jmp    c000412b <f_read+0x1b4>
c00040bb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040be:	39 e8                	cmp    eax,ebp
c00040c0:	74 43                	je     c0004105 <f_read+0x18e>
c00040c2:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040c6:	8d 73 28             	lea    esi,[ebx+0x28]
c00040c9:	79 1d                	jns    c00040e8 <f_read+0x171>
c00040cb:	6a 01                	push   0x1
c00040cd:	50                   	push   eax
c00040ce:	56                   	push   esi
c00040cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040d3:	50                   	push   eax
c00040d4:	e8 bb dd ff ff       	call   c0001e94 <disk_write>
c00040d9:	83 c4 10             	add    esp,0x10
c00040dc:	85 c0                	test   eax,eax
c00040de:	0f 85 42 ff ff ff    	jne    c0004026 <f_read+0xaf>
c00040e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040e8:	6a 01                	push   0x1
c00040ea:	55                   	push   ebp
c00040eb:	56                   	push   esi
c00040ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040f4:	50                   	push   eax
c00040f5:	e8 84 dd ff ff       	call   c0001e7e <disk_read>
c00040fa:	83 c4 10             	add    esp,0x10
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 21 ff ff ff    	jne    c0004026 <f_read+0xaf>
c0004105:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004108:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000410b:	be 00 02 00 00       	mov    esi,0x200
c0004110:	25 ff 01 00 00       	and    eax,0x1ff
c0004115:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004119:	29 c6                	sub    esi,eax
c000411b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000411f:	39 f7                	cmp    edi,esi
c0004121:	0f 46 f7             	cmovbe esi,edi
c0004124:	89 f1                	mov    ecx,esi
c0004126:	e8 ca dd ff ff       	call   c0001ef5 <mem_cpy>
c000412b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000412f:	29 f7                	sub    edi,esi
c0004131:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004135:	01 30                	add    DWORD PTR [eax],esi
c0004137:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000413a:	e9 8d fe ff ff       	jmp    c0003fcc <f_read+0x55>
c000413f:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000414b:	83 c4 2c             	add    esp,0x2c
c000414e:	5b                   	pop    ebx
c000414f:	5e                   	pop    esi
c0004150:	5f                   	pop    edi
c0004151:	5d                   	pop    ebp
c0004152:	c3                   	ret    

c0004153 <f_write>:
c0004153:	55                   	push   ebp
c0004154:	57                   	push   edi
c0004155:	56                   	push   esi
c0004156:	53                   	push   ebx
c0004157:	83 ec 2c             	sub    esp,0x2c
c000415a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000415e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004162:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 bf e1 ff ff       	call   c0002332 <validate>
c0004173:	85 c0                	test   eax,eax
c0004175:	89 c7                	mov    edi,eax
c0004177:	0f 85 ff 01 00 00    	jne    c000437c <f_write+0x229>
c000417d:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004181:	85 ff                	test   edi,edi
c0004183:	0f 85 f3 01 00 00    	jne    c000437c <f_write+0x229>
c0004189:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000418d:	0f 84 e4 01 00 00    	je     c0004377 <f_write+0x224>
c0004193:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004196:	89 c1                	mov    ecx,eax
c0004198:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000419c:	0f 83 e8 00 00 00    	jae    c000428a <f_write+0x137>
c00041a2:	f7 d0                	not    eax
c00041a4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00041a8:	e9 dd 00 00 00       	jmp    c000428a <f_write+0x137>
c00041ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00041b5:	0f 85 8c 01 00 00    	jne    c0004347 <f_write+0x1f4>
c00041bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041bf:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041c3:	89 c2                	mov    edx,eax
c00041c5:	c1 ea 09             	shr    edx,0x9
c00041c8:	4d                   	dec    ebp
c00041c9:	21 d5                	and    ebp,edx
c00041cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041cf:	0f 84 c2 00 00 00    	je     c0004297 <f_write+0x144>
c00041d5:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00041d9:	0f 88 19 01 00 00    	js     c00042f8 <f_write+0x1a5>
c00041df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041ea:	89 c8                	mov    eax,ecx
c00041ec:	e8 17 df ff ff       	call   c0002108 <clst2sect>
c00041f1:	85 c0                	test   eax,eax
c00041f3:	0f 84 c9 00 00 00    	je     c00042c2 <f_write+0x16f>
c00041f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041fd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004205:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000420c:	0f 86 0d 01 00 00    	jbe    c000431f <f_write+0x1cc>
c0004212:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000421a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000421e:	c1 ee 09             	shr    esi,0x9
c0004221:	01 f2                	add    edx,esi
c0004223:	39 c2                	cmp    edx,eax
c0004225:	76 06                	jbe    c000422d <f_write+0xda>
c0004227:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000422b:	89 c6                	mov    esi,eax
c000422d:	56                   	push   esi
c000422e:	55                   	push   ebp
c000422f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004237:	50                   	push   eax
c0004238:	e8 57 dc ff ff       	call   c0001e94 <disk_write>
c000423d:	83 c4 10             	add    esp,0x10
c0004240:	85 c0                	test   eax,eax
c0004242:	0f 85 8d 00 00 00    	jne    c00042d5 <f_write+0x182>
c0004248:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000424b:	29 ea                	sub    edx,ebp
c000424d:	39 f2                	cmp    edx,esi
c000424f:	73 18                	jae    c0004269 <f_write+0x116>
c0004251:	c1 e2 09             	shl    edx,0x9
c0004254:	b9 00 02 00 00       	mov    ecx,0x200
c0004259:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000425d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004260:	e8 90 dc ff ff       	call   c0001ef5 <mem_cpy>
c0004265:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004269:	c1 e6 09             	shl    esi,0x9
c000426c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004270:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004274:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004278:	01 30                	add    DWORD PTR [eax],esi
c000427a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000427d:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004280:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004283:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004287:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000428a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000428f:	0f 85 18 ff ff ff    	jne    c00041ad <f_write+0x5a>
c0004295:	eb 1d                	jmp    c00042b4 <f_write+0x161>
c0004297:	85 c0                	test   eax,eax
c0004299:	75 0b                	jne    c00042a6 <f_write+0x153>
c000429b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 19                	jne    c00042bd <f_write+0x16a>
c00042a4:	eb 03                	jmp    c00042a9 <f_write+0x156>
c00042a6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042a9:	89 d8                	mov    eax,ebx
c00042ab:	e8 bd f1 ff ff       	call   c000346d <create_chain>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 09                	jne    c00042bd <f_write+0x16a>
c00042b4:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00042b8:	e9 bf 00 00 00       	jmp    c000437c <f_write+0x229>
c00042bd:	83 f8 01             	cmp    eax,0x1
c00042c0:	75 0e                	jne    c00042d0 <f_write+0x17d>
c00042c2:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c6:	bf 02 00 00 00       	mov    edi,0x2
c00042cb:	e9 ac 00 00 00       	jmp    c000437c <f_write+0x229>
c00042d0:	83 f8 ff             	cmp    eax,0xffffffff
c00042d3:	75 0e                	jne    c00042e3 <f_write+0x190>
c00042d5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d9:	bf 01 00 00 00       	mov    edi,0x1
c00042de:	e9 99 00 00 00       	jmp    c000437c <f_write+0x229>
c00042e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042ea:	0f 85 e5 fe ff ff    	jne    c00041d5 <f_write+0x82>
c00042f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042f3:	e9 dd fe ff ff       	jmp    c00041d5 <f_write+0x82>
c00042f8:	6a 01                	push   0x1
c00042fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042fd:	8d 43 28             	lea    eax,[ebx+0x28]
c0004300:	50                   	push   eax
c0004301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004305:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004309:	50                   	push   eax
c000430a:	e8 85 db ff ff       	call   c0001e94 <disk_write>
c000430f:	83 c4 10             	add    esp,0x10
c0004312:	85 c0                	test   eax,eax
c0004314:	75 bf                	jne    c00042d5 <f_write+0x182>
c0004316:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000431a:	e9 c0 fe ff ff       	jmp    c00041df <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x1f1>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x1f1>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 41 db ff ff       	call   c0001e7e <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 91                	jne    c00042d5 <f_write+0x182>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 87 db ff ff       	call   c0001ef5 <mem_cpy>
c000436e:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004372:	e9 f5 fe ff ff       	jmp    c000426c <f_write+0x119>
c0004377:	bf 07 00 00 00       	mov    edi,0x7
c000437c:	83 c4 2c             	add    esp,0x2c
c000437f:	89 f8                	mov    eax,edi
c0004381:	5b                   	pop    ebx
c0004382:	5e                   	pop    esi
c0004383:	5f                   	pop    edi
c0004384:	5d                   	pop    ebp
c0004385:	c3                   	ret    

c0004386 <f_sync>:
c0004386:	56                   	push   esi
c0004387:	53                   	push   ebx
c0004388:	83 ec 14             	sub    esp,0x14
c000438b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000438f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 98 df ff ff       	call   c0002332 <validate>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 85 95 00 00 00    	jne    c0004437 <f_sync+0xb1>
c00043a2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043a5:	88 d1                	mov    cl,dl
c00043a7:	80 e1 40             	and    cl,0x40
c00043aa:	0f 84 87 00 00 00    	je     c0004437 <f_sync+0xb1>
c00043b0:	84 d2                	test   dl,dl
c00043b2:	79 29                	jns    c00043dd <f_sync+0x57>
c00043b4:	6a 01                	push   0x1
c00043b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043b9:	8d 43 28             	lea    eax,[ebx+0x28]
c00043bc:	50                   	push   eax
c00043bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c5:	50                   	push   eax
c00043c6:	e8 c9 da ff ff       	call   c0001e94 <disk_write>
c00043cb:	83 c4 10             	add    esp,0x10
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	b8 01 00 00 00       	mov    eax,0x1
c00043d5:	85 d2                	test   edx,edx
c00043d7:	75 5e                	jne    c0004437 <f_sync+0xb1>
c00043d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00043dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043e4:	e8 f4 df ff ff       	call   c00023dd <move_window>
c00043e9:	85 c0                	test   eax,eax
c00043eb:	75 4a                	jne    c0004437 <f_sync+0xb1>
c00043ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00043f4:	89 f2                	mov    edx,esi
c00043f6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043fb:	e8 7b ee ff ff       	call   c000327b <st_clust.isra.1>
c0004400:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004403:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004406:	e8 e7 da ff ff       	call   c0001ef2 <st_dword>
c000440b:	8d 46 16             	lea    eax,[esi+0x16]
c000440e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004413:	e8 da da ff ff       	call   c0001ef2 <st_dword>
c0004418:	8d 46 12             	lea    eax,[esi+0x12]
c000441b:	31 d2                	xor    edx,edx
c000441d:	e8 cc da ff ff       	call   c0001eee <st_word>
c0004422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004426:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000442a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000442e:	e8 ed e9 ff ff       	call   c0002e20 <sync_fs>
c0004433:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0004437:	83 c4 14             	add    esp,0x14
c000443a:	5b                   	pop    ebx
c000443b:	5e                   	pop    esi
c000443c:	c3                   	ret    

c000443d <f_close>:
c000443d:	53                   	push   ebx
c000443e:	83 ec 24             	sub    esp,0x24
c0004441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004445:	53                   	push   ebx
c0004446:	e8 3b ff ff ff       	call   c0004386 <f_sync>
c000444b:	83 c4 10             	add    esp,0x10
c000444e:	85 c0                	test   eax,eax
c0004450:	75 15                	jne    c0004467 <f_close+0x2a>
c0004452:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004456:	89 d8                	mov    eax,ebx
c0004458:	e8 d5 de ff ff       	call   c0002332 <validate>
c000445d:	85 c0                	test   eax,eax
c000445f:	75 06                	jne    c0004467 <f_close+0x2a>
c0004461:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004467:	83 c4 18             	add    esp,0x18
c000446a:	5b                   	pop    ebx
c000446b:	c3                   	ret    

c000446c <f_lseek>:
c000446c:	55                   	push   ebp
c000446d:	57                   	push   edi
c000446e:	56                   	push   esi
c000446f:	53                   	push   ebx
c0004470:	83 ec 2c             	sub    esp,0x2c
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000447b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 ac de ff ff       	call   c0002332 <validate>
c0004486:	85 c0                	test   eax,eax
c0004488:	89 c5                	mov    ebp,eax
c000448a:	0f 85 78 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c0004490:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004494:	85 ed                	test   ebp,ebp
c0004496:	0f 85 6c 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c000449c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000449f:	39 f0                	cmp    eax,esi
c00044a1:	73 07                	jae    c00044aa <f_lseek+0x3e>
c00044a3:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a7:	0f 44 f0             	cmove  esi,eax
c00044aa:	85 f6                	test   esi,esi
c00044ac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044b6:	75 07                	jne    c00044bf <f_lseek+0x53>
c00044b8:	31 f6                	xor    esi,esi
c00044ba:	e9 e2 00 00 00       	jmp    c00045a1 <f_lseek+0x135>
c00044bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c3:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044c7:	c1 e7 09             	shl    edi,0x9
c00044ca:	85 c9                	test   ecx,ecx
c00044cc:	74 28                	je     c00044f6 <f_lseek+0x8a>
c00044ce:	31 d2                	xor    edx,edx
c00044d0:	49                   	dec    ecx
c00044d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00044d4:	f7 f7                	div    edi
c00044d6:	31 d2                	xor    edx,edx
c00044d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044dc:	89 c8                	mov    eax,ecx
c00044de:	f7 f7                	div    edi
c00044e0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044e4:	72 10                	jb     c00044f6 <f_lseek+0x8a>
c00044e6:	89 f8                	mov    eax,edi
c00044e8:	f7 d8                	neg    eax
c00044ea:	21 c1                	and    ecx,eax
c00044ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044ef:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044f2:	29 ce                	sub    esi,ecx
c00044f4:	eb 3c                	jmp    c0004532 <f_lseek+0xc6>
c00044f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044f9:	85 c0                	test   eax,eax
c00044fb:	75 32                	jne    c000452f <f_lseek+0xc3>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 67 ef ff ff       	call   c000346d <create_chain>
c0004506:	83 f8 01             	cmp    eax,0x1
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xad>
c000450b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000450f:	bd 02 00 00 00       	mov    ebp,0x2
c0004514:	e9 ef 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c0004519:	83 f8 ff             	cmp    eax,0xffffffff
c000451c:	75 0e                	jne    c000452c <f_lseek+0xc0>
c000451e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004522:	bd 01 00 00 00       	mov    ebp,0x1
c0004527:	e9 dc 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c000452c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004532:	85 c0                	test   eax,eax
c0004534:	74 82                	je     c00044b8 <f_lseek+0x4c>
c0004536:	39 fe                	cmp    esi,edi
c0004538:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000453b:	76 3d                	jbe    c000457a <f_lseek+0x10e>
c000453d:	01 fa                	add    edx,edi
c000453f:	29 fe                	sub    esi,edi
c0004541:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004545:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004548:	89 c2                	mov    edx,eax
c000454a:	74 0d                	je     c0004559 <f_lseek+0xed>
c000454c:	89 d8                	mov    eax,ebx
c000454e:	e8 1a ef ff ff       	call   c000346d <create_chain>
c0004553:	85 c0                	test   eax,eax
c0004555:	75 09                	jne    c0004560 <f_lseek+0xf4>
c0004557:	eb 1f                	jmp    c0004578 <f_lseek+0x10c>
c0004559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000455b:	e8 43 ed ff ff       	call   c00032a3 <get_fat.isra.2>
c0004560:	83 f8 ff             	cmp    eax,0xffffffff
c0004563:	74 b9                	je     c000451e <f_lseek+0xb2>
c0004565:	83 f8 01             	cmp    eax,0x1
c0004568:	76 a1                	jbe    c000450b <f_lseek+0x9f>
c000456a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000456e:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004571:	76 98                	jbe    c000450b <f_lseek+0x9f>
c0004573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004576:	eb be                	jmp    c0004536 <f_lseek+0xca>
c0004578:	31 f6                	xor    esi,esi
c000457a:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000457d:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004583:	0f 84 2f ff ff ff    	je     c00044b8 <f_lseek+0x4c>
c0004589:	89 c2                	mov    edx,eax
c000458b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000458f:	e8 74 db ff ff       	call   c0002108 <clst2sect>
c0004594:	85 c0                	test   eax,eax
c0004596:	0f 84 6f ff ff ff    	je     c000450b <f_lseek+0x9f>
c000459c:	c1 ee 09             	shr    esi,0x9
c000459f:	01 c6                	add    esi,eax
c00045a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045a4:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045a7:	76 07                	jbe    c00045b0 <f_lseek+0x144>
c00045a9:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00045ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00045b5:	74 51                	je     c0004608 <f_lseek+0x19c>
c00045b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ba:	39 f0                	cmp    eax,esi
c00045bc:	74 4a                	je     c0004608 <f_lseek+0x19c>
c00045be:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00045c2:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045c5:	79 21                	jns    c00045e8 <f_lseek+0x17c>
c00045c7:	6a 01                	push   0x1
c00045c9:	50                   	push   eax
c00045ca:	57                   	push   edi
c00045cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045cf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045d3:	50                   	push   eax
c00045d4:	e8 bb d8 ff ff       	call   c0001e94 <disk_write>
c00045d9:	83 c4 10             	add    esp,0x10
c00045dc:	85 c0                	test   eax,eax
c00045de:	0f 85 3a ff ff ff    	jne    c000451e <f_lseek+0xb2>
c00045e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00045e8:	6a 01                	push   0x1
c00045ea:	56                   	push   esi
c00045eb:	57                   	push   edi
c00045ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045f4:	50                   	push   eax
c00045f5:	e8 84 d8 ff ff       	call   c0001e7e <disk_read>
c00045fa:	83 c4 10             	add    esp,0x10
c00045fd:	85 c0                	test   eax,eax
c00045ff:	0f 85 19 ff ff ff    	jne    c000451e <f_lseek+0xb2>
c0004605:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004608:	83 c4 2c             	add    esp,0x2c
c000460b:	89 e8                	mov    eax,ebp
c000460d:	5b                   	pop    ebx
c000460e:	5e                   	pop    esi
c000460f:	5f                   	pop    edi
c0004610:	5d                   	pop    ebp
c0004611:	c3                   	ret    

c0004612 <f_opendir>:
c0004612:	56                   	push   esi
c0004613:	b8 09 00 00 00       	mov    eax,0x9
c0004618:	53                   	push   ebx
c0004619:	83 ec 24             	sub    esp,0x24
c000461c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004620:	85 db                	test   ebx,ebx
c0004622:	0f 84 af 00 00 00    	je     c00046d7 <f_opendir+0xc5>
c0004628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000462c:	31 c9                	xor    ecx,ecx
c000462e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004632:	e8 03 df ff ff       	call   c000253a <mount_volume>
c0004637:	85 c0                	test   eax,eax
c0004639:	0f 85 92 00 00 00    	jne    c00046d1 <f_opendir+0xbf>
c000463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004643:	83 ec 0c             	sub    esp,0xc
c0004646:	89 03                	mov    DWORD PTR [ebx],eax
c0004648:	68 00 02 00 00       	push   0x200
c000464d:	e8 ae 15 00 00       	call   c0005c00 <ff_memalloc>
c0004652:	83 c4 10             	add    esp,0x10
c0004655:	89 c6                	mov    esi,eax
c0004657:	b8 11 00 00 00       	mov    eax,0x11
c000465c:	85 f6                	test   esi,esi
c000465e:	74 77                	je     c00046d7 <f_opendir+0xc5>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004668:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000466b:	89 d8                	mov    eax,ebx
c000466d:	e8 b8 f3 ff ff       	call   c0003a2a <follow_path>
c0004672:	85 c0                	test   eax,eax
c0004674:	75 37                	jne    c00046ad <f_opendir+0x9b>
c0004676:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000467a:	78 1c                	js     c0004698 <f_opendir+0x86>
c000467c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004680:	b8 05 00 00 00       	mov    eax,0x5
c0004685:	74 26                	je     c00046ad <f_opendir+0x9b>
c0004687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000468e:	8a 00                	mov    al,BYTE PTR [eax]
c0004690:	e8 be eb ff ff       	call   c0003253 <ld_clust.isra.0>
c0004695:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469c:	31 d2                	xor    edx,edx
c000469e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c00046a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046a6:	89 d8                	mov    eax,ebx
c00046a8:	e8 f8 ec ff ff       	call   c00033a5 <dir_sdi>
c00046ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b1:	83 ec 0c             	sub    esp,0xc
c00046b4:	56                   	push   esi
c00046b5:	e8 5a 15 00 00       	call   c0005c14 <ff_memfree>
c00046ba:	83 c4 10             	add    esp,0x10
c00046bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046c1:	83 f8 04             	cmp    eax,0x4
c00046c4:	74 06                	je     c00046cc <f_opendir+0xba>
c00046c6:	85 c0                	test   eax,eax
c00046c8:	74 0d                	je     c00046d7 <f_opendir+0xc5>
c00046ca:	eb 05                	jmp    c00046d1 <f_opendir+0xbf>
c00046cc:	b8 05 00 00 00       	mov    eax,0x5
c00046d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046d7:	83 c4 24             	add    esp,0x24
c00046da:	5b                   	pop    ebx
c00046db:	5e                   	pop    esi
c00046dc:	c3                   	ret    

c00046dd <f_closedir>:
c00046dd:	53                   	push   ebx
c00046de:	83 ec 18             	sub    esp,0x18
c00046e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e9:	89 d8                	mov    eax,ebx
c00046eb:	e8 42 dc ff ff       	call   c0002332 <validate>
c00046f0:	85 c0                	test   eax,eax
c00046f2:	75 06                	jne    c00046fa <f_closedir+0x1d>
c00046f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046fa:	83 c4 18             	add    esp,0x18
c00046fd:	5b                   	pop    ebx
c00046fe:	c3                   	ret    

c00046ff <f_readdir>:
c00046ff:	57                   	push   edi
c0004700:	56                   	push   esi
c0004701:	53                   	push   ebx
c0004702:	83 ec 20             	sub    esp,0x20
c0004705:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004709:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000470d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004711:	89 d8                	mov    eax,ebx
c0004713:	e8 1a dc ff ff       	call   c0002332 <validate>
c0004718:	85 c0                	test   eax,eax
c000471a:	75 6e                	jne    c000478a <f_readdir+0x8b>
c000471c:	85 ff                	test   edi,edi
c000471e:	75 0b                	jne    c000472b <f_readdir+0x2c>
c0004720:	31 d2                	xor    edx,edx
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 7c ec ff ff       	call   c00033a5 <dir_sdi>
c0004729:	eb 5f                	jmp    c000478a <f_readdir+0x8b>
c000472b:	83 ec 0c             	sub    esp,0xc
c000472e:	68 00 02 00 00       	push   0x200
c0004733:	e8 c8 14 00 00       	call   c0005c00 <ff_memalloc>
c0004738:	83 c4 10             	add    esp,0x10
c000473b:	89 c6                	mov    esi,eax
c000473d:	b8 11 00 00 00       	mov    eax,0x11
c0004742:	85 f6                	test   esi,esi
c0004744:	74 44                	je     c000478a <f_readdir+0x8b>
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	31 d2                	xor    edx,edx
c000474c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000474f:	89 d8                	mov    eax,ebx
c0004751:	e8 3b f0 ff ff       	call   c0003791 <dir_read>
c0004756:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000475b:	75 19                	jne    c0004776 <f_readdir+0x77>
c000475d:	89 fa                	mov    edx,edi
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 0e e9 ff ff       	call   c0003074 <get_fileinfo>
c0004766:	31 d2                	xor    edx,edx
c0004768:	89 d8                	mov    eax,ebx
c000476a:	e8 bc ee ff ff       	call   c000362b <dir_next>
c000476f:	83 f8 04             	cmp    eax,0x4
c0004772:	75 02                	jne    c0004776 <f_readdir+0x77>
c0004774:	31 c0                	xor    eax,eax
c0004776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000477a:	83 ec 0c             	sub    esp,0xc
c000477d:	56                   	push   esi
c000477e:	e8 91 14 00 00       	call   c0005c14 <ff_memfree>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	5b                   	pop    ebx
c000478e:	5e                   	pop    esi
c000478f:	5f                   	pop    edi
c0004790:	c3                   	ret    

c0004791 <f_stat>:
c0004791:	57                   	push   edi
c0004792:	31 c9                	xor    ecx,ecx
c0004794:	56                   	push   esi
c0004795:	53                   	push   ebx
c0004796:	83 ec 30             	sub    esp,0x30
c0004799:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479d:	89 e2                	mov    edx,esp
c000479f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047a3:	e8 92 dd ff ff       	call   c000253a <mount_volume>
c00047a8:	85 c0                	test   eax,eax
c00047aa:	89 c3                	mov    ebx,eax
c00047ac:	75 59                	jne    c0004807 <f_stat+0x76>
c00047ae:	83 ec 0c             	sub    esp,0xc
c00047b1:	bb 11 00 00 00       	mov    ebx,0x11
c00047b6:	68 00 02 00 00       	push   0x200
c00047bb:	e8 40 14 00 00       	call   c0005c00 <ff_memalloc>
c00047c0:	83 c4 10             	add    esp,0x10
c00047c3:	85 c0                	test   eax,eax
c00047c5:	89 c6                	mov    esi,eax
c00047c7:	74 3e                	je     c0004807 <f_stat+0x76>
c00047c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047d3:	89 e0                	mov    eax,esp
c00047d5:	e8 50 f2 ff ff       	call   c0003a2a <follow_path>
c00047da:	85 c0                	test   eax,eax
c00047dc:	89 c3                	mov    ebx,eax
c00047de:	75 1b                	jne    c00047fb <f_stat+0x6a>
c00047e0:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00047e5:	78 0f                	js     c00047f6 <f_stat+0x65>
c00047e7:	85 ff                	test   edi,edi
c00047e9:	74 10                	je     c00047fb <f_stat+0x6a>
c00047eb:	89 fa                	mov    edx,edi
c00047ed:	89 e0                	mov    eax,esp
c00047ef:	e8 80 e8 ff ff       	call   c0003074 <get_fileinfo>
c00047f4:	eb 05                	jmp    c00047fb <f_stat+0x6a>
c00047f6:	bb 06 00 00 00       	mov    ebx,0x6
c00047fb:	83 ec 0c             	sub    esp,0xc
c00047fe:	56                   	push   esi
c00047ff:	e8 10 14 00 00       	call   c0005c14 <ff_memfree>
c0004804:	83 c4 10             	add    esp,0x10
c0004807:	83 c4 30             	add    esp,0x30
c000480a:	89 d8                	mov    eax,ebx
c000480c:	5b                   	pop    ebx
c000480d:	5e                   	pop    esi
c000480e:	5f                   	pop    edi
c000480f:	c3                   	ret    

c0004810 <f_getfree>:
c0004810:	55                   	push   ebp
c0004811:	31 c9                	xor    ecx,ecx
c0004813:	57                   	push   edi
c0004814:	56                   	push   esi
c0004815:	53                   	push   ebx
c0004816:	83 ec 2c             	sub    esp,0x2c
c0004819:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000481d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004821:	e8 14 dd ff ff       	call   c000253a <mount_volume>
c0004826:	85 c0                	test   eax,eax
c0004828:	89 c6                	mov    esi,eax
c000482a:	0f 85 da 00 00 00    	jne    c000490a <f_getfree+0xfa>
c0004830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004834:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004838:	89 18                	mov    DWORD PTR [eax],ebx
c000483a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000483d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004840:	8d 57 fe             	lea    edx,[edi-0x2]
c0004843:	39 d0                	cmp    eax,edx
c0004845:	77 0b                	ja     c0004852 <f_getfree+0x42>
c0004847:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000484b:	89 01                	mov    DWORD PTR [ecx],eax
c000484d:	e9 b8 00 00 00       	jmp    c000490a <f_getfree+0xfa>
c0004852:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004855:	75 29                	jne    c0004880 <f_getfree+0x70>
c0004857:	bf 02 00 00 00       	mov    edi,0x2
c000485c:	31 ed                	xor    ebp,ebp
c000485e:	89 fa                	mov    edx,edi
c0004860:	89 d8                	mov    eax,ebx
c0004862:	e8 3c ea ff ff       	call   c00032a3 <get_fat.isra.2>
c0004867:	83 f8 ff             	cmp    eax,0xffffffff
c000486a:	74 7d                	je     c00048e9 <f_getfree+0xd9>
c000486c:	83 f8 01             	cmp    eax,0x1
c000486f:	74 7f                	je     c00048f0 <f_getfree+0xe0>
c0004871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004875:	83 d5 00             	adc    ebp,0x0
c0004878:	47                   	inc    edi
c0004879:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c000487c:	77 e0                	ja     c000485e <f_getfree+0x4e>
c000487e:	eb 79                	jmp    c00048f9 <f_getfree+0xe9>
c0004880:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004883:	31 ed                	xor    ebp,ebp
c0004885:	31 db                	xor    ebx,ebx
c0004887:	85 db                	test   ebx,ebx
c0004889:	75 18                	jne    c00048a3 <f_getfree+0x93>
c000488b:	8d 42 01             	lea    eax,[edx+0x1]
c000488e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004896:	e8 42 db ff ff       	call   c00023dd <move_window>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 58                	jne    c00048f7 <f_getfree+0xe7>
c000489f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048ab:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048ae:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048b2:	75 13                	jne    c00048c7 <f_getfree+0xb7>
c00048b4:	e8 10 d6 ff ff       	call   c0001ec9 <ld_word>
c00048b9:	0f b7 c0             	movzx  eax,ax
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	83 d5 00             	adc    ebp,0x0
c00048c2:	83 c3 02             	add    ebx,0x2
c00048c5:	eb 13                	jmp    c00048da <f_getfree+0xca>
c00048c7:	e8 0a d6 ff ff       	call   c0001ed6 <ld_dword>
c00048cc:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048d1:	83 f8 01             	cmp    eax,0x1
c00048d4:	83 d5 00             	adc    ebp,0x0
c00048d7:	83 c3 04             	add    ebx,0x4
c00048da:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048e0:	4f                   	dec    edi
c00048e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048e5:	75 a0                	jne    c0004887 <f_getfree+0x77>
c00048e7:	eb 10                	jmp    c00048f9 <f_getfree+0xe9>
c00048e9:	be 01 00 00 00       	mov    esi,0x1
c00048ee:	eb 09                	jmp    c00048f9 <f_getfree+0xe9>
c00048f0:	be 02 00 00 00       	mov    esi,0x2
c00048f5:	eb 02                	jmp    c00048f9 <f_getfree+0xe9>
c00048f7:	89 c6                	mov    esi,eax
c00048f9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048fd:	89 28                	mov    DWORD PTR [eax],ebp
c00048ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004903:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004907:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000490a:	83 c4 2c             	add    esp,0x2c
c000490d:	89 f0                	mov    eax,esi
c000490f:	5b                   	pop    ebx
c0004910:	5e                   	pop    esi
c0004911:	5f                   	pop    edi
c0004912:	5d                   	pop    ebp
c0004913:	c3                   	ret    

c0004914 <f_truncate>:
c0004914:	56                   	push   esi
c0004915:	53                   	push   ebx
c0004916:	83 ec 14             	sub    esp,0x14
c0004919:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000491d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004921:	89 d8                	mov    eax,ebx
c0004923:	e8 0a da ff ff       	call   c0002332 <validate>
c0004928:	85 c0                	test   eax,eax
c000492a:	89 c6                	mov    esi,eax
c000492c:	0f 85 be 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c0004932:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004936:	85 f6                	test   esi,esi
c0004938:	0f 85 b2 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c000493e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004942:	0f 84 a3 00 00 00    	je     c00049eb <f_truncate+0xd7>
c0004948:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000494b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494e:	0f 83 9c 00 00 00    	jae    c00049f0 <f_truncate+0xdc>
c0004954:	85 c0                	test   eax,eax
c0004956:	75 15                	jne    c000496d <f_truncate+0x59>
c0004958:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000495b:	31 c9                	xor    ecx,ecx
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 3e ec ff ff       	call   c00035a2 <remove_chain>
c0004964:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000496b:	eb 35                	jmp    c00049a2 <f_truncate+0x8e>
c000496d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004972:	e8 2c e9 ff ff       	call   c00032a3 <get_fat.isra.2>
c0004977:	89 c2                	mov    edx,eax
c0004979:	b8 01 00 00 00       	mov    eax,0x1
c000497e:	83 fa ff             	cmp    edx,0xffffffff
c0004981:	74 1f                	je     c00049a2 <f_truncate+0x8e>
c0004983:	83 fa 01             	cmp    edx,0x1
c0004986:	b8 02 00 00 00       	mov    eax,0x2
c000498b:	74 15                	je     c00049a2 <f_truncate+0x8e>
c000498d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004991:	31 c0                	xor    eax,eax
c0004993:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004996:	76 0a                	jbe    c00049a2 <f_truncate+0x8e>
c0004998:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000499b:	89 d8                	mov    eax,ebx
c000499d:	e8 00 ec ff ff       	call   c00035a2 <remove_chain>
c00049a2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a8:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049ab:	80 ca 40             	or     dl,0x40
c00049ae:	85 c0                	test   eax,eax
c00049b0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049b3:	75 2f                	jne    c00049e4 <f_truncate+0xd0>
c00049b5:	84 d2                	test   dl,dl
c00049b7:	79 37                	jns    c00049f0 <f_truncate+0xdc>
c00049b9:	6a 01                	push   0x1
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	8d 43 28             	lea    eax,[ebx+0x28]
c00049c1:	50                   	push   eax
c00049c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ca:	50                   	push   eax
c00049cb:	e8 c4 d4 ff ff       	call   c0001e94 <disk_write>
c00049d0:	83 c4 10             	add    esp,0x10
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 08                	jne    c00049df <f_truncate+0xcb>
c00049d7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00049db:	31 f6                	xor    esi,esi
c00049dd:	eb 11                	jmp    c00049f0 <f_truncate+0xdc>
c00049df:	b8 01 00 00 00       	mov    eax,0x1
c00049e4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e7:	89 c6                	mov    esi,eax
c00049e9:	eb 05                	jmp    c00049f0 <f_truncate+0xdc>
c00049eb:	be 07 00 00 00       	mov    esi,0x7
c00049f0:	83 c4 14             	add    esp,0x14
c00049f3:	89 f0                	mov    eax,esi
c00049f5:	5b                   	pop    ebx
c00049f6:	5e                   	pop    esi
c00049f7:	c3                   	ret    

c00049f8 <f_unlink>:
c00049f8:	55                   	push   ebp
c00049f9:	b9 02 00 00 00       	mov    ecx,0x2
c00049fe:	57                   	push   edi
c00049ff:	56                   	push   esi
c0004a00:	53                   	push   ebx
c0004a01:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a07:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a12:	e8 23 db ff ff       	call   c000253a <mount_volume>
c0004a17:	85 c0                	test   eax,eax
c0004a19:	0f 85 ec 00 00 00    	jne    c0004b0b <f_unlink+0x113>
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	83 ec 0c             	sub    esp,0xc
c0004a26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2a:	68 00 02 00 00       	push   0x200
c0004a2f:	e8 cc 11 00 00       	call   c0005c00 <ff_memalloc>
c0004a34:	83 c4 10             	add    esp,0x10
c0004a37:	89 c6                	mov    esi,eax
c0004a39:	b8 11 00 00 00       	mov    eax,0x11
c0004a3e:	85 f6                	test   esi,esi
c0004a40:	0f 84 c5 00 00 00    	je     c0004b0b <f_unlink+0x113>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a51:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a58:	e8 cd ef ff ff       	call   c0003a2a <follow_path>
c0004a5d:	85 c0                	test   eax,eax
c0004a5f:	0f 85 92 00 00 00    	jne    c0004af7 <f_unlink+0xff>
c0004a65:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004a6a:	b8 06 00 00 00       	mov    eax,0x6
c0004a6f:	0f 88 82 00 00 00    	js     c0004af7 <f_unlink+0xff>
c0004a75:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c0004a79:	88 d8                	mov    al,bl
c0004a7b:	24 01                	and    al,0x1
c0004a7d:	74 07                	je     c0004a86 <f_unlink+0x8e>
c0004a7f:	b8 07 00 00 00       	mov    eax,0x7
c0004a84:	eb 71                	jmp    c0004af7 <f_unlink+0xff>
c0004a86:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004a8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a8e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a91:	e8 bd e7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004a96:	80 e3 10             	and    bl,0x10
c0004a99:	89 c7                	mov    edi,eax
c0004a9b:	75 20                	jne    c0004abd <f_unlink+0xc5>
c0004a9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa1:	e8 08 ee ff ff       	call   c00038ae <dir_remove>
c0004aa6:	85 c0                	test   eax,eax
c0004aa8:	75 40                	jne    c0004aea <f_unlink+0xf2>
c0004aaa:	85 ff                	test   edi,edi
c0004aac:	74 3c                	je     c0004aea <f_unlink+0xf2>
c0004aae:	31 c9                	xor    ecx,ecx
c0004ab0:	89 fa                	mov    edx,edi
c0004ab2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab6:	e8 e7 ea ff ff       	call   c00035a2 <remove_chain>
c0004abb:	eb 2d                	jmp    c0004aea <f_unlink+0xf2>
c0004abd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ac1:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ac5:	31 d2                	xor    edx,edx
c0004ac7:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004acb:	e8 d5 e8 ff ff       	call   c00033a5 <dir_sdi>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 23                	jne    c0004af7 <f_unlink+0xff>
c0004ad4:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad8:	31 d2                	xor    edx,edx
c0004ada:	e8 b2 ec ff ff       	call   c0003791 <dir_read>
c0004adf:	85 c0                	test   eax,eax
c0004ae1:	74 9c                	je     c0004a7f <f_unlink+0x87>
c0004ae3:	83 f8 04             	cmp    eax,0x4
c0004ae6:	75 0f                	jne    c0004af7 <f_unlink+0xff>
c0004ae8:	eb b3                	jmp    c0004a9d <f_unlink+0xa5>
c0004aea:	85 c0                	test   eax,eax
c0004aec:	75 09                	jne    c0004af7 <f_unlink+0xff>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	e8 29 e3 ff ff       	call   c0002e20 <sync_fs>
c0004af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004afb:	83 ec 0c             	sub    esp,0xc
c0004afe:	56                   	push   esi
c0004aff:	e8 10 11 00 00       	call   c0005c14 <ff_memfree>
c0004b04:	83 c4 10             	add    esp,0x10
c0004b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b0b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <f_mkdir>:
c0004b16:	57                   	push   edi
c0004b17:	b9 02 00 00 00       	mov    ecx,0x2
c0004b1c:	56                   	push   esi
c0004b1d:	53                   	push   ebx
c0004b1e:	83 ec 50             	sub    esp,0x50
c0004b21:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b29:	e8 0c da ff ff       	call   c000253a <mount_volume>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	89 c3                	mov    ebx,eax
c0004b32:	0f 85 70 01 00 00    	jne    c0004ca8 <f_mkdir+0x192>
c0004b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3c:	83 ec 0c             	sub    esp,0xc
c0004b3f:	bb 11 00 00 00       	mov    ebx,0x11
c0004b44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b48:	68 00 02 00 00       	push   0x200
c0004b4d:	e8 ae 10 00 00       	call   c0005c00 <ff_memalloc>
c0004b52:	83 c4 10             	add    esp,0x10
c0004b55:	85 c0                	test   eax,eax
c0004b57:	89 c7                	mov    edi,eax
c0004b59:	0f 84 49 01 00 00    	je     c0004ca8 <f_mkdir+0x192>
c0004b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b63:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b67:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b6e:	e8 b7 ee ff ff       	call   c0003a2a <follow_path>
c0004b73:	85 c0                	test   eax,eax
c0004b75:	89 c3                	mov    ebx,eax
c0004b77:	74 3e                	je     c0004bb7 <f_mkdir+0xa1>
c0004b79:	83 f8 04             	cmp    eax,0x4
c0004b7c:	75 3e                	jne    c0004bbc <f_mkdir+0xa6>
c0004b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b88:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b8c:	e8 dc e8 ff ff       	call   c000346d <create_chain>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	89 c6                	mov    esi,eax
c0004b95:	74 0c                	je     c0004ba3 <f_mkdir+0x8d>
c0004b97:	83 f8 01             	cmp    eax,0x1
c0004b9a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b9f:	74 07                	je     c0004ba8 <f_mkdir+0x92>
c0004ba1:	eb 2a                	jmp    c0004bcd <f_mkdir+0xb7>
c0004ba3:	bb 07 00 00 00       	mov    ebx,0x7
c0004ba8:	31 c9                	xor    ecx,ecx
c0004baa:	89 f2                	mov    edx,esi
c0004bac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb0:	e8 ed e9 ff ff       	call   c00035a2 <remove_chain>
c0004bb5:	eb 05                	jmp    c0004bbc <f_mkdir+0xa6>
c0004bb7:	bb 08 00 00 00       	mov    ebx,0x8
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	57                   	push   edi
c0004bc0:	e8 4f 10 00 00       	call   c0005c14 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	e9 db 00 00 00       	jmp    c0004ca8 <f_mkdir+0x192>
c0004bcd:	83 f8 ff             	cmp    eax,0xffffffff
c0004bd0:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd5:	74 d1                	je     c0004ba8 <f_mkdir+0x92>
c0004bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bdb:	89 f2                	mov    edx,esi
c0004bdd:	e8 a9 dd ff ff       	call   c000298b <dir_clear>
c0004be2:	85 c0                	test   eax,eax
c0004be4:	89 c3                	mov    ebx,eax
c0004be6:	75 c0                	jne    c0004ba8 <f_mkdir+0x92>
c0004be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bec:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf1:	ba 20 00 00 00       	mov    edx,0x20
c0004bf6:	83 c0 34             	add    eax,0x34
c0004bf9:	e8 0c d3 ff ff       	call   c0001f0a <mem_set>
c0004bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c07:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c0b:	83 c0 4a             	add    eax,0x4a
c0004c0e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c12:	e8 db d2 ff ff       	call   c0001ef2 <st_dword>
c0004c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1b:	89 f1                	mov    ecx,esi
c0004c1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c20:	e8 56 e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c29:	b9 20 00 00 00       	mov    ecx,0x20
c0004c2e:	8d 50 34             	lea    edx,[eax+0x34]
c0004c31:	83 c0 54             	add    eax,0x54
c0004c34:	e8 bc d2 ff ff       	call   c0001ef5 <mem_cpy>
c0004c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c41:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c45:	8d 50 54             	lea    edx,[eax+0x54]
c0004c48:	e8 2e e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c51:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 68 ee ff ff       	call   c0003ac6 <dir_register>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	89 c3                	mov    ebx,eax
c0004c62:	0f 85 40 ff ff ff    	jne    c0004ba8 <f_mkdir+0x92>
c0004c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c6c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c71:	83 c0 16             	add    eax,0x16
c0004c74:	e8 79 d2 ff ff       	call   c0001ef2 <st_dword>
c0004c79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7d:	89 f1                	mov    ecx,esi
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	e8 f3 e5 ff ff       	call   c000327b <st_clust.isra.1>
c0004c88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c8c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c94:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9c:	e8 7f e1 ff ff       	call   c0002e20 <sync_fs>
c0004ca1:	89 c3                	mov    ebx,eax
c0004ca3:	e9 14 ff ff ff       	jmp    c0004bbc <f_mkdir+0xa6>
c0004ca8:	83 c4 50             	add    esp,0x50
c0004cab:	89 d8                	mov    eax,ebx
c0004cad:	5b                   	pop    ebx
c0004cae:	5e                   	pop    esi
c0004caf:	5f                   	pop    edi
c0004cb0:	c3                   	ret    

c0004cb1 <f_rename>:
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cba:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc1:	e8 27 d6 ff ff       	call   c00022ed <get_ldnumber>
c0004cc6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cca:	b9 02 00 00 00       	mov    ecx,0x2
c0004ccf:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cd6:	e8 5f d8 ff ff       	call   c000253a <mount_volume>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	0f 85 7c 01 00 00    	jne    c0004e5f <f_rename+0x1ae>
c0004ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce7:	83 ec 0c             	sub    esp,0xc
c0004cea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cee:	68 00 02 00 00       	push   0x200
c0004cf3:	e8 08 0f 00 00       	call   c0005c00 <ff_memalloc>
c0004cf8:	83 c4 10             	add    esp,0x10
c0004cfb:	89 c6                	mov    esi,eax
c0004cfd:	b8 11 00 00 00       	mov    eax,0x11
c0004d02:	85 f6                	test   esi,esi
c0004d04:	0f 84 55 01 00 00    	je     c0004e5f <f_rename+0x1ae>
c0004d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d15:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d18:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d1c:	e8 09 ed ff ff       	call   c0003a2a <follow_path>
c0004d21:	85 c0                	test   eax,eax
c0004d23:	0f 85 22 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d29:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004d2e:	b8 06 00 00 00       	mov    eax,0x6
c0004d33:	0f 85 12 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d39:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d3d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	e8 aa d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d4b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d4f:	b9 30 00 00 00       	mov    ecx,0x30
c0004d54:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d58:	e8 98 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d5d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d68:	e8 bd ec ff ff       	call   c0003a2a <follow_path>
c0004d6d:	85 c0                	test   eax,eax
c0004d6f:	75 20                	jne    c0004d91 <f_rename+0xe0>
c0004d71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d75:	b8 08 00 00 00       	mov    eax,0x8
c0004d7a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d7e:	0f 85 c7 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d84:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d88:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d8f:	eb 03                	jmp    c0004d94 <f_rename+0xe3>
c0004d91:	83 f8 04             	cmp    eax,0x4
c0004d94:	0f 85 b1 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d9a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d9e:	e8 23 ed ff ff       	call   c0003ac6 <dir_register>
c0004da3:	85 c0                	test   eax,eax
c0004da5:	0f 85 a0 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004dab:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004db2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004db6:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbb:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dbe:	e8 32 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004dc3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dc7:	88 c2                	mov    dl,al
c0004dc9:	80 e2 10             	and    dl,0x10
c0004dcc:	75 02                	jne    c0004dd0 <f_rename+0x11f>
c0004dce:	0c 20                	or     al,0x20
c0004dd0:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ddb:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ddf:	74 54                	je     c0004e35 <f_rename+0x184>
c0004de1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004de5:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004de9:	74 4a                	je     c0004e35 <f_rename+0x184>
c0004deb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004def:	89 da                	mov    edx,ebx
c0004df1:	8a 07                	mov    al,BYTE PTR [edi]
c0004df3:	e8 5b e4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004df8:	89 c2                	mov    edx,eax
c0004dfa:	89 f8                	mov    eax,edi
c0004dfc:	e8 07 d3 ff ff       	call   c0002108 <clst2sect>
c0004e01:	89 c2                	mov    edx,eax
c0004e03:	b8 02 00 00 00       	mov    eax,0x2
c0004e08:	85 d2                	test   edx,edx
c0004e0a:	74 3f                	je     c0004e4b <f_rename+0x19a>
c0004e0c:	89 f8                	mov    eax,edi
c0004e0e:	e8 ca d5 ff ff       	call   c00023dd <move_window>
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 34                	jne    c0004e4b <f_rename+0x19a>
c0004e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e1f:	75 14                	jne    c0004e35 <f_rename+0x184>
c0004e21:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e25:	8d 50 54             	lea    edx,[eax+0x54]
c0004e28:	e8 4e e4 ff ff       	call   c000327b <st_clust.isra.1>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e35:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e39:	e8 70 ea ff ff       	call   c00038ae <dir_remove>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 09                	jne    c0004e4b <f_rename+0x19a>
c0004e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e46:	e8 d5 df ff ff       	call   c0002e20 <sync_fs>
c0004e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4f:	83 ec 0c             	sub    esp,0xc
c0004e52:	56                   	push   esi
c0004e53:	e8 bc 0d 00 00       	call   c0005c14 <ff_memfree>
c0004e58:	83 c4 10             	add    esp,0x10
c0004e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e65:	5b                   	pop    ebx
c0004e66:	5e                   	pop    esi
c0004e67:	5f                   	pop    edi
c0004e68:	c3                   	ret    

c0004e69 <f_chmod>:
c0004e69:	56                   	push   esi
c0004e6a:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 54             	sub    esp,0x54
c0004e73:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004e77:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e7b:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004e7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004e83:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e87:	e8 ae d6 ff ff       	call   c000253a <mount_volume>
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 81 00 00 00    	jne    c0004f15 <f_chmod+0xac>
c0004e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e98:	83 ec 0c             	sub    esp,0xc
c0004e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e9f:	68 00 02 00 00       	push   0x200
c0004ea4:	e8 57 0d 00 00       	call   c0005c00 <ff_memalloc>
c0004ea9:	83 c4 10             	add    esp,0x10
c0004eac:	89 c6                	mov    esi,eax
c0004eae:	b8 11 00 00 00       	mov    eax,0x11
c0004eb3:	85 f6                	test   esi,esi
c0004eb5:	74 5e                	je     c0004f15 <f_chmod+0xac>
c0004eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ebf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec6:	e8 5f eb ff ff       	call   c0003a2a <follow_path>
c0004ecb:	85 c0                	test   eax,eax
c0004ecd:	75 32                	jne    c0004f01 <f_chmod+0x98>
c0004ecf:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004ed4:	b8 06 00 00 00       	mov    eax,0x6
c0004ed9:	75 26                	jne    c0004f01 <f_chmod+0x98>
c0004edb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004edf:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004ee2:	30 c3                	xor    bl,al
c0004ee4:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004ee8:	80 e3 27             	and    bl,0x27
c0004eeb:	30 c3                	xor    bl,al
c0004eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004ef4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efc:	e8 1f df ff ff       	call   c0002e20 <sync_fs>
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	83 ec 0c             	sub    esp,0xc
c0004f08:	56                   	push   esi
c0004f09:	e8 06 0d 00 00       	call   c0005c14 <ff_memfree>
c0004f0e:	83 c4 10             	add    esp,0x10
c0004f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f15:	83 c4 54             	add    esp,0x54
c0004f18:	5b                   	pop    ebx
c0004f19:	5e                   	pop    esi
c0004f1a:	c3                   	ret    

c0004f1b <f_utime>:
c0004f1b:	56                   	push   esi
c0004f1c:	b9 02 00 00 00       	mov    ecx,0x2
c0004f21:	53                   	push   ebx
c0004f22:	83 ec 54             	sub    esp,0x54
c0004f25:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f31:	e8 04 d6 ff ff       	call   c000253a <mount_volume>
c0004f36:	85 c0                	test   eax,eax
c0004f38:	0f 85 85 00 00 00    	jne    c0004fc3 <f_utime+0xa8>
c0004f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f42:	83 ec 0c             	sub    esp,0xc
c0004f45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f49:	68 00 02 00 00       	push   0x200
c0004f4e:	e8 ad 0c 00 00       	call   c0005c00 <ff_memalloc>
c0004f53:	83 c4 10             	add    esp,0x10
c0004f56:	89 c3                	mov    ebx,eax
c0004f58:	b8 11 00 00 00       	mov    eax,0x11
c0004f5d:	85 db                	test   ebx,ebx
c0004f5f:	74 62                	je     c0004fc3 <f_utime+0xa8>
c0004f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f69:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f70:	e8 b5 ea ff ff       	call   c0003a2a <follow_path>
c0004f75:	85 c0                	test   eax,eax
c0004f77:	75 36                	jne    c0004faf <f_utime+0x94>
c0004f79:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004f7e:	b8 06 00 00 00       	mov    eax,0x6
c0004f83:	75 2a                	jne    c0004faf <f_utime+0x94>
c0004f85:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f89:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8d:	c1 e2 10             	shl    edx,0x10
c0004f90:	09 c2                	or     edx,eax
c0004f92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f96:	83 c0 16             	add    eax,0x16
c0004f99:	e8 54 cf ff ff       	call   c0001ef2 <st_dword>
c0004f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004faa:	e8 71 de ff ff       	call   c0002e20 <sync_fs>
c0004faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb3:	83 ec 0c             	sub    esp,0xc
c0004fb6:	53                   	push   ebx
c0004fb7:	e8 58 0c 00 00       	call   c0005c14 <ff_memfree>
c0004fbc:	83 c4 10             	add    esp,0x10
c0004fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc3:	83 c4 54             	add    esp,0x54
c0004fc6:	5b                   	pop    ebx
c0004fc7:	5e                   	pop    esi
c0004fc8:	c3                   	ret    

c0004fc9 <f_getlabel>:
c0004fc9:	55                   	push   ebp
c0004fca:	31 c9                	xor    ecx,ecx
c0004fcc:	57                   	push   edi
c0004fcd:	56                   	push   esi
c0004fce:	53                   	push   ebx
c0004fcf:	83 ec 5c             	sub    esp,0x5c
c0004fd2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fd6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fda:	e8 5b d5 ff ff       	call   c000253a <mount_volume>
c0004fdf:	85 c0                	test   eax,eax
c0004fe1:	89 c3                	mov    ebx,eax
c0004fe3:	0f 85 de 00 00 00    	jne    c00050c7 <f_getlabel+0xfe>
c0004fe9:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004fee:	0f 84 d3 00 00 00    	je     c00050c7 <f_getlabel+0xfe>
c0004ff4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	31 d2                	xor    edx,edx
c0005002:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005006:	8d 44 24 20          	lea    eax,[esp+0x20]
c000500a:	e8 96 e3 ff ff       	call   c00033a5 <dir_sdi>
c000500f:	85 c0                	test   eax,eax
c0005011:	89 c3                	mov    ebx,eax
c0005013:	0f 85 a0 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005019:	8d 44 24 20          	lea    eax,[esp+0x20]
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	e8 6a e7 ff ff       	call   c0003791 <dir_read>
c0005027:	85 c0                	test   eax,eax
c0005029:	89 c3                	mov    ebx,eax
c000502b:	0f 85 88 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005031:	31 f6                	xor    esi,esi
c0005033:	31 c9                	xor    ecx,ecx
c0005035:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005039:	8d 79 01             	lea    edi,[ecx+0x1]
c000503c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005045:	89 c2                	mov    edx,eax
c0005047:	e8 fc ce ff ff       	call   c0001f48 <dbc_1st>
c000504c:	85 c0                	test   eax,eax
c000504e:	74 16                	je     c0005066 <f_getlabel+0x9d>
c0005050:	83 ff 0b             	cmp    edi,0xb
c0005053:	74 11                	je     c0005066 <f_getlabel+0x9d>
c0005055:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c000505a:	c1 e2 08             	shl    edx,0x8
c000505d:	8d 79 02             	lea    edi,[ecx+0x2]
c0005060:	09 d0                	or     eax,edx
c0005062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005066:	50                   	push   eax
c0005067:	50                   	push   eax
c0005068:	68 b5 01 00 00       	push   0x1b5
c000506d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005071:	e8 4e 0c 00 00       	call   c0005cc4 <ff_oem2uni>
c0005076:	83 c4 10             	add    esp,0x10
c0005079:	0f b7 c0             	movzx  eax,ax
c000507c:	85 c0                	test   eax,eax
c000507e:	74 22                	je     c00050a2 <f_getlabel+0xd9>
c0005080:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005084:	b9 04 00 00 00       	mov    ecx,0x4
c0005089:	01 f2                	add    edx,esi
c000508b:	e8 88 cf ff ff       	call   c0002018 <put_utf>
c0005090:	84 c0                	test   al,al
c0005092:	74 0e                	je     c00050a2 <f_getlabel+0xd9>
c0005094:	0f b6 c0             	movzx  eax,al
c0005097:	01 c6                	add    esi,eax
c0005099:	83 ff 0b             	cmp    edi,0xb
c000509c:	74 06                	je     c00050a4 <f_getlabel+0xdb>
c000509e:	89 f9                	mov    ecx,edi
c00050a0:	eb 93                	jmp    c0005035 <f_getlabel+0x6c>
c00050a2:	31 f6                	xor    esi,esi
c00050a4:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050a8:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050af:	74 16                	je     c00050c7 <f_getlabel+0xfe>
c00050b1:	4e                   	dec    esi
c00050b2:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050b5:	74 f1                	je     c00050a8 <f_getlabel+0xdf>
c00050b7:	eb 0e                	jmp    c00050c7 <f_getlabel+0xfe>
c00050b9:	83 fb 04             	cmp    ebx,0x4
c00050bc:	75 09                	jne    c00050c7 <f_getlabel+0xfe>
c00050be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c2:	31 db                	xor    ebx,ebx
c00050c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050c7:	85 db                	test   ebx,ebx
c00050c9:	75 48                	jne    c0005113 <f_getlabel+0x14a>
c00050cb:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050d0:	74 41                	je     c0005113 <f_getlabel+0x14a>
c00050d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d9:	e8 ff d2 ff ff       	call   c00023dd <move_window>
c00050de:	85 c0                	test   eax,eax
c00050e0:	89 c3                	mov    ebx,eax
c00050e2:	75 2f                	jne    c0005113 <f_getlabel+0x14a>
c00050e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e8:	b8 43 00 00 00       	mov    eax,0x43
c00050ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00050ef:	80 f9 03             	cmp    cl,0x3
c00050f2:	74 10                	je     c0005104 <f_getlabel+0x13b>
c00050f4:	80 f9 04             	cmp    cl,0x4
c00050f7:	b8 64 00 00 00       	mov    eax,0x64
c00050fc:	b9 27 00 00 00       	mov    ecx,0x27
c0005101:	0f 45 c1             	cmovne eax,ecx
c0005104:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005108:	e8 c9 cd ff ff       	call   c0001ed6 <ld_dword>
c000510d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005111:	89 07                	mov    DWORD PTR [edi],eax
c0005113:	83 c4 5c             	add    esp,0x5c
c0005116:	89 d8                	mov    eax,ebx
c0005118:	5b                   	pop    ebx
c0005119:	5e                   	pop    esi
c000511a:	5f                   	pop    edi
c000511b:	5d                   	pop    ebp
c000511c:	c3                   	ret    

c000511d <f_setlabel>:
c000511d:	56                   	push   esi
c000511e:	b9 02 00 00 00       	mov    ecx,0x2
c0005123:	53                   	push   ebx
c0005124:	83 ec 64             	sub    esp,0x64
c0005127:	8d 54 24 14          	lea    edx,[esp+0x14]
c000512b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000512f:	e8 06 d4 ff ff       	call   c000253a <mount_volume>
c0005134:	85 c0                	test   eax,eax
c0005136:	89 c6                	mov    esi,eax
c0005138:	0f 85 67 01 00 00    	jne    c00052a5 <f_setlabel+0x188>
c000513e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005143:	ba 20 00 00 00       	mov    edx,0x20
c0005148:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c000514c:	31 db                	xor    ebx,ebx
c000514e:	e8 b7 cd ff ff       	call   c0001f0a <mem_set>
c0005153:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0005157:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515a:	76 63                	jbe    c00051bf <f_setlabel+0xa2>
c000515c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005160:	e8 e9 cd ff ff       	call   c0001f4e <tchar2uni>
c0005165:	3d ff ff 00 00       	cmp    eax,0xffff
c000516a:	76 0a                	jbe    c0005176 <f_setlabel+0x59>
c000516c:	be 06 00 00 00       	mov    esi,0x6
c0005171:	e9 2f 01 00 00       	jmp    c00052a5 <f_setlabel+0x188>
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	50                   	push   eax
c000517a:	e8 bd 0b 00 00       	call   c0005d3c <ff_wtoupper>
c000517f:	5a                   	pop    edx
c0005180:	59                   	pop    ecx
c0005181:	68 b5 01 00 00       	push   0x1b5
c0005186:	50                   	push   eax
c0005187:	e8 9c 0a 00 00       	call   c0005c28 <ff_uni2oem>
c000518c:	83 c4 10             	add    esp,0x10
c000518f:	0f b7 c8             	movzx  ecx,ax
c0005192:	85 c9                	test   ecx,ecx
c0005194:	74 d6                	je     c000516c <f_setlabel+0x4f>
c0005196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000519a:	89 ca                	mov    edx,ecx
c000519c:	b8 90 f1 01 c0       	mov    eax,0xc001f190
c00051a1:	e8 91 cd ff ff       	call   c0001f37 <chk_chr>
c00051a6:	85 c0                	test   eax,eax
c00051a8:	75 c2                	jne    c000516c <f_setlabel+0x4f>
c00051aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051ae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00051b4:	0f 87 c9 00 00 00    	ja     c0005283 <f_setlabel+0x166>
c00051ba:	e9 dc 00 00 00       	jmp    c000529b <f_setlabel+0x17e>
c00051bf:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c00051c4:	74 a6                	je     c000516c <f_setlabel+0x4f>
c00051c6:	85 db                	test   ebx,ebx
c00051c8:	74 0e                	je     c00051d8 <f_setlabel+0xbb>
c00051ca:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c00051cf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051d2:	75 04                	jne    c00051d8 <f_setlabel+0xbb>
c00051d4:	89 c3                	mov    ebx,eax
c00051d6:	eb ee                	jmp    c00051c6 <f_setlabel+0xa9>
c00051d8:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00051e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e4:	31 d2                	xor    edx,edx
c00051e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00051ea:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051ee:	e8 b2 e1 ff ff       	call   c00033a5 <dir_sdi>
c00051f3:	85 c0                	test   eax,eax
c00051f5:	89 c6                	mov    esi,eax
c00051f7:	0f 85 a8 00 00 00    	jne    c00052a5 <f_setlabel+0x188>
c00051fd:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005201:	ba 01 00 00 00       	mov    edx,0x1
c0005206:	e8 86 e5 ff ff       	call   c0003791 <dir_read>
c000520b:	85 c0                	test   eax,eax
c000520d:	75 18                	jne    c0005227 <f_setlabel+0x10a>
c000520f:	85 db                	test   ebx,ebx
c0005211:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005215:	74 0b                	je     c0005222 <f_setlabel+0x105>
c0005217:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000521b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005220:	eb 47                	jmp    c0005269 <f_setlabel+0x14c>
c0005222:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005225:	eb 47                	jmp    c000526e <f_setlabel+0x151>
c0005227:	83 f8 04             	cmp    eax,0x4
c000522a:	75 53                	jne    c000527f <f_setlabel+0x162>
c000522c:	85 db                	test   ebx,ebx
c000522e:	74 75                	je     c00052a5 <f_setlabel+0x188>
c0005230:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005234:	ba 01 00 00 00       	mov    edx,0x1
c0005239:	e8 f2 e4 ff ff       	call   c0003730 <dir_alloc>
c000523e:	85 c0                	test   eax,eax
c0005240:	89 c6                	mov    esi,eax
c0005242:	75 61                	jne    c00052a5 <f_setlabel+0x188>
c0005244:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005248:	b9 20 00 00 00       	mov    ecx,0x20
c000524d:	31 d2                	xor    edx,edx
c000524f:	e8 b6 cc ff ff       	call   c0001f0a <mem_set>
c0005254:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005258:	b9 0b 00 00 00       	mov    ecx,0xb
c000525d:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c0005261:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005265:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005269:	e8 87 cc ff ff       	call   c0001ef5 <mem_cpy>
c000526e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005272:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000527a:	e8 a1 db ff ff       	call   c0002e20 <sync_fs>
c000527f:	89 c6                	mov    esi,eax
c0005281:	eb 22                	jmp    c00052a5 <f_setlabel+0x188>
c0005283:	83 fb 09             	cmp    ebx,0x9
c0005286:	0f 87 e0 fe ff ff    	ja     c000516c <f_setlabel+0x4f>
c000528c:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005290:	43                   	inc    ebx
c0005291:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005295:	43                   	inc    ebx
c0005296:	e9 b8 fe ff ff       	jmp    c0005153 <f_setlabel+0x36>
c000529b:	83 fb 0a             	cmp    ebx,0xa
c000529e:	76 f1                	jbe    c0005291 <f_setlabel+0x174>
c00052a0:	e9 c7 fe ff ff       	jmp    c000516c <f_setlabel+0x4f>
c00052a5:	83 c4 64             	add    esp,0x64
c00052a8:	89 f0                	mov    eax,esi
c00052aa:	5b                   	pop    ebx
c00052ab:	5e                   	pop    esi
c00052ac:	c3                   	ret    

c00052ad <f_expand>:
c00052ad:	55                   	push   ebp
c00052ae:	57                   	push   edi
c00052af:	56                   	push   esi
c00052b0:	53                   	push   ebx
c00052b1:	83 ec 2c             	sub    esp,0x2c
c00052b4:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00052b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052c0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00052c4:	89 d8                	mov    eax,ebx
c00052c6:	e8 67 d0 ff ff       	call   c0002332 <validate>
c00052cb:	85 c0                	test   eax,eax
c00052cd:	89 c6                	mov    esi,eax
c00052cf:	0f 85 2c 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052d5:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052d9:	85 f6                	test   esi,esi
c00052db:	0f 85 20 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052e1:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e6:	75 0a                	jne    c00052f2 <f_expand+0x45>
c00052e8:	be 07 00 00 00       	mov    esi,0x7
c00052ed:	e9 0f 01 00 00       	jmp    c0005401 <f_expand+0x154>
c00052f2:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f6:	75 f0                	jne    c00052e8 <f_expand+0x3b>
c00052f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052fc:	74 ea                	je     c00052e8 <f_expand+0x3b>
c00052fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005302:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005306:	c1 e7 09             	shl    edi,0x9
c0005309:	8d 47 ff             	lea    eax,[edi-0x1]
c000530c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005310:	0f 95 c0             	setne  al
c0005313:	31 d2                	xor    edx,edx
c0005315:	0f b6 e8             	movzx  ebp,al
c0005318:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000531c:	f7 f7                	div    edi
c000531e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005321:	01 e8                	add    eax,ebp
c0005323:	83 ff 01             	cmp    edi,0x1
c0005326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532a:	76 05                	jbe    c0005331 <f_expand+0x84>
c000532c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000532f:	77 05                	ja     c0005336 <f_expand+0x89>
c0005331:	bf 02 00 00 00       	mov    edi,0x2
c0005336:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005339:	89 fd                	mov    ebp,edi
c000533b:	31 c9                	xor    ecx,ecx
c000533d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005341:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005343:	89 ea                	mov    edx,ebp
c0005345:	45                   	inc    ebp
c0005346:	e8 58 df ff ff       	call   c00032a3 <get_fat.isra.2>
c000534b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000534f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005353:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005356:	77 05                	ja     c000535d <f_expand+0xb0>
c0005358:	bd 02 00 00 00       	mov    ebp,0x2
c000535d:	83 f8 01             	cmp    eax,0x1
c0005360:	74 20                	je     c0005382 <f_expand+0xd5>
c0005362:	83 f8 ff             	cmp    eax,0xffffffff
c0005365:	74 22                	je     c0005389 <f_expand+0xdc>
c0005367:	85 c0                	test   eax,eax
c0005369:	75 09                	jne    c0005374 <f_expand+0xc7>
c000536b:	41                   	inc    ecx
c000536c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005370:	75 07                	jne    c0005379 <f_expand+0xcc>
c0005372:	eb 1c                	jmp    c0005390 <f_expand+0xe3>
c0005374:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005377:	31 c9                	xor    ecx,ecx
c0005379:	39 fd                	cmp    ebp,edi
c000537b:	75 c0                	jne    c000533d <f_expand+0x90>
c000537d:	e9 66 ff ff ff       	jmp    c00052e8 <f_expand+0x3b>
c0005382:	be 02 00 00 00       	mov    esi,0x2
c0005387:	eb 78                	jmp    c0005401 <f_expand+0x154>
c0005389:	be 01 00 00 00       	mov    esi,0x1
c000538e:	eb 71                	jmp    c0005401 <f_expand+0x154>
c0005390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005395:	74 2b                	je     c00053c2 <f_expand+0x115>
c0005397:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000539a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000539e:	85 ed                	test   ebp,ebp
c00053a0:	74 24                	je     c00053c6 <f_expand+0x119>
c00053a2:	83 c9 ff             	or     ecx,0xffffffff
c00053a5:	83 fd 01             	cmp    ebp,0x1
c00053a8:	74 03                	je     c00053ad <f_expand+0x100>
c00053aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053b1:	89 fa                	mov    edx,edi
c00053b3:	e8 7f d4 ff ff       	call   c0002837 <put_fat>
c00053b8:	85 c0                	test   eax,eax
c00053ba:	75 43                	jne    c00053ff <f_expand+0x152>
c00053bc:	89 f8                	mov    eax,edi
c00053be:	4d                   	dec    ebp
c00053bf:	47                   	inc    edi
c00053c0:	eb dc                	jmp    c000539e <f_expand+0xf1>
c00053c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053c5:	48                   	dec    eax
c00053c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00053cf:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053d2:	74 2d                	je     c0005401 <f_expand+0x154>
c00053d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053d7:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00053db:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053eb:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053ee:	39 c8                	cmp    eax,ecx
c00053f0:	77 0f                	ja     c0005401 <f_expand+0x154>
c00053f2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00053f6:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00053fa:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00053fd:	eb 02                	jmp    c0005401 <f_expand+0x154>
c00053ff:	89 c6                	mov    esi,eax
c0005401:	83 c4 2c             	add    esp,0x2c
c0005404:	89 f0                	mov    eax,esi
c0005406:	5b                   	pop    ebx
c0005407:	5e                   	pop    esi
c0005408:	5f                   	pop    edi
c0005409:	5d                   	pop    ebp
c000540a:	c3                   	ret    

c000540b <f_mkfs>:
c000540b:	55                   	push   ebp
c000540c:	57                   	push   edi
c000540d:	56                   	push   esi
c000540e:	53                   	push   ebx
c000540f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005414:	83 ec 4c             	sub    esp,0x4c
c0005417:	8d 44 24 60          	lea    eax,[esp+0x60]
c000541b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000541f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005423:	e8 c5 ce ff ff       	call   c00022ed <get_ldnumber>
c0005428:	85 c0                	test   eax,eax
c000542a:	0f 88 c6 07 00 00    	js     c0005bf6 <f_mkfs+0x7eb>
c0005430:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005437:	85 d2                	test   edx,edx
c0005439:	74 03                	je     c000543e <f_mkfs+0x33>
c000543b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000543e:	85 f6                	test   esi,esi
c0005440:	75 05                	jne    c0005447 <f_mkfs+0x3c>
c0005442:	be 80 f1 01 c0       	mov    esi,0xc001f180
c0005447:	0f b6 c0             	movzx  eax,al
c000544a:	83 ec 0c             	sub    esp,0xc
c000544d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005451:	bb 03 00 00 00       	mov    ebx,0x3
c0005456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000545a:	e8 1c ca ff ff       	call   c0001e7b <disk_initialize>
c000545f:	83 c4 10             	add    esp,0x10
c0005462:	88 c2                	mov    dl,al
c0005464:	80 e2 01             	and    dl,0x1
c0005467:	84 d2                	test   dl,dl
c0005469:	0f 85 87 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000546f:	24 04                	and    al,0x4
c0005471:	bb 0a 00 00 00       	mov    ebx,0xa
c0005476:	0f 85 7a 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000547c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000547f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005483:	85 c0                	test   eax,eax
c0005485:	75 20                	jne    c00054a7 <f_mkfs+0x9c>
c0005487:	51                   	push   ecx
c0005488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000548c:	50                   	push   eax
c000548d:	6a 03                	push   0x3
c000548f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005493:	e8 12 ca ff ff       	call   c0001eaa <disk_ioctl>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	85 c0                	test   eax,eax
c000549d:	74 08                	je     c00054a7 <f_mkfs+0x9c>
c000549f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00054ab:	8d 42 ff             	lea    eax,[edx-0x1]
c00054ae:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054b3:	77 04                	ja     c00054b9 <f_mkfs+0xae>
c00054b5:	85 c2                	test   edx,eax
c00054b7:	74 08                	je     c00054c1 <f_mkfs+0xb6>
c00054b9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054c1:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00054c4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00054c8:	fe c8                	dec    al
c00054ca:	3c 01                	cmp    al,0x1
c00054cc:	76 05                	jbe    c00054d3 <f_mkfs+0xc8>
c00054ce:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c00054d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00054d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054da:	48                   	dec    eax
c00054db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e0:	77 15                	ja     c00054f7 <f_mkfs+0xec>
c00054e2:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00054e7:	b8 00 02 00 00       	mov    eax,0x200
c00054ec:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c00054f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054f5:	eb 08                	jmp    c00054ff <f_mkfs+0xf4>
c00054f7:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00054ff:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005502:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005508:	77 0f                	ja     c0005519 <f_mkfs+0x10e>
c000550a:	8d 47 ff             	lea    eax,[edi-0x1]
c000550d:	85 f8                	test   eax,edi
c000550f:	b8 00 00 00 00       	mov    eax,0x0
c0005514:	0f 45 f8             	cmovne edi,eax
c0005517:	eb 02                	jmp    c000551b <f_mkfs+0x110>
c0005519:	31 ff                	xor    edi,edi
c000551b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005523:	77 0a                	ja     c000552f <f_mkfs+0x124>
c0005525:	bb 11 00 00 00       	mov    ebx,0x11
c000552a:	e9 c7 06 00 00       	jmp    c0005bf6 <f_mkfs+0x7eb>
c000552f:	85 ed                	test   ebp,ebp
c0005531:	8a 1e                	mov    bl,BYTE PTR [esi]
c0005533:	89 ee                	mov    esi,ebp
c0005535:	75 1b                	jne    c0005552 <f_mkfs+0x147>
c0005537:	83 ec 0c             	sub    esp,0xc
c000553a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000553e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005543:	50                   	push   eax
c0005544:	e8 b7 06 00 00       	call   c0005c00 <ff_memalloc>
c0005549:	83 c4 10             	add    esp,0x10
c000554c:	85 c0                	test   eax,eax
c000554e:	89 c6                	mov    esi,eax
c0005550:	74 d3                	je     c0005525 <f_mkfs+0x11a>
c0005552:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c000555a:	52                   	push   edx
c000555b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000555f:	50                   	push   eax
c0005560:	6a 01                	push   0x1
c0005562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005566:	e8 3f c9 ff ff       	call   c0001eaa <disk_ioctl>
c000556b:	83 c4 10             	add    esp,0x10
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 27 06 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005576:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557e:	88 d8                	mov    al,bl
c0005580:	24 08                	and    al,0x8
c0005582:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005586:	75 18                	jne    c00055a0 <f_mkfs+0x195>
c0005588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000558c:	83 f8 3f             	cmp    eax,0x3f
c000558f:	76 0f                	jbe    c00055a0 <f_mkfs+0x195>
c0005591:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005599:	83 e8 3f             	sub    eax,0x3f
c000559c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00055a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00055a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00055a8:	83 f8 7f             	cmp    eax,0x7f
c00055ab:	0f 86 61 02 00 00    	jbe    c0005812 <f_mkfs+0x407>
c00055b1:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055b7:	b9 80 00 00 00       	mov    ecx,0x80
c00055bc:	77 05                	ja     c00055c3 <f_mkfs+0x1b8>
c00055be:	c1 ef 09             	shr    edi,0x9
c00055c1:	89 f9                	mov    ecx,edi
c00055c3:	88 d8                	mov    al,bl
c00055c5:	24 01                	and    al,0x1
c00055c7:	80 e3 02             	and    bl,0x2
c00055ca:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c00055ce:	74 0a                	je     c00055da <f_mkfs+0x1cf>
c00055d0:	84 c0                	test   al,al
c00055d2:	0f 84 58 01 00 00    	je     c0005730 <f_mkfs+0x325>
c00055d8:	eb 3b                	jmp    c0005615 <f_mkfs+0x20a>
c00055da:	84 c0                	test   al,al
c00055dc:	bb 13 00 00 00       	mov    ebx,0x13
c00055e1:	75 32                	jne    c0005615 <f_mkfs+0x20a>
c00055e3:	e9 cc 05 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c00055e8:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00055ed:	0f 85 18 02 00 00    	jne    c000580b <f_mkfs+0x400>
c00055f3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00055f8:	0f 86 ee 01 00 00    	jbe    c00057ec <f_mkfs+0x3e1>
c00055fe:	85 c9                	test   ecx,ecx
c0005600:	0f 85 c0 05 00 00    	jne    c0005bc6 <f_mkfs+0x7bb>
c0005606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000560a:	01 c9                	add    ecx,ecx
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 c1 05 00 00    	ja     c0005bd6 <f_mkfs+0x7cb>
c0005615:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005619:	85 c9                	test   ecx,ecx
c000561b:	75 1f                	jne    c000563c <f_mkfs+0x231>
c000561d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005625:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005629:	b8 60 f1 01 c0       	mov    eax,0xc001f160
c000562e:	c1 eb 0c             	shr    ebx,0xc
c0005631:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005634:	85 d2                	test   edx,edx
c0005636:	0f 85 62 01 00 00    	jne    c000579e <f_mkfs+0x393>
c000563c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005640:	31 d2                	xor    edx,edx
c0005642:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0005646:	3d f5 0f 00 00       	cmp    eax,0xff5
c000564b:	0f 86 65 01 00 00    	jbe    c00057b6 <f_mkfs+0x3ab>
c0005651:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005656:	83 c0 02             	add    eax,0x2
c0005659:	01 c0                	add    eax,eax
c000565b:	05 ff 01 00 00       	add    eax,0x1ff
c0005660:	bf 01 00 00 00       	mov    edi,0x1
c0005665:	c1 e8 09             	shr    eax,0x9
c0005668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000566c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005670:	c1 e0 05             	shl    eax,0x5
c0005673:	c1 e8 09             	shr    eax,0x9
c0005676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000567a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000567f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005687:	01 f8                	add    eax,edi
c0005689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000568d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005691:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005696:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000569a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000569e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00056a6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00056aa:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c00056ae:	f7 d8                	neg    eax
c00056b0:	21 c3                	and    ebx,eax
c00056b2:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c00056b6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bb:	0f 85 08 01 00 00    	jne    c00057c9 <f_mkfs+0x3be>
c00056c1:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c00056c5:	01 df                	add    edi,ebx
c00056c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00056cb:	c1 e0 04             	shl    eax,0x4
c00056ce:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d2:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00056d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00056da:	0f 82 32 01 00 00    	jb     c0005812 <f_mkfs+0x407>
c00056e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056e4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056e8:	29 f8                	sub    eax,edi
c00056ea:	89 c2                	mov    edx,eax
c00056ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056f0:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00056f5:	29 c2                	sub    edx,eax
c00056f7:	89 d0                	mov    eax,edx
c00056f9:	31 d2                	xor    edx,edx
c00056fb:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00056ff:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005704:	89 c3                	mov    ebx,eax
c0005706:	0f 85 dc fe ff ff    	jne    c00055e8 <f_mkfs+0x1dd>
c000570c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005711:	0f 87 0a 01 00 00    	ja     c0005821 <f_mkfs+0x416>
c0005717:	85 c9                	test   ecx,ecx
c0005719:	0f 85 f3 00 00 00    	jne    c0005812 <f_mkfs+0x407>
c000571f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005724:	0f 86 e8 00 00 00    	jbe    c0005812 <f_mkfs+0x407>
c000572a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000572e:	d1 e9                	shr    ecx,1
c0005730:	85 c9                	test   ecx,ecx
c0005732:	89 cb                	mov    ebx,ecx
c0005734:	75 25                	jne    c000575b <f_mkfs+0x350>
c0005736:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000573a:	b8 70 f1 01 c0       	mov    eax,0xc001f170
c000573f:	b9 01 00 00 00       	mov    ecx,0x1
c0005744:	c1 eb 11             	shr    ebx,0x11
c0005747:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000574a:	85 d2                	test   edx,edx
c000574c:	74 0b                	je     c0005759 <f_mkfs+0x34e>
c000574e:	83 c0 02             	add    eax,0x2
c0005751:	39 da                	cmp    edx,ebx
c0005753:	77 04                	ja     c0005759 <f_mkfs+0x34e>
c0005755:	01 c9                	add    ecx,ecx
c0005757:	eb ee                	jmp    c0005747 <f_mkfs+0x33c>
c0005759:	31 db                	xor    ebx,ebx
c000575b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000575f:	31 d2                	xor    edx,edx
c0005761:	f7 f1                	div    ecx
c0005763:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000576a:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576f:	c1 ea 09             	shr    edx,0x9
c0005772:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005777:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000577b:	0f 87 91 00 00 00    	ja     c0005812 <f_mkfs+0x407>
c0005781:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005785:	bf 20 00 00 00       	mov    edi,0x20
c000578a:	89 d9                	mov    ecx,ebx
c000578c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005794:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005799:	e9 dc fe ff ff       	jmp    c000567a <f_mkfs+0x26f>
c000579e:	83 c0 02             	add    eax,0x2
c00057a1:	39 da                	cmp    edx,ebx
c00057a3:	0f 87 93 fe ff ff    	ja     c000563c <f_mkfs+0x231>
c00057a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00057ad:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c00057b1:	e9 7b fe ff ff       	jmp    c0005631 <f_mkfs+0x226>
c00057b6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00057bb:	8d 04 40             	lea    eax,[eax+eax*2]
c00057be:	40                   	inc    eax
c00057bf:	d1 e8                	shr    eax,1
c00057c1:	83 c0 03             	add    eax,0x3
c00057c4:	e9 92 fe ff ff       	jmp    c000565b <f_mkfs+0x250>
c00057c9:	31 d2                	xor    edx,edx
c00057cb:	89 d8                	mov    eax,ebx
c00057cd:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057d1:	85 d2                	test   edx,edx
c00057d3:	74 06                	je     c00057db <f_mkfs+0x3d0>
c00057d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00057d9:	4b                   	dec    ebx
c00057da:	47                   	inc    edi
c00057db:	89 d8                	mov    eax,ebx
c00057dd:	31 d2                	xor    edx,edx
c00057df:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057e3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00057e7:	e9 db fe ff ff       	jmp    c00056c7 <f_mkfs+0x2bc>
c00057ec:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f1:	77 2e                	ja     c0005821 <f_mkfs+0x416>
c00057f3:	85 c9                	test   ecx,ecx
c00057f5:	75 1b                	jne    c0005812 <f_mkfs+0x407>
c00057f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00057fb:	01 c9                	add    ecx,ecx
c00057fd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005803:	0f 86 0c fe ff ff    	jbe    c0005615 <f_mkfs+0x20a>
c0005809:	eb 07                	jmp    c0005812 <f_mkfs+0x407>
c000580b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005810:	76 0a                	jbe    c000581c <f_mkfs+0x411>
c0005812:	bb 0e 00 00 00       	mov    ebx,0xe
c0005817:	e9 98 03 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c000581c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005821:	31 d2                	xor    edx,edx
c0005823:	b9 00 02 00 00       	mov    ecx,0x200
c0005828:	89 f0                	mov    eax,esi
c000582a:	e8 db c6 ff ff       	call   c0001f0a <mem_set>
c000582f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005834:	ba 12 f1 01 c0       	mov    edx,0xc001f112
c0005839:	89 f0                	mov    eax,esi
c000583b:	e8 b5 c6 ff ff       	call   c0001ef5 <mem_cpy>
c0005840:	8d 46 0b             	lea    eax,[esi+0xb]
c0005843:	ba 00 02 00 00       	mov    edx,0x200
c0005848:	e8 a1 c6 ff ff       	call   c0001eee <st_word>
c000584d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0005851:	0f b7 d7             	movzx  edx,di
c0005854:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0005857:	8d 46 0e             	lea    eax,[esi+0xe]
c000585a:	e8 8f c6 ff ff       	call   c0001eee <st_word>
c000585f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005863:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005868:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c000586b:	b8 00 00 00 00       	mov    eax,0x0
c0005870:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c0005875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005879:	8d 46 11             	lea    eax,[esi+0x11]
c000587c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005880:	e8 69 c6 ff ff       	call   c0001eee <st_word>
c0005885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005889:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000588f:	77 0a                	ja     c000589b <f_mkfs+0x490>
c0005891:	8d 46 13             	lea    eax,[esi+0x13]
c0005894:	e8 55 c6 ff ff       	call   c0001eee <st_word>
c0005899:	eb 08                	jmp    c00058a3 <f_mkfs+0x498>
c000589b:	8d 46 20             	lea    eax,[esi+0x20]
c000589e:	e8 4f c6 ff ff       	call   c0001ef2 <st_dword>
c00058a3:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00058a7:	8d 46 18             	lea    eax,[esi+0x18]
c00058aa:	ba 3f 00 00 00       	mov    edx,0x3f
c00058af:	e8 3a c6 ff ff       	call   c0001eee <st_word>
c00058b4:	8d 46 1a             	lea    eax,[esi+0x1a]
c00058b7:	ba ff 00 00 00       	mov    edx,0xff
c00058bc:	e8 2d c6 ff ff       	call   c0001eee <st_word>
c00058c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058c5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058c8:	e8 25 c6 ff ff       	call   c0001ef2 <st_dword>
c00058cd:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058d2:	75 57                	jne    c000592b <f_mkfs+0x520>
c00058d4:	8d 46 43             	lea    eax,[esi+0x43]
c00058d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00058dc:	e8 11 c6 ff ff       	call   c0001ef2 <st_dword>
c00058e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00058e5:	8d 46 24             	lea    eax,[esi+0x24]
c00058e8:	e8 05 c6 ff ff       	call   c0001ef2 <st_dword>
c00058ed:	8d 46 2c             	lea    eax,[esi+0x2c]
c00058f0:	ba 02 00 00 00       	mov    edx,0x2
c00058f5:	e8 f8 c5 ff ff       	call   c0001ef2 <st_dword>
c00058fa:	8d 46 30             	lea    eax,[esi+0x30]
c00058fd:	ba 01 00 00 00       	mov    edx,0x1
c0005902:	e8 e7 c5 ff ff       	call   c0001eee <st_word>
c0005907:	8d 46 32             	lea    eax,[esi+0x32]
c000590a:	ba 06 00 00 00       	mov    edx,0x6
c000590f:	e8 da c5 ff ff       	call   c0001eee <st_word>
c0005914:	8d 46 47             	lea    eax,[esi+0x47]
c0005917:	b9 13 00 00 00       	mov    ecx,0x13
c000591c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005920:	ba 1e f1 01 c0       	mov    edx,0xc001f11e
c0005925:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005929:	eb 2f                	jmp    c000595a <f_mkfs+0x54f>
c000592b:	8d 46 27             	lea    eax,[esi+0x27]
c000592e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005933:	e8 ba c5 ff ff       	call   c0001ef2 <st_dword>
c0005938:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000593d:	8d 46 16             	lea    eax,[esi+0x16]
c0005940:	e8 a9 c5 ff ff       	call   c0001eee <st_word>
c0005945:	8d 46 2b             	lea    eax,[esi+0x2b]
c0005948:	b9 13 00 00 00       	mov    ecx,0x13
c000594d:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005951:	ba 32 f1 01 c0       	mov    edx,0xc001f132
c0005956:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000595a:	e8 96 c5 ff ff       	call   c0001ef5 <mem_cpy>
c000595f:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c0005965:	ba 55 aa 00 00       	mov    edx,0xaa55
c000596a:	89 f8                	mov    eax,edi
c000596c:	e8 7d c5 ff ff       	call   c0001eee <st_word>
c0005971:	6a 01                	push   0x1
c0005973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000597c:	e8 13 c5 ff ff       	call   c0001e94 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	0f 85 11 02 00 00    	jne    c0005b9d <f_mkfs+0x792>
c000598c:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005991:	0f 85 94 00 00 00    	jne    c0005a2b <f_mkfs+0x620>
c0005997:	6a 01                	push   0x1
c0005999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599d:	83 c0 06             	add    eax,0x6
c00059a0:	50                   	push   eax
c00059a1:	56                   	push   esi
c00059a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00059a6:	e8 e9 c4 ff ff       	call   c0001e94 <disk_write>
c00059ab:	b9 00 02 00 00       	mov    ecx,0x200
c00059b0:	31 d2                	xor    edx,edx
c00059b2:	89 f0                	mov    eax,esi
c00059b4:	e8 51 c5 ff ff       	call   c0001f0a <mem_set>
c00059b9:	ba 52 52 61 41       	mov    edx,0x41615252
c00059be:	89 f0                	mov    eax,esi
c00059c0:	e8 2d c5 ff ff       	call   c0001ef2 <st_dword>
c00059c5:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c00059cb:	ba 72 72 41 61       	mov    edx,0x61417272
c00059d0:	e8 1d c5 ff ff       	call   c0001ef2 <st_dword>
c00059d5:	8d 53 ff             	lea    edx,[ebx-0x1]
c00059d8:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c00059de:	e8 0f c5 ff ff       	call   c0001ef2 <st_dword>
c00059e3:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00059e9:	ba 02 00 00 00       	mov    edx,0x2
c00059ee:	e8 ff c4 ff ff       	call   c0001ef2 <st_dword>
c00059f3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f8:	89 f8                	mov    eax,edi
c00059fa:	e8 ef c4 ff ff       	call   c0001eee <st_word>
c00059ff:	6a 01                	push   0x1
c0005a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a05:	83 c0 07             	add    eax,0x7
c0005a08:	50                   	push   eax
c0005a09:	56                   	push   esi
c0005a0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005a0e:	e8 81 c4 ff ff       	call   c0001e94 <disk_write>
c0005a13:	83 c4 20             	add    esp,0x20
c0005a16:	6a 01                	push   0x1
c0005a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1c:	40                   	inc    eax
c0005a1d:	50                   	push   eax
c0005a1e:	56                   	push   esi
c0005a1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a23:	e8 6c c4 ff ff       	call   c0001e94 <disk_write>
c0005a28:	83 c4 10             	add    esp,0x10
c0005a2b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005a2f:	31 d2                	xor    edx,edx
c0005a31:	89 f0                	mov    eax,esi
c0005a33:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0005a37:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3d:	e8 c8 c4 ff ff       	call   c0001f0a <mem_set>
c0005a42:	c1 ef 09             	shr    edi,0x9
c0005a45:	ba f8 ff ff 00       	mov    edx,0xfffff8
c0005a4a:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005a4f:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c0005a54:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005a5c:	0f 44 c2             	cmove  eax,edx
c0005a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a63:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a68:	75 21                	jne    c0005a8b <f_mkfs+0x680>
c0005a6a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a6f:	89 f0                	mov    eax,esi
c0005a71:	e8 7c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a76:	8d 46 04             	lea    eax,[esi+0x4]
c0005a79:	83 ca ff             	or     edx,0xffffffff
c0005a7c:	e8 71 c4 ff ff       	call   c0001ef2 <st_dword>
c0005a81:	8d 46 08             	lea    eax,[esi+0x8]
c0005a84:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005a89:	eb 06                	jmp    c0005a91 <f_mkfs+0x686>
c0005a8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a8f:	89 f0                	mov    eax,esi
c0005a91:	e8 5c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a9a:	39 fb                	cmp    ebx,edi
c0005a9c:	89 f8                	mov    eax,edi
c0005a9e:	0f 46 c3             	cmovbe eax,ebx
c0005aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005aa5:	50                   	push   eax
c0005aa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005aaa:	56                   	push   esi
c0005aab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005aaf:	e8 e0 c3 ff ff       	call   c0001e94 <disk_write>
c0005ab4:	83 c4 10             	add    esp,0x10
c0005ab7:	85 c0                	test   eax,eax
c0005ab9:	0f 85 de 00 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005abf:	b9 00 02 00 00       	mov    ecx,0x200
c0005ac4:	31 d2                	xor    edx,edx
c0005ac6:	89 f0                	mov    eax,esi
c0005ac8:	e8 3d c4 ff ff       	call   c0001f0a <mem_set>
c0005acd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ad1:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005ad5:	29 cb                	sub    ebx,ecx
c0005ad7:	75 c1                	jne    c0005a9a <f_mkfs+0x68f>
c0005ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005add:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005ae5:	40                   	inc    eax
c0005ae6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005aea:	0f 87 73 ff ff ff    	ja     c0005a63 <f_mkfs+0x658>
c0005af0:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005af9:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005b06:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005b0a:	0f 47 df             	cmova  ebx,edi
c0005b0d:	53                   	push   ebx
c0005b0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005b12:	56                   	push   esi
c0005b13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b17:	e8 78 c3 ff ff       	call   c0001e94 <disk_write>
c0005b1c:	83 c4 10             	add    esp,0x10
c0005b1f:	85 c0                	test   eax,eax
c0005b21:	75 7a                	jne    c0005b9d <f_mkfs+0x792>
c0005b23:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005b27:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005b2b:	75 d5                	jne    c0005b02 <f_mkfs+0x6f7>
c0005b2d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005b32:	b1 0c                	mov    cl,0xc
c0005b34:	74 1c                	je     c0005b52 <f_mkfs+0x747>
c0005b36:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005b3e:	b1 06                	mov    cl,0x6
c0005b40:	77 10                	ja     c0005b52 <f_mkfs+0x747>
c0005b42:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005b47:	0f 94 c1             	sete   cl
c0005b4a:	fe c9                	dec    cl
c0005b4c:	80 e1 fd             	and    cl,0xfd
c0005b4f:	80 c1 04             	add    cl,0x4
c0005b52:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005b57:	75 2d                	jne    c0005b86 <f_mkfs+0x77b>
c0005b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005b5d:	83 ec 0c             	sub    esp,0xc
c0005b60:	0f b6 c9             	movzx  ecx,cl
c0005b63:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005b6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005b6f:	56                   	push   esi
c0005b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b74:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005b78:	e8 53 d3 ff ff       	call   c0002ed0 <create_partition>
c0005b7d:	83 c4 10             	add    esp,0x10
c0005b80:	85 c0                	test   eax,eax
c0005b82:	89 c3                	mov    ebx,eax
c0005b84:	75 2e                	jne    c0005bb4 <f_mkfs+0x7a9>
c0005b86:	50                   	push   eax
c0005b87:	31 db                	xor    ebx,ebx
c0005b89:	6a 00                	push   0x0
c0005b8b:	6a 00                	push   0x0
c0005b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b91:	e8 14 c3 ff ff       	call   c0001eaa <disk_ioctl>
c0005b96:	83 c4 10             	add    esp,0x10
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 17                	je     c0005bb4 <f_mkfs+0x7a9>
c0005b9d:	85 ed                	test   ebp,ebp
c0005b9f:	75 0c                	jne    c0005bad <f_mkfs+0x7a2>
c0005ba1:	83 ec 0c             	sub    esp,0xc
c0005ba4:	56                   	push   esi
c0005ba5:	e8 6a 00 00 00       	call   c0005c14 <ff_memfree>
c0005baa:	83 c4 10             	add    esp,0x10
c0005bad:	bb 01 00 00 00       	mov    ebx,0x1
c0005bb2:	eb 42                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bb4:	85 ed                	test   ebp,ebp
c0005bb6:	75 3e                	jne    c0005bf6 <f_mkfs+0x7eb>
c0005bb8:	83 ec 0c             	sub    esp,0xc
c0005bbb:	56                   	push   esi
c0005bbc:	e8 53 00 00 00       	call   c0005c14 <ff_memfree>
c0005bc1:	83 c4 10             	add    esp,0x10
c0005bc4:	eb 30                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bc6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bcb:	0f 85 5f fb ff ff    	jne    c0005730 <f_mkfs+0x325>
c0005bd1:	e9 3c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bd6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bdb:	0f 85 55 fb ff ff    	jne    c0005736 <f_mkfs+0x32b>
c0005be1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005be5:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005beb:	0f 86 4b fa ff ff    	jbe    c000563c <f_mkfs+0x231>
c0005bf1:	e9 1c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bf6:	83 c4 4c             	add    esp,0x4c
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	5b                   	pop    ebx
c0005bfc:	5e                   	pop    esi
c0005bfd:	5f                   	pop    edi
c0005bfe:	5d                   	pop    ebp
c0005bff:	c3                   	ret    

c0005c00 <ff_memalloc>:
c0005c00:	83 ec 1c             	sub    esp,0x1c
c0005c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c0a:	e8 f7 1e 00 00       	call   c0007b06 <malloc>
c0005c0f:	83 c4 1c             	add    esp,0x1c
c0005c12:	c3                   	ret    
c0005c13:	90                   	nop

c0005c14 <ff_memfree>:
c0005c14:	83 ec 1c             	sub    esp,0x1c
c0005c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c1e:	e8 f6 1e 00 00       	call   c0007b19 <free>
c0005c23:	90                   	nop
c0005c24:	83 c4 1c             	add    esp,0x1c
c0005c27:	c3                   	ret    

c0005c28 <ff_uni2oem>:
c0005c28:	83 ec 14             	sub    esp,0x14
c0005c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c2f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c33:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c3a:	c7 44 24 0c 60 f5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f560
c0005c42:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c47:	77 0b                	ja     c0005c54 <ff_uni2oem+0x2c>
c0005c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c4d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c52:	eb 64                	jmp    c0005cb8 <ff_uni2oem+0x90>
c0005c54:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c5c:	77 5a                	ja     c0005cb8 <ff_uni2oem+0x90>
c0005c5e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c62:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c67:	75 4f                	jne    c0005cb8 <ff_uni2oem+0x90>
c0005c69:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c70:	eb 0e                	jmp    c0005c80 <ff_uni2oem+0x58>
c0005c72:	66 90                	xchg   ax,ax
c0005c74:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c79:	40                   	inc    eax
c0005c7a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7f:	90                   	nop
c0005c80:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c85:	83 f8 7f             	cmp    eax,0x7f
c0005c88:	77 1a                	ja     c0005ca4 <ff_uni2oem+0x7c>
c0005c8a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c9f:	75 d3                	jne    c0005c74 <ff_uni2oem+0x4c>
c0005ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ca9:	83 e8 80             	sub    eax,0xffffff80
c0005cac:	0f b7 c0             	movzx  eax,ax
c0005caf:	0f b6 c0             	movzx  eax,al
c0005cb2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb7:	90                   	nop
c0005cb8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbd:	83 c4 14             	add    esp,0x14
c0005cc0:	c3                   	ret    
c0005cc1:	8d 76 00             	lea    esi,[esi+0x0]

c0005cc4 <ff_oem2uni>:
c0005cc4:	83 ec 18             	sub    esp,0x18
c0005cc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ccf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005cd4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005cd8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005cdf:	c7 44 24 10 60 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f560
c0005ce7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cec:	83 f8 7f             	cmp    eax,0x7f
c0005cef:	77 0b                	ja     c0005cfc <ff_oem2uni+0x38>
c0005cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005cf5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cfa:	eb 34                	jmp    c0005d30 <ff_oem2uni+0x6c>
c0005cfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d00:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d05:	75 29                	jne    c0005d30 <ff_oem2uni+0x6c>
c0005d07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d0c:	3d ff 00 00 00       	cmp    eax,0xff
c0005d11:	77 1d                	ja     c0005d30 <ff_oem2uni+0x6c>
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d24:	01 d0                	add    eax,edx
c0005d26:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d29:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2e:	66 90                	xchg   ax,ax
c0005d30:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005d35:	83 c4 18             	add    esp,0x18
c0005d38:	c3                   	ret    
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]

c0005d3c <ff_wtoupper>:
c0005d3c:	83 ec 10             	sub    esp,0x10
c0005d3f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d47:	0f 87 af 01 00 00    	ja     c0005efc <ff_wtoupper+0x1c0>
c0005d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d51:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d56:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d5b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d60:	77 0a                	ja     c0005d6c <ff_wtoupper+0x30>
c0005d62:	b8 60 f3 01 c0       	mov    eax,0xc001f360
c0005d67:	eb 0b                	jmp    c0005d74 <ff_wtoupper+0x38>
c0005d69:	8d 76 00             	lea    esi,[esi+0x0]
c0005d6c:	b8 a0 f2 01 c0       	mov    eax,0xc001f2a0
c0005d71:	8d 76 00             	lea    esi,[esi+0x0]
c0005d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d7c:	8d 50 02             	lea    edx,[eax+0x2]
c0005d7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d83:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d86:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005d8b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 84 58 01 00 00    	je     c0005ef0 <ff_wtoupper+0x1b4>
c0005d98:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d9d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005da2:	39 c2                	cmp    edx,eax
c0005da4:	0f 82 46 01 00 00    	jb     c0005ef0 <ff_wtoupper+0x1b4>
c0005daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dae:	8d 50 02             	lea    edx,[eax+0x2]
c0005db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005db8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dbd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dc2:	c1 e8 08             	shr    eax,0x8
c0005dc5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dca:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dcf:	0f b6 c0             	movzx  eax,al
c0005dd2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dd7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005de1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005de6:	01 ca                	add    edx,ecx
c0005de8:	39 d0                	cmp    eax,edx
c0005dea:	0f 8d dc 00 00 00    	jge    c0005ecc <ff_wtoupper+0x190>
c0005df0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005df5:	83 f8 08             	cmp    eax,0x8
c0005df8:	0f 87 ee 00 00 00    	ja     c0005eec <ff_wtoupper+0x1b0>
c0005dfe:	8b 04 85 60 f2 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0da0]
c0005e05:	ff e0                	jmp    eax
c0005e07:	90                   	nop
c0005e08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e12:	29 c2                	sub    edx,eax
c0005e14:	89 d0                	mov    eax,edx
c0005e16:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e1d:	01 d0                	add    eax,edx
c0005e1f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005e22:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e27:	e9 9c 00 00 00       	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e2c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e35:	89 d1                	mov    ecx,edx
c0005e37:	29 c1                	sub    ecx,eax
c0005e39:	89 c8                	mov    eax,ecx
c0005e3b:	0f b7 c0             	movzx  eax,ax
c0005e3e:	83 e0 01             	and    eax,0x1
c0005e41:	0f b7 c0             	movzx  eax,ax
c0005e44:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e49:	89 d1                	mov    ecx,edx
c0005e4b:	29 c1                	sub    ecx,eax
c0005e4d:	89 c8                	mov    eax,ecx
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	eb 72                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e56:	66 90                	xchg   ax,ax
c0005e58:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e5d:	83 e8 10             	sub    eax,0x10
c0005e60:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e65:	eb 61                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e67:	90                   	nop
c0005e68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e6d:	83 e8 20             	sub    eax,0x20
c0005e70:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e75:	eb 51                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e77:	90                   	nop
c0005e78:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e7d:	83 e8 30             	sub    eax,0x30
c0005e80:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e85:	eb 41                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e87:	90                   	nop
c0005e88:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e8d:	83 e8 1a             	sub    eax,0x1a
c0005e90:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e95:	eb 31                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e97:	90                   	nop
c0005e98:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e9d:	83 c0 08             	add    eax,0x8
c0005ea0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea5:	eb 21                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005ea7:	90                   	nop
c0005ea8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ead:	83 e8 50             	sub    eax,0x50
c0005eb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb5:	eb 11                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005eb7:	90                   	nop
c0005eb8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ebd:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005ec2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec7:	90                   	nop
c0005ec8:	eb 22                	jmp    c0005eec <ff_wtoupper+0x1b0>
c0005eca:	66 90                	xchg   ax,ax
c0005ecc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ed1:	85 c0                	test   eax,eax
c0005ed3:	0f 85 9f fe ff ff    	jne    c0005d78 <ff_wtoupper+0x3c>
c0005ed9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ede:	01 c0                	add    eax,eax
c0005ee0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005ee4:	e9 8f fe ff ff       	jmp    c0005d78 <ff_wtoupper+0x3c>
c0005ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0005eec:	90                   	nop
c0005eed:	8d 76 00             	lea    esi,[esi+0x0]
c0005ef0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0005efc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f00:	83 c4 10             	add    esp,0x10
c0005f03:	c3                   	ret    

c0005f04 <utf2ucs>:
c0005f04:	56                   	push   esi
c0005f05:	31 c9                	xor    ecx,ecx
c0005f07:	53                   	push   ebx
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005f0e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005f12:	89 d8                	mov    eax,ebx
c0005f14:	c1 f8 08             	sar    eax,0x8
c0005f17:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005f1a:	41                   	inc    ecx
c0005f1b:	85 db                	test   ebx,ebx
c0005f1d:	75 eb                	jne    c0005f0a <utf2ucs+0x6>
c0005f1f:	5b                   	pop    ebx
c0005f20:	5e                   	pop    esi
c0005f21:	c3                   	ret    

c0005f22 <ucs2utfn>:
c0005f22:	57                   	push   edi
c0005f23:	83 e1 fe             	and    ecx,0xfffffffe
c0005f26:	56                   	push   esi
c0005f27:	89 d6                	mov    esi,edx
c0005f29:	53                   	push   ebx
c0005f2a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005f2d:	39 f7                	cmp    edi,esi
c0005f2f:	74 5a                	je     c0005f8b <ucs2utfn+0x69>
c0005f31:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005f34:	83 c6 02             	add    esi,0x2
c0005f37:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005f3b:	c1 e3 08             	shl    ebx,0x8
c0005f3e:	09 d3                	or     ebx,edx
c0005f40:	83 fb 3b             	cmp    ebx,0x3b
c0005f43:	74 46                	je     c0005f8b <ucs2utfn+0x69>
c0005f45:	83 fb 7f             	cmp    ebx,0x7f
c0005f48:	88 da                	mov    dl,bl
c0005f4a:	7f 05                	jg     c0005f51 <ucs2utfn+0x2f>
c0005f4c:	88 18                	mov    BYTE PTR [eax],bl
c0005f4e:	40                   	inc    eax
c0005f4f:	eb dc                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f51:	80 e2 3f             	and    dl,0x3f
c0005f54:	89 d9                	mov    ecx,ebx
c0005f56:	c1 f9 06             	sar    ecx,0x6
c0005f59:	80 ca 80             	or     dl,0x80
c0005f5c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f62:	7f 0e                	jg     c0005f72 <ucs2utfn+0x50>
c0005f64:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005f67:	80 c9 c0             	or     cl,0xc0
c0005f6a:	83 c0 02             	add    eax,0x2
c0005f6d:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f70:	eb bb                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f72:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005f75:	c1 fb 0c             	sar    ebx,0xc
c0005f78:	80 e1 3f             	and    cl,0x3f
c0005f7b:	80 cb e0             	or     bl,0xe0
c0005f7e:	80 c9 80             	or     cl,0x80
c0005f81:	88 18                	mov    BYTE PTR [eax],bl
c0005f83:	83 c0 03             	add    eax,0x3
c0005f86:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f89:	eb a2                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f8b:	5b                   	pop    ebx
c0005f8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f8f:	5e                   	pop    esi
c0005f90:	5f                   	pop    edi
c0005f91:	c3                   	ret    

c0005f92 <isjoliet>:
c0005f92:	31 d2                	xor    edx,edx
c0005f94:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f97:	75 22                	jne    c0005fbb <isjoliet+0x29>
c0005f99:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f9d:	75 1c                	jne    c0005fbb <isjoliet+0x29>
c0005f9f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005fa2:	ba 02 00 00 00       	mov    edx,0x2
c0005fa7:	3c 43                	cmp    al,0x43
c0005fa9:	74 10                	je     c0005fbb <isjoliet+0x29>
c0005fab:	3c 45                	cmp    al,0x45
c0005fad:	ba 03 00 00 00       	mov    edx,0x3
c0005fb2:	74 07                	je     c0005fbb <isjoliet+0x29>
c0005fb4:	31 d2                	xor    edx,edx
c0005fb6:	3c 40                	cmp    al,0x40
c0005fb8:	0f 94 c2             	sete   dl
c0005fbb:	89 d0                	mov    eax,edx
c0005fbd:	c3                   	ret    

c0005fbe <htohl_32>:
c0005fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0005fc0:	c3                   	ret    

c0005fc1 <iso_733>:
c0005fc1:	eb fb                	jmp    c0005fbe <htohl_32>

c0005fc3 <bgrad_cache>:
c0005fc3:	83 fa 0e             	cmp    edx,0xe
c0005fc6:	77 16                	ja     c0005fde <bgrad_cache+0x1b>
c0005fc8:	53                   	push   ebx
c0005fc9:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005fcc:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005fd0:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005fd3:	42                   	inc    edx
c0005fd4:	83 fa 0f             	cmp    edx,0xf
c0005fd7:	75 f3                	jne    c0005fcc <bgrad_cache+0x9>
c0005fd9:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005fdc:	5b                   	pop    ebx
c0005fdd:	c3                   	ret    
c0005fde:	c3                   	ret    

c0005fdf <ucscompare>:
c0005fdf:	55                   	push   ebp
c0005fe0:	57                   	push   edi
c0005fe1:	89 c7                	mov    edi,eax
c0005fe3:	56                   	push   esi
c0005fe4:	89 d6                	mov    esi,edx
c0005fe6:	53                   	push   ebx
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	83 ec 1c             	sub    esp,0x1c
c0005fec:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005ff0:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ff5:	c1 e3 08             	shl    ebx,0x8
c0005ff8:	09 c3                	or     ebx,eax
c0005ffa:	39 ca                	cmp    edx,ecx
c0005ffc:	7d 42                	jge    c0006040 <ucscompare+0x61>
c0005ffe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006002:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000600a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000600f:	c1 e0 08             	shl    eax,0x8
c0006012:	09 e8                	or     eax,ebp
c0006014:	83 f8 3b             	cmp    eax,0x3b
c0006017:	74 27                	je     c0006040 <ucscompare+0x61>
c0006019:	83 ec 0c             	sub    esp,0xc
c000601c:	50                   	push   eax
c000601d:	e8 1e aa ff ff       	call   c0000a40 <tolower>
c0006022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006025:	89 c5                	mov    ebp,eax
c0006027:	e8 14 aa ff ff       	call   c0000a40 <tolower>
c000602c:	83 c4 10             	add    esp,0x10
c000602f:	39 c5                	cmp    ebp,eax
c0006031:	75 21                	jne    c0006054 <ucscompare+0x75>
c0006033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006037:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000603b:	83 c2 02             	add    edx,0x2
c000603e:	eb ac                	jmp    c0005fec <ucscompare+0xd>
c0006040:	83 fb 2f             	cmp    ebx,0x2f
c0006043:	0f 95 c0             	setne  al
c0006046:	85 db                	test   ebx,ebx
c0006048:	0f 95 c2             	setne  dl
c000604b:	20 d0                	and    al,dl
c000604d:	0f b6 c0             	movzx  eax,al
c0006050:	f7 d8                	neg    eax
c0006052:	eb 03                	jmp    c0006057 <ucscompare+0x78>
c0006054:	83 c8 ff             	or     eax,0xffffffff
c0006057:	83 c4 1c             	add    esp,0x1c
c000605a:	5b                   	pop    ebx
c000605b:	5e                   	pop    esi
c000605c:	5f                   	pop    edi
c000605d:	5d                   	pop    ebp
c000605e:	c3                   	ret    

c000605f <fncompare>:
c000605f:	55                   	push   ebp
c0006060:	31 ed                	xor    ebp,ebp
c0006062:	57                   	push   edi
c0006063:	89 c7                	mov    edi,eax
c0006065:	56                   	push   esi
c0006066:	89 d6                	mov    esi,edx
c0006068:	53                   	push   ebx
c0006069:	89 cb                	mov    ebx,ecx
c000606b:	83 ec 1c             	sub    esp,0x1c
c000606e:	39 f5                	cmp    ebp,esi
c0006070:	7d 3f                	jge    c00060b1 <fncompare+0x52>
c0006072:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0006076:	3c 3b                	cmp    al,0x3b
c0006078:	74 37                	je     c00060b1 <fncompare+0x52>
c000607a:	3c 2e                	cmp    al,0x2e
c000607c:	75 0e                	jne    c000608c <fncompare+0x2d>
c000607e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006081:	39 e9                	cmp    ecx,ebp
c0006083:	74 2c                	je     c00060b1 <fncompare+0x52>
c0006085:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c000608a:	74 25                	je     c00060b1 <fncompare+0x52>
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	50                   	push   eax
c0006090:	e8 ab a9 ff ff       	call   c0000a40 <tolower>
c0006095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006099:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000609d:	89 04 24             	mov    DWORD PTR [esp],eax
c00060a0:	e8 9b a9 ff ff       	call   c0000a40 <tolower>
c00060a5:	83 c4 10             	add    esp,0x10
c00060a8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00060ac:	75 1a                	jne    c00060c8 <fncompare+0x69>
c00060ae:	45                   	inc    ebp
c00060af:	eb bd                	jmp    c000606e <fncompare+0xf>
c00060b1:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c00060b4:	80 fa 2f             	cmp    dl,0x2f
c00060b7:	0f 95 c0             	setne  al
c00060ba:	84 d2                	test   dl,dl
c00060bc:	0f 95 c2             	setne  dl
c00060bf:	20 d0                	and    al,dl
c00060c1:	0f b6 c0             	movzx  eax,al
c00060c4:	f7 d8                	neg    eax
c00060c6:	eb 03                	jmp    c00060cb <fncompare+0x6c>
c00060c8:	83 c8 ff             	or     eax,0xffffffff
c00060cb:	83 c4 1c             	add    esp,0x1c
c00060ce:	5b                   	pop    ebx
c00060cf:	5e                   	pop    esi
c00060d0:	5f                   	pop    edi
c00060d1:	5d                   	pop    ebp
c00060d2:	c3                   	ret    

c00060d3 <bclear_cache>:
c00060d3:	83 ec 18             	sub    esp,0x18
c00060d6:	68 60 f6 01 c0       	push   0xc001f660
c00060db:	e8 88 30 01 00       	call   c0019168 <iso_kprintf>
c00060e0:	83 c4 10             	add    esp,0x10
c00060e3:	31 c0                	xor    eax,eax
c00060e5:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c00060ec:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060f2:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00060f9:	40                   	inc    eax
c00060fa:	83 f8 10             	cmp    eax,0x10
c00060fd:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006103:	75 e0                	jne    c00060e5 <bclear_cache+0x12>
c0006105:	83 c4 0c             	add    esp,0xc
c0006108:	c3                   	ret    

c0006109 <bclear>:
c0006109:	eb c8                	jmp    c00060d3 <bclear_cache>

c000610b <iso_break_all>:
c000610b:	83 ec 18             	sub    esp,0x18
c000610e:	68 6e f6 01 c0       	push   0xc001f66e
c0006113:	e8 50 30 01 00       	call   c0019168 <iso_kprintf>
c0006118:	83 c4 10             	add    esp,0x10
c000611b:	31 c0                	xor    eax,eax
c000611d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006127:	05 94 00 00 00       	add    eax,0x94
c000612c:	3d 40 09 00 00       	cmp    eax,0x940
c0006131:	75 ea                	jne    c000611d <iso_break_all+0x12>
c0006133:	83 c4 0c             	add    esp,0xc
c0006136:	c3                   	ret    

c0006137 <isoReadDiscSector>:
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006141:	50                   	push   eax
c0006142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614e:	e8 ad 2f 01 00       	call   c0019100 <isoReadDiscSectorHelper>
c0006153:	83 c4 1c             	add    esp,0x1c
c0006156:	c3                   	ret    

c0006157 <bread_cache>:
c0006157:	55                   	push   ebp
c0006158:	57                   	push   edi
c0006159:	89 d7                	mov    edi,edx
c000615b:	56                   	push   esi
c000615c:	ba 0f 00 00 00       	mov    edx,0xf
c0006161:	53                   	push   ebx
c0006162:	89 c6                	mov    esi,eax
c0006164:	83 ec 0c             	sub    esp,0xc
c0006167:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000616a:	39 38                	cmp    DWORD PTR [eax],edi
c000616c:	74 3c                	je     c00061aa <bread_cache+0x53>
c000616e:	4a                   	dec    edx
c000616f:	83 fa ff             	cmp    edx,0xffffffff
c0006172:	75 f3                	jne    c0006167 <bread_cache+0x10>
c0006174:	31 db                	xor    ebx,ebx
c0006176:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006179:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000617c:	74 08                	je     c0006186 <bread_cache+0x2f>
c000617e:	43                   	inc    ebx
c000617f:	83 fb 10             	cmp    ebx,0x10
c0006182:	75 f2                	jne    c0006176 <bread_cache+0x1f>
c0006184:	31 db                	xor    ebx,ebx
c0006186:	50                   	push   eax
c0006187:	6a 01                	push   0x1
c0006189:	57                   	push   edi
c000618a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000618d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006190:	83 c0 04             	add    eax,0x4
c0006193:	50                   	push   eax
c0006194:	e8 9e ff ff ff       	call   c0006137 <isoReadDiscSector>
c0006199:	83 c4 10             	add    esp,0x10
c000619c:	83 c9 ff             	or     ecx,0xffffffff
c000619f:	85 c0                	test   eax,eax
c00061a1:	78 13                	js     c00061b6 <bread_cache+0x5f>
c00061a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061a6:	89 da                	mov    edx,ebx
c00061a8:	89 38                	mov    DWORD PTR [eax],edi
c00061aa:	89 f0                	mov    eax,esi
c00061ac:	e8 12 fe ff ff       	call   c0005fc3 <bgrad_cache>
c00061b1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061b6:	83 c4 0c             	add    esp,0xc
c00061b9:	89 c8                	mov    eax,ecx
c00061bb:	5b                   	pop    ebx
c00061bc:	5e                   	pop    esi
c00061bd:	5f                   	pop    edi
c00061be:	5d                   	pop    ebp
c00061bf:	c3                   	ret    

c00061c0 <biread>:
c00061c0:	89 c2                	mov    edx,eax
c00061c2:	b8 80 40 02 c0       	mov    eax,0xc0024080
c00061c7:	eb 8e                	jmp    c0006157 <bread_cache>

c00061c9 <bdread>:
c00061c9:	89 c2                	mov    edx,eax
c00061cb:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00061d0:	eb 85                	jmp    c0006157 <bread_cache>

c00061d2 <strnicmp>:
c00061d2:	55                   	push   ebp
c00061d3:	57                   	push   edi
c00061d4:	56                   	push   esi
c00061d5:	31 f6                	xor    esi,esi
c00061d7:	53                   	push   ebx
c00061d8:	83 ec 0c             	sub    esp,0xc
c00061db:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00061df:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c00061e3:	74 42                	je     c0006227 <strnicmp+0x55>
c00061e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00061e9:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c00061ed:	84 c0                	test   al,al
c00061ef:	74 36                	je     c0006227 <strnicmp+0x55>
c00061f1:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c00061f4:	84 d2                	test   dl,dl
c00061f6:	74 2f                	je     c0006227 <strnicmp+0x55>
c00061f8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00061fb:	38 d0                	cmp    al,dl
c00061fd:	75 04                	jne    c0006203 <strnicmp+0x31>
c00061ff:	89 ee                	mov    esi,ebp
c0006201:	eb dc                	jmp    c00061df <strnicmp+0xd>
c0006203:	83 ec 0c             	sub    esp,0xc
c0006206:	50                   	push   eax
c0006207:	e8 34 a8 ff ff       	call   c0000a40 <tolower>
c000620c:	89 c7                	mov    edi,eax
c000620e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006212:	89 ee                	mov    esi,ebp
c0006214:	89 04 24             	mov    DWORD PTR [esp],eax
c0006217:	e8 24 a8 ff ff       	call   c0000a40 <tolower>
c000621c:	83 c4 10             	add    esp,0x10
c000621f:	29 c7                	sub    edi,eax
c0006221:	89 f8                	mov    eax,edi
c0006223:	74 ba                	je     c00061df <strnicmp+0xd>
c0006225:	eb 02                	jmp    c0006229 <strnicmp+0x57>
c0006227:	31 c0                	xor    eax,eax
c0006229:	83 c4 0c             	add    esp,0xc
c000622c:	5b                   	pop    ebx
c000622d:	5e                   	pop    esi
c000622e:	5f                   	pop    edi
c000622f:	5d                   	pop    ebp
c0006230:	c3                   	ret    

c0006231 <find_object>:
c0006231:	55                   	push   ebp
c0006232:	89 c5                	mov    ebp,eax
c0006234:	57                   	push   edi
c0006235:	56                   	push   esi
c0006236:	53                   	push   ebx
c0006237:	89 d3                	mov    ebx,edx
c0006239:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000623f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006243:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000624a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	74 0b                	je     c0006262 <find_object+0x31>
c0006257:	8d 44 24 20          	lea    eax,[esp+0x20]
c000625b:	89 ea                	mov    edx,ebp
c000625d:	e8 a2 fc ff ff       	call   c0005f04 <utf2ucs>
c0006262:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000626e:	7e 11                	jle    c0006281 <find_object+0x50>
c0006270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006274:	e8 47 ff ff ff       	call   c00061c0 <biread>
c0006279:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000627d:	85 c0                	test   eax,eax
c000627f:	79 07                	jns    c0006288 <find_object+0x57>
c0006281:	31 db                	xor    ebx,ebx
c0006283:	e9 4c 01 00 00       	jmp    c00063d4 <find_object+0x1a3>
c0006288:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006298:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000629f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062a3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00062a5:	84 c9                	test   cl,cl
c00062a7:	75 0e                	jne    c00062b7 <find_object+0x86>
c00062a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ad:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062b5:	eb b2                	jmp    c0006269 <find_object+0x38>
c00062b7:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c00062bd:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c00062c1:	85 d2                	test   edx,edx
c00062c3:	89 f8                	mov    eax,edi
c00062c5:	74 33                	je     c00062fa <find_object+0xc9>
c00062c7:	8d 43 21             	lea    eax,[ebx+0x21]
c00062ca:	89 f9                	mov    ecx,edi
c00062cc:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062d0:	e8 0a fd ff ff       	call   c0005fdf <ucscompare>
c00062d5:	85 c0                	test   eax,eax
c00062d7:	0f 84 c9 00 00 00    	je     c00063a6 <find_object+0x175>
c00062dd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00062e0:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00062e4:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00062ec:	7f bb                	jg     c00062a9 <find_object+0x78>
c00062ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00062f2:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00062f6:	7f 98                	jg     c0006290 <find_object+0x5f>
c00062f8:	eb af                	jmp    c00062a9 <find_object+0x78>
c00062fa:	0f b6 f1             	movzx  esi,cl
c00062fd:	29 fe                	sub    esi,edi
c00062ff:	24 01                	and    al,0x1
c0006301:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006305:	74 05                	je     c000630c <find_object+0xdb>
c0006307:	83 ee 21             	sub    esi,0x21
c000630a:	eb 5b                	jmp    c0006367 <find_object+0x136>
c000630c:	47                   	inc    edi
c000630d:	83 ee 22             	sub    esi,0x22
c0006310:	eb 55                	jmp    c0006367 <find_object+0x136>
c0006312:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006315:	fe c8                	dec    al
c0006317:	3c 01                	cmp    al,0x1
c0006319:	77 51                	ja     c000636c <find_object+0x13b>
c000631b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000631f:	50                   	push   eax
c0006320:	6a 02                	push   0x2
c0006322:	68 7d f6 01 c0       	push   0xc001f67d
c0006327:	57                   	push   edi
c0006328:	e8 a3 a5 ff ff       	call   c00008d0 <strncmp>
c000632d:	83 c4 10             	add    esp,0x10
c0006330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006334:	85 c0                	test   eax,eax
c0006336:	75 27                	jne    c000635f <find_object+0x12e>
c0006338:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000633c:	50                   	push   eax
c000633d:	8d 47 05             	lea    eax,[edi+0x5]
c0006340:	83 ea 05             	sub    edx,0x5
c0006343:	52                   	push   edx
c0006344:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006348:	50                   	push   eax
c0006349:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000634d:	50                   	push   eax
c000634e:	e8 fd a3 ff ff       	call   c0000750 <strncpy>
c0006353:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0006357:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c000635c:	83 c4 10             	add    esp,0x10
c000635f:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006363:	29 c6                	sub    esi,eax
c0006365:	01 c7                	add    edi,eax
c0006367:	83 fe 03             	cmp    esi,0x3
c000636a:	7f a6                	jg     c0006312 <find_object+0xe1>
c000636c:	85 d2                	test   edx,edx
c000636e:	7e 40                	jle    c00063b0 <find_object+0x17f>
c0006370:	51                   	push   ecx
c0006371:	51                   	push   ecx
c0006372:	6a 2f                	push   0x2f
c0006374:	55                   	push   ebp
c0006375:	e8 16 a5 ff ff       	call   c0000890 <strchr>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	85 c0                	test   eax,eax
c000637f:	74 04                	je     c0006385 <find_object+0x154>
c0006381:	29 e8                	sub    eax,ebp
c0006383:	eb 0c                	jmp    c0006391 <find_object+0x160>
c0006385:	83 ec 0c             	sub    esp,0xc
c0006388:	55                   	push   ebp
c0006389:	e8 92 a2 ff ff       	call   c0000620 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	52                   	push   edx
c0006392:	50                   	push   eax
c0006393:	55                   	push   ebp
c0006394:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006398:	50                   	push   eax
c0006399:	e8 34 fe ff ff       	call   c00061d2 <strnicmp>
c000639e:	83 c4 10             	add    esp,0x10
c00063a1:	e9 2f ff ff ff       	jmp    c00062d5 <find_object+0xa4>
c00063a6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063aa:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ae:	eb 1e                	jmp    c00063ce <find_object+0x19d>
c00063b0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063b4:	8d 43 21             	lea    eax,[ebx+0x21]
c00063b7:	89 e9                	mov    ecx,ebp
c00063b9:	e8 a1 fc ff ff       	call   c000605f <fncompare>
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 17 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063ca:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00063ce:	0f 85 09 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00063da:	89 d8                	mov    eax,ebx
c00063dc:	5b                   	pop    ebx
c00063dd:	5e                   	pop    esi
c00063de:	5f                   	pop    edi
c00063df:	5d                   	pop    ebp
c00063e0:	c3                   	ret    

c00063e1 <find_object_path>:
c00063e1:	55                   	push   ebp
c00063e2:	57                   	push   edi
c00063e3:	89 d7                	mov    edi,edx
c00063e5:	56                   	push   esi
c00063e6:	89 c6                	mov    esi,eax
c00063e8:	53                   	push   ebx
c00063e9:	89 cb                	mov    ebx,ecx
c00063eb:	83 ec 0c             	sub    esp,0xc
c00063ee:	50                   	push   eax
c00063ef:	50                   	push   eax
c00063f0:	6a 2f                	push   0x2f
c00063f2:	56                   	push   esi
c00063f3:	e8 98 a4 ff ff       	call   c0000890 <strchr>
c00063f8:	83 c4 10             	add    esp,0x10
c00063fb:	85 c0                	test   eax,eax
c00063fd:	89 c5                	mov    ebp,eax
c00063ff:	74 3a                	je     c000643b <find_object_path+0x5a>
c0006401:	39 ee                	cmp    esi,ebp
c0006403:	74 31                	je     c0006436 <find_object_path+0x55>
c0006405:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006408:	e8 b4 fb ff ff       	call   c0005fc1 <iso_733>
c000640d:	89 c2                	mov    edx,eax
c000640f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006412:	e8 aa fb ff ff       	call   c0005fc1 <iso_733>
c0006417:	83 ec 0c             	sub    esp,0xc
c000641a:	52                   	push   edx
c000641b:	89 c1                	mov    ecx,eax
c000641d:	ba 01 00 00 00       	mov    edx,0x1
c0006422:	89 f0                	mov    eax,esi
c0006424:	e8 08 fe ff ff       	call   c0006231 <find_object>
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	89 c3                	mov    ebx,eax
c0006430:	75 04                	jne    c0006436 <find_object_path+0x55>
c0006432:	31 db                	xor    ebx,ebx
c0006434:	eb 36                	jmp    c000646c <find_object_path+0x8b>
c0006436:	8d 75 01             	lea    esi,[ebp+0x1]
c0006439:	eb b3                	jmp    c00063ee <find_object_path+0xd>
c000643b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000643e:	74 28                	je     c0006468 <find_object_path+0x87>
c0006440:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006443:	e8 79 fb ff ff       	call   c0005fc1 <iso_733>
c0006448:	89 c2                	mov    edx,eax
c000644a:	8d 43 02             	lea    eax,[ebx+0x2]
c000644d:	e8 6f fb ff ff       	call   c0005fc1 <iso_733>
c0006452:	83 ec 0c             	sub    esp,0xc
c0006455:	52                   	push   edx
c0006456:	89 c1                	mov    ecx,eax
c0006458:	89 fa                	mov    edx,edi
c000645a:	89 f0                	mov    eax,esi
c000645c:	e8 d0 fd ff ff       	call   c0006231 <find_object>
c0006461:	83 c4 10             	add    esp,0x10
c0006464:	89 c3                	mov    ebx,eax
c0006466:	eb 04                	jmp    c000646c <find_object_path+0x8b>
c0006468:	85 ff                	test   edi,edi
c000646a:	74 c6                	je     c0006432 <find_object_path+0x51>
c000646c:	83 c4 0c             	add    esp,0xc
c000646f:	89 d8                	mov    eax,ebx
c0006471:	5b                   	pop    ebx
c0006472:	5e                   	pop    esi
c0006473:	5f                   	pop    edi
c0006474:	5d                   	pop    ebp
c0006475:	c3                   	ret    

c0006476 <stricmp>:
c0006476:	57                   	push   edi
c0006477:	56                   	push   esi
c0006478:	31 f6                	xor    esi,esi
c000647a:	53                   	push   ebx
c000647b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000648a:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000648e:	46                   	inc    esi
c000648f:	50                   	push   eax
c0006490:	e8 8b a5 ff ff       	call   c0000a20 <toupper>
c0006495:	89 04 24             	mov    DWORD PTR [esp],eax
c0006498:	e8 a3 a5 ff ff       	call   c0000a40 <tolower>
c000649d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064a0:	89 c3                	mov    ebx,eax
c00064a2:	e8 79 a5 ff ff       	call   c0000a20 <toupper>
c00064a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00064aa:	e8 91 a5 ff ff       	call   c0000a40 <tolower>
c00064af:	83 c4 10             	add    esp,0x10
c00064b2:	39 c3                	cmp    ebx,eax
c00064b4:	75 04                	jne    c00064ba <stricmp+0x44>
c00064b6:	85 db                	test   ebx,ebx
c00064b8:	75 c1                	jne    c000647b <stricmp+0x5>
c00064ba:	29 c3                	sub    ebx,eax
c00064bc:	89 d8                	mov    eax,ebx
c00064be:	5b                   	pop    ebx
c00064bf:	5e                   	pop    esi
c00064c0:	5f                   	pop    edi
c00064c1:	c3                   	ret    

c00064c2 <iso_open>:
c00064c2:	57                   	push   edi
c00064c3:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c00064c8:	56                   	push   esi
c00064c9:	53                   	push   ebx
c00064ca:	31 db                	xor    ebx,ebx
c00064cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00064d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064d5:	0f 95 c3             	setne  bl
c00064d8:	89 da                	mov    edx,ebx
c00064da:	e8 02 ff ff ff       	call   c00063e1 <find_object_path>
c00064df:	83 ca ff             	or     edx,0xffffffff
c00064e2:	85 c0                	test   eax,eax
c00064e4:	74 5e                	je     c0006544 <iso_open+0x82>
c00064e6:	89 c1                	mov    ecx,eax
c00064e8:	31 d2                	xor    edx,edx
c00064ea:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00064f0:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c00064f7:	75 42                	jne    c000653b <iso_open+0x79>
c00064f9:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006503:	8d 41 02             	lea    eax,[ecx+0x2]
c0006506:	e8 b6 fa ff ff       	call   c0005fc1 <iso_733>
c000650b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006511:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000651b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006521:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006524:	e8 98 fa ff ff       	call   c0005fc1 <iso_733>
c0006529:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006533:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006539:	eb 09                	jmp    c0006544 <iso_open+0x82>
c000653b:	42                   	inc    edx
c000653c:	83 fa 10             	cmp    edx,0x10
c000653f:	75 a9                	jne    c00064ea <iso_open+0x28>
c0006541:	83 ca ff             	or     edx,0xffffffff
c0006544:	5b                   	pop    ebx
c0006545:	89 d0                	mov    eax,edx
c0006547:	5e                   	pop    esi
c0006548:	5f                   	pop    edi
c0006549:	c3                   	ret    

c000654a <iso_close>:
c000654a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000654e:	83 f8 0f             	cmp    eax,0xf
c0006551:	7f 10                	jg     c0006563 <iso_close+0x19>
c0006553:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006559:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c0006563:	e9 6b fb ff ff       	jmp    c00060d3 <bclear_cache>

c0006568 <iso_read>:
c0006568:	55                   	push   ebp
c0006569:	57                   	push   edi
c000656a:	56                   	push   esi
c000656b:	53                   	push   ebx
c000656c:	83 ec 1c             	sub    esp,0x1c
c000656f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006573:	83 fd 0f             	cmp    ebp,0xf
c0006576:	7e 0a                	jle    c0006582 <iso_read+0x1a>
c0006578:	83 c8 ff             	or     eax,0xffffffff
c000657b:	89 c2                	mov    edx,eax
c000657d:	e9 f4 00 00 00       	jmp    c0006676 <iso_read+0x10e>
c0006582:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006588:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000658f:	74 e7                	je     c0006578 <iso_read+0x10>
c0006591:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006597:	85 d2                	test   edx,edx
c0006599:	75 dd                	jne    c0006578 <iso_read+0x10>
c000659b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065a0:	0f 84 cd 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065a6:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ac:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065b2:	29 c3                	sub    ebx,eax
c00065b4:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065b8:	89 d9                	mov    ecx,ebx
c00065ba:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00065bf:	85 c9                	test   ecx,ecx
c00065c1:	0f 84 ac 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065c7:	89 c6                	mov    esi,eax
c00065c9:	bb 00 08 00 00       	mov    ebx,0x800
c00065ce:	c1 e8 0b             	shr    eax,0xb
c00065d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00065d7:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c00065dd:	29 f3                	sub    ebx,esi
c00065df:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00065e5:	75 3f                	jne    c0006626 <iso_read+0xbe>
c00065e7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00065ed:	7e 37                	jle    c0006626 <iso_read+0xbe>
c00065ef:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00065f5:	be 20 00 00 00       	mov    esi,0x20
c00065fa:	7f 05                	jg     c0006601 <iso_read+0x99>
c00065fc:	89 ce                	mov    esi,ecx
c00065fe:	c1 fe 0b             	sar    esi,0xb
c0006601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006605:	89 f3                	mov    ebx,esi
c0006607:	52                   	push   edx
c0006608:	56                   	push   esi
c0006609:	50                   	push   eax
c000660a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000660e:	c1 e3 0b             	shl    ebx,0xb
c0006611:	e8 21 fb ff ff       	call   c0006137 <isoReadDiscSector>
c0006616:	83 c4 10             	add    esp,0x10
c0006619:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000661d:	85 c0                	test   eax,eax
c000661f:	7f 3d                	jg     c000665e <iso_read+0xf6>
c0006621:	e9 52 ff ff ff       	jmp    c0006578 <iso_read+0x10>
c0006626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000662a:	39 d9                	cmp    ecx,ebx
c000662c:	0f 4e d9             	cmovle ebx,ecx
c000662f:	e8 95 fb ff ff       	call   c00061c9 <bdread>
c0006634:	85 c0                	test   eax,eax
c0006636:	0f 88 3c ff ff ff    	js     c0006578 <iso_read+0x10>
c000663c:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006643:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006649:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000664d:	25 ff 07 00 00       	and    eax,0x7ff
c0006652:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006656:	89 d9                	mov    ecx,ebx
c0006658:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000665a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000665e:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006662:	01 da                	add    edx,ebx
c0006664:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c000666a:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000666e:	e9 28 ff ff ff       	jmp    c000659b <iso_read+0x33>
c0006673:	89 d0                	mov    eax,edx
c0006675:	99                   	cdq    
c0006676:	83 c4 1c             	add    esp,0x1c
c0006679:	5b                   	pop    ebx
c000667a:	5e                   	pop    esi
c000667b:	5f                   	pop    edi
c000667c:	5d                   	pop    ebp
c000667d:	c3                   	ret    

c000667e <iso_seek>:
c000667e:	55                   	push   ebp
c000667f:	83 c8 ff             	or     eax,0xffffffff
c0006682:	57                   	push   edi
c0006683:	89 c2                	mov    edx,eax
c0006685:	56                   	push   esi
c0006686:	53                   	push   ebx
c0006687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000668b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000668f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006693:	83 fe 0f             	cmp    esi,0xf
c0006696:	7f 65                	jg     c00066fd <iso_seek+0x7f>
c0006698:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000669e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066a5:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066ab:	74 50                	je     c00066fd <iso_seek+0x7f>
c00066ad:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066b4:	75 47                	jne    c00066fd <iso_seek+0x7f>
c00066b6:	83 fb 01             	cmp    ebx,0x1
c00066b9:	74 0e                	je     c00066c9 <iso_seek+0x4b>
c00066bb:	83 fb 02             	cmp    ebx,0x2
c00066be:	74 0e                	je     c00066ce <iso_seek+0x50>
c00066c0:	85 db                	test   ebx,ebx
c00066c2:	75 39                	jne    c00066fd <iso_seek+0x7f>
c00066c4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00066c7:	eb 0d                	jmp    c00066d6 <iso_seek+0x58>
c00066c9:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00066cc:	eb 08                	jmp    c00066d6 <iso_seek+0x58>
c00066ce:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00066d1:	01 f8                	add    eax,edi
c00066d3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00066d6:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00066dc:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c00066e2:	05 40 45 02 c0       	add    eax,0xc0024540
c00066e7:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00066ea:	76 03                	jbe    c00066ef <iso_seek+0x71>
c00066ec:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00066ef:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00066f5:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c00066fb:	31 d2                	xor    edx,edx
c00066fd:	5b                   	pop    ebx
c00066fe:	5e                   	pop    esi
c00066ff:	5f                   	pop    edi
c0006700:	5d                   	pop    ebp
c0006701:	c3                   	ret    

c0006702 <iso_tell>:
c0006702:	53                   	push   ebx
c0006703:	83 c8 ff             	or     eax,0xffffffff
c0006706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000670a:	89 c2                	mov    edx,eax
c000670c:	83 f9 0f             	cmp    ecx,0xf
c000670f:	7f 20                	jg     c0006731 <iso_tell+0x2f>
c0006711:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006717:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000671e:	74 11                	je     c0006731 <iso_tell+0x2f>
c0006720:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006727:	75 08                	jne    c0006731 <iso_tell+0x2f>
c0006729:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000672f:	31 d2                	xor    edx,edx
c0006731:	5b                   	pop    ebx
c0006732:	c3                   	ret    

c0006733 <iso_total>:
c0006733:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006737:	83 c8 ff             	or     eax,0xffffffff
c000673a:	83 fa 0f             	cmp    edx,0xf
c000673d:	7f 1e                	jg     c000675d <iso_total+0x2a>
c000673f:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006745:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000674c:	74 0f                	je     c000675d <iso_total+0x2a>
c000674e:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006755:	75 06                	jne    c000675d <iso_total+0x2a>
c0006757:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000675d:	c3                   	ret    

c000675e <fn_postprocess>:
c000675e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006762:	89 d0                	mov    eax,edx
c0006764:	8a 08                	mov    cl,BYTE PTR [eax]
c0006766:	84 c9                	test   cl,cl
c0006768:	74 08                	je     c0006772 <fn_postprocess+0x14>
c000676a:	80 f9 3b             	cmp    cl,0x3b
c000676d:	74 03                	je     c0006772 <fn_postprocess+0x14>
c000676f:	40                   	inc    eax
c0006770:	eb f2                	jmp    c0006764 <fn_postprocess+0x6>
c0006772:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006775:	39 d0                	cmp    eax,edx
c0006777:	76 0a                	jbe    c0006783 <fn_postprocess+0x25>
c0006779:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000677d:	75 04                	jne    c0006783 <fn_postprocess+0x25>
c000677f:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006783:	c3                   	ret    

c0006784 <iso_readdir>:
c0006784:	55                   	push   ebp
c0006785:	57                   	push   edi
c0006786:	56                   	push   esi
c0006787:	53                   	push   ebx
c0006788:	83 ec 1c             	sub    esp,0x1c
c000678b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000678f:	83 fb 0f             	cmp    ebx,0xf
c0006792:	7f 28                	jg     c00067bc <iso_readdir+0x38>
c0006794:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000679a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067a1:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067a7:	74 13                	je     c00067bc <iso_readdir+0x38>
c00067a9:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067ad:	74 0d                	je     c00067bc <iso_readdir+0x38>
c00067af:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067b6:	0f 84 b1 00 00 00    	je     c000686d <iso_readdir+0xe9>
c00067bc:	83 ec 0c             	sub    esp,0xc
c00067bf:	68 80 f6 01 c0       	push   0xc001f680
c00067c4:	e8 9f 29 01 00       	call   c0019168 <iso_kprintf>
c00067c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00067cc:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067d2:	e8 ad 29 01 00       	call   c0019184 <iso_kprintfd>
c00067d7:	c7 04 24 85 f6 01 c0 	mov    DWORD PTR [esp],0xc001f685
c00067de:	e8 85 29 01 00       	call   c0019168 <iso_kprintf>
c00067e3:	58                   	pop    eax
c00067e4:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c00067ea:	e8 95 29 01 00       	call   c0019184 <iso_kprintfd>
c00067ef:	c7 04 24 8b f6 01 c0 	mov    DWORD PTR [esp],0xc001f68b
c00067f6:	e8 6d 29 01 00       	call   c0019168 <iso_kprintf>
c00067fb:	58                   	pop    eax
c00067fc:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006802:	e8 7d 29 01 00       	call   c0019184 <iso_kprintfd>
c0006807:	c7 04 24 91 f6 01 c0 	mov    DWORD PTR [esp],0xc001f691
c000680e:	e8 55 29 01 00       	call   c0019168 <iso_kprintf>
c0006813:	58                   	pop    eax
c0006814:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000681a:	e8 65 29 01 00       	call   c0019184 <iso_kprintfd>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	eb 42                	jmp    c0006866 <iso_readdir+0xe2>
c0006824:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006827:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000682e:	89 d1                	mov    ecx,edx
c0006830:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006836:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000683a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000683d:	75 35                	jne    c0006874 <iso_readdir+0xf0>
c000683f:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006845:	81 c2 00 08 00 00    	add    edx,0x800
c000684b:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000684e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006851:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006854:	73 1e                	jae    c0006874 <iso_readdir+0xf0>
c0006856:	8b 07                	mov    eax,DWORD PTR [edi]
c0006858:	c1 ea 0b             	shr    edx,0xb
c000685b:	01 d0                	add    eax,edx
c000685d:	e8 5e f9 ff ff       	call   c00061c0 <biread>
c0006862:	85 c0                	test   eax,eax
c0006864:	79 be                	jns    c0006824 <iso_readdir+0xa0>
c0006866:	31 c0                	xor    eax,eax
c0006868:	e9 6d 01 00 00       	jmp    c00069da <iso_readdir+0x256>
c000686d:	31 f6                	xor    esi,esi
c000686f:	83 c8 ff             	or     eax,0xffffffff
c0006872:	eb da                	jmp    c000684e <iso_readdir+0xca>
c0006874:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c000687a:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c0006880:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c0006886:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006889:	73 db                	jae    c0006866 <iso_readdir+0xe2>
c000688b:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000688f:	75 34                	jne    c00068c5 <iso_readdir+0x141>
c0006891:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006895:	75 2e                	jne    c00068c5 <iso_readdir+0x141>
c0006897:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000689a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068a1:	01 f9                	add    ecx,edi
c00068a3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068a6:	89 c8                	mov    eax,ecx
c00068a8:	25 ff 07 00 00       	and    eax,0x7ff
c00068ad:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068b2:	01 c8                	add    eax,ecx
c00068b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068b7:	25 ff 07 00 00       	and    eax,0x7ff
c00068bc:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00068c0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068c3:	74 a1                	je     c0006866 <iso_readdir+0xe2>
c00068c5:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00068cb:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00068cf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00068d6:	8d 56 21             	lea    edx,[esi+0x21]
c00068d9:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c00068df:	74 0c                	je     c00068ed <iso_readdir+0x169>
c00068e1:	89 e8                	mov    eax,ebp
c00068e3:	e8 3a f6 ff ff       	call   c0005f22 <ucs2utfn>
c00068e8:	e9 b4 00 00 00       	jmp    c00069a1 <iso_readdir+0x21d>
c00068ed:	50                   	push   eax
c00068ee:	51                   	push   ecx
c00068ef:	52                   	push   edx
c00068f0:	55                   	push   ebp
c00068f1:	e8 5a 9e ff ff       	call   c0000750 <strncpy>
c00068f6:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00068fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00068fd:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006905:	e8 54 fe ff ff       	call   c000675e <fn_postprocess>
c000690a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000690e:	83 c4 10             	add    esp,0x10
c0006911:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006914:	89 d1                	mov    ecx,edx
c0006916:	80 e1 01             	and    cl,0x1
c0006919:	29 d0                	sub    eax,edx
c000691b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000691f:	84 c9                	test   cl,cl
c0006921:	74 05                	je     c0006928 <iso_readdir+0x1a4>
c0006923:	83 e8 21             	sub    eax,0x21
c0006926:	eb 04                	jmp    c000692c <iso_readdir+0x1a8>
c0006928:	42                   	inc    edx
c0006929:	83 e8 22             	sub    eax,0x22
c000692c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006930:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000693a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000693f:	7e 60                	jle    c00069a1 <iso_readdir+0x21d>
c0006941:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006944:	fe c8                	dec    al
c0006946:	3c 01                	cmp    al,0x1
c0006948:	77 57                	ja     c00069a1 <iso_readdir+0x21d>
c000694a:	51                   	push   ecx
c000694b:	6a 02                	push   0x2
c000694d:	68 7d f6 01 c0       	push   0xc001f67d
c0006952:	52                   	push   edx
c0006953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006957:	e8 74 9f ff ff       	call   c00008d0 <strncmp>
c000695c:	83 c4 10             	add    esp,0x10
c000695f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006963:	85 c0                	test   eax,eax
c0006965:	75 2e                	jne    c0006995 <iso_readdir+0x211>
c0006967:	50                   	push   eax
c0006968:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000696c:	83 e8 05             	sub    eax,0x5
c000696f:	50                   	push   eax
c0006970:	8d 42 05             	lea    eax,[edx+0x5]
c0006973:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006977:	50                   	push   eax
c0006978:	55                   	push   ebp
c0006979:	e8 d2 9d ff ff       	call   c0000750 <strncpy>
c000697e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006982:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000698d:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006995:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006999:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000699d:	01 c2                	add    edx,eax
c000699f:	eb 99                	jmp    c000693a <iso_readdir+0x1b6>
c00069a1:	83 c8 ff             	or     eax,0xffffffff
c00069a4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069a8:	89 c2                	mov    edx,eax
c00069aa:	75 0a                	jne    c00069b6 <iso_readdir+0x232>
c00069ac:	8d 46 0a             	lea    eax,[esi+0xa]
c00069af:	e8 0d f6 ff ff       	call   c0005fc1 <iso_733>
c00069b4:	31 d2                	xor    edx,edx
c00069b6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069bc:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069c2:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c00069c8:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c00069ce:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c00069d1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c00069d4:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c00069da:	83 c4 1c             	add    esp,0x1c
c00069dd:	5b                   	pop    ebx
c00069de:	5e                   	pop    esi
c00069df:	5f                   	pop    edi
c00069e0:	5d                   	pop    ebp
c00069e1:	c3                   	ret    

c00069e2 <iso_reset>:
c00069e2:	83 ec 18             	sub    esp,0x18
c00069e5:	68 9a f6 01 c0       	push   0xc001f69a
c00069ea:	e8 79 27 01 00       	call   c0019168 <iso_kprintf>
c00069ef:	e8 17 f7 ff ff       	call   c000610b <iso_break_all>
c00069f4:	e8 10 f7 ff ff       	call   c0006109 <bclear>
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 1c             	add    esp,0x1c
c00069fe:	c3                   	ret    

c00069ff <init_percd>:
c00069ff:	57                   	push   edi
c0006a00:	56                   	push   esi
c0006a01:	53                   	push   ebx
c0006a02:	bb 01 00 00 00       	mov    ebx,0x1
c0006a07:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a0b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a10:	e8 cd ff ff ff       	call   c00069e2 <iso_reset>
c0006a15:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a1f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a24:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a28:	e8 93 f7 ff ff       	call   c00061c0 <biread>
c0006a2d:	85 c0                	test   eax,eax
c0006a2f:	89 c6                	mov    esi,eax
c0006a31:	0f 88 ba 00 00 00    	js     c0006af1 <init_percd+0xf2>
c0006a37:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a3e:	52                   	push   edx
c0006a3f:	6a 06                	push   0x6
c0006a41:	68 a5 f6 01 c0       	push   0xc001f6a5
c0006a46:	83 c0 04             	add    eax,0x4
c0006a49:	50                   	push   eax
c0006a4a:	e8 31 99 ff ff       	call   c0000380 <memcmp>
c0006a4f:	83 c4 10             	add    esp,0x10
c0006a52:	85 c0                	test   eax,eax
c0006a54:	74 08                	je     c0006a5e <init_percd+0x5f>
c0006a56:	43                   	inc    ebx
c0006a57:	83 fb 04             	cmp    ebx,0x4
c0006a5a:	75 c3                	jne    c0006a1f <init_percd+0x20>
c0006a5c:	eb 1a                	jmp    c0006a78 <init_percd+0x79>
c0006a5e:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a65:	83 c0 5c             	add    eax,0x5c
c0006a68:	e8 25 f5 ff ff       	call   c0005f92 <isjoliet>
c0006a6d:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006a72:	85 c0                	test   eax,eax
c0006a74:	74 e0                	je     c0006a56 <init_percd+0x57>
c0006a76:	eb 3e                	jmp    c0006ab6 <init_percd+0xb7>
c0006a78:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006a7f:	75 35                	jne    c0006ab6 <init_percd+0xb7>
c0006a81:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a86:	83 c0 10             	add    eax,0x10
c0006a89:	e8 32 f7 ff ff       	call   c00061c0 <biread>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	89 c6                	mov    esi,eax
c0006a92:	78 5f                	js     c0006af3 <init_percd+0xf4>
c0006a94:	50                   	push   eax
c0006a95:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a9c:	83 cb ff             	or     ebx,0xffffffff
c0006a9f:	6a 06                	push   0x6
c0006aa1:	68 ac f6 01 c0       	push   0xc001f6ac
c0006aa6:	83 c0 04             	add    eax,0x4
c0006aa9:	50                   	push   eax
c0006aaa:	e8 d1 98 ff ff       	call   c0000380 <memcmp>
c0006aaf:	83 c4 10             	add    esp,0x10
c0006ab2:	85 c0                	test   eax,eax
c0006ab4:	75 3d                	jne    c0006af3 <init_percd+0xf4>
c0006ab6:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006abd:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006ac2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ac7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006acd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006acf:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	e8 e6 f4 ff ff       	call   c0005fc1 <iso_733>
c0006adb:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006ae0:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006ae5:	e8 d7 f4 ff ff       	call   c0005fc1 <iso_733>
c0006aea:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006aef:	eb 02                	jmp    c0006af3 <init_percd+0xf4>
c0006af1:	89 c3                	mov    ebx,eax
c0006af3:	89 d8                	mov    eax,ebx
c0006af5:	5b                   	pop    ebx
c0006af6:	5e                   	pop    esi
c0006af7:	5f                   	pop    edi
c0006af8:	c3                   	ret    

c0006af9 <iso_ioctl>:
c0006af9:	83 ec 18             	sub    esp,0x18
c0006afc:	68 b3 f6 01 c0       	push   0xc001f6b3
c0006b01:	e8 62 26 01 00       	call   c0019168 <iso_kprintf>
c0006b06:	e8 d7 fe ff ff       	call   c00069e2 <iso_reset>
c0006b0b:	31 c0                	xor    eax,eax
c0006b0d:	83 c4 1c             	add    esp,0x1c
c0006b10:	c3                   	ret    

c0006b11 <fs_iso9660_init>:
c0006b11:	53                   	push   ebx
c0006b12:	31 db                	xor    ebx,ebx
c0006b14:	83 ec 14             	sub    esp,0x14
c0006b17:	68 be f6 01 c0       	push   0xc001f6be
c0006b1c:	e8 47 26 01 00       	call   c0019168 <iso_kprintf>
c0006b21:	83 c4 0c             	add    esp,0xc
c0006b24:	68 40 09 00 00       	push   0x940
c0006b29:	6a 00                	push   0x0
c0006b2b:	68 40 45 02 c0       	push   0xc0024540
c0006b30:	e8 4b 9a ff ff       	call   c0000580 <memset>
c0006b35:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b46:	e8 bb 0f 00 00       	call   c0007b06 <malloc>
c0006b4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b52:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b57:	e8 aa 0f 00 00       	call   c0007b06 <malloc>
c0006b5c:	83 c4 10             	add    esp,0x10
c0006b5f:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b64:	83 ec 0c             	sub    esp,0xc
c0006b67:	68 04 08 00 00       	push   0x804
c0006b6c:	e8 95 0f 00 00       	call   c0007b06 <malloc>
c0006b71:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006b78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b7e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006b85:	e8 7c 0f 00 00       	call   c0007b06 <malloc>
c0006b8a:	83 c4 10             	add    esp,0x10
c0006b8d:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b94:	43                   	inc    ebx
c0006b95:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b9b:	83 fb 10             	cmp    ebx,0x10
c0006b9e:	75 c4                	jne    c0006b64 <fs_iso9660_init+0x53>
c0006ba0:	83 c4 08             	add    esp,0x8
c0006ba3:	31 c0                	xor    eax,eax
c0006ba5:	5b                   	pop    ebx
c0006ba6:	c3                   	ret    

c0006ba7 <fs_iso9660_shutdown>:
c0006ba7:	53                   	push   ebx
c0006ba8:	31 db                	xor    ebx,ebx
c0006baa:	83 ec 08             	sub    esp,0x8
c0006bad:	83 ec 0c             	sub    esp,0xc
c0006bb0:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bb7:	e8 5d 0f 00 00       	call   c0007b19 <free>
c0006bbc:	58                   	pop    eax
c0006bbd:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006bc4:	43                   	inc    ebx
c0006bc5:	e8 4f 0f 00 00       	call   c0007b19 <free>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 fb 10             	cmp    ebx,0x10
c0006bd0:	75 db                	jne    c0006bad <fs_iso9660_shutdown+0x6>
c0006bd2:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006bd7:	85 c0                	test   eax,eax
c0006bd9:	74 0c                	je     c0006be7 <fs_iso9660_shutdown+0x40>
c0006bdb:	83 ec 0c             	sub    esp,0xc
c0006bde:	50                   	push   eax
c0006bdf:	e8 35 0f 00 00       	call   c0007b19 <free>
c0006be4:	83 c4 10             	add    esp,0x10
c0006be7:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006bec:	85 c0                	test   eax,eax
c0006bee:	74 0c                	je     c0006bfc <fs_iso9660_shutdown+0x55>
c0006bf0:	83 ec 0c             	sub    esp,0xc
c0006bf3:	50                   	push   eax
c0006bf4:	e8 20 0f 00 00       	call   c0007b19 <free>
c0006bf9:	83 c4 10             	add    esp,0x10
c0006bfc:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c06:	31 c0                	xor    eax,eax
c0006c08:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c12:	83 c4 08             	add    esp,0x8
c0006c15:	5b                   	pop    ebx
c0006c16:	c3                   	ret    
c0006c17:	90                   	nop

c0006c18 <Computer::close(int, int, void*)>:
c0006c18:	83 ec 1c             	sub    esp,0x1c
c0006c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006c1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c23:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006c2b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006c2f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c33:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c3c:	e8 7f 53 00 00       	call   c000bfc0 <Device::closeAll()>
c0006c41:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c47:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c52:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006c56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006c5a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006c5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c62:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c6d:	83 c4 1c             	add    esp,0x1c
c0006c70:	ff e0                	jmp    eax

c0006c72 <Krnl::firstTask()>:
c0006c72:	53                   	push   ebx
c0006c73:	83 ec 28             	sub    esp,0x28
c0006c76:	fb                   	sti    
c0006c77:	c7 04 24 cf f6 01 c0 	mov    DWORD PTR [esp],0xc001f6cf
c0006c7e:	e8 ce 94 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006c83:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006c8a:	e8 77 0e 00 00       	call   c0007b06 <malloc>
c0006c8f:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c95:	b9 01 00 00 00       	mov    ecx,0x1
c0006c9a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ca2:	ba e8 f6 01 c0       	mov    edx,0xc001f6e8
c0006ca7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006cab:	89 c3                	mov    ebx,eax
c0006cad:	31 c0                	xor    eax,eax
c0006caf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cb6:	e8 b5 df 00 00       	call   c0014c70 <Process::Process(bool, char const*, Process*, char**)>
c0006cbb:	b8 ff 00 00 00       	mov    eax,0xff
c0006cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cc4:	31 c0                	xor    eax,eax
c0006cc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cca:	b8 37 75 00 c0       	mov    eax,0xc0007537
c0006ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cd2:	31 db                	xor    ebx,ebx
c0006cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd8:	e8 ab e1 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c0006cdd:	b8 7a 00 00 00       	mov    eax,0x7a
c0006ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce6:	31 c0                	xor    eax,eax
c0006ce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cec:	b8 b4 58 01 c0       	mov    eax,0xc00158b4
c0006cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006cfd:	e8 86 e1 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c0006d02:	b2 01                	mov    dl,0x1
c0006d04:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006d0a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0f:	e8 68 9c 00 00       	call   c001097c <KeInitRand()>
c0006d14:	c7 04 24 e4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e4
c0006d1b:	e8 31 94 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006d20:	e8 4c ef 00 00       	call   c0015c71 <Vm::initialise8086()>
c0006d25:	e8 fd 40 00 00       	call   c000ae27 <Fs::initVFS()>
c0006d2a:	c7 04 24 f5 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6f5
c0006d31:	e8 1b 94 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006d36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d3b:	31 c9                	xor    ecx,ecx
c0006d3d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006d49:	31 c9                	xor    ecx,ecx
c0006d4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006d4f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d53:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006d58:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d5b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d5e:	c7 04 24 e4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e4
c0006d65:	e8 e7 93 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006d6a:	e8 b9 98 00 00       	call   c0010628 <Krnl::loadSystemEnv()>
c0006d6f:	e8 16 9b 00 00       	call   c001088a <Krnl::setupPowerManager()>
c0006d74:	b8 0f f7 01 c0       	mov    eax,0xc001f70f
c0006d79:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d81:	c7 04 24 18 f7 01 c0 	mov    DWORD PTR [esp],0xc001f718
c0006d88:	e8 c6 c1 00 00       	call   c0012f53 <Reg::readIntWithDefault(char*, char*, int)>
c0006d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d90:	e8 8f 4b 00 00       	call   c000b924 <User::loadClockSettings(int)>
c0006d95:	c7 04 24 08 f8 01 c0 	mov    DWORD PTR [esp],0xc001f808
c0006d9c:	e8 b0 93 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006da1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006da6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0006daf:	e8 0a 52 00 00       	call   c000bfbe <Device::loadDriversForAll()>
c0006db4:	c7 04 24 20 f7 01 c0 	mov    DWORD PTR [esp],0xc001f720
c0006dbb:	e8 91 93 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0006dc0:	b8 01 00 00 00       	mov    eax,0x1
c0006dc5:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006dcf:	c7 04 24 31 f7 01 c0 	mov    DWORD PTR [esp],0xc001f731
c0006dd6:	e8 82 d8 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c0006ddb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006de2:	e8 b2 da 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c0006de7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006dee:	e8 c9 e4 00 00       	call   c00152bc <blockTask(TaskState)>
c0006df3:	eb f2                	jmp    c0006de7 <Krnl::firstTask()+0x175>
c0006df5:	90                   	nop

c0006df6 <Computer::Computer()>:
c0006df6:	83 ec 1c             	sub    esp,0x1c
c0006df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfd:	c7 44 24 04 4d f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f74d
c0006e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e08:	e8 2d 52 00 00       	call   c000c03a <Device::Device(char const*)>
c0006e0d:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c0006e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e16:	89 10                	mov    DWORD PTR [eax],edx
c0006e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e1c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e38:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006e3f:	80 ca 04             	or     dl,0x4
c0006e42:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e53:	0f b6 d0             	movzx  edx,al
c0006e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e65:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e6c:	0f b6 d0             	movzx  edx,al
c0006e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e7c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e83:	88 c1                	mov    cl,al
c0006e85:	fe c1                	inc    cl
c0006e87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e91:	0f b6 d0             	movzx  edx,al
c0006e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e98:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e9d:	80 e1 3f             	and    cl,0x3f
c0006ea0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ea4:	90                   	nop
c0006ea5:	83 c4 1c             	add    esp,0x1c
c0006ea8:	c3                   	ret    
c0006ea9:	90                   	nop

c0006eaa <Computer::setBootMessage(char const*)>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::detectFeatures()>:
c0006eac:	55                   	push   ebp
c0006ead:	57                   	push   edi
c0006eae:	56                   	push   esi
c0006eaf:	53                   	push   ebx
c0006eb0:	83 ec 3c             	sub    esp,0x3c
c0006eb3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006eb7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ec1:	e8 33 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ec6:	85 c0                	test   eax,eax
c0006ec8:	0f 95 c0             	setne  al
c0006ecb:	00 c0                	add    al,al
c0006ecd:	88 c2                	mov    dl,al
c0006ecf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006ed6:	24 fd                	and    al,0xfd
c0006ed8:	08 d0                	or     al,dl
c0006eda:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee0:	24 02                	and    al,0x2
c0006ee2:	75 48                	jne    c0006f2c <Computer::detectFeatures()+0x80>
c0006ee4:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006eeb:	74 07                	je     c0006ef4 <Computer::detectFeatures()+0x48>
c0006eed:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ef4:	e8 6d 71 01 00       	call   c001e066 <x87Detect>
c0006ef9:	24 01                	and    al,0x1
c0006efb:	c0 e0 04             	shl    al,0x4
c0006efe:	88 c2                	mov    dl,al
c0006f00:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f07:	24 ef                	and    al,0xef
c0006f09:	08 d0                	or     al,dl
c0006f0b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f11:	88 c2                	mov    dl,al
c0006f13:	80 e2 10             	and    dl,0x10
c0006f16:	0f 85 34 01 00 00    	jne    c0007050 <Computer::detectFeatures()+0x1a4>
c0006f1c:	84 c0                	test   al,al
c0006f1e:	0f 88 4f 01 00 00    	js     c0007073 <Computer::detectFeatures()+0x1c7>
c0006f24:	83 c4 3c             	add    esp,0x3c
c0006f27:	5b                   	pop    ebx
c0006f28:	5e                   	pop    esi
c0006f29:	5f                   	pop    edi
c0006f2a:	5d                   	pop    ebp
c0006f2b:	c3                   	ret    
c0006f2c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006f33:	e8 72 87 00 00       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c0006f38:	24 01                	and    al,0x1
c0006f3a:	c0 e0 03             	shl    al,0x3
c0006f3d:	88 c2                	mov    dl,al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	24 f7                	and    al,0xf7
c0006f48:	08 d0                	or     al,dl
c0006f4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f50:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f57:	e8 4e 87 00 00       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c0006f5c:	24 01                	and    al,0x1
c0006f5e:	88 c2                	mov    dl,al
c0006f60:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f67:	24 fe                	and    al,0xfe
c0006f69:	08 d0                	or     al,dl
c0006f6b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f71:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f78:	e8 2d 87 00 00       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c0006f7d:	c0 e0 07             	shl    al,0x7
c0006f80:	88 c2                	mov    dl,al
c0006f82:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f89:	24 7f                	and    al,0x7f
c0006f8b:	08 d0                	or     al,dl
c0006f8d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f93:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9a:	e8 0b 87 00 00       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c0006f9f:	24 01                	and    al,0x1
c0006fa1:	c0 e0 05             	shl    al,0x5
c0006fa4:	88 c2                	mov    dl,al
c0006fa6:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fad:	24 df                	and    al,0xdf
c0006faf:	08 d0                	or     al,dl
c0006fb1:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fbb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc1:	0f 84 d1 00 00 00    	je     c0007098 <Computer::detectFeatures()+0x1ec>
c0006fc7:	24 fe                	and    al,0xfe
c0006fc9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fd6:	88 c2                	mov    dl,al
c0006fd8:	80 e2 09             	and    dl,0x9
c0006fdb:	fe ca                	dec    dl
c0006fdd:	75 08                	jne    c0006fe7 <Computer::detectFeatures()+0x13b>
c0006fdf:	24 fe                	and    al,0xfe
c0006fe1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006feb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ff3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006ff7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006ffb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006fff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007003:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007007:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c000700e:	e8 13 86 00 00       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007013:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0007017:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c000701f:	0f 86 bf fe ff ff    	jbe    c0006ee4 <Computer::detectFeatures()+0x38>
c0007025:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007029:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000702d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007031:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007035:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c000703c:	e8 e5 85 00 00       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007041:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000704b:	e9 94 fe ff ff       	jmp    c0006ee4 <Computer::detectFeatures()+0x38>
c0007050:	e8 cb 6f 01 00       	call   c001e020 <absolutelyNoChanceInHell>
c0007055:	88 c2                	mov    dl,al
c0007057:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000705e:	c0 e2 07             	shl    dl,0x7
c0007061:	24 7f                	and    al,0x7f
c0007063:	08 d0                	or     al,dl
c0007065:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000706b:	84 c0                	test   al,al
c000706d:	0f 89 b1 fe ff ff    	jns    c0006f24 <Computer::detectFeatures()+0x78>
c0007073:	e8 18 6c 01 00       	call   c001dc90 <avxDetect>
c0007078:	24 01                	and    al,0x1
c000707a:	c0 e0 05             	shl    al,0x5
c000707d:	88 c2                	mov    dl,al
c000707f:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0007086:	24 df                	and    al,0xdf
c0007088:	08 d0                	or     al,dl
c000708a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007090:	83 c4 3c             	add    esp,0x3c
c0007093:	5b                   	pop    ebx
c0007094:	5e                   	pop    esi
c0007095:	5f                   	pop    edi
c0007096:	5d                   	pop    ebp
c0007097:	c3                   	ret    
c0007098:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000709f:	e8 06 86 00 00       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c00070a4:	24 01                	and    al,0x1
c00070a6:	88 c2                	mov    dl,al
c00070a8:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c00070af:	24 fe                	and    al,0xfe
c00070b1:	08 d0                	or     al,dl
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 11 ff ff ff       	jmp    c0006fcf <Computer::detectFeatures()+0x123>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 1c             	sub    esp,0x1c
c00070c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 1c             	add    esp,0x1c
c00070d9:	c3                   	ret    
c00070da:	c7 04 24 56 f7 01 c0 	mov    DWORD PTR [esp],0xc001f756
c00070e1:	e8 df 96 00 00       	call   c00107c5 <KePanic(char const*)>
c00070e6:	eb e8                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e8:	83 ec 1c             	sub    esp,0x1c
c00070eb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00070f7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00070fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00070ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007106:	74 16                	je     c000711e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007108:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000710c:	89 f0                	mov    eax,esi
c000710e:	89 fa                	mov    edx,edi
c0007110:	0f 30                	wrmsr  
c0007112:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007116:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000711a:	83 c4 1c             	add    esp,0x1c
c000711d:	c3                   	ret    
c000711e:	c7 04 24 5c f7 01 c0 	mov    DWORD PTR [esp],0xc001f75c
c0007125:	e8 9b 96 00 00       	call   c00107c5 <KePanic(char const*)>
c000712a:	eb dc                	jmp    c0007108 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000712c <Computer::shutdown()>:
c000712c:	83 ec 1c             	sub    esp,0x1c
c000712f:	31 c9                	xor    ecx,ecx
c0007131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007135:	8b 10                	mov    edx,DWORD PTR [eax]
c0007137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000713b:	31 c9                	xor    ecx,ecx
c000713d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007141:	31 c9                	xor    ecx,ecx
c0007143:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007147:	89 04 24             	mov    DWORD PTR [esp],eax
c000714a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714d:	83 c4 1c             	add    esp,0x1c
c0007150:	c3                   	ret    
c0007151:	90                   	nop

c0007152 <Computer::restart()>:
c0007152:	83 ec 1c             	sub    esp,0x1c
c0007155:	31 c9                	xor    ecx,ecx
c0007157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000715b:	8b 10                	mov    edx,DWORD PTR [eax]
c000715d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007161:	31 c9                	xor    ecx,ecx
c0007163:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007167:	b9 01 00 00 00       	mov    ecx,0x1
c000716c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007170:	89 04 24             	mov    DWORD PTR [esp],eax
c0007173:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007176:	83 c4 1c             	add    esp,0x1c
c0007179:	c3                   	ret    

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 c3 7f 00 00       	jmp    c000f150 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007199:	c3                   	ret    

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071a3:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071aa:	19 c0                	sbb    eax,eax
c00071ac:	24 80                	and    al,0x80
c00071ae:	08 d0                	or     al,dl
c00071b0:	e6 70                	out    0x70,al
c00071b2:	e4 71                	in     al,0x71
c00071b4:	c3                   	ret    
c00071b5:	90                   	nop

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071bf:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c5:	b8 10 00 00 00       	mov    eax,0x10
c00071ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00071ce:	eb ca                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 14             	sub    esp,0x14
c00071d5:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071dc:	c7 04 24 62 f7 01 c0 	mov    DWORD PTR [esp],0xc001f762
c00071e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00071e7:	0f 94 05 80 1b 02 c0 	sete   BYTE PTR ds:0xc0021b80
c00071ee:	e8 5e 8f 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c00071f3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071fa:	e8 07 09 00 00       	call   c0007b06 <malloc>
c00071ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0007202:	89 c6                	mov    esi,eax
c0007204:	e8 eb 7a 00 00       	call   c000ecf4 <ACPI::ACPI()>
c0007209:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007216:	e8 87 4c 00 00       	call   c000bea2 <Device::addChild(Device*)>
c000721b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000721e:	e8 89 fc ff ff       	call   c0006eac <Computer::detectFeatures()>
c0007223:	b8 01 00 00 00       	mov    eax,0x1
c0007228:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000722c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000722f:	e8 82 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007234:	c7 04 24 7a f7 01 c0 	mov    DWORD PTR [esp],0xc001f77a
c000723b:	e8 11 8f 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0007240:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007247:	e8 ba 08 00 00       	call   c0007b06 <malloc>
c000724c:	89 04 24             	mov    DWORD PTR [esp],eax
c000724f:	89 c6                	mov    esi,eax
c0007251:	e8 0c 85 00 00       	call   c000f762 <CPU::CPU()>
c0007256:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000725c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007263:	e8 3a 4c 00 00       	call   c000bea2 <Device::addChild(Device*)>
c0007268:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726e:	31 db                	xor    ebx,ebx
c0007270:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007274:	8b 10                	mov    edx,DWORD PTR [eax]
c0007276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000727a:	31 c9                	xor    ecx,ecx
c000727c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007280:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0007284:	89 04 24             	mov    DWORD PTR [esp],eax
c0007287:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000728a:	c7 04 24 28 f8 01 c0 	mov    DWORD PTR [esp],0xc001f828
c0007291:	e8 bb 8e 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c0007296:	e8 01 fb 00 00       	call   c0016d9c <HalInitialiseCoprocessor()>
c000729b:	c7 04 24 94 f7 01 c0 	mov    DWORD PTR [esp],0xc001f794
c00072a2:	e8 aa 8e 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c00072a7:	c7 04 24 72 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c72
c00072ae:	e8 05 dd 00 00       	call   c0014fb8 <setupMultitasking(void (*)())>
c00072b3:	83 c4 14             	add    esp,0x14
c00072b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072bb:	5b                   	pop    ebx
c00072bc:	5e                   	pop    esi
c00072bd:	c3                   	ret    

c00072be <Computer::disableNMI()>:
c00072be:	83 ec 08             	sub    esp,0x8
c00072c1:	31 c0                	xor    eax,eax
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00072ce:	e8 e3 fe ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072d3:	83 c4 08             	add    esp,0x8
c00072d6:	c3                   	ret    
c00072d7:	90                   	nop

c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00072e1:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00072e8:	19 c0                	sbb    eax,eax
c00072ea:	24 80                	and    al,0x80
c00072ec:	08 d0                	or     al,dl
c00072ee:	e6 70                	out    0x70,al
c00072f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f4:	e6 71                	out    0x71,al
c00072f6:	c3                   	ret    
c00072f7:	90                   	nop

c00072f8 <Computer::handleNMI()>:
c00072f8:	83 ec 2c             	sub    esp,0x2c
c00072fb:	e4 92                	in     al,0x92
c00072fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0007301:	e4 61                	in     al,0x61
c0007303:	c7 04 24 af f7 01 c0 	mov    DWORD PTR [esp],0xc001f7af
c000730a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000730e:	e8 63 37 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007313:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007318:	24 10                	and    al,0x10
c000731a:	75 14                	jne    c0007330 <Computer::handleNMI()+0x38>
c000731c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007321:	24 40                	and    al,0x40
c0007323:	75 20                	jne    c0007345 <Computer::handleNMI()+0x4d>
c0007325:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000732a:	78 2c                	js     c0007358 <Computer::handleNMI()+0x60>
c000732c:	83 c4 2c             	add    esp,0x2c
c000732f:	c3                   	ret    
c0007330:	c7 04 24 c0 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7c0
c0007337:	e8 89 94 00 00       	call   c00107c5 <KePanic(char const*)>
c000733c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007341:	24 40                	and    al,0x40
c0007343:	74 e0                	je     c0007325 <Computer::handleNMI()+0x2d>
c0007345:	c7 04 24 cd f7 01 c0 	mov    DWORD PTR [esp],0xc001f7cd
c000734c:	e8 74 94 00 00       	call   c00107c5 <KePanic(char const*)>
c0007351:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0007356:	79 d4                	jns    c000732c <Computer::handleNMI()+0x34>
c0007358:	b8 d7 f7 01 c0       	mov    eax,0xc001f7d7
c000735d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007361:	83 c4 2c             	add    esp,0x2c
c0007364:	e9 5c 94 00 00       	jmp    c00107c5 <KePanic(char const*)>
c0007369:	90                   	nop

c000736a <GDTEntry::setBase(unsigned int)>:
c000736a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007372:	89 c1                	mov    ecx,eax
c0007374:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007378:	c1 e9 10             	shr    ecx,0x10
c000737b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000737e:	c1 e8 18             	shr    eax,0x18
c0007381:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007384:	c3                   	ret    
c0007385:	90                   	nop

c0007386 <GDTEntry::setLimit(unsigned int)>:
c0007386:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000738a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000738e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007391:	66 89 01             	mov    WORD PTR [ecx],ax
c0007394:	c1 e8 10             	shr    eax,0x10
c0007397:	24 0f                	and    al,0xf
c0007399:	80 e2 f0             	and    dl,0xf0
c000739c:	08 d0                	or     al,dl
c000739e:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073a1:	c3                   	ret    

c00073a2 <GDT::GDT()>:
c00073a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b6:	90                   	nop
c00073b7:	c3                   	ret    

c00073b8 <GDT::addEntry(GDTEntry)>:
c00073b8:	53                   	push   ebx
c00073b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00073c7:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00073ce:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073d2:	c1 e0 03             	shl    eax,0x3
c00073d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00073d7:	5b                   	pop    ebx
c00073d8:	c3                   	ret    
c00073d9:	90                   	nop

c00073da <GDT::getNumberOfEntries()>:
c00073da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073de:	8b 00                	mov    eax,DWORD PTR [eax]
c00073e0:	c3                   	ret    
c00073e1:	90                   	nop

c00073e2 <GDT::flush()>:
c00073e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00073e8:	83 c0 04             	add    eax,0x4
c00073eb:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073f0:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073f7:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073fe:	e9 57 8f ff ff       	jmp    c000035a <loadGDT>
c0007403:	90                   	nop

c0007404 <GDT::setup()>:
c0007404:	57                   	push   edi
c0007405:	56                   	push   esi
c0007406:	53                   	push   ebx
c0007407:	83 ec 30             	sub    esp,0x30
c000740a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000740e:	6a 00                	push   0x0
c0007410:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007414:	56                   	push   esi
c0007415:	e8 50 ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c000741a:	6a 00                	push   0x0
c000741c:	56                   	push   esi
c000741d:	e8 64 ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c0007422:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000742a:	6a 00                	push   0x0
c000742c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007430:	56                   	push   esi
c0007431:	e8 34 ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007436:	68 ff ff ff 00       	push   0xffffff
c000743b:	56                   	push   esi
c000743c:	e8 45 ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c0007441:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007445:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007449:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000744e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007452:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007457:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000745b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000745f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007463:	89 f8                	mov    eax,edi
c0007465:	89 fa                	mov    edx,edi
c0007467:	80 e4 f7             	and    ah,0xf7
c000746a:	80 ce 60             	or     dh,0x60
c000746d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007471:	89 c7                	mov    edi,eax
c0007473:	80 cc 60             	or     ah,0x60
c0007476:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000747a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000747e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007482:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007486:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000748a:	83 c4 20             	add    esp,0x20
c000748d:	6a 00                	push   0x0
c000748f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007493:	50                   	push   eax
c0007494:	e8 d1 fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007499:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000749d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074a1:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00074a6:	6a 00                	push   0x0
c00074a8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074ac:	50                   	push   eax
c00074ad:	e8 b8 fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00074b2:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c2:	53                   	push   ebx
c00074c3:	e8 f0 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074c8:	83 c4 0c             	add    esp,0xc
c00074cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074d3:	53                   	push   ebx
c00074d4:	e8 df fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074d9:	83 c4 0c             	add    esp,0xc
c00074dc:	57                   	push   edi
c00074dd:	56                   	push   esi
c00074de:	53                   	push   ebx
c00074df:	e8 d4 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074e4:	83 c4 0c             	add    esp,0xc
c00074e7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074eb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ef:	53                   	push   ebx
c00074f0:	e8 c3 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074f5:	83 c4 0c             	add    esp,0xc
c00074f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007500:	53                   	push   ebx
c0007501:	e8 b2 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007506:	83 c4 0c             	add    esp,0xc
c0007509:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000750d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007511:	53                   	push   ebx
c0007512:	e8 a1 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007517:	83 c4 0c             	add    esp,0xc
c000751a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000751e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007522:	53                   	push   ebx
c0007523:	e8 90 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000752b:	e8 b2 fe ff ff       	call   c00073e2 <GDT::flush()>
c0007530:	83 c4 40             	add    esp,0x40
c0007533:	5b                   	pop    ebx
c0007534:	5e                   	pop    esi
c0007535:	5f                   	pop    edi
c0007536:	c3                   	ret    

c0007537 <idleFunction(void*)>:
c0007537:	83 ec 0c             	sub    esp,0xc
c000753a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000753f:	48                   	dec    eax
c0007540:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007545:	75 01                	jne    c0007548 <idleFunction(void*)+0x11>
c0007547:	fb                   	sti    
c0007548:	e8 3e f5 00 00       	call   c0016a8b <HalSystemIdle()>
c000754d:	e8 c9 70 01 00       	call   c001e61b <idleCommon()>
c0007552:	eb f4                	jmp    c0007548 <idleFunction(void*)+0x11>

c0007554 <IDTEntry::IDTEntry(bool)>:
c0007554:	83 ec 04             	sub    esp,0x4
c0007557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755b:	88 04 24             	mov    BYTE PTR [esp],al
c000755e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007562:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007568:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000756c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007570:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007574:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007578:	80 e2 f0             	and    dl,0xf0
c000757b:	80 ca 0e             	or     dl,0xe
c000757e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007581:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007585:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007589:	80 e2 ef             	and    dl,0xef
c000758c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000758f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007593:	74 07                	je     c000759c <IDTEntry::IDTEntry(bool)+0x48>
c0007595:	b2 03                	mov    dl,0x3
c0007597:	eb 07                	jmp    c00075a0 <IDTEntry::IDTEntry(bool)+0x4c>
c0007599:	8d 76 00             	lea    esi,[esi+0x0]
c000759c:	b2 00                	mov    dl,0x0
c000759e:	66 90                	xchg   ax,ax
c00075a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a4:	80 e2 03             	and    dl,0x3
c00075a7:	88 d1                	mov    cl,dl
c00075a9:	c0 e1 05             	shl    cl,0x5
c00075ac:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075b0:	80 e2 9f             	and    dl,0x9f
c00075b3:	08 ca                	or     dl,cl
c00075b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bc:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075c0:	80 ca 80             	or     dl,0x80
c00075c3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c6:	90                   	nop
c00075c7:	83 c4 04             	add    esp,0x4
c00075ca:	c3                   	ret    
c00075cb:	90                   	nop

c00075cc <IDTEntry::setOffset(unsigned int)>:
c00075cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d4:	66 89 02             	mov    WORD PTR [edx],ax
c00075d7:	c1 e8 10             	shr    eax,0x10
c00075da:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075de:	c3                   	ret    
c00075df:	90                   	nop

c00075e0 <IDT::IDT()>:
c00075e0:	90                   	nop
c00075e1:	c3                   	ret    

c00075e2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e6:	83 c0 30             	add    eax,0x30
c00075e9:	c3                   	ret    

c00075ea <IDT::addEntry(IDTEntry, int)>:
c00075ea:	53                   	push   ebx
c00075eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075fb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075fe:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007602:	5b                   	pop    ebx
c0007603:	c3                   	ret    

c0007604 <IDT::addEntry(int, void (*)(), bool)>:
c0007604:	53                   	push   ebx
c0007605:	83 ec 10             	sub    esp,0x10
c0007608:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000760d:	50                   	push   eax
c000760e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007612:	53                   	push   ebx
c0007613:	e8 3c ff ff ff       	call   c0007554 <IDTEntry::IDTEntry(bool)>
c0007618:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761c:	53                   	push   ebx
c000761d:	e8 aa ff ff ff       	call   c00075cc <IDTEntry::setOffset(unsigned int)>
c0007622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007626:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000762a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000762e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007632:	e8 b3 ff ff ff       	call   c00075ea <IDT::addEntry(IDTEntry, int)>
c0007637:	83 c4 30             	add    esp,0x30
c000763a:	5b                   	pop    ebx
c000763b:	c3                   	ret    

c000763c <IDT::flush()>:
c000763c:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c0007645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007649:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c000764e:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007655:	c3                   	ret    

c0007656 <IDT::setup()>:
c0007656:	57                   	push   edi
c0007657:	56                   	push   esi
c0007658:	53                   	push   ebx
c0007659:	83 ec 10             	sub    esp,0x10
c000765c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007660:	6a 00                	push   0x0
c0007662:	68 20 dd 01 c0       	push   0xc001dd20
c0007667:	6a 00                	push   0x0
c0007669:	53                   	push   ebx
c000766a:	e8 95 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000766f:	6a 00                	push   0x0
c0007671:	68 30 dd 01 c0       	push   0xc001dd30
c0007676:	6a 01                	push   0x1
c0007678:	53                   	push   ebx
c0007679:	e8 86 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000767e:	83 c4 20             	add    esp,0x20
c0007681:	6a 00                	push   0x0
c0007683:	68 3a dd 01 c0       	push   0xc001dd3a
c0007688:	6a 02                	push   0x2
c000768a:	53                   	push   ebx
c000768b:	e8 74 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007690:	6a 00                	push   0x0
c0007692:	68 44 dd 01 c0       	push   0xc001dd44
c0007697:	6a 03                	push   0x3
c0007699:	53                   	push   ebx
c000769a:	e8 65 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000769f:	83 c4 20             	add    esp,0x20
c00076a2:	6a 00                	push   0x0
c00076a4:	68 4e dd 01 c0       	push   0xc001dd4e
c00076a9:	6a 04                	push   0x4
c00076ab:	53                   	push   ebx
c00076ac:	e8 53 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00076b1:	6a 00                	push   0x0
c00076b3:	68 58 dd 01 c0       	push   0xc001dd58
c00076b8:	6a 05                	push   0x5
c00076ba:	53                   	push   ebx
c00076bb:	e8 44 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00076c0:	83 c4 20             	add    esp,0x20
c00076c3:	6a 00                	push   0x0
c00076c5:	68 62 dd 01 c0       	push   0xc001dd62
c00076ca:	6a 06                	push   0x6
c00076cc:	53                   	push   ebx
c00076cd:	e8 32 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00076d2:	6a 00                	push   0x0
c00076d4:	68 6c dd 01 c0       	push   0xc001dd6c
c00076d9:	6a 07                	push   0x7
c00076db:	53                   	push   ebx
c00076dc:	e8 23 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00076e1:	83 c4 20             	add    esp,0x20
c00076e4:	6a 00                	push   0x0
c00076e6:	68 76 dd 01 c0       	push   0xc001dd76
c00076eb:	6a 08                	push   0x8
c00076ed:	53                   	push   ebx
c00076ee:	e8 11 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00076f3:	6a 00                	push   0x0
c00076f5:	68 7e dd 01 c0       	push   0xc001dd7e
c00076fa:	6a 09                	push   0x9
c00076fc:	53                   	push   ebx
c00076fd:	e8 02 ff ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007702:	83 c4 20             	add    esp,0x20
c0007705:	6a 00                	push   0x0
c0007707:	68 88 dd 01 c0       	push   0xc001dd88
c000770c:	6a 0a                	push   0xa
c000770e:	53                   	push   ebx
c000770f:	e8 f0 fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007714:	6a 00                	push   0x0
c0007716:	68 90 dd 01 c0       	push   0xc001dd90
c000771b:	6a 0b                	push   0xb
c000771d:	53                   	push   ebx
c000771e:	e8 e1 fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007723:	83 c4 20             	add    esp,0x20
c0007726:	6a 00                	push   0x0
c0007728:	68 98 dd 01 c0       	push   0xc001dd98
c000772d:	6a 0c                	push   0xc
c000772f:	53                   	push   ebx
c0007730:	e8 cf fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007735:	6a 00                	push   0x0
c0007737:	68 a0 dd 01 c0       	push   0xc001dda0
c000773c:	6a 0d                	push   0xd
c000773e:	53                   	push   ebx
c000773f:	e8 c0 fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007744:	83 c4 20             	add    esp,0x20
c0007747:	6a 00                	push   0x0
c0007749:	68 ba dd 01 c0       	push   0xc001ddba
c000774e:	6a 0e                	push   0xe
c0007750:	53                   	push   ebx
c0007751:	e8 ae fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007756:	6a 00                	push   0x0
c0007758:	68 c2 dd 01 c0       	push   0xc001ddc2
c000775d:	6a 0f                	push   0xf
c000775f:	53                   	push   ebx
c0007760:	e8 9f fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007765:	83 c4 20             	add    esp,0x20
c0007768:	6a 00                	push   0x0
c000776a:	68 cc dd 01 c0       	push   0xc001ddcc
c000776f:	6a 10                	push   0x10
c0007771:	53                   	push   ebx
c0007772:	e8 8d fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007777:	6a 00                	push   0x0
c0007779:	68 d6 dd 01 c0       	push   0xc001ddd6
c000777e:	6a 11                	push   0x11
c0007780:	53                   	push   ebx
c0007781:	e8 7e fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007786:	83 c4 20             	add    esp,0x20
c0007789:	6a 00                	push   0x0
c000778b:	68 e0 dd 01 c0       	push   0xc001dde0
c0007790:	6a 12                	push   0x12
c0007792:	53                   	push   ebx
c0007793:	e8 6c fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007798:	6a 01                	push   0x1
c000779a:	68 7a de 01 c0       	push   0xc001de7a
c000779f:	6a 60                	push   0x60
c00077a1:	53                   	push   ebx
c00077a2:	e8 5d fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077a7:	83 c4 20             	add    esp,0x20
c00077aa:	6a 00                	push   0x0
c00077ac:	68 81 de 01 c0       	push   0xc001de81
c00077b1:	6a 20                	push   0x20
c00077b3:	53                   	push   ebx
c00077b4:	e8 4b fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077b9:	6a 00                	push   0x0
c00077bb:	68 6c de 01 c0       	push   0xc001de6c
c00077c0:	6a 21                	push   0x21
c00077c2:	53                   	push   ebx
c00077c3:	e8 3c fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077c8:	83 c4 20             	add    esp,0x20
c00077cb:	6a 00                	push   0x0
c00077cd:	68 73 de 01 c0       	push   0xc001de73
c00077d2:	6a 22                	push   0x22
c00077d4:	53                   	push   ebx
c00077d5:	e8 2a fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077da:	6a 00                	push   0x0
c00077dc:	68 ea dd 01 c0       	push   0xc001ddea
c00077e1:	6a 23                	push   0x23
c00077e3:	53                   	push   ebx
c00077e4:	e8 1b fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077e9:	83 c4 20             	add    esp,0x20
c00077ec:	6a 00                	push   0x0
c00077ee:	68 f4 dd 01 c0       	push   0xc001ddf4
c00077f3:	6a 24                	push   0x24
c00077f5:	53                   	push   ebx
c00077f6:	e8 09 fe ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00077fb:	6a 00                	push   0x0
c00077fd:	68 fe dd 01 c0       	push   0xc001ddfe
c0007802:	6a 25                	push   0x25
c0007804:	53                   	push   ebx
c0007805:	e8 fa fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	6a 00                	push   0x0
c000780f:	68 08 de 01 c0       	push   0xc001de08
c0007814:	6a 26                	push   0x26
c0007816:	53                   	push   ebx
c0007817:	e8 e8 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000781c:	6a 00                	push   0x0
c000781e:	68 12 de 01 c0       	push   0xc001de12
c0007823:	6a 27                	push   0x27
c0007825:	53                   	push   ebx
c0007826:	e8 d9 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000782b:	83 c4 20             	add    esp,0x20
c000782e:	6a 00                	push   0x0
c0007830:	68 1c de 01 c0       	push   0xc001de1c
c0007835:	6a 28                	push   0x28
c0007837:	53                   	push   ebx
c0007838:	e8 c7 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000783d:	6a 00                	push   0x0
c000783f:	68 26 de 01 c0       	push   0xc001de26
c0007844:	6a 29                	push   0x29
c0007846:	53                   	push   ebx
c0007847:	e8 b8 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000784c:	83 c4 20             	add    esp,0x20
c000784f:	6a 00                	push   0x0
c0007851:	68 30 de 01 c0       	push   0xc001de30
c0007856:	6a 2a                	push   0x2a
c0007858:	53                   	push   ebx
c0007859:	e8 a6 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000785e:	6a 00                	push   0x0
c0007860:	68 3a de 01 c0       	push   0xc001de3a
c0007865:	6a 2b                	push   0x2b
c0007867:	53                   	push   ebx
c0007868:	e8 97 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000786d:	83 c4 20             	add    esp,0x20
c0007870:	6a 00                	push   0x0
c0007872:	68 44 de 01 c0       	push   0xc001de44
c0007877:	6a 2c                	push   0x2c
c0007879:	53                   	push   ebx
c000787a:	e8 85 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000787f:	6a 00                	push   0x0
c0007881:	68 4e de 01 c0       	push   0xc001de4e
c0007886:	6a 2d                	push   0x2d
c0007888:	53                   	push   ebx
c0007889:	e8 76 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c000788e:	83 c4 20             	add    esp,0x20
c0007891:	6a 00                	push   0x0
c0007893:	68 58 de 01 c0       	push   0xc001de58
c0007898:	6a 2e                	push   0x2e
c000789a:	53                   	push   ebx
c000789b:	e8 64 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078a0:	6a 00                	push   0x0
c00078a2:	68 62 de 01 c0       	push   0xc001de62
c00078a7:	6a 2f                	push   0x2f
c00078a9:	53                   	push   ebx
c00078aa:	e8 55 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078af:	83 c4 20             	add    esp,0x20
c00078b2:	6a 00                	push   0x0
c00078b4:	68 bc df 01 c0       	push   0xc001dfbc
c00078b9:	6a 30                	push   0x30
c00078bb:	53                   	push   ebx
c00078bc:	e8 43 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078c1:	6a 00                	push   0x0
c00078c3:	68 c6 df 01 c0       	push   0xc001dfc6
c00078c8:	6a 31                	push   0x31
c00078ca:	53                   	push   ebx
c00078cb:	e8 34 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078d0:	83 c4 20             	add    esp,0x20
c00078d3:	6a 00                	push   0x0
c00078d5:	68 d0 df 01 c0       	push   0xc001dfd0
c00078da:	6a 32                	push   0x32
c00078dc:	53                   	push   ebx
c00078dd:	e8 22 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078e2:	6a 00                	push   0x0
c00078e4:	68 da df 01 c0       	push   0xc001dfda
c00078e9:	6a 33                	push   0x33
c00078eb:	53                   	push   ebx
c00078ec:	e8 13 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c00078f1:	83 c4 20             	add    esp,0x20
c00078f4:	6a 00                	push   0x0
c00078f6:	68 e4 df 01 c0       	push   0xc001dfe4
c00078fb:	6a 34                	push   0x34
c00078fd:	53                   	push   ebx
c00078fe:	e8 01 fd ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007903:	6a 00                	push   0x0
c0007905:	68 ee df 01 c0       	push   0xc001dfee
c000790a:	6a 35                	push   0x35
c000790c:	53                   	push   ebx
c000790d:	e8 f2 fc ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007912:	83 c4 20             	add    esp,0x20
c0007915:	6a 00                	push   0x0
c0007917:	68 f8 df 01 c0       	push   0xc001dff8
c000791c:	6a 36                	push   0x36
c000791e:	53                   	push   ebx
c000791f:	e8 e0 fc ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007924:	6a 00                	push   0x0
c0007926:	68 02 e0 01 c0       	push   0xc001e002
c000792b:	6a 37                	push   0x37
c000792d:	53                   	push   ebx
c000792e:	e8 d1 fc ff ff       	call   c0007604 <IDT::addEntry(int, void (*)(), bool)>
c0007933:	83 c4 1c             	add    esp,0x1c
c0007936:	6a 03                	push   0x3
c0007938:	6a 02                	push   0x2
c000793a:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007940:	e8 31 25 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c0007945:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000794c:	89 c6                	mov    esi,eax
c000794e:	e8 b3 01 00 00       	call   c0007b06 <malloc>
c0007953:	81 c6 00 20 00 00    	add    esi,0x2000
c0007959:	89 04 24             	mov    DWORD PTR [esp],eax
c000795c:	89 c7                	mov    edi,eax
c000795e:	e8 0d 16 00 00       	call   c0008f70 <TSS::TSS()>
c0007963:	83 c4 0c             	add    esp,0xc
c0007966:	68 76 dd 01 c0       	push   0xc001dd76
c000796b:	56                   	push   esi
c000796c:	57                   	push   edi
c000796d:	e8 46 16 00 00       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c0007972:	89 c6                	mov    esi,eax
c0007974:	58                   	pop    eax
c0007975:	5a                   	pop    edx
c0007976:	6a 00                	push   0x0
c0007978:	8d 44 24 14          	lea    eax,[esp+0x14]
c000797c:	50                   	push   eax
c000797d:	e8 d2 fb ff ff       	call   c0007554 <IDTEntry::IDTEntry(bool)>
c0007982:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007986:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000798b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007992:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007996:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000799c:	80 ce 05             	or     dh,0x5
c000799f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079a3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079aa:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079b0:	e8 87 fc ff ff       	call   c000763c <IDT::flush()>
c00079b5:	83 c4 20             	add    esp,0x20
c00079b8:	5b                   	pop    ebx
c00079b9:	5e                   	pop    esi
c00079ba:	5f                   	pop    edi
c00079bb:	c3                   	ret    

c00079bc <sbrk>:
c00079bc:	55                   	push   ebp
c00079bd:	57                   	push   edi
c00079be:	56                   	push   esi
c00079bf:	53                   	push   ebx
c00079c0:	83 ec 2c             	sub    esp,0x2c
c00079c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079c7:	85 c0                	test   eax,eax
c00079c9:	74 6c                	je     c0007a37 <sbrk+0x7b>
c00079cb:	78 71                	js     c0007a3e <sbrk+0x82>
c00079cd:	8b 15 6c 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b6c
c00079d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079d7:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079dd:	05 ff 0f 00 00       	add    eax,0xfff
c00079e2:	0f 49 e8             	cmovns ebp,eax
c00079e5:	c1 fd 0c             	sar    ebp,0xc
c00079e8:	bb 00 00 00 00       	mov    ebx,0x0
c00079ed:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079f3:	8b 3d 6c 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021b6c
c00079f9:	e8 0e 04 00 00       	call   c0007e0c <Phys::allocatePage()>
c00079fe:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c0007a06:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007a0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a11:	e8 2c 23 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a16:	81 05 6c 1b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021b6c,0x1000
c0007a20:	43                   	inc    ebx
c0007a21:	39 dd                	cmp    ebp,ebx
c0007a23:	75 c8                	jne    c00079ed <sbrk+0x31>
c0007a25:	0f 20 d8             	mov    eax,cr3
c0007a28:	0f 22 d8             	mov    cr3,eax
c0007a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007a2f:	83 c4 2c             	add    esp,0x2c
c0007a32:	5b                   	pop    ebx
c0007a33:	5e                   	pop    esi
c0007a34:	5f                   	pop    edi
c0007a35:	5d                   	pop    ebp
c0007a36:	c3                   	ret    
c0007a37:	a1 6c 1b 02 c0       	mov    eax,ds:0xc0021b6c
c0007a3c:	eb f1                	jmp    c0007a2f <sbrk+0x73>
c0007a3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a42:	c7 04 24 78 f8 01 c0 	mov    DWORD PTR [esp],0xc001f878
c0007a49:	e8 28 30 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007a4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a53:	eb da                	jmp    c0007a2f <sbrk+0x73>

c0007a55 <mmap>:
c0007a55:	83 ec 1c             	sub    esp,0x1c
c0007a58:	c7 04 24 a8 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8a8
c0007a5f:	e8 61 8d 00 00       	call   c00107c5 <KePanic(char const*)>
c0007a64:	b8 00 00 00 00       	mov    eax,0x0
c0007a69:	83 c4 1c             	add    esp,0x1c
c0007a6c:	c3                   	ret    

c0007a6d <munmap>:
c0007a6d:	83 ec 1c             	sub    esp,0x1c
c0007a70:	c7 04 24 ad f8 01 c0 	mov    DWORD PTR [esp],0xc001f8ad
c0007a77:	e8 49 8d 00 00       	call   c00107c5 <KePanic(char const*)>
c0007a7c:	b8 00 00 00 00       	mov    eax,0x0
c0007a81:	83 c4 1c             	add    esp,0x1c
c0007a84:	c3                   	ret    

c0007a85 <liballoc_lock()>:
c0007a85:	fa                   	cli    
c0007a86:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007a8c:	b8 00 00 00 00       	mov    eax,0x0
c0007a91:	c3                   	ret    

c0007a92 <liballoc_unlock()>:
c0007a92:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a97:	48                   	dec    eax
c0007a98:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a9d:	75 01                	jne    c0007aa0 <liballoc_unlock()+0xe>
c0007a9f:	fb                   	sti    
c0007aa0:	b8 00 00 00 00       	mov    eax,0x0
c0007aa5:	c3                   	ret    

c0007aa6 <liballoc_alloc(int)>:
c0007aa6:	83 ec 1c             	sub    esp,0x1c
c0007aa9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007ab9:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007abe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac1:	e8 b0 23 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c0007ac6:	83 c4 1c             	add    esp,0x1c
c0007ac9:	c3                   	ret    

c0007aca <liballoc_free(void*, int)>:
c0007aca:	83 ec 1c             	sub    esp,0x1c
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007ad5:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ada:	89 04 24             	mov    DWORD PTR [esp],eax
c0007add:	e8 6c 1f 00 00       	call   c0009a4e <VAS::freeAllocatedPages(unsigned long)>
c0007ae2:	b8 00 00 00 00       	mov    eax,0x0
c0007ae7:	83 c4 1c             	add    esp,0x1c
c0007aea:	c3                   	ret    

c0007aeb <realloc>:
c0007aeb:	83 ec 1c             	sub    esp,0x1c
c0007aee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007af2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007af6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007afa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007afd:	e8 a7 9b ff ff       	call   c00016a9 <dlrealloc>
c0007b02:	83 c4 1c             	add    esp,0x1c
c0007b05:	c3                   	ret    

c0007b06 <malloc>:
c0007b06:	83 ec 1c             	sub    esp,0x1c
c0007b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b10:	e8 57 96 ff ff       	call   c000116c <dlmalloc>
c0007b15:	83 c4 1c             	add    esp,0x1c
c0007b18:	c3                   	ret    

c0007b19 <free>:
c0007b19:	83 ec 1c             	sub    esp,0x1c
c0007b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b23:	e8 e6 92 ff ff       	call   c0000e0e <dlfree>
c0007b28:	83 c4 1c             	add    esp,0x1c
c0007b2b:	c3                   	ret    

c0007b2c <rfree>:
c0007b2c:	83 ec 1c             	sub    esp,0x1c
c0007b2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b33:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b36:	e8 d3 92 ff ff       	call   c0000e0e <dlfree>
c0007b3b:	83 c4 1c             	add    esp,0x1c
c0007b3e:	c3                   	ret    

c0007b3f <calloc>:
c0007b3f:	83 ec 1c             	sub    esp,0x1c
c0007b42:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007b46:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007b4a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b4e:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007b53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b56:	e8 ab ff ff ff       	call   c0007b06 <malloc>
c0007b5b:	89 c6                	mov    esi,eax
c0007b5d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007b61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007b69:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b6c:	e8 0f 8a ff ff       	call   c0000580 <memset>
c0007b71:	89 f0                	mov    eax,esi
c0007b73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007b77:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007b7b:	83 c4 1c             	add    esp,0x1c
c0007b7e:	c3                   	ret    

c0007b7f <KeEntryPoint>:
c0007b7f:	56                   	push   esi
c0007b80:	be f9 03 00 00       	mov    esi,0x3f9
c0007b85:	53                   	push   ebx
c0007b86:	89 f2                	mov    edx,esi
c0007b88:	83 ec 34             	sub    esp,0x34
c0007b8b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b90:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b95:	31 c0                	xor    eax,eax
c0007b97:	ee                   	out    dx,al
c0007b98:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b9d:	b0 80                	mov    al,0x80
c0007b9f:	89 da                	mov    edx,ebx
c0007ba1:	ee                   	out    dx,al
c0007ba2:	b1 03                	mov    cl,0x3
c0007ba4:	ba f8 03 00 00       	mov    edx,0x3f8
c0007ba9:	88 c8                	mov    al,cl
c0007bab:	ee                   	out    dx,al
c0007bac:	31 c0                	xor    eax,eax
c0007bae:	89 f2                	mov    edx,esi
c0007bb0:	ee                   	out    dx,al
c0007bb1:	88 c8                	mov    al,cl
c0007bb3:	89 da                	mov    edx,ebx
c0007bb5:	ee                   	out    dx,al
c0007bb6:	b0 c7                	mov    al,0xc7
c0007bb8:	ba fa 03 00 00       	mov    edx,0x3fa
c0007bbd:	ee                   	out    dx,al
c0007bbe:	b0 0b                	mov    al,0xb
c0007bc0:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bc5:	ee                   	out    dx,al
c0007bc6:	c7 04 24 b4 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8b4
c0007bcd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007bd1:	e8 a0 2e 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007bd6:	e8 08 85 00 00       	call   c00100e3 <KeDisplaySplashScreen()>
c0007bdb:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007be0:	05 ff 0f 00 00       	add    eax,0xfff
c0007be5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bea:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bed:	e8 78 03 00 00       	call   c0007f6a <Phys::physicalMemorySetup(unsigned int)>
c0007bf2:	e8 f1 1b 00 00       	call   c00097e8 <Virt::virtualMemorySetup()>
c0007bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bfa:	e8 e3 1e 00 00       	call   c0009ae2 <VAS::VAS()>
c0007bff:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007c05:	e8 b0 69 01 00       	call   c001e5ba <_init>
c0007c0a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007c11:	e8 f0 fe ff ff       	call   c0007b06 <malloc>
c0007c16:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c19:	89 c6                	mov    esi,eax
c0007c1b:	e8 d6 f1 ff ff       	call   c0006df6 <Computer::Computer()>
c0007c20:	31 d2                	xor    edx,edx
c0007c22:	31 c9                	xor    ecx,ecx
c0007c24:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007c28:	31 c0                	xor    eax,eax
c0007c2a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007c2e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c35:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007c3b:	e8 90 f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007c43:	e8 90 1f 00 00       	call   c0009bd8 <VAS::~VAS()>
c0007c48:	83 c4 34             	add    esp,0x34
c0007c4b:	5b                   	pop    ebx
c0007c4c:	5e                   	pop    esi
c0007c4d:	c3                   	ret    
c0007c4e:	66 90                	xchg   ax,ax

c0007c50 <Phys::allocateDMA(unsigned long)>:
c0007c50:	55                   	push   ebp
c0007c51:	31 ed                	xor    ebp,ebp
c0007c53:	57                   	push   edi
c0007c54:	56                   	push   esi
c0007c55:	31 f6                	xor    esi,esi
c0007c57:	53                   	push   ebx
c0007c58:	31 db                	xor    ebx,ebx
c0007c5a:	83 ec 2c             	sub    esp,0x2c
c0007c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c61:	05 ff 0f 00 00       	add    eax,0xfff
c0007c66:	c1 e8 0c             	shr    eax,0xc
c0007c69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c6d:	31 c0                	xor    eax,eax
c0007c6f:	eb 19                	jmp    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c71:	8d 78 01             	lea    edi,[eax+0x1]
c0007c74:	85 c0                	test   eax,eax
c0007c76:	0f 44 eb             	cmove  ebp,ebx
c0007c79:	0f 44 f3             	cmove  esi,ebx
c0007c7c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007c80:	74 2f                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0x61>
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	43                   	inc    ebx
c0007c85:	83 fb 0f             	cmp    ebx,0xf
c0007c88:	7f 11                	jg     c0007c9b <Phys::allocateDMA(unsigned long)+0x4b>
c0007c8a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c91:	74 de                	je     c0007c71 <Phys::allocateDMA(unsigned long)+0x21>
c0007c93:	31 c0                	xor    eax,eax
c0007c95:	43                   	inc    ebx
c0007c96:	83 fb 0f             	cmp    ebx,0xf
c0007c99:	7e ef                	jle    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c9b:	c7 04 24 cc f8 01 c0 	mov    DWORD PTR [esp],0xc001f8cc
c0007ca2:	e8 1e 8b 00 00       	call   c00107c5 <KePanic(char const*)>
c0007ca7:	31 c0                	xor    eax,eax
c0007ca9:	83 c4 2c             	add    esp,0x2c
c0007cac:	5b                   	pop    ebx
c0007cad:	5e                   	pop    esi
c0007cae:	5f                   	pop    edi
c0007caf:	5d                   	pop    ebp
c0007cb0:	c3                   	ret    
c0007cb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007cb5:	89 f2                	mov    edx,esi
c0007cb7:	c1 fa 04             	sar    edx,0x4
c0007cba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cbe:	01 f1                	add    ecx,esi
c0007cc0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007cc3:	49                   	dec    ecx
c0007cc4:	0f 48 ca             	cmovs  ecx,edx
c0007cc7:	c1 f9 04             	sar    ecx,0x4
c0007cca:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007cce:	74 06                	je     c0007cd6 <Phys::allocateDMA(unsigned long)+0x86>
c0007cd0:	89 eb                	mov    ebx,ebp
c0007cd2:	31 c0                	xor    eax,eax
c0007cd4:	eb bf                	jmp    c0007c95 <Phys::allocateDMA(unsigned long)+0x45>
c0007cd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007cda:	85 d2                	test   edx,edx
c0007cdc:	74 15                	je     c0007cf3 <Phys::allocateDMA(unsigned long)+0xa3>
c0007cde:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007ce4:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007ceb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cee:	42                   	inc    edx
c0007cef:	39 d0                	cmp    eax,edx
c0007cf1:	75 f8                	jne    c0007ceb <Phys::allocateDMA(unsigned long)+0x9b>
c0007cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cf7:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d01:	85 c0                	test   eax,eax
c0007d03:	74 13                	je     c0007d18 <Phys::allocateDMA(unsigned long)+0xc8>
c0007d05:	c7 04 24 cc f8 01 c0 	mov    DWORD PTR [esp],0xc001f8cc
c0007d0c:	e8 b4 8a 00 00       	call   c00107c5 <KePanic(char const*)>
c0007d11:	89 f8                	mov    eax,edi
c0007d13:	e9 6c ff ff ff       	jmp    c0007c84 <Phys::allocateDMA(unsigned long)+0x34>
c0007d18:	c1 e6 0c             	shl    esi,0xc
c0007d1b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d21:	eb 86                	jmp    c0007ca9 <Phys::allocateDMA(unsigned long)+0x59>

c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d27:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d31:	c1 ea 0c             	shr    edx,0xc
c0007d34:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007d3a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d3f:	c1 e8 0c             	shr    eax,0xc
c0007d42:	85 d2                	test   edx,edx
c0007d44:	74 0f                	je     c0007d55 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007d46:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d4b:	01 c2                	add    edx,eax
c0007d4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d50:	40                   	inc    eax
c0007d51:	39 d0                	cmp    eax,edx
c0007d53:	75 f8                	jne    c0007d4d <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007d55:	c3                   	ret    

c0007d56 <Phys::setPageState(unsigned long, bool)>:
c0007d56:	53                   	push   ebx
c0007d57:	8b 1d 70 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b70
c0007d5d:	ba 01 00 00 00       	mov    edx,0x1
c0007d62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	83 e1 07             	and    ecx,0x7
c0007d6b:	c1 e8 03             	shr    eax,0x3
c0007d6e:	d3 e2                	shl    edx,cl
c0007d70:	01 c3                	add    ebx,eax
c0007d72:	f6 d2                	not    dl
c0007d74:	20 13                	and    BYTE PTR [ebx],dl
c0007d76:	8b 15 70 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b70
c0007d7c:	01 d0                	add    eax,edx
c0007d7e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007d83:	d3 e2                	shl    edx,cl
c0007d85:	08 10                	or     BYTE PTR [eax],dl
c0007d87:	5b                   	pop    ebx
c0007d88:	c3                   	ret    

c0007d89 <Phys::getPageState(unsigned long)>:
c0007d89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d8d:	8b 15 70 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b70
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	83 e1 07             	and    ecx,0x7
c0007d98:	c1 e8 03             	shr    eax,0x3
c0007d9b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d9f:	d3 f8                	sar    eax,cl
c0007da1:	24 01                	and    al,0x1
c0007da3:	c3                   	ret    

c0007da4 <Phys::freePage(unsigned long)>:
c0007da4:	53                   	push   ebx
c0007da5:	83 ec 18             	sub    esp,0x18
c0007da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007dac:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007db2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007db8:	76 3c                	jbe    c0007df6 <Phys::freePage(unsigned long)+0x52>
c0007dba:	c1 e8 0c             	shr    eax,0xc
c0007dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dc0:	89 c3                	mov    ebx,eax
c0007dc2:	e8 c2 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007dc7:	84 c0                	test   al,al
c0007dc9:	74 19                	je     c0007de4 <Phys::freePage(unsigned long)+0x40>
c0007dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dce:	31 c0                	xor    eax,eax
c0007dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007dd4:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007dda:	e8 77 ff ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ddf:	83 c4 18             	add    esp,0x18
c0007de2:	5b                   	pop    ebx
c0007de3:	c3                   	ret    
c0007de4:	ba 71 f9 01 c0       	mov    edx,0xc001f971
c0007de9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007ded:	83 c4 18             	add    esp,0x18
c0007df0:	5b                   	pop    ebx
c0007df1:	e9 cf 89 00 00       	jmp    c00107c5 <KePanic(char const*)>
c0007df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df9:	b9 00 10 00 00       	mov    ecx,0x1000
c0007dfe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007e02:	e8 1c ff ff ff       	call   c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e07:	83 c4 18             	add    esp,0x18
c0007e0a:	5b                   	pop    ebx
c0007e0b:	c3                   	ret    

c0007e0c <Phys::allocatePage()>:
c0007e0c:	56                   	push   esi
c0007e0d:	53                   	push   ebx
c0007e0e:	83 ec 24             	sub    esp,0x24
c0007e11:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007e17:	89 f3                	mov    ebx,esi
c0007e19:	eb 0a                	jmp    c0007e25 <Phys::allocatePage()+0x19>
c0007e1b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007e21:	39 de                	cmp    esi,ebx
c0007e23:	74 23                	je     c0007e48 <Phys::allocatePage()+0x3c>
c0007e25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e28:	e8 5c ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e2d:	84 c0                	test   al,al
c0007e2f:	74 56                	je     c0007e87 <Phys::allocatePage()+0x7b>
c0007e31:	43                   	inc    ebx
c0007e32:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e38:	75 e1                	jne    c0007e1b <Phys::allocatePage()+0xf>
c0007e3a:	31 db                	xor    ebx,ebx
c0007e3c:	31 c9                	xor    ecx,ecx
c0007e3e:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007e44:	39 de                	cmp    esi,ebx
c0007e46:	75 dd                	jne    c0007e25 <Phys::allocatePage()+0x19>
c0007e48:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e57:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e60:	e8 8f 28 00 00       	call   c000a6f4 <VAS::scanForEviction()>
c0007e65:	85 c0                	test   eax,eax
c0007e67:	75 43                	jne    c0007eac <Phys::allocatePage()+0xa0>
c0007e69:	c7 04 24 f4 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8f4
c0007e70:	e8 50 89 00 00       	call   c00107c5 <KePanic(char const*)>
c0007e75:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e7e:	e8 06 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e83:	84 c0                	test   al,al
c0007e85:	75 aa                	jne    c0007e31 <Phys::allocatePage()+0x25>
c0007e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e8a:	be 01 00 00 00       	mov    esi,0x1
c0007e8f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007e93:	e8 be fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007e98:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e9d:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007ea3:	c1 e0 0c             	shl    eax,0xc
c0007ea6:	83 c4 24             	add    esp,0x24
c0007ea9:	5b                   	pop    ebx
c0007eaa:	5e                   	pop    esi
c0007eab:	c3                   	ret    
c0007eac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007eb0:	ba 01 00 00 00       	mov    edx,0x1
c0007eb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007eb9:	89 c2                	mov    edx,eax
c0007ebb:	c1 ea 0c             	shr    edx,0xc
c0007ebe:	89 14 24             	mov    DWORD PTR [esp],edx
c0007ec1:	e8 90 fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007eca:	eb da                	jmp    c0007ea6 <Phys::allocatePage()+0x9a>

c0007ecc <Phys::allocateContiguousPages(int)>:
c0007ecc:	57                   	push   edi
c0007ecd:	56                   	push   esi
c0007ece:	53                   	push   ebx
c0007ecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ed3:	fa                   	cli    
c0007ed4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007eda:	31 db                	xor    ebx,ebx
c0007edc:	85 db                	test   ebx,ebx
c0007ede:	75 11                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007ee0:	e8 27 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ee5:	83 fe 01             	cmp    esi,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	74 21                	je     c0007f0d <Phys::allocateContiguousPages(int)+0x41>
c0007eec:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef1:	e8 16 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ef6:	89 da                	mov    edx,ebx
c0007ef8:	c1 e2 0c             	shl    edx,0xc
c0007efb:	01 fa                	add    edx,edi
c0007efd:	39 c2                	cmp    edx,eax
c0007eff:	74 20                	je     c0007f21 <Phys::allocateContiguousPages(int)+0x55>
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	bb 01 00 00 00       	mov    ebx,0x1
c0007f09:	89 c7                	mov    edi,eax
c0007f0b:	75 e4                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007f0d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007f12:	48                   	dec    eax
c0007f13:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007f18:	75 01                	jne    c0007f1b <Phys::allocateContiguousPages(int)+0x4f>
c0007f1a:	fb                   	sti    
c0007f1b:	5b                   	pop    ebx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	5e                   	pop    esi
c0007f1f:	5f                   	pop    edi
c0007f20:	c3                   	ret    
c0007f21:	43                   	inc    ebx
c0007f22:	39 f3                	cmp    ebx,esi
c0007f24:	75 b6                	jne    c0007edc <Phys::allocateContiguousPages(int)+0x10>
c0007f26:	eb e5                	jmp    c0007f0d <Phys::allocateContiguousPages(int)+0x41>

c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f28:	56                   	push   esi
c0007f29:	53                   	push   ebx
c0007f2a:	83 ec 08             	sub    esp,0x8
c0007f2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007f31:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f37:	73 06                	jae    c0007f3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007f39:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f43:	c1 eb 0c             	shr    ebx,0xc
c0007f46:	c1 e8 0c             	shr    eax,0xc
c0007f49:	39 d8                	cmp    eax,ebx
c0007f4b:	73 17                	jae    c0007f64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007f4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f50:	8d 70 01             	lea    esi,[eax+0x1]
c0007f53:	31 d2                	xor    edx,edx
c0007f55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f59:	e8 f8 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007f5e:	39 f3                	cmp    ebx,esi
c0007f60:	89 f0                	mov    eax,esi
c0007f62:	75 e9                	jne    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007f64:	83 c4 08             	add    esp,0x8
c0007f67:	5b                   	pop    ebx
c0007f68:	5e                   	pop    esi
c0007f69:	c3                   	ret    

c0007f6a <Phys::physicalMemorySetup(unsigned int)>:
c0007f6a:	55                   	push   ebp
c0007f6b:	b8 10 00 00 00       	mov    eax,0x10
c0007f70:	57                   	push   edi
c0007f71:	56                   	push   esi
c0007f72:	53                   	push   ebx
c0007f73:	31 db                	xor    ebx,ebx
c0007f75:	83 ec 4c             	sub    esp,0x4c
c0007f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f7c:	31 c0                	xor    eax,eax
c0007f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f82:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007f89:	e8 f2 85 ff ff       	call   c0000580 <memset>
c0007f8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f92:	c7 04 24 87 f9 01 c0 	mov    DWORD PTR [esp],0xc001f987
c0007f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f9e:	05 00 10 00 00       	add    eax,0x1000
c0007fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fa7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fab:	e8 c6 2a 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007fb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007fb3:	b8 01 00 00 00       	mov    eax,0x1
c0007fb8:	43                   	inc    ebx
c0007fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fbd:	e8 94 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007fc2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fc8:	75 e6                	jne    c0007fb0 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007fca:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007fd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007fd5:	85 c0                	test   eax,eax
c0007fd7:	0f 84 37 01 00 00    	je     c0008114 <Phys::physicalMemorySetup(unsigned int)+0x1aa>
c0007fdd:	31 c0                	xor    eax,eax
c0007fdf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fe4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007fe8:	eb 68                	jmp    c0008052 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007fea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007fee:	89 c1                	mov    ecx,eax
c0007ff0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007ff4:	0f 83 bf 00 00 00    	jae    c00080b9 <Phys::physicalMemorySetup(unsigned int)+0x14f>
c0007ffa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007ffe:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008003:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008007:	39 f2                	cmp    edx,esi
c0008009:	19 f8                	sbb    eax,edi
c000800b:	73 07                	jae    c0008014 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000800d:	be 00 00 0a 00       	mov    esi,0xa0000
c0008012:	31 ff                	xor    edi,edi
c0008014:	89 f2                	mov    edx,esi
c0008016:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000801b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008021:	89 f9                	mov    ecx,edi
c0008023:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0008027:	83 d1 ff             	adc    ecx,0xffffffff
c000802a:	39 d0                	cmp    eax,edx
c000802c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0008030:	b8 00 00 00 00       	mov    eax,0x0
c0008035:	19 c8                	sbb    eax,ecx
c0008037:	0f 82 9d 01 00 00    	jb     c00081da <Phys::physicalMemorySetup(unsigned int)+0x270>
c000803d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0008041:	83 c3 18             	add    ebx,0x18
c0008044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008048:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c000804c:	0f 84 ce 00 00 00    	je     c0008120 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c0008052:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008054:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008057:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000805a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0008061:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008064:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008068:	01 f0                	add    eax,esi
c000806a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008072:	11 fa                	adc    edx,edi
c0008074:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0008078:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000807c:	c7 04 24 24 f9 01 c0 	mov    DWORD PTR [esp],0xc001f924
c0008083:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000808b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000808f:	e8 e2 29 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0008094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008098:	09 f8                	or     eax,edi
c000809a:	0f 85 80 00 00 00    	jne    c0008120 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c00080a0:	83 fd 01             	cmp    ebp,0x1
c00080a3:	75 11                	jne    c00080b6 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c00080a5:	ba 00 00 08 00       	mov    edx,0x80000
c00080aa:	89 c1                	mov    ecx,eax
c00080ac:	39 f2                	cmp    edx,esi
c00080ae:	19 f9                	sbb    ecx,edi
c00080b0:	0f 83 34 ff ff ff    	jae    c0007fea <Phys::physicalMemorySetup(unsigned int)+0x80>
c00080b6:	4d                   	dec    ebp
c00080b7:	75 84                	jne    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080b9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00080bd:	31 d2                	xor    edx,edx
c00080bf:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c00080c3:	89 c8                	mov    eax,ecx
c00080c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00080c9:	19 d1                	sbb    ecx,edx
c00080cb:	0f 82 6c ff ff ff    	jb     c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080d1:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080d6:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c00080da:	b9 00 00 00 00       	mov    ecx,0x0
c00080df:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080e3:	0f 83 54 ff ff ff    	jae    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080e9:	39 c6                	cmp    esi,eax
c00080eb:	19 d7                	sbb    edi,edx
c00080ed:	0f 83 f4 00 00 00    	jae    c00081e7 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c00080f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00080f7:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00080fb:	29 c7                	sub    edi,eax
c00080fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008101:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008105:	19 d5                	sbb    ebp,edx
c0008107:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000810b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000810f:	e9 d3 00 00 00       	jmp    c00081e7 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0008114:	c7 04 24 9f f9 01 c0 	mov    DWORD PTR [esp],0xc001f99f
c000811b:	e8 a5 86 00 00       	call   c00107c5 <KePanic(char const*)>
c0008120:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008127:	31 db                	xor    ebx,ebx
c0008129:	31 f6                	xor    esi,esi
c000812b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000812f:	bb 60 00 00 00       	mov    ebx,0x60
c0008134:	e8 1d fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008139:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000813d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0008144:	e8 0d fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008149:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c0008150:	31 c9                	xor    ecx,ecx
c0008152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008155:	43                   	inc    ebx
c0008156:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000815a:	e8 f7 fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c000815f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008165:	75 e9                	jne    c0008150 <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c0008167:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000816c:	bb 40 01 00 00       	mov    ebx,0x140
c0008171:	83 c0 20             	add    eax,0x20
c0008174:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008179:	eb 22                	jmp    c000819d <Phys::physicalMemorySetup(unsigned int)+0x233>
c000817b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000817e:	31 d2                	xor    edx,edx
c0008180:	43                   	inc    ebx
c0008181:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008185:	e8 cc fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c000818a:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000818f:	40                   	inc    eax
c0008190:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008196:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000819b:	74 07                	je     c00081a4 <Phys::physicalMemorySetup(unsigned int)+0x23a>
c000819d:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081a2:	7e d7                	jle    c000817b <Phys::physicalMemorySetup(unsigned int)+0x211>
c00081a4:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081a9:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081ae:	7f 22                	jg     c00081d2 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00081b3:	31 c0                	xor    eax,eax
c00081b5:	43                   	inc    ebx
c00081b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081ba:	e8 97 fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c00081bf:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081c4:	40                   	inc    eax
c00081c5:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081cb:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081d0:	75 d7                	jne    c00081a9 <Phys::physicalMemorySetup(unsigned int)+0x23f>
c00081d2:	83 c4 4c             	add    esp,0x4c
c00081d5:	5b                   	pop    ebx
c00081d6:	5e                   	pop    esi
c00081d7:	5f                   	pop    edi
c00081d8:	5d                   	pop    ebp
c00081d9:	c3                   	ret    
c00081da:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c00081de:	b8 00 00 08 00       	mov    eax,0x80000
c00081e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00081e7:	c7 04 24 48 f9 01 c0 	mov    DWORD PTR [esp],0xc001f948
c00081ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00081f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00081f6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00081fa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00081fe:	e8 73 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0008203:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008207:	89 34 24             	mov    DWORD PTR [esp],esi
c000820a:	e8 19 fd ff ff       	call   c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000820f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008213:	c7 04 24 ad f9 01 c0 	mov    DWORD PTR [esp],0xc001f9ad
c000821a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000821e:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c0008224:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008228:	01 e8                	add    eax,ebp
c000822a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000822e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008239:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000823e:	e8 33 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0008243:	e9 f5 fd ff ff       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>

c0008248 <Pipe::isAtty()>:
c0008248:	31 c0                	xor    eax,eax
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <Pipe::~Pipe()>:
c000824c:	83 ec 1c             	sub    esp,0x1c
c000824f:	ba 0c fa 01 c0       	mov    edx,0xc001fa0c
c0008254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008258:	89 10                	mov    DWORD PTR [eax],edx
c000825a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000825e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008261:	e8 56 11 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c0008266:	90                   	nop
c0008267:	83 c4 1c             	add    esp,0x1c
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::~Pipe()>:
c000826c:	83 ec 1c             	sub    esp,0x1c
c000826f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008273:	89 04 24             	mov    DWORD PTR [esp],eax
c0008276:	e8 d1 ff ff ff       	call   c000824c <Pipe::~Pipe()>
c000827b:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c0008283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008287:	89 04 24             	mov    DWORD PTR [esp],eax
c000828a:	e8 cd 26 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c000828f:	83 c4 1c             	add    esp,0x1c
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <Pipe::write(unsigned long long, void*, int*)>:
c0008294:	55                   	push   ebp
c0008295:	57                   	push   edi
c0008296:	56                   	push   esi
c0008297:	53                   	push   ebx
c0008298:	83 ec 1c             	sub    esp,0x1c
c000829b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000829f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082a7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082ae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00082b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082b8:	89 d8                	mov    eax,ebx
c00082ba:	89 d6                	mov    esi,edx
c00082bc:	89 d7                	mov    edi,edx
c00082be:	c1 ff 1f             	sar    edi,0x1f
c00082c1:	03 34 24             	add    esi,DWORD PTR [esp]
c00082c4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082c8:	c1 f8 1f             	sar    eax,0x1f
c00082cb:	39 f3                	cmp    ebx,esi
c00082cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d5:	19 f8                	sbb    eax,edi
c00082d7:	b8 01 00 00 00       	mov    eax,0x1
c00082dc:	72 72                	jb     c0008350 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082e1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082e5:	01 d0                	add    eax,edx
c00082e7:	99                   	cdq    
c00082e8:	f7 fb                	idiv   ebx
c00082ea:	89 d8                	mov    eax,ebx
c00082ec:	29 d0                	sub    eax,edx
c00082ee:	89 d6                	mov    esi,edx
c00082f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082f3:	89 c3                	mov    ebx,eax
c00082f5:	c1 fb 1f             	sar    ebx,0x1f
c00082f8:	39 c2                	cmp    edx,eax
c00082fa:	19 df                	sbb    edi,ebx
c00082fc:	bb 00 00 00 00       	mov    ebx,0x0
c0008301:	72 04                	jb     c0008307 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008303:	89 d3                	mov    ebx,edx
c0008305:	29 c3                	sub    ebx,eax
c0008307:	89 d0                	mov    eax,edx
c0008309:	29 d8                	sub    eax,ebx
c000830b:	74 0d                	je     c000831a <Pipe::write(unsigned long long, void*, int*)+0x86>
c000830d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008310:	89 c1                	mov    ecx,eax
c0008312:	01 f7                	add    edi,esi
c0008314:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008318:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831a:	85 db                	test   ebx,ebx
c000831c:	74 0d                	je     c000832b <Pipe::write(unsigned long long, void*, int*)+0x97>
c000831e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008322:	89 d9                	mov    ecx,ebx
c0008324:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008327:	89 c6                	mov    esi,eax
c0008329:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000832b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000832e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008333:	75 10                	jne    c0008345 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008335:	83 ec 0c             	sub    esp,0xc
c0008338:	68 c9 f9 01 c0       	push   0xc001f9c9
c000833d:	e8 83 84 00 00       	call   c00107c5 <KePanic(char const*)>
c0008342:	83 c4 10             	add    esp,0x10
c0008345:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008349:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000834c:	89 08                	mov    DWORD PTR [eax],ecx
c000834e:	31 c0                	xor    eax,eax
c0008350:	83 c4 1c             	add    esp,0x1c
c0008353:	5b                   	pop    ebx
c0008354:	5e                   	pop    esi
c0008355:	5f                   	pop    edi
c0008356:	5d                   	pop    ebp
c0008357:	c3                   	ret    

c0008358 <Pipe::read(unsigned long long, void*, int*)>:
c0008358:	55                   	push   ebp
c0008359:	57                   	push   edi
c000835a:	56                   	push   esi
c000835b:	53                   	push   ebx
c000835c:	83 ec 1c             	sub    esp,0x1c
c000835f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008363:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008367:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000836b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000836e:	89 c8                	mov    eax,ecx
c0008370:	99                   	cdq    
c0008371:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008375:	74 24                	je     c000839b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008377:	39 f9                	cmp    ecx,edi
c0008379:	89 d1                	mov    ecx,edx
c000837b:	19 f1                	sbb    ecx,esi
c000837d:	73 1c                	jae    c000839b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000837f:	fa                   	cli    
c0008380:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008386:	e8 55 cd 00 00       	call   c00150e0 <schedule()>
c000838b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008390:	48                   	dec    eax
c0008391:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008396:	75 d3                	jne    c000836b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008398:	fb                   	sti    
c0008399:	eb d0                	jmp    c000836b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000839b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000839f:	39 f8                	cmp    eax,edi
c00083a1:	89 d1                	mov    ecx,edx
c00083a3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083a7:	19 f1                	sbb    ecx,esi
c00083a9:	73 08                	jae    c00083b3 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083b3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083b6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083b9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083bd:	29 f7                	sub    edi,esi
c00083bf:	89 f8                	mov    eax,edi
c00083c1:	99                   	cdq    
c00083c2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083c6:	89 d0                	mov    eax,edx
c00083c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083cc:	19 c2                	sbb    edx,eax
c00083ce:	89 f8                	mov    eax,edi
c00083d0:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083d5:	89 ea                	mov    edx,ebp
c00083d7:	29 c2                	sub    edx,eax
c00083d9:	85 c0                	test   eax,eax
c00083db:	74 0b                	je     c00083e8 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083dd:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083e0:	89 c1                	mov    ecx,eax
c00083e2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083e8:	85 d2                	test   edx,edx
c00083ea:	74 0d                	je     c00083f9 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083ec:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083f0:	89 d1                	mov    ecx,edx
c00083f2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083f5:	89 c7                	mov    edi,eax
c00083f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083fc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083ff:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008402:	99                   	cdq    
c0008403:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008407:	89 f7                	mov    edi,esi
c0008409:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000840d:	c1 ff 1f             	sar    edi,0x1f
c0008410:	57                   	push   edi
c0008411:	56                   	push   esi
c0008412:	52                   	push   edx
c0008413:	50                   	push   eax
c0008414:	e8 87 60 01 00       	call   c001e4a0 <__umoddi3>
c0008419:	83 c4 10             	add    esp,0x10
c000841c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008421:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008424:	75 10                	jne    c0008436 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008426:	83 ec 0c             	sub    esp,0xc
c0008429:	68 e6 f9 01 c0       	push   0xc001f9e6
c000842e:	e8 92 83 00 00       	call   c00107c5 <KePanic(char const*)>
c0008433:	83 c4 10             	add    esp,0x10
c0008436:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000843a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000843e:	89 10                	mov    DWORD PTR [eax],edx
c0008440:	83 c4 1c             	add    esp,0x1c
c0008443:	31 c0                	xor    eax,eax
c0008445:	5b                   	pop    ebx
c0008446:	5e                   	pop    esi
c0008447:	5f                   	pop    edi
c0008448:	5d                   	pop    ebp
c0008449:	c3                   	ret    

c000844a <Pipe::Pipe(int)>:
c000844a:	83 ec 1c             	sub    esp,0x1c
c000844d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008451:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008459:	89 04 24             	mov    DWORD PTR [esp],eax
c000845c:	e8 95 0d 00 00       	call   c00091f6 <UnixFile::UnixFile(int)>
c0008461:	ba 0c fa 01 c0       	mov    edx,0xc001fa0c
c0008466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000846a:	89 10                	mov    DWORD PTR [eax],edx
c000846c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008470:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008474:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000847b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008486:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000848d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008491:	89 04 24             	mov    DWORD PTR [esp],eax
c0008494:	e8 6d f6 ff ff       	call   c0007b06 <malloc>
c0008499:	89 c2                	mov    edx,eax
c000849b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000849f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084aa:	90                   	nop
c00084ab:	83 c4 1c             	add    esp,0x1c
c00084ae:	c3                   	ret    
c00084af:	90                   	nop

c00084b0 <VgaText::isAtty()>:
c00084b0:	b0 01                	mov    al,0x1
c00084b2:	c3                   	ret    
c00084b3:	90                   	nop

c00084b4 <VgaText::~VgaText()>:
c00084b4:	83 ec 1c             	sub    esp,0x1c
c00084b7:	ba 54 fa 01 c0       	mov    edx,0xc001fa54
c00084bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084c0:	89 10                	mov    DWORD PTR [eax],edx
c00084c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00084c9:	e8 ee 0e 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c00084ce:	90                   	nop
c00084cf:	83 c4 1c             	add    esp,0x1c
c00084d2:	c3                   	ret    
c00084d3:	90                   	nop

c00084d4 <VgaText::~VgaText()>:
c00084d4:	83 ec 1c             	sub    esp,0x1c
c00084d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084db:	89 04 24             	mov    DWORD PTR [esp],eax
c00084de:	e8 d1 ff ff ff       	call   c00084b4 <VgaText::~VgaText()>
c00084e3:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00084eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00084f2:	e8 65 24 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c00084f7:	83 c4 1c             	add    esp,0x1c
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <VgaText::read(unsigned long long, void*, int*)>:
c00084fc:	83 ec 10             	sub    esp,0x10
c00084ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008503:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000850b:	e8 b9 47 00 00       	call   c000ccc9 <readKeyboard(VgaText*, char*, unsigned long)>
c0008510:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008514:	89 02                	mov    DWORD PTR [edx],eax
c0008516:	31 c0                	xor    eax,eax
c0008518:	83 c4 1c             	add    esp,0x1c
c000851b:	c3                   	ret    

c000851c <setTerminalScrollLock(bool)>:
c000851c:	c3                   	ret    

c000851d <doTerminalCycle()>:
c000851d:	c3                   	ret    

c000851e <addToTerminalCycle(VgaText*)>:
c000851e:	c3                   	ret    

c000851f <scrollTerminalScrollLock(int)>:
c000851f:	c3                   	ret    

c0008520 <VgaText::updateTitle()>:
c0008520:	c3                   	ret    
c0008521:	90                   	nop

c0008522 <VgaText::load()>:
c0008522:	c3                   	ret    
c0008523:	90                   	nop

c0008524 <VgaText::updateCursor()>:
c0008524:	83 ec 14             	sub    esp,0x14
c0008527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000852b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008531:	e8 36 f7 00 00       	call   c0017c6c <HalConsoleCursorUpdate(int, int)>
c0008536:	83 c4 1c             	add    esp,0x1c
c0008539:	c3                   	ret    

c000853a <VgaText::doANSI_SGR(int)>:
c000853a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008542:	85 d2                	test   edx,edx
c0008544:	75 0b                	jne    c0008551 <VgaText::doANSI_SGR(int)+0x17>
c0008546:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008549:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000854c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854f:	eb 59                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008551:	83 fa 07             	cmp    edx,0x7
c0008554:	75 0b                	jne    c0008561 <VgaText::doANSI_SGR(int)+0x27>
c0008556:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008559:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000855c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855f:	eb 49                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008561:	83 fa 1b             	cmp    edx,0x1b
c0008564:	74 e0                	je     c0008546 <VgaText::doANSI_SGR(int)+0xc>
c0008566:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008569:	83 f9 07             	cmp    ecx,0x7
c000856c:	77 09                	ja     c0008577 <VgaText::doANSI_SGR(int)+0x3d>
c000856e:	8b 14 8d a0 1b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde460]
c0008575:	eb 20                	jmp    c0008597 <VgaText::doANSI_SGR(int)+0x5d>
c0008577:	8d 4a d8             	lea    ecx,[edx-0x28]
c000857a:	83 f9 07             	cmp    ecx,0x7
c000857d:	77 09                	ja     c0008588 <VgaText::doANSI_SGR(int)+0x4e>
c000857f:	8b 14 8d a0 1b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde460]
c0008586:	eb 22                	jmp    c00085aa <VgaText::doANSI_SGR(int)+0x70>
c0008588:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000858b:	83 f9 07             	cmp    ecx,0x7
c000858e:	77 0b                	ja     c000859b <VgaText::doANSI_SGR(int)+0x61>
c0008590:	8b 14 95 58 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde5a8]
c0008597:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859a:	c3                   	ret    
c000859b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859e:	83 f9 07             	cmp    ecx,0x7
c00085a1:	77 0a                	ja     c00085ad <VgaText::doANSI_SGR(int)+0x73>
c00085a3:	8b 14 95 30 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde5d0]
c00085aa:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085ad:	c3                   	ret    

c00085ae <VgaText::setDefaultBgColour(VgaColour)>:
c00085ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085bc:	c3                   	ret    
c00085bd:	90                   	nop

c00085be <VgaText::setDefaultFgColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085cc:	c3                   	ret    
c00085cd:	90                   	nop

c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ce:	53                   	push   ebx
c00085cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085db:	51                   	push   ecx
c00085dc:	e8 cd ff ff ff       	call   c00085ae <VgaText::setDefaultBgColour(VgaColour)>
c00085e1:	58                   	pop    eax
c00085e2:	5a                   	pop    edx
c00085e3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085eb:	5b                   	pop    ebx
c00085ec:	eb d0                	jmp    c00085be <VgaText::setDefaultFgColour(VgaColour)>

c00085ee <VgaText::setTitleTextColour(VgaColour)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f9:	c3                   	ret    

c00085fa <VgaText::setTitleColour(VgaColour)>:
c00085fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008602:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008605:	c3                   	ret    

c0008606 <VgaText::setTitle(char*)>:
c0008606:	c3                   	ret    
c0008607:	90                   	nop

c0008608 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008608:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000860c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008611:	24 0f                	and    al,0xf
c0008613:	c1 e2 04             	shl    edx,0x4
c0008616:	08 d0                	or     al,dl
c0008618:	c3                   	ret    
c0008619:	90                   	nop

c000861a <VgaText::scrollScreen()>:
c000861a:	55                   	push   ebp
c000861b:	57                   	push   edi
c000861c:	56                   	push   esi
c000861d:	be 01 00 00 00       	mov    esi,0x1
c0008622:	53                   	push   ebx
c0008623:	83 ec 0c             	sub    esp,0xc
c0008626:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000862a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000862d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008633:	31 ff                	xor    edi,edi
c0008635:	01 e9                	add    ecx,ebp
c0008637:	8a 01                	mov    al,BYTE PTR [ecx]
c0008639:	83 fe 18             	cmp    esi,0x18
c000863c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008642:	75 20                	jne    c0008664 <VgaText::scrollScreen()+0x4a>
c0008644:	f7 c7 01 00 00 00    	test   edi,0x1
c000864a:	74 15                	je     c0008661 <VgaText::scrollScreen()+0x47>
c000864c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008650:	50                   	push   eax
c0008651:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008655:	50                   	push   eax
c0008656:	e8 ad ff ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c000865b:	5a                   	pop    edx
c000865c:	5a                   	pop    edx
c000865d:	88 01                	mov    BYTE PTR [ecx],al
c000865f:	eb 03                	jmp    c0008664 <VgaText::scrollScreen()+0x4a>
c0008661:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008664:	47                   	inc    edi
c0008665:	41                   	inc    ecx
c0008666:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000866c:	75 c9                	jne    c0008637 <VgaText::scrollScreen()+0x1d>
c000866e:	46                   	inc    esi
c000866f:	83 fe 19             	cmp    esi,0x19
c0008672:	75 b9                	jne    c000862d <VgaText::scrollScreen()+0x13>
c0008674:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000867a:	75 1f                	jne    c000869b <VgaText::scrollScreen()+0x81>
c000867c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008680:	74 05                	je     c0008687 <VgaText::scrollScreen()+0x6d>
c0008682:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008685:	eb 14                	jmp    c000869b <VgaText::scrollScreen()+0x81>
c0008687:	50                   	push   eax
c0008688:	50                   	push   eax
c0008689:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000868d:	50                   	push   eax
c000868e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008692:	50                   	push   eax
c0008693:	e8 60 f4 00 00       	call   c0017af8 <HalConsoleScroll(int, int)>
c0008698:	83 c4 10             	add    esp,0x10
c000869b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869f:	83 c4 0c             	add    esp,0xc
c00086a2:	5b                   	pop    ebx
c00086a3:	5e                   	pop    esi
c00086a4:	5f                   	pop    edi
c00086a5:	5d                   	pop    ebp
c00086a6:	e9 79 fe ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c00086ab:	90                   	nop

c00086ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00086ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086b1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b6:	c1 e0 08             	shl    eax,0x8
c00086b9:	09 d0                	or     eax,edx
c00086bb:	c3                   	ret    

c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086bc:	55                   	push   ebp
c00086bd:	57                   	push   edi
c00086be:	56                   	push   esi
c00086bf:	53                   	push   ebx
c00086c0:	83 ec 1c             	sub    esp,0x1c
c00086c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086db:	0f b6 c3             	movzx  eax,bl
c00086de:	50                   	push   eax
c00086df:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e4:	50                   	push   eax
c00086e5:	e8 1e ff ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ea:	5a                   	pop    edx
c00086eb:	59                   	pop    ecx
c00086ec:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086f1:	0f b6 c0             	movzx  eax,al
c00086f4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f8:	50                   	push   eax
c00086f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086fd:	e8 aa ff ff ff       	call   c00086ac <VgaText::combineCharAndColour(char, unsigned char)>
c0008702:	5a                   	pop    edx
c0008703:	6b d7 50             	imul   edx,edi,0x50
c0008706:	59                   	pop    ecx
c0008707:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000870a:	01 f2                	add    edx,esi
c000870c:	0f b7 d2             	movzx  edx,dx
c000870f:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008713:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008719:	75 28                	jne    c0008743 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000871b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008723:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008727:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000872b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008733:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008737:	83 c4 1c             	add    esp,0x1c
c000873a:	5b                   	pop    ebx
c000873b:	5e                   	pop    esi
c000873c:	5f                   	pop    edi
c000873d:	5d                   	pop    ebp
c000873e:	e9 bd f4 00 00       	jmp    c0017c00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008743:	83 c4 1c             	add    esp,0x1c
c0008746:	5b                   	pop    ebx
c0008747:	5e                   	pop    esi
c0008748:	5f                   	pop    edi
c0008749:	5d                   	pop    ebp
c000874a:	c3                   	ret    
c000874b:	90                   	nop

c000874c <VgaText::getCursorX()>:
c000874c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008750:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008753:	c3                   	ret    

c0008754 <VgaText::getCursorY()>:
c0008754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008758:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000875b:	c3                   	ret    

c000875c <VgaText::setCursor(int, int)>:
c000875c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008764:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000876b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876e:	e9 b1 fd ff ff       	jmp    c0008524 <VgaText::updateCursor()>

c0008773 <setActiveTerminal(VgaText*)>:
c0008773:	53                   	push   ebx
c0008774:	83 ec 08             	sub    esp,0x8
c0008777:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000877b:	85 db                	test   ebx,ebx
c000877d:	75 11                	jne    c0008790 <setActiveTerminal(VgaText*)+0x1d>
c000877f:	c7 44 24 10 20 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa20
c0008787:	83 c4 08             	add    esp,0x8
c000878a:	5b                   	pop    ebx
c000878b:	e9 35 80 00 00       	jmp    c00107c5 <KePanic(char const*)>
c0008790:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008795:	85 c0                	test   eax,eax
c0008797:	74 0c                	je     c00087a5 <setActiveTerminal(VgaText*)+0x32>
c0008799:	83 ec 0c             	sub    esp,0xc
c000879c:	50                   	push   eax
c000879d:	e8 82 fd ff ff       	call   c0008524 <VgaText::updateCursor()>
c00087a2:	83 c4 10             	add    esp,0x10
c00087a5:	50                   	push   eax
c00087a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a9:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c00087af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087b2:	53                   	push   ebx
c00087b3:	e8 a4 ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c00087b8:	83 c4 18             	add    esp,0x18
c00087bb:	5b                   	pop    ebx
c00087bc:	c3                   	ret    
c00087bd:	90                   	nop

c00087be <VgaText::clearScreen()>:
c00087be:	57                   	push   edi
c00087bf:	56                   	push   esi
c00087c0:	31 f6                	xor    esi,esi
c00087c2:	53                   	push   ebx
c00087c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c7:	52                   	push   edx
c00087c8:	6a 00                	push   0x0
c00087ca:	6a 00                	push   0x0
c00087cc:	53                   	push   ebx
c00087cd:	e8 8a ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087dc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087df:	7e 20                	jle    c0008801 <VgaText::clearScreen()+0x43>
c00087e1:	31 ff                	xor    edi,edi
c00087e3:	50                   	push   eax
c00087e4:	50                   	push   eax
c00087e5:	56                   	push   esi
c00087e6:	57                   	push   edi
c00087e7:	47                   	inc    edi
c00087e8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087eb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ee:	6a 20                	push   0x20
c00087f0:	53                   	push   ebx
c00087f1:	e8 c6 fe ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f6:	83 c4 20             	add    esp,0x20
c00087f9:	83 ff 50             	cmp    edi,0x50
c00087fc:	75 e5                	jne    c00087e3 <VgaText::clearScreen()+0x25>
c00087fe:	46                   	inc    esi
c00087ff:	eb db                	jmp    c00087dc <VgaText::clearScreen()+0x1e>
c0008801:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008808:	5b                   	pop    ebx
c0008809:	5e                   	pop    esi
c000880a:	5f                   	pop    edi
c000880b:	c3                   	ret    

c000880c <VgaText::setCursorX(int)>:
c000880c:	83 ec 10             	sub    esp,0x10
c000880f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008813:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000881a:	50                   	push   eax
c000881b:	e8 3c ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008820:	83 c4 1c             	add    esp,0x1c
c0008823:	c3                   	ret    

c0008824 <VgaText::setCursorY(int)>:
c0008824:	83 ec 10             	sub    esp,0x10
c0008827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000882b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008832:	50                   	push   eax
c0008833:	e8 24 ff ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008838:	83 c4 1c             	add    esp,0x1c
c000883b:	c3                   	ret    

c000883c <VgaText::incrementCursor(bool)>:
c000883c:	53                   	push   ebx
c000883d:	83 ec 18             	sub    esp,0x18
c0008840:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008844:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c0008848:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000884b:	40                   	inc    eax
c000884c:	83 f8 50             	cmp    eax,0x50
c000884f:	74 05                	je     c0008856 <VgaText::incrementCursor(bool)+0x1a>
c0008851:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008854:	eb 2c                	jmp    c0008882 <VgaText::incrementCursor(bool)+0x46>
c0008856:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000885d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008860:	8d 48 01             	lea    ecx,[eax+0x1]
c0008863:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008866:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008869:	75 17                	jne    c0008882 <VgaText::incrementCursor(bool)+0x46>
c000886b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000886f:	83 ec 0c             	sub    esp,0xc
c0008872:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008875:	53                   	push   ebx
c0008876:	e8 9f fd ff ff       	call   c000861a <VgaText::scrollScreen()>
c000887b:	83 c4 10             	add    esp,0x10
c000887e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008882:	84 d2                	test   dl,dl
c0008884:	74 0d                	je     c0008893 <VgaText::incrementCursor(bool)+0x57>
c0008886:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000888a:	83 c4 18             	add    esp,0x18
c000888d:	5b                   	pop    ebx
c000888e:	e9 91 fc ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c0008893:	83 c4 18             	add    esp,0x18
c0008896:	5b                   	pop    ebx
c0008897:	c3                   	ret    

c0008898 <VgaText::decrementCursor(bool)>:
c0008898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000889c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00088a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 04                	je     c00088ab <VgaText::decrementCursor(bool)+0x13>
c00088a7:	48                   	dec    eax
c00088a8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088ab:	84 c9                	test   cl,cl
c00088ad:	74 09                	je     c00088b8 <VgaText::decrementCursor(bool)+0x20>
c00088af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088b3:	e9 6c fc ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c00088b8:	c3                   	ret    
c00088b9:	90                   	nop

c00088ba <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ba:	53                   	push   ebx
c00088bb:	83 ec 08             	sub    esp,0x8
c00088be:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088cf:	3c 07                	cmp    al,0x7
c00088d1:	75 21                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c00088d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088db:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088e3:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088eb:	83 c4 08             	add    esp,0x8
c00088ee:	5b                   	pop    ebx
c00088ef:	e9 d4 2f 00 00       	jmp    c000b8c8 <Krnl::beep(int, int, bool)>
c00088f4:	3c 0d                	cmp    al,0xd
c00088f6:	75 09                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c00088f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ff:	eb 2c                	jmp    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c0008901:	3c 0a                	cmp    al,0xa
c0008903:	75 31                	jne    c0008936 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c0008905:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000890c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000890f:	8d 50 01             	lea    edx,[eax+0x1]
c0008912:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008915:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008918:	75 0f                	jne    c0008929 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c000891a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000891d:	83 ec 0c             	sub    esp,0xc
c0008920:	53                   	push   ebx
c0008921:	e8 f4 fc ff ff       	call   c000861a <VgaText::scrollScreen()>
c0008926:	83 c4 10             	add    esp,0x10
c0008929:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000892d:	83 c4 08             	add    esp,0x8
c0008930:	5b                   	pop    ebx
c0008931:	e9 ee fb ff ff       	jmp    c0008524 <VgaText::updateCursor()>
c0008936:	3c 08                	cmp    al,0x8
c0008938:	75 25                	jne    c000895f <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c000893a:	50                   	push   eax
c000893b:	50                   	push   eax
c000893c:	6a 01                	push   0x1
c000893e:	53                   	push   ebx
c000893f:	e8 54 ff ff ff       	call   c0008898 <VgaText::decrementCursor(bool)>
c0008944:	5a                   	pop    edx
c0008945:	59                   	pop    ecx
c0008946:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008949:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000894f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008952:	6a 20                	push   0x20
c0008954:	53                   	push   ebx
c0008955:	e8 62 fd ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000895a:	83 c4 28             	add    esp,0x28
c000895d:	5b                   	pop    ebx
c000895e:	c3                   	ret    
c000895f:	83 ec 08             	sub    esp,0x8
c0008962:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008965:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008968:	51                   	push   ecx
c0008969:	52                   	push   edx
c000896a:	50                   	push   eax
c000896b:	53                   	push   ebx
c000896c:	e8 4b fd ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008971:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008975:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000897d:	83 c4 28             	add    esp,0x28
c0008980:	5b                   	pop    ebx
c0008981:	e9 b6 fe ff ff       	jmp    c000883c <VgaText::incrementCursor(bool)>

c0008986 <VgaText::putchar(char)>:
c0008986:	56                   	push   esi
c0008987:	53                   	push   ebx
c0008988:	83 ec 14             	sub    esp,0x14
c000898b:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c0008990:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008994:	3c 5b                	cmp    al,0x5b
c0008996:	75 18                	jne    c00089b0 <VgaText::putchar(char)+0x2a>
c0008998:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000899c:	74 1f                	je     c00089bd <VgaText::putchar(char)+0x37>
c000899e:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089a4:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089ab:	e9 bc 00 00 00       	jmp    c0008a6c <VgaText::putchar(char)+0xe6>
c00089b0:	3c 1b                	cmp    al,0x1b
c00089b2:	75 09                	jne    c00089bd <VgaText::putchar(char)+0x37>
c00089b4:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b8:	e9 af 00 00 00       	jmp    c0008a6c <VgaText::putchar(char)+0xe6>
c00089bd:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c00089c0:	84 d2                	test   dl,dl
c00089c2:	0f 84 94 00 00 00    	je     c0008a5c <VgaText::putchar(char)+0xd6>
c00089c8:	88 c1                	mov    cl,al
c00089ca:	80 e9 40             	sub    cl,0x40
c00089cd:	80 f9 3e             	cmp    cl,0x3e
c00089d0:	77 76                	ja     c0008a48 <VgaText::putchar(char)+0xc2>
c00089d2:	3c 6d                	cmp    al,0x6d
c00089d4:	75 47                	jne    c0008a1d <VgaText::putchar(char)+0x97>
c00089d6:	31 f6                	xor    esi,esi
c00089d8:	31 c9                	xor    ecx,ecx
c00089da:	31 c0                	xor    eax,eax
c00089dc:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089df:	7e 2d                	jle    c0008a0e <VgaText::putchar(char)+0x88>
c00089e1:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c00089e6:	80 f9 3b             	cmp    cl,0x3b
c00089e9:	75 17                	jne    c0008a02 <VgaText::putchar(char)+0x7c>
c00089eb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00089ef:	50                   	push   eax
c00089f0:	53                   	push   ebx
c00089f1:	e8 44 fb ff ff       	call   c000853a <VgaText::doANSI_SGR(int)>
c00089f6:	59                   	pop    ecx
c00089f7:	31 c9                	xor    ecx,ecx
c00089f9:	58                   	pop    eax
c00089fa:	31 c0                	xor    eax,eax
c00089fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a00:	eb 09                	jmp    c0008a0b <VgaText::putchar(char)+0x85>
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008a09:	88 d1                	mov    cl,dl
c0008a0b:	46                   	inc    esi
c0008a0c:	eb ce                	jmp    c00089dc <VgaText::putchar(char)+0x56>
c0008a0e:	84 c9                	test   cl,cl
c0008a10:	74 2e                	je     c0008a40 <VgaText::putchar(char)+0xba>
c0008a12:	50                   	push   eax
c0008a13:	53                   	push   ebx
c0008a14:	e8 21 fb ff ff       	call   c000853a <VgaText::doANSI_SGR(int)>
c0008a19:	58                   	pop    eax
c0008a1a:	5a                   	pop    edx
c0008a1b:	eb 23                	jmp    c0008a40 <VgaText::putchar(char)+0xba>
c0008a1d:	3c 4a                	cmp    al,0x4a
c0008a1f:	75 1f                	jne    c0008a40 <VgaText::putchar(char)+0xba>
c0008a21:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a25:	75 19                	jne    c0008a40 <VgaText::putchar(char)+0xba>
c0008a27:	83 ec 0c             	sub    esp,0xc
c0008a2a:	53                   	push   ebx
c0008a2b:	e8 8e fd ff ff       	call   c00087be <VgaText::clearScreen()>
c0008a30:	83 c4 0c             	add    esp,0xc
c0008a33:	6a 00                	push   0x0
c0008a35:	6a 00                	push   0x0
c0008a37:	53                   	push   ebx
c0008a38:	e8 1f fd ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008a3d:	83 c4 10             	add    esp,0x10
c0008a40:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a46:	eb 24                	jmp    c0008a6c <VgaText::putchar(char)+0xe6>
c0008a48:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008a4b:	83 fa 0e             	cmp    edx,0xe
c0008a4e:	7f 1c                	jg     c0008a6c <VgaText::putchar(char)+0xe6>
c0008a50:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008a53:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a56:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008a5a:	eb 10                	jmp    c0008a6c <VgaText::putchar(char)+0xe6>
c0008a5c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a5f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a62:	50                   	push   eax
c0008a63:	53                   	push   ebx
c0008a64:	e8 51 fe ff ff       	call   c00088ba <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a69:	83 c4 10             	add    esp,0x10
c0008a6c:	83 c4 14             	add    esp,0x14
c0008a6f:	5b                   	pop    ebx
c0008a70:	5e                   	pop    esi
c0008a71:	c3                   	ret    

c0008a72 <VgaText::putx(unsigned int)>:
c0008a72:	57                   	push   edi
c0008a73:	b9 11 00 00 00       	mov    ecx,0x11
c0008a78:	56                   	push   esi
c0008a79:	be 2e fa 01 c0       	mov    esi,0xc001fa2e
c0008a7e:	53                   	push   ebx
c0008a7f:	83 ec 20             	sub    esp,0x20
c0008a82:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a86:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a8a:	fc                   	cld    
c0008a8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a8d:	be 08 00 00 00       	mov    esi,0x8
c0008a92:	50                   	push   eax
c0008a93:	50                   	push   eax
c0008a94:	89 d8                	mov    eax,ebx
c0008a96:	c1 e8 1c             	shr    eax,0x1c
c0008a99:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a9e:	c1 e3 04             	shl    ebx,0x4
c0008aa1:	50                   	push   eax
c0008aa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008aa6:	e8 db fe ff ff       	call   c0008986 <VgaText::putchar(char)>
c0008aab:	83 c4 10             	add    esp,0x10
c0008aae:	4e                   	dec    esi
c0008aaf:	75 e1                	jne    c0008a92 <VgaText::putx(unsigned int)+0x20>
c0008ab1:	83 c4 20             	add    esp,0x20
c0008ab4:	5b                   	pop    ebx
c0008ab5:	5e                   	pop    esi
c0008ab6:	5f                   	pop    edi
c0008ab7:	c3                   	ret    

c0008ab8 <VgaText::puts(char const*)>:
c0008ab8:	53                   	push   ebx
c0008ab9:	83 ec 08             	sub    esp,0x8
c0008abc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ac0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ac3:	84 c0                	test   al,al
c0008ac5:	74 12                	je     c0008ad9 <VgaText::puts(char const*)+0x21>
c0008ac7:	51                   	push   ecx
c0008ac8:	43                   	inc    ebx
c0008ac9:	51                   	push   ecx
c0008aca:	50                   	push   eax
c0008acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008acf:	e8 b2 fe ff ff       	call   c0008986 <VgaText::putchar(char)>
c0008ad4:	83 c4 10             	add    esp,0x10
c0008ad7:	eb e7                	jmp    c0008ac0 <VgaText::puts(char const*)+0x8>
c0008ad9:	83 c4 08             	add    esp,0x8
c0008adc:	5b                   	pop    ebx
c0008add:	c3                   	ret    

c0008ade <VgaText::write(unsigned long long, void*, int*)>:
c0008ade:	55                   	push   ebp
c0008adf:	57                   	push   edi
c0008ae0:	56                   	push   esi
c0008ae1:	53                   	push   ebx
c0008ae2:	83 ec 0c             	sub    esp,0xc
c0008ae5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ae9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008aed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008af1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008af8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008afb:	39 eb                	cmp    ebx,ebp
c0008afd:	74 13                	je     c0008b12 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aff:	50                   	push   eax
c0008b00:	43                   	inc    ebx
c0008b01:	50                   	push   eax
c0008b02:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b06:	50                   	push   eax
c0008b07:	56                   	push   esi
c0008b08:	e8 79 fe ff ff       	call   c0008986 <VgaText::putchar(char)>
c0008b0d:	83 c4 10             	add    esp,0x10
c0008b10:	eb e9                	jmp    c0008afb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b12:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1d:	89 38                	mov    DWORD PTR [eax],edi
c0008b1f:	83 c4 0c             	add    esp,0xc
c0008b22:	31 c0                	xor    eax,eax
c0008b24:	5b                   	pop    ebx
c0008b25:	5e                   	pop    esi
c0008b26:	5f                   	pop    edi
c0008b27:	5d                   	pop    ebp
c0008b28:	c3                   	ret    
c0008b29:	90                   	nop

c0008b2a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b2a:	55                   	push   ebp
c0008b2b:	57                   	push   edi
c0008b2c:	56                   	push   esi
c0008b2d:	53                   	push   ebx
c0008b2e:	83 ec 0c             	sub    esp,0xc
c0008b31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b41:	50                   	push   eax
c0008b42:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b47:	50                   	push   eax
c0008b48:	e8 bb fa ff ff       	call   c0008608 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b4d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b51:	5a                   	pop    edx
c0008b52:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b55:	59                   	pop    ecx
c0008b56:	0f b6 e8             	movzx  ebp,al
c0008b59:	0f b7 f6             	movzx  esi,si
c0008b5c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b60:	01 f6                	add    esi,esi
c0008b62:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b65:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b68:	84 c0                	test   al,al
c0008b6a:	0f 84 ec 00 00 00    	je     c0008c5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008b70:	3c 0d                	cmp    al,0xd
c0008b72:	75 0c                	jne    c0008b80 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008b74:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7b:	e9 d6 00 00 00       	jmp    c0008c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b80:	3c 0a                	cmp    al,0xa
c0008b82:	75 44                	jne    c0008bc8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008b84:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b8b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b91:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b94:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b97:	75 0f                	jne    c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008b99:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b9c:	83 ec 0c             	sub    esp,0xc
c0008b9f:	53                   	push   ebx
c0008ba0:	e8 75 fa ff ff       	call   c000861a <VgaText::scrollScreen()>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	53                   	push   ebx
c0008bac:	e8 73 f9 ff ff       	call   c0008524 <VgaText::updateCursor()>
c0008bb1:	83 c4 10             	add    esp,0x10
c0008bb4:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bb8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bbb:	0f b7 f6             	movzx  esi,si
c0008bbe:	01 f6                	add    esi,esi
c0008bc0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bc3:	e9 8e 00 00 00       	jmp    c0008c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bc8:	3c 08                	cmp    al,0x8
c0008bca:	75 34                	jne    c0008c00 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008bcc:	51                   	push   ecx
c0008bcd:	51                   	push   ecx
c0008bce:	6a 01                	push   0x1
c0008bd0:	53                   	push   ebx
c0008bd1:	e8 c2 fc ff ff       	call   c0008898 <VgaText::decrementCursor(bool)>
c0008bd6:	5e                   	pop    esi
c0008bd7:	58                   	pop    eax
c0008bd8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bdb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bde:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008be1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008be4:	6a 20                	push   0x20
c0008be6:	53                   	push   ebx
c0008be7:	e8 d0 fa ff ff       	call   c00086bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bec:	83 c4 20             	add    esp,0x20
c0008bef:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bf3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bf6:	0f b7 f6             	movzx  esi,si
c0008bf9:	01 f6                	add    esi,esi
c0008bfb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bfe:	eb 56                	jmp    c0008c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c00:	52                   	push   edx
c0008c01:	52                   	push   edx
c0008c02:	55                   	push   ebp
c0008c03:	50                   	push   eax
c0008c04:	e8 a3 fa ff ff       	call   c00086ac <VgaText::combineCharAndColour(char, unsigned char)>
c0008c09:	83 c4 10             	add    esp,0x10
c0008c0c:	66 89 06             	mov    WORD PTR [esi],ax
c0008c0f:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008c15:	75 1d                	jne    c0008c34 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008c17:	83 ec 0c             	sub    esp,0xc
c0008c1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c28:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c2b:	50                   	push   eax
c0008c2c:	e8 cf ef 00 00       	call   c0017c00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c31:	83 c4 20             	add    esp,0x20
c0008c34:	50                   	push   eax
c0008c35:	83 c6 02             	add    esi,0x2
c0008c38:	50                   	push   eax
c0008c39:	6a 00                	push   0x0
c0008c3b:	53                   	push   ebx
c0008c3c:	e8 fb fb ff ff       	call   c000883c <VgaText::incrementCursor(bool)>
c0008c41:	83 c4 10             	add    esp,0x10
c0008c44:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c48:	75 0c                	jne    c0008c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c4a:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c4e:	0f b7 f6             	movzx  esi,si
c0008c51:	01 f6                	add    esi,esi
c0008c53:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c56:	47                   	inc    edi
c0008c57:	e9 09 ff ff ff       	jmp    c0008b65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c5c:	83 ec 0c             	sub    esp,0xc
c0008c5f:	53                   	push   ebx
c0008c60:	e8 bf f8 ff ff       	call   c0008524 <VgaText::updateCursor()>
c0008c65:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c6c:	83 c4 1c             	add    esp,0x1c
c0008c6f:	5b                   	pop    ebx
c0008c70:	5e                   	pop    esi
c0008c71:	5f                   	pop    edi
c0008c72:	5d                   	pop    ebp
c0008c73:	c3                   	ret    

c0008c74 <VgaText::VgaText(char const*)>:
c0008c74:	56                   	push   esi
c0008c75:	53                   	push   ebx
c0008c76:	83 ec 14             	sub    esp,0x14
c0008c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008c85:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c88:	e8 69 05 00 00       	call   c00091f6 <UnixFile::UnixFile(int)>
c0008c8d:	ba 54 fa 01 c0       	mov    edx,0xc001fa54
c0008c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c96:	89 10                	mov    DWORD PTR [eax],edx
c0008c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c9c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cba:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cee:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cf5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008cfc:	e8 1f 09 00 00       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0008d01:	89 c2                	mov    edx,eax
c0008d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d0a:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d17:	89 c6                	mov    esi,eax
c0008d19:	e8 ee f0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0008d1e:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008d26:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008d2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d31:	e8 0c 10 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d3d:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008d45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d50:	e8 2b 78 ff ff       	call   c0000580 <memset>
c0008d55:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d5d:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d69:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d6c:	e8 5d f8 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d71:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d88:	e8 cf f9 ff ff       	call   c000875c <VgaText::setCursor(int, int)>
c0008d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d91:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d94:	e8 25 fa ff ff       	call   c00087be <VgaText::clearScreen()>
c0008d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d9d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008da1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da5:	05 82 00 00 00       	add    eax,0x82
c0008daa:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008db2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008dba:	89 04 24             	mov    DWORD PTR [esp],eax
c0008dbd:	e8 be 77 ff ff       	call   c0000580 <memset>
c0008dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc6:	05 02 01 00 00       	add    eax,0x102
c0008dcb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008dd3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0008dde:	e8 9d 77 ff ff       	call   c0000580 <memset>
c0008de3:	90                   	nop
c0008de4:	83 c4 14             	add    esp,0x14
c0008de7:	5b                   	pop    ebx
c0008de8:	5e                   	pop    esi
c0008de9:	c3                   	ret    

c0008dea <VgaText::receiveKey(unsigned char)>:
c0008dea:	55                   	push   ebp
c0008deb:	57                   	push   edi
c0008dec:	56                   	push   esi
c0008ded:	53                   	push   ebx
c0008dee:	83 ec 1c             	sub    esp,0x1c
c0008df1:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008df5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008df9:	84 db                	test   bl,bl
c0008dfb:	0f 84 3f 01 00 00    	je     c0008f40 <VgaText::receiveKey(unsigned char)+0x156>
c0008e01:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008e07:	80 fb 08             	cmp    bl,0x8
c0008e0a:	75 68                	jne    c0008e74 <VgaText::receiveKey(unsigned char)+0x8a>
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	57                   	push   edi
c0008e10:	e8 0b 78 ff ff       	call   c0000620 <strlen>
c0008e15:	83 c4 10             	add    esp,0x10
c0008e18:	85 c0                	test   eax,eax
c0008e1a:	0f 84 e6 00 00 00    	je     c0008f06 <VgaText::receiveKey(unsigned char)+0x11c>
c0008e20:	50                   	push   eax
c0008e21:	50                   	push   eax
c0008e22:	6a 08                	push   0x8
c0008e24:	56                   	push   esi
c0008e25:	e8 5c fb ff ff       	call   c0008986 <VgaText::putchar(char)>
c0008e2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e2d:	e8 ee 77 ff ff       	call   c0000620 <strlen>
c0008e32:	83 c4 10             	add    esp,0x10
c0008e35:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008e3c:	3c 1f                	cmp    al,0x1f
c0008e3e:	7f 1e                	jg     c0008e5e <VgaText::receiveKey(unsigned char)+0x74>
c0008e40:	88 c2                	mov    dl,al
c0008e42:	80 ea 08             	sub    dl,0x8
c0008e45:	80 fa 02             	cmp    dl,0x2
c0008e48:	76 14                	jbe    c0008e5e <VgaText::receiveKey(unsigned char)+0x74>
c0008e4a:	3c 0d                	cmp    al,0xd
c0008e4c:	74 10                	je     c0008e5e <VgaText::receiveKey(unsigned char)+0x74>
c0008e4e:	55                   	push   ebp
c0008e4f:	55                   	push   ebp
c0008e50:	68 3f fa 01 c0       	push   0xc001fa3f
c0008e55:	56                   	push   esi
c0008e56:	e8 5d fc ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0008e5b:	83 c4 10             	add    esp,0x10
c0008e5e:	83 ec 0c             	sub    esp,0xc
c0008e61:	57                   	push   edi
c0008e62:	e8 b9 77 ff ff       	call   c0000620 <strlen>
c0008e67:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008e6f:	e9 8f 00 00 00       	jmp    c0008f03 <VgaText::receiveKey(unsigned char)+0x119>
c0008e74:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008e7a:	83 ec 0c             	sub    esp,0xc
c0008e7d:	50                   	push   eax
c0008e7e:	e8 9d 77 ff ff       	call   c0000620 <strlen>
c0008e83:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e86:	89 c5                	mov    ebp,eax
c0008e88:	e8 93 77 ff ff       	call   c0000620 <strlen>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008e94:	3d 80 00 00 00       	cmp    eax,0x80
c0008e99:	0f 87 a1 00 00 00    	ja     c0008f40 <VgaText::receiveKey(unsigned char)+0x156>
c0008e9f:	88 d8                	mov    al,bl
c0008ea1:	fe c8                	dec    al
c0008ea3:	3c 1e                	cmp    al,0x1e
c0008ea5:	77 37                	ja     c0008ede <VgaText::receiveKey(unsigned char)+0xf4>
c0008ea7:	88 d8                	mov    al,bl
c0008ea9:	2c 09                	sub    al,0x9
c0008eab:	3c 01                	cmp    al,0x1
c0008ead:	76 2f                	jbe    c0008ede <VgaText::receiveKey(unsigned char)+0xf4>
c0008eaf:	80 fb 0d             	cmp    bl,0xd
c0008eb2:	74 2a                	je     c0008ede <VgaText::receiveKey(unsigned char)+0xf4>
c0008eb4:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008eb7:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008eba:	68 45 fa 01 c0       	push   0xc001fa45
c0008ebf:	56                   	push   esi
c0008ec0:	e8 65 fc ff ff       	call   c0008b2a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ec5:	88 d8                	mov    al,bl
c0008ec7:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008eca:	04 40                	add    al,0x40
c0008ecc:	0f b6 c0             	movzx  eax,al
c0008ecf:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008ed2:	50                   	push   eax
c0008ed3:	56                   	push   esi
c0008ed4:	e8 e1 f9 ff ff       	call   c00088ba <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ed9:	83 c4 20             	add    esp,0x20
c0008edc:	eb 0f                	jmp    c0008eed <VgaText::receiveKey(unsigned char)+0x103>
c0008ede:	51                   	push   ecx
c0008edf:	0f be c3             	movsx  eax,bl
c0008ee2:	51                   	push   ecx
c0008ee3:	50                   	push   eax
c0008ee4:	56                   	push   esi
c0008ee5:	e8 9c fa ff ff       	call   c0008986 <VgaText::putchar(char)>
c0008eea:	83 c4 10             	add    esp,0x10
c0008eed:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008ef1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008ef6:	52                   	push   edx
c0008ef7:	52                   	push   edx
c0008ef8:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008efc:	50                   	push   eax
c0008efd:	57                   	push   edi
c0008efe:	e8 2d 7a ff ff       	call   c0000930 <strcat>
c0008f03:	83 c4 10             	add    esp,0x10
c0008f06:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008f0d:	75 0f                	jne    c0008f1e <VgaText::receiveKey(unsigned char)+0x134>
c0008f0f:	80 fb 1c             	cmp    bl,0x1c
c0008f12:	77 2c                	ja     c0008f40 <VgaText::receiveKey(unsigned char)+0x156>
c0008f14:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f19:	0f a3 d8             	bt     eax,ebx
c0008f1c:	73 22                	jae    c0008f40 <VgaText::receiveKey(unsigned char)+0x156>
c0008f1e:	50                   	push   eax
c0008f1f:	81 c6 02 01 00 00    	add    esi,0x102
c0008f25:	50                   	push   eax
c0008f26:	57                   	push   edi
c0008f27:	56                   	push   esi
c0008f28:	e8 03 7a ff ff       	call   c0000930 <strcat>
c0008f2d:	83 c4 0c             	add    esp,0xc
c0008f30:	68 80 00 00 00       	push   0x80
c0008f35:	6a 00                	push   0x0
c0008f37:	57                   	push   edi
c0008f38:	e8 43 76 ff ff       	call   c0000580 <memset>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	83 c4 1c             	add    esp,0x1c
c0008f43:	5b                   	pop    ebx
c0008f44:	5e                   	pop    esi
c0008f45:	5f                   	pop    edi
c0008f46:	5d                   	pop    ebp
c0008f47:	c3                   	ret    

c0008f48 <VgaText::doUpdate()>:
c0008f48:	c3                   	ret    

c0008f49 <newTerminal(char*)>:
c0008f49:	83 ec 28             	sub    esp,0x28
c0008f4c:	68 84 01 00 00       	push   0x184
c0008f51:	e8 b0 eb ff ff       	call   c0007b06 <malloc>
c0008f56:	5a                   	pop    edx
c0008f57:	59                   	pop    ecx
c0008f58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f5c:	50                   	push   eax
c0008f5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f61:	e8 0e fd ff ff       	call   c0008c74 <VgaText::VgaText(char const*)>
c0008f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f6a:	83 c4 2c             	add    esp,0x2c
c0008f6d:	c3                   	ret    
c0008f6e:	66 90                	xchg   ax,ax

c0008f70 <TSS::TSS()>:
c0008f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f7b:	90                   	nop
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop
c0008f7e:	66 90                	xchg   ax,ax

c0008f80 <TSS::setESP(unsigned long)>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f89:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8f:	90                   	nop
c0008f90:	5d                   	pop    ebp
c0008f91:	c3                   	ret    
c0008f92:	66 90                	xchg   ax,ax

c0008f94 <TSS::flush()>:
c0008f94:	55                   	push   ebp
c0008f95:	89 e5                	mov    ebp,esp
c0008f97:	83 ec 10             	sub    esp,0x10
c0008f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f9f:	98                   	cwde   
c0008fa0:	83 c8 03             	or     eax,0x3
c0008fa3:	98                   	cwde   
c0008fa4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fa8:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008fac:	66 89 d0             	mov    ax,dx
c0008faf:	0f 00 d8             	ltr    ax
c0008fb2:	90                   	nop
c0008fb3:	c9                   	leave  
c0008fb4:	c3                   	ret    
c0008fb5:	90                   	nop
c0008fb6:	66 90                	xchg   ax,ax

c0008fb8 <TSS::setup(unsigned long, unsigned long)>:
c0008fb8:	55                   	push   ebp
c0008fb9:	89 e5                	mov    ebp,esp
c0008fbb:	83 ec 28             	sub    esp,0x28
c0008fbe:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008fc5:	e8 3c eb ff ff       	call   c0007b06 <malloc>
c0008fca:	89 c2                	mov    edx,eax
c0008fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd8:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008fe0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe8:	89 04 24             	mov    DWORD PTR [esp],eax
c0008feb:	e8 90 75 ff ff       	call   c0000580 <memset>
c0008ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009002:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009011:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009017:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009023:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009026:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000902c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009032:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009056:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009065:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000906e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009071:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009087:	0f 20 da             	mov    edx,cr3
c000908a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000908d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009090:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009099:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000909d:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a3:	e8 c2 e2 ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00090a8:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c00090b0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b6:	e8 cb e2 ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c00090bb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090bf:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090c3:	24 0f                	and    al,0xf
c00090c5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c8:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090cc:	0c 40                	or     al,0x40
c00090ce:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dc:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c00090e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090e5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00090e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090f0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00090f3:	e8 c0 e2 ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00090f8:	89 c2                	mov    edx,eax
c00090fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090fd:	89 10                	mov    DWORD PTR [eax],edx
c00090ff:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009104:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000910a:	05 78 01 00 00       	add    eax,0x178
c000910f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009112:	e8 cb e2 ff ff       	call   c00073e2 <GDT::flush()>
c0009117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000911a:	8b 00                	mov    eax,DWORD PTR [eax]
c000911c:	c9                   	leave  
c000911d:	c3                   	ret    

c000911e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000911e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009126:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009129:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000912e:	75 08                	jne    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009130:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009136:	eb 38                	jmp    c0009170 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009138:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000913d:	75 17                	jne    c0009156 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000913f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009144:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009147:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000914d:	8b 10                	mov    edx,DWORD PTR [eax]
c000914f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009153:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009156:	89 c1                	mov    ecx,eax
c0009158:	83 e1 fd             	and    ecx,0xfffffffd
c000915b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009161:	74 cd                	je     c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009163:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009168:	83 e0 ef             	and    eax,0xffffffef
c000916b:	83 f8 08             	cmp    eax,0x8
c000916e:	76 c0                	jbe    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009170:	31 c0                	xor    eax,eax
c0009172:	c3                   	ret    
c0009173:	90                   	nop

c0009174 <ReservedFilename::isAtty()>:
c0009174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009178:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000917b:	31 c0                	xor    eax,eax
c000917d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009183:	74 09                	je     c000918e <ReservedFilename::isAtty()+0x1a>
c0009185:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000918b:	0f 94 c0             	sete   al
c000918e:	c3                   	ret    
c000918f:	90                   	nop

c0009190 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009194:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000919c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000919f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091a4:	75 08                	jne    c00091ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00091a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091ac:	eb 3d                	jmp    c00091eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091b3:	75 17                	jne    c00091cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00091c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091d1:	75 04                	jne    c00091d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091d3:	89 0a                	mov    DWORD PTR [edx],ecx
c00091d5:	eb 14                	jmp    c00091eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091dc:	74 c8                	je     c00091a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091e3:	83 e0 ef             	and    eax,0xffffffef
c00091e6:	83 f8 08             	cmp    eax,0x8
c00091e9:	76 bb                	jbe    c00091a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091eb:	31 c0                	xor    eax,eax
c00091ed:	c3                   	ret    

c00091ee <UnixFile::getFileDescriptor()>:
c00091ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091f5:	c3                   	ret    

c00091f6 <UnixFile::UnixFile(int)>:
c00091f6:	53                   	push   ebx
c00091f7:	83 ec 38             	sub    esp,0x38
c00091fa:	ba 1c fb 01 c0       	mov    edx,0xc001fb1c
c00091ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009203:	89 10                	mov    DWORD PTR [eax],edx
c0009205:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c000920d:	0f 8f 70 01 00 00    	jg     c0009383 <UnixFile::UnixFile(int)+0x18d>
c0009213:	a1 e0 1b 02 c0       	mov    eax,ds:0xc0021be0
c0009218:	8d 50 01             	lea    edx,[eax+0x1]
c000921b:	89 15 e0 1b 02 c0    	mov    DWORD PTR ds:0xc0021be0,edx
c0009221:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009225:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009228:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000922c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009230:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009237:	e8 44 54 01 00       	call   c001e680 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000923c:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c0009243:	34 01                	xor    al,0x1
c0009245:	0f 84 39 01 00 00    	je     c0009384 <UnixFile::UnixFile(int)+0x18e>
c000924b:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009252:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c000925a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000925e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009261:	e8 a0 e8 ff ff       	call   c0007b06 <malloc>
c0009266:	89 c3                	mov    ebx,eax
c0009268:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c0009270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009273:	e8 12 01 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c0009278:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000927e:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c0009286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928a:	89 04 24             	mov    DWORD PTR [esp],eax
c000928d:	e8 74 e8 ff ff       	call   c0007b06 <malloc>
c0009292:	89 c3                	mov    ebx,eax
c0009294:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c000929c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000929f:	e8 e6 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092a4:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c00092aa:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c00092b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00092b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00092b9:	e8 48 e8 ff ff       	call   c0007b06 <malloc>
c00092be:	89 c3                	mov    ebx,eax
c00092c0:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c00092c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092cb:	e8 ba 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092d0:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092d6:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c00092de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 1c e8 ff ff       	call   c0007b06 <malloc>
c00092ea:	89 c3                	mov    ebx,eax
c00092ec:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c00092f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092f7:	e8 8e 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092fc:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c0009302:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000930a:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c000930f:	7f 73                	jg     c0009384 <UnixFile::UnixFile(int)+0x18e>
c0009311:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009319:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000931d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009320:	e8 e1 e7 ff ff       	call   c0007b06 <malloc>
c0009325:	89 c3                	mov    ebx,eax
c0009327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000932b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009330:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009334:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009337:	e8 4e 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000933c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009340:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000934f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009353:	89 04 24             	mov    DWORD PTR [esp],eax
c0009356:	e8 ab e7 ff ff       	call   c0007b06 <malloc>
c000935b:	89 c3                	mov    ebx,eax
c000935d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009361:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000936a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000936d:	e8 18 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c0009372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009376:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c000937d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009381:	eb 87                	jmp    c000930a <UnixFile::UnixFile(int)+0x114>
c0009383:	90                   	nop
c0009384:	83 c4 38             	add    esp,0x38
c0009387:	5b                   	pop    ebx
c0009388:	c3                   	ret    
c0009389:	90                   	nop

c000938a <ReservedFilename::ReservedFilename(int)>:
c000938a:	83 ec 1c             	sub    esp,0x1c
c000938d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009391:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009395:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009399:	89 04 24             	mov    DWORD PTR [esp],eax
c000939c:	e8 55 fe ff ff       	call   c00091f6 <UnixFile::UnixFile(int)>
c00093a1:	ba 38 fb 01 c0       	mov    edx,0xc001fb38
c00093a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093aa:	89 10                	mov    DWORD PTR [eax],edx
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00093b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093b7:	90                   	nop
c00093b8:	83 c4 1c             	add    esp,0x1c
c00093bb:	c3                   	ret    

c00093bc <UnixFile::~UnixFile()>:
c00093bc:	83 ec 2c             	sub    esp,0x2c
c00093bf:	ba 1c fb 01 c0       	mov    edx,0xc001fb1c
c00093c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093c8:	89 10                	mov    DWORD PTR [eax],edx
c00093ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093d6:	7f 67                	jg     c000943f <UnixFile::~UnixFile()+0x83>
c00093d8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00093e0:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093e7:	e8 5c 53 01 00       	call   c001e748 <LinkedList<UnixFile>::getFirstElement()>
c00093ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093f0:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093f7:	e8 54 53 01 00       	call   c001e750 <LinkedList<UnixFile>::removeFirst()>
c00093fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009400:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0009404:	74 3c                	je     c0009442 <UnixFile::~UnixFile()+0x86>
c0009406:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000940a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000940e:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009415:	e8 66 52 01 00       	call   c001e680 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000941a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	84 c0                	test   al,al
c000942f:	74 af                	je     c00093e0 <UnixFile::~UnixFile()+0x24>
c0009431:	c7 04 24 f4 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf4
c0009438:	e8 88 73 00 00       	call   c00107c5 <KePanic(char const*)>
c000943d:	eb a1                	jmp    c00093e0 <UnixFile::~UnixFile()+0x24>
c000943f:	90                   	nop
c0009440:	eb 01                	jmp    c0009443 <UnixFile::~UnixFile()+0x87>
c0009442:	90                   	nop
c0009443:	90                   	nop
c0009444:	83 c4 2c             	add    esp,0x2c
c0009447:	c3                   	ret    

c0009448 <UnixFile::~UnixFile()>:
c0009448:	83 ec 1c             	sub    esp,0x1c
c000944b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000944f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009452:	e8 65 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c0009457:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000945f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009463:	89 04 24             	mov    DWORD PTR [esp],eax
c0009466:	e8 f1 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c000946b:	83 c4 1c             	add    esp,0x1c
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <ReservedFilename::~ReservedFilename()>:
c0009470:	83 ec 1c             	sub    esp,0x1c
c0009473:	ba 38 fb 01 c0       	mov    edx,0xc001fb38
c0009478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000947c:	89 10                	mov    DWORD PTR [eax],edx
c000947e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009482:	89 04 24             	mov    DWORD PTR [esp],eax
c0009485:	e8 32 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000948a:	90                   	nop
c000948b:	83 c4 1c             	add    esp,0x1c
c000948e:	c3                   	ret    
c000948f:	90                   	nop

c0009490 <ReservedFilename::~ReservedFilename()>:
c0009490:	83 ec 1c             	sub    esp,0x1c
c0009493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009497:	89 04 24             	mov    DWORD PTR [esp],eax
c000949a:	e8 d1 ff ff ff       	call   c0009470 <ReservedFilename::~ReservedFilename()>
c000949f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00094a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00094ae:	e8 a9 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c00094b3:	83 c4 1c             	add    esp,0x1c
c00094b6:	c3                   	ret    

c00094b7 <getFromFileDescriptor(int)>:
c00094b7:	53                   	push   ebx
c00094b8:	83 ec 08             	sub    esp,0x8
c00094bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094cb:	7f 2c                	jg     c00094f9 <getFromFileDescriptor(int)+0x42>
c00094cd:	83 ec 0c             	sub    esp,0xc
c00094d0:	68 98 4f 02 c0       	push   0xc0024f98
c00094d5:	e8 6e 52 01 00       	call   c001e748 <LinkedList<UnixFile>::getFirstElement()>
c00094da:	83 c4 10             	add    esp,0x10
c00094dd:	85 c0                	test   eax,eax
c00094df:	75 04                	jne    c00094e5 <getFromFileDescriptor(int)+0x2e>
c00094e1:	31 c0                	xor    eax,eax
c00094e3:	eb 6e                	jmp    c0009553 <getFromFileDescriptor(int)+0x9c>
c00094e5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e8:	74 69                	je     c0009553 <getFromFileDescriptor(int)+0x9c>
c00094ea:	52                   	push   edx
c00094eb:	52                   	push   edx
c00094ec:	50                   	push   eax
c00094ed:	68 98 4f 02 c0       	push   0xc0024f98
c00094f2:	e8 ef 52 01 00       	call   c001e7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f7:	eb e1                	jmp    c00094da <getFromFileDescriptor(int)+0x23>
c00094f9:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094ff:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c0009504:	74 4d                	je     c0009553 <getFromFileDescriptor(int)+0x9c>
c0009506:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950c:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009511:	74 40                	je     c0009553 <getFromFileDescriptor(int)+0x9c>
c0009513:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009519:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c000951e:	74 33                	je     c0009553 <getFromFileDescriptor(int)+0x9c>
c0009520:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009526:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000952b:	74 26                	je     c0009553 <getFromFileDescriptor(int)+0x9c>
c000952d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009533:	83 f8 08             	cmp    eax,0x8
c0009536:	77 09                	ja     c0009541 <getFromFileDescriptor(int)+0x8a>
c0009538:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000953f:	eb 12                	jmp    c0009553 <getFromFileDescriptor(int)+0x9c>
c0009541:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009547:	83 fb 08             	cmp    ebx,0x8
c000954a:	77 95                	ja     c00094e1 <getFromFileDescriptor(int)+0x2a>
c000954c:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009553:	83 c4 08             	add    esp,0x8
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <__static_initialization_and_destruction_0(int, int)>:
c0009558:	83 ec 1c             	sub    esp,0x1c
c000955b:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0009560:	75 32                	jne    c0009594 <__static_initialization_and_destruction_0(int, int)+0x3c>
c0009562:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c000956a:	75 28                	jne    c0009594 <__static_initialization_and_destruction_0(int, int)+0x3c>
c000956c:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009573:	e8 c6 50 01 00       	call   c001e63e <LinkedList<UnixFile>::LinkedList()>
c0009578:	c7 44 24 08 68 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021b68
c0009580:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c0009588:	c7 04 24 3c e6 01 c0 	mov    DWORD PTR [esp],0xc001e63c
c000958f:	e8 78 13 00 00       	call   c000a90c <__cxa_atexit>
c0009594:	90                   	nop
c0009595:	83 c4 1c             	add    esp,0x1c
c0009598:	c3                   	ret    

c0009599 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009599:	83 ec 1c             	sub    esp,0x1c
c000959c:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c00095a4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00095ab:	e8 a8 ff ff ff       	call   c0009558 <__static_initialization_and_destruction_0(int, int)>
c00095b0:	83 c4 1c             	add    esp,0x1c
c00095b3:	c3                   	ret    
c00095b4:	66 90                	xchg   ax,ax
c00095b6:	66 90                	xchg   ax,ax
c00095b8:	66 90                	xchg   ax,ax
c00095ba:	66 90                	xchg   ax,ax
c00095bc:	66 90                	xchg   ax,ax
c00095be:	66 90                	xchg   ax,ax

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 e8 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021be8
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00095d0:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d6:	89 d8                	mov    eax,ebx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	01 d0                	add    eax,edx
c00095dc:	f6 c3 01             	test   bl,0x1
c00095df:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00095e2:	75 09                	jne    c00095ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c00095e4:	80 e2 f0             	and    dl,0xf0
c00095e7:	08 d1                	or     cl,dl
c00095e9:	88 08                	mov    BYTE PTR [eax],cl
c00095eb:	5b                   	pop    ebx
c00095ec:	c3                   	ret    
c00095ed:	c0 e1 04             	shl    cl,0x4
c00095f0:	80 e2 0f             	and    dl,0xf
c00095f3:	08 ca                	or     dl,cl
c00095f5:	88 10                	mov    BYTE PTR [eax],dl
c00095f7:	5b                   	pop    ebx
c00095f8:	c3                   	ret    

c00095f9 <Virt::getPageState(unsigned long)>:
c00095f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fd:	8b 0d e8 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021be8
c0009603:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009609:	89 d0                	mov    eax,edx
c000960b:	d1 e8                	shr    eax,1
c000960d:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009611:	88 c8                	mov    al,cl
c0009613:	c0 e8 04             	shr    al,0x4
c0009616:	f6 c2 01             	test   dl,0x1
c0009619:	75 04                	jne    c000961f <Virt::getPageState(unsigned long)+0x26>
c000961b:	88 c8                	mov    al,cl
c000961d:	24 0f                	and    al,0xf
c000961f:	c3                   	ret    

c0009620 <Virt::allocateKernelVirtualPages(int)>:
c0009620:	55                   	push   ebp
c0009621:	57                   	push   edi
c0009622:	31 ff                	xor    edi,edi
c0009624:	56                   	push   esi
c0009625:	31 f6                	xor    esi,esi
c0009627:	53                   	push   ebx
c0009628:	31 db                	xor    ebx,ebx
c000962a:	83 ec 1c             	sub    esp,0x1c
c000962d:	8b 2d e4 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021be4
c0009633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009636:	e8 be ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c000963b:	84 c0                	test   al,al
c000963d:	75 36                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x55>
c000963f:	85 f6                	test   esi,esi
c0009641:	0f 44 fd             	cmove  edi,ebp
c0009644:	46                   	inc    esi
c0009645:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c0009649:	74 51                	je     c000969c <Virt::allocateKernelVirtualPages(int)+0x7c>
c000964b:	45                   	inc    ebp
c000964c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009652:	76 2c                	jbe    c0009680 <Virt::allocateKernelVirtualPages(int)+0x60>
c0009654:	b8 00 80 0c 00       	mov    eax,0xc8000
c0009659:	84 db                	test   bl,bl
c000965b:	a3 e4 1b 02 c0       	mov    ds:0xc0021be4,eax
c0009660:	75 26                	jne    c0009688 <Virt::allocateKernelVirtualPages(int)+0x68>
c0009662:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009667:	b3 01                	mov    bl,0x1
c0009669:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000966c:	e8 88 ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009671:	84 c0                	test   al,al
c0009673:	74 ca                	je     c000963f <Virt::allocateKernelVirtualPages(int)+0x1f>
c0009675:	45                   	inc    ebp
c0009676:	31 f6                	xor    esi,esi
c0009678:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000967e:	77 d4                	ja     c0009654 <Virt::allocateKernelVirtualPages(int)+0x34>
c0009680:	89 2d e4 1b 02 c0    	mov    DWORD PTR ds:0xc0021be4,ebp
c0009686:	eb ab                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009688:	c7 04 24 4c fb 01 c0 	mov    DWORD PTR [esp],0xc001fb4c
c000968f:	e8 31 71 00 00       	call   c00107c5 <KePanic(char const*)>
c0009694:	8b 2d e4 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021be4
c000969a:	eb 97                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c000969c:	89 3d e4 1b 02 c0    	mov    DWORD PTR ds:0xc0021be4,edi
c00096a2:	4e                   	dec    esi
c00096a3:	74 74                	je     c0009719 <Virt::allocateKernelVirtualPages(int)+0xf9>
c00096a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00096a9:	85 d2                	test   edx,edx
c00096ab:	74 4b                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096b1:	89 f8                	mov    eax,edi
c00096b3:	31 db                	xor    ebx,ebx
c00096b5:	8d 71 ff             	lea    esi,[ecx-0x1]
c00096b8:	eb 19                	jmp    c00096d3 <Virt::allocateKernelVirtualPages(int)+0xb3>
c00096ba:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c00096bf:	43                   	inc    ebx
c00096c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00096c3:	e8 f8 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c8:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096cc:	74 2a                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ce:	a1 e4 1b 02 c0       	mov    eax,ds:0xc0021be4
c00096d3:	8d 50 01             	lea    edx,[eax+0x1]
c00096d6:	85 db                	test   ebx,ebx
c00096d8:	89 15 e4 1b 02 c0    	mov    DWORD PTR ds:0xc0021be4,edx
c00096de:	74 25                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe5>
c00096e0:	39 de                	cmp    esi,ebx
c00096e2:	75 d6                	jne    c00096ba <Virt::allocateKernelVirtualPages(int)+0x9a>
c00096e4:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c00096e9:	43                   	inc    ebx
c00096ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00096ed:	e8 ce fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f2:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096f6:	75 d6                	jne    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c00096f8:	83 c4 1c             	add    esp,0x1c
c00096fb:	89 f8                	mov    eax,edi
c00096fd:	5b                   	pop    ebx
c00096fe:	c1 e0 0c             	shl    eax,0xc
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    
c0009705:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c000970a:	bb 01 00 00 00       	mov    ebx,0x1
c000970f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009712:	e8 a9 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	eb b5                	jmp    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c0009719:	89 3c 24             	mov    DWORD PTR [esp],edi
c000971c:	8d 47 01             	lea    eax,[edi+0x1]
c000971f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009724:	a3 e4 1b 02 c0       	mov    ds:0xc0021be4,eax
c0009729:	e8 92 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972e:	83 c4 1c             	add    esp,0x1c
c0009731:	89 f8                	mov    eax,edi
c0009733:	5b                   	pop    ebx
c0009734:	c1 e0 0c             	shl    eax,0xc
c0009737:	5e                   	pop    esi
c0009738:	5f                   	pop    edi
c0009739:	5d                   	pop    ebp
c000973a:	c3                   	ret    

c000973b <Virt::freeSwapfilePage(unsigned long)>:
c000973b:	53                   	push   ebx
c000973c:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009742:	b8 01 00 00 00       	mov    eax,0x1
c0009747:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974b:	d3 e0                	shl    eax,cl
c000974d:	89 cb                	mov    ebx,ecx
c000974f:	c1 eb 05             	shr    ebx,0x5
c0009752:	f7 d0                	not    eax
c0009754:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009757:	5b                   	pop    ebx
c0009758:	c3                   	ret    

c0009759 <Virt::swapIDToSector(unsigned long)>:
c0009759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975d:	8b 15 ec 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021bec
c0009763:	8b 0d f4 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021bf4
c0009769:	0f af c2             	imul   eax,edx
c000976c:	01 c8                	add    eax,ecx
c000976e:	c3                   	ret    

c000976f <Virt::allocateSwapfilePage()>:
c000976f:	55                   	push   ebp
c0009770:	31 d2                	xor    edx,edx
c0009772:	57                   	push   edi
c0009773:	56                   	push   esi
c0009774:	53                   	push   ebx
c0009775:	83 ec 1c             	sub    esp,0x1c
c0009778:	8b 1d f0 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021bf0
c000977e:	8b 0d ec 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021bec
c0009784:	89 d8                	mov    eax,ebx
c0009786:	f7 f1                	div    ecx
c0009788:	39 cb                	cmp    ebx,ecx
c000978a:	72 2d                	jb     c00097b9 <Virt::allocateSwapfilePage()+0x4a>
c000978c:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009792:	8b 16                	mov    edx,DWORD PTR [esi]
c0009794:	f6 c2 01             	test   dl,0x1
c0009797:	74 38                	je     c00097d1 <Virt::allocateSwapfilePage()+0x62>
c0009799:	31 c9                	xor    ecx,ecx
c000979b:	bf 01 00 00 00       	mov    edi,0x1
c00097a0:	eb 12                	jmp    c00097b4 <Virt::allocateSwapfilePage()+0x45>
c00097a2:	89 ca                	mov    edx,ecx
c00097a4:	89 fd                	mov    ebp,edi
c00097a6:	c1 ea 05             	shr    edx,0x5
c00097a9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ae:	d3 e5                	shl    ebp,cl
c00097b0:	85 ea                	test   edx,ebp
c00097b2:	74 26                	je     c00097da <Virt::allocateSwapfilePage()+0x6b>
c00097b4:	41                   	inc    ecx
c00097b5:	39 c8                	cmp    eax,ecx
c00097b7:	77 e9                	ja     c00097a2 <Virt::allocateSwapfilePage()+0x33>
c00097b9:	c7 04 24 b3 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcb3
c00097c0:	e8 00 70 00 00       	call   c00107c5 <KePanic(char const*)>
c00097c5:	83 c4 1c             	add    esp,0x1c
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	5b                   	pop    ebx
c00097cb:	89 c8                	mov    eax,ecx
c00097cd:	5e                   	pop    esi
c00097ce:	5f                   	pop    edi
c00097cf:	5d                   	pop    ebp
c00097d0:	c3                   	ret    
c00097d1:	89 f3                	mov    ebx,esi
c00097d3:	bd 01 00 00 00       	mov    ebp,0x1
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	09 ea                	or     edx,ebp
c00097dc:	89 c8                	mov    eax,ecx
c00097de:	89 13                	mov    DWORD PTR [ebx],edx
c00097e0:	83 c4 1c             	add    esp,0x1c
c00097e3:	5b                   	pop    ebx
c00097e4:	5e                   	pop    esi
c00097e5:	5f                   	pop    edi
c00097e6:	5d                   	pop    ebp
c00097e7:	c3                   	ret    

c00097e8 <Virt::virtualMemorySetup()>:
c00097e8:	53                   	push   ebx
c00097e9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ee:	83 ec 08             	sub    esp,0x8
c00097f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097f4:	43                   	inc    ebx
c00097f5:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c00097fa:	e8 c1 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ff:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009805:	75 ea                	jne    c00097f1 <Virt::virtualMemorySetup()+0x9>
c0009807:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000980f:	43                   	inc    ebx
c0009810:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009815:	e8 a6 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009820:	75 ea                	jne    c000980c <Virt::virtualMemorySetup()+0x24>
c0009822:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000982a:	43                   	inc    ebx
c000982b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c0009830:	e8 8b fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009835:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000983b:	75 ea                	jne    c0009827 <Virt::virtualMemorySetup()+0x3f>
c000983d:	83 c4 08             	add    esp,0x8
c0009840:	5b                   	pop    ebx
c0009841:	c3                   	ret    

c0009842 <Virt::setupPageSwapping(int)>:
c0009842:	53                   	push   ebx
c0009843:	b9 ca fc 01 c0       	mov    ecx,0xc001fcca
c0009848:	83 ec 18             	sub    esp,0x18
c000984b:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009854:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985a:	8b 10                	mov    edx,DWORD PTR [eax]
c000985c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009860:	c1 e3 0b             	shl    ebx,0xb
c0009863:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009867:	89 04 24             	mov    DWORD PTR [esp],eax
c000986a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986d:	b2 43                	mov    dl,0x43
c000986f:	b9 08 00 00 00       	mov    ecx,0x8
c0009874:	89 1d f0 1b 02 c0    	mov    DWORD PTR ds:0xc0021bf0,ebx
c000987a:	c1 eb 08             	shr    ebx,0x8
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	31 db                	xor    ebx,ebx
c0009882:	88 15 f8 1b 02 c0    	mov    BYTE PTR ds:0xc0021bf8,dl
c0009888:	89 0d ec 1b 02 c0    	mov    DWORD PTR ds:0xc0021bec,ecx
c000988e:	a3 f4 1b 02 c0       	mov    ds:0xc0021bf4,eax
c0009893:	e8 6e e2 ff ff       	call   c0007b06 <malloc>
c0009898:	31 d2                	xor    edx,edx
c000989a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000989e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c00098a3:	89 c1                	mov    ecx,eax
c00098a5:	a1 f0 1b 02 c0       	mov    eax,ds:0xc0021bf0
c00098aa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098ad:	f7 35 ec 1b 02 c0    	div    DWORD PTR ds:0xc0021bec
c00098b3:	c1 e8 05             	shr    eax,0x5
c00098b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ba:	e8 c1 6c ff ff       	call   c0000580 <memset>
c00098bf:	83 c4 18             	add    esp,0x18
c00098c2:	5b                   	pop    ebx
c00098c3:	c3                   	ret    

c00098c4 <VAS::VAS(VAS*)>:
c00098c4:	83 ec 1c             	sub    esp,0x1c
c00098c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098dd:	c7 04 24 6c fb 01 c0 	mov    DWORD PTR [esp],0xc001fb6c
c00098e4:	e8 dc 6e 00 00       	call   c00107c5 <KePanic(char const*)>
c00098e9:	90                   	nop
c00098ea:	83 c4 1c             	add    esp,0x1c
c00098ed:	c3                   	ret    

c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f2:	89 c2                	mov    edx,eax
c00098f4:	c1 ea 16             	shr    edx,0x16
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098ff:	19 c9                	sbb    ecx,ecx
c0009901:	25 fc 0f 00 00       	and    eax,0xffc
c0009906:	c1 e2 0c             	shl    edx,0xc
c0009909:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009916:	01 d0                	add    eax,edx
c0009918:	c3                   	ret    
c0009919:	90                   	nop

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 ea 16             	shr    edx,0x16
c0009923:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009929:	c1 e9 0a             	shr    ecx,0xa
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	57                   	push   edi
c000993a:	56                   	push   esi
c000993b:	53                   	push   ebx
c000993c:	b3 01                	mov    bl,0x1
c000993e:	83 ec 20             	sub    esp,0x20
c0009941:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009945:	c1 ee 0c             	shr    esi,0xc
c0009948:	eb 3f                	jmp    c0009989 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000994a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000994e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009953:	89 04 24             	mov    DWORD PTR [esp],eax
c0009956:	e8 bf ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 60                	jne    c00099c7 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c0009967:	80 fa 04             	cmp    dl,0x4
c000996a:	74 76                	je     c00099e2 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c000996c:	80 fa 02             	cmp    dl,0x2
c000996f:	0f 84 85 00 00 00    	je     c00099fa <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c0009975:	80 fa 03             	cmp    dl,0x3
c0009978:	0f 84 a3 00 00 00    	je     c0009a21 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c000997e:	fe ca                	dec    dl
c0009980:	0f 84 89 00 00 00    	je     c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c0009986:	46                   	inc    esi
c0009987:	31 db                	xor    ebx,ebx
c0009989:	89 34 24             	mov    DWORD PTR [esp],esi
c000998c:	89 f7                	mov    edi,esi
c000998e:	e8 66 fc ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009993:	c1 e7 0c             	shl    edi,0xc
c0009996:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000999a:	84 c0                	test   al,al
c000999c:	75 ac                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c000999e:	c7 04 24 e1 fc 01 c0 	mov    DWORD PTR [esp],0xc001fce1
c00099a5:	e8 1b 6e 00 00       	call   c00107c5 <KePanic(char const*)>
c00099aa:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00099af:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00099b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099b6:	e8 5f ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099bb:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099c2:	f6 c4 04             	test   ah,0x4
c00099c5:	74 bf                	je     c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00099c7:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c00099cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00099d3:	e8 cc e3 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c00099d8:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099dd:	80 fa 04             	cmp    dl,0x4
c00099e0:	75 8a                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099e2:	84 db                	test   bl,bl
c00099e4:	75 3f                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c00099e6:	ba 90 fb 01 c0       	mov    edx,0xc001fb90
c00099eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	5b                   	pop    ebx
c00099f3:	5e                   	pop    esi
c00099f4:	5f                   	pop    edi
c00099f5:	e9 cb 6d 00 00       	jmp    c00107c5 <KePanic(char const*)>
c00099fa:	84 db                	test   bl,bl
c00099fc:	75 11                	jne    c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00099fe:	c7 04 24 fd fc 01 c0 	mov    DWORD PTR [esp],0xc001fcfd
c0009a05:	e8 bb 6d 00 00       	call   c00107c5 <KePanic(char const*)>
c0009a0a:	e9 77 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a0f:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a14:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a17:	e8 a4 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a1c:	e9 65 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a21:	84 db                	test   bl,bl
c0009a23:	75 14                	jne    c0009a39 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a28:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a2d:	e8 8e fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a32:	83 c4 20             	add    esp,0x20
c0009a35:	5b                   	pop    ebx
c0009a36:	5e                   	pop    esi
c0009a37:	5f                   	pop    edi
c0009a38:	c3                   	ret    
c0009a39:	b8 19 fd 01 c0       	mov    eax,0xc001fd19
c0009a3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a42:	83 c4 20             	add    esp,0x20
c0009a45:	5b                   	pop    ebx
c0009a46:	5e                   	pop    esi
c0009a47:	5f                   	pop    edi
c0009a48:	e9 78 6d 00 00       	jmp    c00107c5 <KePanic(char const*)>
c0009a4d:	90                   	nop

c0009a4e <VAS::freeAllocatedPages(unsigned long)>:
c0009a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a56:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a5a:	74 09                	je     c0009a65 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a60:	e9 d4 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a65:	b8 b4 fb 01 c0       	mov    eax,0xc001fbb4
c0009a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a6e:	e9 03 10 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c0009a73:	90                   	nop

c0009a74 <VAS::virtualToPhysical(unsigned long)>:
c0009a74:	83 ec 08             	sub    esp,0x8
c0009a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a86:	e8 8f fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a8d:	83 c4 08             	add    esp,0x8
c0009a90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a95:	c3                   	ret    

c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a96:	55                   	push   ebp
c0009a97:	57                   	push   edi
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	83 ec 08             	sub    esp,0x8
c0009a9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009aa1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009aa5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009aa9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009aad:	89 c3                	mov    ebx,eax
c0009aaf:	c1 e3 0c             	shl    ebx,0xc
c0009ab2:	01 f3                	add    ebx,esi
c0009ab4:	85 c0                	test   eax,eax
c0009ab6:	7e 22                	jle    c0009ada <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009ab8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009abc:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ac2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ac5:	e8 50 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009aca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009ace:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad0:	21 f9                	and    ecx,edi
c0009ad2:	09 d1                	or     ecx,edx
c0009ad4:	39 f3                	cmp    ebx,esi
c0009ad6:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad8:	75 de                	jne    c0009ab8 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009ada:	83 c4 08             	add    esp,0x8
c0009add:	5b                   	pop    ebx
c0009ade:	5e                   	pop    esi
c0009adf:	5f                   	pop    edi
c0009ae0:	5d                   	pop    ebp
c0009ae1:	c3                   	ret    

c0009ae2 <VAS::VAS()>:
c0009ae2:	83 ec 14             	sub    esp,0x14
c0009ae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ae9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009af4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009aff:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b08:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b10:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b17:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b1e:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b23:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b28:	29 c2                	sub    edx,eax
c0009b2a:	89 d0                	mov    eax,edx
c0009b2c:	05 ff 0f 00 00       	add    eax,0xfff
c0009b31:	c1 e8 0c             	shr    eax,0xc
c0009b34:	89 c2                	mov    edx,eax
c0009b36:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b3b:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009b43:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009b4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b57:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b5a:	e8 37 ff ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b5f:	90                   	nop
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b64:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b6f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b76:	75 01                	jne    c0009b79 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b78:	c3                   	ret    
c0009b79:	83 ec 14             	sub    esp,0x14
c0009b7c:	b8 80 00 00 00       	mov    eax,0x80
c0009b81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ba2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ba5:	e8 ec fe ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009baa:	83 c4 14             	add    esp,0x14
c0009bad:	c3                   	ret    

c0009bae <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009bb7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bbe:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bc1:	19 c0                	sbb    eax,eax
c0009bc3:	83 ca 03             	or     edx,0x3
c0009bc6:	83 e0 fc             	and    eax,0xfffffffc
c0009bc9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bd0:	0f 20 d8             	mov    eax,cr3
c0009bd3:	0f 22 d8             	mov    cr3,eax
c0009bd6:	c3                   	ret    
c0009bd7:	90                   	nop

c0009bd8 <VAS::~VAS()>:
c0009bd8:	83 ec 3c             	sub    esp,0x3c
c0009bdb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009be3:	fa                   	cli    
c0009be4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009be9:	40                   	inc    eax
c0009bea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009bef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009c03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c07:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c12:	e8 97 ff ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0009c17:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009c1f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009c27:	0f 8f d8 00 00 00    	jg     c0009d05 <VAS::~VAS()+0x12d>
c0009c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009c38:	c1 e2 02             	shl    edx,0x2
c0009c3b:	01 d0                	add    eax,edx
c0009c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c47:	83 e0 01             	and    eax,0x1
c0009c4a:	0f 84 ac 00 00 00    	je     c0009cfc <VAS::~VAS()+0x124>
c0009c50:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009c58:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009c60:	7f 7a                	jg     c0009cdc <VAS::~VAS()+0x104>
c0009c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009c66:	c1 e0 0a             	shl    eax,0xa
c0009c69:	89 c2                	mov    edx,eax
c0009c6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009c6f:	01 d0                	add    eax,edx
c0009c71:	c1 e0 0c             	shl    eax,0xc
c0009c74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c82:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c90:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c98:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c9b:	e8 4e fc ff ff       	call   c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009caa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cb2:	25 01 04 00 00       	and    eax,0x401
c0009cb7:	3d 01 04 00 00       	cmp    eax,0x401
c0009cbc:	75 15                	jne    c0009cd3 <VAS::~VAS()+0xfb>
c0009cbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cca:	e8 d5 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009ccf:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cd3:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009cd7:	e9 7c ff ff ff       	jmp    c0009c58 <VAS::~VAS()+0x80>
c0009cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ce0:	25 00 04 00 00       	and    eax,0x400
c0009ce5:	74 15                	je     c0009cfc <VAS::~VAS()+0x124>
c0009ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ceb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cf3:	e8 ac e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009cf8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cfc:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009d00:	e9 1a ff ff ff       	jmp    c0009c1f <VAS::~VAS()+0x47>
c0009d05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d0f:	e8 25 fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d1e:	e8 81 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009d23:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009d27:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d2c:	48                   	dec    eax
c0009d2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009d32:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d37:	85 c0                	test   eax,eax
c0009d39:	75 01                	jne    c0009d3c <VAS::~VAS()+0x164>
c0009d3b:	fb                   	sti    
c0009d3c:	90                   	nop
c0009d3d:	83 c4 3c             	add    esp,0x3c
c0009d40:	c3                   	ret    
c0009d41:	90                   	nop

c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d42:	83 ec 4c             	sub    esp,0x4c
c0009d45:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009d49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009d4d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009d51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d55:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009d59:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009d5d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009d61:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d67:	77 0b                	ja     c0009d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009d69:	0f 20 d8             	mov    eax,cr3
c0009d6c:	0f 20 d8             	mov    eax,cr3
c0009d6f:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d72:	75 4f                	jne    c0009dc3 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d74:	89 d8                	mov    eax,ebx
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	75 5b                	jne    c0009dda <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009d7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d82:	89 de                	mov    esi,ebx
c0009d84:	c1 ee 16             	shr    esi,0x16
c0009d87:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d8e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d92:	74 54                	je     c0009de8 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009d94:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009d98:	c1 eb 0a             	shr    ebx,0xa
c0009d9b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009da1:	c1 e6 0c             	shl    esi,0xc
c0009da4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009daa:	09 c7                	or     edi,eax
c0009dac:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009daf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009db3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009db7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009dbb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009dbf:	83 c4 4c             	add    esp,0x4c
c0009dc2:	c3                   	ret    
c0009dc3:	c7 04 24 d8 fb 01 c0 	mov    DWORD PTR [esp],0xc001fbd8
c0009dca:	e8 a7 0c 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0009dcf:	89 d8                	mov    eax,ebx
c0009dd1:	09 f8                	or     eax,edi
c0009dd3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dd8:	74 a5                	je     c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009dda:	c7 04 24 40 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc40
c0009de1:	e8 df 69 00 00       	call   c00107c5 <KePanic(char const*)>
c0009de6:	eb 97                	jmp    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009de8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009dec:	e8 1b e0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009df1:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009df7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009dfe:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	e8 15 f8 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009e0b:	b9 01 00 00 00       	mov    ecx,0x1
c0009e10:	ba 03 00 00 00       	mov    edx,0x3
c0009e15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e19:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e21:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e30:	e8 4d 02 00 00       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e35:	89 c1                	mov    ecx,eax
c0009e37:	b8 00 10 00 00       	mov    eax,0x1000
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	31 c0                	xor    eax,eax
c0009e42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e49:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e4d:	e8 2e 67 ff ff       	call   c0000580 <memset>
c0009e52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e59:	e8 db fa ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e62:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009e69:	0d 07 04 00 00       	or     eax,0x407
c0009e6e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e71:	e9 1e ff ff ff       	jmp    c0009d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009e76 <VAS::allocatePages(int, int)>:
c0009e76:	55                   	push   ebp
c0009e77:	57                   	push   edi
c0009e78:	56                   	push   esi
c0009e79:	53                   	push   ebx
c0009e7a:	83 ec 2c             	sub    esp,0x2c
c0009e7d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e82:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009e86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e8c:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009e93:	24 01                	and    al,0x1
c0009e95:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e99:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009e9d:	0f 85 ce 00 00 00    	jne    c0009f71 <VAS::allocatePages(int, int)+0xfb>
c0009ea3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ea6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eaa:	85 c0                	test   eax,eax
c0009eac:	0f 84 a7 00 00 00    	je     c0009f59 <VAS::allocatePages(int, int)+0xe3>
c0009eb2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009eb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009eba:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009ebe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009ec2:	c1 e6 0c             	shl    esi,0xc
c0009ec5:	01 de                	add    esi,ebx
c0009ec7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009eca:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	7e 2d                	jle    c0009f01 <VAS::allocatePages(int, int)+0x8b>
c0009ed4:	e8 33 df ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009ed9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009edd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ee1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ee4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ee8:	e8 55 fe ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eed:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009ef2:	74 03                	je     c0009ef7 <VAS::allocatePages(int, int)+0x81>
c0009ef4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ef7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009efd:	39 de                	cmp    esi,ebx
c0009eff:	75 d3                	jne    c0009ed4 <VAS::allocatePages(int, int)+0x5e>
c0009f01:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f06:	75 12                	jne    c0009f1a <VAS::allocatePages(int, int)+0xa4>
c0009f08:	0f 20 d8             	mov    eax,cr3
c0009f0b:	0f 22 d8             	mov    cr3,eax
c0009f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f12:	83 c4 2c             	add    esp,0x2c
c0009f15:	5b                   	pop    ebx
c0009f16:	5e                   	pop    esi
c0009f17:	5f                   	pop    edi
c0009f18:	5d                   	pop    ebp
c0009f19:	c3                   	ret    
c0009f1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f1e:	c1 ee 0a             	shr    esi,0xa
c0009f21:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009f27:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009f2d:	c1 eb 0a             	shr    ebx,0xa
c0009f30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f36:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f3c:	39 c3                	cmp    ebx,eax
c0009f3e:	77 ce                	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c0009f40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f43:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f49:	39 d8                	cmp    eax,ebx
c0009f4b:	73 f3                	jae    c0009f40 <VAS::allocatePages(int, int)+0xca>
c0009f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f51:	83 c4 2c             	add    esp,0x2c
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    
c0009f59:	c7 04 24 64 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc64
c0009f60:	e8 60 68 00 00       	call   c00107c5 <KePanic(char const*)>
c0009f65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009f68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f6c:	e9 41 ff ff ff       	jmp    c0009eb2 <VAS::allocatePages(int, int)+0x3c>
c0009f71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f78:	e8 a3 f6 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009f7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f81:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f86:	0f 87 a3 00 00 00    	ja     c000a02f <VAS::allocatePages(int, int)+0x1b9>
c0009f8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f90:	85 d2                	test   edx,edx
c0009f92:	7e 44                	jle    c0009fd8 <VAS::allocatePages(int, int)+0x162>
c0009f94:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009f98:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009f9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fa0:	c1 e5 0c             	shl    ebp,0xc
c0009fa3:	81 ce 00 04 00 00    	or     esi,0x400
c0009fa9:	01 dd                	add    ebp,ebx
c0009fab:	e8 5c de ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009fb0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009fb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009fbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fbf:	e8 7e fd ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fc4:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fc9:	74 03                	je     c0009fce <VAS::allocatePages(int, int)+0x158>
c0009fcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fd4:	39 dd                	cmp    ebp,ebx
c0009fd6:	75 d3                	jne    c0009fab <VAS::allocatePages(int, int)+0x135>
c0009fd8:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fdd:	0f 84 25 ff ff ff    	je     c0009f08 <VAS::allocatePages(int, int)+0x92>
c0009fe3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009fe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009feb:	c1 e0 0c             	shl    eax,0xc
c0009fee:	01 d0                	add    eax,edx
c0009ff0:	89 d3                	mov    ebx,edx
c0009ff2:	c1 eb 0a             	shr    ebx,0xa
c0009ff5:	c1 e8 0a             	shr    eax,0xa
c0009ff8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ffe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a003:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a009:	2d 00 00 40 00       	sub    eax,0x400000
c000a00e:	39 c3                	cmp    ebx,eax
c000a010:	0f 87 f8 fe ff ff    	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c000a016:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a019:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a01f:	39 d8                	cmp    eax,ebx
c000a021:	73 f3                	jae    c000a016 <VAS::allocatePages(int, int)+0x1a0>
c000a023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a027:	83 c4 2c             	add    esp,0x2c
c000a02a:	5b                   	pop    ebx
c000a02b:	5e                   	pop    esi
c000a02c:	5f                   	pop    edi
c000a02d:	5d                   	pop    ebp
c000a02e:	c3                   	ret    
c000a02f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a03a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a041:	0f 84 45 ff ff ff    	je     c0009f8c <VAS::allocatePages(int, int)+0x116>
c000a047:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c000a04f:	e9 38 ff ff ff       	jmp    c0009f8c <VAS::allocatePages(int, int)+0x116>

c000a054 <VAS::setCPUSpecific(unsigned long)>:
c000a054:	83 ec 1c             	sub    esp,0x1c
c000a057:	b8 05 00 00 00       	mov    eax,0x5
c000a05c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a060:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a064:	ba 00 00 40 c2       	mov    edx,0xc2400000
c000a069:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a06d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a075:	89 04 24             	mov    DWORD PTR [esp],eax
c000a078:	e8 c5 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a07d:	83 c4 1c             	add    esp,0x1c
c000a080:	c3                   	ret    
c000a081:	90                   	nop

c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a082:	55                   	push   ebp
c000a083:	57                   	push   edi
c000a084:	56                   	push   esi
c000a085:	53                   	push   ebx
c000a086:	83 ec 2c             	sub    esp,0x2c
c000a089:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a08e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000a092:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000a096:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000a09a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0a0:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a0a7:	24 01                	and    al,0x1
c000a0a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a0ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	7e 41                	jle    c000a0f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a0b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b9:	89 f3                	mov    ebx,esi
c000a0bb:	c1 e0 0c             	shl    eax,0xc
c000a0be:	01 f0                	add    eax,esi
c000a0c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a0c4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a0c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a0cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a0d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a0d3:	29 f0                	sub    eax,esi
c000a0d5:	01 d8                	add    eax,ebx
c000a0d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0db:	e8 62 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0e0:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0e5:	74 03                	je     c000a0ea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a0e7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0f0:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a0f4:	75 ce                	jne    c000a0c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a0f6:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0fb:	75 10                	jne    c000a10d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a0fd:	0f 20 d8             	mov    eax,cr3
c000a100:	0f 22 d8             	mov    cr3,eax
c000a103:	83 c4 2c             	add    esp,0x2c
c000a106:	89 f0                	mov    eax,esi
c000a108:	5b                   	pop    ebx
c000a109:	5e                   	pop    esi
c000a10a:	5f                   	pop    edi
c000a10b:	5d                   	pop    ebp
c000a10c:	c3                   	ret    
c000a10d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a111:	89 f3                	mov    ebx,esi
c000a113:	c1 eb 0a             	shr    ebx,0xa
c000a116:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a11c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a122:	c1 e0 0c             	shl    eax,0xc
c000a125:	01 f0                	add    eax,esi
c000a127:	c1 e8 0a             	shr    eax,0xa
c000a12a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a12f:	2d 00 00 40 00       	sub    eax,0x400000
c000a134:	39 c3                	cmp    ebx,eax
c000a136:	77 cb                	ja     c000a103 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a138:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a13b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a141:	39 d8                	cmp    eax,ebx
c000a143:	73 f3                	jae    c000a138 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a145:	83 c4 2c             	add    esp,0x2c
c000a148:	89 f0                	mov    eax,esi
c000a14a:	5b                   	pop    ebx
c000a14b:	5e                   	pop    esi
c000a14c:	5f                   	pop    edi
c000a14d:	5d                   	pop    ebp
c000a14e:	c3                   	ret    
c000a14f:	90                   	nop

c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a150:	83 ec 4c             	sub    esp,0x4c
c000a153:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a157:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a15b:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a15f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a163:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a167:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a16b:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a16f:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a174:	09 d8                	or     eax,ebx
c000a176:	a9 ff 0f 00 00       	test   eax,0xfff
c000a17b:	75 52                	jne    c000a1cf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a17d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a180:	89 de                	mov    esi,ebx
c000a182:	c1 ee 16             	shr    esi,0x16
c000a185:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a18c:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a190:	74 54                	je     c000a1e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a192:	c1 eb 0a             	shr    ebx,0xa
c000a195:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a199:	80 fa 01             	cmp    dl,0x1
c000a19c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a1a0:	19 c0                	sbb    eax,eax
c000a1a2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a1a8:	c1 e6 0c             	shl    esi,0xc
c000a1ab:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a1b0:	01 f3                	add    ebx,esi
c000a1b2:	09 ca                	or     edx,ecx
c000a1b4:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a1bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a1bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a1c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a1c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a1cb:	83 c4 4c             	add    esp,0x4c
c000a1ce:	c3                   	ret    
c000a1cf:	c7 04 24 90 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc90
c000a1d6:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a1da:	e8 e6 65 00 00       	call   c00107c5 <KePanic(char const*)>
c000a1df:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a1e4:	eb 97                	jmp    c000a17d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a1e6:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a1ea:	e8 1d dc ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a1ef:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a1f5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a1fc:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a200:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a204:	e8 17 f4 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a209:	b9 01 00 00 00       	mov    ecx,0x1
c000a20e:	ba 03 00 00 00       	mov    edx,0x3
c000a213:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a217:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a21b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a21f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a22e:	e8 4f fe ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a233:	89 c1                	mov    ecx,eax
c000a235:	b8 00 10 00 00       	mov    eax,0x1000
c000a23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23e:	31 c0                	xor    eax,eax
c000a240:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a243:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a247:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a24b:	e8 30 63 ff ff       	call   c0000580 <memset>
c000a250:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a254:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a257:	e8 dd f6 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a25c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a263:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a268:	81 c9 07 04 00 00    	or     ecx,0x407
c000a26e:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a271:	e9 1c ff ff ff       	jmp    c000a192 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a276 <VAS::VAS(bool)>:
c000a276:	53                   	push   ebx
c000a277:	83 ec 48             	sub    esp,0x48
c000a27a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a27e:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a282:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a286:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a28d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a291:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a298:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a29c:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a2a1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a2a4:	e8 63 db ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a2a9:	89 c2                	mov    edx,eax
c000a2ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2af:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a2b2:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a2b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a2bf:	e8 5c f3 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a2c4:	89 c2                	mov    edx,eax
c000a2c6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2cd:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a2d5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a2dd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a2e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a2e8:	e8 95 fd ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2ed:	89 c2                	mov    edx,eax
c000a2ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a2f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a2fe:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a306:	7f 1c                	jg     c000a324 <VAS::VAS(bool)+0xae>
c000a308:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a30c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a30f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a313:	c1 e2 02             	shl    edx,0x2
c000a316:	01 d0                	add    eax,edx
c000a318:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a31e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a322:	eb da                	jmp    c000a2fe <VAS::VAS(bool)+0x88>
c000a324:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a32c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a334:	7f 75                	jg     c000a3ab <VAS::VAS(bool)+0x135>
c000a336:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a33a:	2d 00 02 00 00       	sub    eax,0x200
c000a33f:	c1 e0 0c             	shl    eax,0xc
c000a342:	83 c8 05             	or     eax,0x5
c000a345:	89 c2                	mov    edx,eax
c000a347:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a352:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a359:	24 10                	and    al,0x10
c000a35b:	74 07                	je     c000a364 <VAS::VAS(bool)+0xee>
c000a35d:	b8 00 01 00 00       	mov    eax,0x100
c000a362:	eb 05                	jmp    c000a369 <VAS::VAS(bool)+0xf3>
c000a364:	b8 00 00 00 00       	mov    eax,0x0
c000a369:	09 d0                	or     eax,edx
c000a36b:	89 c1                	mov    ecx,eax
c000a36d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a371:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a374:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a378:	c1 e2 02             	shl    edx,0x2
c000a37b:	01 d0                	add    eax,edx
c000a37d:	89 ca                	mov    edx,ecx
c000a37f:	89 10                	mov    DWORD PTR [eax],edx
c000a381:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a385:	2d 40 03 00 00       	sub    eax,0x340
c000a38a:	83 f8 7f             	cmp    eax,0x7f
c000a38d:	77 16                	ja     c000a3a5 <VAS::VAS(bool)+0x12f>
c000a38f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a396:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a39a:	c1 e2 02             	shl    edx,0x2
c000a39d:	01 d0                	add    eax,edx
c000a39f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a3a5:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a3a9:	eb 81                	jmp    c000a32c <VAS::VAS(bool)+0xb6>
c000a3ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b6:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a3bd:	24 10                	and    al,0x10
c000a3bf:	74 07                	je     c000a3c8 <VAS::VAS(bool)+0x152>
c000a3c1:	b8 03 41 00 00       	mov    eax,0x4103
c000a3c6:	eb 05                	jmp    c000a3cd <VAS::VAS(bool)+0x157>
c000a3c8:	b8 03 40 00 00       	mov    eax,0x4003
c000a3cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a3d1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a3d4:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a3da:	89 02                	mov    DWORD PTR [edx],eax
c000a3dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a3ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a3f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a3f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f8:	e8 57 fc ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c000a3fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a401:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a404:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a409:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a40f:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a416:	24 10                	and    al,0x10
c000a418:	74 07                	je     c000a421 <VAS::VAS(bool)+0x1ab>
c000a41a:	b8 00 01 00 00       	mov    eax,0x100
c000a41f:	eb 05                	jmp    c000a426 <VAS::VAS(bool)+0x1b0>
c000a421:	b8 00 00 00 00       	mov    eax,0x0
c000a426:	09 c2                	or     edx,eax
c000a428:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a42c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a42f:	05 fc 0f 00 00       	add    eax,0xffc
c000a434:	83 ca 03             	or     edx,0x3
c000a437:	89 10                	mov    DWORD PTR [eax],edx
c000a439:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a43e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a444:	89 04 24             	mov    DWORD PTR [esp],eax
c000a447:	e8 e8 1c 00 00       	call   c000c134 <Device::getName()>
c000a44c:	c7 44 24 04 33 fd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fd33
c000a454:	89 04 24             	mov    DWORD PTR [esp],eax
c000a457:	e8 e4 63 ff ff       	call   c0000840 <strcmp>
c000a45c:	85 c0                	test   eax,eax
c000a45e:	0f 94 c0             	sete   al
c000a461:	84 c0                	test   al,al
c000a463:	0f 84 8b 00 00 00    	je     c000a4f4 <VAS::VAS(bool)+0x27e>
c000a469:	fa                   	cli    
c000a46a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46f:	40                   	inc    eax
c000a470:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a475:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a47a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a480:	05 7c 09 00 00       	add    eax,0x97c
c000a485:	89 04 24             	mov    DWORD PTR [esp],eax
c000a488:	e8 55 d1 ff ff       	call   c00075e2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a48d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a492:	89 c3                	mov    ebx,eax
c000a494:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a499:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a49f:	05 7c 09 00 00       	add    eax,0x97c
c000a4a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4a7:	e8 36 d1 ff ff       	call   c00075e2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a4ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4b7:	e8 5e f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a4c3:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a4cb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a4cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4da:	e8 63 f8 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a4df:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4e4:	48                   	dec    eax
c000a4e5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a4ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4ef:	85 c0                	test   eax,eax
c000a4f1:	75 01                	jne    c000a4f4 <VAS::VAS(bool)+0x27e>
c000a4f3:	fb                   	sti    
c000a4f4:	90                   	nop
c000a4f5:	83 c4 48             	add    esp,0x48
c000a4f8:	5b                   	pop    ebx
c000a4f9:	c3                   	ret    

c000a4fa <VAS::evict(unsigned long)>:
c000a4fa:	55                   	push   ebp
c000a4fb:	57                   	push   edi
c000a4fc:	56                   	push   esi
c000a4fd:	53                   	push   ebx
c000a4fe:	83 ec 3c             	sub    esp,0x3c
c000a501:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a505:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a509:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a50d:	e8 5d f2 ff ff       	call   c000976f <Virt::allocateSwapfilePage()>
c000a512:	8b 1d ec 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021bec
c000a518:	85 db                	test   ebx,ebx
c000a51a:	89 c7                	mov    edi,eax
c000a51c:	7e 4a                	jle    c000a568 <VAS::evict(unsigned long)+0x6e>
c000a51e:	89 ee                	mov    esi,ebp
c000a520:	31 db                	xor    ebx,ebx
c000a522:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a525:	e8 2f f2 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a52a:	31 c9                	xor    ecx,ecx
c000a52c:	ba 01 00 00 00       	mov    edx,0x1
c000a531:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a535:	81 c6 00 02 00 00    	add    esi,0x200
c000a53b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a53f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a543:	01 d8                	add    eax,ebx
c000a545:	43                   	inc    ebx
c000a546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a54a:	0f be 05 f8 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021bf8
c000a551:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a558:	89 04 24             	mov    DWORD PTR [esp],eax
c000a55b:	e8 b4 2c 00 00       	call   c000d214 <LogicalDisk::write(unsigned long long, int, void*)>
c000a560:	39 1d ec 1b 02 c0    	cmp    DWORD PTR ds:0xc0021bec,ebx
c000a566:	7f ba                	jg     c000a522 <VAS::evict(unsigned long)+0x28>
c000a568:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a56c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a570:	c1 e7 0b             	shl    edi,0xb
c000a573:	89 04 24             	mov    DWORD PTR [esp],eax
c000a576:	e8 9f f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a57b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a57d:	89 d1                	mov    ecx,edx
c000a57f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a585:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a58b:	09 cf                	or     edi,ecx
c000a58d:	89 38                	mov    DWORD PTR [eax],edi
c000a58f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a592:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a598:	e8 07 d8 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c000a59d:	0f 20 d8             	mov    eax,cr3
c000a5a0:	0f 22 d8             	mov    cr3,eax
c000a5a3:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a5a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a5ac:	8d 50 01             	lea    edx,[eax+0x1]
c000a5af:	b8 41 fd 01 c0       	mov    eax,0xc001fd41
c000a5b4:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a5ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5be:	83 c4 3c             	add    esp,0x3c
c000a5c1:	5b                   	pop    ebx
c000a5c2:	5e                   	pop    esi
c000a5c3:	5f                   	pop    edi
c000a5c4:	5d                   	pop    ebp
c000a5c5:	e9 ac 04 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>

c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a5ca:	83 ec 4c             	sub    esp,0x4c
c000a5cd:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a5d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a5d5:	c7 04 24 52 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd52
c000a5dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a5e0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a5e4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a5ee:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a5f2:	e8 7f 04 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a5f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a5fb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000a602:	e8 13 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a607:	85 c0                	test   eax,eax
c000a609:	89 c6                	mov    esi,eax
c000a60b:	0f 95 c2             	setne  dl
c000a60e:	85 db                	test   ebx,ebx
c000a610:	0f 95 c0             	setne  al
c000a613:	20 c2                	and    dl,al
c000a615:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a619:	75 19                	jne    c000a634 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a61b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a620:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a624:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a628:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a62c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a630:	83 c4 4c             	add    esp,0x4c
c000a633:	c3                   	ret    
c000a634:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a636:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a63c:	74 07                	je     c000a645 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a63e:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a643:	eb d6                	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a645:	e8 c2 d7 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a64a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a64c:	c1 ed 0b             	shr    ebp,0xb
c000a64f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a655:	09 c2                	or     edx,eax
c000a657:	81 ca 01 08 00 00    	or     edx,0x801
c000a65d:	89 16                	mov    DWORD PTR [esi],edx
c000a65f:	8b 35 ec 1b 02 c0    	mov    esi,DWORD PTR ds:0xc0021bec
c000a665:	85 f6                	test   esi,esi
c000a667:	7e 4a                	jle    c000a6b3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a669:	89 df                	mov    edi,ebx
c000a66b:	31 f6                	xor    esi,esi
c000a66d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a670:	e8 e4 f0 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a675:	31 c9                	xor    ecx,ecx
c000a677:	ba 01 00 00 00       	mov    edx,0x1
c000a67c:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a680:	81 c7 00 02 00 00    	add    edi,0x200
c000a686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a68a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a68e:	01 f0                	add    eax,esi
c000a690:	46                   	inc    esi
c000a691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a695:	0f be 05 f8 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021bf8
c000a69c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a6:	e8 fd 2a 00 00       	call   c000d1a8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a6ab:	39 35 ec 1b 02 c0    	cmp    DWORD PTR ds:0xc0021bec,esi
c000a6b1:	7f ba                	jg     c000a66d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a6b3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a6b7:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a6bc:	c7 04 24 65 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd65
c000a6c3:	48                   	dec    eax
c000a6c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c8:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a6cd:	e8 a4 03 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a6d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a6d5:	e8 61 f0 ff ff       	call   c000973b <Virt::freeSwapfilePage(unsigned long)>
c000a6da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a6df:	48                   	dec    eax
c000a6e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a6e5:	75 01                	jne    c000a6e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a6e7:	fb                   	sti    
c000a6e8:	0f 20 d8             	mov    eax,cr3
c000a6eb:	0f 22 d8             	mov    cr3,eax
c000a6ee:	e9 28 ff ff ff       	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a6f3:	90                   	nop

c000a6f4 <VAS::scanForEviction()>:
c000a6f4:	57                   	push   edi
c000a6f5:	31 ff                	xor    edi,edi
c000a6f7:	56                   	push   esi
c000a6f8:	53                   	push   ebx
c000a6f9:	83 ec 20             	sub    esp,0x20
c000a6fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a700:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a703:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a709:	75 0e                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a70b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a70e:	89 da                	mov    edx,ebx
c000a710:	c1 ea 16             	shr    edx,0x16
c000a713:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a717:	74 51                	je     c000a76a <VAS::scanForEviction()+0x76>
c000a719:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a71d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a720:	e8 f5 f1 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a725:	8b 10                	mov    edx,DWORD PTR [eax]
c000a727:	89 d1                	mov    ecx,edx
c000a729:	81 e1 01 08 00 00    	and    ecx,0x801
c000a72f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a735:	74 3e                	je     c000a775 <VAS::scanForEviction()+0x81>
c000a737:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a73d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a743:	76 2b                	jbe    c000a770 <VAS::scanForEviction()+0x7c>
c000a745:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a74c:	47                   	inc    edi
c000a74d:	83 ff 03             	cmp    edi,0x3
c000a750:	74 32                	je     c000a784 <VAS::scanForEviction()+0x90>
c000a752:	31 db                	xor    ebx,ebx
c000a754:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a75a:	75 bd                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a75c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a75f:	89 da                	mov    edx,ebx
c000a761:	c1 ea 16             	shr    edx,0x16
c000a764:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a768:	75 af                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a76a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a770:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a773:	eb 8e                	jmp    c000a703 <VAS::scanForEviction()+0xf>
c000a775:	f6 c2 20             	test   dl,0x20
c000a778:	74 13                	je     c000a78d <VAS::scanForEviction()+0x99>
c000a77a:	83 e2 df             	and    edx,0xffffffdf
c000a77d:	89 10                	mov    DWORD PTR [eax],edx
c000a77f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a782:	eb b3                	jmp    c000a737 <VAS::scanForEviction()+0x43>
c000a784:	83 c4 20             	add    esp,0x20
c000a787:	31 c0                	xor    eax,eax
c000a789:	5b                   	pop    ebx
c000a78a:	5e                   	pop    esi
c000a78b:	5f                   	pop    edi
c000a78c:	c3                   	ret    
c000a78d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a791:	89 d0                	mov    eax,edx
c000a793:	c7 04 24 7a fd 01 c0 	mov    DWORD PTR [esp],0xc001fd7a
c000a79a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a79f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7a3:	e8 ce 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7a8:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ab:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7b2:	e8 43 fd ff ff       	call   c000a4fa <VAS::evict(unsigned long)>
c000a7b7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ba:	c7 04 24 8e fd 01 c0 	mov    DWORD PTR [esp],0xc001fd8e
c000a7c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7c5:	e8 ac 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ce:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a7d5:	83 c4 20             	add    esp,0x20
c000a7d8:	5b                   	pop    ebx
c000a7d9:	5e                   	pop    esi
c000a7da:	5f                   	pop    edi
c000a7db:	c3                   	ret    

c000a7dc <mapVASFirstTime>:
c000a7dc:	55                   	push   ebp
c000a7dd:	57                   	push   edi
c000a7de:	56                   	push   esi
c000a7df:	53                   	push   ebx
c000a7e0:	83 ec 2c             	sub    esp,0x2c
c000a7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a7e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a7eb:	4a                   	dec    edx
c000a7ec:	0f 84 06 01 00 00    	je     c000a8f8 <mapVASFirstTime+0x11c>
c000a7f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a7f5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a7fa:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7ff:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a802:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a808:	c1 e5 15             	shl    ebp,0x15
c000a80b:	29 eb                	sub    ebx,ebp
c000a80d:	29 ef                	sub    edi,ebp
c000a80f:	e8 f8 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a814:	b9 03 04 00 00       	mov    ecx,0x403
c000a819:	ba 01 00 00 00       	mov    edx,0x1
c000a81e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a822:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a828:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a830:	89 34 24             	mov    DWORD PTR [esp],esi
c000a833:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a837:	e8 46 f8 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a83c:	39 fb                	cmp    ebx,edi
c000a83e:	75 cf                	jne    c000a80f <mapVASFirstTime+0x33>
c000a840:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a845:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a84a:	29 eb                	sub    ebx,ebp
c000a84c:	29 ef                	sub    edi,ebp
c000a84e:	e8 b9 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a853:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a857:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a85b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a85e:	19 d2                	sbb    edx,edx
c000a860:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a866:	83 e2 04             	and    edx,0x4
c000a869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a86d:	81 c2 03 04 00 00    	add    edx,0x403
c000a873:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a877:	ba 01 00 00 00       	mov    edx,0x1
c000a87c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a880:	e8 fd f7 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a885:	39 df                	cmp    edi,ebx
c000a887:	75 c5                	jne    c000a84e <mapVASFirstTime+0x72>
c000a889:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a88e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a893:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a899:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a89e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8a2:	c1 eb 0c             	shr    ebx,0xc
c000a8a5:	b8 04 00 00 00       	mov    eax,0x4
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a8b3:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a8b8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a8bc:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8bf:	be 04 00 00 00       	mov    esi,0x4
c000a8c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8c8:	e8 c9 f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8cd:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a8d2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a8d6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8de:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a8e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e5:	e8 ac f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8ea:	0f 20 d8             	mov    eax,cr3
c000a8ed:	0f 22 d8             	mov    cr3,eax
c000a8f0:	83 c4 2c             	add    esp,0x2c
c000a8f3:	5b                   	pop    ebx
c000a8f4:	5e                   	pop    esi
c000a8f5:	5f                   	pop    edi
c000a8f6:	5d                   	pop    ebp
c000a8f7:	c3                   	ret    
c000a8f8:	c7 04 24 a1 fd 01 c0 	mov    DWORD PTR [esp],0xc001fda1
c000a8ff:	e8 72 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a904:	83 c4 2c             	add    esp,0x2c
c000a907:	5b                   	pop    ebx
c000a908:	5e                   	pop    esi
c000a909:	5f                   	pop    edi
c000a90a:	5d                   	pop    ebp
c000a90b:	c3                   	ret    

c000a90c <__cxa_atexit>:
c000a90c:	31 c0                	xor    eax,eax
c000a90e:	c3                   	ret    

c000a90f <__cxa_finalize>:
c000a90f:	c3                   	ret    

c000a910 <__stack_chk_fail>:
c000a910:	55                   	push   ebp
c000a911:	89 e5                	mov    ebp,esp
c000a913:	83 ec 10             	sub    esp,0x10
c000a916:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a919:	68 ba fd 01 c0       	push   0xc001fdba
c000a91e:	e8 53 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a923:	58                   	pop    eax
c000a924:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a927:	5a                   	pop    edx
c000a928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a92b:	68 ba fd 01 c0       	push   0xc001fdba
c000a930:	e8 41 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a935:	c7 04 24 c2 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdc2
c000a93c:	e8 84 5e 00 00       	call   c00107c5 <KePanic(char const*)>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	c9                   	leave  
c000a945:	c3                   	ret    

c000a946 <__cxa_pure_virtual>:
c000a946:	83 ec 18             	sub    esp,0x18
c000a949:	68 da fd 01 c0       	push   0xc001fdda
c000a94e:	e8 72 5e 00 00       	call   c00107c5 <KePanic(char const*)>
c000a953:	83 c4 1c             	add    esp,0x1c
c000a956:	c3                   	ret    

c000a957 <operator new[](unsigned long)>:
c000a957:	e9 aa d1 ff ff       	jmp    c0007b06 <malloc>

c000a95c <operator delete(void*, unsigned long)>:
c000a95c:	e9 cb d1 ff ff       	jmp    c0007b2c <rfree>

c000a961 <operator delete[](void*)>:
c000a961:	e9 c6 d1 ff ff       	jmp    c0007b2c <rfree>

c000a966 <operator delete[](void*, unsigned long)>:
c000a966:	e9 c1 d1 ff ff       	jmp    c0007b2c <rfree>

c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a96b:	55                   	push   ebp
c000a96c:	b8 30 31 32 33       	mov    eax,0x33323130
c000a971:	57                   	push   edi
c000a972:	ba 34 35 36 37       	mov    edx,0x37363534
c000a977:	56                   	push   esi
c000a978:	bf 43 44 45 46       	mov    edi,0x46454443
c000a97d:	53                   	push   ebx
c000a97e:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a983:	83 ec 20             	sub    esp,0x20
c000a986:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a98a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a98e:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a992:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a996:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a99a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a99e:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a9a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a9a7:	89 f7                	mov    edi,esi
c000a9a9:	89 eb                	mov    ebx,ebp
c000a9ab:	eb 02                	jmp    c000a9af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a9ad:	89 c7                	mov    edi,eax
c000a9af:	31 d2                	xor    edx,edx
c000a9b1:	89 f8                	mov    eax,edi
c000a9b3:	f7 f1                	div    ecx
c000a9b5:	43                   	inc    ebx
c000a9b6:	39 cf                	cmp    edi,ecx
c000a9b8:	73 f3                	jae    c000a9ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a9ba:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a9bd:	eb 02                	jmp    c000a9c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a9bf:	89 c6                	mov    esi,eax
c000a9c1:	31 d2                	xor    edx,edx
c000a9c3:	89 f0                	mov    eax,esi
c000a9c5:	f7 f1                	div    ecx
c000a9c7:	4b                   	dec    ebx
c000a9c8:	39 ce                	cmp    esi,ecx
c000a9ca:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a9cf:	88 13                	mov    BYTE PTR [ebx],dl
c000a9d1:	73 ec                	jae    c000a9bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a9d3:	83 c4 20             	add    esp,0x20
c000a9d6:	89 e8                	mov    eax,ebp
c000a9d8:	5b                   	pop    ebx
c000a9d9:	5e                   	pop    esi
c000a9da:	5f                   	pop    edi
c000a9db:	5d                   	pop    ebp
c000a9dc:	c3                   	ret    

c000a9dd <Dbg::logc(char)>:
c000a9dd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e8:	75 12                	jne    c000a9fc <Dbg::logc(char)+0x1f>
c000a9ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000a9ef:	ec                   	in     al,dx
c000a9f0:	24 20                	and    al,0x20
c000a9f2:	74 fb                	je     c000a9ef <Dbg::logc(char)+0x12>
c000a9f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000a9f9:	88 c8                	mov    al,cl
c000a9fb:	ee                   	out    dx,al
c000a9fc:	c3                   	ret    

c000a9fd <Dbg::logs(char*)>:
c000a9fd:	53                   	push   ebx
c000a9fe:	83 ec 04             	sub    esp,0x4
c000aa01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa08:	84 c0                	test   al,al
c000aa0a:	74 10                	je     c000aa1c <Dbg::logs(char*)+0x1f>
c000aa0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa0f:	43                   	inc    ebx
c000aa10:	e8 c8 ff ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aa15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa18:	84 c0                	test   al,al
c000aa1a:	75 f0                	jne    c000aa0c <Dbg::logs(char*)+0xf>
c000aa1c:	58                   	pop    eax
c000aa1d:	5b                   	pop    ebx
c000aa1e:	c3                   	ret    

c000aa1f <Dbg::logWriteInt(unsigned int)>:
c000aa1f:	83 ec 1c             	sub    esp,0x1c
c000aa22:	b8 0a 00 00 00       	mov    eax,0xa
c000aa27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa2b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa37:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3a:	e8 2c ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa42:	e8 b6 ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa47:	83 c4 1c             	add    esp,0x1c
c000aa4a:	c3                   	ret    

c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>:
c000aa4b:	83 ec 1c             	sub    esp,0x1c
c000aa4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa56:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa62:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa65:	e8 01 ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	e8 8b ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa72:	83 c4 1c             	add    esp,0x1c
c000aa75:	c3                   	ret    

c000aa76 <Dbg::kprintf(char const*, ...)>:
c000aa76:	55                   	push   ebp
c000aa77:	57                   	push   edi
c000aa78:	56                   	push   esi
c000aa79:	53                   	push   ebx
c000aa7a:	83 ec 14             	sub    esp,0x14
c000aa7d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa84:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000aa88:	74 08                	je     c000aa92 <Dbg::kprintf(char const*, ...)+0x1c>
c000aa8a:	83 c4 14             	add    esp,0x14
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	5d                   	pop    ebp
c000aa91:	c3                   	ret    
c000aa92:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000aa96:	31 db                	xor    ebx,ebx
c000aa98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa9f:	84 c0                	test   al,al
c000aaa1:	74 e7                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aaa3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaa6:	3c 25                	cmp    al,0x25
c000aaa8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaab:	75 46                	jne    c000aaf3 <Dbg::kprintf(char const*, ...)+0x7d>
c000aaad:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aab0:	83 c3 02             	add    ebx,0x2
c000aab3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aab6:	2c 25                	sub    al,0x25
c000aab8:	3c 53                	cmp    al,0x53
c000aaba:	0f 87 e8 00 00 00    	ja     c000aba8 <Dbg::kprintf(char const*, ...)+0x132>
c000aac0:	0f b6 c0             	movzx  eax,al
c000aac3:	ff 24 85 f0 fd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0210]
c000aaca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aace:	89 c8                	mov    eax,ecx
c000aad0:	83 c1 04             	add    ecx,0x4
c000aad3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aad7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad9:	89 04 24             	mov    DWORD PTR [esp],eax
c000aadc:	e8 3e ff ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000aae1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aae5:	84 c0                	test   al,al
c000aae7:	74 a1                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aae9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaec:	3c 25                	cmp    al,0x25
c000aaee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaf1:	74 ba                	je     c000aaad <Dbg::kprintf(char const*, ...)+0x37>
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 eb                	mov    ebx,ebp
c000aaf8:	89 fd                	mov    ebp,edi
c000aafa:	e8 de fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aaff:	eb e0                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab05:	89 c8                	mov    eax,ecx
c000ab07:	83 c1 04             	add    ecx,0x4
c000ab0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab10:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab13:	e8 e5 fe ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000ab18:	eb c7                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab1e:	89 d0                	mov    eax,edx
c000ab20:	83 c2 04             	add    edx,0x4
c000ab23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab27:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2c:	e8 ee fe ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000ab31:	eb ae                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab37:	89 d0                	mov    eax,edx
c000ab39:	83 c2 04             	add    edx,0x4
c000ab3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab40:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ab43:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab46:	e8 92 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000ab4b:	eb 94                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab51:	89 c8                	mov    eax,ecx
c000ab53:	83 c1 04             	add    ecx,0x4
c000ab56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab5a:	b9 10 00 00 00       	mov    ecx,0x10
c000ab5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab65:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab68:	e8 de fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab6d:	e9 6f ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab76:	89 d0                	mov    eax,edx
c000ab78:	83 c2 08             	add    edx,0x8
c000ab7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7f:	ba 10 00 00 00       	mov    edx,0x10
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8d:	e8 b9 fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab92:	e9 4a ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab97:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab9e:	e8 3a fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aba3:	e9 39 ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000aba8:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000abaf:	e8 29 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abb4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000abb7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abba:	e8 1e fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abbf:	e9 1d ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>

c000abc4 <File::read(unsigned long long, void*, int*)>:
c000abc4:	53                   	push   ebx
c000abc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abcd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abd4:	3c 19                	cmp    al,0x19
c000abd6:	77 35                	ja     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abd8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abdf:	85 c0                	test   eax,eax
c000abe1:	74 2a                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abe3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abe9:	85 c0                	test   eax,eax
c000abeb:	74 20                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abf1:	74 21                	je     c000ac14 <File::read(unsigned long long, void*, int*)+0x50>
c000abf3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abf5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abf9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac07:	5b                   	pop    ebx
c000ac08:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ac0b:	ff e0                	jmp    eax
c000ac0d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac12:	eb 05                	jmp    c000ac19 <File::read(unsigned long long, void*, int*)+0x55>
c000ac14:	b8 05 00 00 00       	mov    eax,0x5
c000ac19:	5b                   	pop    ebx
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <File::write(unsigned long long, void*, int*)>:
c000ac1c:	53                   	push   ebx
c000ac1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac25:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac2c:	3c 19                	cmp    al,0x19
c000ac2e:	77 35                	ja     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac30:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	74 2a                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac3b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac41:	85 c0                	test   eax,eax
c000ac43:	74 20                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac49:	74 21                	je     c000ac6c <File::write(unsigned long long, void*, int*)+0x50>
c000ac4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac4d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac51:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5f:	5b                   	pop    ebx
c000ac60:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ac63:	ff e0                	jmp    eax
c000ac65:	b8 0b 00 00 00       	mov    eax,0xb
c000ac6a:	eb 05                	jmp    c000ac71 <File::write(unsigned long long, void*, int*)+0x55>
c000ac6c:	b8 05 00 00 00       	mov    eax,0x5
c000ac71:	5b                   	pop    ebx
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <Directory::read(unsigned long long, void*, int*)>:
c000ac74:	53                   	push   ebx
c000ac75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac7d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac84:	3c 19                	cmp    al,0x19
c000ac86:	77 35                	ja     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac88:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac8f:	85 c0                	test   eax,eax
c000ac91:	74 2a                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 20                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac9d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aca1:	74 21                	je     c000acc4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000aca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aca5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000acaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb7:	5b                   	pop    ebx
c000acb8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000acbb:	ff e0                	jmp    eax
c000acbd:	b8 0b 00 00 00       	mov    eax,0xb
c000acc2:	eb 05                	jmp    c000acc9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000acc4:	b8 05 00 00 00       	mov    eax,0x5
c000acc9:	5b                   	pop    ebx
c000acca:	c3                   	ret    
c000accb:	90                   	nop

c000accc <Directory::write(unsigned long long, void*, int*)>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000acd7:	b8 0b 00 00 00       	mov    eax,0xb
c000acdc:	80 fa 19             	cmp    dl,0x19
c000acdf:	77 18                	ja     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ace1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ace8:	85 d2                	test   edx,edx
c000acea:	74 0d                	je     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000acec:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000acf3:	19 c0                	sbb    eax,eax
c000acf5:	83 e0 0a             	and    eax,0xa
c000acf8:	40                   	inc    eax
c000acf9:	c3                   	ret    

c000acfa <File::isAtty()>:
c000acfa:	31 c0                	xor    eax,eax
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <Directory::isAtty()>:
c000acfe:	31 c0                	xor    eax,eax
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ad02:	b8 0a 00 00 00       	mov    eax,0xa
c000ad07:	c3                   	ret    

c000ad08 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ad08:	b8 0a 00 00 00       	mov    eax,0xa
c000ad0d:	c3                   	ret    

c000ad0e <Filesystem::allocateSwapfile(char const*, int)>:
c000ad0e:	31 c0                	xor    eax,eax
c000ad10:	31 d2                	xor    edx,edx
c000ad12:	c3                   	ret    
c000ad13:	90                   	nop

c000ad14 <File::~File()>:
c000ad14:	83 ec 1c             	sub    esp,0x1c
c000ad17:	ba b0 ff 01 c0       	mov    edx,0xc001ffb0
c000ad1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad20:	89 10                	mov    DWORD PTR [eax],edx
c000ad22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	e8 8e e6 ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000ad2e:	90                   	nop
c000ad2f:	83 c4 1c             	add    esp,0x1c
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <File::~File()>:
c000ad34:	83 ec 1c             	sub    esp,0x1c
c000ad37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad3e:	e8 d1 ff ff ff       	call   c000ad14 <File::~File()>
c000ad43:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad52:	e8 05 fc ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad57:	83 c4 1c             	add    esp,0x1c
c000ad5a:	c3                   	ret    
c000ad5b:	90                   	nop

c000ad5c <Directory::~Directory()>:
c000ad5c:	83 ec 1c             	sub    esp,0x1c
c000ad5f:	ba cc ff 01 c0       	mov    edx,0xc001ffcc
c000ad64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad68:	89 10                	mov    DWORD PTR [eax],edx
c000ad6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad71:	e8 46 e6 ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000ad76:	90                   	nop
c000ad77:	83 c4 1c             	add    esp,0x1c
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <Directory::~Directory()>:
c000ad7c:	83 ec 1c             	sub    esp,0x1c
c000ad7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad86:	e8 d1 ff ff ff       	call   c000ad5c <Directory::~Directory()>
c000ad8b:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9a:	e8 bd fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad9f:	83 c4 1c             	add    esp,0x1c
c000ada2:	c3                   	ret    
c000ada3:	90                   	nop

c000ada4 <Filesystem::Filesystem()>:
c000ada4:	ba 48 ff 01 c0       	mov    edx,0xc001ff48
c000ada9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adad:	89 10                	mov    DWORD PTR [eax],edx
c000adaf:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000adb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000adbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adc0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000adc5:	90                   	nop
c000adc6:	c3                   	ret    
c000adc7:	90                   	nop

c000adc8 <Filesystem::~Filesystem()>:
c000adc8:	ba 48 ff 01 c0       	mov    edx,0xc001ff48
c000adcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000add1:	89 10                	mov    DWORD PTR [eax],edx
c000add3:	90                   	nop
c000add4:	c3                   	ret    
c000add5:	90                   	nop

c000add6 <Filesystem::~Filesystem()>:
c000add6:	83 ec 1c             	sub    esp,0x1c
c000add9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000addd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ade0:	e8 e3 ff ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c000ade5:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000aded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000adf4:	e8 63 fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000adf9:	83 c4 1c             	add    esp,0x1c
c000adfc:	c3                   	ret    

c000adfd <Fs::getcwd(Process*, char*, int)>:
c000adfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae01:	31 c0                	xor    eax,eax
c000ae03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ae07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ae0a:	7d 15                	jge    c000ae21 <Fs::getcwd(Process*, char*, int)+0x24>
c000ae0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ae10:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ae17:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ae1a:	84 c9                	test   cl,cl
c000ae1c:	74 06                	je     c000ae24 <Fs::getcwd(Process*, char*, int)+0x27>
c000ae1e:	40                   	inc    eax
c000ae1f:	eb e2                	jmp    c000ae03 <Fs::getcwd(Process*, char*, int)+0x6>
c000ae21:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ae24:	31 c0                	xor    eax,eax
c000ae26:	c3                   	ret    

c000ae27 <Fs::initVFS()>:
c000ae27:	83 ec 18             	sub    esp,0x18
c000ae2a:	6a 08                	push   0x8
c000ae2c:	e8 d5 cc ff ff       	call   c0007b06 <malloc>
c000ae31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae34:	e8 c7 db 00 00       	call   c0018a00 <FAT::FAT()>
c000ae39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ae40:	e8 c1 cc ff ff       	call   c0007b06 <malloc>
c000ae45:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae48:	e8 1d ea 00 00       	call   c001986a <ISO9660::ISO9660()>
c000ae4d:	83 c4 1c             	add    esp,0x1c
c000ae50:	c3                   	ret    

c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ae51:	55                   	push   ebp
c000ae52:	57                   	push   edi
c000ae53:	56                   	push   esi
c000ae54:	53                   	push   ebx
c000ae55:	81 ec 10 04 00 00    	sub    esp,0x410
c000ae5b:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ae62:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ae69:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ae70:	68 00 04 00 00       	push   0x400
c000ae75:	6a 00                	push   0x0
c000ae77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ae7b:	56                   	push   esi
c000ae7c:	e8 ff 56 ff ff       	call   c0000580 <memset>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ae88:	75 0b                	jne    c000ae95 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ae8a:	50                   	push   eax
c000ae8b:	50                   	push   eax
c000ae8c:	57                   	push   edi
c000ae8d:	56                   	push   esi
c000ae8e:	e8 8d 58 ff ff       	call   c0000720 <strcpy>
c000ae93:	eb 40                	jmp    c000aed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000ae95:	8a 07                	mov    al,BYTE PTR [edi]
c000ae97:	3c 2f                	cmp    al,0x2f
c000ae99:	74 04                	je     c000ae9f <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ae9b:	3c 5c                	cmp    al,0x5c
c000ae9d:	75 17                	jne    c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000ae9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aea2:	3c 60                	cmp    al,0x60
c000aea4:	7e 02                	jle    c000aea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000aea6:	2c 20                	sub    al,0x20
c000aea8:	88 04 24             	mov    BYTE PTR [esp],al
c000aeab:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aeb2:	50                   	push   eax
c000aeb3:	50                   	push   eax
c000aeb4:	eb 18                	jmp    c000aece <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000aeb6:	50                   	push   eax
c000aeb7:	50                   	push   eax
c000aeb8:	55                   	push   ebp
c000aeb9:	56                   	push   esi
c000aeba:	e8 61 58 ff ff       	call   c0000720 <strcpy>
c000aebf:	5a                   	pop    edx
c000aec0:	59                   	pop    ecx
c000aec1:	68 9b 0e 02 c0       	push   0xc0020e9b
c000aec6:	56                   	push   esi
c000aec7:	e8 64 5a ff ff       	call   c0000930 <strcat>
c000aecc:	5d                   	pop    ebp
c000aecd:	58                   	pop    eax
c000aece:	57                   	push   edi
c000aecf:	56                   	push   esi
c000aed0:	e8 5b 5a ff ff       	call   c0000930 <strcat>
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aedb:	3c 60                	cmp    al,0x60
c000aedd:	7e 02                	jle    c000aee1 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000aedf:	2c 20                	sub    al,0x20
c000aee1:	88 04 24             	mov    BYTE PTR [esp],al
c000aee4:	bf 03 00 00 00       	mov    edi,0x3
c000aee9:	88 03                	mov    BYTE PTR [ebx],al
c000aeeb:	b8 03 00 00 00       	mov    eax,0x3
c000aef0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aef7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aefd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000af01:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000af04:	84 d2                	test   dl,dl
c000af06:	0f 84 91 00 00 00    	je     c000af9d <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000af0c:	8d 4f 01             	lea    ecx,[edi+0x1]
c000af0f:	80 fa 2f             	cmp    dl,0x2f
c000af12:	74 05                	je     c000af19 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000af14:	80 fa 5c             	cmp    dl,0x5c
c000af17:	75 12                	jne    c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af1e:	89 c5                	mov    ebp,eax
c000af20:	74 09                	je     c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af22:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000af26:	40                   	inc    eax
c000af27:	89 cf                	mov    edi,ecx
c000af29:	eb d6                	jmp    c000af01 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000af2b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000af30:	75 5b                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af32:	80 fa 2e             	cmp    dl,0x2e
c000af35:	75 56                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af37:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000af3b:	74 19                	je     c000af56 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000af3d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af42:	74 53                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af44:	89 f9                	mov    ecx,edi
c000af46:	41                   	inc    ecx
c000af47:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af4a:	80 fa 2f             	cmp    dl,0x2f
c000af4d:	74 f7                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af4f:	80 fa 5c             	cmp    dl,0x5c
c000af52:	74 f2                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af54:	eb d1                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af56:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af5b:	74 3a                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af5d:	83 f8 03             	cmp    eax,0x3
c000af60:	74 c5                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af62:	41                   	inc    ecx
c000af63:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af66:	80 fa 2f             	cmp    dl,0x2f
c000af69:	74 f7                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af6b:	80 fa 5c             	cmp    dl,0x5c
c000af6e:	74 f2                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af70:	48                   	dec    eax
c000af71:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af75:	75 06                	jne    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af77:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af7b:	eb f3                	jmp    c000af70 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000af7d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af81:	74 07                	je     c000af8a <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000af83:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af87:	48                   	dec    eax
c000af88:	eb f3                	jmp    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af8a:	40                   	inc    eax
c000af8b:	eb 9a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af8d:	80 fa 2f             	cmp    dl,0x2f
c000af90:	74 95                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af92:	80 fa 5c             	cmp    dl,0x5c
c000af95:	74 90                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af97:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af9a:	40                   	inc    eax
c000af9b:	eb 8a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af9d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000afa1:	83 ec 0c             	sub    esp,0xc
c000afa4:	53                   	push   ebx
c000afa5:	e8 76 56 ff ff       	call   c0000620 <strlen>
c000afaa:	83 c4 10             	add    esp,0x10
c000afad:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000afb2:	75 26                	jne    c000afda <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	53                   	push   ebx
c000afb8:	e8 63 56 ff ff       	call   c0000620 <strlen>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000afc5:	74 26                	je     c000afed <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000afc7:	83 ec 0c             	sub    esp,0xc
c000afca:	53                   	push   ebx
c000afcb:	e8 50 56 ff ff       	call   c0000620 <strlen>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000afd8:	eb c7                	jmp    c000afa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	53                   	push   ebx
c000afde:	e8 3d 56 ff ff       	call   c0000620 <strlen>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000afeb:	74 c7                	je     c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000afed:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aff3:	5b                   	pop    ebx
c000aff4:	5e                   	pop    esi
c000aff5:	5f                   	pop    edi
c000aff6:	5d                   	pop    ebp
c000aff7:	c3                   	ret    

c000aff8 <File::File(char const*, Process*)>:
c000aff8:	83 ec 1c             	sub    esp,0x1c
c000affb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b007:	89 04 24             	mov    DWORD PTR [esp],eax
c000b00a:	e8 e7 e1 ff ff       	call   c00091f6 <UnixFile::UnixFile(int)>
c000b00f:	ba b0 ff 01 c0       	mov    edx,0xc001ffb0
c000b014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b01e:	05 0c 01 00 00       	add    eax,0x10c
c000b023:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b027:	83 c2 0d             	add    edx,0xd
c000b02a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b02e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b036:	89 14 24             	mov    DWORD PTR [esp],edx
c000b039:	e8 13 fe ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b042:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b046:	2c 41                	sub    al,0x41
c000b048:	88 c2                	mov    dl,al
c000b04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b058:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b060:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b067:	0f b6 c0             	movzx  eax,al
c000b06a:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b071:	85 c0                	test   eax,eax
c000b073:	74 3c                	je     c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b079:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b080:	0f b6 c0             	movzx  eax,al
c000b083:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b08a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b090:	85 c0                	test   eax,eax
c000b092:	75 1d                	jne    c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b098:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b09f:	0f b6 c0             	movzx  eax,al
c000b0a2:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b0a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0ac:	e8 35 20 00 00       	call   c000d0e6 <LogicalDisk::mount()>
c000b0b1:	90                   	nop
c000b0b2:	83 c4 1c             	add    esp,0x1c
c000b0b5:	c3                   	ret    

c000b0b6 <File::open(FileOpenMode)>:
c000b0b6:	53                   	push   ebx
c000b0b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0bc:	83 ec 08             	sub    esp,0x8
c000b0bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0ca:	80 fa 19             	cmp    dl,0x19
c000b0cd:	77 40                	ja     c000b10f <File::open(FileOpenMode)+0x59>
c000b0cf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0d6:	85 d2                	test   edx,edx
c000b0d8:	74 35                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0da:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0e0:	85 d2                	test   edx,edx
c000b0e2:	74 2b                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0e4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0e8:	b8 06 00 00 00       	mov    eax,0x6
c000b0ed:	75 20                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b0ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fb:	51                   	push   ecx
c000b0fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0ff:	51                   	push   ecx
c000b100:	52                   	push   edx
c000b101:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	85 c0                	test   eax,eax
c000b109:	75 04                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b10b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b10f:	83 c4 08             	add    esp,0x8
c000b112:	5b                   	pop    ebx
c000b113:	c3                   	ret    

c000b114 <File::close()>:
c000b114:	53                   	push   ebx
c000b115:	b8 0b 00 00 00       	mov    eax,0xb
c000b11a:	83 ec 08             	sub    esp,0x8
c000b11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b121:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b128:	80 fa 19             	cmp    dl,0x19
c000b12b:	77 41                	ja     c000b16e <File::close()+0x5a>
c000b12d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b134:	85 db                	test   ebx,ebx
c000b136:	74 36                	je     c000b16e <File::close()+0x5a>
c000b138:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b13f:	74 2d                	je     c000b16e <File::close()+0x5a>
c000b141:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b145:	b8 05 00 00 00       	mov    eax,0x5
c000b14a:	74 22                	je     c000b16e <File::close()+0x5a>
c000b14c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b150:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b157:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b15d:	53                   	push   ebx
c000b15e:	53                   	push   ebx
c000b15f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b161:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b167:	50                   	push   eax
c000b168:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	83 c4 08             	add    esp,0x8
c000b171:	5b                   	pop    ebx
c000b172:	c3                   	ret    
c000b173:	90                   	nop

c000b174 <File::seek(unsigned long long)>:
c000b174:	56                   	push   esi
c000b175:	b8 0b 00 00 00       	mov    eax,0xb
c000b17a:	53                   	push   ebx
c000b17b:	51                   	push   ecx
c000b17c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b180:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b184:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b188:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b18f:	80 fa 19             	cmp    dl,0x19
c000b192:	77 31                	ja     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b194:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b19b:	85 d2                	test   edx,edx
c000b19d:	74 26                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b19f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1a5:	85 d2                	test   edx,edx
c000b1a7:	74 1c                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1a9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b1ad:	b8 05 00 00 00       	mov    eax,0x5
c000b1b2:	74 11                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b6:	53                   	push   ebx
c000b1b7:	51                   	push   ecx
c000b1b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b1be:	52                   	push   edx
c000b1bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	5a                   	pop    edx
c000b1c6:	5b                   	pop    ebx
c000b1c7:	5e                   	pop    esi
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <File::tell(unsigned long long*)>:
c000b1ca:	83 ec 0c             	sub    esp,0xc
c000b1cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1dd:	80 fa 19             	cmp    dl,0x19
c000b1e0:	77 34                	ja     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1e2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b1e9:	85 d2                	test   edx,edx
c000b1eb:	74 29                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1f3:	85 d2                	test   edx,edx
c000b1f5:	74 1f                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1f7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1fb:	b8 05 00 00 00       	mov    eax,0x5
c000b200:	74 14                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b202:	50                   	push   eax
c000b203:	8b 02                	mov    eax,DWORD PTR [edx]
c000b205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b209:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b20f:	52                   	push   edx
c000b210:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	83 c4 0c             	add    esp,0xc
c000b219:	c3                   	ret    

c000b21a <File::rewind()>:
c000b21a:	83 ec 10             	sub    esp,0x10
c000b21d:	6a 00                	push   0x0
c000b21f:	6a 00                	push   0x0
c000b221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b225:	e8 4a ff ff ff       	call   c000b174 <File::seek(unsigned long long)>
c000b22a:	83 c4 1c             	add    esp,0x1c
c000b22d:	c3                   	ret    

c000b22e <File::unlink()>:
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	b8 0b 00 00 00       	mov    eax,0xb
c000b236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b23a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b241:	80 f9 19             	cmp    cl,0x19
c000b244:	77 2f                	ja     c000b275 <File::unlink()+0x47>
c000b246:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b24d:	85 c9                	test   ecx,ecx
c000b24f:	74 24                	je     c000b275 <File::unlink()+0x47>
c000b251:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b257:	85 c9                	test   ecx,ecx
c000b259:	74 1a                	je     c000b275 <File::unlink()+0x47>
c000b25b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25f:	b8 06 00 00 00       	mov    eax,0x6
c000b264:	75 0f                	jne    c000b275 <File::unlink()+0x47>
c000b266:	50                   	push   eax
c000b267:	83 c2 0d             	add    edx,0xd
c000b26a:	50                   	push   eax
c000b26b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26d:	52                   	push   edx
c000b26e:	51                   	push   ecx
c000b26f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	83 c4 0c             	add    esp,0xc
c000b278:	c3                   	ret    
c000b279:	90                   	nop

c000b27a <File::rename(char const*)>:
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b286:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b28d:	80 f9 19             	cmp    cl,0x19
c000b290:	77 32                	ja     c000b2c4 <File::rename(char const*)+0x4a>
c000b292:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b299:	85 c9                	test   ecx,ecx
c000b29b:	74 27                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b29d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a3:	85 c9                	test   ecx,ecx
c000b2a5:	74 1d                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b2a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ab:	b8 06 00 00 00       	mov    eax,0x6
c000b2b0:	75 12                	jne    c000b2c4 <File::rename(char const*)+0x4a>
c000b2b2:	50                   	push   eax
c000b2b3:	83 c2 0d             	add    edx,0xd
c000b2b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2bc:	52                   	push   edx
c000b2bd:	51                   	push   ecx
c000b2be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 c4 0c             	add    esp,0xc
c000b2c7:	c3                   	ret    

c000b2c8 <File::chfatattr(unsigned char, unsigned char)>:
c000b2c8:	56                   	push   esi
c000b2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ce:	53                   	push   ebx
c000b2cf:	51                   	push   ecx
c000b2d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2d4:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b2d9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b2de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2e5:	80 fa 19             	cmp    dl,0x19
c000b2e8:	77 2f                	ja     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ea:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b2f1:	85 d2                	test   edx,edx
c000b2f3:	74 24                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2f5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2fb:	85 d2                	test   edx,edx
c000b2fd:	74 1a                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ff:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b303:	b8 06 00 00 00       	mov    eax,0x6
c000b308:	75 0f                	jne    c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b30a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b30c:	83 c6 0d             	add    esi,0xd
c000b30f:	53                   	push   ebx
c000b310:	51                   	push   ecx
c000b311:	56                   	push   esi
c000b312:	52                   	push   edx
c000b313:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	5a                   	pop    edx
c000b31a:	5b                   	pop    ebx
c000b31b:	5e                   	pop    esi
c000b31c:	c3                   	ret    
c000b31d:	90                   	nop

c000b31e <File::exists()>:
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	31 c0                	xor    eax,eax
c000b323:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b327:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b32e:	80 f9 19             	cmp    cl,0x19
c000b331:	77 24                	ja     c000b357 <File::exists()+0x39>
c000b333:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b33a:	85 c9                	test   ecx,ecx
c000b33c:	74 19                	je     c000b357 <File::exists()+0x39>
c000b33e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b344:	85 c9                	test   ecx,ecx
c000b346:	74 0f                	je     c000b357 <File::exists()+0x39>
c000b348:	50                   	push   eax
c000b349:	83 c2 0d             	add    edx,0xd
c000b34c:	50                   	push   eax
c000b34d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b34f:	52                   	push   edx
c000b350:	51                   	push   ecx
c000b351:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b354:	83 c4 10             	add    esp,0x10
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <File::stat(unsigned long long*, bool*)>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	50                   	push   eax
c000b35f:	b8 0b 00 00 00       	mov    eax,0xb
c000b364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b368:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b36c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b377:	80 f9 19             	cmp    cl,0x19
c000b37a:	77 3d                	ja     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b37c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b383:	85 c9                	test   ecx,ecx
c000b385:	74 32                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b38d:	85 c9                	test   ecx,ecx
c000b38f:	74 28                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b395:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b397:	74 13                	je     c000b3ac <File::stat(unsigned long long*, bool*)+0x50>
c000b399:	83 ec 04             	sub    esp,0x4
c000b39c:	56                   	push   esi
c000b39d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b3a3:	51                   	push   ecx
c000b3a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b3a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b3aa:	eb 0a                	jmp    c000b3b6 <File::stat(unsigned long long*, bool*)+0x5a>
c000b3ac:	53                   	push   ebx
c000b3ad:	83 c2 0d             	add    edx,0xd
c000b3b0:	56                   	push   esi
c000b3b1:	52                   	push   edx
c000b3b2:	51                   	push   ecx
c000b3b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	c3                   	ret    

c000b3bd <Fs::setcwd(Process*, char*)>:
c000b3bd:	55                   	push   ebp
c000b3be:	57                   	push   edi
c000b3bf:	56                   	push   esi
c000b3c0:	53                   	push   ebx
c000b3c1:	81 ec 20 02 00 00    	sub    esp,0x220
c000b3c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b3ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b3d4:	57                   	push   edi
c000b3d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b3dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b3e0:	56                   	push   esi
c000b3e1:	e8 6b fa ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b3e6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3e9:	e8 32 52 ff ff       	call   c0000620 <strlen>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	83 f8 02             	cmp    eax,0x2
c000b3f4:	77 15                	ja     c000b40b <Fs::setcwd(Process*, char*)+0x4e>
c000b3f6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b3fb:	83 eb 41             	sub    ebx,0x41
c000b3fe:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b405:	85 c0                	test   eax,eax
c000b407:	75 1c                	jne    c000b425 <Fs::setcwd(Process*, char*)+0x68>
c000b409:	eb 2f                	jmp    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	56                   	push   esi
c000b40f:	e8 0c 52 ff ff       	call   c0000620 <strlen>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	83 f8 03             	cmp    eax,0x3
c000b41a:	75 57                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b41c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b421:	75 50                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b423:	eb d1                	jmp    c000b3f6 <Fs::setcwd(Process*, char*)+0x39>
c000b425:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b42c:	75 0c                	jne    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 af 1c 00 00       	call   c000d0e6 <LogicalDisk::mount()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	83 fb 19             	cmp    ebx,0x19
c000b43d:	b8 03 00 00 00       	mov    eax,0x3
c000b442:	0f 87 c6 00 00 00    	ja     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b448:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b44f:	b8 05 00 00 00       	mov    eax,0x5
c000b454:	85 d2                	test   edx,edx
c000b456:	0f 84 b2 00 00 00    	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b45c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b463:	b8 06 00 00 00       	mov    eax,0x6
c000b468:	0f 85 92 00 00 00    	jne    c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b46e:	e9 9b 00 00 00       	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	68 14 01 00 00       	push   0x114
c000b47b:	e8 86 c6 ff ff       	call   c0007b06 <malloc>
c000b480:	83 c4 0c             	add    esp,0xc
c000b483:	55                   	push   ebp
c000b484:	56                   	push   esi
c000b485:	50                   	push   eax
c000b486:	89 c3                	mov    ebx,eax
c000b488:	e8 6b fb ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b48d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b492:	83 c4 0c             	add    esp,0xc
c000b495:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b499:	50                   	push   eax
c000b49a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b49e:	50                   	push   eax
c000b49f:	53                   	push   ebx
c000b4a0:	e8 b7 fe ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	83 f8 02             	cmp    eax,0x2
c000b4ab:	74 27                	je     c000b4d4 <Fs::setcwd(Process*, char*)+0x117>
c000b4ad:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4b2:	75 1c                	jne    c000b4d0 <Fs::setcwd(Process*, char*)+0x113>
c000b4b4:	85 db                	test   ebx,ebx
c000b4b6:	b8 02 00 00 00       	mov    eax,0x2
c000b4bb:	74 51                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bf:	83 ec 0c             	sub    esp,0xc
c000b4c2:	53                   	push   ebx
c000b4c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	b8 02 00 00 00       	mov    eax,0x2
c000b4ce:	eb 3e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	74 1c                	je     c000b4f0 <Fs::setcwd(Process*, char*)+0x133>
c000b4d4:	85 db                	test   ebx,ebx
c000b4d6:	b8 01 00 00 00       	mov    eax,0x1
c000b4db:	74 31                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	53                   	push   ebx
c000b4e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	b8 01 00 00 00       	mov    eax,0x1
c000b4ee:	eb 1e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4f0:	85 db                	test   ebx,ebx
c000b4f2:	74 0c                	je     c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b4f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	53                   	push   ebx
c000b4fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	50                   	push   eax
c000b501:	50                   	push   eax
c000b502:	56                   	push   esi
c000b503:	57                   	push   edi
c000b504:	e8 17 52 ff ff       	call   c0000720 <strcpy>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b514:	5b                   	pop    ebx
c000b515:	5e                   	pop    esi
c000b516:	5f                   	pop    edi
c000b517:	5d                   	pop    ebp
c000b518:	c3                   	ret    
c000b519:	90                   	nop

c000b51a <Directory::Directory(char const*, Process*)>:
c000b51a:	83 ec 1c             	sub    esp,0x1c
c000b51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b521:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b529:	89 04 24             	mov    DWORD PTR [esp],eax
c000b52c:	e8 c5 dc ff ff       	call   c00091f6 <UnixFile::UnixFile(int)>
c000b531:	ba cc ff 01 c0       	mov    edx,0xc001ffcc
c000b536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b53a:	89 10                	mov    DWORD PTR [eax],edx
c000b53c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b540:	05 0c 01 00 00       	add    eax,0x10c
c000b545:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b549:	83 c2 0d             	add    edx,0xd
c000b54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b550:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b558:	89 14 24             	mov    DWORD PTR [esp],edx
c000b55b:	e8 f1 f8 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b564:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b568:	2c 41                	sub    al,0x41
c000b56a:	88 c2                	mov    dl,al
c000b56c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b570:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b57a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b582:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b589:	0f b6 c0             	movzx  eax,al
c000b58c:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b593:	85 c0                	test   eax,eax
c000b595:	74 3c                	je     c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b59b:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5a2:	0f b6 c0             	movzx  eax,al
c000b5a5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	75 1d                	jne    c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5ba:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5c1:	0f b6 c0             	movzx  eax,al
c000b5c4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5ce:	e8 13 1b 00 00       	call   c000d0e6 <LogicalDisk::mount()>
c000b5d3:	90                   	nop
c000b5d4:	83 c4 1c             	add    esp,0x1c
c000b5d7:	c3                   	ret    

c000b5d8 <Directory::open()>:
c000b5d8:	53                   	push   ebx
c000b5d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5de:	83 ec 08             	sub    esp,0x8
c000b5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b5ec:	80 fa 19             	cmp    dl,0x19
c000b5ef:	77 3d                	ja     c000b62e <Directory::open()+0x56>
c000b5f1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5f8:	85 d2                	test   edx,edx
c000b5fa:	74 32                	je     c000b62e <Directory::open()+0x56>
c000b5fc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b602:	85 d2                	test   edx,edx
c000b604:	74 28                	je     c000b62e <Directory::open()+0x56>
c000b606:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b60a:	b8 06 00 00 00       	mov    eax,0x6
c000b60f:	75 1d                	jne    c000b62e <Directory::open()+0x56>
c000b611:	50                   	push   eax
c000b612:	8b 02                	mov    eax,DWORD PTR [edx]
c000b614:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b61a:	51                   	push   ecx
c000b61b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b61e:	51                   	push   ecx
c000b61f:	52                   	push   edx
c000b620:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b623:	83 c4 10             	add    esp,0x10
c000b626:	85 c0                	test   eax,eax
c000b628:	75 04                	jne    c000b62e <Directory::open()+0x56>
c000b62a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b62e:	83 c4 08             	add    esp,0x8
c000b631:	5b                   	pop    ebx
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Directory::close()>:
c000b634:	53                   	push   ebx
c000b635:	b8 0b 00 00 00       	mov    eax,0xb
c000b63a:	83 ec 08             	sub    esp,0x8
c000b63d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b641:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b648:	80 fa 19             	cmp    dl,0x19
c000b64b:	77 41                	ja     c000b68e <Directory::close()+0x5a>
c000b64d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b654:	85 db                	test   ebx,ebx
c000b656:	74 36                	je     c000b68e <Directory::close()+0x5a>
c000b658:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b65f:	74 2d                	je     c000b68e <Directory::close()+0x5a>
c000b661:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b665:	b8 05 00 00 00       	mov    eax,0x5
c000b66a:	74 22                	je     c000b68e <Directory::close()+0x5a>
c000b66c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b670:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b677:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b67d:	53                   	push   ebx
c000b67e:	53                   	push   ebx
c000b67f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b681:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b687:	50                   	push   eax
c000b688:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b68b:	83 c4 10             	add    esp,0x10
c000b68e:	83 c4 08             	add    esp,0x8
c000b691:	5b                   	pop    ebx
c000b692:	c3                   	ret    
c000b693:	90                   	nop

c000b694 <Directory::unlink()>:
c000b694:	83 ec 0c             	sub    esp,0xc
c000b697:	b8 0b 00 00 00       	mov    eax,0xb
c000b69c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a7:	80 f9 19             	cmp    cl,0x19
c000b6aa:	77 2f                	ja     c000b6db <Directory::unlink()+0x47>
c000b6ac:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6b3:	85 c9                	test   ecx,ecx
c000b6b5:	74 24                	je     c000b6db <Directory::unlink()+0x47>
c000b6b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6bd:	85 c9                	test   ecx,ecx
c000b6bf:	74 1a                	je     c000b6db <Directory::unlink()+0x47>
c000b6c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6c5:	b8 06 00 00 00       	mov    eax,0x6
c000b6ca:	75 0f                	jne    c000b6db <Directory::unlink()+0x47>
c000b6cc:	50                   	push   eax
c000b6cd:	83 c2 0d             	add    edx,0xd
c000b6d0:	50                   	push   eax
c000b6d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6d3:	52                   	push   edx
c000b6d4:	51                   	push   ecx
c000b6d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	83 c4 0c             	add    esp,0xc
c000b6de:	c3                   	ret    
c000b6df:	90                   	nop

c000b6e0 <Directory::rename(char const*)>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6f3:	80 f9 19             	cmp    cl,0x19
c000b6f6:	77 32                	ja     c000b72a <Directory::rename(char const*)+0x4a>
c000b6f8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ff:	85 c9                	test   ecx,ecx
c000b701:	74 27                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b703:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b709:	85 c9                	test   ecx,ecx
c000b70b:	74 1d                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b70d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b711:	b8 06 00 00 00       	mov    eax,0x6
c000b716:	75 12                	jne    c000b72a <Directory::rename(char const*)+0x4a>
c000b718:	50                   	push   eax
c000b719:	83 c2 0d             	add    edx,0xd
c000b71c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b71e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b722:	52                   	push   edx
c000b723:	51                   	push   ecx
c000b724:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b727:	83 c4 10             	add    esp,0x10
c000b72a:	83 c4 0c             	add    esp,0xc
c000b72d:	c3                   	ret    

c000b72e <Directory::exists()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	31 c0                	xor    eax,eax
c000b733:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b737:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b73e:	80 f9 19             	cmp    cl,0x19
c000b741:	77 24                	ja     c000b767 <Directory::exists()+0x39>
c000b743:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b74a:	85 c9                	test   ecx,ecx
c000b74c:	74 19                	je     c000b767 <Directory::exists()+0x39>
c000b74e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b754:	85 c9                	test   ecx,ecx
c000b756:	74 0f                	je     c000b767 <Directory::exists()+0x39>
c000b758:	50                   	push   eax
c000b759:	83 c2 0d             	add    edx,0xd
c000b75c:	50                   	push   eax
c000b75d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b75f:	52                   	push   edx
c000b760:	51                   	push   ecx
c000b761:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	83 c4 0c             	add    esp,0xc
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Directory::read(dirent*)>:
c000b76c:	83 ec 1c             	sub    esp,0x1c
c000b76f:	b8 0b 00 00 00       	mov    eax,0xb
c000b774:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b778:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b77f:	80 fa 19             	cmp    dl,0x19
c000b782:	77 30                	ja     c000b7b4 <Directory::read(dirent*)+0x48>
c000b784:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b78b:	85 d2                	test   edx,edx
c000b78d:	74 25                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b78f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b796:	74 1c                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b79d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b7a1:	52                   	push   edx
c000b7a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7a6:	6a 00                	push   0x0
c000b7a8:	68 10 01 00 00       	push   0x110
c000b7ad:	51                   	push   ecx
c000b7ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b7b1:	83 c4 20             	add    esp,0x20
c000b7b4:	83 c4 1c             	add    esp,0x1c
c000b7b7:	c3                   	ret    

c000b7b8 <Directory::create()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b7c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7cb:	80 f9 19             	cmp    cl,0x19
c000b7ce:	77 2f                	ja     c000b7ff <Directory::create()+0x47>
c000b7d0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7d7:	85 c9                	test   ecx,ecx
c000b7d9:	74 24                	je     c000b7ff <Directory::create()+0x47>
c000b7db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b7e1:	85 c9                	test   ecx,ecx
c000b7e3:	74 1a                	je     c000b7ff <Directory::create()+0x47>
c000b7e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7e9:	b8 06 00 00 00       	mov    eax,0x6
c000b7ee:	75 0f                	jne    c000b7ff <Directory::create()+0x47>
c000b7f0:	50                   	push   eax
c000b7f1:	83 c2 0d             	add    edx,0xd
c000b7f4:	50                   	push   eax
c000b7f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7f7:	52                   	push   edx
c000b7f8:	51                   	push   ecx
c000b7f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b7fc:	83 c4 10             	add    esp,0x10
c000b7ff:	83 c4 0c             	add    esp,0xc
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b804:	b8 0a 00 00 00       	mov    eax,0xa
c000b809:	c3                   	ret    
c000b80a:	66 90                	xchg   ax,ax

c000b80c <Bus::Bus(char const*)>:
c000b80c:	83 ec 1c             	sub    esp,0x1c
c000b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b813:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b817:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b81b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b81e:	e8 17 08 00 00       	call   c000c03a <Device::Device(char const*)>
c000b823:	ba e8 ff 01 c0       	mov    edx,0xc001ffe8
c000b828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b82c:	89 10                	mov    DWORD PTR [eax],edx
c000b82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b832:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b83c:	90                   	nop
c000b83d:	83 c4 1c             	add    esp,0x1c
c000b840:	c3                   	ret    
c000b841:	90                   	nop
c000b842:	66 90                	xchg   ax,ax

c000b844 <Bus::~Bus()>:
c000b844:	83 ec 1c             	sub    esp,0x1c
c000b847:	ba e8 ff 01 c0       	mov    edx,0xc001ffe8
c000b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b850:	89 10                	mov    DWORD PTR [eax],edx
c000b852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b856:	89 04 24             	mov    DWORD PTR [esp],eax
c000b859:	e8 48 05 00 00       	call   c000bda6 <Device::~Device()>
c000b85e:	90                   	nop
c000b85f:	83 c4 1c             	add    esp,0x1c
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Bus::~Bus()>:
c000b864:	83 ec 1c             	sub    esp,0x1c
c000b867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b86e:	e8 d1 ff ff ff       	call   c000b844 <Bus::~Bus()>
c000b873:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b87f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b882:	e8 d5 f0 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000b887:	83 c4 1c             	add    esp,0x1c
c000b88a:	c3                   	ret    

c000b88b <beepThread(void*)>:
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b893:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b897:	48                   	dec    eax
c000b898:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b89d:	75 01                	jne    c000b8a0 <beepThread(void*)+0x15>
c000b89f:	fb                   	sti    
c000b8a0:	6b c2 0a             	imul   eax,edx,0xa
c000b8a3:	83 ec 0c             	sub    esp,0xc
c000b8a6:	50                   	push   eax
c000b8a7:	e8 10 9b 00 00       	call   c00153bc <milliTenthSleep(unsigned int)>
c000b8ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b8b3:	e8 4c b8 00 00       	call   c0017104 <HalMakeBeep(int)>
c000b8b8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b8c0:	83 c4 1c             	add    esp,0x1c
c000b8c3:	e9 f4 99 00 00       	jmp    c00152bc <blockTask(TaskState)>

c000b8c8 <Krnl::beep(int, int, bool)>:
c000b8c8:	53                   	push   ebx
c000b8c9:	83 ec 24             	sub    esp,0x24
c000b8cc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b8d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8d4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b8d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b8dc:	e8 23 b8 00 00       	call   c0017104 <HalMakeBeep(int)>
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b8e8:	84 c0                	test   al,al
c000b8ea:	74 1d                	je     c000b909 <Krnl::beep(int, int, bool)+0x41>
c000b8ec:	6b db 0a             	imul   ebx,ebx,0xa
c000b8ef:	83 ec 0c             	sub    esp,0xc
c000b8f2:	53                   	push   ebx
c000b8f3:	e8 c4 9a 00 00       	call   c00153bc <milliTenthSleep(unsigned int)>
c000b8f8:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b900:	83 c4 28             	add    esp,0x28
c000b903:	5b                   	pop    ebx
c000b904:	e9 fb b7 00 00       	jmp    c0017104 <HalMakeBeep(int)>
c000b909:	68 e6 00 00 00       	push   0xe6
c000b90e:	53                   	push   ebx
c000b90f:	68 8b b8 00 c0       	push   0xc000b88b
c000b914:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b91a:	e8 69 95 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c000b91f:	83 c4 28             	add    esp,0x28
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <User::loadClockSettings(int)>:
c000b924:	53                   	push   ebx
c000b925:	83 ec 14             	sub    esp,0x14
c000b928:	68 14 01 00 00       	push   0x114
c000b92d:	e8 d4 c1 ff ff       	call   c0007b06 <malloc>
c000b932:	83 c4 0c             	add    esp,0xc
c000b935:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b93b:	68 0c 00 02 c0       	push   0xc002000c
c000b940:	50                   	push   eax
c000b941:	89 c3                	mov    ebx,eax
c000b943:	e8 b0 f6 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b948:	58                   	pop    eax
c000b949:	5a                   	pop    edx
c000b94a:	6a 01                	push   0x1
c000b94c:	53                   	push   ebx
c000b94d:	e8 64 f7 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000b952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b955:	e8 ba f7 ff ff       	call   c000b114 <File::close()>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	85 db                	test   ebx,ebx
c000b95f:	74 0f                	je     c000b970 <User::loadClockSettings(int)+0x4c>
c000b961:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b963:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b96a:	83 c4 08             	add    esp,0x8
c000b96d:	5b                   	pop    ebx
c000b96e:	ff e0                	jmp    eax
c000b970:	83 c4 08             	add    esp,0x8
c000b973:	5b                   	pop    ebx
c000b974:	c3                   	ret    
c000b975:	90                   	nop

c000b976 <Clock::Clock(char const*)>:
c000b976:	83 ec 1c             	sub    esp,0x1c
c000b979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b97d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b981:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b985:	89 04 24             	mov    DWORD PTR [esp],eax
c000b988:	e8 ad 06 00 00       	call   c000c03a <Device::Device(char const*)>
c000b98d:	ba 34 00 02 c0       	mov    edx,0xc0020034
c000b992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b996:	89 10                	mov    DWORD PTR [eax],edx
c000b998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b99c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b9a6:	90                   	nop
c000b9a7:	83 c4 1c             	add    esp,0x1c
c000b9aa:	c3                   	ret    
c000b9ab:	90                   	nop

c000b9ac <Clock::~Clock()>:
c000b9ac:	83 ec 1c             	sub    esp,0x1c
c000b9af:	ba 34 00 02 c0       	mov    edx,0xc0020034
c000b9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9b8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9be:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9c1:	e8 e0 03 00 00       	call   c000bda6 <Device::~Device()>
c000b9c6:	90                   	nop
c000b9c7:	83 c4 1c             	add    esp,0x1c
c000b9ca:	c3                   	ret    
c000b9cb:	90                   	nop

c000b9cc <Clock::~Clock()>:
c000b9cc:	83 ec 1c             	sub    esp,0x1c
c000b9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9d6:	e8 d1 ff ff ff       	call   c000b9ac <Clock::~Clock()>
c000b9db:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ea:	e8 6d ef ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000b9ef:	83 c4 1c             	add    esp,0x1c
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <Clock::timeInSecondsLocal()>:
c000b9f4:	53                   	push   ebx
c000b9f5:	83 ec 14             	sub    esp,0x14
c000b9f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9fe:	50                   	push   eax
c000b9ff:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ba02:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000ba09:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000ba0f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ba15:	89 cb                	mov    ebx,ecx
c000ba17:	c1 fb 1f             	sar    ebx,0x1f
c000ba1a:	01 c8                	add    eax,ecx
c000ba1c:	11 da                	adc    edx,ebx
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	31 c9                	xor    ecx,ecx
c000ba23:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba2a:	74 05                	je     c000ba31 <Clock::timeInSecondsLocal()+0x3d>
c000ba2c:	b9 08 07 00 00       	mov    ecx,0x708
c000ba31:	31 db                	xor    ebx,ebx
c000ba33:	01 c8                	add    eax,ecx
c000ba35:	11 da                	adc    edx,ebx
c000ba37:	83 c4 08             	add    esp,0x8
c000ba3a:	5b                   	pop    ebx
c000ba3b:	c3                   	ret    

c000ba3c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba47:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ba4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba4d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ba50:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000ba57:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000ba5d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba63:	99                   	cdq    
c000ba64:	29 c6                	sub    esi,eax
c000ba66:	19 d7                	sbb    edi,edx
c000ba68:	89 f0                	mov    eax,esi
c000ba6a:	31 f6                	xor    esi,esi
c000ba6c:	89 fa                	mov    edx,edi
c000ba6e:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba75:	74 05                	je     c000ba7c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ba77:	be 08 07 00 00       	mov    esi,0x708
c000ba7c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ba80:	31 ff                	xor    edi,edi
c000ba82:	29 f0                	sub    eax,esi
c000ba84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba88:	19 fa                	sbb    edx,edi
c000ba8a:	89 d8                	mov    eax,ebx
c000ba8c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba90:	5b                   	pop    ebx
c000ba91:	5e                   	pop    esi
c000ba92:	5f                   	pop    edi
c000ba93:	ff e0                	jmp    eax

c000ba95 <datetimeToSeconds(datetime_t)>:
c000ba95:	55                   	push   ebp
c000ba96:	57                   	push   edi
c000ba97:	56                   	push   esi
c000ba98:	53                   	push   ebx
c000ba99:	83 ec 0c             	sub    esp,0xc
c000ba9c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000baa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000baa4:	0f b6 c6             	movzx  eax,dh
c000baa7:	0f b6 c0             	movzx  eax,al
c000baaa:	0f b6 dd             	movzx  ebx,ch
c000baad:	6b f8 3c             	imul   edi,eax,0x3c
c000bab0:	89 d0                	mov    eax,edx
c000bab2:	0f b6 d2             	movzx  edx,dl
c000bab5:	fe cb                	dec    bl
c000bab7:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000babd:	89 ce                	mov    esi,ecx
c000babf:	c1 e8 10             	shr    eax,0x10
c000bac2:	0f b6 c9             	movzx  ecx,cl
c000bac5:	c1 ee 10             	shr    esi,0x10
c000bac8:	0f b6 c0             	movzx  eax,al
c000bacb:	01 f8                	add    eax,edi
c000bacd:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bad3:	01 c2                	add    edx,eax
c000bad5:	0f b6 c3             	movzx  eax,bl
c000bad8:	89 14 24             	mov    DWORD PTR [esp],edx
c000badb:	8b 04 85 80 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff80]
c000bae2:	c1 fa 1f             	sar    edx,0x1f
c000bae5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bae9:	80 fb 01             	cmp    bl,0x1
c000baec:	0f b7 f6             	movzx  esi,si
c000baef:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000baf3:	76 2a                	jbe    c000bb1f <datetimeToSeconds(datetime_t)+0x8a>
c000baf5:	f7 c6 03 00 00 00    	test   esi,0x3
c000bafb:	75 22                	jne    c000bb1f <datetimeToSeconds(datetime_t)+0x8a>
c000bafd:	31 d2                	xor    edx,edx
c000baff:	bb 64 00 00 00       	mov    ebx,0x64
c000bb04:	89 f0                	mov    eax,esi
c000bb06:	f7 f3                	div    ebx
c000bb08:	85 d2                	test   edx,edx
c000bb0a:	75 12                	jne    c000bb1e <datetimeToSeconds(datetime_t)+0x89>
c000bb0c:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bb12:	bb 90 01 00 00       	mov    ebx,0x190
c000bb17:	99                   	cdq    
c000bb18:	f7 fb                	idiv   ebx
c000bb1a:	85 d2                	test   edx,edx
c000bb1c:	75 01                	jne    c000bb1f <datetimeToSeconds(datetime_t)+0x8a>
c000bb1e:	41                   	inc    ecx
c000bb1f:	83 fe 46             	cmp    esi,0x46
c000bb22:	76 45                	jbe    c000bb69 <datetimeToSeconds(datetime_t)+0xd4>
c000bb24:	bb 46 00 00 00       	mov    ebx,0x46
c000bb29:	bd 64 00 00 00       	mov    ebp,0x64
c000bb2e:	bf 90 01 00 00       	mov    edi,0x190
c000bb33:	f6 c3 03             	test   bl,0x3
c000bb36:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb3b:	75 23                	jne    c000bb60 <datetimeToSeconds(datetime_t)+0xcb>
c000bb3d:	89 d8                	mov    eax,ebx
c000bb3f:	99                   	cdq    
c000bb40:	f7 fd                	idiv   ebp
c000bb42:	b8 6e 01 00 00       	mov    eax,0x16e
c000bb47:	85 d2                	test   edx,edx
c000bb49:	75 15                	jne    c000bb60 <datetimeToSeconds(datetime_t)+0xcb>
c000bb4b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bb51:	99                   	cdq    
c000bb52:	f7 ff                	idiv   edi
c000bb54:	83 fa 01             	cmp    edx,0x1
c000bb57:	19 c0                	sbb    eax,eax
c000bb59:	f7 d0                	not    eax
c000bb5b:	05 6e 01 00 00       	add    eax,0x16e
c000bb60:	43                   	inc    ebx
c000bb61:	01 c1                	add    ecx,eax
c000bb63:	39 f3                	cmp    ebx,esi
c000bb65:	7c cc                	jl     c000bb33 <datetimeToSeconds(datetime_t)+0x9e>
c000bb67:	eb 34                	jmp    c000bb9d <datetimeToSeconds(datetime_t)+0x108>
c000bb69:	74 32                	je     c000bb9d <datetimeToSeconds(datetime_t)+0x108>
c000bb6b:	b8 45 00 00 00       	mov    eax,0x45
c000bb70:	89 c2                	mov    edx,eax
c000bb72:	83 e2 03             	and    edx,0x3
c000bb75:	39 f0                	cmp    eax,esi
c000bb77:	7e 0f                	jle    c000bb88 <datetimeToSeconds(datetime_t)+0xf3>
c000bb79:	83 fa 01             	cmp    edx,0x1
c000bb7c:	19 d2                	sbb    edx,edx
c000bb7e:	48                   	dec    eax
c000bb7f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bb86:	eb e8                	jmp    c000bb70 <datetimeToSeconds(datetime_t)+0xdb>
c000bb88:	85 d2                	test   edx,edx
c000bb8a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb8f:	75 0a                	jne    c000bb9b <datetimeToSeconds(datetime_t)+0x106>
c000bb91:	83 fe 01             	cmp    esi,0x1
c000bb94:	19 c0                	sbb    eax,eax
c000bb96:	05 6e 01 00 00       	add    eax,0x16e
c000bb9b:	29 c1                	sub    ecx,eax
c000bb9d:	b8 80 51 01 00       	mov    eax,0x15180
c000bba2:	f7 e9                	imul   ecx
c000bba4:	03 04 24             	add    eax,DWORD PTR [esp]
c000bba7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bbab:	83 c4 0c             	add    esp,0xc
c000bbae:	5b                   	pop    ebx
c000bbaf:	5e                   	pop    esi
c000bbb0:	5f                   	pop    edi
c000bbb1:	5d                   	pop    ebp
c000bbb2:	c3                   	ret    
c000bbb3:	90                   	nop

c000bbb4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bbb4:	57                   	push   edi
c000bbb5:	56                   	push   esi
c000bbb6:	53                   	push   ebx
c000bbb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbbb:	8b 06                	mov    eax,DWORD PTR [esi]
c000bbbd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bbc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc8:	e8 c8 fe ff ff       	call   c000ba95 <datetimeToSeconds(datetime_t)>
c000bbcd:	59                   	pop    ecx
c000bbce:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bbd5:	5b                   	pop    ebx
c000bbd6:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bbdc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbe2:	89 cb                	mov    ebx,ecx
c000bbe4:	c1 fb 1f             	sar    ebx,0x1f
c000bbe7:	29 c8                	sub    eax,ecx
c000bbe9:	19 da                	sbb    edx,ebx
c000bbeb:	31 c9                	xor    ecx,ecx
c000bbed:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bbf4:	74 05                	je     c000bbfb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bbf6:	b9 08 07 00 00       	mov    ecx,0x708
c000bbfb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bbff:	31 db                	xor    ebx,ebx
c000bc01:	29 c8                	sub    eax,ecx
c000bc03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc07:	19 da                	sbb    edx,ebx
c000bc09:	89 f8                	mov    eax,edi
c000bc0b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc0f:	5b                   	pop    ebx
c000bc10:	5e                   	pop    esi
c000bc11:	5f                   	pop    edi
c000bc12:	ff e0                	jmp    eax

c000bc14 <secondsToDatetime(unsigned long long)>:
c000bc14:	55                   	push   ebp
c000bc15:	57                   	push   edi
c000bc16:	56                   	push   esi
c000bc17:	53                   	push   ebx
c000bc18:	83 ec 1c             	sub    esp,0x1c
c000bc1b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bc1f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bc23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc27:	6a 00                	push   0x0
c000bc29:	68 80 51 01 00       	push   0x15180
c000bc2e:	55                   	push   ebp
c000bc2f:	57                   	push   edi
c000bc30:	e8 6b 27 01 00       	call   c001e3a0 <__udivdi3>
c000bc35:	83 c4 10             	add    esp,0x10
c000bc38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc3c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bc42:	6a 00                	push   0x0
c000bc44:	68 80 51 01 00       	push   0x15180
c000bc49:	55                   	push   ebp
c000bc4a:	57                   	push   edi
c000bc4b:	bf 10 0e 00 00       	mov    edi,0xe10
c000bc50:	e8 4b 28 01 00       	call   c001e4a0 <__umoddi3>
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	99                   	cdq    
c000bc59:	f7 ff                	idiv   edi
c000bc5b:	bf 3c 00 00 00       	mov    edi,0x3c
c000bc60:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bc63:	89 d0                	mov    eax,edx
c000bc65:	99                   	cdq    
c000bc66:	f7 ff                	idiv   edi
c000bc68:	85 db                	test   ebx,ebx
c000bc6a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bc6d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bc70:	79 11                	jns    c000bc83 <secondsToDatetime(unsigned long long)+0x6f>
c000bc72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bc76:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bc7c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc81:	eb 07                	jmp    c000bc8a <secondsToDatetime(unsigned long long)+0x76>
c000bc83:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bc88:	89 d8                	mov    eax,ebx
c000bc8a:	99                   	cdq    
c000bc8b:	bf b4 05 00 00       	mov    edi,0x5b4
c000bc90:	f7 f9                	idiv   ecx
c000bc92:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bc97:	31 d2                	xor    edx,edx
c000bc99:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bc9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bca2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bcaa:	01 c3                	add    ebx,eax
c000bcac:	89 d8                	mov    eax,ebx
c000bcae:	f7 f1                	div    ecx
c000bcb0:	31 d2                	xor    edx,edx
c000bcb2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bcb5:	89 d8                	mov    eax,ebx
c000bcb7:	f7 f7                	div    edi
c000bcb9:	31 d2                	xor    edx,edx
c000bcbb:	29 c1                	sub    ecx,eax
c000bcbd:	89 d8                	mov    eax,ebx
c000bcbf:	f7 f5                	div    ebp
c000bcc1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bcc6:	31 d2                	xor    edx,edx
c000bcc8:	29 c1                	sub    ecx,eax
c000bcca:	89 c8                	mov    eax,ecx
c000bccc:	f7 f5                	div    ebp
c000bcce:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bcd3:	31 d2                	xor    edx,edx
c000bcd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcd9:	89 c8                	mov    eax,ecx
c000bcdb:	f7 f5                	div    ebp
c000bcdd:	31 d2                	xor    edx,edx
c000bcdf:	01 c3                	add    ebx,eax
c000bce1:	89 c8                	mov    eax,ecx
c000bce3:	f7 f7                	div    edi
c000bce5:	bf 99 00 00 00       	mov    edi,0x99
c000bcea:	31 d2                	xor    edx,edx
c000bcec:	29 c3                	sub    ebx,eax
c000bcee:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bcf6:	29 c3                	sub    ebx,eax
c000bcf8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bcfb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bcfe:	83 c1 02             	add    ecx,0x2
c000bd01:	89 c8                	mov    eax,ecx
c000bd03:	bb 05 00 00 00       	mov    ebx,0x5
c000bd08:	f7 f7                	div    edi
c000bd0a:	31 d2                	xor    edx,edx
c000bd0c:	89 c7                	mov    edi,eax
c000bd0e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bd14:	83 c0 02             	add    eax,0x2
c000bd17:	f7 f3                	div    ebx
c000bd19:	89 eb                	mov    ebx,ebp
c000bd1b:	29 c3                	sub    ebx,eax
c000bd1d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bd23:	88 1e                	mov    BYTE PTR [esi],bl
c000bd25:	19 c0                	sbb    eax,eax
c000bd27:	31 d2                	xor    edx,edx
c000bd29:	83 e0 0c             	and    eax,0xc
c000bd2c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bd30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd34:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bd3c:	01 c7                	add    edi,eax
c000bd3e:	83 f9 01             	cmp    ecx,0x1
c000bd41:	0f 96 c2             	setbe  dl
c000bd44:	fe c1                	inc    cl
c000bd46:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bd49:	8d 04 17             	lea    eax,[edi+edx*1]
c000bd4c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bd50:	83 c4 1c             	add    esp,0x1c
c000bd53:	89 f0                	mov    eax,esi
c000bd55:	5b                   	pop    ebx
c000bd56:	5e                   	pop    esi
c000bd57:	5f                   	pop    edi
c000bd58:	5d                   	pop    ebp
c000bd59:	c2 04 00             	ret    0x4

c000bd5c <Clock::timeInDatetimeLocal()>:
c000bd5c:	53                   	push   ebx
c000bd5d:	83 ec 14             	sub    esp,0x14
c000bd60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd64:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bd68:	e8 87 fc ff ff       	call   c000b9f4 <Clock::timeInSecondsLocal()>
c000bd6d:	83 c4 0c             	add    esp,0xc
c000bd70:	52                   	push   edx
c000bd71:	50                   	push   eax
c000bd72:	53                   	push   ebx
c000bd73:	e8 9c fe ff ff       	call   c000bc14 <secondsToDatetime(unsigned long long)>
c000bd78:	89 d8                	mov    eax,ebx
c000bd7a:	83 c4 14             	add    esp,0x14
c000bd7d:	5b                   	pop    ebx
c000bd7e:	c2 04 00             	ret    0x4
c000bd81:	90                   	nop

c000bd82 <Device::hibernate()>:
c000bd82:	c3                   	ret    
c000bd83:	90                   	nop

c000bd84 <Device::wake()>:
c000bd84:	c3                   	ret    
c000bd85:	90                   	nop

c000bd86 <Device::detect()>:
c000bd86:	c3                   	ret    
c000bd87:	90                   	nop

c000bd88 <Device::disableLegacy()>:
c000bd88:	c3                   	ret    
c000bd89:	90                   	nop

c000bd8a <Device::powerSaving(PowerSavingLevel)>:
c000bd8a:	c3                   	ret    
c000bd8b:	90                   	nop

c000bd8c <DriverlessDevice::close(int, int, void*)>:
c000bd8c:	31 c0                	xor    eax,eax
c000bd8e:	c3                   	ret    
c000bd8f:	90                   	nop

c000bd90 <DriverlessDevice::detect()>:
c000bd90:	c3                   	ret    
c000bd91:	90                   	nop

c000bd92 <DriverlessDevice::open(int, int, void*)>:
c000bd92:	83 ec 18             	sub    esp,0x18
c000bd95:	68 b0 00 02 c0       	push   0xc00200b0
c000bd9a:	e8 26 4a 00 00       	call   c00107c5 <KePanic(char const*)>
c000bd9f:	83 c8 ff             	or     eax,0xffffffff
c000bda2:	83 c4 1c             	add    esp,0x1c
c000bda5:	c3                   	ret    

c000bda6 <Device::~Device()>:
c000bda6:	ba 10 01 02 c0       	mov    edx,0xc0020110
c000bdab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bdaf:	89 10                	mov    DWORD PTR [eax],edx
c000bdb1:	90                   	nop
c000bdb2:	c3                   	ret    
c000bdb3:	90                   	nop

c000bdb4 <Device::~Device()>:
c000bdb4:	83 ec 1c             	sub    esp,0x1c
c000bdb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdbe:	e8 e3 ff ff ff       	call   c000bda6 <Device::~Device()>
c000bdc3:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000bdcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdd2:	e8 85 eb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000bdd7:	83 c4 1c             	add    esp,0x1c
c000bdda:	c3                   	ret    
c000bddb:	90                   	nop

c000bddc <Device::findAndLoadDriver()>:
c000bddc:	c7 44 24 04 ce 00 02 c0 	mov    DWORD PTR [esp+0x4],0xc00200ce
c000bde4:	e9 8d ec ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c000bde9:	90                   	nop

c000bdea <Device::preOpenPCI(PCIDeviceInfo)>:
c000bdea:	57                   	push   edi
c000bdeb:	b9 09 00 00 00       	mov    ecx,0x9
c000bdf0:	56                   	push   esi
c000bdf1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bdf5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bdf9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000be03:	81 c7 18 01 00 00    	add    edi,0x118
c000be09:	fc                   	cld    
c000be0a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000be0c:	5e                   	pop    esi
c000be0d:	5f                   	pop    edi
c000be0e:	c3                   	ret    
c000be0f:	90                   	nop

c000be10 <Device::preOpenACPI(void*, char*, char*)>:
c000be10:	57                   	push   edi
c000be11:	b9 1e 00 00 00       	mov    ecx,0x1e
c000be16:	56                   	push   esi
c000be17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be23:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000be2d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000be33:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000be39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be3b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000be41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be45:	b9 0e 00 00 00       	mov    ecx,0xe
c000be4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be4c:	5e                   	pop    esi
c000be4d:	5f                   	pop    edi
c000be4e:	c3                   	ret    
c000be4f:	90                   	nop

c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be50:	53                   	push   ebx
c000be51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be59:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be5e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be6e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000be72:	5b                   	pop    ebx
c000be73:	e9 8c 05 00 00       	jmp    c000c404 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000be78 <Device::getParent()>:
c000be78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be7c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000be82:	c3                   	ret    
c000be83:	90                   	nop

c000be84 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000be84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be8c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000be91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be95:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be99:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be9d:	e9 d6 06 00 00       	jmp    c000c578 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bea2 <Device::addChild(Device*)>:
c000bea2:	53                   	push   ebx
c000bea3:	83 ec 08             	sub    esp,0x8
c000bea6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000beae:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000beb4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000beba:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bebc:	85 d2                	test   edx,edx
c000bebe:	74 04                	je     c000bec4 <Device::addChild(Device*)+0x22>
c000bec0:	89 d3                	mov    ebx,edx
c000bec2:	eb f6                	jmp    c000beba <Device::addChild(Device*)+0x18>
c000bec4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bec7:	83 ec 0c             	sub    esp,0xc
c000beca:	6a 08                	push   0x8
c000becc:	e8 35 bc ff ff       	call   c0007b06 <malloc>
c000bed1:	89 03                	mov    DWORD PTR [ebx],eax
c000bed3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bed9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bee0:	83 c4 18             	add    esp,0x18
c000bee3:	5b                   	pop    ebx
c000bee4:	c3                   	ret    
c000bee5:	90                   	nop

c000bee6 <Device::removeAllChildren()>:
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	52                   	push   edx
c000bee9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000beed:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bef3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bef6:	74 17                	je     c000bf0f <Device::removeAllChildren()+0x29>
c000bef8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000befb:	85 c0                	test   eax,eax
c000befd:	74 0c                	je     c000bf0b <Device::removeAllChildren()+0x25>
c000beff:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf01:	83 ec 0c             	sub    esp,0xc
c000bf04:	50                   	push   eax
c000bf05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf0d:	eb e4                	jmp    c000bef3 <Device::removeAllChildren()+0xd>
c000bf0f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf1b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf28:	58                   	pop    eax
c000bf29:	5b                   	pop    ebx
c000bf2a:	5e                   	pop    esi
c000bf2b:	c3                   	ret    

c000bf2c <Device::hibernateAll()>:
c000bf2c:	53                   	push   ebx
c000bf2d:	83 ec 14             	sub    esp,0x14
c000bf30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf34:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf36:	53                   	push   ebx
c000bf37:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bf3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf40:	83 c4 10             	add    esp,0x10
c000bf43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf46:	74 0f                	je     c000bf57 <Device::hibernateAll()+0x2b>
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf4e:	e8 d9 ff ff ff       	call   c000bf2c <Device::hibernateAll()>
c000bf53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf55:	eb e9                	jmp    c000bf40 <Device::hibernateAll()+0x14>
c000bf57:	83 c4 08             	add    esp,0x8
c000bf5a:	5b                   	pop    ebx
c000bf5b:	c3                   	ret    

c000bf5c <Device::wakeAll()>:
c000bf5c:	53                   	push   ebx
c000bf5d:	83 ec 14             	sub    esp,0x14
c000bf60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf64:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf66:	53                   	push   ebx
c000bf67:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bf6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf70:	83 c4 10             	add    esp,0x10
c000bf73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf76:	74 0f                	je     c000bf87 <Device::wakeAll()+0x2b>
c000bf78:	83 ec 0c             	sub    esp,0xc
c000bf7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf7e:	e8 d9 ff ff ff       	call   c000bf5c <Device::wakeAll()>
c000bf83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf85:	eb e9                	jmp    c000bf70 <Device::wakeAll()+0x14>
c000bf87:	83 c4 08             	add    esp,0x8
c000bf8a:	5b                   	pop    ebx
c000bf8b:	c3                   	ret    

c000bf8c <Device::detectAll()>:
c000bf8c:	53                   	push   ebx
c000bf8d:	83 ec 14             	sub    esp,0x14
c000bf90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf96:	53                   	push   ebx
c000bf97:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bf9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfa6:	74 0f                	je     c000bfb7 <Device::detectAll()+0x2b>
c000bfa8:	83 ec 0c             	sub    esp,0xc
c000bfab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfae:	e8 d9 ff ff ff       	call   c000bf8c <Device::detectAll()>
c000bfb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfb5:	eb e9                	jmp    c000bfa0 <Device::detectAll()+0x14>
c000bfb7:	83 c4 08             	add    esp,0x8
c000bfba:	5b                   	pop    ebx
c000bfbb:	c3                   	ret    

c000bfbc <Device::disableLegacyAll()>:
c000bfbc:	c3                   	ret    
c000bfbd:	90                   	nop

c000bfbe <Device::loadDriversForAll()>:
c000bfbe:	c3                   	ret    
c000bfbf:	90                   	nop

c000bfc0 <Device::closeAll()>:
c000bfc0:	53                   	push   ebx
c000bfc1:	83 ec 08             	sub    esp,0x8
c000bfc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bfc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfca:	6a 00                	push   0x0
c000bfcc:	6a 00                	push   0x0
c000bfce:	6a 00                	push   0x0
c000bfd0:	53                   	push   ebx
c000bfd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bfd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfda:	83 c4 10             	add    esp,0x10
c000bfdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfe0:	74 0f                	je     c000bff1 <Device::closeAll()+0x31>
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe8:	e8 d3 ff ff ff       	call   c000bfc0 <Device::closeAll()>
c000bfed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfef:	eb e9                	jmp    c000bfda <Device::closeAll()+0x1a>
c000bff1:	83 c4 08             	add    esp,0x8
c000bff4:	5b                   	pop    ebx
c000bff5:	c3                   	ret    

c000bff6 <Device::powerSavingAll(PowerSavingLevel)>:
c000bff6:	56                   	push   esi
c000bff7:	53                   	push   ebx
c000bff8:	83 ec 0c             	sub    esp,0xc
c000bffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bfff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c003:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c005:	56                   	push   esi
c000c006:	53                   	push   ebx
c000c007:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c00a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c010:	83 c4 10             	add    esp,0x10
c000c013:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c016:	74 0f                	je     c000c027 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c018:	52                   	push   edx
c000c019:	52                   	push   edx
c000c01a:	56                   	push   esi
c000c01b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01e:	e8 d3 ff ff ff       	call   c000bff6 <Device::powerSavingAll(PowerSavingLevel)>
c000c023:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c025:	eb e9                	jmp    c000c010 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c027:	58                   	pop    eax
c000c028:	5b                   	pop    ebx
c000c029:	5e                   	pop    esi
c000c02a:	c3                   	ret    
c000c02b:	90                   	nop

c000c02c <Device::setName(char const*)>:
c000c02c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c034:	e9 e7 46 ff ff       	jmp    c0000720 <strcpy>
c000c039:	90                   	nop

c000c03a <Device::Device(char const*)>:
c000c03a:	83 ec 2c             	sub    esp,0x2c
c000c03d:	ba 10 01 02 c0       	mov    edx,0xc0020110
c000c042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c046:	89 10                	mov    DWORD PTR [eax],edx
c000c048:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c04c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c05a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c068:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c076:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c080:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c084:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c08f:	e8 98 ff ff ff       	call   c000c02c <Device::setName(char const*)>
c000c094:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000c09c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0a3:	e8 5e ba ff ff       	call   c0007b06 <malloc>
c000c0a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c0b9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c0bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0c3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c0c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c0d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0e4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ef:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c0f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0fa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c108:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c116:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c124:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c12e:	90                   	nop
c000c12f:	83 c4 2c             	add    esp,0x2c
c000c132:	c3                   	ret    
c000c133:	90                   	nop

c000c134 <Device::getName()>:
c000c134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c138:	05 d0 00 00 00       	add    eax,0xd0
c000c13d:	c3                   	ret    

c000c13e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c13e:	83 ec 1c             	sub    esp,0x1c
c000c141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c145:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c149:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c14d:	89 04 24             	mov    DWORD PTR [esp],eax
c000c150:	e8 e5 fe ff ff       	call   c000c03a <Device::Device(char const*)>
c000c155:	ba 3c 01 02 c0       	mov    edx,0xc002013c
c000c15a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c15e:	89 10                	mov    DWORD PTR [eax],edx
c000c160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c164:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c16e:	90                   	nop
c000c16f:	83 c4 1c             	add    esp,0x1c
c000c172:	c3                   	ret    
c000c173:	90                   	nop

c000c174 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c174:	57                   	push   edi
c000c175:	56                   	push   esi
c000c176:	53                   	push   ebx
c000c177:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c17b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c17f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c183:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c189:	75 0c                	jne    c000c197 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c18b:	52                   	push   edx
c000c18c:	52                   	push   edx
c000c18d:	53                   	push   ebx
c000c18e:	56                   	push   esi
c000c18f:	e8 a2 26 01 00       	call   c001e836 <LinkedList<Device>::addElement(Device*)>
c000c194:	83 c4 10             	add    esp,0x10
c000c197:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c19d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1a0:	74 12                	je     c000c1b4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c1a2:	50                   	push   eax
c000c1a3:	57                   	push   edi
c000c1a4:	56                   	push   esi
c000c1a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1a8:	e8 c7 ff ff ff       	call   c000c174 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c1ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1af:	83 c4 10             	add    esp,0x10
c000c1b2:	eb e9                	jmp    c000c19d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c1b4:	5b                   	pop    ebx
c000c1b5:	5e                   	pop    esi
c000c1b6:	5f                   	pop    edi
c000c1b7:	c3                   	ret    

c000c1b8 <getDevicesOfType(DeviceType)>:
c000c1b8:	53                   	push   ebx
c000c1b9:	83 ec 14             	sub    esp,0x14
c000c1bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1c0:	53                   	push   ebx
c000c1c1:	e8 40 27 01 00       	call   c001e906 <LinkedList<Device>::LinkedList()>
c000c1c6:	83 c4 0c             	add    esp,0xc
c000c1c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1cd:	53                   	push   ebx
c000c1ce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c1d4:	e8 9b ff ff ff       	call   c000c174 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c1d9:	83 c4 18             	add    esp,0x18
c000c1dc:	89 d8                	mov    eax,ebx
c000c1de:	5b                   	pop    ebx
c000c1df:	c2 04 00             	ret    0x4
c000c1e2:	66 90                	xchg   ax,ax

c000c1e4 <HardDiskController::HardDiskController(char const*)>:
c000c1e4:	83 ec 1c             	sub    esp,0x1c
c000c1e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c1ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1f6:	e8 3f fe ff ff       	call   c000c03a <Device::Device(char const*)>
c000c1fb:	ba 68 01 02 c0       	mov    edx,0xc0020168
c000c200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c204:	89 10                	mov    DWORD PTR [eax],edx
c000c206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c20a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c214:	90                   	nop
c000c215:	83 c4 1c             	add    esp,0x1c
c000c218:	c3                   	ret    
c000c219:	90                   	nop
c000c21a:	66 90                	xchg   ax,ax

c000c21c <HardDiskController::~HardDiskController()>:
c000c21c:	83 ec 1c             	sub    esp,0x1c
c000c21f:	ba 68 01 02 c0       	mov    edx,0xc0020168
c000c224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c228:	89 10                	mov    DWORD PTR [eax],edx
c000c22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c231:	e8 70 fb ff ff       	call   c000bda6 <Device::~Device()>
c000c236:	90                   	nop
c000c237:	83 c4 1c             	add    esp,0x1c
c000c23a:	c3                   	ret    
c000c23b:	90                   	nop

c000c23c <HardDiskController::~HardDiskController()>:
c000c23c:	83 ec 1c             	sub    esp,0x1c
c000c23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c243:	89 04 24             	mov    DWORD PTR [esp],eax
c000c246:	e8 d1 ff ff ff       	call   c000c21c <HardDiskController::~HardDiskController()>
c000c24b:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c257:	89 04 24             	mov    DWORD PTR [esp],eax
c000c25a:	e8 fd e6 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c25f:	83 c4 1c             	add    esp,0x1c
c000c262:	c3                   	ret    
c000c263:	90                   	nop

c000c264 <PhysicalDisk::eject()>:
c000c264:	83 c8 ff             	or     eax,0xffffffff
c000c267:	c3                   	ret    

c000c268 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c268:	83 ec 1c             	sub    esp,0x1c
c000c26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c273:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c277:	89 04 24             	mov    DWORD PTR [esp],eax
c000c27a:	e8 bb fd ff ff       	call   c000c03a <Device::Device(char const*)>
c000c27f:	ba 94 01 02 c0       	mov    edx,0xc0020194
c000c284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c288:	89 10                	mov    DWORD PTR [eax],edx
c000c28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c28e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c299:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c2b6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c2ca:	90                   	nop
c000c2cb:	83 c4 1c             	add    esp,0x1c
c000c2ce:	c3                   	ret    
c000c2cf:	90                   	nop

c000c2d0 <PhysicalDisk::startCache()>:
c000c2d0:	56                   	push   esi
c000c2d1:	53                   	push   ebx
c000c2d2:	83 ec 10             	sub    esp,0x10
c000c2d5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c2d9:	6a 44                	push   0x44
c000c2db:	e8 26 b8 ff ff       	call   c0007b06 <malloc>
c000c2e0:	89 c6                	mov    esi,eax
c000c2e2:	58                   	pop    eax
c000c2e3:	5a                   	pop    edx
c000c2e4:	53                   	push   ebx
c000c2e5:	56                   	push   esi
c000c2e6:	e8 81 16 00 00       	call   c000d96c <VCache::VCache(PhysicalDisk*)>
c000c2eb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c2f1:	83 c4 14             	add    esp,0x14
c000c2f4:	5b                   	pop    ebx
c000c2f5:	5e                   	pop    esi
c000c2f6:	c3                   	ret    
c000c2f7:	90                   	nop

c000c2f8 <PhysicalDisk::~PhysicalDisk()>:
c000c2f8:	83 ec 1c             	sub    esp,0x1c
c000c2fb:	ba 94 01 02 c0       	mov    edx,0xc0020194
c000c300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c304:	89 10                	mov    DWORD PTR [eax],edx
c000c306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c30a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c30d:	e8 94 fa ff ff       	call   c000bda6 <Device::~Device()>
c000c312:	90                   	nop
c000c313:	83 c4 1c             	add    esp,0x1c
c000c316:	c3                   	ret    
c000c317:	90                   	nop

c000c318 <PhysicalDisk::~PhysicalDisk()>:
c000c318:	83 ec 1c             	sub    esp,0x1c
c000c31b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c31f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c322:	e8 d1 ff ff ff       	call   c000c2f8 <PhysicalDisk::~PhysicalDisk()>
c000c327:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c333:	89 04 24             	mov    DWORD PTR [esp],eax
c000c336:	e8 21 e6 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c33b:	83 c4 1c             	add    esp,0x1c
c000c33e:	c3                   	ret    
c000c33f:	90                   	nop

c000c340 <int_handler>:
c000c340:	55                   	push   ebp
c000c341:	57                   	push   edi
c000c342:	56                   	push   esi
c000c343:	53                   	push   ebx
c000c344:	83 ec 1c             	sub    esp,0x1c
c000c347:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c34e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c352:	74 0b                	je     c000c35f <int_handler+0x1f>
c000c354:	fa                   	cli    
c000c355:	f4                   	hlt    
c000c356:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c35d:	75 f5                	jne    c000c354 <int_handler+0x14>
c000c35f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c362:	8d 46 e0             	lea    eax,[esi-0x20]
c000c365:	83 f8 17             	cmp    eax,0x17
c000c368:	76 3d                	jbe    c000c3a7 <int_handler+0x67>
c000c36a:	c1 e6 04             	shl    esi,0x4
c000c36d:	31 db                	xor    ebx,ebx
c000c36f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c375:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c37b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c37f:	85 c0                	test   eax,eax
c000c381:	74 12                	je     c000c395 <int_handler+0x55>
c000c383:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c386:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c38a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c38d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c391:	74 1e                	je     c000c3b1 <int_handler+0x71>
c000c393:	ff d0                	call   eax
c000c395:	43                   	inc    ebx
c000c396:	83 fb 04             	cmp    ebx,0x4
c000c399:	75 e0                	jne    c000c37b <int_handler+0x3b>
c000c39b:	83 c4 1c             	add    esp,0x1c
c000c39e:	31 c0                	xor    eax,eax
c000c3a0:	5b                   	pop    ebx
c000c3a1:	31 d2                	xor    edx,edx
c000c3a3:	5e                   	pop    esi
c000c3a4:	5f                   	pop    edi
c000c3a5:	5d                   	pop    ebp
c000c3a6:	c3                   	ret    
c000c3a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3aa:	e8 91 ad 00 00       	call   c0017140 <HalEndOfInterrupt(int)>
c000c3af:	eb b9                	jmp    c000c36a <int_handler+0x2a>
c000c3b1:	ff d0                	call   eax
c000c3b3:	83 c4 1c             	add    esp,0x1c
c000c3b6:	5b                   	pop    ebx
c000c3b7:	5e                   	pop    esi
c000c3b8:	5f                   	pop    edi
c000c3b9:	5d                   	pop    ebp
c000c3ba:	c3                   	ret    

c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c3bb:	56                   	push   esi
c000c3bc:	31 c0                	xor    eax,eax
c000c3be:	53                   	push   ebx
c000c3bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c3c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c3c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c3cb:	89 ca                	mov    edx,ecx
c000c3cd:	c1 e2 04             	shl    edx,0x4
c000c3d0:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c3d8:	74 16                	je     c000c3f0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000c3da:	40                   	inc    eax
c000c3db:	83 f8 04             	cmp    eax,0x4
c000c3de:	75 f0                	jne    c000c3d0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c3e0:	b8 c4 01 02 c0       	mov    eax,0xc00201c4
c000c3e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3e9:	5b                   	pop    ebx
c000c3ea:	5e                   	pop    esi
c000c3eb:	e9 d5 43 00 00       	jmp    c00107c5 <KePanic(char const*)>
c000c3f0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c3f3:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c3fa:	5b                   	pop    ebx
c000c3fb:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c402:	5e                   	pop    esi
c000c403:	c3                   	ret    

c000c404 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c404:	56                   	push   esi
c000c405:	53                   	push   ebx
c000c406:	83 ec 34             	sub    esp,0x34
c000c409:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000c40e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c412:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c416:	88 c1                	mov    cl,al
c000c418:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c41d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c424:	74 50                	je     c000c476 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c426:	84 c9                	test   cl,cl
c000c428:	74 20                	je     c000c44a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c42a:	83 fb 0f             	cmp    ebx,0xf
c000c42d:	0f 8f da 00 00 00    	jg     c000c50d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c433:	0f b6 9b 00 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde400]
c000c43a:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000c442:	d1 e8                	shr    eax,1
c000c444:	24 01                	and    al,0x1
c000c446:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c44a:	c7 04 24 d1 01 02 c0 	mov    DWORD PTR [esp],0xc00201d1
c000c451:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c456:	31 f6                	xor    esi,esi
c000c458:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c45c:	e8 15 e6 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000c461:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c466:	85 c0                	test   eax,eax
c000c468:	7f 4b                	jg     c000c4b5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000c46a:	c7 04 24 e8 01 02 c0 	mov    DWORD PTR [esp],0xc00201e8
c000c471:	e8 4f 43 00 00       	call   c00107c5 <KePanic(char const*)>
c000c476:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000c479:	31 c0                	xor    eax,eax
c000c47b:	89 ca                	mov    edx,ecx
c000c47d:	c1 e2 04             	shl    edx,0x4
c000c480:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000c487:	85 f6                	test   esi,esi
c000c489:	0f 84 94 00 00 00    	je     c000c523 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000c48f:	40                   	inc    eax
c000c490:	83 f8 04             	cmp    eax,0x4
c000c493:	75 eb                	jne    c000c480 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000c495:	c7 04 24 3c 02 02 c0 	mov    DWORD PTR [esp],0xc002023c
c000c49c:	e8 24 43 00 00       	call   c00107c5 <KePanic(char const*)>
c000c4a1:	83 c4 34             	add    esp,0x34
c000c4a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c4a9:	5b                   	pop    ebx
c000c4aa:	5e                   	pop    esi
c000c4ab:	c3                   	ret    
c000c4ac:	46                   	inc    esi
c000c4ad:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000c4b3:	7e b5                	jle    c000c46a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000c4b5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c4b9:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c4c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000c4c3:	e8 8e 12 01 00       	call   c001d756 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c4c8:	84 c0                	test   al,al
c000c4ca:	74 e0                	je     c000c4ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c4cc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000c4d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4d5:	31 c0                	xor    eax,eax
c000c4d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4db:	88 d8                	mov    al,bl
c000c4dd:	04 20                	add    al,0x20
c000c4df:	0f b6 c0             	movzx  eax,al
c000c4e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4e6:	31 c0                	xor    eax,eax
c000c4e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4ec:	31 c0                	xor    eax,eax
c000c4ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4f2:	0f b6 c3             	movzx  eax,bl
c000c4f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c4f9:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c500:	89 04 24             	mov    DWORD PTR [esp],eax
c000c503:	e8 c0 13 01 00       	call   c001d8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c508:	e9 69 ff ff ff       	jmp    c000c476 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c50d:	c7 04 24 04 02 02 c0 	mov    DWORD PTR [esp],0xc0020204
c000c514:	e8 ac 42 00 00       	call   c00107c5 <KePanic(char const*)>
c000c519:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000c51e:	e9 27 ff ff ff       	jmp    c000c44a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c523:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c527:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c52a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c531:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000c535:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c53c:	83 c4 34             	add    esp,0x34
c000c53f:	89 d8                	mov    eax,ebx
c000c541:	5b                   	pop    ebx
c000c542:	5e                   	pop    esi
c000c543:	c3                   	ret    

c000c544 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c548:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c54c:	c1 e0 04             	shl    eax,0x4
c000c54f:	8d 50 10             	lea    edx,[eax+0x10]
c000c552:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c558:	74 08                	je     c000c562 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c55a:	83 c0 04             	add    eax,0x4
c000c55d:	39 d0                	cmp    eax,edx
c000c55f:	75 f1                	jne    c000c552 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c561:	c3                   	ret    
c000c562:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c56c:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c576:	eb e2                	jmp    c000c55a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c578 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c578:	56                   	push   esi
c000c579:	53                   	push   ebx
c000c57a:	83 ec 14             	sub    esp,0x14
c000c57d:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000c582:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c586:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c58a:	74 0e                	je     c000c59a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c58c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c591:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c598:	75 30                	jne    c000c5ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000c59a:	8d 43 20             	lea    eax,[ebx+0x20]
c000c59d:	c1 e0 04             	shl    eax,0x4
c000c5a0:	8d 50 10             	lea    edx,[eax+0x10]
c000c5a3:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c5a9:	74 0d                	je     c000c5b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c5ab:	83 c0 04             	add    eax,0x4
c000c5ae:	39 d0                	cmp    eax,edx
c000c5b0:	75 f1                	jne    c000c5a3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c5b2:	83 c4 14             	add    esp,0x14
c000c5b5:	5b                   	pop    ebx
c000c5b6:	5e                   	pop    esi
c000c5b7:	c3                   	ret    
c000c5b8:	31 c9                	xor    ecx,ecx
c000c5ba:	31 db                	xor    ebx,ebx
c000c5bc:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000c5c2:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000c5c8:	eb e1                	jmp    c000c5ab <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c5ca:	83 fb 0f             	cmp    ebx,0xf
c000c5cd:	7f 09                	jg     c000c5d8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000c5cf:	0f b6 9b 00 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde400]
c000c5d6:	eb c2                	jmp    c000c59a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c5d8:	c7 04 24 f5 01 02 c0 	mov    DWORD PTR [esp],0xc00201f5
c000c5df:	e8 e1 41 00 00       	call   c00107c5 <KePanic(char const*)>
c000c5e4:	eb b4                	jmp    c000c59a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c5e6 <setupINTS()>:
c000c5e6:	31 c0                	xor    eax,eax
c000c5e8:	31 d2                	xor    edx,edx
c000c5ea:	31 c9                	xor    ecx,ecx
c000c5ec:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000c5f2:	31 d2                	xor    edx,edx
c000c5f4:	83 c0 10             	add    eax,0x10
c000c5f7:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000c5fd:	31 c9                	xor    ecx,ecx
c000c5ff:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000c605:	31 d2                	xor    edx,edx
c000c607:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000c60d:	31 c9                	xor    ecx,ecx
c000c60f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000c615:	31 d2                	xor    edx,edx
c000c617:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000c61d:	31 c9                	xor    ecx,ecx
c000c61f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000c625:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000c62b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c630:	75 b6                	jne    c000c5e8 <setupINTS()+0x2>
c000c632:	c3                   	ret    

c000c633 <convertLegacyIRQNumber(int)>:
c000c633:	83 ec 1c             	sub    esp,0x1c
c000c636:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c63c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c640:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c647:	74 0c                	je     c000c655 <convertLegacyIRQNumber(int)+0x22>
c000c649:	83 f8 0f             	cmp    eax,0xf
c000c64c:	7f 0b                	jg     c000c659 <convertLegacyIRQNumber(int)+0x26>
c000c64e:	0f b6 80 00 1c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde400]
c000c655:	83 c4 1c             	add    esp,0x1c
c000c658:	c3                   	ret    
c000c659:	c7 04 24 04 02 02 c0 	mov    DWORD PTR [esp],0xc0020204
c000c660:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c664:	e8 5c 41 00 00       	call   c00107c5 <KePanic(char const*)>
c000c669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c66d:	83 c4 1c             	add    esp,0x1c
c000c670:	c3                   	ret    
c000c671:	90                   	nop

c000c672 <startGUI(void*)>:
c000c672:	55                   	push   ebp
c000c673:	89 e5                	mov    ebp,esp
c000c675:	53                   	push   ebx
c000c676:	83 ec 14             	sub    esp,0x14
c000c679:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c67e:	48                   	dec    eax
c000c67f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c684:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c689:	85 c0                	test   eax,eax
c000c68b:	75 01                	jne    c000c68e <startGUI(void*)+0x1c>
c000c68d:	fb                   	sti    
c000c68e:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c694:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c69c:	c7 04 24 61 02 02 c0 	mov    DWORD PTR [esp],0xc0020261
c000c6a3:	e8 b5 7f 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000c6a8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6af:	e8 e5 81 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000c6b4:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6ba:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c6c2:	c7 04 24 7b 02 02 c0 	mov    DWORD PTR [esp],0xc002027b
c000c6c9:	e8 8f 7f 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000c6ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6d5:	e8 bf 81 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000c6da:	90                   	nop
c000c6db:	83 c4 14             	add    esp,0x14
c000c6de:	5b                   	pop    ebx
c000c6df:	5d                   	pop    ebp
c000c6e0:	c3                   	ret    

c000c6e1 <startGUIVESA(void*)>:
c000c6e1:	55                   	push   ebp
c000c6e2:	89 e5                	mov    ebp,esp
c000c6e4:	53                   	push   ebx
c000c6e5:	83 ec 14             	sub    esp,0x14
c000c6e8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6ed:	48                   	dec    eax
c000c6ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6f3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6f8:	85 c0                	test   eax,eax
c000c6fa:	75 01                	jne    c000c6fd <startGUIVESA(void*)+0x1c>
c000c6fc:	fb                   	sti    
c000c6fd:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c703:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c70b:	c7 04 24 99 02 02 c0 	mov    DWORD PTR [esp],0xc0020299
c000c712:	e8 46 7f 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000c717:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c71b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c71e:	e8 76 81 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000c723:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c729:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c731:	c7 04 24 7b 02 02 c0 	mov    DWORD PTR [esp],0xc002027b
c000c738:	e8 20 7f 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000c73d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c741:	89 04 24             	mov    DWORD PTR [esp],eax
c000c744:	e8 50 81 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000c749:	90                   	nop
c000c74a:	83 c4 14             	add    esp,0x14
c000c74d:	5b                   	pop    ebx
c000c74e:	5d                   	pop    ebp
c000c74f:	c3                   	ret    

c000c750 <sendKeyToTerminal(unsigned char)>:
c000c750:	55                   	push   ebp
c000c751:	89 e5                	mov    ebp,esp
c000c753:	83 ec 38             	sub    esp,0x38
c000c756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c759:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c75c:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c761:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c765:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c769:	89 04 24             	mov    DWORD PTR [esp],eax
c000c76c:	e8 79 c6 ff ff       	call   c0008dea <VgaText::receiveKey(unsigned char)>
c000c771:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c775:	74 10                	je     c000c787 <sendKeyToTerminal(unsigned char)+0x37>
c000c777:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c77b:	74 0a                	je     c000c787 <sendKeyToTerminal(unsigned char)+0x37>
c000c77d:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c781:	0f 85 8c 00 00 00    	jne    c000c813 <sendKeyToTerminal(unsigned char)+0xc3>
c000c787:	fa                   	cli    
c000c788:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c78d:	40                   	inc    eax
c000c78e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c793:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c798:	40                   	inc    eax
c000c799:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c79e:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c7a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c7a6:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c7b0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c7b4:	74 1c                	je     c000c7d2 <sendKeyToTerminal(unsigned char)+0x82>
c000c7b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c7bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c7c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c7c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000c7cb:	e8 98 8d 00 00       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c000c7d0:	eb de                	jmp    c000c7b0 <sendKeyToTerminal(unsigned char)+0x60>
c000c7d2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7d7:	48                   	dec    eax
c000c7d8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c7dd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	75 18                	jne    c000c7fe <sendKeyToTerminal(unsigned char)+0xae>
c000c7e6:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c7eb:	85 c0                	test   eax,eax
c000c7ed:	74 0f                	je     c000c7fe <sendKeyToTerminal(unsigned char)+0xae>
c000c7ef:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c7f9:	e8 e2 88 00 00       	call   c00150e0 <schedule()>
c000c7fe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c803:	48                   	dec    eax
c000c804:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c809:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c80e:	85 c0                	test   eax,eax
c000c810:	75 01                	jne    c000c813 <sendKeyToTerminal(unsigned char)+0xc3>
c000c812:	fb                   	sti    
c000c813:	90                   	nop
c000c814:	c9                   	leave  
c000c815:	c3                   	ret    

c000c816 <sendKeyboardToken(KeyboardToken)>:
c000c816:	55                   	push   ebp
c000c817:	89 e5                	mov    ebp,esp
c000c819:	83 ec 28             	sub    esp,0x28
c000c81c:	e8 f4 3f 00 00       	call   c0010815 <Krnl::userIOReceived()>
c000c821:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000c825:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c829:	80 f2 01             	xor    dl,0x1
c000c82c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c832:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c837:	85 c0                	test   eax,eax
c000c839:	74 1d                	je     c000c858 <sendKeyboardToken(KeyboardToken)+0x42>
c000c83b:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c840:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000c848:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c84b:	89 14 24             	mov    DWORD PTR [esp],edx
c000c84e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c851:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000c856:	ff d0                	call   eax
c000c858:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c85c:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000c860:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c867:	38 c2                	cmp    dl,al
c000c869:	74 1b                	je     c000c886 <sendKeyboardToken(KeyboardToken)+0x70>
c000c86b:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000c86f:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c874:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c87b:	0f b6 c0             	movzx  eax,al
c000c87e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c881:	e8 96 bc ff ff       	call   c000851c <setTerminalScrollLock(bool)>
c000c886:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000c88a:	84 c0                	test   al,al
c000c88c:	0f 84 c4 00 00 00    	je     c000c956 <sendKeyboardToken(KeyboardToken)+0x140>
c000c892:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c896:	3d 18 03 00 00       	cmp    eax,0x318
c000c89b:	75 06                	jne    c000c8a3 <sendKeyboardToken(KeyboardToken)+0x8d>
c000c89d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c8a3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8a7:	3d 19 03 00 00       	cmp    eax,0x319
c000c8ac:	75 06                	jne    c000c8b4 <sendKeyboardToken(KeyboardToken)+0x9e>
c000c8ae:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c8b4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8b8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8bd:	75 06                	jne    c000c8c5 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c8bf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c8c5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8c9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8ce:	75 06                	jne    c000c8d6 <sendKeyboardToken(KeyboardToken)+0xc0>
c000c8d0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c8d6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8da:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c8df:	75 06                	jne    c000c8e7 <sendKeyboardToken(KeyboardToken)+0xd1>
c000c8e1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c8e7:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8eb:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8f0:	75 06                	jne    c000c8f8 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c8f2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8f8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8fc:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c901:	75 06                	jne    c000c909 <sendKeyboardToken(KeyboardToken)+0xf3>
c000c903:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c909:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c90d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c912:	75 06                	jne    c000c91a <sendKeyboardToken(KeyboardToken)+0x104>
c000c914:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c91a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c91e:	3d 20 03 00 00       	cmp    eax,0x320
c000c923:	75 06                	jne    c000c92b <sendKeyboardToken(KeyboardToken)+0x115>
c000c925:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c92b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c92f:	3d 21 03 00 00       	cmp    eax,0x321
c000c934:	75 06                	jne    c000c93c <sendKeyboardToken(KeyboardToken)+0x126>
c000c936:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c93c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c940:	3d 22 03 00 00       	cmp    eax,0x322
c000c945:	0f 85 dd 00 00 00    	jne    c000ca28 <sendKeyboardToken(KeyboardToken)+0x212>
c000c94b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c951:	e9 d2 00 00 00       	jmp    c000ca28 <sendKeyboardToken(KeyboardToken)+0x212>
c000c956:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c95a:	3d 18 03 00 00       	cmp    eax,0x318
c000c95f:	75 0a                	jne    c000c96b <sendKeyboardToken(KeyboardToken)+0x155>
c000c961:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c967:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c96f:	3d 19 03 00 00       	cmp    eax,0x319
c000c974:	75 0a                	jne    c000c980 <sendKeyboardToken(KeyboardToken)+0x16a>
c000c976:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c97c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c980:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c984:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c989:	75 0a                	jne    c000c995 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c98b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c991:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c995:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c999:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c99e:	75 0a                	jne    c000c9aa <sendKeyboardToken(KeyboardToken)+0x194>
c000c9a0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c9a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9aa:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9ae:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9b3:	75 0a                	jne    c000c9bf <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c9b5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9bf:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9c3:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9c8:	75 0a                	jne    c000c9d4 <sendKeyboardToken(KeyboardToken)+0x1be>
c000c9ca:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c9d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9d4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9d8:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c9dd:	75 0a                	jne    c000c9e9 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000c9df:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c9e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9e9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9ed:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c9f2:	75 0a                	jne    c000c9fe <sendKeyboardToken(KeyboardToken)+0x1e8>
c000c9f4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c9fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9fe:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca02:	3d 20 03 00 00       	cmp    eax,0x320
c000ca07:	75 0a                	jne    c000ca13 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000ca09:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca0f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca13:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca17:	3d 21 03 00 00       	cmp    eax,0x321
c000ca1c:	75 0a                	jne    c000ca28 <sendKeyboardToken(KeyboardToken)+0x212>
c000ca1e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca24:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca28:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca2c:	3d 00 02 00 00       	cmp    eax,0x200
c000ca31:	75 3b                	jne    c000ca6e <sendKeyboardToken(KeyboardToken)+0x258>
c000ca33:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000ca3a:	34 01                	xor    al,0x1
c000ca3c:	84 c0                	test   al,al
c000ca3e:	74 2e                	je     c000ca6e <sendKeyboardToken(KeyboardToken)+0x258>
c000ca40:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca45:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000ca4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ca55:	c7 44 24 04 72 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c672
c000ca5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca60:	e8 23 84 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c000ca65:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca6c:	eb 44                	jmp    c000cab2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000ca6e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca72:	3d 01 02 00 00       	cmp    eax,0x201
c000ca77:	75 39                	jne    c000cab2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000ca79:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000ca80:	34 01                	xor    al,0x1
c000ca82:	84 c0                	test   al,al
c000ca84:	74 2c                	je     c000cab2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000ca86:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca8b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000ca93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ca9b:	c7 44 24 04 e1 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c6e1
c000caa3:	89 04 24             	mov    DWORD PTR [esp],eax
c000caa6:	e8 dd 83 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c000caab:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000cab2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cab6:	3d 25 03 00 00       	cmp    eax,0x325
c000cabb:	75 06                	jne    c000cac3 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000cabd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cac3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cac7:	3d 24 03 00 00       	cmp    eax,0x324
c000cacc:	75 06                	jne    c000cad4 <sendKeyboardToken(KeyboardToken)+0x2be>
c000cace:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cad4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cad8:	3d 23 03 00 00       	cmp    eax,0x323
c000cadd:	75 06                	jne    c000cae5 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000cadf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cae5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cae9:	3d 26 03 00 00       	cmp    eax,0x326
c000caee:	75 06                	jne    c000caf6 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000caf0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000caf6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cafa:	3d 27 03 00 00       	cmp    eax,0x327
c000caff:	75 06                	jne    c000cb07 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000cb01:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb07:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb0b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb10:	75 06                	jne    c000cb18 <sendKeyboardToken(KeyboardToken)+0x302>
c000cb12:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb18:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb1c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb20:	34 01                	xor    al,0x1
c000cb22:	84 c0                	test   al,al
c000cb24:	74 73                	je     c000cb99 <sendKeyboardToken(KeyboardToken)+0x383>
c000cb26:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000cb2d:	84 c0                	test   al,al
c000cb2f:	74 3f                	je     c000cb70 <sendKeyboardToken(KeyboardToken)+0x35a>
c000cb31:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb35:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cb39:	74 29                	je     c000cb64 <sendKeyboardToken(KeyboardToken)+0x34e>
c000cb3b:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb41:	89 d0                	mov    eax,edx
c000cb43:	c1 e0 02             	shl    eax,0x2
c000cb46:	01 d0                	add    eax,edx
c000cb48:	01 c0                	add    eax,eax
c000cb4a:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb4f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb53:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb56:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb5b:	01 d0                	add    eax,edx
c000cb5d:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb62:	eb 67                	jmp    c000cbcb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb64:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb6e:	eb 5b                	jmp    c000cbcb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb70:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb75:	85 c0                	test   eax,eax
c000cb77:	74 14                	je     c000cb8d <sendKeyboardToken(KeyboardToken)+0x377>
c000cb79:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb7e:	0f b6 c0             	movzx  eax,al
c000cb81:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb84:	e8 c7 fb ff ff       	call   c000c750 <sendKeyToTerminal(unsigned char)>
c000cb89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb8d:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb97:	eb 32                	jmp    c000cbcb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb99:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb9d:	3d 01 01 00 00       	cmp    eax,0x101
c000cba2:	75 27                	jne    c000cbcb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cba4:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 14                	je     c000cbc1 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000cbad:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbb2:	0f b6 c0             	movzx  eax,al
c000cbb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb8:	e8 93 fb ff ff       	call   c000c750 <sendKeyToTerminal(unsigned char)>
c000cbbd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbc1:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbcb:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cbcf:	34 01                	xor    al,0x1
c000cbd1:	84 c0                	test   al,al
c000cbd3:	74 4a                	je     c000cc1f <sendKeyboardToken(KeyboardToken)+0x409>
c000cbd5:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cbd9:	34 01                	xor    al,0x1
c000cbdb:	84 c0                	test   al,al
c000cbdd:	74 40                	je     c000cc1f <sendKeyboardToken(KeyboardToken)+0x409>
c000cbdf:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cbe6:	34 01                	xor    al,0x1
c000cbe8:	84 c0                	test   al,al
c000cbea:	74 33                	je     c000cc1f <sendKeyboardToken(KeyboardToken)+0x409>
c000cbec:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbf0:	83 f8 1f             	cmp    eax,0x1f
c000cbf3:	76 09                	jbe    c000cbfe <sendKeyboardToken(KeyboardToken)+0x3e8>
c000cbf5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbf9:	83 f8 7e             	cmp    eax,0x7e
c000cbfc:	76 12                	jbe    c000cc10 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cbfe:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc02:	83 f8 0a             	cmp    eax,0xa
c000cc05:	74 09                	je     c000cc10 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cc07:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc0b:	83 f8 08             	cmp    eax,0x8
c000cc0e:	75 0f                	jne    c000cc1f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc10:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc14:	0f b6 c0             	movzx  eax,al
c000cc17:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc1a:	e8 31 fb ff ff       	call   c000c750 <sendKeyToTerminal(unsigned char)>
c000cc1f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc23:	34 01                	xor    al,0x1
c000cc25:	84 c0                	test   al,al
c000cc27:	74 4d                	je     c000cc76 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc29:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc2d:	34 01                	xor    al,0x1
c000cc2f:	84 c0                	test   al,al
c000cc31:	74 43                	je     c000cc76 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc33:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cc3a:	84 c0                	test   al,al
c000cc3c:	74 38                	je     c000cc76 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc3e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc42:	83 f8 3f             	cmp    eax,0x3f
c000cc45:	76 2f                	jbe    c000cc76 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc47:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc4b:	83 f8 7f             	cmp    eax,0x7f
c000cc4e:	77 26                	ja     c000cc76 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc50:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc54:	88 c2                	mov    dl,al
c000cc56:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc5a:	83 f8 5f             	cmp    eax,0x5f
c000cc5d:	76 04                	jbe    c000cc63 <sendKeyboardToken(KeyboardToken)+0x44d>
c000cc5f:	b0 20                	mov    al,0x20
c000cc61:	eb 02                	jmp    c000cc65 <sendKeyboardToken(KeyboardToken)+0x44f>
c000cc63:	b0 00                	mov    al,0x0
c000cc65:	28 c2                	sub    dl,al
c000cc67:	88 d0                	mov    al,dl
c000cc69:	2c 40                	sub    al,0x40
c000cc6b:	0f b6 c0             	movzx  eax,al
c000cc6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc71:	e8 da fa ff ff       	call   c000c750 <sendKeyToTerminal(unsigned char)>
c000cc76:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc7a:	3d 00 03 00 00       	cmp    eax,0x300
c000cc7f:	75 0f                	jne    c000cc90 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cc81:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc85:	34 01                	xor    al,0x1
c000cc87:	84 c0                	test   al,al
c000cc89:	74 05                	je     c000cc90 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cc8b:	e8 8d b8 ff ff       	call   c000851d <doTerminalCycle()>
c000cc90:	90                   	nop
c000cc91:	c9                   	leave  
c000cc92:	c3                   	ret    

c000cc93 <clearInternalKeybuffer(VgaText*)>:
c000cc93:	55                   	push   ebp
c000cc94:	89 e5                	mov    ebp,esp
c000cc96:	83 ec 18             	sub    esp,0x18
c000cc99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc9c:	05 02 01 00 00       	add    eax,0x102
c000cca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cca4:	e8 77 39 ff ff       	call   c0000620 <strlen>
c000cca9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccac:	81 c2 02 01 00 00    	add    edx,0x102
c000ccb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccb6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ccbe:	89 14 24             	mov    DWORD PTR [esp],edx
c000ccc1:	e8 ba 38 ff ff       	call   c0000580 <memset>
c000ccc6:	90                   	nop
c000ccc7:	c9                   	leave  
c000ccc8:	c3                   	ret    

c000ccc9 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccc9:	55                   	push   ebp
c000ccca:	89 e5                	mov    ebp,esp
c000cccc:	83 ec 28             	sub    esp,0x28
c000cccf:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccd4:	85 c0                	test   eax,eax
c000ccd6:	74 23                	je     c000ccfb <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000ccd8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccde:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cce3:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000cceb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000ccee:	89 14 24             	mov    DWORD PTR [esp],edx
c000ccf1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000ccf4:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000ccf9:	ff d0                	call   eax
c000ccfb:	fb                   	sti    
c000ccfc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd03:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd07:	0f 84 fa 00 00 00    	je     c000ce07 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000cd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd10:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cd17:	84 c0                	test   al,al
c000cd19:	75 28                	jne    c000cd43 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000cd1b:	fa                   	cli    
c000cd1c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd21:	40                   	inc    eax
c000cd22:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd27:	e8 b4 83 00 00       	call   c00150e0 <schedule()>
c000cd2c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd31:	48                   	dec    eax
c000cd32:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd37:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd3c:	85 c0                	test   eax,eax
c000cd3e:	75 cd                	jne    c000cd0d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd40:	fb                   	sti    
c000cd41:	eb ca                	jmp    c000cd0d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd46:	8d 50 01             	lea    edx,[eax+0x1]
c000cd49:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd4f:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000cd56:	88 10                	mov    BYTE PTR [eax],dl
c000cd58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd5b:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cd62:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd65:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cd69:	75 20                	jne    c000cd8b <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000cd6b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd70:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd75:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd7b:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000cd83:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd86:	e8 a8 3e 00 00       	call   c0010c33 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd8b:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cd8f:	75 20                	jne    c000cdb1 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000cd91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd96:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd9b:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cda1:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000cda9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdac:	e8 82 3e 00 00       	call   c0010c33 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdb4:	05 02 01 00 00       	add    eax,0x102
c000cdb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdbc:	e8 5f 38 ff ff       	call   c0000620 <strlen>
c000cdc1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdc4:	81 c2 02 01 00 00    	add    edx,0x102
c000cdca:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdcd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdd0:	81 c2 02 01 00 00    	add    edx,0x102
c000cdd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdda:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cdde:	89 14 24             	mov    DWORD PTR [esp],edx
c000cde1:	e8 ea 35 ff ff       	call   c00003d0 <memmove>
c000cde6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cde9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cdec:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cdf0:	74 10                	je     c000ce02 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cdf2:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cdf6:	74 0a                	je     c000ce02 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cdf8:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cdfc:	0f 85 01 ff ff ff    	jne    c000cd03 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000ce02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce05:	eb 03                	jmp    c000ce0a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000ce07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce0a:	c9                   	leave  
c000ce0b:	c3                   	ret    

c000ce0c <Keyboard::Keyboard(char const*)>:
c000ce0c:	83 ec 1c             	sub    esp,0x1c
c000ce0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ce17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce1e:	e8 17 f2 ff ff       	call   c000c03a <Device::Device(char const*)>
c000ce23:	ba bc 02 02 c0       	mov    edx,0xc00202bc
c000ce28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce2c:	89 10                	mov    DWORD PTR [eax],edx
c000ce2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce32:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce3c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce43:	90                   	nop
c000ce44:	83 c4 1c             	add    esp,0x1c
c000ce47:	c3                   	ret    

c000ce48 <Keyboard::~Keyboard()>:
c000ce48:	83 ec 1c             	sub    esp,0x1c
c000ce4b:	ba bc 02 02 c0       	mov    edx,0xc00202bc
c000ce50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce54:	89 10                	mov    DWORD PTR [eax],edx
c000ce56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce5d:	e8 44 ef ff ff       	call   c000bda6 <Device::~Device()>
c000ce62:	90                   	nop
c000ce63:	83 c4 1c             	add    esp,0x1c
c000ce66:	c3                   	ret    
c000ce67:	90                   	nop

c000ce68 <Keyboard::~Keyboard()>:
c000ce68:	83 ec 1c             	sub    esp,0x1c
c000ce6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce6f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce72:	e8 d1 ff ff ff       	call   c000ce48 <Keyboard::~Keyboard()>
c000ce77:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ce7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce86:	e8 d1 da ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ce8b:	83 c4 1c             	add    esp,0x1c
c000ce8e:	c3                   	ret    
c000ce8f:	90                   	nop

c000ce90 <LogicalDisk::close(int, int, void*)>:
c000ce90:	83 c8 ff             	or     eax,0xffffffff
c000ce93:	c3                   	ret    

c000ce94 <LogicalDisk::~LogicalDisk()>:
c000ce94:	83 ec 1c             	sub    esp,0x1c
c000ce97:	ba 34 03 02 c0       	mov    edx,0xc0020334
c000ce9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cea0:	89 10                	mov    DWORD PTR [eax],edx
c000cea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cea6:	89 04 24             	mov    DWORD PTR [esp],eax
c000cea9:	e8 f8 ee ff ff       	call   c000bda6 <Device::~Device()>
c000ceae:	90                   	nop
c000ceaf:	83 c4 1c             	add    esp,0x1c
c000ceb2:	c3                   	ret    
c000ceb3:	90                   	nop

c000ceb4 <LogicalDisk::~LogicalDisk()>:
c000ceb4:	83 ec 1c             	sub    esp,0x1c
c000ceb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cebb:	89 04 24             	mov    DWORD PTR [esp],eax
c000cebe:	e8 d1 ff ff ff       	call   c000ce94 <LogicalDisk::~LogicalDisk()>
c000cec3:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000cecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cecf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ced2:	e8 85 da ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ced7:	83 c4 1c             	add    esp,0x1c
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <LogicalDisk::open(int, int, void*)>:
c000cedc:	83 ec 18             	sub    esp,0x18
c000cedf:	68 e8 02 02 c0       	push   0xc00202e8
c000cee4:	e8 dc 38 00 00       	call   c00107c5 <KePanic(char const*)>
c000cee9:	83 c8 ff             	or     eax,0xffffffff
c000ceec:	83 c4 1c             	add    esp,0x1c
c000ceef:	c3                   	ret    

c000cef0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cef0:	53                   	push   ebx
c000cef1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cef9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cefd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf03:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf09:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf0f:	77 10                	ja     c000cf21 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf11:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf17:	89 d3                	mov    ebx,edx
c000cf19:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf1f:	72 05                	jb     c000cf26 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf21:	83 c8 ff             	or     eax,0xffffffff
c000cf24:	89 c2                	mov    edx,eax
c000cf26:	5b                   	pop    ebx
c000cf27:	c3                   	ret    

c000cf28 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf28:	56                   	push   esi
c000cf29:	83 c8 ff             	or     eax,0xffffffff
c000cf2c:	53                   	push   ebx
c000cf2d:	89 c2                	mov    edx,eax
c000cf2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf33:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf3b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf41:	77 27                	ja     c000cf6a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf43:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf49:	89 d8                	mov    eax,ebx
c000cf4b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf56:	89 c2                	mov    edx,eax
c000cf58:	73 10                	jae    c000cf6a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf5a:	89 c8                	mov    eax,ecx
c000cf5c:	89 da                	mov    edx,ebx
c000cf5e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf64:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf6a:	5b                   	pop    ebx
c000cf6b:	5e                   	pop    esi
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf6e:	83 ec 2c             	sub    esp,0x2c
c000cf71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cf75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cf81:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cf85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cf8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cf99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfa0:	e8 95 f0 ff ff       	call   c000c03a <Device::Device(char const*)>
c000cfa5:	ba 34 03 02 c0       	mov    edx,0xc0020334
c000cfaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfae:	89 10                	mov    DWORD PTR [eax],edx
c000cfb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfb4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfbf:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfd5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfdf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cfe3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cfeb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cff1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cff7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d009:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d00f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d013:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d017:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d01d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d021:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d02b:	90                   	nop
c000d02c:	83 c4 2c             	add    esp,0x2c
c000d02f:	c3                   	ret    

c000d030 <LogicalDisk::assignDriveLetter()>:
c000d030:	55                   	push   ebp
c000d031:	57                   	push   edi
c000d032:	56                   	push   esi
c000d033:	53                   	push   ebx
c000d034:	83 ec 14             	sub    esp,0x14
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d041:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d047:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d04b:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d051:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000d057:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000d05b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000d05f:	3c 01                	cmp    al,0x1
c000d061:	19 c0                	sbb    eax,eax
c000d063:	24 02                	and    al,0x2
c000d065:	04 41                	add    al,0x41
c000d067:	0f be e8             	movsx  ebp,al
c000d06a:	3c 43                	cmp    al,0x43
c000d06c:	75 10                	jne    c000d07e <LogicalDisk::assignDriveLetter()+0x4e>
c000d06e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d075:	75 5d                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d077:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000d07c:	75 56                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d07e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d081:	ba 01 00 00 00       	mov    edx,0x1
c000d086:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000d08a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000d08e:	d3 e2                	shl    edx,cl
c000d090:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d094:	89 d7                	mov    edi,edx
c000d096:	89 d6                	mov    esi,edx
c000d098:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000d09c:	c1 ff 1f             	sar    edi,0x1f
c000d09f:	21 f9                	and    ecx,edi
c000d0a1:	09 d1                	or     ecx,edx
c000d0a3:	75 2f                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0ad:	09 f2                	or     edx,esi
c000d0af:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0b9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0bf:	09 fa                	or     edx,edi
c000d0c1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d0c5:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0cb:	89 1c bd 20 74 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8be0],ebx
c000d0d2:	eb 09                	jmp    c000d0dd <LogicalDisk::assignDriveLetter()+0xad>
c000d0d4:	fe c0                	inc    al
c000d0d6:	45                   	inc    ebp
c000d0d7:	3c 5b                	cmp    al,0x5b
c000d0d9:	75 8f                	jne    c000d06a <LogicalDisk::assignDriveLetter()+0x3a>
c000d0db:	31 c0                	xor    eax,eax
c000d0dd:	83 c4 14             	add    esp,0x14
c000d0e0:	5b                   	pop    ebx
c000d0e1:	5e                   	pop    esi
c000d0e2:	5f                   	pop    edi
c000d0e3:	5d                   	pop    ebp
c000d0e4:	c3                   	ret    
c000d0e5:	90                   	nop

c000d0e6 <LogicalDisk::mount()>:
c000d0e6:	56                   	push   esi
c000d0e7:	53                   	push   ebx
c000d0e8:	53                   	push   ebx
c000d0e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0ed:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0fd:	85 db                	test   ebx,ebx
c000d0ff:	74 27                	je     c000d128 <LogicalDisk::mount()+0x42>
c000d101:	51                   	push   ecx
c000d102:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d109:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d10b:	83 e8 41             	sub    eax,0x41
c000d10e:	50                   	push   eax
c000d10f:	56                   	push   esi
c000d110:	53                   	push   ebx
c000d111:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	84 c0                	test   al,al
c000d119:	74 08                	je     c000d123 <LogicalDisk::mount()+0x3d>
c000d11b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d121:	eb 07                	jmp    c000d12a <LogicalDisk::mount()+0x44>
c000d123:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d126:	eb d5                	jmp    c000d0fd <LogicalDisk::mount()+0x17>
c000d128:	31 c0                	xor    eax,eax
c000d12a:	5a                   	pop    edx
c000d12b:	5b                   	pop    ebx
c000d12c:	5e                   	pop    esi
c000d12d:	c3                   	ret    

c000d12e <LogicalDisk::unmount()>:
c000d12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d132:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d13c:	c3                   	ret    
c000d13d:	90                   	nop

c000d13e <LogicalDisk::eject()>:
c000d13e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d142:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d148:	8b 10                	mov    edx,DWORD PTR [eax]
c000d14a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d14e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d151:	90                   	nop

c000d152 <LogicalDisk::unassignDriveLetter()>:
c000d152:	57                   	push   edi
c000d153:	56                   	push   esi
c000d154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d158:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d15f:	84 c9                	test   cl,cl
c000d161:	75 0f                	jne    c000d172 <LogicalDisk::unassignDriveLetter()+0x20>
c000d163:	c7 44 24 0c 0c 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc002030c
c000d16b:	5e                   	pop    esi
c000d16c:	5f                   	pop    edi
c000d16d:	e9 53 36 00 00       	jmp    c00107c5 <KePanic(char const*)>
c000d172:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d179:	83 e9 41             	sub    ecx,0x41
c000d17c:	b8 01 00 00 00       	mov    eax,0x1
c000d181:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d18c:	d3 e0                	shl    eax,cl
c000d18e:	89 c7                	mov    edi,eax
c000d190:	f7 d0                	not    eax
c000d192:	c1 ff 1f             	sar    edi,0x1f
c000d195:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d19b:	89 fe                	mov    esi,edi
c000d19d:	f7 d6                	not    esi
c000d19f:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1a5:	5e                   	pop    esi
c000d1a6:	5f                   	pop    edi
c000d1a7:	c3                   	ret    

c000d1a8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1a8:	57                   	push   edi
c000d1a9:	56                   	push   esi
c000d1aa:	53                   	push   ebx
c000d1ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1c1:	77 41                	ja     c000d204 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1c3:	99                   	cdq    
c000d1c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1ca:	01 c8                	add    eax,ecx
c000d1cc:	11 da                	adc    edx,ebx
c000d1ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1d4:	19 d7                	sbb    edi,edx
c000d1d6:	72 33                	jb     c000d20b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1fc:	5b                   	pop    ebx
c000d1fd:	5e                   	pop    esi
c000d1fe:	5f                   	pop    edi
c000d1ff:	e9 92 0a 00 00       	jmp    c000dc96 <VCache::read(unsigned long long, int, void*)>
c000d204:	b8 05 00 00 00       	mov    eax,0x5
c000d209:	eb 05                	jmp    c000d210 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d20b:	b8 07 00 00 00       	mov    eax,0x7
c000d210:	5b                   	pop    ebx
c000d211:	5e                   	pop    esi
c000d212:	5f                   	pop    edi
c000d213:	c3                   	ret    

c000d214 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d214:	57                   	push   edi
c000d215:	56                   	push   esi
c000d216:	53                   	push   ebx
c000d217:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d21b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d21f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d227:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d22d:	77 41                	ja     c000d270 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d22f:	99                   	cdq    
c000d230:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d236:	01 c8                	add    eax,ecx
c000d238:	11 da                	adc    edx,ebx
c000d23a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d240:	19 d7                	sbb    edi,edx
c000d242:	72 33                	jb     c000d277 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d244:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d24a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d250:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d254:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d258:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d25e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d268:	5b                   	pop    ebx
c000d269:	5e                   	pop    esi
c000d26a:	5f                   	pop    edi
c000d26b:	e9 2c 09 00 00       	jmp    c000db9c <VCache::write(unsigned long long, int, void*)>
c000d270:	b8 05 00 00 00       	mov    eax,0x5
c000d275:	eb 05                	jmp    c000d27c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d277:	b8 07 00 00 00       	mov    eax,0x7
c000d27c:	5b                   	pop    ebx
c000d27d:	5e                   	pop    esi
c000d27e:	5f                   	pop    edi
c000d27f:	c3                   	ret    

c000d280 <Mouse::Mouse(char const*)>:
c000d280:	83 ec 1c             	sub    esp,0x1c
c000d283:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d287:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d28b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d28f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d292:	e8 a3 ed ff ff       	call   c000c03a <Device::Device(char const*)>
c000d297:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000d29c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2a0:	89 10                	mov    DWORD PTR [eax],edx
c000d2a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2a6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2b0:	90                   	nop
c000d2b1:	83 c4 1c             	add    esp,0x1c
c000d2b4:	c3                   	ret    
c000d2b5:	90                   	nop
c000d2b6:	66 90                	xchg   ax,ax

c000d2b8 <Mouse::~Mouse()>:
c000d2b8:	83 ec 1c             	sub    esp,0x1c
c000d2bb:	ba 60 03 02 c0       	mov    edx,0xc0020360
c000d2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2c4:	89 10                	mov    DWORD PTR [eax],edx
c000d2c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2cd:	e8 d4 ea ff ff       	call   c000bda6 <Device::~Device()>
c000d2d2:	90                   	nop
c000d2d3:	83 c4 1c             	add    esp,0x1c
c000d2d6:	c3                   	ret    
c000d2d7:	90                   	nop

c000d2d8 <Mouse::~Mouse()>:
c000d2d8:	83 ec 1c             	sub    esp,0x1c
c000d2db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2df:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2e2:	e8 d1 ff ff ff       	call   c000d2b8 <Mouse::~Mouse()>
c000d2e7:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d2ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2f6:	e8 61 d6 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d2fb:	83 c4 1c             	add    esp,0x1c
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <NIC::getMAC()>:
c000d300:	31 c0                	xor    eax,eax
c000d302:	31 d2                	xor    edx,edx
c000d304:	c3                   	ret    
c000d305:	90                   	nop

c000d306 <NIC::write(int, unsigned char*, int*)>:
c000d306:	b8 01 00 00 00       	mov    eax,0x1
c000d30b:	c3                   	ret    

c000d30c <NIC::NIC(char const*)>:
c000d30c:	83 ec 1c             	sub    esp,0x1c
c000d30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d313:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d317:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d31b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d31e:	e8 17 ed ff ff       	call   c000c03a <Device::Device(char const*)>
c000d323:	ba 8c 03 02 c0       	mov    edx,0xc002038c
c000d328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d32c:	89 10                	mov    DWORD PTR [eax],edx
c000d32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d332:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d33c:	90                   	nop
c000d33d:	83 c4 1c             	add    esp,0x1c
c000d340:	c3                   	ret    
c000d341:	90                   	nop

c000d342 <NIC::~NIC()>:
c000d342:	83 ec 1c             	sub    esp,0x1c
c000d345:	ba 8c 03 02 c0       	mov    edx,0xc002038c
c000d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34e:	89 10                	mov    DWORD PTR [eax],edx
c000d350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d354:	89 04 24             	mov    DWORD PTR [esp],eax
c000d357:	e8 4a ea ff ff       	call   c000bda6 <Device::~Device()>
c000d35c:	90                   	nop
c000d35d:	83 c4 1c             	add    esp,0x1c
c000d360:	c3                   	ret    
c000d361:	90                   	nop

c000d362 <NIC::~NIC()>:
c000d362:	83 ec 1c             	sub    esp,0x1c
c000d365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d369:	89 04 24             	mov    DWORD PTR [esp],eax
c000d36c:	e8 d1 ff ff ff       	call   c000d342 <NIC::~NIC()>
c000d371:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d37d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d380:	e8 d7 d5 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d385:	83 c4 1c             	add    esp,0x1c
c000d388:	c3                   	ret    

c000d389 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d389:	55                   	push   ebp
c000d38a:	57                   	push   edi
c000d38b:	56                   	push   esi
c000d38c:	53                   	push   ebx
c000d38d:	81 ec 28 01 00 00    	sub    esp,0x128
c000d393:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d39a:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d3a1:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d3a8:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d3af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3be:	e8 71 ed ff ff       	call   c000c134 <Device::getName()>
c000d3c3:	5a                   	pop    edx
c000d3c4:	59                   	pop    ecx
c000d3c5:	50                   	push   eax
c000d3c6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3ca:	55                   	push   ebp
c000d3cb:	e8 50 33 ff ff       	call   c0000720 <strcpy>
c000d3d0:	5b                   	pop    ebx
c000d3d1:	58                   	pop    eax
c000d3d2:	68 b8 03 02 c0       	push   0xc00203b8
c000d3d7:	55                   	push   ebp
c000d3d8:	e8 53 35 ff ff       	call   c0000930 <strcat>
c000d3dd:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3e4:	e8 1d a7 ff ff       	call   c0007b06 <malloc>
c000d3e9:	83 c4 0c             	add    esp,0xc
c000d3ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3f4:	89 c3                	mov    ebx,eax
c000d3f6:	57                   	push   edi
c000d3f7:	56                   	push   esi
c000d3f8:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3ff:	55                   	push   ebp
c000d400:	50                   	push   eax
c000d401:	e8 68 fb ff ff       	call   c000cf6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d406:	83 c4 14             	add    esp,0x14
c000d409:	53                   	push   ebx
c000d40a:	e8 21 fc ff ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c000d40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d412:	e8 cf fc ff ff       	call   c000d0e6 <LogicalDisk::mount()>
c000d417:	58                   	pop    eax
c000d418:	5a                   	pop    edx
c000d419:	53                   	push   ebx
c000d41a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d421:	e8 7c ea ff ff       	call   c000bea2 <Device::addChild(Device*)>
c000d426:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d42c:	5b                   	pop    ebx
c000d42d:	5e                   	pop    esi
c000d42e:	5f                   	pop    edi
c000d42f:	5d                   	pop    ebp
c000d430:	c3                   	ret    

c000d431 <createPartitionsForDisk(PhysicalDisk*)>:
c000d431:	55                   	push   ebp
c000d432:	57                   	push   edi
c000d433:	56                   	push   esi
c000d434:	53                   	push   ebx
c000d435:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d43b:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d442:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d448:	3d 00 02 00 00       	cmp    eax,0x200
c000d44d:	74 27                	je     c000d476 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d44f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d455:	83 ec 10             	sub    esp,0x10
c000d458:	99                   	cdq    
c000d459:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d45f:	52                   	push   edx
c000d460:	50                   	push   eax
c000d461:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d465:	c1 e6 0a             	shl    esi,0xa
c000d468:	89 fd                	mov    ebp,edi
c000d46a:	55                   	push   ebp
c000d46b:	56                   	push   esi
c000d46c:	e8 2f 0f 01 00       	call   c001e3a0 <__udivdi3>
c000d471:	e9 ae 00 00 00       	jmp    c000d524 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d476:	83 ec 0c             	sub    esp,0xc
c000d479:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d47b:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d47f:	56                   	push   esi
c000d480:	6a 01                	push   0x1
c000d482:	6a 00                	push   0x0
c000d484:	6a 00                	push   0x0
c000d486:	53                   	push   ebx
c000d487:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d48a:	83 c4 20             	add    esp,0x20
c000d48d:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d495:	75 0a                	jne    c000d4a1 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d497:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d49f:	74 2c                	je     c000d4cd <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4a1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4a7:	83 ec 10             	sub    esp,0x10
c000d4aa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4b0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4b6:	89 f7                	mov    edi,esi
c000d4b8:	c1 ff 1f             	sar    edi,0x1f
c000d4bb:	57                   	push   edi
c000d4bc:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4c0:	56                   	push   esi
c000d4c1:	c1 e0 0a             	shl    eax,0xa
c000d4c4:	52                   	push   edx
c000d4c5:	50                   	push   eax
c000d4c6:	e8 d5 0e 01 00       	call   c001e3a0 <__udivdi3>
c000d4cb:	eb 57                	jmp    c000d524 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d4cd:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4d4:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d4db:	80 e1 7f             	and    cl,0x7f
c000d4de:	24 7f                	and    al,0x7f
c000d4e0:	00 c1                	add    cl,al
c000d4e2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4e9:	24 7f                	and    al,0x7f
c000d4eb:	00 c1                	add    cl,al
c000d4ed:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4f4:	24 7f                	and    al,0x7f
c000d4f6:	00 c1                	add    cl,al
c000d4f8:	74 41                	je     c000d53b <createPartitionsForDisk(PhysicalDisk*)+0x10a>
c000d4fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d500:	83 ec 10             	sub    esp,0x10
c000d503:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d509:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d50f:	89 f7                	mov    edi,esi
c000d511:	c1 ff 1f             	sar    edi,0x1f
c000d514:	57                   	push   edi
c000d515:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d519:	56                   	push   esi
c000d51a:	c1 e0 0a             	shl    eax,0xa
c000d51d:	52                   	push   edx
c000d51e:	50                   	push   eax
c000d51f:	e8 7c 0e 01 00       	call   c001e3a0 <__udivdi3>
c000d524:	83 c4 14             	add    esp,0x14
c000d527:	52                   	push   edx
c000d528:	50                   	push   eax
c000d529:	6a 00                	push   0x0
c000d52b:	6a 00                	push   0x0
c000d52d:	53                   	push   ebx
c000d52e:	e8 56 fe ff ff       	call   c000d389 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d533:	83 c4 20             	add    esp,0x20
c000d536:	e9 79 01 00 00       	jmp    c000d6b4 <createPartitionsForDisk(PhysicalDisk*)+0x283>
c000d53b:	89 f0                	mov    eax,esi
c000d53d:	31 d2                	xor    edx,edx
c000d53f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d546:	75 02                	jne    c000d54a <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d548:	88 d1                	mov    cl,dl
c000d54a:	c7 44 d4 14 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x14],0x0
c000d552:	0f b6 b0 c7 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c7]
c000d559:	83 c0 10             	add    eax,0x10
c000d55c:	c7 44 d4 34 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x34],0x0
c000d564:	0f b6 b8 b8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b8]
c000d56b:	c1 e6 08             	shl    esi,0x8
c000d56e:	c1 e7 10             	shl    edi,0x10
c000d571:	09 fe                	or     esi,edi
c000d573:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c000d57a:	09 fe                	or     esi,edi
c000d57c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d583:	c1 e7 18             	shl    edi,0x18
c000d586:	09 fe                	or     esi,edi
c000d588:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d58f:	89 74 d4 10          	mov    DWORD PTR [esp+edx*8+0x10],esi
c000d593:	0f b6 b0 bb 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bb]
c000d59a:	c1 e7 10             	shl    edi,0x10
c000d59d:	c1 e6 08             	shl    esi,0x8
c000d5a0:	09 fe                	or     esi,edi
c000d5a2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d5a9:	09 fe                	or     esi,edi
c000d5ab:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d5b2:	c1 e7 18             	shl    edi,0x18
c000d5b5:	09 fe                	or     esi,edi
c000d5b7:	89 74 d4 30          	mov    DWORD PTR [esp+edx*8+0x30],esi
c000d5bb:	42                   	inc    edx
c000d5bc:	83 fa 04             	cmp    edx,0x4
c000d5bf:	0f 85 7a ff ff ff    	jne    c000d53f <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c9:	83 f0 01             	xor    eax,0x1
c000d5cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5d0:	75 57                	jne    c000d629 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d5d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5d6:	83 f0 01             	xor    eax,0x1
c000d5d9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5dd:	75 4a                	jne    c000d629 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d5df:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5e5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5f7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d605:	89 f7                	mov    edi,esi
c000d607:	c1 ff 1f             	sar    edi,0x1f
c000d60a:	57                   	push   edi
c000d60b:	56                   	push   esi
c000d60c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d610:	52                   	push   edx
c000d611:	c1 e0 0a             	shl    eax,0xa
c000d614:	50                   	push   eax
c000d615:	e8 86 0d 01 00       	call   c001e3a0 <__udivdi3>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d621:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d625:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d629:	84 c9                	test   cl,cl
c000d62b:	74 53                	je     c000d680 <createPartitionsForDisk(PhysicalDisk*)+0x24f>
c000d62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d631:	0f b6 c9             	movzx  ecx,cl
c000d634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d638:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d63c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d644:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d648:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d64c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d65c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d660:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d664:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d668:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d66c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d670:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d674:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d678:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d67c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d680:	31 ed                	xor    ebp,ebp
c000d682:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d686:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d68a:	89 f8                	mov    eax,edi
c000d68c:	09 f0                	or     eax,esi
c000d68e:	74 1e                	je     c000d6ae <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d690:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d694:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d698:	89 d1                	mov    ecx,edx
c000d69a:	09 c1                	or     ecx,eax
c000d69c:	74 10                	je     c000d6ae <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d69e:	83 ec 0c             	sub    esp,0xc
c000d6a1:	57                   	push   edi
c000d6a2:	56                   	push   esi
c000d6a3:	52                   	push   edx
c000d6a4:	50                   	push   eax
c000d6a5:	53                   	push   ebx
c000d6a6:	e8 de fc ff ff       	call   c000d389 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6ab:	83 c4 20             	add    esp,0x20
c000d6ae:	45                   	inc    ebp
c000d6af:	83 fd 04             	cmp    ebp,0x4
c000d6b2:	75 ce                	jne    c000d682 <createPartitionsForDisk(PhysicalDisk*)+0x251>
c000d6b4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6ba:	5b                   	pop    ebx
c000d6bb:	5e                   	pop    esi
c000d6bc:	5f                   	pop    edi
c000d6bd:	5d                   	pop    ebp
c000d6be:	c3                   	ret    
c000d6bf:	90                   	nop

c000d6c0 <Serial::Serial(char const*)>:
c000d6c0:	83 ec 1c             	sub    esp,0x1c
c000d6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d6cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d6cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6d2:	e8 63 e9 ff ff       	call   c000c03a <Device::Device(char const*)>
c000d6d7:	ba cc 03 02 c0       	mov    edx,0xc00203cc
c000d6dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e0:	89 10                	mov    DWORD PTR [eax],edx
c000d6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6f0:	90                   	nop
c000d6f1:	83 c4 1c             	add    esp,0x1c
c000d6f4:	c3                   	ret    
c000d6f5:	90                   	nop
c000d6f6:	66 90                	xchg   ax,ax

c000d6f8 <Serial::~Serial()>:
c000d6f8:	83 ec 1c             	sub    esp,0x1c
c000d6fb:	ba cc 03 02 c0       	mov    edx,0xc00203cc
c000d700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d704:	89 10                	mov    DWORD PTR [eax],edx
c000d706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d70a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d70d:	e8 94 e6 ff ff       	call   c000bda6 <Device::~Device()>
c000d712:	90                   	nop
c000d713:	83 c4 1c             	add    esp,0x1c
c000d716:	c3                   	ret    
c000d717:	90                   	nop

c000d718 <Serial::~Serial()>:
c000d718:	83 ec 1c             	sub    esp,0x1c
c000d71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d71f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d722:	e8 d1 ff ff ff       	call   c000d6f8 <Serial::~Serial()>
c000d727:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d733:	89 04 24             	mov    DWORD PTR [esp],eax
c000d736:	e8 21 d2 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d73b:	83 c4 1c             	add    esp,0x1c
c000d73e:	c3                   	ret    
c000d73f:	90                   	nop

c000d740 <Timer::Timer(char const*)>:
c000d740:	83 ec 1c             	sub    esp,0x1c
c000d743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d747:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d74b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d74f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d752:	e8 e3 e8 ff ff       	call   c000c03a <Device::Device(char const*)>
c000d757:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000d75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d760:	89 10                	mov    DWORD PTR [eax],edx
c000d762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d766:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d770:	90                   	nop
c000d771:	83 c4 1c             	add    esp,0x1c
c000d774:	c3                   	ret    
c000d775:	90                   	nop
c000d776:	66 90                	xchg   ax,ax

c000d778 <Timer::~Timer()>:
c000d778:	83 ec 1c             	sub    esp,0x1c
c000d77b:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000d780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d784:	89 10                	mov    DWORD PTR [eax],edx
c000d786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d78d:	e8 14 e6 ff ff       	call   c000bda6 <Device::~Device()>
c000d792:	90                   	nop
c000d793:	83 c4 1c             	add    esp,0x1c
c000d796:	c3                   	ret    
c000d797:	90                   	nop

c000d798 <Timer::~Timer()>:
c000d798:	83 ec 1c             	sub    esp,0x1c
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7a2:	e8 d1 ff ff ff       	call   c000d778 <Timer::~Timer()>
c000d7a7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7b6:	e8 a1 d1 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d7bb:	83 c4 1c             	add    esp,0x1c
c000d7be:	c3                   	ret    
c000d7bf:	90                   	nop

c000d7c0 <Timer::read()>:
c000d7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7ca:	c3                   	ret    

c000d7cb <setupTimer(int)>:
c000d7cb:	53                   	push   ebx
c000d7cc:	83 ec 14             	sub    esp,0x14
c000d7cf:	68 5c 01 00 00       	push   0x15c
c000d7d4:	e8 2d a3 ff ff       	call   c0007b06 <malloc>
c000d7d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7dc:	89 c3                	mov    ebx,eax
c000d7de:	e8 29 04 01 00       	call   c001dc0c <PIT::PIT()>
c000d7e3:	58                   	pop    eax
c000d7e4:	5a                   	pop    edx
c000d7e5:	53                   	push   ebx
c000d7e6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d7ec:	e8 b1 e6 ff ff       	call   c000bea2 <Device::addChild(Device*)>
c000d7f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7f3:	6a 00                	push   0x0
c000d7f5:	6a 00                	push   0x0
c000d7f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7fb:	53                   	push   ebx
c000d7fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7ff:	83 c4 28             	add    esp,0x28
c000d802:	89 d8                	mov    eax,ebx
c000d804:	5b                   	pop    ebx
c000d805:	c3                   	ret    

c000d806 <timerHandler(unsigned int)>:
c000d806:	56                   	push   esi
c000d807:	53                   	push   ebx
c000d808:	51                   	push   ecx
c000d809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80d:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d813:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d81a:	0f 84 48 01 00 00    	je     c000d968 <timerHandler(unsigned int)+0x162>
c000d820:	fa                   	cli    
c000d821:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d827:	83 ec 0c             	sub    esp,0xc
c000d82a:	68 78 81 02 c0       	push   0xc0028178
c000d82f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d835:	e8 0e 11 01 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d83a:	83 c4 10             	add    esp,0x10
c000d83d:	84 c0                	test   al,al
c000d83f:	0f 85 9f 00 00 00    	jne    c000d8e4 <timerHandler(unsigned int)+0xde>
c000d845:	83 ec 0c             	sub    esp,0xc
c000d848:	68 78 81 02 c0       	push   0xc0028178
c000d84d:	e8 12 11 01 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d852:	83 c4 10             	add    esp,0x10
c000d855:	89 c6                	mov    esi,eax
c000d857:	90                   	nop
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	68 78 81 02 c0       	push   0xc0028178
c000d860:	e8 ff 10 01 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d865:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d86c:	89 c3                	mov    ebx,eax
c000d86e:	e8 f9 10 01 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d873:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d876:	83 c4 10             	add    esp,0x10
c000d879:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d87f:	77 23                	ja     c000d8a4 <timerHandler(unsigned int)+0x9e>
c000d881:	83 ec 0c             	sub    esp,0xc
c000d884:	53                   	push   ebx
c000d885:	e8 de 7c 00 00       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c000d88a:	83 c4 10             	add    esp,0x10
c000d88d:	39 de                	cmp    esi,ebx
c000d88f:	75 27                	jne    c000d8b8 <timerHandler(unsigned int)+0xb2>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	68 78 81 02 c0       	push   0xc0028178
c000d899:	e8 c6 10 01 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d89e:	89 c6                	mov    esi,eax
c000d8a0:	eb 12                	jmp    c000d8b4 <timerHandler(unsigned int)+0xae>
c000d8a2:	66 90                	xchg   ax,ax
c000d8a4:	52                   	push   edx
c000d8a5:	52                   	push   edx
c000d8a6:	53                   	push   ebx
c000d8a7:	68 78 81 02 c0       	push   0xc0028178
c000d8ac:	e8 67 11 01 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	90                   	nop
c000d8b8:	83 ec 0c             	sub    esp,0xc
c000d8bb:	68 78 81 02 c0       	push   0xc0028178
c000d8c0:	e8 83 10 01 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8c5:	83 c4 10             	add    esp,0x10
c000d8c8:	84 c0                	test   al,al
c000d8ca:	75 18                	jne    c000d8e4 <timerHandler(unsigned int)+0xde>
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	68 78 81 02 c0       	push   0xc0028178
c000d8d4:	e8 8b 10 01 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d9:	83 c4 10             	add    esp,0x10
c000d8dc:	39 f0                	cmp    eax,esi
c000d8de:	0f 85 74 ff ff ff    	jne    c000d858 <timerHandler(unsigned int)+0x52>
c000d8e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8e9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8ed:	74 41                	je     c000d930 <timerHandler(unsigned int)+0x12a>
c000d8ef:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d8f6:	74 38                	je     c000d930 <timerHandler(unsigned int)+0x12a>
c000d8f8:	fa                   	cli    
c000d8f9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8ff:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d904:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d90a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d90d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d913:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d916:	72 08                	jb     c000d920 <timerHandler(unsigned int)+0x11a>
c000d918:	e8 c3 77 00 00       	call   c00150e0 <schedule()>
c000d91d:	8d 76 00             	lea    esi,[esi+0x0]
c000d920:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d925:	48                   	dec    eax
c000d926:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d92b:	75 03                	jne    c000d930 <timerHandler(unsigned int)+0x12a>
c000d92d:	fb                   	sti    
c000d92e:	66 90                	xchg   ax,ax
c000d930:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d935:	48                   	dec    eax
c000d936:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d93b:	75 1b                	jne    c000d958 <timerHandler(unsigned int)+0x152>
c000d93d:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d944:	74 12                	je     c000d958 <timerHandler(unsigned int)+0x152>
c000d946:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d950:	e8 8b 77 00 00       	call   c00150e0 <schedule()>
c000d955:	8d 76 00             	lea    esi,[esi+0x0]
c000d958:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d95d:	48                   	dec    eax
c000d95e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d963:	75 03                	jne    c000d968 <timerHandler(unsigned int)+0x162>
c000d965:	fb                   	sti    
c000d966:	66 90                	xchg   ax,ax
c000d968:	58                   	pop    eax
c000d969:	5b                   	pop    ebx
c000d96a:	5e                   	pop    esi
c000d96b:	c3                   	ret    

c000d96c <VCache::VCache(PhysicalDisk*)>:
c000d96c:	53                   	push   ebx
c000d96d:	83 ec 28             	sub    esp,0x28
c000d970:	ba 40 04 02 c0       	mov    edx,0xc0020440
c000d975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d979:	89 10                	mov    DWORD PTR [eax],edx
c000d97b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d97f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d98a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d995:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d99c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9a7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9ae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9b9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9c4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9cc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9d3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9e6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9ee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9f6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9fd:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000da05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da09:	89 04 24             	mov    DWORD PTR [esp],eax
c000da0c:	e8 f5 a0 ff ff       	call   c0007b06 <malloc>
c000da11:	89 c3                	mov    ebx,eax
c000da13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da16:	e8 51 74 00 00       	call   c0014e6c <Mutex::Mutex()>
c000da1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da1f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da2a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da31:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da46:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da4d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da59:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000da5d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da60:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da67:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da6f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da75:	05 00 02 00 00       	add    eax,0x200
c000da7a:	c1 e0 03             	shl    eax,0x3
c000da7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da80:	e8 81 a0 ff ff       	call   c0007b06 <malloc>
c000da85:	89 c2                	mov    edx,eax
c000da87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da92:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da9d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000daa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daa5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000daab:	89 d0                	mov    eax,edx
c000daad:	c1 e0 02             	shl    eax,0x2
c000dab0:	01 d0                	add    eax,edx
c000dab2:	c1 e0 04             	shl    eax,0x4
c000dab5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dab8:	e8 49 a0 ff ff       	call   c0007b06 <malloc>
c000dabd:	89 c2                	mov    edx,eax
c000dabf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dac3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dac6:	90                   	nop
c000dac7:	83 c4 28             	add    esp,0x28
c000daca:	5b                   	pop    ebx
c000dacb:	c3                   	ret    

c000dacc <VCache::invalidateReadBuffer()>:
c000dacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dad6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <VCache::writeWriteBuffer()>:
c000dadc:	53                   	push   ebx
c000dadd:	83 ec 08             	sub    esp,0x8
c000dae0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dae4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dae8:	74 1e                	je     c000db08 <VCache::writeWriteBuffer()+0x2c>
c000daea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000daed:	83 ec 0c             	sub    esp,0xc
c000daf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000daf2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000daf5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000daf8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000dafb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dafe:	50                   	push   eax
c000daff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db02:	83 c4 20             	add    esp,0x20
c000db05:	8d 76 00             	lea    esi,[esi+0x0]
c000db08:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db0f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db16:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db1a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db21:	83 c4 08             	add    esp,0x8
c000db24:	5b                   	pop    ebx
c000db25:	c3                   	ret    
c000db26:	66 90                	xchg   ax,ax

c000db28 <VCache::~VCache()>:
c000db28:	83 ec 1c             	sub    esp,0x1c
c000db2b:	ba 40 04 02 c0       	mov    edx,0xc0020440
c000db30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db34:	89 10                	mov    DWORD PTR [eax],edx
c000db36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3a:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000db3e:	84 c0                	test   al,al
c000db40:	74 0e                	je     c000db50 <VCache::~VCache()+0x28>
c000db42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db46:	89 04 24             	mov    DWORD PTR [esp],eax
c000db49:	e8 8e ff ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c000db4e:	66 90                	xchg   ax,ax
c000db50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db57:	89 04 24             	mov    DWORD PTR [esp],eax
c000db5a:	e8 ba 9f ff ff       	call   c0007b19 <free>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db66:	89 04 24             	mov    DWORD PTR [esp],eax
c000db69:	e8 ab 9f ff ff       	call   c0007b19 <free>
c000db6e:	90                   	nop
c000db6f:	83 c4 1c             	add    esp,0x1c
c000db72:	c3                   	ret    
c000db73:	90                   	nop

c000db74 <VCache::~VCache()>:
c000db74:	83 ec 1c             	sub    esp,0x1c
c000db77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000db7e:	e8 a5 ff ff ff       	call   c000db28 <VCache::~VCache()>
c000db83:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000db92:	e8 c5 cd ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000db97:	83 c4 1c             	add    esp,0x1c
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <VCache::write(unsigned long long, int, void*)>:
c000db9c:	55                   	push   ebp
c000db9d:	57                   	push   edi
c000db9e:	56                   	push   esi
c000db9f:	53                   	push   ebx
c000dba0:	83 ec 1c             	sub    esp,0x1c
c000dba3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dba7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dbaf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbb3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbbb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbbf:	74 0f                	je     c000dbd0 <VCache::write(unsigned long long, int, void*)+0x34>
c000dbc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbc5:	53                   	push   ebx
c000dbc6:	e8 01 ff ff ff       	call   c000dacc <VCache::invalidateReadBuffer()>
c000dbcb:	58                   	pop    eax
c000dbcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbd0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbd4:	74 66                	je     c000dc3c <VCache::write(unsigned long long, int, void*)+0xa0>
c000dbd6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dbd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbdd:	99                   	cdq    
c000dbde:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dbe1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dbe4:	89 c6                	mov    esi,eax
c000dbe6:	31 ce                	xor    esi,ecx
c000dbe8:	89 d0                	mov    eax,edx
c000dbea:	31 e8                	xor    eax,ebp
c000dbec:	09 c6                	or     esi,eax
c000dbee:	75 38                	jne    c000dc28 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dbf0:	83 ff 01             	cmp    edi,0x1
c000dbf3:	75 33                	jne    c000dc28 <VCache::write(unsigned long long, int, void*)+0x8c>
c000dbf5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbf8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dbfc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc00:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc06:	0f af f9             	imul   edi,ecx
c000dc09:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000dc0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc11:	40                   	inc    eax
c000dc12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc15:	83 f8 50             	cmp    eax,0x50
c000dc18:	75 72                	jne    c000dc8c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc1a:	83 ec 0c             	sub    esp,0xc
c000dc1d:	53                   	push   ebx
c000dc1e:	e8 b9 fe ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	eb 64                	jmp    c000dc8c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc2c:	83 ec 0c             	sub    esp,0xc
c000dc2f:	53                   	push   ebx
c000dc30:	e8 a7 fe ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c000dc35:	83 c4 10             	add    esp,0x10
c000dc38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc3c:	83 ff 4f             	cmp    edi,0x4f
c000dc3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc42:	7f 20                	jg     c000dc64 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dc44:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc47:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc4b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dc4e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc51:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc54:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc58:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc60:	eb 2a                	jmp    c000dc8c <VCache::write(unsigned long long, int, void*)+0xf0>
c000dc62:	66 90                	xchg   ax,ax
c000dc64:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc68:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc6a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dc6e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dc72:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc76:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc7e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dc81:	83 c4 1c             	add    esp,0x1c
c000dc84:	5b                   	pop    ebx
c000dc85:	5e                   	pop    esi
c000dc86:	5f                   	pop    edi
c000dc87:	5d                   	pop    ebp
c000dc88:	ff e0                	jmp    eax
c000dc8a:	66 90                	xchg   ax,ax
c000dc8c:	83 c4 1c             	add    esp,0x1c
c000dc8f:	31 c0                	xor    eax,eax
c000dc91:	5b                   	pop    ebx
c000dc92:	5e                   	pop    esi
c000dc93:	5f                   	pop    edi
c000dc94:	5d                   	pop    ebp
c000dc95:	c3                   	ret    

c000dc96 <VCache::read(unsigned long long, int, void*)>:
c000dc96:	55                   	push   ebp
c000dc97:	57                   	push   edi
c000dc98:	56                   	push   esi
c000dc99:	53                   	push   ebx
c000dc9a:	83 ec 1c             	sub    esp,0x1c
c000dc9d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dca5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dca9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dcad:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcb5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcb9:	74 0d                	je     c000dcc8 <VCache::read(unsigned long long, int, void*)+0x32>
c000dcbb:	83 ec 0c             	sub    esp,0xc
c000dcbe:	57                   	push   edi
c000dcbf:	e8 18 fe ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c000dcc4:	83 c4 10             	add    esp,0x10
c000dcc7:	90                   	nop
c000dcc8:	83 fd 01             	cmp    ebp,0x1
c000dccb:	0f 85 93 00 00 00    	jne    c000dd64 <VCache::read(unsigned long long, int, void*)+0xce>
c000dcd1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcd4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dcdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcde:	0f 85 80 00 00 00    	jne    c000dd64 <VCache::read(unsigned long long, int, void*)+0xce>
c000dce4:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dce7:	89 cd                	mov    ebp,ecx
c000dce9:	f7 dd                	neg    ebp
c000dceb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dcef:	89 e8                	mov    eax,ebp
c000dcf1:	21 dd                	and    ebp,ebx
c000dcf3:	c1 f8 1f             	sar    eax,0x1f
c000dcf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcfa:	89 e8                	mov    eax,ebp
c000dcfc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dd00:	21 f5                	and    ebp,esi
c000dd02:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd06:	89 ea                	mov    edx,ebp
c000dd08:	74 2e                	je     c000dd38 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd0a:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dd0d:	75 29                	jne    c000dd38 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd0f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd12:	75 24                	jne    c000dd38 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd14:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd17:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd1d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd20:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd23:	21 f3                	and    ebx,esi
c000dd25:	0f af d9             	imul   ebx,ecx
c000dd28:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd2b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd2f:	89 de                	mov    esi,ebx
c000dd31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd33:	31 c0                	xor    eax,eax
c000dd35:	eb 61                	jmp    c000dd98 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd37:	90                   	nop
c000dd38:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd42:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd46:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd49:	8b 36                	mov    esi,DWORD PTR [esi]
c000dd4b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd4e:	51                   	push   ecx
c000dd4f:	52                   	push   edx
c000dd50:	50                   	push   eax
c000dd51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd55:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dd58:	83 c4 20             	add    esp,0x20
c000dd5b:	85 c0                	test   eax,eax
c000dd5d:	75 39                	jne    c000dd98 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd5f:	eb b3                	jmp    c000dd14 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd61:	8d 76 00             	lea    esi,[esi+0x0]
c000dd64:	83 ec 0c             	sub    esp,0xc
c000dd67:	57                   	push   edi
c000dd68:	e8 5f fd ff ff       	call   c000dacc <VCache::invalidateReadBuffer()>
c000dd6d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd74:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd76:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dd7a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dd7e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dd82:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dd86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd8a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd8d:	83 c4 2c             	add    esp,0x2c
c000dd90:	5b                   	pop    ebx
c000dd91:	5e                   	pop    esi
c000dd92:	5f                   	pop    edi
c000dd93:	5d                   	pop    ebp
c000dd94:	ff e0                	jmp    eax
c000dd96:	66 90                	xchg   ax,ax
c000dd98:	83 c4 1c             	add    esp,0x1c
c000dd9b:	5b                   	pop    ebx
c000dd9c:	5e                   	pop    esi
c000dd9d:	5f                   	pop    edi
c000dd9e:	5d                   	pop    ebp
c000dd9f:	c3                   	ret    

c000dda0 <Video::putrect(int, int, int, int, unsigned int)>:
c000dda0:	55                   	push   ebp
c000dda1:	57                   	push   edi
c000dda2:	56                   	push   esi
c000dda3:	53                   	push   ebx
c000dda4:	83 ec 1c             	sub    esp,0x1c
c000dda7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddaf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddb3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddbf:	01 df                	add    edi,ebx
c000ddc1:	39 fb                	cmp    ebx,edi
c000ddc3:	7d 1f                	jge    c000dde4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddc5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ddc9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ddcd:	7d 12                	jge    c000dde1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ddcf:	8b 16                	mov    edx,DWORD PTR [esi]
c000ddd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd5:	53                   	push   ebx
c000ddd6:	55                   	push   ebp
c000ddd7:	45                   	inc    ebp
c000ddd8:	56                   	push   esi
c000ddd9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dddc:	83 c4 10             	add    esp,0x10
c000dddf:	eb e8                	jmp    c000ddc9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dde1:	43                   	inc    ebx
c000dde2:	eb dd                	jmp    c000ddc1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dde4:	83 c4 1c             	add    esp,0x1c
c000dde7:	5b                   	pop    ebx
c000dde8:	5e                   	pop    esi
c000dde9:	5f                   	pop    edi
c000ddea:	5d                   	pop    ebp
c000ddeb:	c3                   	ret    

c000ddec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ddec:	55                   	push   ebp
c000dded:	57                   	push   edi
c000ddee:	31 ff                	xor    edi,edi
c000ddf0:	56                   	push   esi
c000ddf1:	53                   	push   ebx
c000ddf2:	83 ec 1c             	sub    esp,0x1c
c000ddf5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ddf9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ddfd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de04:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de11:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de15:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de18:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de1c:	01 f9                	add    ecx,edi
c000de1e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de22:	7d 2f                	jge    c000de53 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de24:	31 f6                	xor    esi,esi
c000de26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de2a:	01 f2                	add    edx,esi
c000de2c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de30:	7d 1a                	jge    c000de4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de35:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de38:	46                   	inc    esi
c000de39:	51                   	push   ecx
c000de3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de3e:	52                   	push   edx
c000de3f:	55                   	push   ebp
c000de40:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de43:	83 c4 10             	add    esp,0x10
c000de46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de4a:	eb da                	jmp    c000de26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de4c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de50:	47                   	inc    edi
c000de51:	eb c5                	jmp    c000de18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de53:	83 c4 1c             	add    esp,0x1c
c000de56:	5b                   	pop    ebx
c000de57:	5e                   	pop    esi
c000de58:	5f                   	pop    edi
c000de59:	5d                   	pop    ebp
c000de5a:	c3                   	ret    
c000de5b:	90                   	nop

c000de5c <Video::blit(unsigned int*, int, int, int, int)>:
c000de5c:	55                   	push   ebp
c000de5d:	ba 00 00 00 00       	mov    edx,0x0
c000de62:	57                   	push   edi
c000de63:	56                   	push   esi
c000de64:	53                   	push   ebx
c000de65:	83 ec 1c             	sub    esp,0x1c
c000de68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de6c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000de70:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de74:	85 c0                	test   eax,eax
c000de76:	0f 49 d0             	cmovns edx,eax
c000de79:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000de80:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000de84:	89 eb                	mov    ebx,ebp
c000de86:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000de8a:	01 ea                	add    edx,ebp
c000de8c:	39 da                	cmp    edx,ebx
c000de8e:	7e 54                	jle    c000dee4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000de90:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de96:	7c 4c                	jl     c000dee4 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000de98:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dea0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dea4:	01 c1                	add    ecx,eax
c000dea6:	39 f9                	cmp    ecx,edi
c000dea8:	7e 2f                	jle    c000ded9 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000deaa:	83 c2 04             	add    edx,0x4
c000dead:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deb3:	7c 21                	jl     c000ded6 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000deb5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000deb9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000debb:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000debe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dec2:	55                   	push   ebp
c000dec3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dec7:	56                   	push   esi
c000dec8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000decb:	83 c4 10             	add    esp,0x10
c000dece:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ded2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ded6:	47                   	inc    edi
c000ded7:	eb c7                	jmp    c000dea0 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ded9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000dedd:	43                   	inc    ebx
c000dede:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000dee2:	eb a2                	jmp    c000de86 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000dee4:	83 c4 1c             	add    esp,0x1c
c000dee7:	5b                   	pop    ebx
c000dee8:	5e                   	pop    esi
c000dee9:	5f                   	pop    edi
c000deea:	5d                   	pop    ebp
c000deeb:	c3                   	ret    

c000deec <Video::clearScreen(unsigned int)>:
c000deec:	57                   	push   edi
c000deed:	56                   	push   esi
c000deee:	53                   	push   ebx
c000deef:	31 db                	xor    ebx,ebx
c000def1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000def5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000defb:	7e 1f                	jle    c000df1c <Video::clearScreen(unsigned int)+0x30>
c000defd:	31 ff                	xor    edi,edi
c000deff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df05:	7e 12                	jle    c000df19 <Video::clearScreen(unsigned int)+0x2d>
c000df07:	8b 06                	mov    eax,DWORD PTR [esi]
c000df09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df0d:	53                   	push   ebx
c000df0e:	57                   	push   edi
c000df0f:	47                   	inc    edi
c000df10:	56                   	push   esi
c000df11:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	eb e6                	jmp    c000deff <Video::clearScreen(unsigned int)+0x13>
c000df19:	43                   	inc    ebx
c000df1a:	eb d9                	jmp    c000def5 <Video::clearScreen(unsigned int)+0x9>
c000df1c:	5b                   	pop    ebx
c000df1d:	5e                   	pop    esi
c000df1e:	5f                   	pop    edi
c000df1f:	c3                   	ret    

c000df20 <Video::putpixel(int, int, unsigned int)>:
c000df20:	c7 44 24 04 48 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020448
c000df28:	e9 98 28 00 00       	jmp    c00107c5 <KePanic(char const*)>
c000df2d:	90                   	nop

c000df2e <Video::readPixelApprox(int, int)>:
c000df2e:	83 ec 18             	sub    esp,0x18
c000df31:	68 69 04 02 c0       	push   0xc0020469
c000df36:	e8 8a 28 00 00       	call   c00107c5 <KePanic(char const*)>
c000df3b:	31 c0                	xor    eax,eax
c000df3d:	83 c4 1c             	add    esp,0x1c
c000df40:	c3                   	ret    
c000df41:	90                   	nop

c000df42 <Video::Video(char const*)>:
c000df42:	83 ec 1c             	sub    esp,0x1c
c000df45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000df4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df51:	89 04 24             	mov    DWORD PTR [esp],eax
c000df54:	e8 e1 e0 ff ff       	call   c000c03a <Device::Device(char const*)>
c000df59:	ba e4 04 02 c0       	mov    edx,0xc00204e4
c000df5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df62:	89 10                	mov    DWORD PTR [eax],edx
c000df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df68:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df72:	90                   	nop
c000df73:	83 c4 1c             	add    esp,0x1c
c000df76:	c3                   	ret    
c000df77:	90                   	nop

c000df78 <Video::~Video()>:
c000df78:	83 ec 1c             	sub    esp,0x1c
c000df7b:	ba e4 04 02 c0       	mov    edx,0xc00204e4
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	89 10                	mov    DWORD PTR [eax],edx
c000df86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000df8d:	e8 14 de ff ff       	call   c000bda6 <Device::~Device()>
c000df92:	90                   	nop
c000df93:	83 c4 1c             	add    esp,0x1c
c000df96:	c3                   	ret    
c000df97:	90                   	nop

c000df98 <Video::~Video()>:
c000df98:	83 ec 1c             	sub    esp,0x1c
c000df9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfa2:	e8 d1 ff ff ff       	call   c000df78 <Video::~Video()>
c000dfa7:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000dfaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfb6:	e8 a1 c9 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000dfbb:	83 c4 1c             	add    esp,0x1c
c000dfbe:	c3                   	ret    
c000dfbf:	90                   	nop

c000dfc0 <Video::isMonochrome()>:
c000dfc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfc4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dfca:	c3                   	ret    
c000dfcb:	90                   	nop

c000dfcc <Video::getWidth()>:
c000dfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <Video::getHeight()>:
c000dfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfdc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dfe2:	c3                   	ret    
c000dfe3:	90                   	nop

c000dfe4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dfe4:	55                   	push   ebp
c000dfe5:	57                   	push   edi
c000dfe6:	56                   	push   esi
c000dfe7:	53                   	push   ebx
c000dfe8:	83 ec 2c             	sub    esp,0x2c
c000dfeb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dff3:	83 f8 01             	cmp    eax,0x1
c000dff6:	19 c9                	sbb    ecx,ecx
c000dff8:	31 db                	xor    ebx,ebx
c000dffa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dffe:	89 ce                	mov    esi,ecx
c000e000:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e008:	f7 d6                	not    esi
c000e00a:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e010:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e014:	01 d8                	add    eax,ebx
c000e016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e01a:	57                   	push   edi
c000e01b:	e8 b8 ff ff ff       	call   c000dfd8 <Video::getHeight()>
c000e020:	59                   	pop    ecx
c000e021:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e025:	7e 70                	jle    c000e097 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e027:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e02b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e02f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e032:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e036:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e03a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e041:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e045:	89 e8                	mov    eax,ebp
c000e047:	83 c0 20             	add    eax,0x20
c000e04a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e04e:	57                   	push   edi
c000e04f:	e8 78 ff ff ff       	call   c000dfcc <Video::getWidth()>
c000e054:	5a                   	pop    edx
c000e055:	39 c5                	cmp    ebp,eax
c000e057:	7d 34                	jge    c000e08d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e059:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e05e:	74 05                	je     c000e065 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e060:	8b 07                	mov    eax,DWORD PTR [edi]
c000e062:	56                   	push   esi
c000e063:	eb 0d                	jmp    c000e072 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e065:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e06a:	74 12                	je     c000e07e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e06c:	8b 07                	mov    eax,DWORD PTR [edi]
c000e06e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e072:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e076:	55                   	push   ebp
c000e077:	57                   	push   edi
c000e078:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e07b:	83 c4 10             	add    esp,0x10
c000e07e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e082:	45                   	inc    ebp
c000e083:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e087:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e08b:	75 c1                	jne    c000e04e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e08d:	43                   	inc    ebx
c000e08e:	83 fb 20             	cmp    ebx,0x20
c000e091:	0f 85 79 ff ff ff    	jne    c000e010 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e097:	83 c4 2c             	add    esp,0x2c
c000e09a:	5b                   	pop    ebx
c000e09b:	5e                   	pop    esi
c000e09c:	5f                   	pop    edi
c000e09d:	5d                   	pop    ebp
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0a0:	55                   	push   ebp
c000e0a1:	57                   	push   edi
c000e0a2:	56                   	push   esi
c000e0a3:	53                   	push   ebx
c000e0a4:	83 ec 28             	sub    esp,0x28
c000e0a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0ab:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0af:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0b3:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e0b7:	c1 e6 08             	shl    esi,0x8
c000e0ba:	01 c6                	add    esi,eax
c000e0bc:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e0c0:	c1 e5 08             	shl    ebp,0x8
c000e0c3:	01 c5                	add    ebp,eax
c000e0c5:	89 f0                	mov    eax,esi
c000e0c7:	0f af c5             	imul   eax,ebp
c000e0ca:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e0d1:	50                   	push   eax
c000e0d2:	e8 2f 9a ff ff       	call   c0007b06 <malloc>
c000e0d7:	83 c4 10             	add    esp,0x10
c000e0da:	85 c0                	test   eax,eax
c000e0dc:	89 c7                	mov    edi,eax
c000e0de:	75 10                	jne    c000e0f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	68 94 04 02 c0       	push   0xc0020494
c000e0e8:	e8 d8 26 00 00       	call   c00107c5 <KePanic(char const*)>
c000e0ed:	83 c4 10             	add    esp,0x10
c000e0f0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e0f3:	ba 12 00 00 00       	mov    edx,0x12
c000e0f8:	84 c0                	test   al,al
c000e0fa:	74 11                	je     c000e10d <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e0fc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e100:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e104:	c1 fa 03             	sar    edx,0x3
c000e107:	0f af d1             	imul   edx,ecx
c000e10a:	83 c2 12             	add    edx,0x12
c000e10d:	85 f6                	test   esi,esi
c000e10f:	74 04                	je     c000e115 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e111:	85 ed                	test   ebp,ebp
c000e113:	75 12                	jne    c000e127 <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e115:	83 ec 0c             	sub    esp,0xc
c000e118:	68 a4 04 02 c0       	push   0xc00204a4
c000e11d:	e8 54 c9 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e122:	e9 c1 00 00 00       	jmp    c000e1e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e127:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e12b:	80 f9 02             	cmp    cl,0x2
c000e12e:	0f 85 9f 00 00 00    	jne    c000e1d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e134:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e139:	75 0f                	jne    c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e13b:	84 c0                	test   al,al
c000e13d:	75 0b                	jne    c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e13f:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e142:	80 e9 18             	sub    cl,0x18
c000e145:	f6 c1 f7             	test   cl,0xf7
c000e148:	74 0d                	je     c000e157 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	68 b9 04 02 c0       	push   0xc00204b9
c000e152:	e9 84 00 00 00       	jmp    c000e1db <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e157:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e15f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e16e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e17a:	75 0c                	jne    c000e188 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e17c:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e181:	c1 e0 18             	shl    eax,0x18
c000e184:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e188:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e18d:	ff 04 24             	inc    DWORD PTR [esp]
c000e190:	c1 e0 10             	shl    eax,0x10
c000e193:	89 c1                	mov    ecx,eax
c000e195:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e19a:	c1 e0 08             	shl    eax,0x8
c000e19d:	09 c8                	or     eax,ecx
c000e19f:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e1a3:	09 c8                	or     eax,ecx
c000e1a5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e1a8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e1ac:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e1b0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1b4:	c1 f8 03             	sar    eax,0x3
c000e1b7:	01 c2                	add    edx,eax
c000e1b9:	89 c8                	mov    eax,ecx
c000e1bb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1bf:	39 c6                	cmp    esi,eax
c000e1c1:	7f ab                	jg     c000e16e <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e1c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e1cb:	7e 22                	jle    c000e1ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e1d1:	eb 94                	jmp    c000e167 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e1d3:	50                   	push   eax
c000e1d4:	50                   	push   eax
c000e1d5:	51                   	push   ecx
c000e1d6:	68 c7 04 02 c0       	push   0xc00204c7
c000e1db:	e8 96 c8 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e1e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e1e3:	e8 31 99 ff ff       	call   c0007b19 <free>
c000e1e8:	83 c4 10             	add    esp,0x10
c000e1eb:	31 ff                	xor    edi,edi
c000e1ed:	eb 0c                	jmp    c000e1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e1ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1f3:	89 30                	mov    DWORD PTR [eax],esi
c000e1f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1f9:	89 28                	mov    DWORD PTR [eax],ebp
c000e1fb:	83 c4 1c             	add    esp,0x1c
c000e1fe:	89 f8                	mov    eax,edi
c000e200:	5b                   	pop    ebx
c000e201:	5e                   	pop    esi
c000e202:	5f                   	pop    edi
c000e203:	5d                   	pop    ebp
c000e204:	c3                   	ret    
c000e205:	90                   	nop

c000e206 <Video::putTGA(int, int, unsigned char*, int)>:
c000e206:	55                   	push   ebp
c000e207:	57                   	push   edi
c000e208:	56                   	push   esi
c000e209:	53                   	push   ebx
c000e20a:	83 ec 28             	sub    esp,0x28
c000e20d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e211:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e215:	50                   	push   eax
c000e216:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e21a:	50                   	push   eax
c000e21b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e21f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e223:	57                   	push   edi
c000e224:	e8 77 fe ff ff       	call   c000e0a0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e229:	83 c4 20             	add    esp,0x20
c000e22c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e230:	85 c0                	test   eax,eax
c000e232:	74 35                	je     c000e269 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e234:	89 c6                	mov    esi,eax
c000e236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e23a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e23e:	39 d8                	cmp    eax,ebx
c000e240:	7e 27                	jle    c000e269 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e242:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e246:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e24a:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e24e:	39 e9                	cmp    ecx,ebp
c000e250:	7e 14                	jle    c000e266 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e252:	83 c6 04             	add    esi,0x4
c000e255:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e257:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e25a:	53                   	push   ebx
c000e25b:	55                   	push   ebp
c000e25c:	45                   	inc    ebp
c000e25d:	57                   	push   edi
c000e25e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e261:	83 c4 10             	add    esp,0x10
c000e264:	eb e0                	jmp    c000e246 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e266:	43                   	inc    ebx
c000e267:	eb cd                	jmp    c000e236 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e269:	83 c4 1c             	add    esp,0x1c
c000e26c:	5b                   	pop    ebx
c000e26d:	5e                   	pop    esi
c000e26e:	5f                   	pop    edi
c000e26f:	5d                   	pop    ebp
c000e270:	c3                   	ret    
c000e271:	66 90                	xchg   ax,ax
c000e273:	90                   	nop

c000e274 <ACPI::close(int, int, void*)>:
c000e274:	83 ec 2c             	sub    esp,0x2c
c000e277:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e27f:	74 0b                	je     c000e28c <ACPI::close(int, int, void*)+0x18>
c000e281:	b8 00 00 00 00       	mov    eax,0x0
c000e286:	e9 95 00 00 00       	jmp    c000e320 <ACPI::close(int, int, void*)+0xac>
c000e28b:	90                   	nop
c000e28c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e291:	75 25                	jne    c000e2b8 <ACPI::close(int, int, void*)+0x44>
c000e293:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e298:	85 c0                	test   eax,eax
c000e29a:	74 08                	je     c000e2a4 <ACPI::close(int, int, void*)+0x30>
c000e29c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2a1:	ff d0                	call   eax
c000e2a3:	90                   	nop
c000e2a4:	c7 04 24 28 05 02 c0 	mov    DWORD PTR [esp],0xc0020528
c000e2ab:	e8 15 25 00 00       	call   c00107c5 <KePanic(char const*)>
c000e2b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2b5:	eb 69                	jmp    c000e320 <ACPI::close(int, int, void*)+0xac>
c000e2b7:	90                   	nop
c000e2b8:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e2bd:	75 59                	jne    c000e318 <ACPI::close(int, int, void*)+0xa4>
c000e2bf:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2c4:	85 c0                	test   eax,eax
c000e2c6:	74 08                	je     c000e2d0 <ACPI::close(int, int, void*)+0x5c>
c000e2c8:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2cd:	ff d0                	call   eax
c000e2cf:	90                   	nop
c000e2d0:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e2dd:	83 e0 02             	and    eax,0x2
c000e2e0:	74 1e                	je     c000e300 <ACPI::close(int, int, void*)+0x8c>
c000e2e2:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e2e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e2ed:	89 c2                	mov    edx,eax
c000e2ef:	ec                   	in     al,dx
c000e2f0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e2f4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e2f9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e2fd:	eb d9                	jmp    c000e2d8 <ACPI::close(int, int, void*)+0x64>
c000e2ff:	90                   	nop
c000e300:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e307:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e30c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e311:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e315:	ee                   	out    dx,al
c000e316:	66 90                	xchg   ax,ax
c000e318:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e31d:	8d 76 00             	lea    esi,[esi+0x0]
c000e320:	83 c4 2c             	add    esp,0x2c
c000e323:	c3                   	ret    

c000e324 <findRSDP()>:
c000e324:	83 ec 2c             	sub    esp,0x2c
c000e327:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e32c:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e333:	24 04                	and    al,0x4
c000e335:	75 09                	jne    c000e340 <findRSDP()+0x1c>
c000e337:	b8 00 00 00 00       	mov    eax,0x0
c000e33c:	eb 7a                	jmp    c000e3b8 <findRSDP()+0x94>
c000e33e:	66 90                	xchg   ax,ax
c000e340:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e345:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e34a:	7f 1c                	jg     c000e368 <findRSDP()+0x44>
c000e34c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e351:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e358:	80 e2 fb             	and    dl,0xfb
c000e35b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e361:	b8 00 00 00 00       	mov    eax,0x0
c000e366:	eb 50                	jmp    c000e3b8 <findRSDP()+0x94>
c000e368:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e370:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e378:	77 36                	ja     c000e3b0 <findRSDP()+0x8c>
c000e37a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e382:	c7 44 24 04 c3 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc00205c3
c000e38a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e38e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e391:	e8 ea 1f ff ff       	call   c0000380 <memcmp>
c000e396:	85 c0                	test   eax,eax
c000e398:	0f 94 c0             	sete   al
c000e39b:	84 c0                	test   al,al
c000e39d:	74 09                	je     c000e3a8 <findRSDP()+0x84>
c000e39f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3a3:	eb 13                	jmp    c000e3b8 <findRSDP()+0x94>
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000e3ad:	eb c1                	jmp    c000e370 <findRSDP()+0x4c>
c000e3af:	90                   	nop
c000e3b0:	b8 00 00 00 00       	mov    eax,0x0
c000e3b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b8:	83 c4 2c             	add    esp,0x2c
c000e3bb:	c3                   	ret    

c000e3bc <loadACPITables(unsigned char*)>:
c000e3bc:	57                   	push   edi
c000e3bd:	56                   	push   esi
c000e3be:	53                   	push   ebx
c000e3bf:	83 c4 80             	add    esp,0xffffff80
c000e3c2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3c7:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e3ce:	24 04                	and    al,0x4
c000e3d0:	0f 84 5e 02 00 00    	je     c000e634 <loadACPITables(unsigned char*)+0x278>
c000e3d6:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000e3dd:	84 c0                	test   al,al
c000e3df:	74 7f                	je     c000e460 <loadACPITables(unsigned char*)+0xa4>
c000e3e1:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e3e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000e3ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3f3:	83 e8 24             	sub    eax,0x24
c000e3f6:	c1 e8 03             	shr    eax,0x3
c000e3f9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e3fd:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000e405:	8d 76 00             	lea    esi,[esi+0x0]
c000e408:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e40c:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000e410:	0f 8d be 00 00 00    	jge    c000e4d4 <loadACPITables(unsigned char*)+0x118>
c000e416:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e41d:	83 c0 24             	add    eax,0x24
c000e420:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000e424:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000e428:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e42c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e430:	c1 e0 03             	shl    eax,0x3
c000e433:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000e437:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e43b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e43e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e440:	89 c1                	mov    ecx,eax
c000e442:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e447:	8d 50 01             	lea    edx,[eax+0x1]
c000e44a:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e450:	89 ca                	mov    edx,ecx
c000e452:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e459:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000e45d:	eb a9                	jmp    c000e408 <loadACPITables(unsigned char*)+0x4c>
c000e45f:	90                   	nop
c000e460:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e46b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e46f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e472:	83 e8 24             	sub    eax,0x24
c000e475:	c1 e8 02             	shr    eax,0x2
c000e478:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e47c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000e484:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e488:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000e48c:	7d 46                	jge    c000e4d4 <loadACPITables(unsigned char*)+0x118>
c000e48e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e495:	83 c0 24             	add    eax,0x24
c000e498:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e49c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000e4a4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e4a8:	c1 e0 02             	shl    eax,0x2
c000e4ab:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000e4af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4b3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4b5:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e4bd:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4c3:	89 ca                	mov    edx,ecx
c000e4c5:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4cc:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000e4d0:	eb b2                	jmp    c000e484 <loadACPITables(unsigned char*)+0xc8>
c000e4d2:	66 90                	xchg   ax,ax
c000e4d4:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000e4dc:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4e1:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000e4e5:	0f 8d 4d 01 00 00    	jge    c000e638 <loadACPITables(unsigned char*)+0x27c>
c000e4eb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e4ef:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e4f6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e4fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e502:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e506:	25 ff 0f 00 00       	and    eax,0xfff
c000e50b:	89 c6                	mov    esi,eax
c000e50d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e513:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e51a:	e8 01 b1 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e51f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e523:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e529:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e531:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000e539:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e53d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e544:	e8 39 bb ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e549:	09 f0                	or     eax,esi
c000e54b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e54f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e553:	c1 e0 03             	shl    eax,0x3
c000e556:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e55b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e55f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e563:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e567:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000e56f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e577:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e57b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e57f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e583:	89 c6                	mov    esi,eax
c000e585:	89 d7                	mov    edi,edx
c000e587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e589:	89 c8                	mov    eax,ecx
c000e58b:	89 fa                	mov    edx,edi
c000e58d:	89 f3                	mov    ebx,esi
c000e58f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e593:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e597:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e59b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e59f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5a2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e5a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e5aa:	05 00 10 00 00       	add    eax,0x1000
c000e5af:	c1 e8 0c             	shr    eax,0xc
c000e5b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e5b6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5c2:	25 ff 0f 00 00       	and    eax,0xfff
c000e5c7:	89 c6                	mov    esi,eax
c000e5c9:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e5d6:	e8 45 b0 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e5db:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e5df:	89 d1                	mov    ecx,edx
c000e5e1:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000e5e7:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e5ef:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e5f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e5f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e5fb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e5ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e602:	e8 7b ba ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e607:	09 f0                	or     eax,esi
c000e609:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e60d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e611:	89 04 24             	mov    DWORD PTR [esp],eax
c000e614:	e8 20 b3 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e619:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e61d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000e621:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e628:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000e62c:	e9 ab fe ff ff       	jmp    c000e4dc <loadACPITables(unsigned char*)+0x120>
c000e631:	8d 76 00             	lea    esi,[esi+0x0]
c000e634:	90                   	nop
c000e635:	8d 76 00             	lea    esi,[esi+0x0]
c000e638:	83 ec 80             	sub    esp,0xffffff80
c000e63b:	5b                   	pop    ebx
c000e63c:	5e                   	pop    esi
c000e63d:	5f                   	pop    edi
c000e63e:	c3                   	ret    
c000e63f:	90                   	nop

c000e640 <findRSDT(unsigned char*)>:
c000e640:	57                   	push   edi
c000e641:	56                   	push   esi
c000e642:	53                   	push   ebx
c000e643:	83 ec 70             	sub    esp,0x70
c000e646:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e64b:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e652:	24 04                	and    al,0x4
c000e654:	75 0a                	jne    c000e660 <findRSDT(unsigned char*)+0x20>
c000e656:	b8 00 00 00 00       	mov    eax,0x0
c000e65b:	e9 44 01 00 00       	jmp    c000e7a4 <findRSDT(unsigned char*)+0x164>
c000e660:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e664:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e668:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000e66f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e673:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000e67b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e67f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e683:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e687:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000e68b:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000e68f:	89 c6                	mov    esi,eax
c000e691:	89 d7                	mov    edi,edx
c000e693:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e695:	89 c8                	mov    eax,ecx
c000e697:	89 fa                	mov    edx,edi
c000e699:	89 f3                	mov    ebx,esi
c000e69b:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000e69f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000e6a3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6a7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000e6ac:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000e6b0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000e6b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6c0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e6c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6c8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e6cc:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e6d0:	25 ff 0f 00 00       	and    eax,0xfff
c000e6d5:	89 c6                	mov    esi,eax
c000e6d7:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6dd:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e6e4:	e8 37 af ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e6e9:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000e6ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6f3:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e6fb:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e707:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e70b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e70e:	e8 6f b9 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e713:	09 f0                	or     eax,esi
c000e715:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e719:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e71d:	25 ff 0f 00 00       	and    eax,0xfff
c000e722:	89 c6                	mov    esi,eax
c000e724:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e72a:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e731:	e8 ea ae ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e736:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000e73a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e740:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e748:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e750:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e754:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e75b:	e8 22 b9 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e760:	09 f0                	or     eax,esi
c000e762:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e766:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000e76b:	75 13                	jne    c000e780 <findRSDT(unsigned char*)+0x140>
c000e76d:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e774:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e778:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e77c:	eb 22                	jmp    c000e7a0 <findRSDT(unsigned char*)+0x160>
c000e77e:	66 90                	xchg   ax,ax
c000e780:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000e785:	75 11                	jne    c000e798 <findRSDT(unsigned char*)+0x158>
c000e787:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e78e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e792:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e796:	eb 08                	jmp    c000e7a0 <findRSDT(unsigned char*)+0x160>
c000e798:	b8 00 00 00 00       	mov    eax,0x0
c000e79d:	eb 05                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x164>
c000e79f:	90                   	nop
c000e7a0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000e7a4:	83 c4 70             	add    esp,0x70
c000e7a7:	5b                   	pop    ebx
c000e7a8:	5e                   	pop    esi
c000e7a9:	5f                   	pop    edi
c000e7aa:	c3                   	ret    
c000e7ab:	90                   	nop

c000e7ac <findDataTable(unsigned char*, char*)>:
c000e7ac:	83 ec 2c             	sub    esp,0x2c
c000e7af:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7b4:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e7bb:	24 04                	and    al,0x4
c000e7bd:	75 09                	jne    c000e7c8 <findDataTable(unsigned char*, char*)+0x1c>
c000e7bf:	b8 00 00 00 00       	mov    eax,0x0
c000e7c4:	eb 62                	jmp    c000e828 <findDataTable(unsigned char*, char*)+0x7c>
c000e7c6:	66 90                	xchg   ax,ax
c000e7c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e7d0:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000e7d9:	7d 45                	jge    c000e820 <findDataTable(unsigned char*, char*)+0x74>
c000e7db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7df:	c1 e0 03             	shl    eax,0x3
c000e7e2:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000e7e8:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000e7f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7f8:	89 14 24             	mov    DWORD PTR [esp],edx
c000e7fb:	e8 80 1b ff ff       	call   c0000380 <memcmp>
c000e800:	85 c0                	test   eax,eax
c000e802:	0f 94 c0             	sete   al
c000e805:	84 c0                	test   al,al
c000e807:	74 0f                	je     c000e818 <findDataTable(unsigned char*, char*)+0x6c>
c000e809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e80d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e814:	eb 12                	jmp    c000e828 <findDataTable(unsigned char*, char*)+0x7c>
c000e816:	66 90                	xchg   ax,ax
c000e818:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e81c:	eb b2                	jmp    c000e7d0 <findDataTable(unsigned char*, char*)+0x24>
c000e81e:	66 90                	xchg   ax,ax
c000e820:	b8 00 00 00 00       	mov    eax,0x0
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 c4 2c             	add    esp,0x2c
c000e82b:	c3                   	ret    

c000e82c <scanMADT()>:
c000e82c:	53                   	push   ebx
c000e82d:	83 ec 48             	sub    esp,0x48
c000e830:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e835:	25 00 04 00 00       	and    eax,0x400
c000e83a:	74 18                	je     c000e854 <scanMADT()+0x28>
c000e83c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e841:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e848:	80 e2 fb             	and    dl,0xfb
c000e84b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e851:	8d 76 00             	lea    esi,[esi+0x0]
c000e854:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e859:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e860:	24 04                	and    al,0x4
c000e862:	0f 84 7c 04 00 00    	je     c000ece4 <scanMADT()+0x4b8>
c000e868:	e8 b7 fa ff ff       	call   c000e324 <findRSDP()>
c000e86d:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e872:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e877:	85 c0                	test   eax,eax
c000e879:	75 1d                	jne    c000e898 <scanMADT()+0x6c>
c000e87b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e880:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e887:	80 e2 fb             	and    dl,0xfb
c000e88a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e890:	e9 57 04 00 00       	jmp    c000ecec <scanMADT()+0x4c0>
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e89d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8a0:	e8 9b fd ff ff       	call   c000e640 <findRSDT(unsigned char*)>
c000e8a5:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8aa:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8af:	85 c0                	test   eax,eax
c000e8b1:	75 1d                	jne    c000e8d0 <scanMADT()+0xa4>
c000e8b3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8b8:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e8bf:	80 e2 fb             	and    dl,0xfb
c000e8c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8c8:	e9 1f 04 00 00       	jmp    c000ecec <scanMADT()+0x4c0>
c000e8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e8d0:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8d8:	e8 df fa ff ff       	call   c000e3bc <loadACPITables(unsigned char*)>
c000e8dd:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8e2:	c7 44 24 04 cc 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc00205cc
c000e8ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8ed:	e8 ba fe ff ff       	call   c000e7ac <findDataTable(unsigned char*, char*)>
c000e8f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e8f6:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000e8fb:	75 1b                	jne    c000e918 <scanMADT()+0xec>
c000e8fd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e902:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e909:	80 e2 fe             	and    dl,0xfe
c000e90c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e912:	e9 d5 03 00 00       	jmp    c000ecec <scanMADT()+0x4c0>
c000e917:	90                   	nop
c000e918:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000e920:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e927:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000e92b:	0f 87 bb 03 00 00    	ja     c000ecec <scanMADT()+0x4c0>
c000e931:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000e939:	0f 87 ad 03 00 00    	ja     c000ecec <scanMADT()+0x4c0>
c000e93f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e943:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e947:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e94b:	8d 50 01             	lea    edx,[eax+0x1]
c000e94e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e952:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e956:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e95b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000e95f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e963:	8d 50 01             	lea    edx,[eax+0x1]
c000e966:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e96a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e96e:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e973:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000e977:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000e97c:	0f 86 66 03 00 00    	jbe    c000ece8 <scanMADT()+0x4bc>
c000e982:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000e987:	75 5f                	jne    c000e9e8 <scanMADT()+0x1bc>
c000e989:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e98d:	8d 50 01             	lea    edx,[eax+0x1]
c000e990:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e994:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e99b:	0f b6 d2             	movzx  edx,dl
c000e99e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9a2:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e9a7:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9b1:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9b8:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e9bf:	88 d1                	mov    cl,dl
c000e9c1:	fe c1                	inc    cl
c000e9c3:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9c9:	0f b6 d2             	movzx  edx,dl
c000e9cc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9d0:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e9d5:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9db:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000e9e0:	e9 eb 02 00 00       	jmp    c000ecd0 <scanMADT()+0x4a4>
c000e9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9e8:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000e9ed:	0f 85 25 01 00 00    	jne    c000eb18 <scanMADT()+0x2ec>
c000e9f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e9fa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9fe:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000ea05:	0f b6 d2             	movzx  edx,dl
c000ea08:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea0c:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000ea11:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea17:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000ea1b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea23:	01 d0                	add    eax,edx
c000ea25:	83 c0 2c             	add    eax,0x2c
c000ea28:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ea2b:	0f b6 d0             	movzx  edx,al
c000ea2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea32:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea39:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ea3e:	0f b6 c0             	movzx  eax,al
c000ea41:	c1 e0 08             	shl    eax,0x8
c000ea44:	89 d1                	mov    ecx,edx
c000ea46:	09 c1                	or     ecx,eax
c000ea48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea4c:	8d 50 02             	lea    edx,[eax+0x2]
c000ea4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea53:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea58:	0f b6 c0             	movzx  eax,al
c000ea5b:	c1 e0 10             	shl    eax,0x10
c000ea5e:	09 c1                	or     ecx,eax
c000ea60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea64:	8d 50 03             	lea    edx,[eax+0x3]
c000ea67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea6b:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea70:	0f b6 c0             	movzx  eax,al
c000ea73:	c1 e0 18             	shl    eax,0x18
c000ea76:	09 c1                	or     ecx,eax
c000ea78:	89 ca                	mov    edx,ecx
c000ea7a:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ea81:	0f b6 c0             	movzx  eax,al
c000ea84:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea8b:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea90:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea98:	01 d0                	add    eax,edx
c000ea9a:	83 c0 2c             	add    eax,0x2c
c000ea9d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eaa0:	0f b6 d0             	movzx  edx,al
c000eaa3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaa7:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaae:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eab3:	0f b6 c0             	movzx  eax,al
c000eab6:	c1 e0 08             	shl    eax,0x8
c000eab9:	89 d1                	mov    ecx,edx
c000eabb:	09 c1                	or     ecx,eax
c000eabd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eac1:	8d 50 02             	lea    edx,[eax+0x2]
c000eac4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eac8:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eacd:	0f b6 c0             	movzx  eax,al
c000ead0:	c1 e0 10             	shl    eax,0x10
c000ead3:	09 c1                	or     ecx,eax
c000ead5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ead9:	8d 50 03             	lea    edx,[eax+0x3]
c000eadc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eae0:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eae5:	0f b6 c0             	movzx  eax,al
c000eae8:	c1 e0 18             	shl    eax,0x18
c000eaeb:	09 c1                	or     ecx,eax
c000eaed:	89 ca                	mov    edx,ecx
c000eaef:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eaf6:	0f b6 c0             	movzx  eax,al
c000eaf9:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb00:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eb05:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eb0c:	fe c0                	inc    al
c000eb0e:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb13:	e9 b8 01 00 00       	jmp    c000ecd0 <scanMADT()+0x4a4>
c000eb18:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000eb1d:	0f 85 f9 00 00 00    	jne    c000ec1c <scanMADT()+0x3f0>
c000eb23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb27:	8d 50 01             	lea    edx,[eax+0x1]
c000eb2a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb2e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb32:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb37:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000eb3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3f:	8d 50 01             	lea    edx,[eax+0x1]
c000eb42:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb46:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb4a:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb4f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000eb53:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb5b:	01 d0                	add    eax,edx
c000eb5d:	83 c0 2c             	add    eax,0x2c
c000eb60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eb63:	0f b6 d0             	movzx  edx,al
c000eb66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6a:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb71:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eb76:	0f b6 c0             	movzx  eax,al
c000eb79:	c1 e0 08             	shl    eax,0x8
c000eb7c:	89 d1                	mov    ecx,edx
c000eb7e:	09 c1                	or     ecx,eax
c000eb80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb84:	8d 50 02             	lea    edx,[eax+0x2]
c000eb87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb8b:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb90:	0f b6 c0             	movzx  eax,al
c000eb93:	c1 e0 10             	shl    eax,0x10
c000eb96:	09 c1                	or     ecx,eax
c000eb98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb9c:	8d 50 03             	lea    edx,[eax+0x3]
c000eb9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eba3:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eba8:	0f b6 c0             	movzx  eax,al
c000ebab:	c1 e0 18             	shl    eax,0x18
c000ebae:	09 c8                	or     eax,ecx
c000ebb0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ebb4:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ebb9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ebbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc1:	01 d0                	add    eax,edx
c000ebc3:	83 c0 2c             	add    eax,0x2c
c000ebc6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ebc9:	0f b6 c0             	movzx  eax,al
c000ebcc:	0f bf d0             	movsx  edx,ax
c000ebcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd3:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebda:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ebdf:	0f b6 c0             	movzx  eax,al
c000ebe2:	c1 e0 08             	shl    eax,0x8
c000ebe5:	98                   	cwde   
c000ebe6:	09 d0                	or     eax,edx
c000ebe8:	98                   	cwde   
c000ebe9:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000ebee:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ebf3:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ebf8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebfc:	88 90 00 1c 02 c0    	mov    BYTE PTR [eax-0x3ffde400],dl
c000ec02:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ec07:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000ec0c:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec14:	e9 b7 00 00 00       	jmp    c000ecd0 <scanMADT()+0x4a4>
c000ec19:	8d 76 00             	lea    esi,[esi+0x0]
c000ec1c:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000ec21:	0f 85 9d 00 00 00    	jne    c000ecc4 <scanMADT()+0x498>
c000ec27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec2b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ec32:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec36:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ec3b:	0f b6 c0             	movzx  eax,al
c000ec3e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec4a:	01 d0                	add    eax,edx
c000ec4c:	83 c0 2c             	add    eax,0x2c
c000ec4f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ec52:	0f b6 d0             	movzx  edx,al
c000ec55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec59:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec60:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ec65:	0f b6 c0             	movzx  eax,al
c000ec68:	c1 e0 08             	shl    eax,0x8
c000ec6b:	09 d0                	or     eax,edx
c000ec6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ec71:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ec76:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec7a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec7d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ec81:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec85:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ec8a:	0f b6 c0             	movzx  eax,al
c000ec8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec95:	c1 e0 08             	shl    eax,0x8
c000ec98:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000ec9c:	89 c1                	mov    ecx,eax
c000ec9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eca2:	c1 e0 18             	shl    eax,0x18
c000eca5:	89 c3                	mov    ebx,eax
c000eca7:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecac:	8d 50 01             	lea    edx,[eax+0x1]
c000ecaf:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecb5:	09 d9                	or     ecx,ebx
c000ecb7:	89 ca                	mov    edx,ecx
c000ecb9:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecc0:	eb 0e                	jmp    c000ecd0 <scanMADT()+0x4a4>
c000ecc2:	66 90                	xchg   ax,ax
c000ecc4:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000ecc9:	75 05                	jne    c000ecd0 <scanMADT()+0x4a4>
c000eccb:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000ecd0:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000ecd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecd9:	01 d0                	add    eax,edx
c000ecdb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecdf:	e9 3c fc ff ff       	jmp    c000e920 <scanMADT()+0xf4>
c000ece4:	90                   	nop
c000ece5:	eb 05                	jmp    c000ecec <scanMADT()+0x4c0>
c000ece7:	90                   	nop
c000ece8:	90                   	nop
c000ece9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecec:	83 c4 48             	add    esp,0x48
c000ecef:	5b                   	pop    ebx
c000ecf0:	c3                   	ret    
c000ecf1:	90                   	nop
c000ecf2:	66 90                	xchg   ax,ax

c000ecf4 <ACPI::ACPI()>:
c000ecf4:	83 ec 1c             	sub    esp,0x1c
c000ecf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecfb:	c7 44 24 04 d1 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc00205d1
c000ed03:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed06:	e8 2f d3 ff ff       	call   c000c03a <Device::Device(char const*)>
c000ed0b:	ba 08 07 02 c0       	mov    edx,0xc0020708
c000ed10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed14:	89 10                	mov    DWORD PTR [eax],edx
c000ed16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed1a:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed25:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed33:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed3d:	e8 ea fa ff ff       	call   c000e82c <scanMADT()>
c000ed42:	90                   	nop
c000ed43:	83 c4 1c             	add    esp,0x1c
c000ed46:	c3                   	ret    
c000ed47:	90                   	nop

c000ed48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed48:	83 ec 3c             	sub    esp,0x3c
c000ed4b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000ed4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ed53:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000ed57:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ed5b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000ed60:	88 c8                	mov    al,cl
c000ed62:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ed66:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ed6b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ed73:	90                   	nop
c000ed74:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed78:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed7e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ed82:	0f 8d 98 00 00 00    	jge    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000ed88:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed90:	83 c2 2a             	add    edx,0x2a
c000ed93:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000ed98:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000ed9d:	39 c2                	cmp    edx,eax
c000ed9f:	75 73                	jne    c000ee14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000eda1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eda5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eda9:	83 c2 2a             	add    edx,0x2a
c000edac:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000edb1:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000edb5:	75 5d                	jne    c000ee14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000edb7:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000edbc:	74 32                	je     c000edf0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000edbe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edc6:	83 c2 2a             	add    edx,0x2a
c000edc9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd4:	39 c2                	cmp    edx,eax
c000edd6:	74 0c                	je     c000ede4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000edd8:	c7 04 24 4c 05 02 c0 	mov    DWORD PTR [esp],0xc002054c
c000eddf:	e8 e1 19 00 00       	call   c00107c5 <KePanic(char const*)>
c000ede4:	c7 04 24 d6 05 02 c0 	mov    DWORD PTR [esp],0xc00205d6
c000edeb:	e8 d5 19 00 00       	call   c00107c5 <KePanic(char const*)>
c000edf0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000edf4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edfc:	83 c2 2a             	add    edx,0x2a
c000edff:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee03:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee05:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee08:	89 01                	mov    DWORD PTR [ecx],eax
c000ee0a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee0d:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ee12:	66 90                	xchg   ax,ax
c000ee14:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ee18:	e9 57 ff ff ff       	jmp    c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee20:	90                   	nop
c000ee21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee25:	83 c4 3c             	add    esp,0x3c
c000ee28:	c2 04 00             	ret    0x4
c000ee2b:	90                   	nop

c000ee2c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee2c:	83 ec 2c             	sub    esp,0x2c
c000ee2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee33:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000ee37:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ee3b:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000ee40:	88 c8                	mov    al,cl
c000ee42:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000ee46:	88 d0                	mov    al,dl
c000ee48:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ee4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee50:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee5a:	83 c2 2a             	add    edx,0x2a
c000ee5d:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000ee62:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000ee66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee6a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee74:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee7b:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ee80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee84:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee8a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000ee8f:	fe c0                	inc    al
c000ee91:	88 c1                	mov    cl,al
c000ee93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee97:	83 c2 2a             	add    edx,0x2a
c000ee9a:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ee9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eea2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeac:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeaf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eeb3:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eeb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eebb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eec1:	8d 50 01             	lea    edx,[eax+0x1]
c000eec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eec8:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eed8:	3d 00 02 00 00       	cmp    eax,0x200
c000eedd:	75 0d                	jne    c000eeec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eedf:	c7 04 24 e5 05 02 c0 	mov    DWORD PTR [esp],0xc00205e5
c000eee6:	e8 da 18 00 00       	call   c00107c5 <KePanic(char const*)>
c000eeeb:	90                   	nop
c000eeec:	90                   	nop
c000eeed:	83 c4 2c             	add    esp,0x2c
c000eef0:	c3                   	ret    
c000eef1:	90                   	nop
c000eef2:	66 90                	xchg   ax,ax

c000eef4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eef4:	b8 00 00 00 00       	mov    eax,0x0
c000eef9:	c3                   	ret    
c000eefa:	66 90                	xchg   ax,ax

c000eefc <ACPI::detectPCI()>:
c000eefc:	53                   	push   ebx
c000eefd:	83 ec 38             	sub    esp,0x38
c000ef00:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ef05:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000ef0a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef0f:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ef16:	24 04                	and    al,0x4
c000ef18:	74 2a                	je     c000ef44 <ACPI::detectPCI()+0x48>
c000ef1a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef1f:	c7 44 24 04 02 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020602
c000ef27:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef2a:	e8 7d f8 ff ff       	call   c000e7ac <findDataTable(unsigned char*, char*)>
c000ef2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef33:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ef38:	74 0a                	je     c000ef44 <ACPI::detectPCI()+0x48>
c000ef3a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef3f:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef44:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000ef4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ef53:	3c 01                	cmp    al,0x1
c000ef55:	75 0d                	jne    c000ef64 <ACPI::detectPCI()+0x68>
c000ef57:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef5c:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef61:	eb 25                	jmp    c000ef88 <ACPI::detectPCI()+0x8c>
c000ef63:	90                   	nop
c000ef64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ef6b:	3c 02                	cmp    al,0x2
c000ef6d:	75 19                	jne    c000ef88 <ACPI::detectPCI()+0x8c>
c000ef6f:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef74:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000ef79:	74 0d                	je     c000ef88 <ACPI::detectPCI()+0x8c>
c000ef7b:	c7 04 24 7c 05 02 c0 	mov    DWORD PTR [esp],0xc002057c
c000ef82:	e8 3e 18 00 00       	call   c00107c5 <KePanic(char const*)>
c000ef87:	90                   	nop
c000ef88:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000ef8d:	34 01                	xor    al,0x1
c000ef8f:	74 3f                	je     c000efd0 <ACPI::detectPCI()+0xd4>
c000ef91:	e8 9a 11 ff ff       	call   c0000130 <manualPCIProbe>
c000ef96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef9a:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000ef9f:	75 0f                	jne    c000efb0 <ACPI::detectPCI()+0xb4>
c000efa1:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efa6:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000efab:	eb 23                	jmp    c000efd0 <ACPI::detectPCI()+0xd4>
c000efad:	8d 76 00             	lea    esi,[esi+0x0]
c000efb0:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000efb5:	75 19                	jne    c000efd0 <ACPI::detectPCI()+0xd4>
c000efb7:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efbc:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000efc1:	74 0d                	je     c000efd0 <ACPI::detectPCI()+0xd4>
c000efc3:	c7 04 24 7c 05 02 c0 	mov    DWORD PTR [esp],0xc002057c
c000efca:	e8 f6 17 00 00       	call   c00107c5 <KePanic(char const*)>
c000efcf:	90                   	nop
c000efd0:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000efd5:	0f 84 89 00 00 00    	je     c000f064 <ACPI::detectPCI()+0x168>
c000efdb:	c7 04 24 07 06 02 c0 	mov    DWORD PTR [esp],0xc0020607
c000efe2:	e8 6a 11 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000efe7:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000efef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eff3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eff6:	e8 0b 8b ff ff       	call   c0007b06 <malloc>
c000effb:	89 c3                	mov    ebx,eax
c000effd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f000:	e8 71 ae 00 00       	call   c0019e76 <PCI::PCI()>
c000f005:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000f009:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f00d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f015:	89 04 24             	mov    DWORD PTR [esp],eax
c000f018:	e8 85 ce ff ff       	call   c000bea2 <Device::addChild(Device*)>
c000f01d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f021:	8b 00                	mov    eax,DWORD PTR [eax]
c000f023:	83 c0 08             	add    eax,0x8
c000f026:	8b 00                	mov    eax,DWORD PTR [eax]
c000f028:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f02d:	74 09                	je     c000f038 <ACPI::detectPCI()+0x13c>
c000f02f:	ba 01 00 00 00       	mov    edx,0x1
c000f034:	eb 0a                	jmp    c000f040 <ACPI::detectPCI()+0x144>
c000f036:	66 90                	xchg   ax,ax
c000f038:	ba 02 00 00 00       	mov    edx,0x2
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f048:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f050:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f054:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f058:	89 14 24             	mov    DWORD PTR [esp],edx
c000f05b:	ff d0                	call   eax
c000f05d:	e9 9a 00 00 00       	jmp    c000f0fc <ACPI::detectPCI()+0x200>
c000f062:	66 90                	xchg   ax,ax
c000f064:	c7 04 24 1f 06 02 c0 	mov    DWORD PTR [esp],0xc002061f
c000f06b:	e8 e1 10 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000f070:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000f078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f07c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f07f:	e8 82 8a ff ff       	call   c0007b06 <malloc>
c000f084:	89 c3                	mov    ebx,eax
c000f086:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f089:	e8 48 b9 00 00       	call   c001a9d6 <IDE::IDE()>
c000f08e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f092:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f096:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f09a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f09e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0a1:	e8 fc cd ff ff       	call   c000bea2 <Device::addChild(Device*)>
c000f0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0aa:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0b8:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0c5:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f0ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d4:	83 c0 08             	add    eax,0x8
c000f0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f0e1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f0f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0f5:	89 14 24             	mov    DWORD PTR [esp],edx
c000f0f8:	ff d0                	call   eax
c000f0fa:	66 90                	xchg   ax,ax
c000f0fc:	90                   	nop
c000f0fd:	83 c4 38             	add    esp,0x38
c000f100:	5b                   	pop    ebx
c000f101:	c3                   	ret    
c000f102:	66 90                	xchg   ax,ax

c000f104 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f104:	83 ec 2c             	sub    esp,0x2c
c000f107:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f10b:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f10f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f113:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f118:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f11d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f121:	89 04 24             	mov    DWORD PTR [esp],eax
c000f124:	e8 71 80 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f129:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f12d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f132:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f137:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f13f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f143:	89 04 24             	mov    DWORD PTR [esp],eax
c000f146:	e8 8d 81 ff ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f14b:	90                   	nop
c000f14c:	83 c4 2c             	add    esp,0x2c
c000f14f:	c3                   	ret    

c000f150 <ACPI::sleep()>:
c000f150:	83 ec 0c             	sub    esp,0xc
c000f153:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f158:	85 c0                	test   eax,eax
c000f15a:	74 08                	je     c000f164 <ACPI::sleep()+0x14>
c000f15c:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f161:	ff d0                	call   eax
c000f163:	90                   	nop
c000f164:	90                   	nop
c000f165:	83 c4 0c             	add    esp,0xc
c000f168:	c3                   	ret    
c000f169:	90                   	nop
c000f16a:	66 90                	xchg   ax,ax

c000f16c <ACPI::open(int, int, void*)>:
c000f16c:	53                   	push   ebx
c000f16d:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f173:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f17a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f17d:	e8 7a fd ff ff       	call   c000eefc <ACPI::detectPCI()>
c000f182:	c7 04 24 a4 05 02 c0 	mov    DWORD PTR [esp],0xc00205a4
c000f189:	e8 c3 0f 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000f18e:	c7 04 24 34 06 02 c0 	mov    DWORD PTR [esp],0xc0020634
c000f195:	e8 35 4a 00 00       	call   c0013bcf <Thr::loadKernelSymbolTable(char const*)>
c000f19a:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f1a2:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f1ad:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f1b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1b7:	e8 4a 89 ff ff       	call   c0007b06 <malloc>
c000f1bc:	89 c3                	mov    ebx,eax
c000f1be:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1c7:	c7 44 24 04 52 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020652
c000f1cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1d2:	e8 21 be ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f1d7:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f1de:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f1e6:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f1ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1f0:	e8 c1 be ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000f1f5:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f1fc:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f204:	75 12                	jne    c000f218 <ACPI::open(int, int, void*)+0xac>
c000f206:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f20d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f210:	e8 ff be ff ff       	call   c000b114 <File::close()>
c000f215:	eb 09                	jmp    c000f220 <ACPI::open(int, int, void*)+0xb4>
c000f217:	90                   	nop
c000f218:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f220:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f228:	74 1a                	je     c000f244 <ACPI::open(int, int, void*)+0xd8>
c000f22a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f231:	8b 00                	mov    eax,DWORD PTR [eax]
c000f233:	83 c0 08             	add    eax,0x8
c000f236:	8b 00                	mov    eax,DWORD PTR [eax]
c000f238:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f23f:	89 14 24             	mov    DWORD PTR [esp],edx
c000f242:	ff d0                	call   eax
c000f244:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f24c:	34 01                	xor    al,0x1
c000f24e:	74 40                	je     c000f290 <ACPI::open(int, int, void*)+0x124>
c000f250:	c7 04 24 70 06 02 c0 	mov    DWORD PTR [esp],0xc0020670
c000f257:	e8 f5 0e 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000f25c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f264:	c7 44 24 04 8b 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002068b
c000f26c:	c7 04 24 9c 06 02 c0 	mov    DWORD PTR [esp],0xc002069c
c000f273:	e8 db 3c 00 00       	call   c0012f53 <Reg::readIntWithDefault(char*, char*, int)>
c000f278:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f27f:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f286:	89 04 24             	mov    DWORD PTR [esp],eax
c000f289:	e8 b4 a5 ff ff       	call   c0009842 <Virt::setupPageSwapping(int)>
c000f28e:	66 90                	xchg   ax,ax
c000f290:	c7 04 24 f5 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6f5
c000f297:	e8 b5 0e 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000f29c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2a3:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f2ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2ae:	e8 05 cf ff ff       	call   c000c1b8 <getDevicesOfType(DeviceType)>
c000f2b3:	83 ec 04             	sub    esp,0x4
c000f2b6:	66 90                	xchg   ax,ax
c000f2b8:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c2:	e8 6d f8 00 00       	call   c001eb34 <LinkedList<Device>::isEmpty()>
c000f2c7:	34 01                	xor    al,0x1
c000f2c9:	0f 84 49 01 00 00    	je     c000f418 <ACPI::open(int, int, void*)+0x2ac>
c000f2cf:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2d9:	e8 72 f8 00 00       	call   c001eb50 <LinkedList<Device>::getFirstElement()>
c000f2de:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f2e5:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2ef:	e8 64 f8 00 00       	call   c001eb58 <LinkedList<Device>::removeFirst()>
c000f2f4:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f2fb:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f302:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f309:	b8 24 00 00 00       	mov    eax,0x24
c000f30e:	83 e0 fc             	and    eax,0xfffffffc
c000f311:	89 c3                	mov    ebx,eax
c000f313:	b8 00 00 00 00       	mov    eax,0x0
c000f318:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f31f:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f323:	83 c0 04             	add    eax,0x4
c000f326:	39 d8                	cmp    eax,ebx
c000f328:	72 ee                	jb     c000f318 <ACPI::open(int, int, void*)+0x1ac>
c000f32a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f32e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f332:	b8 24 00 00 00       	mov    eax,0x24
c000f337:	83 e0 fc             	and    eax,0xfffffffc
c000f33a:	89 c1                	mov    ecx,eax
c000f33c:	b8 00 00 00 00       	mov    eax,0x0
c000f341:	8d 76 00             	lea    esi,[esi+0x0]
c000f344:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f348:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f34b:	83 c0 04             	add    eax,0x4
c000f34e:	39 c8                	cmp    eax,ecx
c000f350:	72 f2                	jb     c000f344 <ACPI::open(int, int, void*)+0x1d8>
c000f352:	e8 fd af 00 00       	call   c001a354 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f357:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f35e:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f366:	0f 84 4c ff ff ff    	je     c000f2b8 <ACPI::open(int, int, void*)+0x14c>
c000f36c:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f377:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f37e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f381:	e8 80 87 ff ff       	call   c0007b06 <malloc>
c000f386:	89 c3                	mov    ebx,eax
c000f388:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f38d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f391:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f398:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f39c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f39f:	e8 54 bc ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f3a4:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000f3ab:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f3b2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3b5:	e8 64 bf ff ff       	call   c000b31e <File::exists()>
c000f3ba:	84 c0                	test   al,al
c000f3bc:	74 2a                	je     c000f3e8 <ACPI::open(int, int, void*)+0x27c>
c000f3be:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f3c6:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f3cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3d0:	e8 88 52 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000f3d5:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000f3dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f3e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3e3:	e8 b1 54 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000f3e8:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000f3f0:	0f 84 c2 fe ff ff    	je     c000f2b8 <ACPI::open(int, int, void*)+0x14c>
c000f3f6:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f3fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ff:	83 c0 08             	add    eax,0x8
c000f402:	8b 00                	mov    eax,DWORD PTR [eax]
c000f404:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000f40b:	89 14 24             	mov    DWORD PTR [esp],edx
c000f40e:	ff d0                	call   eax
c000f410:	e9 a3 fe ff ff       	jmp    c000f2b8 <ACPI::open(int, int, void*)+0x14c>
c000f415:	8d 76 00             	lea    esi,[esi+0x0]
c000f418:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f41f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f422:	e8 09 f7 00 00       	call   c001eb30 <LinkedList<Device>::~LinkedList()>
c000f427:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f42d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f435:	c7 04 24 a3 06 02 c0 	mov    DWORD PTR [esp],0xc00206a3
c000f43c:	e8 1c 52 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000f441:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000f445:	89 04 24             	mov    DWORD PTR [esp],eax
c000f448:	e8 4c 54 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000f44d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f452:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f459:	24 04                	and    al,0x4
c000f45b:	0f 84 0b 01 00 00    	je     c000f56c <ACPI::open(int, int, void*)+0x400>
c000f461:	c7 04 24 c0 06 02 c0 	mov    DWORD PTR [esp],0xc00206c0
c000f468:	e8 e4 0c 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c000f46d:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000f478:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000f47f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f482:	e8 7f 86 ff ff       	call   c0007b06 <malloc>
c000f487:	89 c3                	mov    ebx,eax
c000f489:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f48e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f492:	c7 44 24 04 dd 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206dd
c000f49a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f49d:	e8 56 bb ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f4a2:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000f4a9:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f4b1:	74 19                	je     c000f4cc <ACPI::open(int, int, void*)+0x360>
c000f4b3:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f4ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4bd:	e8 5c be ff ff       	call   c000b31e <File::exists()>
c000f4c2:	84 c0                	test   al,al
c000f4c4:	74 06                	je     c000f4cc <ACPI::open(int, int, void*)+0x360>
c000f4c6:	b0 01                	mov    al,0x1
c000f4c8:	eb 06                	jmp    c000f4d0 <ACPI::open(int, int, void*)+0x364>
c000f4ca:	66 90                	xchg   ax,ax
c000f4cc:	b0 00                	mov    al,0x0
c000f4ce:	66 90                	xchg   ax,ax
c000f4d0:	84 c0                	test   al,al
c000f4d2:	74 28                	je     c000f4fc <ACPI::open(int, int, void*)+0x390>
c000f4d4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f4dc:	c7 04 24 dd 06 02 c0 	mov    DWORD PTR [esp],0xc00206dd
c000f4e3:	e8 75 51 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c000f4e8:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000f4ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f4f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4f6:	e8 9e 53 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c000f4fb:	90                   	nop
c000f4fc:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f504:	74 26                	je     c000f52c <ACPI::open(int, int, void*)+0x3c0>
c000f506:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f50e:	74 1c                	je     c000f52c <ACPI::open(int, int, void*)+0x3c0>
c000f510:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f517:	8b 00                	mov    eax,DWORD PTR [eax]
c000f519:	83 c0 08             	add    eax,0x8
c000f51c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51e:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000f525:	89 14 24             	mov    DWORD PTR [esp],edx
c000f528:	ff d0                	call   eax
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f531:	c7 44 24 04 fa 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206fa
c000f539:	89 04 24             	mov    DWORD PTR [esp],eax
c000f53c:	e8 6b f2 ff ff       	call   c000e7ac <findDataTable(unsigned char*, char*)>
c000f541:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000f548:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000f550:	74 1a                	je     c000f56c <ACPI::open(int, int, void*)+0x400>
c000f552:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000f559:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f55d:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f564:	89 04 24             	mov    DWORD PTR [esp],eax
c000f567:	e8 98 fb ff ff       	call   c000f104 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f56c:	b8 00 00 00 00       	mov    eax,0x0
c000f571:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000f577:	5b                   	pop    ebx
c000f578:	c3                   	ret    
c000f579:	90                   	nop

c000f57a <CPU::close(int, int, void*)>:
c000f57a:	31 c0                	xor    eax,eax
c000f57c:	c3                   	ret    
c000f57d:	90                   	nop

c000f57e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f57e:	60                   	pusha  
c000f57f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f58b:	9c                   	pushf  
c000f58c:	fa                   	cli    
c000f58d:	0f 09                	wbinvd 
c000f58f:	0f 30                	wrmsr  
c000f591:	9d                   	popf   
c000f592:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f596:	89 02                	mov    DWORD PTR [edx],eax
c000f598:	61                   	popa   
c000f599:	c3                   	ret    

c000f59a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f59a:	60                   	pusha  
c000f59b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f59f:	9c                   	pushf  
c000f5a0:	fa                   	cli    
c000f5a1:	0f 09                	wbinvd 
c000f5a3:	31 c0                	xor    eax,eax
c000f5a5:	31 d2                	xor    edx,edx
c000f5a7:	0f 32                	rdmsr  
c000f5a9:	9d                   	popf   
c000f5aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5ae:	89 02                	mov    DWORD PTR [edx],eax
c000f5b0:	61                   	popa   
c000f5b1:	c3                   	ret    

c000f5b2 <CPU::AMD_K6_writeback(int, int, int)>:
c000f5b2:	56                   	push   esi
c000f5b3:	53                   	push   ebx
c000f5b4:	83 ec 10             	sub    esp,0x10
c000f5b7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5c0:	75 5d                	jne    c000f61f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5c2:	83 f8 08             	cmp    eax,0x8
c000f5c5:	75 09                	jne    c000f5d0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5c7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5cc:	7e 13                	jle    c000f5e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5ce:	eb 30                	jmp    c000f600 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5d0:	83 f8 06             	cmp    eax,0x6
c000f5d3:	7c 4a                	jl     c000f61f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5d5:	83 f8 07             	cmp    eax,0x7
c000f5d8:	7e 07                	jle    c000f5e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5da:	83 f8 09             	cmp    eax,0x9
c000f5dd:	74 21                	je     c000f600 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5df:	eb 3e                	jmp    c000f61f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5e1:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f5e7:	89 e6                	mov    esi,esp
c000f5e9:	56                   	push   esi
c000f5ea:	68 82 00 00 c0       	push   0xc0000082
c000f5ef:	e8 a6 ff ff ff       	call   c000f59a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5f4:	c1 eb 15             	shr    ebx,0x15
c000f5f7:	56                   	push   esi
c000f5f8:	83 e3 7e             	and    ebx,0x7e
c000f5fb:	6a 00                	push   0x0
c000f5fd:	53                   	push   ebx
c000f5fe:	eb 12                	jmp    c000f612 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f600:	89 e3                	mov    ebx,esp
c000f602:	53                   	push   ebx
c000f603:	68 82 00 00 c0       	push   0xc0000082
c000f608:	e8 8d ff ff ff       	call   c000f59a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f60d:	53                   	push   ebx
c000f60e:	6a 00                	push   0x0
c000f610:	6a 00                	push   0x0
c000f612:	68 82 00 00 c0       	push   0xc0000082
c000f617:	e8 62 ff ff ff       	call   c000f57e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f61c:	83 c4 18             	add    esp,0x18
c000f61f:	83 c4 10             	add    esp,0x10
c000f622:	5b                   	pop    ebx
c000f623:	5e                   	pop    esi
c000f624:	c3                   	ret    
c000f625:	90                   	nop

c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f626:	55                   	push   ebp
c000f627:	57                   	push   edi
c000f628:	56                   	push   esi
c000f629:	53                   	push   ebx
c000f62a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f62e:	39 05 10 1c 02 c0    	cmp    DWORD PTR ds:0xc0021c10,eax
c000f634:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f638:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f63c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f640:	75 23                	jne    c000f665 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f642:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f647:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f64b:	89 06                	mov    DWORD PTR [esi],eax
c000f64d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f652:	89 07                	mov    DWORD PTR [edi],eax
c000f654:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f659:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f65c:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f661:	89 02                	mov    DWORD PTR [edx],eax
c000f663:	eb 3f                	jmp    c000f6a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f665:	31 c9                	xor    ecx,ecx
c000f667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f66b:	0f a2                	cpuid  
c000f66d:	89 06                	mov    DWORD PTR [esi],eax
c000f66f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f673:	89 1f                	mov    DWORD PTR [edi],ebx
c000f675:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f678:	89 10                	mov    DWORD PTR [eax],edx
c000f67a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f67e:	a3 10 1c 02 c0       	mov    ds:0xc0021c10,eax
c000f683:	8b 06                	mov    eax,DWORD PTR [esi]
c000f685:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f68a:	8b 07                	mov    eax,DWORD PTR [edi]
c000f68c:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f691:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f694:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f69d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69f:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6a4:	5b                   	pop    ebx
c000f6a5:	5e                   	pop    esi
c000f6a6:	5f                   	pop    edi
c000f6a7:	5d                   	pop    ebp
c000f6a8:	c3                   	ret    
c000f6a9:	90                   	nop

c000f6aa <CPU::cpuidCheckEDX(unsigned int)>:
c000f6aa:	83 ec 10             	sub    esp,0x10
c000f6ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b1:	50                   	push   eax
c000f6b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b6:	50                   	push   eax
c000f6b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6bb:	50                   	push   eax
c000f6bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6c0:	50                   	push   eax
c000f6c1:	6a 01                	push   0x1
c000f6c3:	e8 5e ff ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6cc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6d0:	0f 95 c0             	setne  al
c000f6d3:	83 c4 24             	add    esp,0x24
c000f6d6:	c3                   	ret    
c000f6d7:	90                   	nop

c000f6d8 <CPU::cpuidCheckECX(unsigned int)>:
c000f6d8:	83 ec 10             	sub    esp,0x10
c000f6db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6df:	50                   	push   eax
c000f6e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e4:	50                   	push   eax
c000f6e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e9:	50                   	push   eax
c000f6ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ee:	50                   	push   eax
c000f6ef:	6a 01                	push   0x1
c000f6f1:	e8 30 ff ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6fe:	0f 95 c0             	setne  al
c000f701:	83 c4 24             	add    esp,0x24
c000f704:	c3                   	ret    
c000f705:	90                   	nop

c000f706 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f706:	83 ec 10             	sub    esp,0x10
c000f709:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70d:	50                   	push   eax
c000f70e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f712:	50                   	push   eax
c000f713:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f717:	50                   	push   eax
c000f718:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71c:	50                   	push   eax
c000f71d:	6a 07                	push   0x7
c000f71f:	e8 02 ff ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f724:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f728:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f72c:	0f 95 c0             	setne  al
c000f72f:	83 c4 24             	add    esp,0x24
c000f732:	c3                   	ret    
c000f733:	90                   	nop

c000f734 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f734:	83 ec 10             	sub    esp,0x10
c000f737:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73b:	50                   	push   eax
c000f73c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f740:	50                   	push   eax
c000f741:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f745:	50                   	push   eax
c000f746:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74a:	50                   	push   eax
c000f74b:	6a 07                	push   0x7
c000f74d:	e8 d4 fe ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f756:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f75a:	0f 95 c0             	setne  al
c000f75d:	83 c4 24             	add    esp,0x24
c000f760:	c3                   	ret    
c000f761:	90                   	nop

c000f762 <CPU::CPU()>:
c000f762:	83 ec 1c             	sub    esp,0x1c
c000f765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f769:	c7 44 24 04 1d 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002081d
c000f771:	89 04 24             	mov    DWORD PTR [esp],eax
c000f774:	e8 c1 c8 ff ff       	call   c000c03a <Device::Device(char const*)>
c000f779:	ba a4 08 02 c0       	mov    edx,0xc00208a4
c000f77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f782:	89 10                	mov    DWORD PTR [eax],edx
c000f784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f788:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f796:	05 78 01 00 00       	add    eax,0x178
c000f79b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f79e:	e8 ff 7b ff ff       	call   c00073a2 <GDT::GDT()>
c000f7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7a7:	05 7c 09 00 00       	add    eax,0x97c
c000f7ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7af:	e8 2c 7e ff ff       	call   c00075e0 <IDT::IDT()>
c000f7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7b8:	05 7c 11 00 00       	add    eax,0x117c
c000f7bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7c0:	e8 ab 97 ff ff       	call   c0008f70 <TSS::TSS()>
c000f7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c9:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d4:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f7de:	90                   	nop
c000f7df:	83 c4 1c             	add    esp,0x1c
c000f7e2:	c3                   	ret    
c000f7e3:	90                   	nop

c000f7e4 <CPU::displayFeatures()>:
c000f7e4:	c3                   	ret    
c000f7e5:	90                   	nop

c000f7e6 <CPU::detectFeatures()>:
c000f7e6:	55                   	push   ebp
c000f7e7:	57                   	push   edi
c000f7e8:	56                   	push   esi
c000f7e9:	53                   	push   ebx
c000f7ea:	83 ec 30             	sub    esp,0x30
c000f7ed:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f7f1:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f7fb:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f801:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f808:	6a 0d                	push   0xd
c000f80a:	6a 00                	push   0x0
c000f80c:	55                   	push   ebp
c000f80d:	e8 6e 0d ff ff       	call   c0000580 <memset>
c000f812:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f817:	83 c4 10             	add    esp,0x10
c000f81a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f821:	0f 84 ba 05 00 00    	je     c000fde1 <CPU::detectFeatures()+0x5fb>
c000f827:	83 ec 0c             	sub    esp,0xc
c000f82a:	89 ef                	mov    edi,ebp
c000f82c:	6a 10                	push   0x10
c000f82e:	e8 77 fe ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f833:	24 01                	and    al,0x1
c000f835:	00 c0                	add    al,al
c000f837:	88 c2                	mov    dl,al
c000f839:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f83f:	24 fd                	and    al,0xfd
c000f841:	08 d0                	or     al,dl
c000f843:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f849:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f850:	e8 55 fe ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f855:	24 01                	and    al,0x1
c000f857:	c0 e0 02             	shl    al,0x2
c000f85a:	88 c2                	mov    dl,al
c000f85c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f862:	24 fb                	and    al,0xfb
c000f864:	08 d0                	or     al,dl
c000f866:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f86c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f873:	e8 32 fe ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f878:	24 01                	and    al,0x1
c000f87a:	c0 e0 03             	shl    al,0x3
c000f87d:	88 c2                	mov    dl,al
c000f87f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f885:	24 f7                	and    al,0xf7
c000f887:	08 d0                	or     al,dl
c000f889:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f88f:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f896:	e8 0f fe ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f89b:	24 01                	and    al,0x1
c000f89d:	c0 e0 04             	shl    al,0x4
c000f8a0:	88 c2                	mov    dl,al
c000f8a2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a8:	24 ef                	and    al,0xef
c000f8aa:	08 d0                	or     al,dl
c000f8ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b2:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8b9:	e8 ec fd ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f8be:	24 01                	and    al,0x1
c000f8c0:	c0 e0 05             	shl    al,0x5
c000f8c3:	88 c2                	mov    dl,al
c000f8c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8cb:	24 df                	and    al,0xdf
c000f8cd:	08 d0                	or     al,dl
c000f8cf:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f8dc:	e8 c9 fd ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f8e1:	24 01                	and    al,0x1
c000f8e3:	00 c0                	add    al,al
c000f8e5:	88 c2                	mov    dl,al
c000f8e7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8ed:	24 fd                	and    al,0xfd
c000f8ef:	08 d0                	or     al,dl
c000f8f1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8f7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f8fe:	e8 a7 fd ff ff       	call   c000f6aa <CPU::cpuidCheckEDX(unsigned int)>
c000f903:	24 01                	and    al,0x1
c000f905:	c0 e0 06             	shl    al,0x6
c000f908:	88 c2                	mov    dl,al
c000f90a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f910:	24 bf                	and    al,0xbf
c000f912:	08 d0                	or     al,dl
c000f914:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f91a:	58                   	pop    eax
c000f91b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f91f:	50                   	push   eax
c000f920:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f924:	50                   	push   eax
c000f925:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f929:	56                   	push   esi
c000f92a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f92e:	50                   	push   eax
c000f92f:	6a 00                	push   0x0
c000f931:	e8 f0 fc ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f936:	b8 04 00 00 00       	mov    eax,0x4
c000f93b:	89 c1                	mov    ecx,eax
c000f93d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f93f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f945:	89 c1                	mov    ecx,eax
c000f947:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f94b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f94d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f953:	89 c1                	mov    ecx,eax
c000f955:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f959:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f95b:	83 c4 18             	add    esp,0x18
c000f95e:	68 2c 07 02 c0       	push   0xc002072c
c000f963:	55                   	push   ebp
c000f964:	e8 d7 0e ff ff       	call   c0000840 <strcmp>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	85 c0                	test   eax,eax
c000f96e:	75 0f                	jne    c000f97f <CPU::detectFeatures()+0x199>
c000f970:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f97a:	e9 22 02 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000f97f:	50                   	push   eax
c000f980:	50                   	push   eax
c000f981:	68 39 07 02 c0       	push   0xc0020739
c000f986:	55                   	push   ebp
c000f987:	e8 b4 0e ff ff       	call   c0000840 <strcmp>
c000f98c:	83 c4 10             	add    esp,0x10
c000f98f:	85 c0                	test   eax,eax
c000f991:	74 dd                	je     c000f970 <CPU::detectFeatures()+0x18a>
c000f993:	50                   	push   eax
c000f994:	50                   	push   eax
c000f995:	68 46 07 02 c0       	push   0xc0020746
c000f99a:	55                   	push   ebp
c000f99b:	e8 a0 0e ff ff       	call   c0000840 <strcmp>
c000f9a0:	83 c4 10             	add    esp,0x10
c000f9a3:	85 c0                	test   eax,eax
c000f9a5:	74 2a                	je     c000f9d1 <CPU::detectFeatures()+0x1eb>
c000f9a7:	50                   	push   eax
c000f9a8:	50                   	push   eax
c000f9a9:	68 53 07 02 c0       	push   0xc0020753
c000f9ae:	55                   	push   ebp
c000f9af:	e8 8c 0e ff ff       	call   c0000840 <strcmp>
c000f9b4:	83 c4 10             	add    esp,0x10
c000f9b7:	85 c0                	test   eax,eax
c000f9b9:	74 16                	je     c000f9d1 <CPU::detectFeatures()+0x1eb>
c000f9bb:	50                   	push   eax
c000f9bc:	50                   	push   eax
c000f9bd:	68 60 07 02 c0       	push   0xc0020760
c000f9c2:	55                   	push   ebp
c000f9c3:	e8 78 0e ff ff       	call   c0000840 <strcmp>
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	74 48                	je     c000fa17 <CPU::detectFeatures()+0x231>
c000f9cf:	eb 0f                	jmp    c000f9e0 <CPU::detectFeatures()+0x1fa>
c000f9d1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f9db:	e9 c1 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000f9e0:	50                   	push   eax
c000f9e1:	50                   	push   eax
c000f9e2:	68 6d 07 02 c0       	push   0xc002076d
c000f9e7:	55                   	push   ebp
c000f9e8:	e8 53 0e ff ff       	call   c0000840 <strcmp>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	85 c0                	test   eax,eax
c000f9f2:	74 23                	je     c000fa17 <CPU::detectFeatures()+0x231>
c000f9f4:	57                   	push   edi
c000f9f5:	57                   	push   edi
c000f9f6:	68 7a 07 02 c0       	push   0xc002077a
c000f9fb:	55                   	push   ebp
c000f9fc:	e8 3f 0e ff ff       	call   c0000840 <strcmp>
c000fa01:	83 c4 10             	add    esp,0x10
c000fa04:	85 c0                	test   eax,eax
c000fa06:	75 1e                	jne    c000fa26 <CPU::detectFeatures()+0x240>
c000fa08:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa12:	e9 8a 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fa17:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa21:	e9 7b 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fa26:	56                   	push   esi
c000fa27:	56                   	push   esi
c000fa28:	68 87 07 02 c0       	push   0xc0020787
c000fa2d:	55                   	push   ebp
c000fa2e:	e8 0d 0e ff ff       	call   c0000840 <strcmp>
c000fa33:	83 c4 10             	add    esp,0x10
c000fa36:	85 c0                	test   eax,eax
c000fa38:	75 0f                	jne    c000fa49 <CPU::detectFeatures()+0x263>
c000fa3a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa44:	e9 58 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fa49:	51                   	push   ecx
c000fa4a:	51                   	push   ecx
c000fa4b:	68 46 07 02 c0       	push   0xc0020746
c000fa50:	55                   	push   ebp
c000fa51:	e8 ea 0d ff ff       	call   c0000840 <strcmp>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	85 c0                	test   eax,eax
c000fa5b:	75 0f                	jne    c000fa6c <CPU::detectFeatures()+0x286>
c000fa5d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa67:	e9 35 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fa6c:	52                   	push   edx
c000fa6d:	52                   	push   edx
c000fa6e:	68 94 07 02 c0       	push   0xc0020794
c000fa73:	55                   	push   ebp
c000fa74:	e8 c7 0d ff ff       	call   c0000840 <strcmp>
c000fa79:	83 c4 10             	add    esp,0x10
c000fa7c:	85 c0                	test   eax,eax
c000fa7e:	75 0f                	jne    c000fa8f <CPU::detectFeatures()+0x2a9>
c000fa80:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa8a:	e9 12 01 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fa8f:	50                   	push   eax
c000fa90:	50                   	push   eax
c000fa91:	68 a1 07 02 c0       	push   0xc00207a1
c000fa96:	55                   	push   ebp
c000fa97:	e8 a4 0d ff ff       	call   c0000840 <strcmp>
c000fa9c:	83 c4 10             	add    esp,0x10
c000fa9f:	85 c0                	test   eax,eax
c000faa1:	75 0f                	jne    c000fab2 <CPU::detectFeatures()+0x2cc>
c000faa3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000faad:	e9 ef 00 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fab2:	50                   	push   eax
c000fab3:	50                   	push   eax
c000fab4:	68 ae 07 02 c0       	push   0xc00207ae
c000fab9:	55                   	push   ebp
c000faba:	e8 81 0d ff ff       	call   c0000840 <strcmp>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	85 c0                	test   eax,eax
c000fac4:	75 0f                	jne    c000fad5 <CPU::detectFeatures()+0x2ef>
c000fac6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fad0:	e9 cc 00 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fad5:	50                   	push   eax
c000fad6:	50                   	push   eax
c000fad7:	68 bb 07 02 c0       	push   0xc00207bb
c000fadc:	55                   	push   ebp
c000fadd:	e8 5e 0d ff ff       	call   c0000840 <strcmp>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	85 c0                	test   eax,eax
c000fae7:	75 0f                	jne    c000faf8 <CPU::detectFeatures()+0x312>
c000fae9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000faf3:	e9 a9 00 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000faf8:	50                   	push   eax
c000faf9:	50                   	push   eax
c000fafa:	68 c8 07 02 c0       	push   0xc00207c8
c000faff:	55                   	push   ebp
c000fb00:	e8 3b 0d ff ff       	call   c0000840 <strcmp>
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	85 c0                	test   eax,eax
c000fb0a:	75 0f                	jne    c000fb1b <CPU::detectFeatures()+0x335>
c000fb0c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb16:	e9 86 00 00 00       	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fb1b:	50                   	push   eax
c000fb1c:	50                   	push   eax
c000fb1d:	68 d5 07 02 c0       	push   0xc00207d5
c000fb22:	55                   	push   ebp
c000fb23:	e8 18 0d ff ff       	call   c0000840 <strcmp>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	85 c0                	test   eax,eax
c000fb2d:	75 0c                	jne    c000fb3b <CPU::detectFeatures()+0x355>
c000fb2f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb39:	eb 66                	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fb3b:	50                   	push   eax
c000fb3c:	50                   	push   eax
c000fb3d:	68 e2 07 02 c0       	push   0xc00207e2
c000fb42:	55                   	push   ebp
c000fb43:	e8 f8 0c ff ff       	call   c0000840 <strcmp>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	85 c0                	test   eax,eax
c000fb4d:	75 0c                	jne    c000fb5b <CPU::detectFeatures()+0x375>
c000fb4f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb59:	eb 46                	jmp    c000fba1 <CPU::detectFeatures()+0x3bb>
c000fb5b:	57                   	push   edi
c000fb5c:	57                   	push   edi
c000fb5d:	68 ef 07 02 c0       	push   0xc00207ef
c000fb62:	55                   	push   ebp
c000fb63:	e8 d8 0c ff ff       	call   c0000840 <strcmp>
c000fb68:	83 c4 10             	add    esp,0x10
c000fb6b:	85 c0                	test   eax,eax
c000fb6d:	74 e0                	je     c000fb4f <CPU::detectFeatures()+0x369>
c000fb6f:	56                   	push   esi
c000fb70:	56                   	push   esi
c000fb71:	68 fc 07 02 c0       	push   0xc00207fc
c000fb76:	55                   	push   ebp
c000fb77:	e8 c4 0c ff ff       	call   c0000840 <strcmp>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	85 c0                	test   eax,eax
c000fb81:	74 cc                	je     c000fb4f <CPU::detectFeatures()+0x369>
c000fb83:	51                   	push   ecx
c000fb84:	51                   	push   ecx
c000fb85:	68 09 08 02 c0       	push   0xc0020809
c000fb8a:	55                   	push   ebp
c000fb8b:	e8 b0 0c ff ff       	call   c0000840 <strcmp>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	85 c0                	test   eax,eax
c000fb95:	74 b8                	je     c000fb4f <CPU::detectFeatures()+0x369>
c000fb97:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fba1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fba6:	0f 86 ac 00 00 00    	jbe    c000fc58 <CPU::detectFeatures()+0x472>
c000fbac:	83 ec 0c             	sub    esp,0xc
c000fbaf:	68 80 00 00 00       	push   0x80
c000fbb4:	e8 4d fb ff ff       	call   c000f706 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbb9:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fbbf:	80 e2 bf             	and    dl,0xbf
c000fbc2:	24 01                	and    al,0x1
c000fbc4:	c0 e0 06             	shl    al,0x6
c000fbc7:	08 c2                	or     dl,al
c000fbc9:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c000fbcf:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fbd6:	e8 2b fb ff ff       	call   c000f706 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbdb:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fbe1:	80 e2 ef             	and    dl,0xef
c000fbe4:	24 01                	and    al,0x1
c000fbe6:	c0 e0 04             	shl    al,0x4
c000fbe9:	08 c2                	or     dl,al
c000fbeb:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fbf1:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fbf8:	e8 09 fb ff ff       	call   c000f706 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbfd:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fc03:	80 e2 7f             	and    dl,0x7f
c000fc06:	c0 e0 07             	shl    al,0x7
c000fc09:	08 d0                	or     al,dl
c000fc0b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc11:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc18:	e8 17 fb ff ff       	call   c000f734 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc1d:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fc23:	80 e2 f7             	and    dl,0xf7
c000fc26:	24 01                	and    al,0x1
c000fc28:	c0 e0 03             	shl    al,0x3
c000fc2b:	08 c2                	or     dl,al
c000fc2d:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fc33:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc3a:	e8 f5 fa ff ff       	call   c000f734 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc3f:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c000fc45:	83 c4 10             	add    esp,0x10
c000fc48:	80 e2 fb             	and    dl,0xfb
c000fc4b:	24 01                	and    al,0x1
c000fc4d:	c0 e0 02             	shl    al,0x2
c000fc50:	08 c2                	or     dl,al
c000fc52:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c000fc58:	83 ec 0c             	sub    esp,0xc
c000fc5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc5f:	50                   	push   eax
c000fc60:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc64:	50                   	push   eax
c000fc65:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc69:	56                   	push   esi
c000fc6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc6e:	50                   	push   eax
c000fc6f:	6a 01                	push   0x1
c000fc71:	e8 b0 f9 ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc7a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fc80:	88 c1                	mov    cl,al
c000fc82:	80 e1 0f             	and    cl,0xf
c000fc85:	80 e2 f0             	and    dl,0xf0
c000fc88:	08 ca                	or     dl,cl
c000fc8a:	88 c1                	mov    cl,al
c000fc8c:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc92:	c0 e9 04             	shr    cl,0x4
c000fc95:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c000fc99:	0f b6 d1             	movzx  edx,cl
c000fc9c:	89 d1                	mov    ecx,edx
c000fc9e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fca4:	c1 e1 06             	shl    ecx,0x6
c000fca7:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fcad:	09 ca                	or     edx,ecx
c000fcaf:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcb6:	89 c2                	mov    edx,eax
c000fcb8:	c1 ea 08             	shr    edx,0x8
c000fcbb:	88 d1                	mov    cl,dl
c000fcbd:	c0 e2 06             	shl    dl,0x6
c000fcc0:	80 e1 0f             	and    cl,0xf
c000fcc3:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c000fcc7:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fccd:	80 e1 3f             	and    cl,0x3f
c000fcd0:	08 ca                	or     dl,cl
c000fcd2:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fcd8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fcde:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c000fce2:	83 c4 20             	add    esp,0x20
c000fce5:	80 e2 c0             	and    dl,0xc0
c000fce8:	c0 e9 02             	shr    cl,0x2
c000fceb:	08 ca                	or     dl,cl
c000fced:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fcf3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fcf9:	89 c2                	mov    edx,eax
c000fcfb:	c1 ea 0c             	shr    edx,0xc
c000fcfe:	80 e2 03             	and    dl,0x3
c000fd01:	c0 e2 04             	shl    dl,0x4
c000fd04:	80 e1 cf             	and    cl,0xcf
c000fd07:	08 ca                	or     dl,cl
c000fd09:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c000fd0e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd14:	74 07                	je     c000fd1d <CPU::detectFeatures()+0x537>
c000fd16:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd1b:	75 5f                	jne    c000fd7c <CPU::detectFeatures()+0x596>
c000fd1d:	89 c2                	mov    edx,eax
c000fd1f:	c1 ea 10             	shr    edx,0x10
c000fd22:	c0 e2 04             	shl    dl,0x4
c000fd25:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c000fd29:	0f b6 d2             	movzx  edx,dl
c000fd2c:	89 d7                	mov    edi,edx
c000fd2e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd34:	c1 e7 06             	shl    edi,0x6
c000fd37:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd3d:	09 fa                	or     edx,edi
c000fd3f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd46:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd4b:	75 2f                	jne    c000fd7c <CPU::detectFeatures()+0x596>
c000fd4d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd53:	c1 e8 14             	shr    eax,0x14
c000fd56:	04 0f                	add    al,0xf
c000fd58:	88 c1                	mov    cl,al
c000fd5a:	c0 e1 06             	shl    cl,0x6
c000fd5d:	c0 e8 02             	shr    al,0x2
c000fd60:	80 e2 3f             	and    dl,0x3f
c000fd63:	08 ca                	or     dl,cl
c000fd65:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd6b:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd71:	80 e2 c0             	and    dl,0xc0
c000fd74:	08 d0                	or     al,dl
c000fd76:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fd7c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fd83:	83 ec 0c             	sub    esp,0xc
c000fd86:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd8a:	50                   	push   eax
c000fd8b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fd8f:	55                   	push   ebp
c000fd90:	56                   	push   esi
c000fd91:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fd95:	57                   	push   edi
c000fd96:	68 00 00 00 80       	push   0x80000000
c000fd9b:	e8 86 f8 ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fdab:	76 22                	jbe    c000fdcf <CPU::detectFeatures()+0x5e9>
c000fdad:	83 ec 0c             	sub    esp,0xc
c000fdb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdb4:	50                   	push   eax
c000fdb5:	55                   	push   ebp
c000fdb6:	56                   	push   esi
c000fdb7:	57                   	push   edi
c000fdb8:	68 01 00 00 80       	push   0x80000001
c000fdbd:	e8 64 f8 ff ff       	call   c000f626 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdc2:	83 c4 20             	add    esp,0x20
c000fdc5:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fdcf:	52                   	push   edx
c000fdd0:	52                   	push   edx
c000fdd1:	68 15 08 02 c0       	push   0xc0020815
c000fdd6:	53                   	push   ebx
c000fdd7:	e8 50 c2 ff ff       	call   c000c02c <Device::setName(char const*)>
c000fddc:	83 c4 10             	add    esp,0x10
c000fddf:	eb 64                	jmp    c000fe45 <CPU::detectFeatures()+0x65f>
c000fde1:	50                   	push   eax
c000fde2:	50                   	push   eax
c000fde3:	68 7a 07 02 c0       	push   0xc002077a
c000fde8:	55                   	push   ebp
c000fde9:	e8 32 09 ff ff       	call   c0000720 <strcpy>
c000fdee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fdf8:	e8 c6 03 ff ff       	call   c00001c3 <is486>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	85 c0                	test   eax,eax
c000fe02:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe08:	74 1c                	je     c000fe26 <CPU::detectFeatures()+0x640>
c000fe0a:	0c 07                	or     al,0x7
c000fe0c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe12:	0f 20 c0             	mov    eax,cr0
c000fe15:	83 e0 14             	and    eax,0x14
c000fe18:	83 f8 04             	cmp    eax,0x4
c000fe1b:	75 0d                	jne    c000fe2a <CPU::detectFeatures()+0x644>
c000fe1d:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fe24:	eb 1f                	jmp    c000fe45 <CPU::detectFeatures()+0x65f>
c000fe26:	24 f8                	and    al,0xf8
c000fe28:	eb e2                	jmp    c000fe0c <CPU::detectFeatures()+0x626>
c000fe2a:	e8 6f 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe2f:	24 01                	and    al,0x1
c000fe31:	00 c0                	add    al,al
c000fe33:	88 c2                	mov    dl,al
c000fe35:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe3b:	24 fd                	and    al,0xfd
c000fe3d:	08 d0                	or     al,dl
c000fe3f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe45:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe4c:	74 0e                	je     c000fe5c <CPU::detectFeatures()+0x676>
c000fe4e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fe53:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fe5a:	eb 1f                	jmp    c000fe7b <CPU::detectFeatures()+0x695>
c000fe5c:	e8 3d 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe61:	24 01                	and    al,0x1
c000fe63:	00 c0                	add    al,al
c000fe65:	88 c2                	mov    dl,al
c000fe67:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe6d:	24 fd                	and    al,0xfd
c000fe6f:	08 d0                	or     al,dl
c000fe71:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe77:	24 02                	and    al,0x2
c000fe79:	75 d3                	jne    c000fe4e <CPU::detectFeatures()+0x668>
c000fe7b:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fe82:	83 c4 2c             	add    esp,0x2c
c000fe85:	5b                   	pop    ebx
c000fe86:	5e                   	pop    esi
c000fe87:	5f                   	pop    edi
c000fe88:	5d                   	pop    ebp
c000fe89:	c3                   	ret    

c000fe8a <CPU::setupSMEP()>:
c000fe8a:	0f 20 e0             	mov    eax,cr4
c000fe8d:	0d 00 00 10 00       	or     eax,0x100000
c000fe92:	0f 22 e0             	mov    cr4,eax
c000fe95:	c3                   	ret    

c000fe96 <CPU::setupUMIP()>:
c000fe96:	0f 20 e0             	mov    eax,cr4
c000fe99:	80 cc 08             	or     ah,0x8
c000fe9c:	0f 22 e0             	mov    cr4,eax
c000fe9f:	c3                   	ret    

c000fea0 <CPU::setupTSC()>:
c000fea0:	0f 20 e0             	mov    eax,cr4
c000fea3:	83 c8 04             	or     eax,0x4
c000fea6:	0f 22 e0             	mov    cr4,eax
c000fea9:	c3                   	ret    

c000feaa <CPU::setupLargePages()>:
c000feaa:	0f 20 e0             	mov    eax,cr4
c000fead:	83 c8 10             	or     eax,0x10
c000feb0:	0f 22 e0             	mov    cr4,eax
c000feb3:	c3                   	ret    

c000feb4 <CPU::setupPAT()>:
c000feb4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000feb9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fec0:	74 2c                	je     c000feee <CPU::setupPAT()+0x3a>
c000fec2:	53                   	push   ebx
c000fec3:	83 ec 10             	sub    esp,0x10
c000fec6:	68 77 02 00 00       	push   0x277
c000fecb:	50                   	push   eax
c000fecc:	e8 ef 71 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c000fed1:	83 e2 f8             	and    edx,0xfffffff8
c000fed4:	83 ca 01             	or     edx,0x1
c000fed7:	52                   	push   edx
c000fed8:	50                   	push   eax
c000fed9:	68 77 02 00 00       	push   0x277
c000fede:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fee4:	e8 ff 71 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fee9:	83 c4 28             	add    esp,0x28
c000feec:	5b                   	pop    ebx
c000feed:	c3                   	ret    
c000feee:	c3                   	ret    
c000feef:	90                   	nop

c000fef0 <CPU::setupMTRR()>:
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <CPU::setupGlobalPages()>:
c000fef2:	0f 20 e0             	mov    eax,cr4
c000fef5:	0c 80                	or     al,0x80
c000fef7:	0f 22 e0             	mov    cr4,eax
c000fefa:	c3                   	ret    
c000fefb:	90                   	nop

c000fefc <CPU::allowUsermodeDataAccess()>:
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff07:	74 03                	je     c000ff0c <CPU::allowUsermodeDataAccess()+0x10>
c000ff09:	0f 01 cb             	stac   
c000ff0c:	c3                   	ret    
c000ff0d:	90                   	nop

c000ff0e <CPU::prohibitUsermodeDataAccess()>:
c000ff0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff12:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff19:	74 03                	je     c000ff1e <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff1b:	0f 01 ca             	clac   
c000ff1e:	c3                   	ret    
c000ff1f:	90                   	nop

c000ff20 <CPU::setupSMAP()>:
c000ff20:	0f 20 e0             	mov    eax,cr4
c000ff23:	0d 00 00 20 00       	or     eax,0x200000
c000ff28:	0f 22 e0             	mov    cr4,eax
c000ff2b:	eb e1                	jmp    c000ff0e <CPU::prohibitUsermodeDataAccess()>
c000ff2d:	90                   	nop

c000ff2e <CPU::setupFeatures()>:
c000ff2e:	53                   	push   ebx
c000ff2f:	83 ec 08             	sub    esp,0x8
c000ff32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff36:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff3d:	74 18                	je     c000ff57 <CPU::setupFeatures()+0x29>
c000ff3f:	83 ec 0c             	sub    esp,0xc
c000ff42:	68 21 08 02 c0       	push   0xc0020821
c000ff47:	e8 2a ab ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ff4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff4f:	e8 42 ff ff ff       	call   c000fe96 <CPU::setupUMIP()>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ff5e:	74 18                	je     c000ff78 <CPU::setupFeatures()+0x4a>
c000ff60:	83 ec 0c             	sub    esp,0xc
c000ff63:	68 2b 08 02 c0       	push   0xc002082b
c000ff68:	e8 09 ab ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ff6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff70:	e8 2b ff ff ff       	call   c000fea0 <CPU::setupTSC()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ff7f:	74 18                	je     c000ff99 <CPU::setupFeatures()+0x6b>
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	68 34 08 02 c0       	push   0xc0020834
c000ff89:	e8 e8 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ff8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff91:	e8 14 ff ff ff       	call   c000feaa <CPU::setupLargePages()>
c000ff96:	83 c4 10             	add    esp,0x10
c000ff99:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ffa0:	74 18                	je     c000ffba <CPU::setupFeatures()+0x8c>
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	68 3d 08 02 c0       	push   0xc002083d
c000ffaa:	e8 c7 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ffaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb2:	e8 3b ff ff ff       	call   c000fef2 <CPU::setupGlobalPages()>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ffc1:	74 18                	je     c000ffdb <CPU::setupFeatures()+0xad>
c000ffc3:	83 ec 0c             	sub    esp,0xc
c000ffc6:	68 4f 08 02 c0       	push   0xc002084f
c000ffcb:	e8 a6 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ffd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd3:	e8 dc fe ff ff       	call   c000feb4 <CPU::setupPAT()>
c000ffd8:	83 c4 10             	add    esp,0x10
c000ffdb:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ffe2:	74 11                	je     c000fff5 <CPU::setupFeatures()+0xc7>
c000ffe4:	c7 44 24 10 58 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020858
c000ffec:	83 c4 08             	add    esp,0x8
c000ffef:	5b                   	pop    ebx
c000fff0:	e9 81 aa ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c000fff5:	83 c4 08             	add    esp,0x8
c000fff8:	5b                   	pop    ebx
c000fff9:	c3                   	ret    

c000fffa <CPU::open(int, int, void*)>:
c000fffa:	57                   	push   edi
c000fffb:	56                   	push   esi
c000fffc:	53                   	push   ebx
c000fffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010001:	83 ec 0c             	sub    esp,0xc
c0010004:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010008:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001000e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010014:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001001a:	50                   	push   eax
c001001b:	e8 e4 73 ff ff       	call   c0007404 <GDT::setup()>
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	6a 00                	push   0x0
c0010025:	68 ef be ad de       	push   0xdeadbeef
c001002a:	57                   	push   edi
c001002b:	e8 88 8f ff ff       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c0010030:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010033:	e8 5c 8f ff ff       	call   c0008f94 <TSS::flush()>
c0010038:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001003e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010041:	e8 10 76 ff ff       	call   c0007656 <IDT::setup()>
c0010046:	b8 00 04 00 00       	mov    eax,0x400
c001004b:	0f 23 f8             	mov    db7,eax
c001004e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010058:	e8 af 7d ff ff       	call   c0007e0c <Phys::allocatePage()>
c001005d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010063:	89 30                	mov    DWORD PTR [eax],esi
c0010065:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001006b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001006e:	58                   	pop    eax
c001006f:	5a                   	pop    edx
c0010070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010076:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007a:	e8 d5 9f ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c001007f:	c7 04 24 62 08 02 c0 	mov    DWORD PTR [esp],0xc0020862
c0010086:	e8 c6 00 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c001008b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001008e:	e8 53 f7 ff ff       	call   c000f7e6 <CPU::detectFeatures()>
c0010093:	c7 04 24 85 08 02 c0 	mov    DWORD PTR [esp],0xc0020885
c001009a:	e8 b2 00 00 00       	call   c0010151 <KeSetBootMessage(char const*)>
c001009f:	e8 ba 6e 00 00       	call   c0016f5e <HalInitialise()>
c00100a4:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00100a9:	83 e0 10             	and    eax,0x10
c00100ac:	83 f8 01             	cmp    eax,0x1
c00100af:	19 c0                	sbb    eax,eax
c00100b1:	83 e0 46             	and    eax,0x46
c00100b4:	83 c0 1e             	add    eax,0x1e
c00100b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00100ba:	e8 0c d7 ff ff       	call   c000d7cb <setupTimer(int)>
c00100bf:	83 c4 10             	add    esp,0x10
c00100c2:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00100c9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00100cf:	74 0c                	je     c00100dd <CPU::open(int, int, void*)+0xe3>
c00100d1:	83 ec 0c             	sub    esp,0xc
c00100d4:	53                   	push   ebx
c00100d5:	e8 54 fe ff ff       	call   c000ff2e <CPU::setupFeatures()>
c00100da:	83 c4 10             	add    esp,0x10
c00100dd:	5b                   	pop    ebx
c00100de:	31 c0                	xor    eax,eax
c00100e0:	5e                   	pop    esi
c00100e1:	5f                   	pop    edi
c00100e2:	c3                   	ret    

c00100e3 <KeDisplaySplashScreen()>:
c00100e3:	55                   	push   ebp
c00100e4:	bd 05 00 00 00       	mov    ebp,0x5
c00100e9:	57                   	push   edi
c00100ea:	bf 20 1c 02 c0       	mov    edi,0xc0021c20
c00100ef:	56                   	push   esi
c00100f0:	be 0a 00 00 00       	mov    esi,0xa
c00100f5:	53                   	push   ebx
c00100f6:	31 db                	xor    ebx,ebx
c00100f8:	83 ec 0c             	sub    esp,0xc
c00100fb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00100fe:	84 c0                	test   al,al
c0010100:	74 47                	je     c0010149 <KeDisplaySplashScreen()+0x66>
c0010102:	80 bb 56 1c 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde3aa],0xdb
c0010109:	75 13                	jne    c001011e <KeDisplaySplashScreen()+0x3b>
c001010b:	0f b6 93 55 1c 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde3ab]
c0010112:	83 e2 fe             	and    edx,0xfffffffe
c0010115:	81 fa ba 00 00 00    	cmp    edx,0xba
c001011b:	75 01                	jne    c001011e <KeDisplaySplashScreen()+0x3b>
c001011d:	46                   	inc    esi
c001011e:	3c 0d                	cmp    al,0xd
c0010120:	74 24                	je     c0010146 <KeDisplaySplashScreen()+0x63>
c0010122:	3c 0a                	cmp    al,0xa
c0010124:	75 0a                	jne    c0010130 <KeDisplaySplashScreen()+0x4d>
c0010126:	45                   	inc    ebp
c0010127:	be 0a 00 00 00       	mov    esi,0xa
c001012c:	31 db                	xor    ebx,ebx
c001012e:	eb 16                	jmp    c0010146 <KeDisplaySplashScreen()+0x63>
c0010130:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	55                   	push   ebp
c0010137:	43                   	inc    ebx
c0010138:	52                   	push   edx
c0010139:	6a 00                	push   0x0
c001013b:	6a 0e                	push   0xe
c001013d:	50                   	push   eax
c001013e:	e8 bd 7a 00 00       	call   c0017c00 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010143:	83 c4 20             	add    esp,0x20
c0010146:	47                   	inc    edi
c0010147:	eb b2                	jmp    c00100fb <KeDisplaySplashScreen()+0x18>
c0010149:	83 c4 0c             	add    esp,0xc
c001014c:	5b                   	pop    ebx
c001014d:	5e                   	pop    esi
c001014e:	5f                   	pop    edi
c001014f:	5d                   	pop    ebp
c0010150:	c3                   	ret    

c0010151 <KeSetBootMessage(char const*)>:
c0010151:	57                   	push   edi
c0010152:	56                   	push   esi
c0010153:	53                   	push   ebx
c0010154:	81 ec a4 00 00 00    	sub    esp,0xa4
c001015a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010161:	68 9e 00 00 00       	push   0x9e
c0010166:	6a 00                	push   0x0
c0010168:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001016c:	56                   	push   esi
c001016d:	e8 0e 04 ff ff       	call   c0000580 <memset>
c0010172:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010175:	e8 a6 04 ff ff       	call   c0000620 <strlen>
c001017a:	ba 50 00 00 00       	mov    edx,0x50
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	31 c9                	xor    ecx,ecx
c0010184:	29 c2                	sub    edx,eax
c0010186:	83 e2 fe             	and    edx,0xfffffffe
c0010189:	01 f2                	add    edx,esi
c001018b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010190:	84 c0                	test   al,al
c0010192:	74 0a                	je     c001019e <KeSetBootMessage(char const*)+0x4d>
c0010194:	80 cc 0f             	or     ah,0xf
c0010197:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001019b:	41                   	inc    ecx
c001019c:	eb ed                	jmp    c001018b <KeSetBootMessage(char const*)+0x3a>
c001019e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00101a3:	b9 9e 00 00 00       	mov    ecx,0x9e
c00101a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101aa:	81 c4 a0 00 00 00    	add    esp,0xa0
c00101b0:	5b                   	pop    ebx
c00101b1:	5e                   	pop    esi
c00101b2:	5f                   	pop    edi
c00101b3:	c3                   	ret    

c00101b4 <EnvVarContainer::getEnv(char const*)>:
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	31 db                	xor    ebx,ebx
c00101b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101bd:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101bf:	7e 2b                	jle    c00101ec <EnvVarContainer::getEnv(char const*)+0x38>
c00101c1:	50                   	push   eax
c00101c2:	50                   	push   eax
c00101c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101c6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00101cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00101d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00101d4:	e8 67 06 ff ff       	call   c0000840 <strcmp>
c00101d9:	83 c4 10             	add    esp,0x10
c00101dc:	85 c0                	test   eax,eax
c00101de:	75 09                	jne    c00101e9 <EnvVarContainer::getEnv(char const*)+0x35>
c00101e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101e3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00101e7:	eb 05                	jmp    c00101ee <EnvVarContainer::getEnv(char const*)+0x3a>
c00101e9:	43                   	inc    ebx
c00101ea:	eb d1                	jmp    c00101bd <EnvVarContainer::getEnv(char const*)+0x9>
c00101ec:	31 c0                	xor    eax,eax
c00101ee:	5b                   	pop    ebx
c00101ef:	5e                   	pop    esi
c00101f0:	5f                   	pop    edi
c00101f1:	c3                   	ret    

c00101f2 <EnvVarContainer::setEnv(char const*, char const*)>:
c00101f2:	55                   	push   ebp
c00101f3:	57                   	push   edi
c00101f4:	56                   	push   esi
c00101f5:	53                   	push   ebx
c00101f6:	83 ec 28             	sub    esp,0x28
c00101f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00101fd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010201:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010205:	56                   	push   esi
c0010206:	e8 15 04 ff ff       	call   c0000620 <strlen>
c001020b:	40                   	inc    eax
c001020c:	89 04 24             	mov    DWORD PTR [esp],eax
c001020f:	e8 f2 78 ff ff       	call   c0007b06 <malloc>
c0010214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010217:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001021b:	e8 00 04 ff ff       	call   c0000620 <strlen>
c0010220:	40                   	inc    eax
c0010221:	89 04 24             	mov    DWORD PTR [esp],eax
c0010224:	e8 dd 78 ff ff       	call   c0007b06 <malloc>
c0010229:	89 34 24             	mov    DWORD PTR [esp],esi
c001022c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010230:	e8 eb 03 ff ff       	call   c0000620 <strlen>
c0010235:	83 c4 0c             	add    esp,0xc
c0010238:	40                   	inc    eax
c0010239:	50                   	push   eax
c001023a:	6a 00                	push   0x0
c001023c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010240:	e8 3b 03 ff ff       	call   c0000580 <memset>
c0010245:	89 34 24             	mov    DWORD PTR [esp],esi
c0010248:	e8 d3 03 ff ff       	call   c0000620 <strlen>
c001024d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010251:	8d 48 01             	lea    ecx,[eax+0x1]
c0010254:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010259:	89 de                	mov    esi,ebx
c001025b:	e8 c0 03 ff ff       	call   c0000620 <strlen>
c0010260:	83 c4 0c             	add    esp,0xc
c0010263:	40                   	inc    eax
c0010264:	50                   	push   eax
c0010265:	6a 00                	push   0x0
c0010267:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001026b:	e8 10 03 ff ff       	call   c0000580 <memset>
c0010270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010273:	e8 a8 03 ff ff       	call   c0000620 <strlen>
c0010278:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001027c:	8d 48 01             	lea    ecx,[eax+0x1]
c001027f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010281:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010284:	40                   	inc    eax
c0010285:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010288:	c1 e0 03             	shl    eax,0x3
c001028b:	5a                   	pop    edx
c001028c:	59                   	pop    ecx
c001028d:	50                   	push   eax
c001028e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010291:	e8 55 78 ff ff       	call   c0007aeb <realloc>
c0010296:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010299:	8d 74 24 18          	lea    esi,[esp+0x18]
c001029d:	b9 08 00 00 00       	mov    ecx,0x8
c00102a2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102a5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102ab:	83 c4 2c             	add    esp,0x2c
c00102ae:	5b                   	pop    ebx
c00102af:	5e                   	pop    esi
c00102b0:	5f                   	pop    edi
c00102b1:	5d                   	pop    ebp
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <EnvVarContainer::deleteEnv(char const*)>:
c00102b4:	c3                   	ret    
c00102b5:	90                   	nop

c00102b6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102b6:	55                   	push   ebp
c00102b7:	57                   	push   edi
c00102b8:	56                   	push   esi
c00102b9:	53                   	push   ebx
c00102ba:	81 ec 38 01 00 00    	sub    esp,0x138
c00102c0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00102c7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00102ce:	68 14 01 00 00       	push   0x114
c00102d3:	e8 2e 78 ff ff       	call   c0007b06 <malloc>
c00102d8:	83 c4 0c             	add    esp,0xc
c00102db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00102de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00102e5:	89 c3                	mov    ebx,eax
c00102e7:	50                   	push   eax
c00102e8:	e8 0b ad ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00102ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f0:	e8 29 b0 ff ff       	call   c000b31e <File::exists()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	84 c0                	test   al,al
c00102fa:	75 31                	jne    c001032d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00102fc:	50                   	push   eax
c00102fd:	50                   	push   eax
c00102fe:	6a 12                	push   0x12
c0010300:	53                   	push   ebx
c0010301:	e8 b0 ad ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0010306:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010308:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001030b:	89 34 24             	mov    DWORD PTR [esp],esi
c001030e:	e8 0d 03 ff ff       	call   c0000620 <strlen>
c0010313:	5a                   	pop    edx
c0010314:	31 d2                	xor    edx,edx
c0010316:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001031a:	51                   	push   ecx
c001031b:	56                   	push   esi
c001031c:	52                   	push   edx
c001031d:	50                   	push   eax
c001031e:	53                   	push   ebx
c001031f:	ff d7                	call   edi
c0010321:	83 c4 14             	add    esp,0x14
c0010324:	53                   	push   ebx
c0010325:	e8 ea ad ff ff       	call   c000b114 <File::close()>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	56                   	push   esi
c001032e:	31 f6                	xor    esi,esi
c0010330:	68 00 01 00 00       	push   0x100
c0010335:	6a 00                	push   0x0
c0010337:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001033b:	50                   	push   eax
c001033c:	e8 3f 02 ff ff       	call   c0000580 <memset>
c0010341:	5f                   	pop    edi
c0010342:	58                   	pop    eax
c0010343:	6a 01                	push   0x1
c0010345:	53                   	push   ebx
c0010346:	e8 6b ad ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001034b:	83 c4 10             	add    esp,0x10
c001034e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010356:	83 ec 0c             	sub    esp,0xc
c0010359:	8b 03                	mov    eax,DWORD PTR [ebx]
c001035b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001035f:	51                   	push   ecx
c0010360:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010364:	52                   	push   edx
c0010365:	6a 00                	push   0x0
c0010367:	6a 01                	push   0x1
c0010369:	53                   	push   ebx
c001036a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001036d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010371:	83 c4 20             	add    esp,0x20
c0010374:	3c 0d                	cmp    al,0xd
c0010376:	0f 84 09 01 00 00    	je     c0010485 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001037c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010381:	0f 84 ef 00 00 00    	je     c0010476 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010387:	3c 0a                	cmp    al,0xa
c0010389:	74 13                	je     c001039e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001038b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010390:	74 0c                	je     c001039e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010392:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010398:	0f 8e d8 00 00 00    	jle    c0010476 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001039e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103a2:	83 ec 0c             	sub    esp,0xc
c00103a5:	8d 78 01             	lea    edi,[eax+0x1]
c00103a8:	57                   	push   edi
c00103a9:	e8 58 77 ff ff       	call   c0007b06 <malloc>
c00103ae:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103b2:	8d 56 04             	lea    edx,[esi+0x4]
c00103b5:	89 14 24             	mov    DWORD PTR [esp],edx
c00103b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103c0:	e8 41 77 ff ff       	call   c0007b06 <malloc>
c00103c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00103c9:	83 c4 0c             	add    esp,0xc
c00103cc:	57                   	push   edi
c00103cd:	6a 00                	push   0x0
c00103cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00103d3:	e8 a8 01 ff ff       	call   c0000580 <memset>
c00103d8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00103e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00103e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e6:	83 c4 0c             	add    esp,0xc
c00103e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103ed:	52                   	push   edx
c00103ee:	6a 00                	push   0x0
c00103f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103f4:	e8 87 01 ff ff       	call   c0000580 <memset>
c00103f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00103fd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010401:	89 34 24             	mov    DWORD PTR [esp],esi
c0010404:	e8 17 02 ff ff       	call   c0000620 <strlen>
c0010409:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001040d:	89 c1                	mov    ecx,eax
c001040f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010411:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001041a:	40                   	inc    eax
c001041b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001041e:	85 d2                	test   edx,edx
c0010420:	75 0c                	jne    c001042e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	6a 08                	push   0x8
c0010427:	e8 da 76 ff ff       	call   c0007b06 <malloc>
c001042c:	eb 0c                	jmp    c001043a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001042e:	51                   	push   ecx
c001042f:	51                   	push   ecx
c0010430:	c1 e0 03             	shl    eax,0x3
c0010433:	50                   	push   eax
c0010434:	52                   	push   edx
c0010435:	e8 b1 76 ff ff       	call   c0007aeb <realloc>
c001043a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001043d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010440:	83 c4 10             	add    esp,0x10
c0010443:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010446:	8d 74 24 18          	lea    esi,[esp+0x18]
c001044a:	b9 08 00 00 00       	mov    ecx,0x8
c001044f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010453:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010455:	50                   	push   eax
c0010456:	31 f6                	xor    esi,esi
c0010458:	68 00 01 00 00       	push   0x100
c001045d:	6a 00                	push   0x0
c001045f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010463:	50                   	push   eax
c0010464:	e8 17 01 ff ff       	call   c0000580 <memset>
c0010469:	83 c4 10             	add    esp,0x10
c001046c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010474:	eb 0f                	jmp    c0010485 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010476:	3c 3d                	cmp    al,0x3d
c0010478:	74 07                	je     c0010481 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001047a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001047e:	46                   	inc    esi
c001047f:	eb 04                	jmp    c0010485 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010481:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010485:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001048a:	0f 85 c6 fe ff ff    	jne    c0010356 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010490:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010496:	5b                   	pop    ebx
c0010497:	5e                   	pop    esi
c0010498:	5f                   	pop    edi
c0010499:	5d                   	pop    ebp
c001049a:	c3                   	ret    
c001049b:	90                   	nop

c001049c <EnvVarContainer::__loadSystem()>:
c001049c:	83 ec 10             	sub    esp,0x10
c001049f:	68 80 1d 02 c0       	push   0xc0021d80
c00104a4:	68 c8 08 02 c0       	push   0xc00208c8
c00104a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ad:	e8 04 fe ff ff       	call   c00102b6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00104b2:	83 c4 1c             	add    esp,0x1c
c00104b5:	c3                   	ret    

c00104b6 <EnvVarContainer::__loadUser()>:
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00104cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104d8:	90                   	nop
c00104d9:	c3                   	ret    

c00104da <EnvVarContainer::~EnvVarContainer()>:
c00104da:	83 ec 1c             	sub    esp,0x1c
c00104dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104e4:	85 c0                	test   eax,eax
c00104e6:	74 19                	je     c0010501 <EnvVarContainer::~EnvVarContainer()+0x27>
c00104e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ee:	85 c0                	test   eax,eax
c00104f0:	74 0f                	je     c0010501 <EnvVarContainer::~EnvVarContainer()+0x27>
c00104f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00104fc:	e8 18 76 ff ff       	call   c0007b19 <free>
c0010501:	90                   	nop
c0010502:	83 c4 1c             	add    esp,0x1c
c0010505:	c3                   	ret    

c0010506 <Krnl::getEnv(Process*, char const*)>:
c0010506:	53                   	push   ebx
c0010507:	83 ec 08             	sub    esp,0x8
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010514:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010518:	74 04                	je     c001051e <Krnl::getEnv(Process*, char const*)+0x18>
c001051a:	85 c0                	test   eax,eax
c001051c:	75 0b                	jne    c0010529 <Krnl::getEnv(Process*, char const*)+0x23>
c001051e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010523:	85 c0                	test   eax,eax
c0010525:	75 19                	jne    c0010540 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010527:	eb 27                	jmp    c0010550 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010529:	52                   	push   edx
c001052a:	52                   	push   edx
c001052b:	53                   	push   ebx
c001052c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010532:	e8 7d fc ff ff       	call   c00101b4 <EnvVarContainer::getEnv(char const*)>
c0010537:	83 c4 10             	add    esp,0x10
c001053a:	85 c0                	test   eax,eax
c001053c:	75 28                	jne    c0010566 <Krnl::getEnv(Process*, char const*)+0x60>
c001053e:	eb de                	jmp    c001051e <Krnl::getEnv(Process*, char const*)+0x18>
c0010540:	52                   	push   edx
c0010541:	52                   	push   edx
c0010542:	53                   	push   ebx
c0010543:	50                   	push   eax
c0010544:	e8 6b fc ff ff       	call   c00101b4 <EnvVarContainer::getEnv(char const*)>
c0010549:	83 c4 10             	add    esp,0x10
c001054c:	85 c0                	test   eax,eax
c001054e:	75 16                	jne    c0010566 <Krnl::getEnv(Process*, char const*)+0x60>
c0010550:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010554:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010559:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001055d:	83 c4 08             	add    esp,0x8
c0010560:	5b                   	pop    ebx
c0010561:	e9 4e fc ff ff       	jmp    c00101b4 <EnvVarContainer::getEnv(char const*)>
c0010566:	83 c4 08             	add    esp,0x8
c0010569:	5b                   	pop    ebx
c001056a:	c3                   	ret    

c001056b <Krnl::setEnvSystem(char const*, char const*)>:
c001056b:	83 ec 10             	sub    esp,0x10
c001056e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010576:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c001057c:	e8 71 fc ff ff       	call   c00101f2 <EnvVarContainer::setEnv(char const*, char const*)>
c0010581:	83 c4 1c             	add    esp,0x1c
c0010584:	c3                   	ret    

c0010585 <Krnl::setEnvUser(char const*, char const*)>:
c0010585:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001058a:	85 c0                	test   eax,eax
c001058c:	74 15                	je     c00105a3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001058e:	83 ec 10             	sub    esp,0x10
c0010591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010595:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010599:	50                   	push   eax
c001059a:	e8 53 fc ff ff       	call   c00101f2 <EnvVarContainer::setEnv(char const*, char const*)>
c001059f:	83 c4 1c             	add    esp,0x1c
c00105a2:	c3                   	ret    
c00105a3:	c3                   	ret    

c00105a4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105b2:	e9 3b fc ff ff       	jmp    c00101f2 <EnvVarContainer::setEnv(char const*, char const*)>

c00105b7 <Krnl::deleteEnvSystem(char const*)>:
c00105b7:	c3                   	ret    

c00105b8 <Krnl::deleteEnvUser(char const*)>:
c00105b8:	c3                   	ret    

c00105b9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105b9:	c3                   	ret    

c00105ba <Krnl::newProcessEnv(Process*)>:
c00105ba:	83 ec 28             	sub    esp,0x28
c00105bd:	6a 0c                	push   0xc
c00105bf:	e8 42 75 ff ff       	call   c0007b06 <malloc>
c00105c4:	5a                   	pop    edx
c00105c5:	59                   	pop    ecx
c00105c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00105ca:	50                   	push   eax
c00105cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00105cf:	e8 e4 fe ff ff       	call   c00104b8 <EnvVarContainer::EnvVarContainer(Process*)>
c00105d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d8:	83 c4 2c             	add    esp,0x2c
c00105db:	c3                   	ret    

c00105dc <Krnl::copyProcessEnv(Process*, Process*)>:
c00105dc:	57                   	push   edi
c00105dd:	56                   	push   esi
c00105de:	53                   	push   ebx
c00105df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e3:	83 ec 0c             	sub    esp,0xc
c00105e6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00105ec:	6a 0c                	push   0xc
c00105ee:	e8 13 75 ff ff       	call   c0007b06 <malloc>
c00105f3:	89 c3                	mov    ebx,eax
c00105f5:	58                   	pop    eax
c00105f6:	5a                   	pop    edx
c00105f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105fb:	53                   	push   ebx
c00105fc:	e8 b7 fe ff ff       	call   c00104b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010601:	8b 07                	mov    eax,DWORD PTR [edi]
c0010603:	89 03                	mov    DWORD PTR [ebx],eax
c0010605:	c1 e0 03             	shl    eax,0x3
c0010608:	89 04 24             	mov    DWORD PTR [esp],eax
c001060b:	e8 f6 74 ff ff       	call   c0007b06 <malloc>
c0010610:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010613:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010615:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010618:	89 c7                	mov    edi,eax
c001061a:	c1 e1 03             	shl    ecx,0x3
c001061d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001061f:	83 c4 10             	add    esp,0x10
c0010622:	89 d8                	mov    eax,ebx
c0010624:	5b                   	pop    ebx
c0010625:	5e                   	pop    esi
c0010626:	5f                   	pop    edi
c0010627:	c3                   	ret    

c0010628 <Krnl::loadSystemEnv()>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 14             	sub    esp,0x14
c001062c:	6a 0c                	push   0xc
c001062e:	e8 d3 74 ff ff       	call   c0007b06 <malloc>
c0010633:	89 c3                	mov    ebx,eax
c0010635:	58                   	pop    eax
c0010636:	5a                   	pop    edx
c0010637:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001063d:	53                   	push   ebx
c001063e:	e8 75 fe ff ff       	call   c00104b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010643:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010646:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c001064c:	e8 4b fe ff ff       	call   c001049c <EnvVarContainer::__loadSystem()>
c0010651:	83 c4 18             	add    esp,0x18
c0010654:	5b                   	pop    ebx
c0010655:	c3                   	ret    

c0010656 <Krnl::loadUserEnv()>:
c0010656:	53                   	push   ebx
c0010657:	83 ec 14             	sub    esp,0x14
c001065a:	6a 0c                	push   0xc
c001065c:	e8 a5 74 ff ff       	call   c0007b06 <malloc>
c0010661:	89 c3                	mov    ebx,eax
c0010663:	58                   	pop    eax
c0010664:	5a                   	pop    edx
c0010665:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001066b:	53                   	push   ebx
c001066c:	e8 47 fe ff ff       	call   c00104b8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010671:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010677:	83 c4 18             	add    esp,0x18
c001067a:	5b                   	pop    ebx
c001067b:	c3                   	ret    

c001067c <Krnl::flushEnv()>:
c001067c:	c3                   	ret    

c001067d <Krnl::getProcessTotalEnvCount(Process*)>:
c001067d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010681:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010687:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001068d:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010692:	8b 00                	mov    eax,DWORD PTR [eax]
c0010694:	03 01                	add    eax,DWORD PTR [ecx]
c0010696:	85 d2                	test   edx,edx
c0010698:	74 02                	je     c001069c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001069a:	03 02                	add    eax,DWORD PTR [edx]
c001069c:	c3                   	ret    

c001069d <Krnl::getProcessEnvPair(Process*, int)>:
c001069d:	57                   	push   edi
c001069e:	56                   	push   esi
c001069f:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106a5:	53                   	push   ebx
c00106a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ae:	85 f6                	test   esi,esi
c00106b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106b4:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106bc:	75 16                	jne    c00106d4 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00106be:	39 c2                	cmp    edx,eax
c00106c0:	7c 16                	jl     c00106d8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106c2:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c00106c8:	8b 31                	mov    esi,DWORD PTR [ecx]
c00106ca:	01 c6                	add    esi,eax
c00106cc:	39 d6                	cmp    esi,edx
c00106ce:	7e 3c                	jle    c001070c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106d0:	29 c2                	sub    edx,eax
c00106d2:	eb 04                	jmp    c00106d8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00106d4:	39 c2                	cmp    edx,eax
c00106d6:	7d 05                	jge    c00106dd <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00106d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00106db:	eb 20                	jmp    c00106fd <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00106dd:	8b 3e                	mov    edi,DWORD PTR [esi]
c00106df:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00106e2:	39 d1                	cmp    ecx,edx
c00106e4:	7e 04                	jle    c00106ea <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00106e6:	29 c2                	sub    edx,eax
c00106e8:	eb 10                	jmp    c00106fa <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00106ea:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c00106f0:	03 0e                	add    ecx,DWORD PTR [esi]
c00106f2:	39 d1                	cmp    ecx,edx
c00106f4:	7e 16                	jle    c001070c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00106f6:	29 c2                	sub    edx,eax
c00106f8:	29 fa                	sub    edx,edi
c00106fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00106fd:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010700:	8b 02                	mov    eax,DWORD PTR [edx]
c0010702:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010705:	89 03                	mov    DWORD PTR [ebx],eax
c0010707:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001070a:	eb 1d                	jmp    c0010729 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001070c:	83 ec 0c             	sub    esp,0xc
c001070f:	68 ea 08 02 c0       	push   0xc00208ea
c0010714:	e8 ac 00 00 00       	call   c00107c5 <KePanic(char const*)>
c0010719:	83 c4 10             	add    esp,0x10
c001071c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010722:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010729:	89 d8                	mov    eax,ebx
c001072b:	5b                   	pop    ebx
c001072c:	5e                   	pop    esi
c001072d:	5f                   	pop    edi
c001072e:	c2 04 00             	ret    0x4

c0010731 <CPU::current()>:
c0010731:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010736:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001073c:	c3                   	ret    

c001073d <operator new(unsigned long)>:
c001073d:	e9 c4 73 ff ff       	jmp    c0007b06 <malloc>

c0010742 <operator delete(void*)>:
c0010742:	e9 e5 73 ff ff       	jmp    c0007b2c <rfree>

c0010747 <disableIRQs()>:
c0010747:	fa                   	cli    
c0010748:	c3                   	ret    

c0010749 <enableIRQs()>:
c0010749:	fb                   	sti    
c001074a:	c3                   	ret    

c001074b <lockScheduler()>:
c001074b:	fa                   	cli    
c001074c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010752:	c3                   	ret    

c0010753 <unlockScheduler()>:
c0010753:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010758:	48                   	dec    eax
c0010759:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001075e:	75 01                	jne    c0010761 <unlockScheduler()+0xe>
c0010760:	fb                   	sti    
c0010761:	c3                   	ret    

c0010762 <lockStuff()>:
c0010762:	fa                   	cli    
c0010763:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010769:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c001076f:	c3                   	ret    

c0010770 <unlockStuff()>:
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010778:	48                   	dec    eax
c0010779:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001077e:	75 18                	jne    c0010798 <unlockStuff()+0x28>
c0010780:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010787:	74 0f                	je     c0010798 <unlockStuff()+0x28>
c0010789:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010793:	e8 48 49 00 00       	call   c00150e0 <schedule()>
c0010798:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001079d:	48                   	dec    eax
c001079e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107a3:	75 01                	jne    c00107a6 <unlockStuff()+0x36>
c00107a5:	fb                   	sti    
c00107a6:	83 c4 0c             	add    esp,0xc
c00107a9:	c3                   	ret    

c00107aa <Virt::getAKernelVAS()>:
c00107aa:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00107af:	c3                   	ret    

c00107b0 <__not_memcpy>:
c00107b0:	57                   	push   edi
c00107b1:	56                   	push   esi
c00107b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107be:	89 c7                	mov    edi,eax
c00107c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107c2:	5e                   	pop    esi
c00107c3:	5f                   	pop    edi
c00107c4:	c3                   	ret    

c00107c5 <KePanic(char const*)>:
c00107c5:	b0 01                	mov    al,0x1
c00107c7:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c00107cc:	e9 79 66 00 00       	jmp    c0016e4a <HalPanic(char const*)>

c00107d1 <Krnl::powerThread(void*)>:
c00107d1:	83 ec 0c             	sub    esp,0xc
c00107d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107d9:	48                   	dec    eax
c00107da:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107df:	75 01                	jne    c00107e2 <Krnl::powerThread(void*)+0x11>
c00107e1:	fb                   	sti    
c00107e2:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00107e9:	83 ec 0c             	sub    esp,0xc
c00107ec:	6a 0a                	push   0xa
c00107ee:	e8 d9 4b 00 00       	call   c00153cc <sleep(unsigned int)>
c00107f3:	83 c4 10             	add    esp,0x10
c00107f6:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c00107fd:	eb e3                	jmp    c00107e2 <Krnl::powerThread(void*)+0x11>

c00107ff <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00107ff:	57                   	push   edi
c0010800:	b9 09 00 00 00       	mov    ecx,0x9
c0010805:	56                   	push   esi
c0010806:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001080b:	fc                   	cld    
c001080c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010810:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010812:	5e                   	pop    esi
c0010813:	5f                   	pop    edi
c0010814:	c3                   	ret    

c0010815 <Krnl::userIOReceived()>:
c0010815:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001081f:	c3                   	ret    

c0010820 <Krnl::handlePowerButton()>:
c0010820:	83 ec 0c             	sub    esp,0xc
c0010823:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010828:	83 f8 02             	cmp    eax,0x2
c001082b:	75 10                	jne    c001083d <Krnl::handlePowerButton()+0x1d>
c001082d:	83 ec 0c             	sub    esp,0xc
c0010830:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010836:	e8 f1 68 ff ff       	call   c000712c <Computer::shutdown()>
c001083b:	eb 11                	jmp    c001084e <Krnl::handlePowerButton()+0x2e>
c001083d:	48                   	dec    eax
c001083e:	75 11                	jne    c0010851 <Krnl::handlePowerButton()+0x31>
c0010840:	83 ec 0c             	sub    esp,0xc
c0010843:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010849:	e8 2c 69 ff ff       	call   c000717a <Computer::sleep()>
c001084e:	83 c4 10             	add    esp,0x10
c0010851:	83 c4 0c             	add    esp,0xc
c0010854:	c3                   	ret    

c0010855 <Krnl::handleSleepButton()>:
c0010855:	83 ec 0c             	sub    esp,0xc
c0010858:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001085d:	83 f8 02             	cmp    eax,0x2
c0010860:	75 10                	jne    c0010872 <Krnl::handleSleepButton()+0x1d>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001086b:	e8 bc 68 ff ff       	call   c000712c <Computer::shutdown()>
c0010870:	eb 11                	jmp    c0010883 <Krnl::handleSleepButton()+0x2e>
c0010872:	48                   	dec    eax
c0010873:	75 11                	jne    c0010886 <Krnl::handleSleepButton()+0x31>
c0010875:	83 ec 0c             	sub    esp,0xc
c0010878:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001087e:	e8 f7 68 ff ff       	call   c000717a <Computer::sleep()>
c0010883:	83 c4 10             	add    esp,0x10
c0010886:	83 c4 0c             	add    esp,0xc
c0010889:	c3                   	ret    

c001088a <Krnl::setupPowerManager()>:
c001088a:	83 ec 0c             	sub    esp,0xc
c001088d:	68 f0 00 00 00       	push   0xf0
c0010892:	6a 00                	push   0x0
c0010894:	68 d1 07 01 c0       	push   0xc00107d1
c0010899:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001089f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108a9:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00108b0:	e8 d3 45 00 00       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c00108b5:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c00108bf:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c00108c9:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c00108d3:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c00108dd:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c00108e7:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c00108f1:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c00108fb:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010905:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    

c0010913 <KeRand()>:
c0010913:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001091d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010927:	53                   	push   ebx
c0010928:	01 c1                	add    ecx,eax
c001092a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001092f:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010935:	01 ca                	add    edx,ecx
c0010937:	05 ef 04 b5 00       	add    eax,0xb504ef
c001093c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010941:	83 d2 00             	adc    edx,0x0
c0010944:	0f b7 da             	movzx  ebx,dx
c0010947:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c001094d:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0010951:	5b                   	pop    ebx
c0010952:	c3                   	ret    

c0010953 <KeSeedRand(unsigned int)>:
c0010953:	53                   	push   ebx
c0010954:	83 ec 08             	sub    esp,0x8
c0010957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001095b:	e8 dd 67 00 00       	call   c001713d <HalGetRand()>
c0010960:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c001096a:	31 d8                	xor    eax,ebx
c001096c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010971:	e8 9d ff ff ff       	call   c0010913 <KeRand()>
c0010976:	83 c4 08             	add    esp,0x8
c0010979:	5b                   	pop    ebx
c001097a:	eb 97                	jmp    c0010913 <KeRand()>

c001097c <KeInitRand()>:
c001097c:	83 ec 0c             	sub    esp,0xc
c001097f:	e8 bf 65 00 00       	call   c0016f43 <HalQueryPerformanceCounter()>
c0010984:	0f 20 da             	mov    edx,cr3
c0010987:	0f 22 da             	mov    cr3,edx
c001098a:	0f 20 da             	mov    edx,cr3
c001098d:	0f 22 da             	mov    cr3,edx
c0010990:	0f 20 da             	mov    edx,cr3
c0010993:	0f 22 da             	mov    cr3,edx
c0010996:	0f 20 da             	mov    edx,cr3
c0010999:	0f 22 da             	mov    cr3,edx
c001099c:	83 ec 0c             	sub    esp,0xc
c001099f:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109a4:	50                   	push   eax
c00109a5:	e8 a9 ff ff ff       	call   c0010953 <KeSeedRand(unsigned int)>
c00109aa:	83 c4 1c             	add    esp,0x1c
c00109ad:	c3                   	ret    
c00109ae:	66 90                	xchg   ax,ax

c00109b0 <KeResolveCompatibilitySymbol(char*)>:
c00109b0:	83 ec 1c             	sub    esp,0x1c
c00109b3:	c7 44 24 04 04 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020904
c00109bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c2:	e8 79 fe fe ff       	call   c0000840 <strcmp>
c00109c7:	85 c0                	test   eax,eax
c00109c9:	0f 94 c0             	sete   al
c00109cc:	84 c0                	test   al,al
c00109ce:	74 0c                	je     c00109dc <KeResolveCompatibilitySymbol(char*)+0x2c>
c00109d0:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c00109d5:	e9 62 01 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00109da:	66 90                	xchg   ax,ax
c00109dc:	c7 44 24 04 0d 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc002090d
c00109e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00109eb:	e8 50 fe fe ff       	call   c0000840 <strcmp>
c00109f0:	85 c0                	test   eax,eax
c00109f2:	0f 94 c0             	sete   al
c00109f5:	84 c0                	test   al,al
c00109f7:	74 0b                	je     c0010a04 <KeResolveCompatibilitySymbol(char*)+0x54>
c00109f9:	b8 a0 e3 01 c0       	mov    eax,0xc001e3a0
c00109fe:	e9 39 01 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a03:	90                   	nop
c0010a04:	c7 44 24 04 17 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020917
c0010a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a13:	e8 28 fe fe ff       	call   c0000840 <strcmp>
c0010a18:	85 c0                	test   eax,eax
c0010a1a:	0f 94 c0             	sete   al
c0010a1d:	84 c0                	test   al,al
c0010a1f:	74 0b                	je     c0010a2c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010a21:	b8 d4 e0 01 c0       	mov    eax,0xc001e0d4
c0010a26:	e9 11 01 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a2b:	90                   	nop
c0010a2c:	c7 44 24 04 20 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020920
c0010a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a3b:	e8 00 fe fe ff       	call   c0000840 <strcmp>
c0010a40:	85 c0                	test   eax,eax
c0010a42:	0f 94 c0             	sete   al
c0010a45:	84 c0                	test   al,al
c0010a47:	74 0b                	je     c0010a54 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010a49:	b8 c5 07 01 c0       	mov    eax,0xc00107c5
c0010a4e:	e9 e9 00 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a53:	90                   	nop
c0010a54:	c7 44 24 04 33 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020933
c0010a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a63:	e8 d8 fd fe ff       	call   c0000840 <strcmp>
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	0f 94 c0             	sete   al
c0010a6d:	84 c0                	test   al,al
c0010a6f:	74 0b                	je     c0010a7c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010a71:	b8 51 01 01 c0       	mov    eax,0xc0010151
c0010a76:	e9 c1 00 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a7b:	90                   	nop
c0010a7c:	c7 44 24 04 50 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020950
c0010a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a88:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8b:	e8 b0 fd fe ff       	call   c0000840 <strcmp>
c0010a90:	85 c0                	test   eax,eax
c0010a92:	0f 94 c0             	sete   al
c0010a95:	84 c0                	test   al,al
c0010a97:	74 0b                	je     c0010aa4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010a99:	b8 a0 e4 01 c0       	mov    eax,0xc001e4a0
c0010a9e:	e9 99 00 00 00       	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010aa3:	90                   	nop
c0010aa4:	c7 44 24 04 5a 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc002095a
c0010aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab3:	e8 88 fd fe ff       	call   c0000840 <strcmp>
c0010ab8:	85 c0                	test   eax,eax
c0010aba:	0f 94 c0             	sete   al
c0010abd:	84 c0                	test   al,al
c0010abf:	74 07                	je     c0010ac8 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010ac1:	b8 20 e2 01 c0       	mov    eax,0xc001e220
c0010ac6:	eb 74                	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010ac8:	c7 44 24 04 63 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020963
c0010ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad7:	e8 64 fd fe ff       	call   c0000840 <strcmp>
c0010adc:	85 c0                	test   eax,eax
c0010ade:	0f 94 c0             	sete   al
c0010ae1:	84 c0                	test   al,al
c0010ae3:	74 07                	je     c0010aec <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010ae5:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010aea:	eb 50                	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010aec:	c7 44 24 04 7b 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc002097b
c0010af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af8:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afb:	e8 40 fd fe ff       	call   c0000840 <strcmp>
c0010b00:	85 c0                	test   eax,eax
c0010b02:	0f 94 c0             	sete   al
c0010b05:	84 c0                	test   al,al
c0010b07:	74 07                	je     c0010b10 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b09:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b0e:	eb 2c                	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b10:	c7 44 24 04 88 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020988
c0010b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1f:	e8 1c fd fe ff       	call   c0000840 <strcmp>
c0010b24:	85 c0                	test   eax,eax
c0010b26:	0f 94 c0             	sete   al
c0010b29:	84 c0                	test   al,al
c0010b2b:	74 07                	je     c0010b34 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010b2d:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b32:	eb 08                	jmp    c0010b3c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b34:	b8 00 00 00 00       	mov    eax,0x0
c0010b39:	8d 76 00             	lea    esi,[esi+0x0]
c0010b3c:	83 c4 1c             	add    esp,0x1c
c0010b3f:	c3                   	ret    

c0010b40 <KiSigKill(int)>:
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	6a 00                	push   0x0
c0010b45:	6a 00                	push   0x0
c0010b47:	6a ff                	push   0xffffffff
c0010b49:	6a 01                	push   0x1
c0010b4b:	e8 02 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b50:	83 c4 1c             	add    esp,0x1c
c0010b53:	c3                   	ret    

c0010b54 <KiDefaultSignalHandlerIgnore(int)>:
c0010b54:	c3                   	ret    

c0010b55 <KiDefaultSignalHandlerPause(int)>:
c0010b55:	57                   	push   edi
c0010b56:	b9 07 00 00 00       	mov    ecx,0x7
c0010b5b:	56                   	push   esi
c0010b5c:	be d1 09 02 c0       	mov    esi,0xc00209d1
c0010b61:	83 ec 24             	sub    esp,0x24
c0010b64:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010b68:	fc                   	cld    
c0010b69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b6b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010b6f:	50                   	push   eax
c0010b70:	6a 00                	push   0x0
c0010b72:	6a 00                	push   0x0
c0010b74:	6a 27                	push   0x27
c0010b76:	e8 d7 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b7b:	83 c4 34             	add    esp,0x34
c0010b7e:	5e                   	pop    esi
c0010b7f:	5f                   	pop    edi
c0010b80:	c3                   	ret    

c0010b81 <KiDefaultSignalHandlerResume(int)>:
c0010b81:	57                   	push   edi
c0010b82:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010b87:	56                   	push   esi
c0010b88:	be ed 09 02 c0       	mov    esi,0xc00209ed
c0010b8d:	83 ec 24             	sub    esp,0x24
c0010b90:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010b94:	fc                   	cld    
c0010b95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b97:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010b9b:	50                   	push   eax
c0010b9c:	6a 00                	push   0x0
c0010b9e:	6a 00                	push   0x0
c0010ba0:	6a 27                	push   0x27
c0010ba2:	e8 ab 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ba7:	83 c4 34             	add    esp,0x34
c0010baa:	5e                   	pop    esi
c0010bab:	5f                   	pop    edi
c0010bac:	c3                   	ret    

c0010bad <KeDeinitSignals(SigHandlerBlock*)>:
c0010bad:	e9 67 6f ff ff       	jmp    c0007b19 <free>

c0010bb2 <KeInitSignals()>:
c0010bb2:	53                   	push   ebx
c0010bb3:	83 ec 14             	sub    esp,0x14
c0010bb6:	68 c8 00 00 00       	push   0xc8
c0010bbb:	e8 46 6f ff ff       	call   c0007b06 <malloc>
c0010bc0:	83 c4 0c             	add    esp,0xc
c0010bc3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010bcd:	89 c3                	mov    ebx,eax
c0010bcf:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010bd9:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010bdf:	6a 20                	push   0x20
c0010be1:	6a 00                	push   0x0
c0010be3:	50                   	push   eax
c0010be4:	e8 97 f9 fe ff       	call   c0000580 <memset>
c0010be9:	83 c4 0c             	add    esp,0xc
c0010bec:	6a 44                	push   0x44
c0010bee:	6a 00                	push   0x0
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 8a f9 fe ff       	call   c0000580 <memset>
c0010bf6:	83 c4 18             	add    esp,0x18
c0010bf9:	89 d8                	mov    eax,ebx
c0010bfb:	5b                   	pop    ebx
c0010bfc:	c3                   	ret    

c0010bfd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010bfd:	53                   	push   ebx
c0010bfe:	b8 01 00 00 00       	mov    eax,0x1
c0010c03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c0b:	83 f9 10             	cmp    ecx,0x10
c0010c0e:	7f 21                	jg     c0010c31 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c14:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c17:	89 03                	mov    DWORD PTR [ebx],eax
c0010c19:	b8 01 00 00 00       	mov    eax,0x1
c0010c1e:	d3 e0                	shl    eax,cl
c0010c20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c24:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c27:	31 c0                	xor    eax,eax
c0010c29:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c31:	5b                   	pop    ebx
c0010c32:	c3                   	ret    

c0010c33 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c33:	55                   	push   ebp
c0010c34:	57                   	push   edi
c0010c35:	bf 08 00 00 00       	mov    edi,0x8
c0010c3a:	56                   	push   esi
c0010c3b:	53                   	push   ebx
c0010c3c:	83 ec 18             	sub    esp,0x18
c0010c3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c43:	68 0a 0a 02 c0       	push   0xc0020a0a
c0010c48:	e8 29 9e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	31 c9                	xor    ecx,ecx
c0010c52:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010c59:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010c5f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010c63:	99                   	cdq    
c0010c64:	f7 ff                	idiv   edi
c0010c66:	8d 42 24             	lea    eax,[edx+0x24]
c0010c69:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010c6d:	85 f6                	test   esi,esi
c0010c6f:	75 1a                	jne    c0010c8b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010c71:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010c75:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010c79:	50                   	push   eax
c0010c7a:	50                   	push   eax
c0010c7b:	52                   	push   edx
c0010c7c:	68 1b 0a 02 c0       	push   0xc0020a1b
c0010c81:	e8 f0 9d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	eb 1b                	jmp    c0010ca6 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010c8b:	41                   	inc    ecx
c0010c8c:	83 f9 08             	cmp    ecx,0x8
c0010c8f:	75 ce                	jne    c0010c5f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010c91:	83 ec 0c             	sub    esp,0xc
c0010c94:	be 01 00 00 00       	mov    esi,0x1
c0010c99:	68 3c 0a 02 c0       	push   0xc0020a3c
c0010c9e:	e8 d3 9d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	83 c4 0c             	add    esp,0xc
c0010ca9:	89 f0                	mov    eax,esi
c0010cab:	5b                   	pop    ebx
c0010cac:	5e                   	pop    esi
c0010cad:	5f                   	pop    edi
c0010cae:	5d                   	pop    ebp
c0010caf:	c3                   	ret    

c0010cb0 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010cb0:	55                   	push   ebp
c0010cb1:	57                   	push   edi
c0010cb2:	56                   	push   esi
c0010cb3:	53                   	push   ebx
c0010cb4:	51                   	push   ecx
c0010cb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010cb9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010cc0:	0f 84 b1 00 00 00    	je     c0010d77 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010cc6:	31 c9                	xor    ecx,ecx
c0010cc8:	bf 08 00 00 00       	mov    edi,0x8
c0010ccd:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010cd3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010cd6:	99                   	cdq    
c0010cd7:	f7 ff                	idiv   edi
c0010cd9:	89 d5                	mov    ebp,edx
c0010cdb:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010ce2:	85 d2                	test   edx,edx
c0010ce4:	0f 84 9e 00 00 00    	je     c0010d88 <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c0010cea:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010cf0:	88 d1                	mov    cl,dl
c0010cf2:	bf 01 00 00 00       	mov    edi,0x1
c0010cf7:	d3 e7                	shl    edi,cl
c0010cf9:	31 c9                	xor    ecx,ecx
c0010cfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cfe:	b8 01 00 00 00       	mov    eax,0x1
c0010d03:	d3 e0                	shl    eax,cl
c0010d05:	85 04 24             	test   DWORD PTR [esp],eax
c0010d08:	74 06                	je     c0010d10 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c0010d0a:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d0e:	75 67                	jne    c0010d77 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d10:	41                   	inc    ecx
c0010d11:	83 f9 11             	cmp    ecx,0x11
c0010d14:	75 e8                	jne    c0010cfe <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c0010d16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d19:	46                   	inc    esi
c0010d1a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d20:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c0010d2b:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d32:	09 f8                	or     eax,edi
c0010d34:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010d3a:	31 c0                	xor    eax,eax
c0010d3c:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010d44:	74 09                	je     c0010d4f <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c0010d46:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d4d:	eb 06                	jmp    c0010d55 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010d4f:	40                   	inc    eax
c0010d50:	83 f8 08             	cmp    eax,0x8
c0010d53:	75 e7                	jne    c0010d3c <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c0010d55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010d59:	83 fa 09             	cmp    edx,0x9
c0010d5c:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010d5f:	89 11                	mov    DWORD PTR [ecx],edx
c0010d61:	75 07                	jne    c0010d6a <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c0010d63:	b8 40 0b 01 c0       	mov    eax,0xc0010b40
c0010d68:	eb 31                	jmp    c0010d9b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010d6a:	83 f8 01             	cmp    eax,0x1
c0010d6d:	75 0c                	jne    c0010d7b <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c0010d6f:	f7 d7                	not    edi
c0010d71:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010d77:	31 c0                	xor    eax,eax
c0010d79:	eb 20                	jmp    c0010d9b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010d7b:	85 c0                	test   eax,eax
c0010d7d:	75 1c                	jne    c0010d9b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010d7f:	8b 04 95 e0 1d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde220]
c0010d86:	eb 13                	jmp    c0010d9b <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010d88:	41                   	inc    ecx
c0010d89:	46                   	inc    esi
c0010d8a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d90:	83 f9 08             	cmp    ecx,0x8
c0010d93:	0f 85 34 ff ff ff    	jne    c0010ccd <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010d99:	eb dc                	jmp    c0010d77 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d9b:	5a                   	pop    edx
c0010d9c:	5b                   	pop    ebx
c0010d9d:	5e                   	pop    esi
c0010d9e:	5f                   	pop    edi
c0010d9f:	5d                   	pop    ebp
c0010da0:	c3                   	ret    

c0010da1 <KiCheckSignalZ>:
c0010da1:	83 ec 10             	sub    esp,0x10
c0010da4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010da8:	50                   	push   eax
c0010da9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010db1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010db7:	e8 f4 fe ff ff       	call   c0010cb0 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010dbc:	5a                   	pop    edx
c0010dbd:	31 d2                	xor    edx,edx
c0010dbf:	59                   	pop    ecx
c0010dc0:	85 c0                	test   eax,eax
c0010dc2:	74 19                	je     c0010ddd <KiCheckSignalZ+0x3c>
c0010dc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010dca:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010dcd:	89 02                	mov    DWORD PTR [edx],eax
c0010dcf:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dda:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010ddd:	89 d0                	mov    eax,edx
c0010ddf:	83 c4 10             	add    esp,0x10
c0010de2:	c3                   	ret    

c0010de3 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010de3:	56                   	push   esi
c0010de4:	53                   	push   ebx
c0010de5:	bb 01 00 00 00       	mov    ebx,0x1
c0010dea:	52                   	push   edx
c0010deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010def:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010df3:	d3 e3                	shl    ebx,cl
c0010df5:	83 f9 10             	cmp    ecx,0x10
c0010df8:	7f 08                	jg     c0010e02 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010dfa:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e00:	75 10                	jne    c0010e12 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e02:	83 ec 0c             	sub    esp,0xc
c0010e05:	68 4d 0a 02 c0       	push   0xc0020a4d
c0010e0a:	e8 b6 f9 ff ff       	call   c00107c5 <KePanic(char const*)>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	f7 d3                	not    ebx
c0010e14:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e1a:	58                   	pop    eax
c0010e1b:	5b                   	pop    ebx
c0010e1c:	5e                   	pop    esi
c0010e1d:	c3                   	ret    

c0010e1e <KiFinishSignalZ>:
c0010e1e:	53                   	push   ebx
c0010e1f:	83 ec 10             	sub    esp,0x10
c0010e22:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e26:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e31:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e37:	e8 a7 ff ff ff       	call   c0010de3 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010e3c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010e42:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010e49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010e50:	83 c4 18             	add    esp,0x18
c0010e53:	5b                   	pop    ebx
c0010e54:	c3                   	ret    

c0010e55 <SysSeekDir(regs*)>:
c0010e55:	31 c0                	xor    eax,eax
c0010e57:	31 d2                	xor    edx,edx
c0010e59:	c3                   	ret    

c0010e5a <SysTellDir(regs*)>:
c0010e5a:	31 c0                	xor    eax,eax
c0010e5c:	31 d2                	xor    edx,edx
c0010e5e:	c3                   	ret    

c0010e5f <SysVerify(regs*)>:
c0010e5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e63:	31 d2                	xor    edx,edx
c0010e65:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e68:	c3                   	ret    

c0010e69 <SysGetArgc(regs*)>:
c0010e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e71:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010e77:	99                   	cdq    
c0010e78:	c3                   	ret    

c0010e79 <SysTTYName(regs*)>:
c0010e79:	b8 01 00 00 00       	mov    eax,0x1
c0010e7e:	31 d2                	xor    edx,edx
c0010e80:	c3                   	ret    

c0010e81 <SysFormatDisk(regs*)>:
c0010e81:	56                   	push   esi
c0010e82:	53                   	push   ebx
c0010e83:	83 ec 24             	sub    esp,0x24
c0010e86:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e8a:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010e90:	eb 32                	jmp    c0010ec4 <SysFormatDisk(regs*)+0x43>
c0010e92:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010e95:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010e98:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010e9a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010e9e:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ea1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ea5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010eac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010eaf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010eb7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010eba:	83 f8 08             	cmp    eax,0x8
c0010ebd:	89 c1                	mov    ecx,eax
c0010ebf:	75 14                	jne    c0010ed5 <SysFormatDisk(regs*)+0x54>
c0010ec1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010ec4:	85 db                	test   ebx,ebx
c0010ec6:	75 ca                	jne    c0010e92 <SysFormatDisk(regs*)+0x11>
c0010ec8:	b8 03 00 00 00       	mov    eax,0x3
c0010ecd:	31 d2                	xor    edx,edx
c0010ecf:	83 c4 24             	add    esp,0x24
c0010ed2:	5b                   	pop    ebx
c0010ed3:	5e                   	pop    esi
c0010ed4:	c3                   	ret    
c0010ed5:	85 c0                	test   eax,eax
c0010ed7:	74 13                	je     c0010eec <SysFormatDisk(regs*)+0x6b>
c0010ed9:	31 d2                	xor    edx,edx
c0010edb:	83 f9 09             	cmp    ecx,0x9
c0010ede:	b8 01 00 00 00       	mov    eax,0x1
c0010ee3:	74 ea                	je     c0010ecf <SysFormatDisk(regs*)+0x4e>
c0010ee5:	b8 02 00 00 00       	mov    eax,0x2
c0010eea:	eb e1                	jmp    c0010ecd <SysFormatDisk(regs*)+0x4c>
c0010eec:	31 c0                	xor    eax,eax
c0010eee:	eb dd                	jmp    c0010ecd <SysFormatDisk(regs*)+0x4c>

c0010ef0 <SysSetDiskVolumeLabel(regs*)>:
c0010ef0:	83 ec 1c             	sub    esp,0x1c
c0010ef3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010ef7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010efb:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010eff:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f02:	83 f8 19             	cmp    eax,0x19
c0010f05:	77 3d                	ja     c0010f44 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f07:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f0e:	85 c9                	test   ecx,ecx
c0010f10:	74 32                	je     c0010f44 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f12:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f15:	85 db                	test   ebx,ebx
c0010f17:	74 2b                	je     c0010f44 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f19:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f1f:	85 d2                	test   edx,edx
c0010f21:	74 21                	je     c0010f44 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f23:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f25:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f29:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f30:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f34:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f37:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f3b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010f3f:	83 c4 1c             	add    esp,0x1c
c0010f42:	99                   	cdq    
c0010f43:	c3                   	ret    
c0010f44:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f49:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f52:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010f56:	83 c4 1c             	add    esp,0x1c
c0010f59:	c3                   	ret    

c0010f5a <SysGetDiskVolumeLabel(regs*)>:
c0010f5a:	83 ec 2c             	sub    esp,0x2c
c0010f5d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010f61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f65:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010f69:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010f6d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f70:	83 fa 19             	cmp    edx,0x19
c0010f73:	77 4c                	ja     c0010fc1 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f75:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010f7c:	85 c9                	test   ecx,ecx
c0010f7e:	74 41                	je     c0010fc1 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f80:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010f83:	85 db                	test   ebx,ebx
c0010f85:	74 3a                	je     c0010fc1 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f87:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010f8a:	85 f6                	test   esi,esi
c0010f8c:	74 33                	je     c0010fc1 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f8e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 29                	je     c0010fc1 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010f98:	8b 38                	mov    edi,DWORD PTR [eax]
c0010f9a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010f9e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010fa2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010fa6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fad:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010fb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fb4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fb8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fbc:	83 c4 2c             	add    esp,0x2c
c0010fbf:	99                   	cdq    
c0010fc0:	c3                   	ret    
c0010fc1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fcb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fcf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fd3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fd7:	83 c4 2c             	add    esp,0x2c
c0010fda:	c3                   	ret    

c0010fdb <SysShutdown(regs*)>:
c0010fdb:	83 ec 1c             	sub    esp,0x1c
c0010fde:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010fea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fed:	85 c0                	test   eax,eax
c0010fef:	74 28                	je     c0011019 <SysShutdown(regs*)+0x3e>
c0010ff1:	83 f8 01             	cmp    eax,0x1
c0010ff4:	0f 84 8a 00 00 00    	je     c0011084 <SysShutdown(regs*)+0xa9>
c0010ffa:	83 f8 02             	cmp    eax,0x2
c0010ffd:	be ff ff ff ff       	mov    esi,0xffffffff
c0011002:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011007:	74 49                	je     c0011052 <SysShutdown(regs*)+0x77>
c0011009:	89 f0                	mov    eax,esi
c001100b:	89 fa                	mov    edx,edi
c001100d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011011:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011015:	83 c4 1c             	add    esp,0x1c
c0011018:	c3                   	ret    
c0011019:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001101e:	31 f6                	xor    esi,esi
c0011020:	31 ff                	xor    edi,edi
c0011022:	31 c9                	xor    ecx,ecx
c0011024:	8b 10                	mov    edx,DWORD PTR [eax]
c0011026:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001102a:	be ff ff ff ff       	mov    esi,0xffffffff
c001102f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011033:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011038:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001103c:	89 04 24             	mov    DWORD PTR [esp],eax
c001103f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011042:	89 f0                	mov    eax,esi
c0011044:	89 fa                	mov    edx,edi
c0011046:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001104a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001104e:	83 c4 1c             	add    esp,0x1c
c0011051:	c3                   	ret    
c0011052:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011057:	31 c9                	xor    ecx,ecx
c0011059:	8b 10                	mov    edx,DWORD PTR [eax]
c001105b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001105f:	31 c9                	xor    ecx,ecx
c0011061:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011065:	b9 01 00 00 00       	mov    ecx,0x1
c001106a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001106e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011071:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011074:	89 f0                	mov    eax,esi
c0011076:	89 fa                	mov    edx,edi
c0011078:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001107c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011080:	83 c4 1c             	add    esp,0x1c
c0011083:	c3                   	ret    
c0011084:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011089:	85 c0                	test   eax,eax
c001108b:	74 02                	je     c001108f <SysShutdown(regs*)+0xb4>
c001108d:	ff d0                	call   eax
c001108f:	31 f6                	xor    esi,esi
c0011091:	31 ff                	xor    edi,edi
c0011093:	89 f0                	mov    eax,esi
c0011095:	89 fa                	mov    edx,edi
c0011097:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001109b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001109f:	83 c4 1c             	add    esp,0x1c
c00110a2:	c3                   	ret    

c00110a3 <SysRealpath(regs*)>:
c00110a3:	53                   	push   ebx
c00110a4:	83 ec 18             	sub    esp,0x18
c00110a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ab:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110ae:	85 c9                	test   ecx,ecx
c00110b0:	74 39                	je     c00110eb <SysRealpath(regs*)+0x48>
c00110b2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110b5:	31 d2                	xor    edx,edx
c00110b7:	b8 01 00 00 00       	mov    eax,0x1
c00110bc:	85 db                	test   ebx,ebx
c00110be:	75 05                	jne    c00110c5 <SysRealpath(regs*)+0x22>
c00110c0:	83 c4 18             	add    esp,0x18
c00110c3:	5b                   	pop    ebx
c00110c4:	c3                   	ret    
c00110c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110cd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00110d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d4:	05 0c 01 00 00       	add    eax,0x10c
c00110d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110dd:	e8 6f 9d ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c00110e2:	31 c0                	xor    eax,eax
c00110e4:	31 d2                	xor    edx,edx
c00110e6:	83 c4 18             	add    esp,0x18
c00110e9:	5b                   	pop    ebx
c00110ea:	c3                   	ret    
c00110eb:	b8 01 00 00 00       	mov    eax,0x1
c00110f0:	31 d2                	xor    edx,edx
c00110f2:	eb f2                	jmp    c00110e6 <SysRealpath(regs*)+0x43>

c00110f4 <SysReadDir(regs*)>:
c00110f4:	53                   	push   ebx
c00110f5:	83 ec 38             	sub    esp,0x38
c00110f8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00110fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110ff:	83 f8 02             	cmp    eax,0x2
c0011102:	76 53                	jbe    c0011157 <SysReadDir(regs*)+0x63>
c0011104:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001110b:	77 56                	ja     c0011163 <SysReadDir(regs*)+0x6f>
c001110d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011110:	e8 a2 83 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c0011115:	85 c0                	test   eax,eax
c0011117:	74 4a                	je     c0011163 <SysReadDir(regs*)+0x6f>
c0011119:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c001111d:	31 d2                	xor    edx,edx
c001111f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011123:	8b 10                	mov    edx,DWORD PTR [eax]
c0011125:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011129:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001112c:	31 db                	xor    ebx,ebx
c001112e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0011132:	89 04 24             	mov    DWORD PTR [esp],eax
c0011135:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011139:	b9 10 01 00 00       	mov    ecx,0x110
c001113e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011142:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011145:	85 c0                	test   eax,eax
c0011147:	89 c1                	mov    ecx,eax
c0011149:	74 27                	je     c0011172 <SysReadDir(regs*)+0x7e>
c001114b:	31 d2                	xor    edx,edx
c001114d:	83 f9 07             	cmp    ecx,0x7
c0011150:	b8 02 00 00 00       	mov    eax,0x2
c0011155:	75 16                	jne    c001116d <SysReadDir(regs*)+0x79>
c0011157:	b8 01 00 00 00       	mov    eax,0x1
c001115c:	31 d2                	xor    edx,edx
c001115e:	83 c4 38             	add    esp,0x38
c0011161:	5b                   	pop    ebx
c0011162:	c3                   	ret    
c0011163:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011168:	ba ff ff ff ff       	mov    edx,0xffffffff
c001116d:	83 c4 38             	add    esp,0x38
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    
c0011172:	31 c0                	xor    eax,eax
c0011174:	31 d2                	xor    edx,edx
c0011176:	eb e6                	jmp    c001115e <SysReadDir(regs*)+0x6a>

c0011178 <SysIsATTY(regs*)>:
c0011178:	83 ec 1c             	sub    esp,0x1c
c001117b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001117f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011182:	83 f8 02             	cmp    eax,0x2
c0011185:	76 07                	jbe    c001118e <SysIsATTY(regs*)+0x16>
c0011187:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001118c:	75 22                	jne    c00111b0 <SysIsATTY(regs*)+0x38>
c001118e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011193:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011196:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001119c:	85 c0                	test   eax,eax
c001119e:	74 1c                	je     c00111bc <SysIsATTY(regs*)+0x44>
c00111a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00111a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00111a5:	ff 12                	call   DWORD PTR [edx]
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	83 c4 1c             	add    esp,0x1c
c00111ac:	0f b6 c0             	movzx  eax,al
c00111af:	c3                   	ret    
c00111b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00111b3:	e8 ff 82 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c00111b8:	85 c0                	test   eax,eax
c00111ba:	75 e4                	jne    c00111a0 <SysIsATTY(regs*)+0x28>
c00111bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111c6:	83 c4 1c             	add    esp,0x1c
c00111c9:	c3                   	ret    

c00111ca <SysSeek(regs*)>:
c00111ca:	83 ec 1c             	sub    esp,0x1c
c00111cd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00111d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111d5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00111d9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00111dc:	8d 71 fd             	lea    esi,[ecx-0x3]
c00111df:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00111e5:	77 3a                	ja     c0011221 <SysSeek(regs*)+0x57>
c00111e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00111ea:	e8 c8 82 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c00111ef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111f6:	31 d2                	xor    edx,edx
c00111f8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00111fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00111ff:	e8 70 9f ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011204:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011208:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001120c:	85 c0                	test   eax,eax
c001120e:	0f 95 c0             	setne  al
c0011211:	31 d2                	xor    edx,edx
c0011213:	0f b6 c0             	movzx  eax,al
c0011216:	f7 d8                	neg    eax
c0011218:	83 d2 00             	adc    edx,0x0
c001121b:	83 c4 1c             	add    esp,0x1c
c001121e:	f7 da                	neg    edx
c0011220:	c3                   	ret    
c0011221:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011226:	ba ff ff ff ff       	mov    edx,0xffffffff
c001122b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001122f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011233:	83 c4 1c             	add    esp,0x1c
c0011236:	c3                   	ret    

c0011237 <SysTell(regs*)>:
c0011237:	53                   	push   ebx
c0011238:	83 ec 18             	sub    esp,0x18
c001123b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001123f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011242:	83 f8 02             	cmp    eax,0x2
c0011245:	76 4d                	jbe    c0011294 <SysTell(regs*)+0x5d>
c0011247:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001124c:	76 19                	jbe    c0011267 <SysTell(regs*)+0x30>
c001124e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011251:	31 d2                	xor    edx,edx
c0011253:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011259:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011260:	83 c4 18             	add    esp,0x18
c0011263:	31 c0                	xor    eax,eax
c0011265:	5b                   	pop    ebx
c0011266:	c3                   	ret    
c0011267:	89 04 24             	mov    DWORD PTR [esp],eax
c001126a:	e8 48 82 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c001126f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011272:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011276:	89 04 24             	mov    DWORD PTR [esp],eax
c0011279:	e8 4c 9f ff ff       	call   c000b1ca <File::tell(unsigned long long*)>
c001127e:	85 c0                	test   eax,eax
c0011280:	0f 95 c0             	setne  al
c0011283:	31 d2                	xor    edx,edx
c0011285:	0f b6 c0             	movzx  eax,al
c0011288:	f7 d8                	neg    eax
c001128a:	83 d2 00             	adc    edx,0x0
c001128d:	83 c4 18             	add    esp,0x18
c0011290:	5b                   	pop    ebx
c0011291:	f7 da                	neg    edx
c0011293:	c3                   	ret    
c0011294:	83 c4 18             	add    esp,0x18
c0011297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001129c:	5b                   	pop    ebx
c001129d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112a2:	c3                   	ret    

c00112a3 <SysSize(regs*)>:
c00112a3:	53                   	push   ebx
c00112a4:	83 ec 28             	sub    esp,0x28
c00112a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00112ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112ae:	83 f8 02             	cmp    eax,0x2
c00112b1:	76 55                	jbe    c0011308 <SysSize(regs*)+0x65>
c00112b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112b8:	76 19                	jbe    c00112d3 <SysSize(regs*)+0x30>
c00112ba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112bd:	31 d2                	xor    edx,edx
c00112bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112cc:	83 c4 28             	add    esp,0x28
c00112cf:	31 c0                	xor    eax,eax
c00112d1:	5b                   	pop    ebx
c00112d2:	c3                   	ret    
c00112d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00112d6:	e8 dc 81 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c00112db:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c00112df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00112e3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00112e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00112ed:	e8 6a a0 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c00112f2:	85 c0                	test   eax,eax
c00112f4:	0f 95 c0             	setne  al
c00112f7:	31 d2                	xor    edx,edx
c00112f9:	0f b6 c0             	movzx  eax,al
c00112fc:	f7 d8                	neg    eax
c00112fe:	83 d2 00             	adc    edx,0x0
c0011301:	83 c4 28             	add    esp,0x28
c0011304:	5b                   	pop    ebx
c0011305:	f7 da                	neg    edx
c0011307:	c3                   	ret    
c0011308:	83 c4 28             	add    esp,0x28
c001130b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011310:	5b                   	pop    ebx
c0011311:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011316:	c3                   	ret    

c0011317 <SysSizeFromFilename(regs*)>:
c0011317:	83 ec 2c             	sub    esp,0x2c
c001131a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001131e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011322:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011326:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001132a:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001132d:	83 fb 02             	cmp    ebx,0x2
c0011330:	0f 86 97 00 00 00    	jbe    c00113cd <SysSizeFromFilename(regs*)+0xb6>
c0011336:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001133c:	76 24                	jbe    c0011362 <SysSizeFromFilename(regs*)+0x4b>
c001133e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011341:	31 d2                	xor    edx,edx
c0011343:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011349:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011350:	31 c0                	xor    eax,eax
c0011352:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011356:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001135a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001135e:	83 c4 2c             	add    esp,0x2c
c0011361:	c3                   	ret    
c0011362:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011369:	e8 98 67 ff ff       	call   c0007b06 <malloc>
c001136e:	89 c7                	mov    edi,eax
c0011370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011375:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011378:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001137c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001137f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011383:	e8 70 9c ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011388:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001138c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011390:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011393:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011396:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001139a:	e8 bd 9f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001139f:	85 ff                	test   edi,edi
c00113a1:	89 c3                	mov    ebx,eax
c00113a3:	74 08                	je     c00113ad <SysSizeFromFilename(regs*)+0x96>
c00113a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00113a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113ad:	31 c0                	xor    eax,eax
c00113af:	85 db                	test   ebx,ebx
c00113b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00113b5:	0f 95 c0             	setne  al
c00113b8:	31 d2                	xor    edx,edx
c00113ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113be:	f7 d8                	neg    eax
c00113c0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00113c4:	83 d2 00             	adc    edx,0x0
c00113c7:	83 c4 2c             	add    esp,0x2c
c00113ca:	f7 da                	neg    edx
c00113cc:	c3                   	ret    
c00113cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113db:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00113df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00113e3:	83 c4 2c             	add    esp,0x2c
c00113e6:	c3                   	ret    

c00113e7 <SysClose(regs*)>:
c00113e7:	53                   	push   ebx
c00113e8:	83 ec 18             	sub    esp,0x18
c00113eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113f2:	83 f8 02             	cmp    eax,0x2
c00113f5:	76 39                	jbe    c0011430 <SysClose(regs*)+0x49>
c00113f7:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113fd:	83 fa 01             	cmp    edx,0x1
c0011400:	76 25                	jbe    c0011427 <SysClose(regs*)+0x40>
c0011402:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011407:	77 27                	ja     c0011430 <SysClose(regs*)+0x49>
c0011409:	89 04 24             	mov    DWORD PTR [esp],eax
c001140c:	e8 a6 80 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c0011411:	89 04 24             	mov    DWORD PTR [esp],eax
c0011414:	89 c3                	mov    ebx,eax
c0011416:	e8 f9 9c ff ff       	call   c000b114 <File::close()>
c001141b:	85 db                	test   ebx,ebx
c001141d:	74 08                	je     c0011427 <SysClose(regs*)+0x40>
c001141f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011421:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011424:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011427:	83 c4 18             	add    esp,0x18
c001142a:	31 c0                	xor    eax,eax
c001142c:	5b                   	pop    ebx
c001142d:	31 d2                	xor    edx,edx
c001142f:	c3                   	ret    
c0011430:	83 c4 18             	add    esp,0x18
c0011433:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011438:	5b                   	pop    ebx
c0011439:	ba ff ff ff ff       	mov    edx,0xffffffff
c001143e:	c3                   	ret    

c001143f <SysOpenDir(regs*)>:
c001143f:	83 ec 1c             	sub    esp,0x1c
c0011442:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011446:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001144a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001144e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011451:	85 c0                	test   eax,eax
c0011453:	74 5c                	je     c00114b1 <SysOpenDir(regs*)+0x72>
c0011455:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001145c:	e8 a5 66 ff ff       	call   c0007b06 <malloc>
c0011461:	89 c6                	mov    esi,eax
c0011463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011468:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001146b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011472:	89 34 24             	mov    DWORD PTR [esp],esi
c0011475:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011479:	e8 9c a0 ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c001147e:	85 f6                	test   esi,esi
c0011480:	74 2f                	je     c00114b1 <SysOpenDir(regs*)+0x72>
c0011482:	89 34 24             	mov    DWORD PTR [esp],esi
c0011485:	e8 4e a1 ff ff       	call   c000b5d8 <Directory::open()>
c001148a:	85 c0                	test   eax,eax
c001148c:	75 23                	jne    c00114b1 <SysOpenDir(regs*)+0x72>
c001148e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011491:	e8 58 7d ff ff       	call   c00091ee <UnixFile::getFileDescriptor()>
c0011496:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011499:	89 02                	mov    DWORD PTR [edx],eax
c001149b:	c1 f8 1f             	sar    eax,0x1f
c001149e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114a1:	31 c0                	xor    eax,eax
c00114a3:	31 d2                	xor    edx,edx
c00114a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00114ad:	83 c4 1c             	add    esp,0x1c
c00114b0:	c3                   	ret    
c00114b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00114c3:	83 c4 1c             	add    esp,0x1c
c00114c6:	c3                   	ret    

c00114c7 <SysMakeDir(regs*)>:
c00114c7:	56                   	push   esi
c00114c8:	53                   	push   ebx
c00114c9:	83 ec 14             	sub    esp,0x14
c00114cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00114d3:	e8 2e 66 ff ff       	call   c0007b06 <malloc>
c00114d8:	89 c3                	mov    ebx,eax
c00114da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114f4:	e8 21 a0 ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c00114f9:	85 db                	test   ebx,ebx
c00114fb:	74 28                	je     c0011525 <SysMakeDir(regs*)+0x5e>
c00114fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011500:	e8 b3 a2 ff ff       	call   c000b7b8 <Directory::create()>
c0011505:	89 c6                	mov    esi,eax
c0011507:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001150c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001150f:	31 c0                	xor    eax,eax
c0011511:	85 f6                	test   esi,esi
c0011513:	0f 95 c0             	setne  al
c0011516:	31 d2                	xor    edx,edx
c0011518:	f7 d8                	neg    eax
c001151a:	83 d2 00             	adc    edx,0x0
c001151d:	83 c4 14             	add    esp,0x14
c0011520:	5b                   	pop    ebx
c0011521:	f7 da                	neg    edx
c0011523:	5e                   	pop    esi
c0011524:	c3                   	ret    
c0011525:	83 c4 14             	add    esp,0x14
c0011528:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001152d:	5b                   	pop    ebx
c001152e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011533:	5e                   	pop    esi
c0011534:	c3                   	ret    

c0011535 <SysCloseDir(regs*)>:
c0011535:	53                   	push   ebx
c0011536:	ba ff ff ff ff       	mov    edx,0xffffffff
c001153b:	83 ec 18             	sub    esp,0x18
c001153e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011542:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011545:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001154a:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001154d:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011553:	77 22                	ja     c0011577 <SysCloseDir(regs*)+0x42>
c0011555:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011558:	e8 5a 7f ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c001155d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011560:	89 c3                	mov    ebx,eax
c0011562:	e8 cd a0 ff ff       	call   c000b634 <Directory::close()>
c0011567:	85 db                	test   ebx,ebx
c0011569:	74 08                	je     c0011573 <SysCloseDir(regs*)+0x3e>
c001156b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001156d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011570:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011573:	31 c0                	xor    eax,eax
c0011575:	31 d2                	xor    edx,edx
c0011577:	83 c4 18             	add    esp,0x18
c001157a:	5b                   	pop    ebx
c001157b:	c3                   	ret    

c001157c <SysWait(regs*)>:
c001157c:	83 ec 1c             	sub    esp,0x1c
c001157f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011583:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011586:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001158a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001158d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011591:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011594:	89 04 24             	mov    DWORD PTR [esp],eax
c0011597:	e8 50 3d 00 00       	call   c00152ec <waitTask(int, int*, int)>
c001159c:	83 c4 1c             	add    esp,0x1c
c001159f:	99                   	cdq    
c00115a0:	c3                   	ret    

c00115a1 <SysNotImpl(regs*)>:
c00115a1:	83 ec 1c             	sub    esp,0x1c
c00115a4:	c7 04 24 5e 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a5e
c00115ab:	e8 15 f2 ff ff       	call   c00107c5 <KePanic(char const*)>
c00115b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ba:	83 c4 1c             	add    esp,0x1c
c00115bd:	c3                   	ret    

c00115be <SysPanic(regs*)>:
c00115be:	83 ec 1c             	sub    esp,0x1c
c00115c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115c5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00115cb:	e8 f5 f1 ff ff       	call   c00107c5 <KePanic(char const*)>
c00115d0:	b8 01 00 00 00       	mov    eax,0x1
c00115d5:	31 d2                	xor    edx,edx
c00115d7:	83 c4 1c             	add    esp,0x1c
c00115da:	c3                   	ret    

c00115db <SysRmdir(regs*)>:
c00115db:	56                   	push   esi
c00115dc:	53                   	push   ebx
c00115dd:	83 ec 14             	sub    esp,0x14
c00115e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115e4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115e7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00115ee:	e8 13 65 ff ff       	call   c0007b06 <malloc>
c00115f3:	89 c3                	mov    ebx,eax
c00115f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115fd:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011601:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011608:	e8 eb 99 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001160d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011610:	e8 19 9c ff ff       	call   c000b22e <File::unlink()>
c0011615:	85 db                	test   ebx,ebx
c0011617:	89 c6                	mov    esi,eax
c0011619:	74 08                	je     c0011623 <SysRmdir(regs*)+0x48>
c001161b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001161d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011620:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011623:	31 c0                	xor    eax,eax
c0011625:	85 f6                	test   esi,esi
c0011627:	0f 95 c0             	setne  al
c001162a:	31 d2                	xor    edx,edx
c001162c:	f7 d8                	neg    eax
c001162e:	83 d2 00             	adc    edx,0x0
c0011631:	83 c4 14             	add    esp,0x14
c0011634:	5b                   	pop    ebx
c0011635:	f7 da                	neg    edx
c0011637:	5e                   	pop    esi
c0011638:	c3                   	ret    

c0011639 <SysUnlink(regs*)>:
c0011639:	56                   	push   esi
c001163a:	53                   	push   ebx
c001163b:	83 ec 14             	sub    esp,0x14
c001163e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011642:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011645:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001164c:	e8 b5 64 ff ff       	call   c0007b06 <malloc>
c0011651:	89 c3                	mov    ebx,eax
c0011653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011658:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001165b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001165f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011666:	e8 8d 99 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001166b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001166e:	e8 bb 9b ff ff       	call   c000b22e <File::unlink()>
c0011673:	85 db                	test   ebx,ebx
c0011675:	89 c6                	mov    esi,eax
c0011677:	74 08                	je     c0011681 <SysUnlink(regs*)+0x48>
c0011679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001167b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001167e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011681:	31 c0                	xor    eax,eax
c0011683:	85 f6                	test   esi,esi
c0011685:	0f 95 c0             	setne  al
c0011688:	31 d2                	xor    edx,edx
c001168a:	f7 d8                	neg    eax
c001168c:	83 d2 00             	adc    edx,0x0
c001168f:	83 c4 14             	add    esp,0x14
c0011692:	5b                   	pop    ebx
c0011693:	f7 da                	neg    edx
c0011695:	5e                   	pop    esi
c0011696:	c3                   	ret    

c0011697 <SysGetArgv(regs*)>:
c0011697:	83 ec 1c             	sub    esp,0x1c
c001169a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001169e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116a1:	85 c0                	test   eax,eax
c00116a3:	78 2b                	js     c00116d0 <SysGetArgv(regs*)+0x39>
c00116a5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116ab:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116ae:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116b4:	7d 1a                	jge    c00116d0 <SysGetArgv(regs*)+0x39>
c00116b6:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116bd:	85 c0                	test   eax,eax
c00116bf:	74 17                	je     c00116d8 <SysGetArgv(regs*)+0x41>
c00116c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116c5:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00116cb:	e8 50 f0 fe ff       	call   c0000720 <strcpy>
c00116d0:	31 c0                	xor    eax,eax
c00116d2:	31 d2                	xor    edx,edx
c00116d4:	83 c4 1c             	add    esp,0x1c
c00116d7:	c3                   	ret    
c00116d8:	b8 01 00 00 00       	mov    eax,0x1
c00116dd:	31 d2                	xor    edx,edx
c00116df:	83 c4 1c             	add    esp,0x1c
c00116e2:	c3                   	ret    

c00116e3 <SysUSleep(regs*)>:
c00116e3:	53                   	push   ebx
c00116e4:	ba 64 00 00 00       	mov    edx,0x64
c00116e9:	83 ec 18             	sub    esp,0x18
c00116ec:	31 db                	xor    ebx,ebx
c00116ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116f2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00116f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116f8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00116fc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011700:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011704:	89 04 24             	mov    DWORD PTR [esp],eax
c0011707:	e8 94 cc 00 00       	call   c001e3a0 <__udivdi3>
c001170c:	89 04 24             	mov    DWORD PTR [esp],eax
c001170f:	e8 a8 3c 00 00       	call   c00153bc <milliTenthSleep(unsigned int)>
c0011714:	83 c4 18             	add    esp,0x18
c0011717:	31 c0                	xor    eax,eax
c0011719:	5b                   	pop    ebx
c001171a:	31 d2                	xor    edx,edx
c001171c:	c3                   	ret    

c001171d <SysSpawn(regs*)>:
c001171d:	83 ec 1c             	sub    esp,0x1c
c0011720:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011724:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011728:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001172c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001172f:	85 f6                	test   esi,esi
c0011731:	75 10                	jne    c0011743 <SysSpawn(regs*)+0x26>
c0011733:	31 c0                	xor    eax,eax
c0011735:	31 d2                	xor    edx,edx
c0011737:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001173b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001173f:	83 c4 1c             	add    esp,0x1c
c0011742:	c3                   	ret    
c0011743:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001174a:	e8 b7 63 ff ff       	call   c0007b06 <malloc>
c001174f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011752:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011755:	89 c6                	mov    esi,eax
c0011757:	31 c0                	xor    eax,eax
c0011759:	85 c9                	test   ecx,ecx
c001175b:	75 08                	jne    c0011765 <SysSpawn(regs*)+0x48>
c001175d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011762:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001176d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011770:	89 34 24             	mov    DWORD PTR [esp],esi
c0011773:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011777:	e8 fc 32 00 00       	call   c0014a78 <Process::Process(char const*, Process*, char**)>
c001177c:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011783:	75 ae                	jne    c0011733 <SysSpawn(regs*)+0x16>
c0011785:	89 34 24             	mov    DWORD PTR [esp],esi
c0011788:	e8 ff 37 00 00       	call   c0014f8c <Process::createUserThread()>
c001178d:	8b 06                	mov    eax,DWORD PTR [esi]
c001178f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011793:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011797:	83 c4 1c             	add    esp,0x1c
c001179a:	99                   	cdq    
c001179b:	c3                   	ret    

c001179c <SysGetEnv(regs*)>:
c001179c:	83 ec 2c             	sub    esp,0x2c
c001179f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00117a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00117a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00117ab:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00117af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117b4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117b7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00117c0:	e8 b8 ee ff ff       	call   c001067d <Krnl::getProcessTotalEnvCount(Process*)>
c00117c5:	39 c7                	cmp    edi,eax
c00117c7:	7c 1b                	jl     c00117e4 <SysGetEnv(regs*)+0x48>
c00117c9:	31 c0                	xor    eax,eax
c00117cb:	31 d2                	xor    edx,edx
c00117cd:	85 f6                	test   esi,esi
c00117cf:	74 03                	je     c00117d4 <SysGetEnv(regs*)+0x38>
c00117d1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00117dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00117e0:	83 c4 2c             	add    esp,0x2c
c00117e3:	c3                   	ret    
c00117e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00117e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00117ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117f2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00117f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00117f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00117fc:	e8 9c ee ff ff       	call   c001069d <Krnl::getProcessEnvPair(Process*, int)>
c0011801:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011804:	83 ec 04             	sub    esp,0x4
c0011807:	85 d2                	test   edx,edx
c0011809:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001180d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011811:	75 28                	jne    c001183b <SysGetEnv(regs*)+0x9f>
c0011813:	89 04 24             	mov    DWORD PTR [esp],eax
c0011816:	e8 05 ee fe ff       	call   c0000620 <strlen>
c001181b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001181e:	89 c3                	mov    ebx,eax
c0011820:	e8 fb ed fe ff       	call   c0000620 <strlen>
c0011825:	31 d2                	xor    edx,edx
c0011827:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001182b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001182f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011833:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011837:	83 c4 2c             	add    esp,0x2c
c001183a:	c3                   	ret    
c001183b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001183e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011842:	89 34 24             	mov    DWORD PTR [esp],esi
c0011845:	e8 d6 ee fe ff       	call   c0000720 <strcpy>
c001184a:	b8 78 0a 02 c0       	mov    eax,0xc0020a78
c001184f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011853:	89 34 24             	mov    DWORD PTR [esp],esi
c0011856:	e8 d5 f0 fe ff       	call   c0000930 <strcat>
c001185b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001185f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011862:	e8 c9 f0 fe ff       	call   c0000930 <strcat>
c0011867:	31 c0                	xor    eax,eax
c0011869:	31 d2                	xor    edx,edx
c001186b:	eb be                	jmp    c001182b <SysGetEnv(regs*)+0x8f>

c001186d <SysSetFatAttrib(regs*)>:
c001186d:	83 ec 1c             	sub    esp,0x1c
c0011870:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0011874:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011878:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001187c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011880:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011883:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001188a:	e8 77 62 ff ff       	call   c0007b06 <malloc>
c001188f:	89 c3                	mov    ebx,eax
c0011891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011899:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001189d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a4:	e8 4f 97 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00118a9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00118ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118af:	0f b6 d4             	movzx  edx,ah
c00118b2:	0f b6 c0             	movzx  eax,al
c00118b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00118b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118bd:	e8 06 9a ff ff       	call   c000b2c8 <File::chfatattr(unsigned char, unsigned char)>
c00118c2:	85 db                	test   ebx,ebx
c00118c4:	89 c6                	mov    esi,eax
c00118c6:	74 08                	je     c00118d0 <SysSetFatAttrib(regs*)+0x63>
c00118c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118d0:	31 c0                	xor    eax,eax
c00118d2:	85 f6                	test   esi,esi
c00118d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118d8:	0f 95 c0             	setne  al
c00118db:	31 d2                	xor    edx,edx
c00118dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00118e1:	f7 d8                	neg    eax
c00118e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00118e7:	83 d2 00             	adc    edx,0x0
c00118ea:	83 c4 1c             	add    esp,0x1c
c00118ed:	f7 da                	neg    edx
c00118ef:	c3                   	ret    

c00118f0 <SysPipe(regs*)>:
c00118f0:	83 ec 1c             	sub    esp,0x1c
c00118f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00118f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00118ff:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011903:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011906:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011909:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011910:	e8 f1 61 ff ff       	call   c0007b06 <malloc>
c0011915:	89 c3                	mov    ebx,eax
c0011917:	b8 00 50 00 00       	mov    eax,0x5000
c001191c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011920:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011923:	e8 22 6b ff ff       	call   c000844a <Pipe::Pipe(int)>
c0011928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001192b:	e8 be 78 ff ff       	call   c00091ee <UnixFile::getFileDescriptor()>
c0011930:	89 07                	mov    DWORD PTR [edi],eax
c0011932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011935:	e8 b4 78 ff ff       	call   c00091ee <UnixFile::getFileDescriptor()>
c001193a:	31 d2                	xor    edx,edx
c001193c:	89 06                	mov    DWORD PTR [esi],eax
c001193e:	31 c0                	xor    eax,eax
c0011940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011944:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011948:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001194c:	83 c4 1c             	add    esp,0x1c
c001194f:	c3                   	ret    

c0011950 <SysGetUnixTime(regs*)>:
c0011950:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011955:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001195b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001195f:	e9 90 a0 ff ff       	jmp    c000b9f4 <Clock::timeInSecondsLocal()>

c0011964 <string_ends_with(char const*, char const*)>:
c0011964:	83 ec 1c             	sub    esp,0x1c
c0011967:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001196b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001196f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0011973:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011977:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001197b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001197e:	e8 9d ec fe ff       	call   c0000620 <strlen>
c0011983:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011986:	89 c6                	mov    esi,eax
c0011988:	e8 93 ec fe ff       	call   c0000620 <strlen>
c001198d:	31 d2                	xor    edx,edx
c001198f:	39 c6                	cmp    esi,eax
c0011991:	7d 12                	jge    c00119a5 <string_ends_with(char const*, char const*)+0x41>
c0011993:	89 d0                	mov    eax,edx
c0011995:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011999:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001199d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119a1:	83 c4 1c             	add    esp,0x1c
c00119a4:	c3                   	ret    
c00119a5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00119a9:	29 c6                	sub    esi,eax
c00119ab:	01 f3                	add    ebx,esi
c00119ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119b0:	e8 8b ee fe ff       	call   c0000840 <strcmp>
c00119b5:	31 d2                	xor    edx,edx
c00119b7:	85 c0                	test   eax,eax
c00119b9:	0f 94 c2             	sete   dl
c00119bc:	eb d5                	jmp    c0011993 <string_ends_with(char const*, char const*)+0x2f>

c00119be <SysOpen(regs*)>:
c00119be:	56                   	push   esi
c00119bf:	53                   	push   ebx
c00119c0:	81 ec 14 01 00 00    	sub    esp,0x114
c00119c6:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c00119cd:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c00119d0:	85 c9                	test   ecx,ecx
c00119d2:	0f 84 c2 01 00 00    	je     c0011b9a <SysOpen(regs*)+0x1dc>
c00119d8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119db:	85 c0                	test   eax,eax
c00119dd:	0f 84 b7 01 00 00    	je     c0011b9a <SysOpen(regs*)+0x1dc>
c00119e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119e7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00119eb:	ba 7a 0a 02 c0       	mov    edx,0xc0020a7a
c00119f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00119f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119f7:	e8 55 94 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c00119fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119ff:	e8 1c ec fe ff       	call   c0000620 <strlen>
c0011a04:	48                   	dec    eax
c0011a05:	74 29                	je     c0011a30 <SysOpen(regs*)+0x72>
c0011a07:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c0011a0c:	80 fa 2e             	cmp    dl,0x2e
c0011a0f:	74 1a                	je     c0011a2b <SysOpen(regs*)+0x6d>
c0011a11:	80 fa 3a             	cmp    dl,0x3a
c0011a14:	74 15                	je     c0011a2b <SysOpen(regs*)+0x6d>
c0011a16:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0011a1a:	48                   	dec    eax
c0011a1b:	74 13                	je     c0011a30 <SysOpen(regs*)+0x72>
c0011a1d:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c0011a21:	80 fa 3a             	cmp    dl,0x3a
c0011a24:	74 05                	je     c0011a2b <SysOpen(regs*)+0x6d>
c0011a26:	80 fa 2e             	cmp    dl,0x2e
c0011a29:	75 eb                	jne    c0011a16 <SysOpen(regs*)+0x58>
c0011a2b:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c0011a30:	b8 7e 0a 02 c0       	mov    eax,0xc0020a7e
c0011a35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a3f:	e8 20 ff ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011a44:	85 c0                	test   eax,eax
c0011a46:	74 1d                	je     c0011a65 <SysOpen(regs*)+0xa7>
c0011a48:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a4b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011a51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a58:	81 c4 14 01 00 00    	add    esp,0x114
c0011a5e:	31 c0                	xor    eax,eax
c0011a60:	5b                   	pop    ebx
c0011a61:	31 d2                	xor    edx,edx
c0011a63:	5e                   	pop    esi
c0011a64:	c3                   	ret    
c0011a65:	b8 83 0a 02 c0       	mov    eax,0xc0020a83
c0011a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a6e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a71:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a74:	e8 eb fe ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011a79:	85 c0                	test   eax,eax
c0011a7b:	75 cb                	jne    c0011a48 <SysOpen(regs*)+0x8a>
c0011a7d:	b8 7f 0a 02 c0       	mov    eax,0xc0020a7f
c0011a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a86:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a89:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a8c:	e8 af ed fe ff       	call   c0000840 <strcmp>
c0011a91:	85 c0                	test   eax,eax
c0011a93:	74 b3                	je     c0011a48 <SysOpen(regs*)+0x8a>
c0011a95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a98:	b8 7e 0a 02 c0       	mov    eax,0xc0020a7e
c0011a9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011aa1:	e8 be fe ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011aa6:	85 c0                	test   eax,eax
c0011aa8:	75 9e                	jne    c0011a48 <SysOpen(regs*)+0x8a>
c0011aaa:	b8 88 0a 02 c0       	mov    eax,0xc0020a88
c0011aaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ab3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011ab6:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ab9:	e8 a6 fe ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011abe:	85 c0                	test   eax,eax
c0011ac0:	0f 85 e7 00 00 00    	jne    c0011bad <SysOpen(regs*)+0x1ef>
c0011ac6:	b9 8d 0a 02 c0       	mov    ecx,0xc0020a8d
c0011acb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011acf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ad5:	e8 8a fe ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011ada:	85 c0                	test   eax,eax
c0011adc:	0f 85 cb 00 00 00    	jne    c0011bad <SysOpen(regs*)+0x1ef>
c0011ae2:	ba 89 0a 02 c0       	mov    edx,0xc0020a89
c0011ae7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011aeb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011aee:	89 04 24             	mov    DWORD PTR [esp],eax
c0011af1:	e8 4a ed fe ff       	call   c0000840 <strcmp>
c0011af6:	85 c0                	test   eax,eax
c0011af8:	0f 84 af 00 00 00    	je     c0011bad <SysOpen(regs*)+0x1ef>
c0011afe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b01:	b8 88 0a 02 c0       	mov    eax,0xc0020a88
c0011b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b0a:	e8 55 fe ff ff       	call   c0011964 <string_ends_with(char const*, char const*)>
c0011b0f:	85 c0                	test   eax,eax
c0011b11:	0f 85 96 00 00 00    	jne    c0011bad <SysOpen(regs*)+0x1ef>
c0011b17:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011b1e:	e8 e3 5f ff ff       	call   c0007b06 <malloc>
c0011b23:	89 c3                	mov    ebx,eax
c0011b25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011b31:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b3b:	e8 b8 94 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011b40:	85 db                	test   ebx,ebx
c0011b42:	74 56                	je     c0011b9a <SysOpen(regs*)+0x1dc>
c0011b44:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011b47:	0f b6 c2             	movzx  eax,dl
c0011b4a:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0011b4d:	89 d0                	mov    eax,edx
c0011b4f:	83 e0 01             	and    eax,0x1
c0011b52:	f6 c2 02             	test   dl,0x2
c0011b55:	74 03                	je     c0011b5a <SysOpen(regs*)+0x19c>
c0011b57:	83 c8 02             	or     eax,0x2
c0011b5a:	f6 c2 04             	test   dl,0x4
c0011b5d:	74 03                	je     c0011b62 <SysOpen(regs*)+0x1a4>
c0011b5f:	83 c8 04             	or     eax,0x4
c0011b62:	f6 c2 08             	test   dl,0x8
c0011b65:	74 03                	je     c0011b6a <SysOpen(regs*)+0x1ac>
c0011b67:	83 c8 0a             	or     eax,0xa
c0011b6a:	f6 c2 10             	test   dl,0x10
c0011b6d:	74 03                	je     c0011b72 <SysOpen(regs*)+0x1b4>
c0011b6f:	83 c8 12             	or     eax,0x12
c0011b72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b79:	e8 38 95 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011b7e:	85 c0                	test   eax,eax
c0011b80:	75 18                	jne    c0011b9a <SysOpen(regs*)+0x1dc>
c0011b82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b85:	e8 64 76 ff ff       	call   c00091ee <UnixFile::getFileDescriptor()>
c0011b8a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0011b8d:	89 02                	mov    DWORD PTR [edx],eax
c0011b8f:	c1 f8 1f             	sar    eax,0x1f
c0011b92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b95:	e9 be fe ff ff       	jmp    c0011a58 <SysOpen(regs*)+0x9a>
c0011b9a:	81 c4 14 01 00 00    	add    esp,0x114
c0011ba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ba5:	5b                   	pop    ebx
c0011ba6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bab:	5e                   	pop    esi
c0011bac:	c3                   	ret    
c0011bad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011bb0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011bb6:	e9 96 fe ff ff       	jmp    c0011a51 <SysOpen(regs*)+0x93>

c0011bbb <KeSystemCall(regs*, void*)>:
c0011bbb:	53                   	push   ebx
c0011bbc:	83 ec 08             	sub    esp,0x8
c0011bbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bc3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011bc6:	83 f8 3b             	cmp    eax,0x3b
c0011bc9:	77 16                	ja     c0011be1 <KeSystemCall(regs*, void*)+0x26>
c0011bcb:	8b 14 85 40 1e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde1c0]
c0011bd2:	85 d2                	test   edx,edx
c0011bd4:	74 0b                	je     c0011be1 <KeSystemCall(regs*, void*)+0x26>
c0011bd6:	83 ec 0c             	sub    esp,0xc
c0011bd9:	53                   	push   ebx
c0011bda:	ff d2                	call   edx
c0011bdc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011bdf:	eb 0d                	jmp    c0011bee <KeSystemCall(regs*, void*)+0x33>
c0011be1:	52                   	push   edx
c0011be2:	52                   	push   edx
c0011be3:	50                   	push   eax
c0011be4:	68 92 0a 02 c0       	push   0xc0020a92
c0011be9:	e8 88 8e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011bf6:	83 c4 08             	add    esp,0x8
c0011bf9:	31 d2                	xor    edx,edx
c0011bfb:	5b                   	pop    ebx
c0011bfc:	c3                   	ret    
c0011bfd:	66 90                	xchg   ax,ax
c0011bff:	90                   	nop

c0011c00 <KeSwitchEndian16(unsigned short)>:
c0011c00:	83 ec 04             	sub    esp,0x4
c0011c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c07:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c0b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c0f:	c1 f8 08             	sar    eax,0x8
c0011c12:	0f bf d0             	movsx  edx,ax
c0011c15:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c19:	c1 e0 08             	shl    eax,0x8
c0011c1c:	98                   	cwde   
c0011c1d:	09 d0                	or     eax,edx
c0011c1f:	98                   	cwde   
c0011c20:	0f b7 c0             	movzx  eax,ax
c0011c23:	83 c4 04             	add    esp,0x4
c0011c26:	c3                   	ret    
c0011c27:	90                   	nop

c0011c28 <KeSwitchEndian32(unsigned int)>:
c0011c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c2c:	c1 e8 18             	shr    eax,0x18
c0011c2f:	89 c2                	mov    edx,eax
c0011c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c35:	c1 e0 08             	shl    eax,0x8
c0011c38:	25 00 00 ff 00       	and    eax,0xff0000
c0011c3d:	09 c2                	or     edx,eax
c0011c3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c43:	c1 e8 08             	shr    eax,0x8
c0011c46:	25 00 ff 00 00       	and    eax,0xff00
c0011c4b:	09 c2                	or     edx,eax
c0011c4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c51:	c1 e0 18             	shl    eax,0x18
c0011c54:	09 d0                	or     eax,edx
c0011c56:	c3                   	ret    
c0011c57:	90                   	nop

c0011c58 <EthernetCRC32(unsigned char*, int)>:
c0011c58:	83 ec 10             	sub    esp,0x10
c0011c5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011c60:	75 0a                	jne    c0011c6c <EthernetCRC32(unsigned char*, int)+0x14>
c0011c62:	b8 00 00 00 00       	mov    eax,0x0
c0011c67:	e9 8c 00 00 00       	jmp    c0011cf8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011c71:	7f 09                	jg     c0011c7c <EthernetCRC32(unsigned char*, int)+0x24>
c0011c73:	b8 00 00 00 00       	mov    eax,0x0
c0011c78:	eb 7e                	jmp    c0011cf8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c7a:	66 90                	xchg   ax,ax
c0011c7c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c90:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c94:	7d 5a                	jge    c0011cf0 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c9e:	01 d0                	add    eax,edx
c0011ca0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011ca3:	0f b6 c0             	movzx  eax,al
c0011ca6:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011caa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cb2:	66 90                	xchg   ax,ax
c0011cb4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011cb9:	7f 2d                	jg     c0011ce8 <EthernetCRC32(unsigned char*, int)+0x90>
c0011cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbf:	83 e0 01             	and    eax,0x1
c0011cc2:	74 10                	je     c0011cd4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc8:	d1 e8                	shr    eax,1
c0011cca:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011ccf:	eb 0b                	jmp    c0011cdc <EthernetCRC32(unsigned char*, int)+0x84>
c0011cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd8:	d1 e8                	shr    eax,1
c0011cda:	66 90                	xchg   ax,ax
c0011cdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ce0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011ce4:	eb ce                	jmp    c0011cb4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011ce6:	66 90                	xchg   ax,ax
c0011ce8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011cec:	eb 9e                	jmp    c0011c8c <EthernetCRC32(unsigned char*, int)+0x34>
c0011cee:	66 90                	xchg   ax,ax
c0011cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf4:	f7 d0                	not    eax
c0011cf6:	66 90                	xchg   ax,ax
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	c3                   	ret    

c0011cfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011cfc:	83 ec 3c             	sub    esp,0x3c
c0011cff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d03:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0011d08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d14:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011d18:	3d 06 08 00 00       	cmp    eax,0x806
c0011d1d:	75 11                	jne    c0011d30 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011d1f:	c7 04 24 a6 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa6
c0011d26:	e8 4b 8d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011d2b:	eb 1f                	jmp    c0011d4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d34:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011d38:	3d 00 08 00 00       	cmp    eax,0x800
c0011d3d:	75 0d                	jne    c0011d4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011d3f:	c7 04 24 bc 0a 02 c0 	mov    DWORD PTR [esp],0xc0020abc
c0011d46:	e8 2b 8d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011d4b:	90                   	nop
c0011d4c:	90                   	nop
c0011d4d:	83 c4 3c             	add    esp,0x3c
c0011d50:	c3                   	ret    

c0011d51 <CmOpen(char const*)>:
c0011d51:	57                   	push   edi
c0011d52:	56                   	push   esi
c0011d53:	53                   	push   ebx
c0011d54:	83 ec 1c             	sub    esp,0x1c
c0011d57:	6a 30                	push   0x30
c0011d59:	e8 a8 5d ff ff       	call   c0007b06 <malloc>
c0011d5e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d65:	89 c3                	mov    ebx,eax
c0011d67:	e8 9a 5d ff ff       	call   c0007b06 <malloc>
c0011d6c:	83 c4 0c             	add    esp,0xc
c0011d6f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d79:	89 c6                	mov    esi,eax
c0011d7b:	50                   	push   eax
c0011d7c:	e8 77 92 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011d81:	83 c4 0c             	add    esp,0xc
c0011d84:	89 33                	mov    DWORD PTR [ebx],esi
c0011d86:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d8a:	50                   	push   eax
c0011d8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d8f:	50                   	push   eax
c0011d90:	56                   	push   esi
c0011d91:	e8 c6 95 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0011d96:	5a                   	pop    edx
c0011d97:	59                   	pop    ecx
c0011d98:	6a 01                	push   0x1
c0011d9a:	ff 33                	push   DWORD PTR [ebx]
c0011d9c:	e8 15 93 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011da1:	5e                   	pop    esi
c0011da2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011da6:	e8 5b 5d ff ff       	call   c0007b06 <malloc>
c0011dab:	5a                   	pop    edx
c0011dac:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011db0:	89 c7                	mov    edi,eax
c0011db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011db4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011db6:	56                   	push   esi
c0011db7:	57                   	push   edi
c0011db8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dc0:	50                   	push   eax
c0011dc1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dc4:	83 c4 14             	add    esp,0x14
c0011dc7:	ff 33                	push   DWORD PTR [ebx]
c0011dc9:	e8 46 93 ff ff       	call   c000b114 <File::close()>
c0011dce:	59                   	pop    ecx
c0011dcf:	58                   	pop    eax
c0011dd0:	6a 13                	push   0x13
c0011dd2:	ff 33                	push   DWORD PTR [ebx]
c0011dd4:	e8 dd 92 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011dd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ddb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ddd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011de0:	57                   	push   edi
c0011de1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011de5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011de9:	50                   	push   eax
c0011dea:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ded:	83 c4 14             	add    esp,0x14
c0011df0:	57                   	push   edi
c0011df1:	e8 23 5d ff ff       	call   c0007b19 <free>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011dfc:	75 10                	jne    c0011e0e <CmOpen(char const*)+0xbd>
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	68 d1 0a 02 c0       	push   0xc0020ad1
c0011e06:	e8 ba e9 ff ff       	call   c00107c5 <KePanic(char const*)>
c0011e0b:	83 c4 10             	add    esp,0x10
c0011e0e:	50                   	push   eax
c0011e0f:	6a 00                	push   0x0
c0011e11:	6a 00                	push   0x0
c0011e13:	ff 33                	push   DWORD PTR [ebx]
c0011e15:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e18:	e8 57 93 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011e1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e21:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e24:	57                   	push   edi
c0011e25:	6a 00                	push   0x0
c0011e27:	6a 2b                	push   0x2b
c0011e29:	50                   	push   eax
c0011e2a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e2d:	83 c4 1c             	add    esp,0x1c
c0011e30:	6a 00                	push   0x0
c0011e32:	6a 00                	push   0x0
c0011e34:	ff 33                	push   DWORD PTR [ebx]
c0011e36:	e8 39 93 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011e3b:	83 c4 0c             	add    esp,0xc
c0011e3e:	6a 08                	push   0x8
c0011e40:	68 e2 0a 02 c0       	push   0xc0020ae2
c0011e45:	57                   	push   edi
c0011e46:	e8 35 e5 fe ff       	call   c0000380 <memcmp>
c0011e4b:	83 c4 10             	add    esp,0x10
c0011e4e:	85 c0                	test   eax,eax
c0011e50:	74 10                	je     c0011e62 <CmOpen(char const*)+0x111>
c0011e52:	83 ec 0c             	sub    esp,0xc
c0011e55:	68 eb 0a 02 c0       	push   0xc0020aeb
c0011e5a:	e8 66 e9 ff ff       	call   c00107c5 <KePanic(char const*)>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011e66:	83 c4 10             	add    esp,0x10
c0011e69:	89 d8                	mov    eax,ebx
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	5f                   	pop    edi
c0011e6e:	c3                   	ret    

c0011e6f <CmClose(Reghive_Tag*)>:
c0011e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e73:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e77:	74 0b                	je     c0011e84 <CmClose(Reghive_Tag*)+0x15>
c0011e79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e7f:	e9 90 92 ff ff       	jmp    c000b114 <File::close()>
c0011e84:	c3                   	ret    

c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e85:	53                   	push   ebx
c0011e86:	83 ec 18             	sub    esp,0x18
c0011e89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e91:	74 29                	je     c0011ebc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e93:	50                   	push   eax
c0011e94:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e99:	99                   	cdq    
c0011e9a:	52                   	push   edx
c0011e9b:	50                   	push   eax
c0011e9c:	ff 33                	push   DWORD PTR [ebx]
c0011e9e:	e8 d1 92 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011ea3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ea5:	5a                   	pop    edx
c0011ea6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eaa:	8b 10                	mov    edx,DWORD PTR [eax]
c0011eac:	51                   	push   ecx
c0011ead:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011eb1:	6a 00                	push   0x0
c0011eb3:	6a 2b                	push   0x2b
c0011eb5:	50                   	push   eax
c0011eb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011eb9:	83 c4 20             	add    esp,0x20
c0011ebc:	83 c4 18             	add    esp,0x18
c0011ebf:	5b                   	pop    ebx
c0011ec0:	c3                   	ret    

c0011ec1 <CmGetString(Reghive_Tag*, int, char*)>:
c0011ec1:	55                   	push   ebp
c0011ec2:	57                   	push   edi
c0011ec3:	56                   	push   esi
c0011ec4:	53                   	push   ebx
c0011ec5:	31 db                	xor    ebx,ebx
c0011ec7:	83 ec 70             	sub    esp,0x70
c0011eca:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011ece:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011ed5:	50                   	push   eax
c0011ed6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011edd:	55                   	push   ebp
c0011ede:	e8 a2 ff ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011eeb:	c1 e0 08             	shl    eax,0x8
c0011eee:	89 c2                	mov    edx,eax
c0011ef0:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011ef5:	09 d0                	or     eax,edx
c0011ef7:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011efc:	c1 e0 08             	shl    eax,0x8
c0011eff:	09 d0                	or     eax,edx
c0011f01:	74 25                	je     c0011f28 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f03:	52                   	push   edx
c0011f04:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f08:	52                   	push   edx
c0011f09:	6b fb 0d             	imul   edi,ebx,0xd
c0011f0c:	50                   	push   eax
c0011f0d:	55                   	push   ebp
c0011f0e:	e8 72 ff ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f13:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f17:	b9 27 00 00 00       	mov    ecx,0x27
c0011f1c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	83 c3 03             	add    ebx,0x3
c0011f2b:	83 fb 15             	cmp    ebx,0x15
c0011f2e:	75 b6                	jne    c0011ee6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f30:	83 c4 6c             	add    esp,0x6c
c0011f33:	5b                   	pop    ebx
c0011f34:	5e                   	pop    esi
c0011f35:	5f                   	pop    edi
c0011f36:	5d                   	pop    ebp
c0011f37:	c3                   	ret    

c0011f38 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f38:	83 ec 40             	sub    esp,0x40
c0011f3b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f3f:	50                   	push   eax
c0011f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f48:	e8 38 ff ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f4d:	83 c4 10             	add    esp,0x10
c0011f50:	83 c8 ff             	or     eax,0xffffffff
c0011f53:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011f58:	75 19                	jne    c0011f73 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011f5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f5f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011f64:	c1 e0 08             	shl    eax,0x8
c0011f67:	09 c2                	or     edx,eax
c0011f69:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f6e:	c1 e0 10             	shl    eax,0x10
c0011f71:	09 d0                	or     eax,edx
c0011f73:	83 c4 3c             	add    esp,0x3c
c0011f76:	c3                   	ret    

c0011f77 <CmGetNext(Reghive_Tag*, int)>:
c0011f77:	83 ec 40             	sub    esp,0x40
c0011f7a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f7e:	50                   	push   eax
c0011f7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f87:	e8 f9 fe ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f8c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f91:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f96:	c1 e0 08             	shl    eax,0x8
c0011f99:	09 c2                	or     edx,eax
c0011f9b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011fa0:	83 c4 4c             	add    esp,0x4c
c0011fa3:	c1 e0 10             	shl    eax,0x10
c0011fa6:	09 d0                	or     eax,edx
c0011fa8:	c3                   	ret    

c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011fa9:	53                   	push   ebx
c0011faa:	83 ec 18             	sub    esp,0x18
c0011fad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fb1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fb5:	74 29                	je     c0011fe0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011fb7:	50                   	push   eax
c0011fb8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011fbd:	99                   	cdq    
c0011fbe:	52                   	push   edx
c0011fbf:	50                   	push   eax
c0011fc0:	ff 33                	push   DWORD PTR [ebx]
c0011fc2:	e8 ad 91 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011fc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fc9:	5a                   	pop    edx
c0011fca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fce:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fd0:	51                   	push   ecx
c0011fd1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011fd5:	6a 00                	push   0x0
c0011fd7:	6a 2b                	push   0x2b
c0011fd9:	50                   	push   eax
c0011fda:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011fdd:	83 c4 20             	add    esp,0x20
c0011fe0:	83 c4 18             	add    esp,0x18
c0011fe3:	5b                   	pop    ebx
c0011fe4:	c3                   	ret    

c0011fe5 <CmFreeExtent(Reghive_Tag*, int)>:
c0011fe5:	53                   	push   ebx
c0011fe6:	83 ec 3c             	sub    esp,0x3c
c0011fe9:	6a 2b                	push   0x2b
c0011feb:	6a 00                	push   0x0
c0011fed:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011ff1:	53                   	push   ebx
c0011ff2:	e8 89 e5 fe ff       	call   c0000580 <memset>
c0011ff7:	83 c4 0c             	add    esp,0xc
c0011ffa:	53                   	push   ebx
c0011ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012003:	e8 a1 ff ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012008:	83 c4 48             	add    esp,0x48
c001200b:	5b                   	pop    ebx
c001200c:	c3                   	ret    

c001200d <CmUpdateHeader(Reghive_Tag*)>:
c001200d:	83 ec 0c             	sub    esp,0xc
c0012010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012014:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012018:	74 10                	je     c001202a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001201a:	52                   	push   edx
c001201b:	8d 50 05             	lea    edx,[eax+0x5]
c001201e:	52                   	push   edx
c001201f:	6a 00                	push   0x0
c0012021:	50                   	push   eax
c0012022:	e8 82 ff ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	83 c4 0c             	add    esp,0xc
c001202d:	c3                   	ret    

c001202e <CmExpand(Reghive_Tag*, int)>:
c001202e:	55                   	push   ebp
c001202f:	57                   	push   edi
c0012030:	83 cf ff             	or     edi,0xffffffff
c0012033:	56                   	push   esi
c0012034:	53                   	push   ebx
c0012035:	83 ec 3c             	sub    esp,0x3c
c0012038:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001203c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012040:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012044:	74 59                	je     c001209f <CmExpand(Reghive_Tag*, int)+0x71>
c0012046:	50                   	push   eax
c0012047:	31 d2                	xor    edx,edx
c0012049:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001204d:	31 ff                	xor    edi,edi
c001204f:	52                   	push   edx
c0012050:	50                   	push   eax
c0012051:	ff 33                	push   DWORD PTR [ebx]
c0012053:	e8 1c 91 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012058:	83 c4 0c             	add    esp,0xc
c001205b:	6a 2b                	push   0x2b
c001205d:	6a 00                	push   0x0
c001205f:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012063:	55                   	push   ebp
c0012064:	e8 17 e5 fe ff       	call   c0000580 <memset>
c0012069:	83 c4 10             	add    esp,0x10
c001206c:	39 f7                	cmp    edi,esi
c001206e:	7d 1b                	jge    c001208b <CmExpand(Reghive_Tag*, int)+0x5d>
c0012070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012072:	83 ec 0c             	sub    esp,0xc
c0012075:	47                   	inc    edi
c0012076:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001207a:	8b 10                	mov    edx,DWORD PTR [eax]
c001207c:	51                   	push   ecx
c001207d:	55                   	push   ebp
c001207e:	6a 00                	push   0x0
c0012080:	6a 2b                	push   0x2b
c0012082:	50                   	push   eax
c0012083:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012086:	83 c4 20             	add    esp,0x20
c0012089:	eb e1                	jmp    c001206c <CmExpand(Reghive_Tag*, int)+0x3e>
c001208b:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c001208e:	83 ec 0c             	sub    esp,0xc
c0012091:	01 fe                	add    esi,edi
c0012093:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012096:	53                   	push   ebx
c0012097:	e8 71 ff ff ff       	call   c001200d <CmUpdateHeader(Reghive_Tag*)>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	83 c4 3c             	add    esp,0x3c
c00120a2:	89 f8                	mov    eax,edi
c00120a4:	5b                   	pop    ebx
c00120a5:	5e                   	pop    esi
c00120a6:	5f                   	pop    edi
c00120a7:	5d                   	pop    ebp
c00120a8:	c3                   	ret    

c00120a9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00120a9:	55                   	push   ebp
c00120aa:	57                   	push   edi
c00120ab:	56                   	push   esi
c00120ac:	53                   	push   ebx
c00120ad:	83 cb ff             	or     ebx,0xffffffff
c00120b0:	83 ec 1c             	sub    esp,0x1c
c00120b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00120b7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00120bb:	74 68                	je     c0012125 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120bd:	51                   	push   ecx
c00120be:	be 2b 00 00 00       	mov    esi,0x2b
c00120c3:	6a 00                	push   0x0
c00120c5:	31 ff                	xor    edi,edi
c00120c7:	6a 00                	push   0x0
c00120c9:	31 db                	xor    ebx,ebx
c00120cb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00120ce:	e8 a1 90 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00120d9:	76 3b                	jbe    c0012116 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00120db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00120e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00120e7:	51                   	push   ecx
c00120e8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00120ec:	51                   	push   ecx
c00120ed:	6a 00                	push   0x0
c00120ef:	6a 01                	push   0x1
c00120f1:	50                   	push   eax
c00120f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120f5:	83 c4 20             	add    esp,0x20
c00120f8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120fd:	74 26                	je     c0012125 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00120ff:	52                   	push   edx
c0012100:	43                   	inc    ebx
c0012101:	57                   	push   edi
c0012102:	56                   	push   esi
c0012103:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012106:	e8 69 90 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001210b:	83 c6 2b             	add    esi,0x2b
c001210e:	83 d7 00             	adc    edi,0x0
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	eb c0                	jmp    c00120d6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012116:	50                   	push   eax
c0012117:	50                   	push   eax
c0012118:	6a 40                	push   0x40
c001211a:	55                   	push   ebp
c001211b:	e8 0e ff ff ff       	call   c001202e <CmExpand(Reghive_Tag*, int)>
c0012120:	83 c4 10             	add    esp,0x10
c0012123:	89 c3                	mov    ebx,eax
c0012125:	83 c4 1c             	add    esp,0x1c
c0012128:	89 d8                	mov    eax,ebx
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	5d                   	pop    ebp
c001212e:	c3                   	ret    

c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001212f:	55                   	push   ebp
c0012130:	57                   	push   edi
c0012131:	56                   	push   esi
c0012132:	53                   	push   ebx
c0012133:	81 ec 88 00 00 00    	sub    esp,0x88
c0012139:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012140:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012147:	e8 5d ff ff ff       	call   c00120a9 <CmFindUnusedExtent(Reghive_Tag*)>
c001214c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012150:	83 c4 0c             	add    esp,0xc
c0012153:	6a 2b                	push   0x2b
c0012155:	6a 00                	push   0x0
c0012157:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001215b:	55                   	push   ebp
c001215c:	e8 1f e4 fe ff       	call   c0000580 <memset>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	85 db                	test   ebx,ebx
c0012166:	74 12                	je     c001217a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012168:	51                   	push   ecx
c0012169:	55                   	push   ebp
c001216a:	53                   	push   ebx
c001216b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012172:	e8 0e fd ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001217e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012185:	b9 2b 00 00 00       	mov    ecx,0x2b
c001218a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001218c:	85 db                	test   ebx,ebx
c001218e:	74 4c                	je     c00121dc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c0012190:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012195:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001219a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001219e:	c1 e0 08             	shl    eax,0x8
c00121a1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00121a7:	09 c8                	or     eax,ecx
c00121a9:	0f b6 ca             	movzx  ecx,dl
c00121ac:	74 11                	je     c00121bf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c00121ae:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00121b2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00121b6:	c1 e8 10             	shr    eax,0x10
c00121b9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00121bd:	eb 0f                	jmp    c00121ce <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c00121bf:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00121c4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00121c9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00121ce:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c00121d2:	c1 ea 08             	shr    edx,0x8
c00121d5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00121da:	eb 0f                	jmp    c00121eb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c00121dc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00121e1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00121e6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00121eb:	52                   	push   edx
c00121ec:	8d 44 24 49          	lea    eax,[esp+0x49]
c00121f0:	50                   	push   eax
c00121f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121f5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121fc:	e8 a8 fd ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	85 db                	test   ebx,ebx
c0012206:	74 12                	je     c001221a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012208:	50                   	push   eax
c0012209:	55                   	push   ebp
c001220a:	53                   	push   ebx
c001220b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012212:	e8 92 fd ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001221e:	83 c4 7c             	add    esp,0x7c
c0012221:	5b                   	pop    ebx
c0012222:	5e                   	pop    esi
c0012223:	5f                   	pop    edi
c0012224:	5d                   	pop    ebp
c0012225:	c3                   	ret    

c0012226 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012226:	55                   	push   ebp
c0012227:	57                   	push   edi
c0012228:	56                   	push   esi
c0012229:	53                   	push   ebx
c001222a:	bb 27 00 00 00       	mov    ebx,0x27
c001222f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012235:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001223c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012243:	e8 d8 e3 fe ff       	call   c0000620 <strlen>
c0012248:	8d 48 26             	lea    ecx,[eax+0x26]
c001224b:	89 c8                	mov    eax,ecx
c001224d:	99                   	cdq    
c001224e:	f7 fb                	idiv   ebx
c0012250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001225d:	7e 10                	jle    c001226f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	68 fc 0a 02 c0       	push   0xc0020afc
c0012267:	e8 59 e5 ff ff       	call   c00107c5 <KePanic(char const*)>
c001226c:	83 c4 10             	add    esp,0x10
c001226f:	50                   	push   eax
c0012270:	31 ff                	xor    edi,edi
c0012272:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012276:	53                   	push   ebx
c0012277:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001227e:	56                   	push   esi
c001227f:	e8 01 fc ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001228b:	89 d0                	mov    eax,edx
c001228d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012291:	c1 e0 08             	shl    eax,0x8
c0012294:	09 c2                	or     edx,eax
c0012296:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001229a:	c1 e2 08             	shl    edx,0x8
c001229d:	09 c2                	or     edx,eax
c001229f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00122a3:	7e 76                	jle    c001231b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00122a5:	85 d2                	test   edx,edx
c00122a7:	75 25                	jne    c00122ce <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00122a9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00122ae:	8d 44 24 45          	lea    eax,[esp+0x45]
c00122b2:	50                   	push   eax
c00122b3:	6a 00                	push   0x0
c00122b5:	6a 00                	push   0x0
c00122b7:	56                   	push   esi
c00122b8:	e8 72 fe ff ff       	call   c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122bd:	83 c4 10             	add    esp,0x10
c00122c0:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00122c3:	89 c2                	mov    edx,eax
c00122c5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00122c8:	c1 f8 10             	sar    eax,0x10
c00122cb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00122ce:	55                   	push   ebp
c00122cf:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00122d3:	55                   	push   ebp
c00122d4:	52                   	push   edx
c00122d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00122d9:	56                   	push   esi
c00122da:	e8 a6 fb ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122df:	83 c4 0c             	add    esp,0xc
c00122e2:	6a 27                	push   0x27
c00122e4:	6a 00                	push   0x0
c00122e6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00122ea:	51                   	push   ecx
c00122eb:	e8 90 e2 fe ff       	call   c0000580 <memset>
c00122f0:	6b c7 27             	imul   eax,edi,0x27
c00122f3:	83 c4 0c             	add    esp,0xc
c00122f6:	6a 27                	push   0x27
c00122f8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00122ff:	50                   	push   eax
c0012300:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012304:	51                   	push   ecx
c0012305:	e8 46 e4 fe ff       	call   c0000750 <strncpy>
c001230a:	83 c4 0c             	add    esp,0xc
c001230d:	55                   	push   ebp
c001230e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012312:	52                   	push   edx
c0012313:	56                   	push   esi
c0012314:	e8 90 fc ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012319:	eb 19                	jmp    c0012334 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001231b:	85 d2                	test   edx,edx
c001231d:	74 18                	je     c0012337 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001231f:	51                   	push   ecx
c0012320:	51                   	push   ecx
c0012321:	52                   	push   edx
c0012322:	56                   	push   esi
c0012323:	e8 bd fc ff ff       	call   c0011fe5 <CmFreeExtent(Reghive_Tag*, int)>
c0012328:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001232c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012330:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012334:	83 c4 10             	add    esp,0x10
c0012337:	47                   	inc    edi
c0012338:	83 c3 03             	add    ebx,0x3
c001233b:	83 ff 07             	cmp    edi,0x7
c001233e:	0f 85 43 ff ff ff    	jne    c0012287 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012344:	50                   	push   eax
c0012345:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012349:	50                   	push   eax
c001234a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012351:	56                   	push   esi
c0012352:	e8 52 fc ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012357:	81 c4 8c 00 00 00    	add    esp,0x8c
c001235d:	5b                   	pop    ebx
c001235e:	5e                   	pop    esi
c001235f:	5f                   	pop    edi
c0012360:	5d                   	pop    ebp
c0012361:	c3                   	ret    

c0012362 <CmGetMatch(char*, char*, bool, bool*)>:
c0012362:	56                   	push   esi
c0012363:	53                   	push   ebx
c0012364:	50                   	push   eax
c0012365:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001236a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001236e:	74 25                	je     c0012395 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012370:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012373:	31 db                	xor    ebx,ebx
c0012375:	50                   	push   eax
c0012376:	50                   	push   eax
c0012377:	8d 04 9d 40 1f 02 c0 	lea    eax,[ebx*4-0x3ffde0c0]
c001237e:	50                   	push   eax
c001237f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012383:	e8 b8 e4 fe ff       	call   c0000840 <strcmp>
c0012388:	83 c4 10             	add    esp,0x10
c001238b:	85 c0                	test   eax,eax
c001238d:	74 2e                	je     c00123bd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001238f:	43                   	inc    ebx
c0012390:	83 fb 3f             	cmp    ebx,0x3f
c0012393:	75 e0                	jne    c0012375 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012395:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012398:	31 db                	xor    ebx,ebx
c001239a:	51                   	push   ecx
c001239b:	51                   	push   ecx
c001239c:	8d 04 9d 40 1f 02 c0 	lea    eax,[ebx*4-0x3ffde0c0]
c00123a3:	50                   	push   eax
c00123a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123a8:	e8 93 e4 fe ff       	call   c0000840 <strcmp>
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	85 c0                	test   eax,eax
c00123b2:	74 09                	je     c00123bd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123b4:	43                   	inc    ebx
c00123b5:	83 fb 3f             	cmp    ebx,0x3f
c00123b8:	75 e0                	jne    c001239a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00123ba:	83 cb ff             	or     ebx,0xffffffff
c00123bd:	5a                   	pop    edx
c00123be:	89 d8                	mov    eax,ebx
c00123c0:	5b                   	pop    ebx
c00123c1:	5e                   	pop    esi
c00123c2:	c3                   	ret    

c00123c3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00123c3:	55                   	push   ebp
c00123c4:	31 c0                	xor    eax,eax
c00123c6:	57                   	push   edi
c00123c7:	56                   	push   esi
c00123c8:	53                   	push   ebx
c00123c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00123cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00123d1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123d5:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c00123da:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123dc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00123df:	83 fd 1f             	cmp    ebp,0x1f
c00123e2:	7f 08                	jg     c00123ec <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c00123e4:	d3 e2                	shl    edx,cl
c00123e6:	b0 01                	mov    al,0x1
c00123e8:	09 17                	or     DWORD PTR [edi],edx
c00123ea:	01 33                	add    DWORD PTR [ebx],esi
c00123ec:	5b                   	pop    ebx
c00123ed:	5e                   	pop    esi
c00123ee:	5f                   	pop    edi
c00123ef:	5d                   	pop    ebp
c00123f0:	c3                   	ret    

c00123f1 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00123f1:	57                   	push   edi
c00123f2:	56                   	push   esi
c00123f3:	53                   	push   ebx
c00123f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012400:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012404:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012406:	7c 18                	jl     c0012420 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012408:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001240a:	b8 01 00 00 00       	mov    eax,0x1
c001240f:	d3 e0                	shl    eax,cl
c0012411:	fe c8                	dec    al
c0012413:	22 03                	and    al,BYTE PTR [ebx]
c0012415:	d3 ef                	shr    edi,cl
c0012417:	89 3b                	mov    DWORD PTR [ebx],edi
c0012419:	29 0a                	sub    DWORD PTR [edx],ecx
c001241b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001241e:	eb 05                	jmp    c0012425 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012420:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012423:	31 c0                	xor    eax,eax
c0012425:	5b                   	pop    ebx
c0012426:	5e                   	pop    esi
c0012427:	5f                   	pop    edi
c0012428:	c3                   	ret    

c0012429 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012429:	83 ec 40             	sub    esp,0x40
c001242c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012430:	50                   	push   eax
c0012431:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012435:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012439:	e8 47 fa ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001243e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012442:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012446:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001244a:	89 10                	mov    DWORD PTR [eax],edx
c001244c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001244f:	83 c4 4c             	add    esp,0x4c
c0012452:	c3                   	ret    

c0012453 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012453:	55                   	push   ebp
c0012454:	57                   	push   edi
c0012455:	56                   	push   esi
c0012456:	53                   	push   ebx
c0012457:	83 ec 40             	sub    esp,0x40
c001245a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001245e:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012462:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012466:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001246a:	53                   	push   ebx
c001246b:	56                   	push   esi
c001246c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012470:	e8 10 fa ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012475:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012479:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001247d:	83 c4 0c             	add    esp,0xc
c0012480:	53                   	push   ebx
c0012481:	56                   	push   esi
c0012482:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012486:	e8 1e fb ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001248b:	83 c4 4c             	add    esp,0x4c
c001248e:	5b                   	pop    ebx
c001248f:	5e                   	pop    esi
c0012490:	5f                   	pop    edi
c0012491:	5d                   	pop    ebp
c0012492:	c3                   	ret    

c0012493 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012493:	55                   	push   ebp
c0012494:	57                   	push   edi
c0012495:	56                   	push   esi
c0012496:	31 f6                	xor    esi,esi
c0012498:	53                   	push   ebx
c0012499:	31 db                	xor    ebx,ebx
c001249b:	83 ec 40             	sub    esp,0x40
c001249e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124a6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124ae:	6a 12                	push   0x12
c00124b0:	68 ee 00 00 00       	push   0xee
c00124b5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124b9:	e8 c2 e0 fe ff       	call   c0000580 <memset>
c00124be:	83 c4 10             	add    esp,0x10
c00124c1:	6a 08                	push   0x8
c00124c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00124c7:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00124cb:	50                   	push   eax
c00124cc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00124d0:	57                   	push   edi
c00124d1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00124d5:	55                   	push   ebp
c00124d6:	e8 e8 fe ff ff       	call   c00123c3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00124e2:	50                   	push   eax
c00124e3:	6a 06                	push   0x6
c00124e5:	57                   	push   edi
c00124e6:	55                   	push   ebp
c00124e7:	e8 05 ff ff ff       	call   c00123f1 <CmGetShift(unsigned int*, int*, int, bool*)>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00124f4:	74 07                	je     c00124fd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00124f6:	46                   	inc    esi
c00124f7:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00124fb:	eb e1                	jmp    c00124de <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00124fd:	43                   	inc    ebx
c00124fe:	83 fb 12             	cmp    ebx,0x12
c0012501:	75 be                	jne    c00124c1 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012503:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012507:	31 f6                	xor    esi,esi
c0012509:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001250c:	50                   	push   eax
c001250d:	50                   	push   eax
c001250e:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012513:	46                   	inc    esi
c0012514:	8d 04 85 40 1f 02 c0 	lea    eax,[eax*4-0x3ffde0c0]
c001251b:	50                   	push   eax
c001251c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012520:	e8 0b e4 fe ff       	call   c0000930 <strcat>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	83 fe 18             	cmp    esi,0x18
c001252b:	75 df                	jne    c001250c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001252d:	83 c4 3c             	add    esp,0x3c
c0012530:	31 c0                	xor    eax,eax
c0012532:	5b                   	pop    ebx
c0012533:	5e                   	pop    esi
c0012534:	5f                   	pop    edi
c0012535:	5d                   	pop    ebp
c0012536:	c3                   	ret    

c0012537 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012537:	83 ec 40             	sub    esp,0x40
c001253a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001253e:	50                   	push   eax
c001253f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012543:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012547:	e8 39 f9 ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001254c:	58                   	pop    eax
c001254d:	5a                   	pop    edx
c001254e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012552:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012556:	50                   	push   eax
c0012557:	e8 37 ff ff ff       	call   c0012493 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001255c:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012561:	83 c4 4c             	add    esp,0x4c
c0012564:	c3                   	ret    

c0012565 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012565:	55                   	push   ebp
c0012566:	57                   	push   edi
c0012567:	56                   	push   esi
c0012568:	53                   	push   ebx
c0012569:	31 db                	xor    ebx,ebx
c001256b:	83 ec 70             	sub    esp,0x70
c001256e:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012575:	6a 30                	push   0x30
c0012577:	6a 00                	push   0x0
c0012579:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001257d:	56                   	push   esi
c001257e:	e8 fd df fe ff       	call   c0000580 <memset>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	83 ec 0c             	sub    esp,0xc
c0012589:	57                   	push   edi
c001258a:	e8 91 e0 fe ff       	call   c0000620 <strlen>
c001258f:	83 c4 10             	add    esp,0x10
c0012592:	39 d8                	cmp    eax,ebx
c0012594:	76 16                	jbe    c00125ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012596:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	50                   	push   eax
c001259e:	e8 7d e4 fe ff       	call   c0000a20 <toupper>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00125a9:	43                   	inc    ebx
c00125aa:	eb da                	jmp    c0012586 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00125ac:	52                   	push   edx
c00125ad:	31 db                	xor    ebx,ebx
c00125af:	6a 18                	push   0x18
c00125b1:	31 ff                	xor    edi,edi
c00125b3:	6a 3f                	push   0x3f
c00125b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125b9:	50                   	push   eax
c00125ba:	e8 c1 df fe ff       	call   c0000580 <memset>
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00125c6:	8d 74 24 10          	lea    esi,[esp+0x10]
c00125ca:	84 c0                	test   al,al
c00125cc:	0f 84 af 00 00 00    	je     c0012681 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125d2:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00125d6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00125d9:	83 ec 0c             	sub    esp,0xc
c00125dc:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00125e1:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00125e5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00125e9:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00125ee:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00125f2:	56                   	push   esi
c00125f3:	e8 28 e0 fe ff       	call   c0000620 <strlen>
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	85 c0                	test   eax,eax
c00125fd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012601:	74 0b                	je     c001260e <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012603:	50                   	push   eax
c0012604:	6a 01                	push   0x1
c0012606:	56                   	push   esi
c0012607:	8d 44 24 20          	lea    eax,[esp+0x20]
c001260b:	50                   	push   eax
c001260c:	eb 0a                	jmp    c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001260e:	50                   	push   eax
c001260f:	6a 00                	push   0x0
c0012611:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012615:	50                   	push   eax
c0012616:	6a 00                	push   0x0
c0012618:	e8 45 fd ff ff       	call   c0012362 <CmGetMatch(char*, char*, bool, bool*)>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	83 f8 ff             	cmp    eax,0xffffffff
c0012623:	75 1a                	jne    c001263f <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012625:	83 ec 0c             	sub    esp,0xc
c0012628:	68 11 0b 02 c0       	push   0xc0020b11
c001262d:	e8 93 e1 ff ff       	call   c00107c5 <KePanic(char const*)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	b8 02 00 00 00       	mov    eax,0x2
c001263a:	e9 bb 00 00 00       	jmp    c00126fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001263f:	83 ff 18             	cmp    edi,0x18
c0012642:	75 1a                	jne    c001265e <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	68 26 0b 02 c0       	push   0xc0020b26
c001264c:	e8 74 e1 ff ff       	call   c00107c5 <KePanic(char const*)>
c0012651:	83 c4 10             	add    esp,0x10
c0012654:	b8 01 00 00 00       	mov    eax,0x1
c0012659:	e9 9c 00 00 00       	jmp    c00126fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001265e:	47                   	inc    edi
c001265f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012664:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012668:	0f 45 dd             	cmovne ebx,ebp
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	56                   	push   esi
c001266f:	e8 ac df fe ff       	call   c0000620 <strlen>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	85 c0                	test   eax,eax
c0012679:	74 06                	je     c0012681 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001267b:	43                   	inc    ebx
c001267c:	e9 41 ff ff ff       	jmp    c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012681:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012689:	31 db                	xor    ebx,ebx
c001268b:	31 ff                	xor    edi,edi
c001268d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012695:	50                   	push   eax
c0012696:	6a 12                	push   0x12
c0012698:	68 ee 00 00 00       	push   0xee
c001269d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00126a4:	e8 d7 de fe ff       	call   c0000580 <memset>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00126b0:	83 fb 17             	cmp    ebx,0x17
c00126b3:	7e 26                	jle    c00126db <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00126b5:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00126b9:	50                   	push   eax
c00126ba:	6a 08                	push   0x8
c00126bc:	55                   	push   ebp
c00126bd:	56                   	push   esi
c00126be:	e8 2e fd ff ff       	call   c00123f1 <CmGetShift(unsigned int*, int*, int, bool*)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126cb:	74 26                	je     c00126f3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00126cd:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00126d4:	4b                   	dec    ebx
c00126d5:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00126d8:	47                   	inc    edi
c00126d9:	eb 1c                	jmp    c00126f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00126db:	6a 06                	push   0x6
c00126dd:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00126e2:	50                   	push   eax
c00126e3:	55                   	push   ebp
c00126e4:	56                   	push   esi
c00126e5:	e8 d9 fc ff ff       	call   c00123c3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	84 c0                	test   al,al
c00126ef:	75 06                	jne    c00126f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00126f1:	eb c2                	jmp    c00126b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00126f3:	31 c0                	xor    eax,eax
c00126f5:	eb 03                	jmp    c00126fa <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00126f7:	43                   	inc    ebx
c00126f8:	eb b2                	jmp    c00126ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00126fa:	83 c4 6c             	add    esp,0x6c
c00126fd:	5b                   	pop    ebx
c00126fe:	5e                   	pop    esi
c00126ff:	5f                   	pop    edi
c0012700:	5d                   	pop    ebp
c0012701:	c3                   	ret    

c0012702 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012702:	53                   	push   ebx
c0012703:	83 ec 3c             	sub    esp,0x3c
c0012706:	6a 2b                	push   0x2b
c0012708:	6a 00                	push   0x0
c001270a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001270e:	53                   	push   ebx
c001270f:	e8 6c de fe ff       	call   c0000580 <memset>
c0012714:	58                   	pop    eax
c0012715:	5a                   	pop    edx
c0012716:	8d 44 24 11          	lea    eax,[esp+0x11]
c001271a:	50                   	push   eax
c001271b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001271f:	e8 41 fe ff ff       	call   c0012565 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012724:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012729:	83 c4 0c             	add    esp,0xc
c001272c:	6a 15                	push   0x15
c001272e:	6a 00                	push   0x0
c0012730:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012734:	50                   	push   eax
c0012735:	e8 46 de fe ff       	call   c0000580 <memset>
c001273a:	53                   	push   ebx
c001273b:	6a 00                	push   0x0
c001273d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012741:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012745:	e8 e5 f9 ff ff       	call   c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001274a:	83 c4 58             	add    esp,0x58
c001274d:	5b                   	pop    ebx
c001274e:	c3                   	ret    

c001274f <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001274f:	56                   	push   esi
c0012750:	53                   	push   ebx
c0012751:	83 ec 48             	sub    esp,0x48
c0012754:	6a 12                	push   0x12
c0012756:	68 ff 00 00 00       	push   0xff
c001275b:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001275f:	56                   	push   esi
c0012760:	e8 1b de fe ff       	call   c0000580 <memset>
c0012765:	5a                   	pop    edx
c0012766:	59                   	pop    ecx
c0012767:	56                   	push   esi
c0012768:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001276c:	e8 f4 fd ff ff       	call   c0012565 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012771:	83 c4 10             	add    esp,0x10
c0012774:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012778:	85 db                	test   ebx,ebx
c001277a:	74 42                	je     c00127be <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001277c:	50                   	push   eax
c001277d:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012781:	50                   	push   eax
c0012782:	53                   	push   ebx
c0012783:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012787:	e8 f9 f6 ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001278c:	83 c4 0c             	add    esp,0xc
c001278f:	6a 12                	push   0x12
c0012791:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012795:	50                   	push   eax
c0012796:	56                   	push   esi
c0012797:	e8 e4 db fe ff       	call   c0000380 <memcmp>
c001279c:	83 c4 10             	add    esp,0x10
c001279f:	85 c0                	test   eax,eax
c00127a1:	74 1e                	je     c00127c1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00127a3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00127a8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00127ad:	c1 e3 08             	shl    ebx,0x8
c00127b0:	09 d8                	or     eax,ebx
c00127b2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00127b7:	c1 e3 10             	shl    ebx,0x10
c00127ba:	09 c3                	or     ebx,eax
c00127bc:	eb ba                	jmp    c0012778 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00127be:	83 cb ff             	or     ebx,0xffffffff
c00127c1:	83 c4 44             	add    esp,0x44
c00127c4:	89 d8                	mov    eax,ebx
c00127c6:	5b                   	pop    ebx
c00127c7:	5e                   	pop    esi
c00127c8:	c3                   	ret    

c00127c9 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00127c9:	57                   	push   edi
c00127ca:	56                   	push   esi
c00127cb:	53                   	push   ebx
c00127cc:	83 ec 34             	sub    esp,0x34
c00127cf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00127d3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00127d7:	6a 2b                	push   0x2b
c00127d9:	6a 00                	push   0x0
c00127db:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00127df:	53                   	push   ebx
c00127e0:	e8 9b dd fe ff       	call   c0000580 <memset>
c00127e5:	58                   	pop    eax
c00127e6:	5a                   	pop    edx
c00127e7:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127eb:	50                   	push   eax
c00127ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00127f0:	e8 70 fd ff ff       	call   c0012565 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127f5:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00127f9:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00127fd:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012801:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012805:	53                   	push   ebx
c0012806:	6a 00                	push   0x0
c0012808:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001280c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012810:	e8 1a f9 ff ff       	call   c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012815:	83 c4 50             	add    esp,0x50
c0012818:	5b                   	pop    ebx
c0012819:	5e                   	pop    esi
c001281a:	5f                   	pop    edi
c001281b:	c3                   	ret    

c001281c <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001281c:	55                   	push   ebp
c001281d:	57                   	push   edi
c001281e:	56                   	push   esi
c001281f:	53                   	push   ebx
c0012820:	83 ec 40             	sub    esp,0x40
c0012823:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012827:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001282b:	6a 2b                	push   0x2b
c001282d:	6a 00                	push   0x0
c001282f:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012833:	56                   	push   esi
c0012834:	e8 47 dd fe ff       	call   c0000580 <memset>
c0012839:	5f                   	pop    edi
c001283a:	89 ef                	mov    edi,ebp
c001283c:	58                   	pop    eax
c001283d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012841:	50                   	push   eax
c0012842:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012846:	e8 1a fd ff ff       	call   c0012565 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001284b:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012850:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012855:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001285a:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	85 ed                	test   ebp,ebp
c0012864:	74 14                	je     c001287a <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012866:	51                   	push   ecx
c0012867:	51                   	push   ecx
c0012868:	57                   	push   edi
c0012869:	53                   	push   ebx
c001286a:	e8 08 f7 ff ff       	call   c0011f77 <CmGetNext(Reghive_Tag*, int)>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	85 c0                	test   eax,eax
c0012874:	74 04                	je     c001287a <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012876:	89 c7                	mov    edi,eax
c0012878:	eb e8                	jmp    c0012862 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001287a:	56                   	push   esi
c001287b:	6a 00                	push   0x0
c001287d:	57                   	push   edi
c001287e:	53                   	push   ebx
c001287f:	e8 ab f8 ff ff       	call   c001212f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012884:	83 c4 0c             	add    esp,0xc
c0012887:	56                   	push   esi
c0012888:	50                   	push   eax
c0012889:	89 c7                	mov    edi,eax
c001288b:	53                   	push   ebx
c001288c:	e8 f4 f5 ff ff       	call   c0011e85 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012891:	58                   	pop    eax
c0012892:	5a                   	pop    edx
c0012893:	6a 6c                	push   0x6c
c0012895:	6a 00                	push   0x0
c0012897:	6a 00                	push   0x0
c0012899:	68 37 0b 02 c0       	push   0xc0020b37
c001289e:	57                   	push   edi
c001289f:	53                   	push   ebx
c00128a0:	e8 24 ff ff ff       	call   c00127c9 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00128a5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00128a9:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00128ad:	c1 e8 10             	shr    eax,0x10
c00128b0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00128b4:	83 c4 1c             	add    esp,0x1c
c00128b7:	56                   	push   esi
c00128b8:	57                   	push   edi
c00128b9:	53                   	push   ebx
c00128ba:	e8 ea f6 ff ff       	call   c0011fa9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00128bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00128c4:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00128c9:	c1 e0 08             	shl    eax,0x8
c00128cc:	09 c2                	or     edx,eax
c00128ce:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00128d3:	83 c4 4c             	add    esp,0x4c
c00128d6:	5b                   	pop    ebx
c00128d7:	5e                   	pop    esi
c00128d8:	c1 e0 10             	shl    eax,0x10
c00128db:	09 d0                	or     eax,edx
c00128dd:	5f                   	pop    edi
c00128de:	5d                   	pop    ebp
c00128df:	c3                   	ret    

c00128e0 <zStrtok(char*, char const*)>:
c00128e0:	57                   	push   edi
c00128e1:	56                   	push   esi
c00128e2:	53                   	push   ebx
c00128e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00128e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128eb:	85 f6                	test   esi,esi
c00128ed:	74 2b                	je     c001291a <zStrtok(char*, char const*)+0x3a>
c00128ef:	85 c0                	test   eax,eax
c00128f1:	75 09                	jne    c00128fc <zStrtok(char*, char const*)+0x1c>
c00128f3:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c00128f8:	85 c0                	test   eax,eax
c00128fa:	74 49                	je     c0012945 <zStrtok(char*, char const*)+0x65>
c00128fc:	31 c9                	xor    ecx,ecx
c00128fe:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012902:	74 03                	je     c0012907 <zStrtok(char*, char const*)+0x27>
c0012904:	41                   	inc    ecx
c0012905:	eb f7                	jmp    c00128fe <zStrtok(char*, char const*)+0x1e>
c0012907:	31 d2                	xor    edx,edx
c0012909:	39 ca                	cmp    edx,ecx
c001290b:	74 11                	je     c001291e <zStrtok(char*, char const*)+0x3e>
c001290d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001290f:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012912:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012915:	74 13                	je     c001292a <zStrtok(char*, char const*)+0x4a>
c0012917:	42                   	inc    edx
c0012918:	eb ef                	jmp    c0012909 <zStrtok(char*, char const*)+0x29>
c001291a:	31 c0                	xor    eax,eax
c001291c:	eb 27                	jmp    c0012945 <zStrtok(char*, char const*)+0x65>
c001291e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012928:	eb 1b                	jmp    c0012945 <zStrtok(char*, char const*)+0x65>
c001292a:	3a 18                	cmp    bl,BYTE PTR [eax]
c001292c:	75 0a                	jne    c0012938 <zStrtok(char*, char const*)+0x58>
c001292e:	40                   	inc    eax
c001292f:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012934:	89 f0                	mov    eax,esi
c0012936:	eb 0d                	jmp    c0012945 <zStrtok(char*, char const*)+0x65>
c0012938:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001293b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001293f:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c0012945:	5b                   	pop    ebx
c0012946:	5e                   	pop    esi
c0012947:	5f                   	pop    edi
c0012948:	c3                   	ret    

c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012949:	57                   	push   edi
c001294a:	56                   	push   esi
c001294b:	53                   	push   ebx
c001294c:	81 ec 08 01 00 00    	sub    esp,0x108
c0012952:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012959:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012960:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012964:	53                   	push   ebx
c0012965:	e8 b6 dd fe ff       	call   c0000720 <strcpy>
c001296a:	59                   	pop    ecx
c001296b:	5e                   	pop    esi
c001296c:	68 9b 0e 02 c0       	push   0xc0020e9b
c0012971:	53                   	push   ebx
c0012972:	bb 01 00 00 00       	mov    ebx,0x1
c0012977:	e8 64 ff ff ff       	call   c00128e0 <zStrtok(char*, char const*)>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	85 c0                	test   eax,eax
c0012981:	74 3b                	je     c00129be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012983:	52                   	push   edx
c0012984:	50                   	push   eax
c0012985:	6a 01                	push   0x1
c0012987:	57                   	push   edi
c0012988:	e8 c2 fd ff ff       	call   c001274f <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001298d:	59                   	pop    ecx
c001298e:	5e                   	pop    esi
c001298f:	89 c3                	mov    ebx,eax
c0012991:	68 9b 0e 02 c0       	push   0xc0020e9b
c0012996:	6a 00                	push   0x0
c0012998:	e8 43 ff ff ff       	call   c00128e0 <zStrtok(char*, char const*)>
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	85 c0                	test   eax,eax
c00129a2:	89 c6                	mov    esi,eax
c00129a4:	74 18                	je     c00129be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129a6:	52                   	push   edx
c00129a7:	52                   	push   edx
c00129a8:	53                   	push   ebx
c00129a9:	57                   	push   edi
c00129aa:	e8 89 f5 ff ff       	call   c0011f38 <CmEnterDirectory(Reghive_Tag*, int)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	83 f8 ff             	cmp    eax,0xffffffff
c00129b5:	89 c3                	mov    ebx,eax
c00129b7:	74 05                	je     c00129be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129b9:	50                   	push   eax
c00129ba:	56                   	push   esi
c00129bb:	53                   	push   ebx
c00129bc:	eb c9                	jmp    c0012987 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00129be:	81 c4 00 01 00 00    	add    esp,0x100
c00129c4:	89 d8                	mov    eax,ebx
c00129c6:	5b                   	pop    ebx
c00129c7:	5e                   	pop    esi
c00129c8:	5f                   	pop    edi
c00129c9:	c3                   	ret    

c00129ca <CmDisplayTree(Reghive_Tag*, int, int)>:
c00129ca:	55                   	push   ebp
c00129cb:	57                   	push   edi
c00129cc:	56                   	push   esi
c00129cd:	53                   	push   ebx
c00129ce:	83 ec 5c             	sub    esp,0x5c
c00129d1:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00129d5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00129d9:	85 db                	test   ebx,ebx
c00129db:	0f 8e 84 00 00 00    	jle    c0012a65 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00129e1:	57                   	push   edi
c00129e2:	31 ed                	xor    ebp,ebp
c00129e4:	6a 32                	push   0x32
c00129e6:	6a 00                	push   0x0
c00129e8:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00129ec:	57                   	push   edi
c00129ed:	e8 8e db fe ff       	call   c0000580 <memset>
c00129f2:	83 c4 0c             	add    esp,0xc
c00129f5:	57                   	push   edi
c00129f6:	53                   	push   ebx
c00129f7:	56                   	push   esi
c00129f8:	e8 3a fb ff ff       	call   c0012537 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00129fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a01:	83 c4 10             	add    esp,0x10
c0012a04:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a08:	7d 13                	jge    c0012a1d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a0a:	83 ec 0c             	sub    esp,0xc
c0012a0d:	45                   	inc    ebp
c0012a0e:	68 08 12 02 c0       	push   0xc0021208
c0012a13:	e8 5e 80 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	eb e7                	jmp    c0012a04 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a1d:	51                   	push   ecx
c0012a1e:	57                   	push   edi
c0012a1f:	53                   	push   ebx
c0012a20:	68 3d 0b 02 c0       	push   0xc0020b3d
c0012a25:	e8 4c 80 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0012a2a:	83 c4 10             	add    esp,0x10
c0012a2d:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a32:	75 1e                	jne    c0012a52 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a34:	52                   	push   edx
c0012a35:	52                   	push   edx
c0012a36:	53                   	push   ebx
c0012a37:	56                   	push   esi
c0012a38:	e8 fb f4 ff ff       	call   c0011f38 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a3d:	83 c4 0c             	add    esp,0xc
c0012a40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012a44:	8d 51 04             	lea    edx,[ecx+0x4]
c0012a47:	52                   	push   edx
c0012a48:	50                   	push   eax
c0012a49:	56                   	push   esi
c0012a4a:	e8 7b ff ff ff       	call   c00129ca <CmDisplayTree(Reghive_Tag*, int, int)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	50                   	push   eax
c0012a53:	50                   	push   eax
c0012a54:	53                   	push   ebx
c0012a55:	56                   	push   esi
c0012a56:	e8 1c f5 ff ff       	call   c0011f77 <CmGetNext(Reghive_Tag*, int)>
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	89 c3                	mov    ebx,eax
c0012a60:	e9 74 ff ff ff       	jmp    c00129d9 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a65:	83 c4 5c             	add    esp,0x5c
c0012a68:	5b                   	pop    ebx
c0012a69:	5e                   	pop    esi
c0012a6a:	5f                   	pop    edi
c0012a6b:	5d                   	pop    ebp
c0012a6c:	c3                   	ret    

c0012a6d <CmSplitFinalSlashInPlace(char*)>:
c0012a6d:	53                   	push   ebx
c0012a6e:	83 ec 14             	sub    esp,0x14
c0012a71:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a75:	53                   	push   ebx
c0012a76:	e8 a5 db fe ff       	call   c0000620 <strlen>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	48                   	dec    eax
c0012a7f:	85 c0                	test   eax,eax
c0012a81:	74 15                	je     c0012a98 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a83:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a87:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a8a:	75 09                	jne    c0012a95 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a8c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a8f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a93:	eb 05                	jmp    c0012a9a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a95:	48                   	dec    eax
c0012a96:	eb e7                	jmp    c0012a7f <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a98:	31 c0                	xor    eax,eax
c0012a9a:	83 c4 08             	add    esp,0x8
c0012a9d:	5b                   	pop    ebx
c0012a9e:	c3                   	ret    

c0012a9f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a9f:	55                   	push   ebp
c0012aa0:	57                   	push   edi
c0012aa1:	56                   	push   esi
c0012aa2:	53                   	push   ebx
c0012aa3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012aa9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012ab0:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012ab2:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012ab5:	80 fb 40             	cmp    bl,0x40
c0012ab8:	75 19                	jne    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0012aba:	8a 06                	mov    al,BYTE PTR [esi]
c0012abc:	84 c0                	test   al,al
c0012abe:	74 07                	je     c0012ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012ac0:	3c 3a                	cmp    al,0x3a
c0012ac2:	74 03                	je     c0012ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012ac4:	46                   	inc    esi
c0012ac5:	eb f3                	jmp    c0012aba <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012ac7:	84 c0                	test   al,al
c0012ac9:	0f 84 2b 01 00 00    	je     c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012acf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ad2:	46                   	inc    esi
c0012ad3:	50                   	push   eax
c0012ad4:	6a 40                	push   0x40
c0012ad6:	6a 00                	push   0x0
c0012ad8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012adc:	50                   	push   eax
c0012add:	e8 9e da fe ff       	call   c0000580 <memset>
c0012ae2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012ae9:	31 d2                	xor    edx,edx
c0012aeb:	83 c4 10             	add    esp,0x10
c0012aee:	8a 07                	mov    al,BYTE PTR [edi]
c0012af0:	84 c0                	test   al,al
c0012af2:	0f 84 02 01 00 00    	je     c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012af8:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0012afe:	0f 8f f6 00 00 00    	jg     c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b04:	3c 0a                	cmp    al,0xa
c0012b06:	0f 85 df 00 00 00    	jne    c0012beb <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0012b0c:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0012b11:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012b15:	a8 df                	test   al,0xdf
c0012b17:	0f 94 c1             	sete   cl
c0012b1a:	3c 23                	cmp    al,0x23
c0012b1c:	0f 94 c2             	sete   dl
c0012b1f:	08 d1                	or     cl,dl
c0012b21:	75 50                	jne    c0012b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b23:	88 c2                	mov    dl,al
c0012b25:	80 ea 09             	sub    dl,0x9
c0012b28:	80 fa 01             	cmp    dl,0x1
c0012b2b:	76 46                	jbe    c0012b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b2d:	3c 5b                	cmp    al,0x5b
c0012b2f:	75 46                	jne    c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c0012b31:	80 fb 40             	cmp    bl,0x40
c0012b34:	75 3d                	jne    c0012b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b36:	83 ec 0c             	sub    esp,0xc
c0012b39:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012b3d:	52                   	push   edx
c0012b3e:	e8 dd da fe ff       	call   c0000620 <strlen>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	83 f8 3f             	cmp    eax,0x3f
c0012b49:	0f 87 ab 00 00 00    	ja     c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b4f:	50                   	push   eax
c0012b50:	50                   	push   eax
c0012b51:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012b55:	52                   	push   edx
c0012b56:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b5a:	52                   	push   edx
c0012b5b:	e8 c0 db fe ff       	call   c0000720 <strcpy>
c0012b60:	58                   	pop    eax
c0012b61:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b65:	52                   	push   edx
c0012b66:	e8 b5 da fe ff       	call   c0000620 <strlen>
c0012b6b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	31 c9                	xor    ecx,ecx
c0012b75:	eb 7b                	jmp    c0012bf2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0012b77:	80 fb 40             	cmp    bl,0x40
c0012b7a:	74 06                	je     c0012b82 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c0012b7c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b80:	eb 16                	jmp    c0012b98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012b82:	51                   	push   ecx
c0012b83:	51                   	push   ecx
c0012b84:	55                   	push   ebp
c0012b85:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b89:	50                   	push   eax
c0012b8a:	e8 b1 dc fe ff       	call   c0000840 <strcmp>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	85 c0                	test   eax,eax
c0012b94:	75 dd                	jne    c0012b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b96:	eb e4                	jmp    c0012b7c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0012b98:	8a 02                	mov    al,BYTE PTR [edx]
c0012b9a:	84 c0                	test   al,al
c0012b9c:	0f 94 c1             	sete   cl
c0012b9f:	3c 3d                	cmp    al,0x3d
c0012ba1:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0012ba6:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0012baa:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012bae:	75 03                	jne    c0012bb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c0012bb0:	42                   	inc    edx
c0012bb1:	eb e5                	jmp    c0012b98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012bb3:	84 c0                	test   al,al
c0012bb5:	74 43                	je     c0012bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012bb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bbb:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012bbe:	52                   	push   edx
c0012bbf:	52                   	push   edx
c0012bc0:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012bc4:	50                   	push   eax
c0012bc5:	56                   	push   esi
c0012bc6:	e8 75 dc fe ff       	call   c0000840 <strcmp>
c0012bcb:	83 c4 10             	add    esp,0x10
c0012bce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bd2:	85 c0                	test   eax,eax
c0012bd4:	75 9d                	jne    c0012b73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012bd6:	50                   	push   eax
c0012bd7:	42                   	inc    edx
c0012bd8:	50                   	push   eax
c0012bd9:	52                   	push   edx
c0012bda:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012be1:	e8 3a db fe ff       	call   c0000720 <strcpy>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	eb 14                	jmp    c0012bff <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0012beb:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0012bef:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012bf2:	47                   	inc    edi
c0012bf3:	89 ca                	mov    edx,ecx
c0012bf5:	e9 f4 fe ff ff       	jmp    c0012aee <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0012bfa:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012bff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c03:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c09:	5b                   	pop    ebx
c0012c0a:	5e                   	pop    esi
c0012c0b:	5f                   	pop    edi
c0012c0c:	5d                   	pop    ebp
c0012c0d:	c3                   	ret    

c0012c0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c0e:	57                   	push   edi
c0012c0f:	56                   	push   esi
c0012c10:	53                   	push   ebx
c0012c11:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c17:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c1e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c25:	53                   	push   ebx
c0012c26:	e8 f5 d9 fe ff       	call   c0000620 <strlen>
c0012c2b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c2e:	89 c7                	mov    edi,eax
c0012c30:	e8 eb d9 fe ff       	call   c0000620 <strlen>
c0012c35:	83 c4 10             	add    esp,0x10
c0012c38:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c3c:	3d ff 00 00 00       	cmp    eax,0xff
c0012c41:	0f 87 d3 00 00 00    	ja     c0012d1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c47:	57                   	push   edi
c0012c48:	57                   	push   edi
c0012c49:	56                   	push   esi
c0012c4a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c4e:	56                   	push   esi
c0012c4f:	e8 cc da fe ff       	call   c0000720 <strcpy>
c0012c54:	58                   	pop    eax
c0012c55:	5a                   	pop    edx
c0012c56:	68 9b 0e 02 c0       	push   0xc0020e9b
c0012c5b:	56                   	push   esi
c0012c5c:	e8 cf dc fe ff       	call   c0000930 <strcat>
c0012c61:	59                   	pop    ecx
c0012c62:	5f                   	pop    edi
c0012c63:	53                   	push   ebx
c0012c64:	56                   	push   esi
c0012c65:	e8 c6 dc fe ff       	call   c0000930 <strcat>
c0012c6a:	58                   	pop    eax
c0012c6b:	5a                   	pop    edx
c0012c6c:	68 47 0b 02 c0       	push   0xc0020b47
c0012c71:	56                   	push   esi
c0012c72:	e8 b9 dc fe ff       	call   c0000930 <strcat>
c0012c77:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c7e:	e8 83 4e ff ff       	call   c0007b06 <malloc>
c0012c83:	83 c4 0c             	add    esp,0xc
c0012c86:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c8c:	56                   	push   esi
c0012c8d:	50                   	push   eax
c0012c8e:	89 c3                	mov    ebx,eax
c0012c90:	e8 63 83 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	85 db                	test   ebx,ebx
c0012c9a:	74 7e                	je     c0012d1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c9c:	51                   	push   ecx
c0012c9d:	51                   	push   ecx
c0012c9e:	6a 01                	push   0x1
c0012ca0:	53                   	push   ebx
c0012ca1:	e8 10 84 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	85 c0                	test   eax,eax
c0012cab:	74 08                	je     c0012cb5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012cad:	83 ec 0c             	sub    esp,0xc
c0012cb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb2:	53                   	push   ebx
c0012cb3:	eb 5f                	jmp    c0012d14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012cb5:	52                   	push   edx
c0012cb6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012cba:	50                   	push   eax
c0012cbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012cbf:	50                   	push   eax
c0012cc0:	53                   	push   ebx
c0012cc1:	e8 96 86 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0012cc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	89 c1                	mov    ecx,eax
c0012ccf:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012cd3:	74 31                	je     c0012d06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cd5:	83 ec 0c             	sub    esp,0xc
c0012cd8:	50                   	push   eax
c0012cd9:	e8 28 4e ff ff       	call   c0007b06 <malloc>
c0012cde:	89 c6                	mov    esi,eax
c0012ce0:	58                   	pop    eax
c0012ce1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012ce7:	52                   	push   edx
c0012ce8:	56                   	push   esi
c0012ce9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ced:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cf1:	53                   	push   ebx
c0012cf2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cf5:	83 c4 20             	add    esp,0x20
c0012cf8:	85 c0                	test   eax,eax
c0012cfa:	75 0a                	jne    c0012d06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d00:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d04:	74 18                	je     c0012d1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	53                   	push   ebx
c0012d0a:	e8 05 84 ff ff       	call   c000b114 <File::close()>
c0012d0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	31 c0                	xor    eax,eax
c0012d1c:	eb 3b                	jmp    c0012d59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	53                   	push   ebx
c0012d22:	e8 ed 83 ff ff       	call   c000b114 <File::close()>
c0012d27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d2f:	83 c4 0c             	add    esp,0xc
c0012d32:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d39:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d40:	56                   	push   esi
c0012d41:	e8 59 fd ff ff       	call   c0012a9f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d46:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d49:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d4d:	e8 c7 4d ff ff       	call   c0007b19 <free>
c0012d52:	83 c4 10             	add    esp,0x10
c0012d55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d59:	81 c4 20 01 00 00    	add    esp,0x120
c0012d5f:	5b                   	pop    ebx
c0012d60:	5e                   	pop    esi
c0012d61:	5f                   	pop    edi
c0012d62:	c3                   	ret    

c0012d63 <Reg::getLine(char*, char*, char*)>:
c0012d63:	57                   	push   edi
c0012d64:	56                   	push   esi
c0012d65:	53                   	push   ebx
c0012d66:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d72:	57                   	push   edi
c0012d73:	56                   	push   esi
c0012d74:	53                   	push   ebx
c0012d75:	68 4c 0b 02 c0       	push   0xc0020b4c
c0012d7a:	e8 8f fe ff ff       	call   c0012c0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d7f:	83 c4 10             	add    esp,0x10
c0012d82:	84 c0                	test   al,al
c0012d84:	75 10                	jne    c0012d96 <Reg::getLine(char*, char*, char*)+0x33>
c0012d86:	57                   	push   edi
c0012d87:	56                   	push   esi
c0012d88:	53                   	push   ebx
c0012d89:	68 71 0b 02 c0       	push   0xc0020b71
c0012d8e:	e8 7b fe ff ff       	call   c0012c0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	5b                   	pop    ebx
c0012d97:	5e                   	pop    esi
c0012d98:	5f                   	pop    edi
c0012d99:	c3                   	ret    

c0012d9a <Reg::readInt(char*, char*, int*)>:
c0012d9a:	55                   	push   ebp
c0012d9b:	57                   	push   edi
c0012d9c:	56                   	push   esi
c0012d9d:	53                   	push   ebx
c0012d9e:	81 ec e0 00 00 00    	sub    esp,0xe0
c0012da4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012da8:	56                   	push   esi
c0012da9:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012db0:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012db7:	e8 a7 ff ff ff       	call   c0012d63 <Reg::getLine(char*, char*, char*)>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	84 c0                	test   al,al
c0012dc1:	0f 84 a4 00 00 00    	je     c0012e6b <Reg::readInt(char*, char*, int*)+0xd1>
c0012dc7:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012dcb:	80 fa 2b             	cmp    dl,0x2b
c0012dce:	74 0c                	je     c0012ddc <Reg::readInt(char*, char*, int*)+0x42>
c0012dd0:	80 fa 2d             	cmp    dl,0x2d
c0012dd3:	75 0e                	jne    c0012de3 <Reg::readInt(char*, char*, int*)+0x49>
c0012dd5:	ba 01 00 00 00       	mov    edx,0x1
c0012dda:	eb 0b                	jmp    c0012de7 <Reg::readInt(char*, char*, int*)+0x4d>
c0012ddc:	ba 01 00 00 00       	mov    edx,0x1
c0012de1:	eb 02                	jmp    c0012de5 <Reg::readInt(char*, char*, int*)+0x4b>
c0012de3:	31 d2                	xor    edx,edx
c0012de5:	31 c0                	xor    eax,eax
c0012de7:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0012dec:	bf 0a 00 00 00       	mov    edi,0xa
c0012df1:	75 20                	jne    c0012e13 <Reg::readInt(char*, char*, int*)+0x79>
c0012df3:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0012df7:	80 f9 78             	cmp    cl,0x78
c0012dfa:	75 0a                	jne    c0012e06 <Reg::readInt(char*, char*, int*)+0x6c>
c0012dfc:	83 c2 02             	add    edx,0x2
c0012dff:	bf 10 00 00 00       	mov    edi,0x10
c0012e04:	eb 0d                	jmp    c0012e13 <Reg::readInt(char*, char*, int*)+0x79>
c0012e06:	80 f9 62             	cmp    cl,0x62
c0012e09:	75 08                	jne    c0012e13 <Reg::readInt(char*, char*, int*)+0x79>
c0012e0b:	83 c2 02             	add    edx,0x2
c0012e0e:	bf 02 00 00 00       	mov    edi,0x2
c0012e13:	01 d6                	add    esi,edx
c0012e15:	31 ed                	xor    ebp,ebp
c0012e17:	8a 0e                	mov    cl,BYTE PTR [esi]
c0012e19:	84 c9                	test   cl,cl
c0012e1b:	0f 94 c2             	sete   dl
c0012e1e:	80 f9 0d             	cmp    cl,0xd
c0012e21:	0f 94 c3             	sete   bl
c0012e24:	08 d3                	or     bl,dl
c0012e26:	75 32                	jne    c0012e5a <Reg::readInt(char*, char*, int*)+0xc0>
c0012e28:	89 ea                	mov    edx,ebp
c0012e2a:	0f be e9             	movsx  ebp,cl
c0012e2d:	0f af d7             	imul   edx,edi
c0012e30:	83 ff 10             	cmp    edi,0x10
c0012e33:	75 1e                	jne    c0012e53 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e35:	88 cb                	mov    bl,cl
c0012e37:	80 eb 41             	sub    bl,0x41
c0012e3a:	80 fb 05             	cmp    bl,0x5
c0012e3d:	77 06                	ja     c0012e45 <Reg::readInt(char*, char*, int*)+0xab>
c0012e3f:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c0012e43:	eb 12                	jmp    c0012e57 <Reg::readInt(char*, char*, int*)+0xbd>
c0012e45:	80 e9 61             	sub    cl,0x61
c0012e48:	80 f9 05             	cmp    cl,0x5
c0012e4b:	77 06                	ja     c0012e53 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e4d:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c0012e51:	eb 04                	jmp    c0012e57 <Reg::readInt(char*, char*, int*)+0xbd>
c0012e53:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c0012e57:	46                   	inc    esi
c0012e58:	eb bd                	jmp    c0012e17 <Reg::readInt(char*, char*, int*)+0x7d>
c0012e5a:	84 c0                	test   al,al
c0012e5c:	74 02                	je     c0012e60 <Reg::readInt(char*, char*, int*)+0xc6>
c0012e5e:	f7 dd                	neg    ebp
c0012e60:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c0012e67:	89 28                	mov    DWORD PTR [eax],ebp
c0012e69:	88 d8                	mov    al,bl
c0012e6b:	81 c4 dc 00 00 00    	add    esp,0xdc
c0012e71:	5b                   	pop    ebx
c0012e72:	5e                   	pop    esi
c0012e73:	5f                   	pop    edi
c0012e74:	5d                   	pop    ebp
c0012e75:	c3                   	ret    

c0012e76 <Reg::readString(char*, char*, char*, int)>:
c0012e76:	56                   	push   esi
c0012e77:	53                   	push   ebx
c0012e78:	81 ec e8 00 00 00    	sub    esp,0xe8
c0012e7e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012e82:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0012e89:	56                   	push   esi
c0012e8a:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e91:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e98:	e8 c6 fe ff ff       	call   c0012d63 <Reg::getLine(char*, char*, char*)>
c0012e9d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ea9:	74 44                	je     c0012eef <Reg::readString(char*, char*, char*, int)+0x79>
c0012eab:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c0012eb2:	31 c0                	xor    eax,eax
c0012eb4:	4a                   	dec    edx
c0012eb5:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0012eb8:	84 c9                	test   cl,cl
c0012eba:	74 0f                	je     c0012ecb <Reg::readString(char*, char*, char*, int)+0x55>
c0012ebc:	39 c2                	cmp    edx,eax
c0012ebe:	7e 0b                	jle    c0012ecb <Reg::readString(char*, char*, char*, int)+0x55>
c0012ec0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012ec3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012ec8:	40                   	inc    eax
c0012ec9:	eb ea                	jmp    c0012eb5 <Reg::readString(char*, char*, char*, int)+0x3f>
c0012ecb:	83 ec 0c             	sub    esp,0xc
c0012ece:	53                   	push   ebx
c0012ecf:	e8 4c d7 fe ff       	call   c0000620 <strlen>
c0012ed4:	83 c4 10             	add    esp,0x10
c0012ed7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012edc:	75 11                	jne    c0012eef <Reg::readString(char*, char*, char*, int)+0x79>
c0012ede:	83 ec 0c             	sub    esp,0xc
c0012ee1:	53                   	push   ebx
c0012ee2:	e8 39 d7 fe ff       	call   c0000620 <strlen>
c0012ee7:	83 c4 10             	add    esp,0x10
c0012eea:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012eef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ef3:	81 c4 e4 00 00 00    	add    esp,0xe4
c0012ef9:	5b                   	pop    ebx
c0012efa:	5e                   	pop    esi
c0012efb:	c3                   	ret    

c0012efc <Reg::readBool(char*, char*, bool*)>:
c0012efc:	83 ec 20             	sub    esp,0x20
c0012eff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f03:	50                   	push   eax
c0012f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f0c:	e8 89 fe ff ff       	call   c0012d9a <Reg::readInt(char*, char*, int*)>
c0012f11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f15:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f1a:	0f 95 02             	setne  BYTE PTR [edx]
c0012f1d:	83 c4 2c             	add    esp,0x2c
c0012f20:	c3                   	ret    

c0012f21 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f21:	83 ec 30             	sub    esp,0x30
c0012f24:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c0012f28:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012f2c:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c0012f30:	50                   	push   eax
c0012f31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f39:	e8 be ff ff ff       	call   c0012efc <Reg::readBool(char*, char*, bool*)>
c0012f3e:	83 c4 10             	add    esp,0x10
c0012f41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012f45:	84 c0                	test   al,al
c0012f47:	74 04                	je     c0012f4d <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c0012f49:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c0012f4d:	88 d0                	mov    al,dl
c0012f4f:	83 c4 2c             	add    esp,0x2c
c0012f52:	c3                   	ret    

c0012f53 <Reg::readIntWithDefault(char*, char*, int)>:
c0012f53:	53                   	push   ebx
c0012f54:	83 ec 1c             	sub    esp,0x1c
c0012f57:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f5f:	50                   	push   eax
c0012f60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f68:	e8 2d fe ff ff       	call   c0012d9a <Reg::readInt(char*, char*, int*)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	84 c0                	test   al,al
c0012f72:	74 04                	je     c0012f78 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f78:	83 c4 18             	add    esp,0x18
c0012f7b:	89 d8                	mov    eax,ebx
c0012f7d:	5b                   	pop    ebx
c0012f7e:	c3                   	ret    

c0012f7f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f7f:	57                   	push   edi
c0012f80:	56                   	push   esi
c0012f81:	53                   	push   ebx
c0012f82:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f86:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f8e:	56                   	push   esi
c0012f8f:	57                   	push   edi
c0012f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f98:	e8 d9 fe ff ff       	call   c0012e76 <Reg::readString(char*, char*, char*, int)>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	84 c0                	test   al,al
c0012fa2:	75 16                	jne    c0012fba <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012fa4:	50                   	push   eax
c0012fa5:	56                   	push   esi
c0012fa6:	6a 00                	push   0x0
c0012fa8:	57                   	push   edi
c0012fa9:	e8 d2 d5 fe ff       	call   c0000580 <memset>
c0012fae:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012fb1:	89 de                	mov    esi,ebx
c0012fb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fb5:	83 c4 10             	add    esp,0x10
c0012fb8:	89 df                	mov    edi,ebx
c0012fba:	5b                   	pop    ebx
c0012fbb:	89 f8                	mov    eax,edi
c0012fbd:	5e                   	pop    esi
c0012fbe:	5f                   	pop    edi
c0012fbf:	c3                   	ret    

c0012fc0 <SysEject(regs*)>:
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	83 ca ff             	or     edx,0xffffffff
c0012fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fca:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012fcd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012fd2:	83 e9 41             	sub    ecx,0x41
c0012fd5:	83 f9 19             	cmp    ecx,0x19
c0012fd8:	77 18                	ja     c0012ff2 <SysEject(regs*)+0x32>
c0012fda:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012fe1:	85 c9                	test   ecx,ecx
c0012fe3:	74 0d                	je     c0012ff2 <SysEject(regs*)+0x32>
c0012fe5:	83 ec 0c             	sub    esp,0xc
c0012fe8:	51                   	push   ecx
c0012fe9:	e8 50 a1 ff ff       	call   c000d13e <LogicalDisk::eject()>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	99                   	cdq    
c0012ff2:	83 c4 0c             	add    esp,0xc
c0012ff5:	c3                   	ret    

c0012ff6 <SysExit(regs*)>:
c0012ff6:	83 ec 18             	sub    esp,0x18
c0012ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ffd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013000:	e8 93 29 00 00       	call   c0015998 <terminateTask(int)>
c0013005:	83 c8 ff             	or     eax,0xffffffff
c0013008:	83 c4 1c             	add    esp,0x1c
c001300b:	89 c2                	mov    edx,eax
c001300d:	c3                   	ret    

c001300e <SysGetCwd(regs*)>:
c001300e:	83 ec 10             	sub    esp,0x10
c0013011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013015:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013018:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001301b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013020:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013023:	e8 d5 7d ff ff       	call   c000adfd <Fs::getcwd(Process*, char*, int)>
c0013028:	83 c4 1c             	add    esp,0x1c
c001302b:	99                   	cdq    
c001302c:	c3                   	ret    

c001302d <SysGetPID(regs*)>:
c001302d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013032:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013035:	8b 00                	mov    eax,DWORD PTR [eax]
c0013037:	99                   	cdq    
c0013038:	c3                   	ret    

c0013039 <SysGetRAMData(regs*)>:
c0013039:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0013043:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0013049:	99                   	cdq    
c001304a:	f7 f9                	idiv   ecx
c001304c:	c1 e0 18             	shl    eax,0x18
c001304f:	09 c8                	or     eax,ecx
c0013051:	99                   	cdq    
c0013052:	c3                   	ret    

c0013053 <SysGetVGAPtr(regs*)>:
c0013053:	55                   	push   ebp
c0013054:	57                   	push   edi
c0013055:	56                   	push   esi
c0013056:	53                   	push   ebx
c0013057:	83 ec 18             	sub    esp,0x18
c001305a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001305e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013061:	e8 62 24 00 00       	call   c00154c8 <Thr::processFromPID(int)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	89 c1                	mov    ecx,eax
c001306b:	b8 01 00 00 00       	mov    eax,0x1
c0013070:	85 c9                	test   ecx,ecx
c0013072:	74 57                	je     c00130cb <SysGetVGAPtr(regs*)+0x78>
c0013074:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013078:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001307e:	74 0c                	je     c001308c <SysGetVGAPtr(regs*)+0x39>
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	55                   	push   ebp
c0013084:	e8 ea 56 ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001308f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013094:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013097:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013099:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001309c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001309f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00130a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130a8:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00130ab:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00130b1:	50                   	push   eax
c00130b2:	50                   	push   eax
c00130b3:	68 8c 0b 02 c0       	push   0xc0020b8c
c00130b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130bb:	05 a8 0f 00 00       	add    eax,0xfa8
c00130c0:	50                   	push   eax
c00130c1:	e8 5a d6 fe ff       	call   c0000720 <strcpy>
c00130c6:	83 c4 10             	add    esp,0x10
c00130c9:	31 c0                	xor    eax,eax
c00130cb:	83 c4 0c             	add    esp,0xc
c00130ce:	31 d2                	xor    edx,edx
c00130d0:	5b                   	pop    ebx
c00130d1:	5e                   	pop    esi
c00130d2:	5f                   	pop    edi
c00130d3:	5d                   	pop    ebp
c00130d4:	c3                   	ret    
c00130d5:	66 90                	xchg   ax,ax
c00130d7:	90                   	nop

c00130d8 <SysKill(regs*)>:
c00130d8:	53                   	push   ebx
c00130d9:	83 ec 08             	sub    esp,0x8
c00130dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130e0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00130e4:	75 16                	jne    c00130fc <SysKill(regs*)+0x24>
c00130e6:	83 ec 0c             	sub    esp,0xc
c00130e9:	68 96 0b 02 c0       	push   0xc0020b96
c00130ee:	e8 d2 d6 ff ff       	call   c00107c5 <KePanic(char const*)>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	e9 89 00 00 00       	jmp    c0013184 <SysKill(regs*)+0xac>
c00130fb:	90                   	nop
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	68 84 81 02 c0       	push   0xc0028184
c0013104:	e8 5b b8 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	83 c4 10             	add    esp,0x10
c001310f:	85 c0                	test   eax,eax
c0013111:	74 19                	je     c001312c <SysKill(regs*)+0x54>
c0013113:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013116:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013119:	39 0a                	cmp    DWORD PTR [edx],ecx
c001311b:	74 33                	je     c0013150 <SysKill(regs*)+0x78>
c001311d:	52                   	push   edx
c001311e:	52                   	push   edx
c001311f:	50                   	push   eax
c0013120:	68 84 81 02 c0       	push   0xc0028184
c0013125:	e8 22 bb 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001312a:	eb e0                	jmp    c001310c <SysKill(regs*)+0x34>
c001312c:	83 ec 0c             	sub    esp,0xc
c001312f:	68 78 81 02 c0       	push   0xc0028178
c0013134:	e8 2b b8 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013139:	8d 76 00             	lea    esi,[esi+0x0]
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	85 c0                	test   eax,eax
c0013141:	74 41                	je     c0013184 <SysKill(regs*)+0xac>
c0013143:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013146:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013149:	39 0a                	cmp    DWORD PTR [edx],ecx
c001314b:	75 27                	jne    c0013174 <SysKill(regs*)+0x9c>
c001314d:	8d 76 00             	lea    esi,[esi+0x0]
c0013150:	51                   	push   ecx
c0013151:	51                   	push   ecx
c0013152:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001315a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001315d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013163:	e8 cb da ff ff       	call   c0010c33 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	31 c0                	xor    eax,eax
c001316d:	31 d2                	xor    edx,edx
c001316f:	eb 1b                	jmp    c001318c <SysKill(regs*)+0xb4>
c0013171:	8d 76 00             	lea    esi,[esi+0x0]
c0013174:	52                   	push   edx
c0013175:	52                   	push   edx
c0013176:	50                   	push   eax
c0013177:	68 78 81 02 c0       	push   0xc0028178
c001317c:	e8 cb ba 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013181:	eb b9                	jmp    c001313c <SysKill(regs*)+0x64>
c0013183:	90                   	nop
c0013184:	83 c8 ff             	or     eax,0xffffffff
c0013187:	89 c2                	mov    edx,eax
c0013189:	8d 76 00             	lea    esi,[esi+0x0]
c001318c:	83 c4 08             	add    esp,0x8
c001318f:	5b                   	pop    ebx
c0013190:	c3                   	ret    

c0013191 <SysLoadDLL(regs*)>:
c0013191:	56                   	push   esi
c0013192:	31 d2                	xor    edx,edx
c0013194:	53                   	push   ebx
c0013195:	b8 01 00 00 00       	mov    eax,0x1
c001319a:	51                   	push   ecx
c001319b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001319f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00131a3:	0f 84 8c 00 00 00    	je     c0013235 <SysLoadDLL(regs*)+0xa4>
c00131a9:	83 ec 0c             	sub    esp,0xc
c00131ac:	68 14 01 00 00       	push   0x114
c00131b1:	e8 50 49 ff ff       	call   c0007b06 <malloc>
c00131b6:	83 c4 0c             	add    esp,0xc
c00131b9:	89 c3                	mov    ebx,eax
c00131bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131c0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131c3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131c6:	53                   	push   ebx
c00131c7:	e8 2c 7e ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00131cc:	83 c4 10             	add    esp,0x10
c00131cf:	31 d2                	xor    edx,edx
c00131d1:	85 db                	test   ebx,ebx
c00131d3:	b8 02 00 00 00       	mov    eax,0x2
c00131d8:	74 5b                	je     c0013235 <SysLoadDLL(regs*)+0xa4>
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	53                   	push   ebx
c00131de:	e8 3b 81 ff ff       	call   c000b31e <File::exists()>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	84 c0                	test   al,al
c00131e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131ea:	75 11                	jne    c00131fd <SysLoadDLL(regs*)+0x6c>
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	53                   	push   ebx
c00131f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131f3:	83 c4 10             	add    esp,0x10
c00131f6:	b8 03 00 00 00       	mov    eax,0x3
c00131fb:	eb 36                	jmp    c0013233 <SysLoadDLL(regs*)+0xa2>
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	53                   	push   ebx
c0013201:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013204:	58                   	pop    eax
c0013205:	5a                   	pop    edx
c0013206:	6a 00                	push   0x0
c0013208:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001320b:	e8 4d 14 00 00       	call   c001465d <Thr::loadDLL(char const*, bool)>
c0013210:	83 c4 10             	add    esp,0x10
c0013213:	31 d2                	xor    edx,edx
c0013215:	89 c1                	mov    ecx,eax
c0013217:	b8 04 00 00 00       	mov    eax,0x4
c001321c:	85 c9                	test   ecx,ecx
c001321e:	74 15                	je     c0013235 <SysLoadDLL(regs*)+0xa4>
c0013220:	53                   	push   ebx
c0013221:	53                   	push   ebx
c0013222:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013228:	51                   	push   ecx
c0013229:	e8 6b 16 00 00       	call   c0014899 <Thr::executeDLL(unsigned long, void*)>
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	31 c0                	xor    eax,eax
c0013233:	31 d2                	xor    edx,edx
c0013235:	59                   	pop    ecx
c0013236:	5b                   	pop    ebx
c0013237:	5e                   	pop    esi
c0013238:	c3                   	ret    

c0013239 <SysRead(regs*)>:
c0013239:	57                   	push   edi
c001323a:	56                   	push   esi
c001323b:	53                   	push   ebx
c001323c:	83 ec 10             	sub    esp,0x10
c001323f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013243:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013246:	83 f8 02             	cmp    eax,0x2
c0013249:	77 10                	ja     c001325b <SysRead(regs*)+0x22>
c001324b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013250:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013253:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013259:	eb 0e                	jmp    c0013269 <SysRead(regs*)+0x30>
c001325b:	83 ec 0c             	sub    esp,0xc
c001325e:	50                   	push   eax
c001325f:	e8 53 62 ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	89 c1                	mov    ecx,eax
c0013269:	83 c8 ff             	or     eax,0xffffffff
c001326c:	85 c9                	test   ecx,ecx
c001326e:	89 c2                	mov    edx,eax
c0013270:	74 28                	je     c001329a <SysRead(regs*)+0x61>
c0013272:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001327a:	83 ec 0c             	sub    esp,0xc
c001327d:	31 ff                	xor    edi,edi
c001327f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013283:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013285:	52                   	push   edx
c0013286:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013289:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001328c:	57                   	push   edi
c001328d:	56                   	push   esi
c001328e:	51                   	push   ecx
c001328f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013292:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013296:	83 c4 20             	add    esp,0x20
c0013299:	99                   	cdq    
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	5b                   	pop    ebx
c001329e:	5e                   	pop    esi
c001329f:	5f                   	pop    edi
c00132a0:	c3                   	ret    

c00132a1 <SysRegisterSignal(regs*)>:
c00132a1:	83 ec 18             	sub    esp,0x18
c00132a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a8:	6a 00                	push   0x0
c00132aa:	6a 00                	push   0x0
c00132ac:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00132af:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00132b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132ba:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00132c0:	e8 38 d9 ff ff       	call   c0010bfd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00132c5:	83 c4 2c             	add    esp,0x2c
c00132c8:	99                   	cdq    
c00132c9:	c3                   	ret    

c00132ca <SysRegistryGetTypeFromPath(regs*)>:
c00132ca:	57                   	push   edi
c00132cb:	56                   	push   esi
c00132cc:	53                   	push   ebx
c00132cd:	81 ec 38 01 00 00    	sub    esp,0x138
c00132d3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00132da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132dd:	68 b7 0b 02 c0       	push   0xc0020bb7
c00132e2:	e8 8f 77 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00132e7:	5a                   	pop    edx
c00132e8:	59                   	pop    ecx
c00132e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132ef:	e8 55 f6 ff ff       	call   c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132f4:	5f                   	pop    edi
c00132f5:	5a                   	pop    edx
c00132f6:	89 c6                	mov    esi,eax
c00132f8:	50                   	push   eax
c00132f9:	68 d7 0b 02 c0       	push   0xc0020bd7
c00132fe:	e8 73 77 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013303:	83 c4 10             	add    esp,0x10
c0013306:	85 f6                	test   esi,esi
c0013308:	74 28                	je     c0013332 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001330a:	50                   	push   eax
c001330b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001330f:	57                   	push   edi
c0013310:	56                   	push   esi
c0013311:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013314:	e8 1e f2 ff ff       	call   c0012537 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013319:	83 c4 0c             	add    esp,0xc
c001331c:	57                   	push   edi
c001331d:	50                   	push   eax
c001331e:	89 c3                	mov    ebx,eax
c0013320:	68 df 0b 02 c0       	push   0xc0020bdf
c0013325:	e8 4c 77 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001332a:	89 d8                	mov    eax,ebx
c001332c:	83 c4 10             	add    esp,0x10
c001332f:	99                   	cdq    
c0013330:	eb 05                	jmp    c0013337 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013332:	83 c8 ff             	or     eax,0xffffffff
c0013335:	89 c2                	mov    edx,eax
c0013337:	81 c4 30 01 00 00    	add    esp,0x130
c001333d:	5b                   	pop    ebx
c001333e:	5e                   	pop    esi
c001333f:	5f                   	pop    edi
c0013340:	c3                   	ret    

c0013341 <SysRegistryReadExtent(regs*)>:
c0013341:	83 ec 1c             	sub    esp,0x1c
c0013344:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013348:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001334b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001334e:	85 c0                	test   eax,eax
c0013350:	79 1f                	jns    c0013371 <SysRegistryReadExtent(regs*)+0x30>
c0013352:	52                   	push   edx
c0013353:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013358:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001335c:	52                   	push   edx
c001335d:	50                   	push   eax
c001335e:	51                   	push   ecx
c001335f:	e8 c5 f0 ff ff       	call   c0012429 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013364:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001336c:	83 c4 10             	add    esp,0x10
c001336f:	eb 14                	jmp    c0013385 <SysRegistryReadExtent(regs*)+0x44>
c0013371:	83 ec 04             	sub    esp,0x4
c0013374:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013377:	50                   	push   eax
c0013378:	51                   	push   ecx
c0013379:	e8 43 eb ff ff       	call   c0011ec1 <CmGetString(Reghive_Tag*, int, char*)>
c001337e:	83 c4 10             	add    esp,0x10
c0013381:	31 c0                	xor    eax,eax
c0013383:	31 d2                	xor    edx,edx
c0013385:	83 c4 1c             	add    esp,0x1c
c0013388:	c3                   	ret    

c0013389 <SysRegistryPathToExtentLookup(regs*)>:
c0013389:	53                   	push   ebx
c001338a:	83 ec 10             	sub    esp,0x10
c001338d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013391:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013394:	68 f5 0b 02 c0       	push   0xc0020bf5
c0013399:	e8 d8 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001339e:	58                   	pop    eax
c001339f:	5a                   	pop    edx
c00133a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133a3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133a6:	e8 9e f5 ff ff       	call   c0012949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00133ab:	83 c4 18             	add    esp,0x18
c00133ae:	5b                   	pop    ebx
c00133af:	99                   	cdq    
c00133b0:	c3                   	ret    

c00133b1 <SysRegistryEnterDirectory(regs*)>:
c00133b1:	53                   	push   ebx
c00133b2:	83 ec 10             	sub    esp,0x10
c00133b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133bc:	68 18 0c 02 c0       	push   0xc0020c18
c00133c1:	e8 b0 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00133c6:	58                   	pop    eax
c00133c7:	5a                   	pop    edx
c00133c8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133cb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ce:	e8 65 eb ff ff       	call   c0011f38 <CmEnterDirectory(Reghive_Tag*, int)>
c00133d3:	83 c4 18             	add    esp,0x18
c00133d6:	5b                   	pop    ebx
c00133d7:	99                   	cdq    
c00133d8:	c3                   	ret    

c00133d9 <SysRegistryGetNext(regs*)>:
c00133d9:	53                   	push   ebx
c00133da:	83 ec 10             	sub    esp,0x10
c00133dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133e4:	68 36 0c 02 c0       	push   0xc0020c36
c00133e9:	e8 88 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00133ee:	58                   	pop    eax
c00133ef:	5a                   	pop    edx
c00133f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133f3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133f6:	e8 7c eb ff ff       	call   c0011f77 <CmGetNext(Reghive_Tag*, int)>
c00133fb:	83 c4 18             	add    esp,0x18
c00133fe:	5b                   	pop    ebx
c00133ff:	99                   	cdq    
c0013400:	c3                   	ret    

c0013401 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013401:	57                   	push   edi
c0013402:	56                   	push   esi
c0013403:	53                   	push   ebx
c0013404:	81 ec 34 01 00 00    	sub    esp,0x134
c001340a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013411:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013415:	57                   	push   edi
c0013416:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013419:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001341c:	e8 16 f1 ff ff       	call   c0012537 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013421:	89 c3                	mov    ebx,eax
c0013423:	58                   	pop    eax
c0013424:	5a                   	pop    edx
c0013425:	57                   	push   edi
c0013426:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013429:	e8 f2 d2 fe ff       	call   c0000720 <strcpy>
c001342e:	81 c4 40 01 00 00    	add    esp,0x140
c0013434:	89 d8                	mov    eax,ebx
c0013436:	5b                   	pop    ebx
c0013437:	99                   	cdq    
c0013438:	5e                   	pop    esi
c0013439:	5f                   	pop    edi
c001343a:	c3                   	ret    

c001343b <SysRegistryOpen(regs*)>:
c001343b:	83 ec 18             	sub    esp,0x18
c001343e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013442:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013445:	e8 07 e9 ff ff       	call   c0011d51 <CmOpen(char const*)>
c001344a:	83 c4 1c             	add    esp,0x1c
c001344d:	99                   	cdq    
c001344e:	c3                   	ret    

c001344f <SysRegistryClose(regs*)>:
c001344f:	83 ec 18             	sub    esp,0x18
c0013452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013456:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013459:	e8 11 ea ff ff       	call   c0011e6f <CmClose(Reghive_Tag*)>
c001345e:	31 c0                	xor    eax,eax
c0013460:	31 d2                	xor    edx,edx
c0013462:	83 c4 1c             	add    esp,0x1c
c0013465:	c3                   	ret    

c0013466 <SysSbrk(regs*)>:
c0013466:	56                   	push   esi
c0013467:	53                   	push   ebx
c0013468:	50                   	push   eax
c0013469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001346e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013472:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013475:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013478:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001347e:	85 db                	test   ebx,ebx
c0013480:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013483:	74 02                	je     c0013487 <SysSbrk(regs*)+0x21>
c0013485:	79 06                	jns    c001348d <SysSbrk(regs*)+0x27>
c0013487:	89 f0                	mov    eax,esi
c0013489:	31 d2                	xor    edx,edx
c001348b:	eb 2a                	jmp    c00134b7 <SysSbrk(regs*)+0x51>
c001348d:	83 c8 ff             	or     eax,0xffffffff
c0013490:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013496:	89 c2                	mov    edx,eax
c0013498:	77 1d                	ja     c00134b7 <SysSbrk(regs*)+0x51>
c001349a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00134a0:	50                   	push   eax
c00134a1:	68 07 0c 00 00       	push   0xc07
c00134a6:	c1 ea 0c             	shr    edx,0xc
c00134a9:	52                   	push   edx
c00134aa:	51                   	push   ecx
c00134ab:	e8 c6 69 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c00134b0:	89 f0                	mov    eax,esi
c00134b2:	31 d2                	xor    edx,edx
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	59                   	pop    ecx
c00134b8:	5b                   	pop    ebx
c00134b9:	5e                   	pop    esi
c00134ba:	c3                   	ret    

c00134bb <SysSetCwd(regs*)>:
c00134bb:	83 ec 14             	sub    esp,0x14
c00134be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ca:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134cd:	e8 eb 7e ff ff       	call   c000b3bd <Fs::setcwd(Process*, char*)>
c00134d2:	83 c4 1c             	add    esp,0x1c
c00134d5:	99                   	cdq    
c00134d6:	c3                   	ret    

c00134d7 <SysSetTime(regs*)>:
c00134d7:	56                   	push   esi
c00134d8:	be 0c 00 00 00       	mov    esi,0xc
c00134dd:	53                   	push   ebx
c00134de:	83 ec 18             	sub    esp,0x18
c00134e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00134e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00134f5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134f8:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00134fb:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00134fe:	89 c2                	mov    edx,eax
c0013500:	c1 e8 05             	shr    eax,0x5
c0013503:	83 e2 1f             	and    edx,0x1f
c0013506:	42                   	inc    edx
c0013507:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c001350d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013511:	c1 e3 10             	shl    ebx,0x10
c0013514:	31 d2                	xor    edx,edx
c0013516:	f7 f6                	div    esi
c0013518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001351c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013520:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013526:	88 d4                	mov    ah,dl
c0013528:	31 d2                	xor    edx,edx
c001352a:	0f b7 c0             	movzx  eax,ax
c001352d:	09 d8                	or     eax,ebx
c001352f:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013538:	89 c8                	mov    eax,ecx
c001353a:	f7 f3                	div    ebx
c001353c:	c1 e2 10             	shl    edx,0x10
c001353f:	09 d6                	or     esi,edx
c0013541:	31 d2                	xor    edx,edx
c0013543:	f7 f3                	div    ebx
c0013545:	89 f0                	mov    eax,esi
c0013547:	bb 10 0e 00 00       	mov    ebx,0xe10
c001354c:	88 d4                	mov    ah,dl
c001354e:	31 d2                	xor    edx,edx
c0013550:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013554:	89 c8                	mov    eax,ecx
c0013556:	b9 18 00 00 00       	mov    ecx,0x18
c001355b:	f7 f3                	div    ebx
c001355d:	31 d2                	xor    edx,edx
c001355f:	f7 f1                	div    ecx
c0013561:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013566:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c001356a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001356e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013572:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013578:	e8 37 86 ff ff       	call   c000bbb4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001357d:	83 c4 24             	add    esp,0x24
c0013580:	31 d2                	xor    edx,edx
c0013582:	5b                   	pop    ebx
c0013583:	5e                   	pop    esi
c0013584:	34 01                	xor    al,0x1
c0013586:	0f b6 c0             	movzx  eax,al
c0013589:	c3                   	ret    

c001358a <SysTimezone(regs*)>:
c001358a:	53                   	push   ebx
c001358b:	83 ec 08             	sub    esp,0x8
c001358e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013592:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013596:	75 17                	jne    c00135af <SysTimezone(regs*)+0x25>
c0013598:	83 ec 0c             	sub    esp,0xc
c001359b:	68 4d 0c 02 c0       	push   0xc0020c4d
c00135a0:	e8 d1 74 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00135a5:	83 c8 ff             	or     eax,0xffffffff
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	89 c2                	mov    edx,eax
c00135ad:	eb 20                	jmp    c00135cf <SysTimezone(regs*)+0x45>
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	68 62 0c 02 c0       	push   0xc0020c62
c00135b7:	e8 ba 74 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00135bc:	58                   	pop    eax
c00135bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00135c0:	e8 5f 83 ff ff       	call   c000b924 <User::loadClockSettings(int)>
c00135c5:	83 c4 10             	add    esp,0x10
c00135c8:	b8 01 00 00 00       	mov    eax,0x1
c00135cd:	31 d2                	xor    edx,edx
c00135cf:	83 c4 08             	add    esp,0x8
c00135d2:	5b                   	pop    ebx
c00135d3:	c3                   	ret    

c00135d4 <SysWrite(regs*)>:
c00135d4:	57                   	push   edi
c00135d5:	56                   	push   esi
c00135d6:	53                   	push   ebx
c00135d7:	83 ec 10             	sub    esp,0x10
c00135da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00135de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00135e1:	83 f8 02             	cmp    eax,0x2
c00135e4:	77 10                	ja     c00135f6 <SysWrite(regs*)+0x22>
c00135e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135ee:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00135f4:	eb 0e                	jmp    c0013604 <SysWrite(regs*)+0x30>
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	50                   	push   eax
c00135fa:	e8 b8 5e ff ff       	call   c00094b7 <getFromFileDescriptor(int)>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	89 c1                	mov    ecx,eax
c0013604:	83 c8 ff             	or     eax,0xffffffff
c0013607:	85 c9                	test   ecx,ecx
c0013609:	89 c2                	mov    edx,eax
c001360b:	74 28                	je     c0013635 <SysWrite(regs*)+0x61>
c001360d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013615:	83 ec 0c             	sub    esp,0xc
c0013618:	31 ff                	xor    edi,edi
c001361a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001361e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013620:	52                   	push   edx
c0013621:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013624:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013627:	57                   	push   edi
c0013628:	56                   	push   esi
c0013629:	51                   	push   ecx
c001362a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001362d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013631:	83 c4 20             	add    esp,0x20
c0013634:	99                   	cdq    
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	5b                   	pop    ebx
c0013639:	5e                   	pop    esi
c001363a:	5f                   	pop    edi
c001363b:	c3                   	ret    

c001363c <SysWsbe(regs*)>:
c001363c:	57                   	push   edi
c001363d:	b9 0b 00 00 00       	mov    ecx,0xb
c0013642:	56                   	push   esi
c0013643:	be a1 0c 02 c0       	mov    esi,0xc0020ca1
c0013648:	53                   	push   ebx
c0013649:	83 ec 30             	sub    esp,0x30
c001364c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013650:	fc                   	cld    
c0013651:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001365a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001365f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013662:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013668:	8b 06                	mov    eax,DWORD PTR [esi]
c001366a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001366d:	57                   	push   edi
c001366e:	e8 ad cf fe ff       	call   c0000620 <strlen>
c0013673:	5a                   	pop    edx
c0013674:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013678:	52                   	push   edx
c0013679:	31 d2                	xor    edx,edx
c001367b:	57                   	push   edi
c001367c:	52                   	push   edx
c001367d:	50                   	push   eax
c001367e:	56                   	push   esi
c001367f:	ff d3                	call   ebx
c0013681:	83 c4 14             	add    esp,0x14
c0013684:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013688:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001368b:	e8 08 23 00 00       	call   c0015998 <terminateTask(int)>
c0013690:	83 c4 40             	add    esp,0x40
c0013693:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013698:	5b                   	pop    ebx
c0013699:	31 d2                	xor    edx,edx
c001369b:	5e                   	pop    esi
c001369c:	5f                   	pop    edi
c001369d:	c3                   	ret    

c001369e <SysYield(regs*)>:
c001369e:	83 ec 0c             	sub    esp,0xc
c00136a1:	fa                   	cli    
c00136a2:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00136a8:	e8 33 1a 00 00       	call   c00150e0 <schedule()>
c00136ad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00136b2:	48                   	dec    eax
c00136b3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00136b8:	75 01                	jne    c00136bb <SysYield(regs*)+0x1d>
c00136ba:	fb                   	sti    
c00136bb:	31 c0                	xor    eax,eax
c00136bd:	31 d2                	xor    edx,edx
c00136bf:	83 c4 0c             	add    esp,0xc
c00136c2:	c3                   	ret    

c00136c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00136c3:	55                   	push   ebp
c00136c4:	57                   	push   edi
c00136c5:	56                   	push   esi
c00136c6:	53                   	push   ebx
c00136c7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00136cd:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00136d8:	74 3b                	je     c0013715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00136da:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00136e2:	74 31                	je     c0013715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00136e4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00136ec:	75 27                	jne    c0013715 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00136ee:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00136f5:	05 00 10 00 00       	add    eax,0x1000
c00136fa:	89 c2                	mov    edx,eax
c00136fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013701:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013708:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001370e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013715:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001371c:	83 ec 0c             	sub    esp,0xc
c001371f:	6a 01                	push   0x1
c0013721:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013727:	e8 f4 5e ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013735:	89 c3                	mov    ebx,eax
c0013737:	0f 86 26 01 00 00    	jbe    c0013863 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001373d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013745:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001374c:	c1 ee 0c             	shr    esi,0xc
c001374f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013753:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001375a:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013761:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013765:	29 ef                	sub    edi,ebp
c0013767:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001376b:	0f 83 f9 00 00 00    	jae    c001386a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013771:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013777:	b8 00 10 00 00       	mov    eax,0x1000
c001377c:	0f 47 f8             	cmova  edi,eax
c001377f:	83 ec 0c             	sub    esp,0xc
c0013782:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013789:	31 d2                	xor    edx,edx
c001378b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001378d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013791:	50                   	push   eax
c0013792:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013796:	56                   	push   esi
c0013797:	52                   	push   edx
c0013798:	57                   	push   edi
c0013799:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00137a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137a3:	83 c4 20             	add    esp,0x20
c00137a6:	85 c0                	test   eax,eax
c00137a8:	75 06                	jne    c00137b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00137aa:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00137ae:	74 13                	je     c00137c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	53                   	push   ebx
c00137b4:	e8 80 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00137b9:	83 c4 10             	add    esp,0x10
c00137bc:	31 c0                	xor    eax,eax
c00137be:	e9 7c 01 00 00       	jmp    c001393f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00137c3:	fa                   	cli    
c00137c4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137ca:	e8 3d 46 ff ff       	call   c0007e0c <Phys::allocatePage()>
c00137cf:	6a 07                	push   0x7
c00137d1:	53                   	push   ebx
c00137d2:	50                   	push   eax
c00137d3:	89 c7                	mov    edi,eax
c00137d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137e3:	e8 5a 65 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c00137e8:	83 c4 0c             	add    esp,0xc
c00137eb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137f8:	6a 00                	push   0x0
c00137fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013802:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013808:	e8 a1 63 ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c001380d:	58                   	pop    eax
c001380e:	5a                   	pop    edx
c001380f:	68 07 0c 00 00       	push   0xc07
c0013814:	55                   	push   ebp
c0013815:	57                   	push   edi
c0013816:	89 df                	mov    edi,ebx
c0013818:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001381f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013825:	6a 00                	push   0x0
c0013827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001382c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001382f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013835:	e8 16 69 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001383a:	b9 00 10 00 00       	mov    ecx,0x1000
c001383f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013841:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013846:	83 c4 20             	add    esp,0x20
c0013849:	48                   	dec    eax
c001384a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001384f:	85 c0                	test   eax,eax
c0013851:	75 01                	jne    c0013854 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0013853:	fb                   	sti    
c0013854:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013858:	81 c5 00 10 00 00    	add    ebp,0x1000
c001385e:	e9 f0 fe ff ff       	jmp    c0013753 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013863:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001386a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013871:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013877:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001387d:	0f 86 ae 00 00 00    	jbe    c0013931 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013883:	fa                   	cli    
c0013884:	51                   	push   ecx
c0013885:	31 ff                	xor    edi,edi
c0013887:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001388e:	c1 ee 0c             	shr    esi,0xc
c0013891:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013897:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001389d:	6a 00                	push   0x0
c001389f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138ad:	e8 fc 62 ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	e8 52 45 ff ff       	call   c0007e0c <Phys::allocatePage()>
c00138ba:	47                   	inc    edi
c00138bb:	6a 07                	push   0x7
c00138bd:	53                   	push   ebx
c00138be:	50                   	push   eax
c00138bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00138c9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00138cc:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00138d2:	e8 6b 64 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c00138d7:	58                   	pop    eax
c00138d8:	5a                   	pop    edx
c00138d9:	68 07 0c 00 00       	push   0xc07
c00138de:	55                   	push   ebp
c00138df:	81 c5 00 10 00 00    	add    ebp,0x1000
c00138e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138e9:	50                   	push   eax
c00138ea:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00138f1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138f7:	6a 00                	push   0x0
c00138f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013901:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013907:	e8 44 68 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001390c:	83 c4 1c             	add    esp,0x1c
c001390f:	68 00 10 00 00       	push   0x1000
c0013914:	6a 00                	push   0x0
c0013916:	53                   	push   ebx
c0013917:	e8 64 cc fe ff       	call   c0000580 <memset>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	39 fe                	cmp    esi,edi
c0013921:	77 92                	ja     c00138b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013923:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013928:	48                   	dec    eax
c0013929:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001392e:	75 01                	jne    c0013931 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013930:	fb                   	sti    
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	53                   	push   ebx
c0013935:	e8 ff 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	b0 01                	mov    al,0x1
c001393f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013945:	5b                   	pop    ebx
c0013946:	5e                   	pop    esi
c0013947:	5f                   	pop    edi
c0013948:	5d                   	pop    ebp
c0013949:	c3                   	ret    

c001394a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001394a:	55                   	push   ebp
c001394b:	57                   	push   edi
c001394c:	56                   	push   esi
c001394d:	53                   	push   ebx
c001394e:	83 ec 48             	sub    esp,0x48
c0013951:	68 14 01 00 00       	push   0x114
c0013956:	e8 ab 41 ff ff       	call   c0007b06 <malloc>
c001395b:	83 c4 0c             	add    esp,0xc
c001395e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013962:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013966:	89 c7                	mov    edi,eax
c0013968:	50                   	push   eax
c0013969:	e8 8a 76 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001396e:	58                   	pop    eax
c001396f:	5a                   	pop    edx
c0013970:	6a 01                	push   0x1
c0013972:	57                   	push   edi
c0013973:	e8 3e 77 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	85 c0                	test   eax,eax
c001397d:	0f 85 4d 01 00 00    	jne    c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013983:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001398b:	83 ec 0c             	sub    esp,0xc
c001398e:	6a 34                	push   0x34
c0013990:	e8 71 41 ff ff       	call   c0007b06 <malloc>
c0013995:	89 c3                	mov    ebx,eax
c0013997:	58                   	pop    eax
c0013998:	8b 07                	mov    eax,DWORD PTR [edi]
c001399a:	8d 74 24 38          	lea    esi,[esp+0x38]
c001399e:	56                   	push   esi
c001399f:	53                   	push   ebx
c00139a0:	6a 00                	push   0x0
c00139a2:	6a 34                	push   0x34
c00139a4:	57                   	push   edi
c00139a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139a8:	83 c4 20             	add    esp,0x20
c00139ab:	85 c0                	test   eax,eax
c00139ad:	0f 85 1d 01 00 00    	jne    c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139b3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00139b9:	0f 85 11 01 00 00    	jne    c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139c2:	85 c0                	test   eax,eax
c00139c4:	0f 84 06 01 00 00    	je     c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139ca:	31 d2                	xor    edx,edx
c00139cc:	55                   	push   ebp
c00139cd:	52                   	push   edx
c00139ce:	50                   	push   eax
c00139cf:	57                   	push   edi
c00139d0:	e8 9f 77 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00139d5:	83 c4 10             	add    esp,0x10
c00139d8:	85 c0                	test   eax,eax
c00139da:	0f 85 f0 00 00 00    	jne    c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00139e3:	83 ec 0c             	sub    esp,0xc
c00139e6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00139ee:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139f2:	0f af c2             	imul   eax,edx
c00139f5:	50                   	push   eax
c00139f6:	e8 0b 41 ff ff       	call   c0007b06 <malloc>
c00139fb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a00:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a08:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a0c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a10:	0f af c2             	imul   eax,edx
c0013a13:	99                   	cdq    
c0013a14:	52                   	push   edx
c0013a15:	50                   	push   eax
c0013a16:	57                   	push   edi
c0013a17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a1a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a1d:	83 c4 20             	add    esp,0x20
c0013a20:	85 c0                	test   eax,eax
c0013a22:	0f 84 a8 00 00 00    	je     c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a28:	31 d2                	xor    edx,edx
c0013a2a:	51                   	push   ecx
c0013a2b:	52                   	push   edx
c0013a2c:	50                   	push   eax
c0013a2d:	57                   	push   edi
c0013a2e:	e8 41 77 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	85 c0                	test   eax,eax
c0013a38:	0f 85 92 00 00 00    	jne    c0013ad0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a3e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a42:	83 ec 0c             	sub    esp,0xc
c0013a45:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a49:	0f af c2             	imul   eax,edx
c0013a4c:	50                   	push   eax
c0013a4d:	e8 b4 40 ff ff       	call   c0007b06 <malloc>
c0013a52:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013a54:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a5f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a63:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a67:	0f af c2             	imul   eax,edx
c0013a6a:	99                   	cdq    
c0013a6b:	52                   	push   edx
c0013a6c:	50                   	push   eax
c0013a6d:	57                   	push   edi
c0013a6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a71:	83 c4 20             	add    esp,0x20
c0013a74:	31 c9                	xor    ecx,ecx
c0013a76:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a7e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a82:	39 c8                	cmp    eax,ecx
c0013a84:	0f 86 8b 00 00 00    	jbe    c0013b15 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c0013a8a:	89 cd                	mov    ebp,ecx
c0013a8c:	c1 e5 05             	shl    ebp,0x5
c0013a8f:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013a93:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013a97:	75 73                	jne    c0013b0c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c0013a99:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013aa0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013aa3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aa7:	52                   	push   edx
c0013aa8:	31 d2                	xor    edx,edx
c0013aaa:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013aad:	52                   	push   edx
c0013aae:	50                   	push   eax
c0013aaf:	57                   	push   edi
c0013ab0:	e8 bf 76 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013abc:	85 c0                	test   eax,eax
c0013abe:	74 17                	je     c0013ad7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0013ac0:	83 ec 0c             	sub    esp,0xc
c0013ac3:	68 cd 0c 02 c0       	push   0xc0020ccd
c0013ac8:	e8 a9 6f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	31 c0                	xor    eax,eax
c0013ad2:	e9 8e 00 00 00       	jmp    c0013b65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0013ad7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013adb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013ade:	83 ec 0c             	sub    esp,0xc
c0013ae1:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013ae4:	50                   	push   eax
c0013ae5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013ae9:	56                   	push   esi
c0013aea:	57                   	push   edi
c0013aeb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013aef:	e8 cf fb ff ff       	call   c00136c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013af4:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013af8:	83 c4 20             	add    esp,0x20
c0013afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013aff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b03:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013b08:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013b0c:	41                   	inc    ecx
c0013b0d:	0f b7 c9             	movzx  ecx,cx
c0013b10:	e9 69 ff ff ff       	jmp    c0013a7e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b15:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013b19:	83 ec 0c             	sub    esp,0xc
c0013b1c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b24:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c0013b2a:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013b30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b35:	05 00 10 00 00       	add    eax,0x1000
c0013b3a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b41:	e8 d3 3f ff ff       	call   c0007b19 <free>
c0013b46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b49:	e8 cb 3f ff ff       	call   c0007b19 <free>
c0013b4e:	58                   	pop    eax
c0013b4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b53:	e8 c1 3f ff ff       	call   c0007b19 <free>
c0013b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013b5b:	e8 b4 75 ff ff       	call   c000b114 <File::close()>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	b0 01                	mov    al,0x1
c0013b65:	83 c4 3c             	add    esp,0x3c
c0013b68:	5b                   	pop    ebx
c0013b69:	5e                   	pop    esi
c0013b6a:	5f                   	pop    edi
c0013b6b:	5d                   	pop    ebp
c0013b6c:	c3                   	ret    

c0013b6d <Thr::runtimeReferenceHelper()>:
c0013b6d:	83 ec 18             	sub    esp,0x18
c0013b70:	68 d5 0c 02 c0       	push   0xc0020cd5
c0013b75:	e8 fc 6e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013b7a:	fa                   	cli    
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	eb fe                	jmp    c0013b7e <Thr::runtimeReferenceHelper()+0x11>

c0013b80 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b80:	57                   	push   edi
c0013b81:	56                   	push   esi
c0013b82:	53                   	push   ebx
c0013b83:	31 db                	xor    ebx,ebx
c0013b85:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b8b:	7e 3c                	jle    c0013bc9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b8d:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b94:	31 ff                	xor    edi,edi
c0013b96:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b9d:	7e 27                	jle    c0013bc6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b9f:	50                   	push   eax
c0013ba0:	50                   	push   eax
c0013ba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ba5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ba7:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013bae:	50                   	push   eax
c0013baf:	e8 8c cc fe ff       	call   c0000840 <strcmp>
c0013bb4:	83 c4 10             	add    esp,0x10
c0013bb7:	85 c0                	test   eax,eax
c0013bb9:	75 05                	jne    c0013bc0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013bbb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013bbe:	eb 0b                	jmp    c0013bcb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013bc0:	83 c6 10             	add    esi,0x10
c0013bc3:	47                   	inc    edi
c0013bc4:	eb d0                	jmp    c0013b96 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013bc6:	43                   	inc    ebx
c0013bc7:	eb bc                	jmp    c0013b85 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013bc9:	31 c0                	xor    eax,eax
c0013bcb:	5b                   	pop    ebx
c0013bcc:	5e                   	pop    esi
c0013bcd:	5f                   	pop    edi
c0013bce:	c3                   	ret    

c0013bcf <Thr::loadKernelSymbolTable(char const*)>:
c0013bcf:	55                   	push   ebp
c0013bd0:	57                   	push   edi
c0013bd1:	56                   	push   esi
c0013bd2:	53                   	push   ebx
c0013bd3:	83 ec 68             	sub    esp,0x68
c0013bd6:	68 14 01 00 00       	push   0x114
c0013bdb:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013be1:	e8 20 3f ff ff       	call   c0007b06 <malloc>
c0013be6:	83 c4 0c             	add    esp,0xc
c0013be9:	56                   	push   esi
c0013bea:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013bee:	89 c3                	mov    ebx,eax
c0013bf0:	50                   	push   eax
c0013bf1:	e8 02 74 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013bf6:	5e                   	pop    esi
c0013bf7:	5f                   	pop    edi
c0013bf8:	6a 01                	push   0x1
c0013bfa:	53                   	push   ebx
c0013bfb:	e8 b6 74 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	85 c0                	test   eax,eax
c0013c05:	74 0a                	je     c0013c11 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c07:	83 ec 0c             	sub    esp,0xc
c0013c0a:	68 f7 0c 02 c0       	push   0xc0020cf7
c0013c0f:	eb 34                	jmp    c0013c45 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c11:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c19:	83 ec 0c             	sub    esp,0xc
c0013c1c:	6a 34                	push   0x34
c0013c1e:	e8 e3 3e ff ff       	call   c0007b06 <malloc>
c0013c23:	59                   	pop    ecx
c0013c24:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c28:	89 c7                	mov    edi,eax
c0013c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2c:	56                   	push   esi
c0013c2d:	57                   	push   edi
c0013c2e:	6a 00                	push   0x0
c0013c30:	6a 34                	push   0x34
c0013c32:	53                   	push   ebx
c0013c33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c36:	83 c4 20             	add    esp,0x20
c0013c39:	85 c0                	test   eax,eax
c0013c3b:	74 17                	je     c0013c54 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	68 0e 0d 02 c0       	push   0xc0020d0e
c0013c45:	e8 7b cb ff ff       	call   c00107c5 <KePanic(char const*)>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	31 c0                	xor    eax,eax
c0013c4f:	e9 34 02 00 00       	jmp    c0013e88 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0013c54:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013c5a:	75 e1                	jne    c0013c3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c5c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013c5f:	85 c0                	test   eax,eax
c0013c61:	74 da                	je     c0013c3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c63:	52                   	push   edx
c0013c64:	31 d2                	xor    edx,edx
c0013c66:	52                   	push   edx
c0013c67:	50                   	push   eax
c0013c68:	53                   	push   ebx
c0013c69:	e8 06 75 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013c6e:	83 c4 10             	add    esp,0x10
c0013c71:	85 c0                	test   eax,eax
c0013c73:	75 c8                	jne    c0013c3d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c75:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c79:	83 ec 0c             	sub    esp,0xc
c0013c7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c80:	0f af c2             	imul   eax,edx
c0013c83:	50                   	push   eax
c0013c84:	e8 7d 3e ff ff       	call   c0007b06 <malloc>
c0013c89:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c8e:	31 f6                	xor    esi,esi
c0013c90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c98:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c9c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ca0:	0f af c2             	imul   eax,edx
c0013ca3:	99                   	cdq    
c0013ca4:	52                   	push   edx
c0013ca5:	50                   	push   eax
c0013ca6:	53                   	push   ebx
c0013ca7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013caa:	83 c4 20             	add    esp,0x20
c0013cad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013cb5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013cbd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013cc5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013ccd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cd1:	39 f0                	cmp    eax,esi
c0013cd3:	0f 86 ab 00 00 00    	jbe    c0013d84 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c0013cd9:	6b ee 28             	imul   ebp,esi,0x28
c0013cdc:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0013ce0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0013ce3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ce7:	50                   	push   eax
c0013ce8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013cec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cf0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013cf3:	6b c0 28             	imul   eax,eax,0x28
c0013cf6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013cfa:	89 d0                	mov    eax,edx
c0013cfc:	31 d2                	xor    edx,edx
c0013cfe:	52                   	push   edx
c0013cff:	50                   	push   eax
c0013d00:	53                   	push   ebx
c0013d01:	e8 6e 74 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013d06:	83 c4 0c             	add    esp,0xc
c0013d09:	6a 20                	push   0x20
c0013d0b:	6a 00                	push   0x0
c0013d0d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d11:	52                   	push   edx
c0013d12:	e8 69 c8 fe ff       	call   c0000580 <memset>
c0013d17:	58                   	pop    eax
c0013d18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d1a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d1e:	51                   	push   ecx
c0013d1f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d23:	52                   	push   edx
c0013d24:	6a 00                	push   0x0
c0013d26:	6a 1f                	push   0x1f
c0013d28:	53                   	push   ebx
c0013d29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d2c:	83 c4 18             	add    esp,0x18
c0013d2f:	68 25 0d 02 c0       	push   0xc0020d25
c0013d34:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d38:	52                   	push   edx
c0013d39:	e8 02 cb fe ff       	call   c0000840 <strcmp>
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	85 c0                	test   eax,eax
c0013d43:	75 0f                	jne    c0013d54 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013d45:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d54:	50                   	push   eax
c0013d55:	50                   	push   eax
c0013d56:	68 2d 0d 02 c0       	push   0xc0020d2d
c0013d5b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013d5f:	50                   	push   eax
c0013d60:	e8 db ca fe ff       	call   c0000840 <strcmp>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	85 c0                	test   eax,eax
c0013d6a:	75 0f                	jne    c0013d7b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d6c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d7b:	46                   	inc    esi
c0013d7c:	0f b7 f6             	movzx  esi,si
c0013d7f:	e9 49 ff ff ff       	jmp    c0013ccd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d89:	75 10                	jne    c0013d9b <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0013d8b:	83 ec 0c             	sub    esp,0xc
c0013d8e:	68 35 0d 02 c0       	push   0xc0020d35
c0013d93:	e8 2d ca ff ff       	call   c00107c5 <KePanic(char const*)>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013da0:	75 10                	jne    c0013db2 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	68 35 0d 02 c0       	push   0xc0020d35
c0013daa:	e8 16 ca ff ff       	call   c00107c5 <KePanic(char const*)>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	50                   	push   eax
c0013db3:	31 d2                	xor    edx,edx
c0013db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db9:	52                   	push   edx
c0013dba:	50                   	push   eax
c0013dbb:	53                   	push   ebx
c0013dbc:	e8 b3 73 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013dc1:	5a                   	pop    edx
c0013dc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013dc6:	e8 3b 3d ff ff       	call   c0007b06 <malloc>
c0013dcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dcf:	31 c9                	xor    ecx,ecx
c0013dd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd7:	5e                   	pop    esi
c0013dd8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013ddc:	55                   	push   ebp
c0013ddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de1:	51                   	push   ecx
c0013de2:	52                   	push   edx
c0013de3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013de7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013deb:	53                   	push   ebx
c0013dec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013def:	83 c4 14             	add    esp,0x14
c0013df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013df6:	e8 0b 3d ff ff       	call   c0007b06 <malloc>
c0013dfb:	89 c6                	mov    esi,eax
c0013dfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e02:	56                   	push   esi
c0013e03:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e0b:	51                   	push   ecx
c0013e0c:	52                   	push   edx
c0013e0d:	53                   	push   ebx
c0013e0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e15:	83 c4 1c             	add    esp,0x1c
c0013e18:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e1e:	c1 e8 04             	shr    eax,0x4
c0013e21:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2c:	31 d2                	xor    edx,edx
c0013e2e:	52                   	push   edx
c0013e2f:	50                   	push   eax
c0013e30:	53                   	push   ebx
c0013e31:	e8 3e 73 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013e36:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e38:	31 d2                	xor    edx,edx
c0013e3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e3d:	56                   	push   esi
c0013e3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e42:	52                   	push   edx
c0013e43:	50                   	push   eax
c0013e44:	53                   	push   ebx
c0013e45:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e48:	83 c4 14             	add    esp,0x14
c0013e4b:	53                   	push   ebx
c0013e4c:	e8 c3 72 ff ff       	call   c000b114 <File::close()>
c0013e51:	5d                   	pop    ebp
c0013e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e56:	e8 be 3c ff ff       	call   c0007b19 <free>
c0013e5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e5e:	e8 b6 3c ff ff       	call   c0007b19 <free>
c0013e63:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013e68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e76:	8d 50 01             	lea    edx,[eax+0x1]
c0013e79:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e80:	b0 01                	mov    al,0x1
c0013e82:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e88:	83 c4 5c             	add    esp,0x5c
c0013e8b:	5b                   	pop    ebx
c0013e8c:	5e                   	pop    esi
c0013e8d:	5f                   	pop    edi
c0013e8e:	5d                   	pop    ebp
c0013e8f:	c3                   	ret    

c0013e90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e90:	55                   	push   ebp
c0013e91:	57                   	push   edi
c0013e92:	56                   	push   esi
c0013e93:	53                   	push   ebx
c0013e94:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e9a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013ea1:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013ea7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0013eab:	68 14 01 00 00       	push   0x114
c0013eb0:	e8 51 3c ff ff       	call   c0007b06 <malloc>
c0013eb5:	83 c4 0c             	add    esp,0xc
c0013eb8:	53                   	push   ebx
c0013eb9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013ec0:	50                   	push   eax
c0013ec1:	89 c6                	mov    esi,eax
c0013ec3:	e8 30 71 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013ec8:	5f                   	pop    edi
c0013ec9:	5d                   	pop    ebp
c0013eca:	6a 01                	push   0x1
c0013ecc:	56                   	push   esi
c0013ecd:	e8 e4 71 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013ed2:	83 c4 10             	add    esp,0x10
c0013ed5:	85 c0                	test   eax,eax
c0013ed7:	0f 85 bc 06 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013edd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013ee5:	83 ec 0c             	sub    esp,0xc
c0013ee8:	6a 34                	push   0x34
c0013eea:	e8 17 3c ff ff       	call   c0007b06 <malloc>
c0013eef:	5b                   	pop    ebx
c0013ef0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013ef4:	89 c5                	mov    ebp,eax
c0013ef6:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ef8:	53                   	push   ebx
c0013ef9:	55                   	push   ebp
c0013efa:	6a 00                	push   0x0
c0013efc:	6a 34                	push   0x34
c0013efe:	56                   	push   esi
c0013eff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f02:	83 c4 20             	add    esp,0x20
c0013f05:	85 c0                	test   eax,eax
c0013f07:	0f 85 8c 06 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f0d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013f14:	0f 85 7f 06 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f1a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013f1d:	85 c0                	test   eax,eax
c0013f1f:	0f 84 74 06 00 00    	je     c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f25:	31 d2                	xor    edx,edx
c0013f27:	51                   	push   ecx
c0013f28:	52                   	push   edx
c0013f29:	50                   	push   eax
c0013f2a:	56                   	push   esi
c0013f2b:	e8 44 72 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013f30:	83 c4 10             	add    esp,0x10
c0013f33:	85 c0                	test   eax,eax
c0013f35:	0f 85 5e 06 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f3b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013f45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013f49:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013f4d:	0f af c2             	imul   eax,edx
c0013f50:	50                   	push   eax
c0013f51:	e8 b0 3b ff ff       	call   c0007b06 <malloc>
c0013f56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013f58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f63:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013f67:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013f6b:	0f af c2             	imul   eax,edx
c0013f6e:	99                   	cdq    
c0013f6f:	52                   	push   edx
c0013f70:	50                   	push   eax
c0013f71:	56                   	push   esi
c0013f72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f75:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013f78:	83 c4 20             	add    esp,0x20
c0013f7b:	85 c0                	test   eax,eax
c0013f7d:	0f 84 16 06 00 00    	je     c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f83:	52                   	push   edx
c0013f84:	31 d2                	xor    edx,edx
c0013f86:	52                   	push   edx
c0013f87:	50                   	push   eax
c0013f88:	56                   	push   esi
c0013f89:	e8 e6 71 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	85 c0                	test   eax,eax
c0013f93:	0f 85 00 06 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f99:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f9d:	83 ec 0c             	sub    esp,0xc
c0013fa0:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013fa4:	0f af c2             	imul   eax,edx
c0013fa7:	50                   	push   eax
c0013fa8:	e8 59 3b ff ff       	call   c0007b06 <malloc>
c0013fad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013faf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fba:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013fbe:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013fc2:	0f af c2             	imul   eax,edx
c0013fc5:	99                   	cdq    
c0013fc6:	52                   	push   edx
c0013fc7:	50                   	push   eax
c0013fc8:	56                   	push   esi
c0013fc9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fcc:	83 c4 20             	add    esp,0x20
c0013fcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013fd7:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013fdb:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0013fdf:	0f 86 84 00 00 00    	jbe    c0014069 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0013fe5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0013fe9:	c1 e7 05             	shl    edi,0x5
c0013fec:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013ff0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ff3:	75 63                	jne    c0014058 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0013ff5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013ff8:	31 d2                	xor    edx,edx
c0013ffa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013ffd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014001:	50                   	push   eax
c0014002:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014005:	52                   	push   edx
c0014006:	50                   	push   eax
c0014007:	56                   	push   esi
c0014008:	e8 67 71 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001400d:	83 c4 10             	add    esp,0x10
c0014010:	85 c0                	test   eax,eax
c0014012:	0f 85 81 05 00 00    	jne    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014018:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001401f:	83 ec 0c             	sub    esp,0xc
c0014022:	31 d2                	xor    edx,edx
c0014024:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0014028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001402a:	01 c3                	add    ebx,eax
c001402c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014033:	50                   	push   eax
c0014034:	53                   	push   ebx
c0014035:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014039:	52                   	push   edx
c001403a:	50                   	push   eax
c001403b:	56                   	push   esi
c001403c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001403f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014042:	83 c4 1c             	add    esp,0x1c
c0014045:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014048:	50                   	push   eax
c0014049:	6a 00                	push   0x0
c001404b:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001404f:	53                   	push   ebx
c0014050:	e8 2b c5 fe ff       	call   c0000580 <memset>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001405c:	40                   	inc    eax
c001405d:	0f b7 c0             	movzx  eax,ax
c0014060:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014064:	e9 6e ff ff ff       	jmp    c0013fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c0014069:	53                   	push   ebx
c001406a:	68 00 01 00 00       	push   0x100
c001406f:	6a 00                	push   0x0
c0014071:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014075:	50                   	push   eax
c0014076:	e8 05 c5 fe ff       	call   c0000580 <memset>
c001407b:	83 c4 0c             	add    esp,0xc
c001407e:	68 00 01 00 00       	push   0x100
c0014083:	6a 00                	push   0x0
c0014085:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001408c:	50                   	push   eax
c001408d:	e8 ee c4 fe ff       	call   c0000580 <memset>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001409d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140a5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00140ad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00140b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140bd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00140c5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00140c9:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00140cd:	0f 86 25 01 00 00    	jbe    c00141f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c00140d3:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c00140d8:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00140dc:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c00140df:	52                   	push   edx
c00140e0:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00140e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140e8:	8b 07                	mov    eax,DWORD PTR [edi]
c00140ea:	6b d2 28             	imul   edx,edx,0x28
c00140ed:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00140f1:	31 d2                	xor    edx,edx
c00140f3:	52                   	push   edx
c00140f4:	50                   	push   eax
c00140f5:	56                   	push   esi
c00140f6:	e8 79 70 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	6a 20                	push   0x20
c0014100:	6a 00                	push   0x0
c0014102:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014109:	51                   	push   ecx
c001410a:	e8 71 c4 fe ff       	call   c0000580 <memset>
c001410f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014111:	59                   	pop    ecx
c0014112:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014116:	52                   	push   edx
c0014117:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001411e:	51                   	push   ecx
c001411f:	6a 00                	push   0x0
c0014121:	6a 1f                	push   0x1f
c0014123:	56                   	push   esi
c0014124:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014127:	83 c4 1c             	add    esp,0x1c
c001412a:	6a 09                	push   0x9
c001412c:	68 4f 0d 02 c0       	push   0xc0020d4f
c0014131:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014138:	51                   	push   ecx
c0014139:	e8 42 c2 fe ff       	call   c0000380 <memcmp>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	85 c0                	test   eax,eax
c0014143:	75 1d                	jne    c0014162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c0014145:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014149:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001414d:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c0014151:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014154:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001415b:	89 c8                	mov    eax,ecx
c001415d:	40                   	inc    eax
c001415e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014162:	50                   	push   eax
c0014163:	6a 09                	push   0x9
c0014165:	68 59 0d 02 c0       	push   0xc0020d59
c001416a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014171:	50                   	push   eax
c0014172:	e8 09 c2 fe ff       	call   c0000380 <memcmp>
c0014177:	83 c4 10             	add    esp,0x10
c001417a:	85 c0                	test   eax,eax
c001417c:	75 1d                	jne    c001419b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c001417e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014182:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014186:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c001418a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001418d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014194:	89 c8                	mov    eax,ecx
c0014196:	40                   	inc    eax
c0014197:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001419b:	50                   	push   eax
c001419c:	50                   	push   eax
c001419d:	68 25 0d 02 c0       	push   0xc0020d25
c00141a2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141a9:	50                   	push   eax
c00141aa:	e8 91 c6 fe ff       	call   c0000840 <strcmp>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	85 c0                	test   eax,eax
c00141b4:	75 0b                	jne    c00141c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c00141b6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00141ba:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141c1:	50                   	push   eax
c00141c2:	50                   	push   eax
c00141c3:	68 2d 0d 02 c0       	push   0xc0020d2d
c00141c8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141cf:	50                   	push   eax
c00141d0:	e8 6b c6 fe ff       	call   c0000840 <strcmp>
c00141d5:	83 c4 10             	add    esp,0x10
c00141d8:	85 c0                	test   eax,eax
c00141da:	75 0b                	jne    c00141e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c00141dc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00141e0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141eb:	40                   	inc    eax
c00141ec:	0f b7 c0             	movzx  eax,ax
c00141ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141f3:	e9 cd fe ff ff       	jmp    c00140c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c00141f8:	50                   	push   eax
c00141f9:	31 d2                	xor    edx,edx
c00141fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141ff:	52                   	push   edx
c0014200:	50                   	push   eax
c0014201:	56                   	push   esi
c0014202:	e8 6d 6f ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014207:	58                   	pop    eax
c0014208:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001420c:	e8 f5 38 ff ff       	call   c0007b06 <malloc>
c0014211:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014213:	31 d2                	xor    edx,edx
c0014215:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014219:	58                   	pop    eax
c001421a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001421e:	53                   	push   ebx
c001421f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014223:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014227:	52                   	push   edx
c0014228:	50                   	push   eax
c0014229:	56                   	push   esi
c001422a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001422d:	83 c4 14             	add    esp,0x14
c0014230:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014234:	e8 cd 38 ff ff       	call   c0007b06 <malloc>
c0014239:	31 d2                	xor    edx,edx
c001423b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001423f:	83 c4 0c             	add    esp,0xc
c0014242:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014246:	52                   	push   edx
c0014247:	50                   	push   eax
c0014248:	56                   	push   esi
c0014249:	e8 26 6f ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001424e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014250:	31 d2                	xor    edx,edx
c0014252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014259:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001425d:	52                   	push   edx
c001425e:	50                   	push   eax
c001425f:	56                   	push   esi
c0014260:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014263:	83 c4 20             	add    esp,0x20
c0014266:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001426e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014272:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014276:	0f 84 21 03 00 00    	je     c001459d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c001427c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014283:	31 d2                	xor    edx,edx
c0014285:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014289:	c1 e8 03             	shr    eax,0x3
c001428c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014290:	51                   	push   ecx
c0014291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014295:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014299:	52                   	push   edx
c001429a:	50                   	push   eax
c001429b:	56                   	push   esi
c001429c:	e8 d3 6e ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00142a1:	5b                   	pop    ebx
c00142a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00142ad:	e8 54 38 ff ff       	call   c0007b06 <malloc>
c00142b2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00142b4:	31 d2                	xor    edx,edx
c00142b6:	5f                   	pop    edi
c00142b7:	89 c3                	mov    ebx,eax
c00142b9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142bd:	50                   	push   eax
c00142be:	53                   	push   ebx
c00142bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142c3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00142ca:	52                   	push   edx
c00142cb:	50                   	push   eax
c00142cc:	56                   	push   esi
c00142cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142d0:	83 c4 20             	add    esp,0x20
c00142d3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00142db:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00142df:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c00142e3:	0f 8d 9b 02 00 00    	jge    c0014584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00142e9:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c00142ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142f2:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c00142f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00142f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142fd:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014301:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014305:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014309:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001430d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014311:	c1 e8 08             	shr    eax,0x8
c0014314:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014318:	89 c7                	mov    edi,eax
c001431a:	c1 e7 04             	shl    edi,0x4
c001431d:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c0014321:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c0014324:	85 c9                	test   ecx,ecx
c0014326:	0f 85 bf 00 00 00    	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001432c:	83 ec 0c             	sub    esp,0xc
c001432f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014333:	03 07                	add    eax,DWORD PTR [edi]
c0014335:	50                   	push   eax
c0014336:	e8 45 f8 ff ff       	call   c0013b80 <Thr::getAddressOfKernelSymbol(char const*)>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c0014343:	85 c0                	test   eax,eax
c0014345:	89 c1                	mov    ecx,eax
c0014347:	0f 85 9e 00 00 00    	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001434d:	83 ec 0c             	sub    esp,0xc
c0014350:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014354:	03 07                	add    eax,DWORD PTR [edi]
c0014356:	50                   	push   eax
c0014357:	e8 54 c6 ff ff       	call   c00109b0 <KeResolveCompatibilitySymbol(char*)>
c001435c:	83 c4 10             	add    esp,0x10
c001435f:	85 c0                	test   eax,eax
c0014361:	89 c1                	mov    ecx,eax
c0014363:	0f 85 82 00 00 00    	jne    c00143eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c0014369:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001436d:	50                   	push   eax
c001436e:	50                   	push   eax
c001436f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014373:	03 07                	add    eax,DWORD PTR [edi]
c0014375:	50                   	push   eax
c0014376:	68 63 0d 02 c0       	push   0xc0020d63
c001437b:	e8 f6 66 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014380:	58                   	pop    eax
c0014381:	5a                   	pop    edx
c0014382:	68 7d 0d 02 c0       	push   0xc0020d7d
c0014387:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c001438e:	52                   	push   edx
c001438f:	e8 8c c3 fe ff       	call   c0000720 <strcpy>
c0014394:	59                   	pop    ecx
c0014395:	58                   	pop    eax
c0014396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439a:	03 07                	add    eax,DWORD PTR [edi]
c001439c:	50                   	push   eax
c001439d:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00143a4:	52                   	push   edx
c00143a5:	e8 86 c5 fe ff       	call   c0000930 <strcat>
c00143aa:	58                   	pop    eax
c00143ab:	5a                   	pop    edx
c00143ac:	68 13 0e 02 c0       	push   0xc0020e13
c00143b1:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00143b8:	52                   	push   edx
c00143b9:	e8 72 c5 fe ff       	call   c0000930 <strcat>
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00143c6:	0f 84 75 01 00 00    	je     c0014541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00143d6:	52                   	push   edx
c00143d7:	e8 e9 c3 ff ff       	call   c00107c5 <KePanic(char const*)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c00143e3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00143e7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00143eb:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c00143f0:	0f 85 90 00 00 00    	jne    c0014486 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c00143f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143fa:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014401:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014405:	01 f8                	add    eax,edi
c0014407:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001440f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014413:	8b 00                	mov    eax,DWORD PTR [eax]
c0014415:	0f 94 c2             	sete   dl
c0014418:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014420:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014425:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c0014429:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001442e:	74 39                	je     c0014469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c0014430:	8d 3c 08             	lea    edi,[eax+ecx*1]
c0014433:	84 d2                	test   dl,dl
c0014435:	75 15                	jne    c001444c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c0014437:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001443b:	66 83 f8 0c          	cmp    ax,0xc
c001443f:	76 05                	jbe    c0014446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014441:	b8 0c 00 00 00       	mov    eax,0xc
c0014446:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001444a:	76 2f                	jbe    c001447b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c001444c:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014451:	0f 84 ea 00 00 00    	je     c0014541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014457:	83 ec 0c             	sub    esp,0xc
c001445a:	68 94 0d 02 c0       	push   0xc0020d94
c001445f:	e8 61 c3 ff ff       	call   c00107c5 <KePanic(char const*)>
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	eb 12                	jmp    c001447b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014469:	01 c7                	add    edi,eax
c001446b:	84 d2                	test   dl,dl
c001446d:	75 0c                	jne    c001447b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c001446f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014473:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014477:	77 02                	ja     c001447b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c0014479:	01 cf                	add    edi,ecx
c001447b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001447f:	89 38                	mov    DWORD PTR [eax],edi
c0014481:	e9 f5 00 00 00       	jmp    c001457b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014486:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c001448b:	0f 85 82 00 00 00    	jne    c0014513 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c0014491:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014498:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c001449c:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c00144a0:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00144a8:	74 21                	je     c00144cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c00144aa:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00144b2:	74 17                	je     c00144cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c00144b4:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c00144b8:	b8 0a 00 00 00       	mov    eax,0xa
c00144bd:	83 fa 0e             	cmp    edx,0xe
c00144c0:	77 03                	ja     c00144c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c00144c2:	8d 42 fc             	lea    eax,[edx-0x4]
c00144c5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144c9:	76 1f                	jbe    c00144ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c00144cb:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00144d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00144d4:	74 6b                	je     c0014541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	68 b0 0d 02 c0       	push   0xc0020db0
c00144de:	e8 e2 c2 ff ff       	call   c00107c5 <KePanic(char const*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00144ea:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c00144ef:	8b 07                	mov    eax,DWORD PTR [edi]
c00144f1:	74 16                	je     c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c00144f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144f7:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00144fe:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014502:	01 c2                	add    edx,eax
c0014504:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014507:	eb 06                	jmp    c001450f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014509:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001450d:	01 c8                	add    eax,ecx
c001450f:	89 07                	mov    DWORD PTR [edi],eax
c0014511:	eb 68                	jmp    c001457b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014513:	57                   	push   edi
c0014514:	57                   	push   edi
c0014515:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001451a:	50                   	push   eax
c001451b:	68 cc 0d 02 c0       	push   0xc0020dcc
c0014520:	e8 51 65 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014525:	83 c4 10             	add    esp,0x10
c0014528:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c001452d:	74 12                	je     c0014541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001452f:	83 ec 0c             	sub    esp,0xc
c0014532:	68 d7 0d 02 c0       	push   0xc0020dd7
c0014537:	e8 89 c2 ff ff       	call   c00107c5 <KePanic(char const*)>
c001453c:	83 c4 10             	add    esp,0x10
c001453f:	eb 3a                	jmp    c001457b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014541:	83 ec 0c             	sub    esp,0xc
c0014544:	56                   	push   esi
c0014545:	e8 ca 6b ff ff       	call   c000b114 <File::close()>
c001454a:	8b 06                	mov    eax,DWORD PTR [esi]
c001454c:	89 34 24             	mov    DWORD PTR [esp],esi
c001454f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014552:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014555:	e8 bf 35 ff ff       	call   c0007b19 <free>
c001455a:	59                   	pop    ecx
c001455b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001455f:	e8 b5 35 ff ff       	call   c0007b19 <free>
c0014564:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014567:	e8 ad 35 ff ff       	call   c0007b19 <free>
c001456c:	5b                   	pop    ebx
c001456d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014571:	e8 a3 35 ff ff       	call   c0007b19 <free>
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	eb 1e                	jmp    c0014599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001457b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001457f:	e9 57 fd ff ff       	jmp    c00142db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	53                   	push   ebx
c0014588:	e8 8c 35 ff ff       	call   c0007b19 <free>
c001458d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	e9 d5 fc ff ff       	jmp    c001426e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c0014599:	31 c0                	xor    eax,eax
c001459b:	eb 32                	jmp    c00145cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	56                   	push   esi
c00145a1:	e8 6e 6b ff ff       	call   c000b114 <File::close()>
c00145a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00145a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00145ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145ae:	58                   	pop    eax
c00145af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145b3:	e8 61 35 ff ff       	call   c0007b19 <free>
c00145b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145bb:	e8 59 35 ff ff       	call   c0007b19 <free>
c00145c0:	5a                   	pop    edx
c00145c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145c5:	e8 4f 35 ff ff       	call   c0007b19 <free>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	b0 01                	mov    al,0x1
c00145cf:	81 c4 5c 03 00 00    	add    esp,0x35c
c00145d5:	5b                   	pop    ebx
c00145d6:	5e                   	pop    esi
c00145d7:	5f                   	pop    edi
c00145d8:	5d                   	pop    ebp
c00145d9:	c3                   	ret    

c00145da <Thr::getDriverBaseFromAddress(unsigned long)>:
c00145da:	56                   	push   esi
c00145db:	31 d2                	xor    edx,edx
c00145dd:	53                   	push   ebx
c00145de:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00145e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145e8:	39 d3                	cmp    ebx,edx
c00145ea:	7e 1b                	jle    c0014607 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00145ec:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c00145f3:	39 c8                	cmp    eax,ecx
c00145f5:	77 0d                	ja     c0014604 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00145f7:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c00145fe:	01 c6                	add    esi,eax
c0014600:	39 ce                	cmp    esi,ecx
c0014602:	77 05                	ja     c0014609 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014604:	42                   	inc    edx
c0014605:	eb e1                	jmp    c00145e8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014607:	31 c0                	xor    eax,eax
c0014609:	5b                   	pop    ebx
c001460a:	5e                   	pop    esi
c001460b:	c3                   	ret    

c001460c <Thr::getDriverNameFromAddress(unsigned long)>:
c001460c:	53                   	push   ebx
c001460d:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014613:	31 c0                	xor    eax,eax
c0014615:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014619:	39 c3                	cmp    ebx,eax
c001461b:	7e 22                	jle    c001463f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001461d:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014624:	39 ca                	cmp    edx,ecx
c0014626:	77 14                	ja     c001463c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014628:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001462f:	39 ca                	cmp    edx,ecx
c0014631:	76 09                	jbe    c001463c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014633:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001463a:	eb 05                	jmp    c0014641 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001463c:	40                   	inc    eax
c001463d:	eb da                	jmp    c0014619 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001463f:	31 c0                	xor    eax,eax
c0014641:	5b                   	pop    ebx
c0014642:	c3                   	ret    

c0014643 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014643:	53                   	push   ebx
c0014644:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014648:	53                   	push   ebx
c0014649:	e8 8c ff ff ff       	call   c00145da <Thr::getDriverBaseFromAddress(unsigned long)>
c001464e:	5a                   	pop    edx
c001464f:	31 d2                	xor    edx,edx
c0014651:	85 c0                	test   eax,eax
c0014653:	74 04                	je     c0014659 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014655:	89 da                	mov    edx,ebx
c0014657:	29 c2                	sub    edx,eax
c0014659:	5b                   	pop    ebx
c001465a:	89 d0                	mov    eax,edx
c001465c:	c3                   	ret    

c001465d <Thr::loadDLL(char const*, bool)>:
c001465d:	55                   	push   ebp
c001465e:	57                   	push   edi
c001465f:	56                   	push   esi
c0014660:	53                   	push   ebx
c0014661:	81 ec 34 01 00 00    	sub    esp,0x134
c0014667:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c001466e:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c0014675:	57                   	push   edi
c0014676:	68 ef 0d 02 c0       	push   0xc0020def
c001467b:	e8 f6 63 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014680:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014687:	e8 7a 34 ff ff       	call   c0007b06 <malloc>
c001468c:	83 c4 0c             	add    esp,0xc
c001468f:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014695:	57                   	push   edi
c0014696:	50                   	push   eax
c0014697:	89 c6                	mov    esi,eax
c0014699:	e8 5a 69 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	85 f6                	test   esi,esi
c00146a3:	75 3a                	jne    c00146df <Thr::loadDLL(char const*, bool)+0x82>
c00146a5:	84 db                	test   bl,bl
c00146a7:	0f 84 df 01 00 00    	je     c001488c <Thr::loadDLL(char const*, bool)+0x22f>
c00146ad:	50                   	push   eax
c00146ae:	50                   	push   eax
c00146af:	68 00 0e 02 c0       	push   0xc0020e00
c00146b4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00146b8:	55                   	push   ebp
c00146b9:	e8 62 c0 fe ff       	call   c0000720 <strcpy>
c00146be:	58                   	pop    eax
c00146bf:	5a                   	pop    edx
c00146c0:	57                   	push   edi
c00146c1:	55                   	push   ebp
c00146c2:	e8 69 c2 fe ff       	call   c0000930 <strcat>
c00146c7:	59                   	pop    ecx
c00146c8:	58                   	pop    eax
c00146c9:	68 13 0e 02 c0       	push   0xc0020e13
c00146ce:	55                   	push   ebp
c00146cf:	e8 5c c2 fe ff       	call   c0000930 <strcat>
c00146d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00146d7:	e8 e9 c0 ff ff       	call   c00107c5 <KePanic(char const*)>
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	50                   	push   eax
c00146e0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00146e4:	50                   	push   eax
c00146e5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146e9:	50                   	push   eax
c00146ea:	56                   	push   esi
c00146eb:	e8 6c 6c ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c00146f0:	83 c4 10             	add    esp,0x10
c00146f3:	85 f6                	test   esi,esi
c00146f5:	74 0c                	je     c0014703 <Thr::loadDLL(char const*, bool)+0xa6>
c00146f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	56                   	push   esi
c00146fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014700:	83 c4 10             	add    esp,0x10
c0014703:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014708:	75 0a                	jne    c0014714 <Thr::loadDLL(char const*, bool)+0xb7>
c001470a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001470e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014712:	75 3c                	jne    c0014750 <Thr::loadDLL(char const*, bool)+0xf3>
c0014714:	31 f6                	xor    esi,esi
c0014716:	84 db                	test   bl,bl
c0014718:	0f 84 6e 01 00 00    	je     c001488c <Thr::loadDLL(char const*, bool)+0x22f>
c001471e:	50                   	push   eax
c001471f:	50                   	push   eax
c0014720:	68 00 0e 02 c0       	push   0xc0020e00
c0014725:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014729:	56                   	push   esi
c001472a:	e8 f1 bf fe ff       	call   c0000720 <strcpy>
c001472f:	58                   	pop    eax
c0014730:	5a                   	pop    edx
c0014731:	57                   	push   edi
c0014732:	56                   	push   esi
c0014733:	e8 f8 c1 fe ff       	call   c0000930 <strcat>
c0014738:	59                   	pop    ecx
c0014739:	5d                   	pop    ebp
c001473a:	68 13 0e 02 c0       	push   0xc0020e13
c001473f:	56                   	push   esi
c0014740:	e8 eb c1 fe ff       	call   c0000930 <strcat>
c0014745:	89 34 24             	mov    DWORD PTR [esp],esi
c0014748:	e8 78 c0 ff ff       	call   c00107c5 <KePanic(char const*)>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	56                   	push   esi
c0014751:	6a 03                	push   0x3
c0014753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014757:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001475b:	05 ff 0f 00 00       	add    eax,0xfff
c0014760:	83 d2 00             	adc    edx,0x0
c0014763:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014767:	50                   	push   eax
c0014768:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001476e:	e8 03 57 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c0014773:	89 c6                	mov    esi,eax
c0014775:	58                   	pop    eax
c0014776:	5a                   	pop    edx
c0014777:	56                   	push   esi
c0014778:	68 92 f9 01 c0       	push   0xc001f992
c001477d:	e8 f4 62 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014782:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014785:	e8 96 be fe ff       	call   c0000620 <strlen>
c001478a:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c0014790:	40                   	inc    eax
c0014791:	89 04 24             	mov    DWORD PTR [esp],eax
c0014794:	e8 6d 33 ff ff       	call   c0007b06 <malloc>
c0014799:	59                   	pop    ecx
c001479a:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00147a1:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147a6:	5d                   	pop    ebp
c00147a7:	57                   	push   edi
c00147a8:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00147af:	e8 6c bf fe ff       	call   c0000720 <strcpy>
c00147b4:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00147b9:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c00147c0:	8d 50 01             	lea    edx,[eax+0x1]
c00147c3:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00147c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	6a 01                	push   0x1
c00147d2:	56                   	push   esi
c00147d3:	57                   	push   edi
c00147d4:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00147db:	e8 b0 f6 ff ff       	call   c0013e90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00147e0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00147ec:	74 2d                	je     c001481b <Thr::loadDLL(char const*, bool)+0x1be>
c00147ee:	84 db                	test   bl,bl
c00147f0:	74 12                	je     c0014804 <Thr::loadDLL(char const*, bool)+0x1a7>
c00147f2:	83 ec 0c             	sub    esp,0xc
c00147f5:	68 15 0e 02 c0       	push   0xc0020e15
c00147fa:	e8 c6 bf ff ff       	call   c00107c5 <KePanic(char const*)>
c00147ff:	83 c4 10             	add    esp,0x10
c0014802:	eb 07                	jmp    c001480b <Thr::loadDLL(char const*, bool)+0x1ae>
c0014804:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014809:	75 10                	jne    c001481b <Thr::loadDLL(char const*, bool)+0x1be>
c001480b:	83 ec 0c             	sub    esp,0xc
c001480e:	68 34 0e 02 c0       	push   0xc0020e34
c0014813:	e8 ad bf ff ff       	call   c00107c5 <KePanic(char const*)>
c0014818:	83 c4 10             	add    esp,0x10
c001481b:	31 ff                	xor    edi,edi
c001481d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014821:	bb 00 00 00 00       	mov    ebx,0x0
c0014826:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001482a:	05 ff 0f 00 00       	add    eax,0xfff
c001482f:	83 d2 00             	adc    edx,0x0
c0014832:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001483a:	c1 ea 0c             	shr    edx,0xc
c001483d:	89 d8                	mov    eax,ebx
c001483f:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0014843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014847:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001484b:	73 32                	jae    c001487f <Thr::loadDLL(char const*, bool)+0x222>
c001484d:	50                   	push   eax
c001484e:	50                   	push   eax
c001484f:	89 f8                	mov    eax,edi
c0014851:	c1 e0 0c             	shl    eax,0xc
c0014854:	01 f0                	add    eax,esi
c0014856:	50                   	push   eax
c0014857:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001485d:	e8 b8 50 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	8b 00                	mov    eax,DWORD PTR [eax]
c0014867:	a8 60                	test   al,0x60
c0014869:	75 11                	jne    c001487c <Thr::loadDLL(char const*, bool)+0x21f>
c001486b:	83 ec 0c             	sub    esp,0xc
c001486e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014873:	50                   	push   eax
c0014874:	e8 2b 35 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	47                   	inc    edi
c001487d:	eb 9e                	jmp    c001481d <Thr::loadDLL(char const*, bool)+0x1c0>
c001487f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014884:	b8 00 00 00 00       	mov    eax,0x0
c0014889:	0f 44 f0             	cmove  esi,eax
c001488c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014892:	89 f0                	mov    eax,esi
c0014894:	5b                   	pop    ebx
c0014895:	5e                   	pop    esi
c0014896:	5f                   	pop    edi
c0014897:	5d                   	pop    ebp
c0014898:	c3                   	ret    

c0014899 <Thr::executeDLL(unsigned long, void*)>:
c0014899:	56                   	push   esi
c001489a:	53                   	push   ebx
c001489b:	52                   	push   edx
c001489c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148a0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148a4:	85 db                	test   ebx,ebx
c00148a6:	75 10                	jne    c00148b8 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	68 50 0e 02 c0       	push   0xc0020e50
c00148b0:	e8 10 bf ff ff       	call   c00107c5 <KePanic(char const*)>
c00148b5:	83 c4 10             	add    esp,0x10
c00148b8:	50                   	push   eax
c00148b9:	50                   	push   eax
c00148ba:	53                   	push   ebx
c00148bb:	68 7a 0e 02 c0       	push   0xc0020e7a
c00148c0:	e8 b1 61 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00148c5:	89 d8                	mov    eax,ebx
c00148c7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00148cb:	83 c4 14             	add    esp,0x14
c00148ce:	5b                   	pop    ebx
c00148cf:	5e                   	pop    esi
c00148d0:	ff e0                	jmp    eax
c00148d2:	66 90                	xchg   ax,ax
c00148d4:	66 90                	xchg   ax,ax
c00148d6:	66 90                	xchg   ax,ax
c00148d8:	66 90                	xchg   ax,ax
c00148da:	66 90                	xchg   ax,ax
c00148dc:	66 90                	xchg   ax,ax
c00148de:	66 90                	xchg   ax,ax

c00148e0 <userModeEntryPoint(void*)>:
c00148e0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00148e5:	48                   	dec    eax
c00148e6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00148eb:	75 03                	jne    c00148f0 <userModeEntryPoint(void*)+0x10>
c00148ed:	fb                   	sti    
c00148ee:	66 90                	xchg   ax,ax
c00148f0:	fb                   	sti    
c00148f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00148ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014903:	e9 37 b9 fe ff       	jmp    c000023f <goToUsermode>

c0014908 <changeTSS>:
c0014908:	83 ec 1c             	sub    esp,0x1c
c001490b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014910:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014913:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014918:	c1 e2 15             	shl    edx,0x15
c001491b:	29 d0                	sub    eax,edx
c001491d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014921:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014926:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001492c:	05 7c 11 00 00       	add    eax,0x117c
c0014931:	89 04 24             	mov    DWORD PTR [esp],eax
c0014934:	e8 47 46 ff ff       	call   c0008f80 <TSS::setESP(unsigned long)>
c0014939:	83 c4 1c             	add    esp,0x1c
c001493c:	c3                   	ret    
c001493d:	8d 76 00             	lea    esi,[esi+0x0]

c0014940 <switchToThread(ThreadControlBlock*)>:
c0014940:	83 ec 1c             	sub    esp,0x1c
c0014943:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0014947:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c001494d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014951:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014955:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0014959:	85 f6                	test   esi,esi
c001495b:	0f 85 97 00 00 00    	jne    c00149f8 <switchToThread(ThreadControlBlock*)+0xb8>
c0014961:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c0014965:	3c ff                	cmp    al,0xff
c0014967:	0f 84 87 00 00 00    	je     c00149f4 <switchToThread(ThreadControlBlock*)+0xb4>
c001496d:	0f b6 d0             	movzx  edx,al
c0014970:	b8 00 04 00 00       	mov    eax,0x400
c0014975:	29 d0                	sub    eax,edx
c0014977:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001497a:	d1 f8                	sar    eax,1
c001497c:	01 d0                	add    eax,edx
c001497e:	66 90                	xchg   ax,ax
c0014980:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014983:	e8 bb 25 00 00       	call   c0016f43 <HalQueryPerformanceCounter()>
c0014988:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c001498d:	89 c6                	mov    esi,eax
c001498f:	89 d7                	mov    edi,edx
c0014991:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014997:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c001499c:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c00149a2:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00149a8:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00149ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149b4:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00149ba:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00149c0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00149c3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00149c6:	01 c6                	add    esi,eax
c00149c8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00149cb:	11 d7                	adc    edi,edx
c00149cd:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00149d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149d3:	e8 9f b8 fe ff       	call   c0000277 <switchToThreadASM>
c00149d8:	0f 20 c0             	mov    eax,cr0
c00149db:	83 c8 08             	or     eax,0x8
c00149de:	0f 22 c0             	mov    cr0,eax
c00149e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00149ed:	83 c4 1c             	add    esp,0x1c
c00149f0:	c3                   	ret    
c00149f1:	8d 76 00             	lea    esi,[esi+0x0]
c00149f4:	31 c0                	xor    eax,eax
c00149f6:	eb 88                	jmp    c0014980 <switchToThread(ThreadControlBlock*)+0x40>
c00149f8:	b9 01 00 00 00       	mov    ecx,0x1
c00149fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a01:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0014a07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014a0f:	83 c4 1c             	add    esp,0x1c
c0014a12:	c3                   	ret    
c0014a13:	90                   	nop

c0014a14 <Process::addArgs(char**)>:
c0014a14:	57                   	push   edi
c0014a15:	31 c0                	xor    eax,eax
c0014a17:	56                   	push   esi
c0014a18:	53                   	push   ebx
c0014a19:	83 ec 10             	sub    esp,0x10
c0014a1c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0014a20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a24:	85 ff                	test   edi,edi
c0014a26:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c0014a2c:	74 42                	je     c0014a70 <Process::addArgs(char**)+0x5c>
c0014a2e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a30:	85 c0                	test   eax,eax
c0014a32:	74 3c                	je     c0014a70 <Process::addArgs(char**)+0x5c>
c0014a34:	31 db                	xor    ebx,ebx
c0014a36:	66 90                	xchg   ax,ax
c0014a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a3b:	e8 e0 bb fe ff       	call   c0000620 <strlen>
c0014a40:	40                   	inc    eax
c0014a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a44:	e8 bd 30 ff ff       	call   c0007b06 <malloc>
c0014a49:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014a50:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014a53:	43                   	inc    ebx
c0014a54:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014a5b:	e8 c0 bc fe ff       	call   c0000720 <strcpy>
c0014a60:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014a66:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014a69:	85 c0                	test   eax,eax
c0014a6b:	75 cb                	jne    c0014a38 <Process::addArgs(char**)+0x24>
c0014a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0014a70:	83 c4 10             	add    esp,0x10
c0014a73:	5b                   	pop    ebx
c0014a74:	5e                   	pop    esi
c0014a75:	5f                   	pop    edi
c0014a76:	c3                   	ret    
c0014a77:	90                   	nop

c0014a78 <Process::Process(char const*, Process*, char**)>:
c0014a78:	56                   	push   esi
c0014a79:	53                   	push   ebx
c0014a7a:	83 ec 24             	sub    esp,0x24
c0014a7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a81:	05 0c 02 00 00       	add    eax,0x20c
c0014a86:	bb 07 00 00 00       	mov    ebx,0x7
c0014a8b:	89 c6                	mov    esi,eax
c0014a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0014a90:	85 db                	test   ebx,ebx
c0014a92:	78 10                	js     c0014aa4 <Process::Process(char const*, Process*, char**)+0x2c>
c0014a94:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a97:	e8 bc a1 00 00       	call   c001ec58 <ThreadControlBlock::ThreadControlBlock()>
c0014a9c:	83 c6 5f             	add    esi,0x5f
c0014a9f:	4b                   	dec    ebx
c0014aa0:	eb ee                	jmp    c0014a90 <Process::Process(char const*, Process*, char**)+0x18>
c0014aa2:	66 90                	xchg   ax,ax
c0014aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aa8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014aaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ab3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014abe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ac1:	e8 f4 ba ff ff       	call   c00105ba <Krnl::newProcessEnv(Process*)>
c0014ac6:	89 c2                	mov    edx,eax
c0014ac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014acc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014ad2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ad6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014adf:	a1 40 20 02 c0       	mov    eax,ds:0xc0022040
c0014ae4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae7:	89 15 40 20 02 c0    	mov    DWORD PTR ds:0xc0022040,edx
c0014aed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014af1:	89 02                	mov    DWORD PTR [edx],eax
c0014af3:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c0014afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b02:	e8 ff 2f ff ff       	call   c0007b06 <malloc>
c0014b07:	89 c3                	mov    ebx,eax
c0014b09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b14:	e8 5d 57 ff ff       	call   c000a276 <VAS::VAS(bool)>
c0014b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b1d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014b23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b27:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014b31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b35:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014b39:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014b3f:	e8 6e c0 ff ff       	call   c0010bb2 <KeInitSignals()>
c0014b44:	89 c2                	mov    edx,eax
c0014b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b4a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014b50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b54:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b5a:	85 c0                	test   eax,eax
c0014b5c:	74 42                	je     c0014ba0 <Process::Process(char const*, Process*, char**)+0x128>
c0014b5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b62:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b68:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b72:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b7c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014b82:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b8c:	05 0c 01 00 00       	add    eax,0x10c
c0014b91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b98:	e8 83 bb fe ff       	call   c0000720 <strcpy>
c0014b9d:	eb 5d                	jmp    c0014bfc <Process::Process(char const*, Process*, char**)+0x184>
c0014b9f:	90                   	nop
c0014ba0:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0014ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0014baf:	e8 52 2f ff ff       	call   c0007b06 <malloc>
c0014bb4:	89 c3                	mov    ebx,eax
c0014bb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bc1:	e8 ae 40 ff ff       	call   c0008c74 <VgaText::VgaText(char const*)>
c0014bc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bca:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bdd:	e8 3c 39 ff ff       	call   c000851e <addToTerminalCycle(VgaText*)>
c0014be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be6:	05 0c 01 00 00       	add    eax,0x10c
c0014beb:	c7 44 24 04 99 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e99
c0014bf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bf6:	e8 25 bb fe ff       	call   c0000720 <strcpy>
c0014bfb:	90                   	nop
c0014bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c00:	8d 50 0c             	lea    edx,[eax+0xc]
c0014c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c0b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c0e:	e8 0d bb fe ff       	call   c0000720 <strcpy>
c0014c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c22:	e8 ed fd ff ff       	call   c0014a14 <Process::addArgs(char**)>
c0014c27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c33:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c36:	e8 0f ed ff ff       	call   c001394a <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014c3f:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014c44:	34 01                	xor    al,0x1
c0014c46:	88 c2                	mov    dl,al
c0014c48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c4c:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014c52:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014c57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c5b:	c7 04 24 f0 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ef0
c0014c62:	e8 0f 5e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014c67:	90                   	nop
c0014c68:	83 c4 24             	add    esp,0x24
c0014c6b:	5b                   	pop    ebx
c0014c6c:	5e                   	pop    esi
c0014c6d:	c3                   	ret    
c0014c6e:	66 90                	xchg   ax,ax

c0014c70 <Process::Process(bool, char const*, Process*, char**)>:
c0014c70:	56                   	push   esi
c0014c71:	53                   	push   ebx
c0014c72:	83 ec 34             	sub    esp,0x34
c0014c75:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014c79:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014c7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c81:	05 0c 02 00 00       	add    eax,0x20c
c0014c86:	bb 07 00 00 00       	mov    ebx,0x7
c0014c8b:	89 c6                	mov    esi,eax
c0014c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c90:	85 db                	test   ebx,ebx
c0014c92:	78 10                	js     c0014ca4 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0014c94:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c97:	e8 bc 9f 00 00       	call   c001ec58 <ThreadControlBlock::ThreadControlBlock()>
c0014c9c:	83 c6 5f             	add    esi,0x5f
c0014c9f:	4b                   	dec    ebx
c0014ca0:	eb ee                	jmp    c0014c90 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014ca2:	66 90                	xchg   ax,ax
c0014ca4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ca8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014caf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cb3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014cba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cc1:	e8 f4 b8 ff ff       	call   c00105ba <Krnl::newProcessEnv(Process*)>
c0014cc6:	89 c2                	mov    edx,eax
c0014cc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ccc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014cd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cd6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014cdf:	a1 40 20 02 c0       	mov    eax,ds:0xc0022040
c0014ce4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce7:	89 15 40 20 02 c0    	mov    DWORD PTR ds:0xc0022040,edx
c0014ced:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014cf1:	89 02                	mov    DWORD PTR [edx],eax
c0014cf3:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c0014cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d02:	e8 ff 2d ff ff       	call   c0007b06 <malloc>
c0014d07:	89 c3                	mov    ebx,eax
c0014d09:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014d0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d15:	e8 5c 55 ff ff       	call   c000a276 <VAS::VAS(bool)>
c0014d1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d1e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d28:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d36:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014d3a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014d40:	e8 6d be ff ff       	call   c0010bb2 <KeInitSignals()>
c0014d45:	89 c2                	mov    edx,eax
c0014d47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d4b:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014d51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d55:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d5b:	85 c0                	test   eax,eax
c0014d5d:	74 41                	je     c0014da0 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0014d5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d63:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d69:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d73:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014d79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d7d:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014d83:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014d89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d8d:	05 0c 01 00 00       	add    eax,0x10c
c0014d92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014d96:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d99:	e8 82 b9 fe ff       	call   c0000720 <strcpy>
c0014d9e:	eb 5c                	jmp    c0014dfc <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0014da0:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0014da8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0014daf:	e8 52 2d ff ff       	call   c0007b06 <malloc>
c0014db4:	89 c3                	mov    ebx,eax
c0014db6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014dba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014dbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dc1:	e8 ae 3e ff ff       	call   c0008c74 <VgaText::VgaText(char const*)>
c0014dc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dca:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014dd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dda:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ddd:	e8 3c 37 ff ff       	call   c000851e <addToTerminalCycle(VgaText*)>
c0014de2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014de6:	05 0c 01 00 00       	add    eax,0x10c
c0014deb:	c7 44 24 04 99 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e99
c0014df3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014df6:	e8 25 b9 fe ff       	call   c0000720 <strcpy>
c0014dfb:	90                   	nop
c0014dfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e00:	8d 50 0c             	lea    edx,[eax+0xc]
c0014e03:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e0b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e0e:	e8 0d b9 fe ff       	call   c0000720 <strcpy>
c0014e13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e22:	e8 ed fb ff ff       	call   c0014a14 <Process::addArgs(char**)>
c0014e27:	90                   	nop
c0014e28:	83 c4 34             	add    esp,0x34
c0014e2b:	5b                   	pop    ebx
c0014e2c:	5e                   	pop    esi
c0014e2d:	c3                   	ret    
c0014e2e:	66 90                	xchg   ax,ax

c0014e30 <taskStartupFunction>:
c0014e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e35:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e38:	c3                   	ret    
c0014e39:	90                   	nop
c0014e3a:	66 90                	xchg   ax,ax

c0014e3c <Semaphore::Semaphore(int)>:
c0014e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e44:	89 10                	mov    DWORD PTR [eax],edx
c0014e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e4a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014e67:	90                   	nop
c0014e68:	c3                   	ret    
c0014e69:	90                   	nop
c0014e6a:	66 90                	xchg   ax,ax

c0014e6c <Mutex::Mutex()>:
c0014e6c:	83 ec 08             	sub    esp,0x8
c0014e6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e73:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0014e7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e7e:	e8 b9 ff ff ff       	call   c0014e3c <Semaphore::Semaphore(int)>
c0014e83:	90                   	nop
c0014e84:	83 c4 08             	add    esp,0x8
c0014e87:	c3                   	ret    

c0014e88 <Process::createThread(void (*)(void*), void*, int)>:
c0014e88:	57                   	push   edi
c0014e89:	31 c9                	xor    ecx,ecx
c0014e8b:	56                   	push   esi
c0014e8c:	53                   	push   ebx
c0014e8d:	83 ec 10             	sub    esp,0x10
c0014e90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014e94:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c0014e9b:	89 d0                	mov    eax,edx
c0014e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0014ea0:	a8 01                	test   al,0x1
c0014ea2:	74 14                	je     c0014eb8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014ea4:	d1 e8                	shr    eax,1
c0014ea6:	41                   	inc    ecx
c0014ea7:	83 f9 10             	cmp    ecx,0x10
c0014eaa:	75 f4                	jne    c0014ea0 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	31 db                	xor    ebx,ebx
c0014eb1:	89 d8                	mov    eax,ebx
c0014eb3:	5b                   	pop    ebx
c0014eb4:	5e                   	pop    esi
c0014eb5:	5f                   	pop    edi
c0014eb6:	c3                   	ret    
c0014eb7:	90                   	nop
c0014eb8:	b8 01 00 00 00       	mov    eax,0x1
c0014ebd:	d3 e0                	shl    eax,cl
c0014ebf:	09 d0                	or     eax,edx
c0014ec1:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014ec8:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014ecb:	c1 e0 05             	shl    eax,0x5
c0014ece:	29 c8                	sub    eax,ecx
c0014ed0:	01 d8                	add    eax,ebx
c0014ed2:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ed9:	75 09                	jne    c0014ee4 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014edb:	31 f6                	xor    esi,esi
c0014edd:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0014ee3:	90                   	nop
c0014ee4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014eea:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014eed:	c1 e6 05             	shl    esi,0x5
c0014ef0:	29 ce                	sub    esi,ecx
c0014ef2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014ef5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014ef8:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014efe:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014f04:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f0a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014f11:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014f17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f1b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f21:	89 ca                	mov    edx,ecx
c0014f23:	31 c9                	xor    ecx,ecx
c0014f25:	f7 da                	neg    edx
c0014f27:	c1 e2 15             	shl    edx,0x15
c0014f2a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f30:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f36:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c0014f3b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014f41:	31 d2                	xor    edx,edx
c0014f43:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c0014f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f4d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014f53:	31 d2                	xor    edx,edx
c0014f55:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c0014f5b:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c0014f61:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014f68:	e8 99 2b ff ff       	call   c0007b06 <malloc>
c0014f6d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014f70:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014f74:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014f7b:	e8 98 9a 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	89 d8                	mov    eax,ebx
c0014f85:	5b                   	pop    ebx
c0014f86:	5e                   	pop    esi
c0014f87:	5f                   	pop    edi
c0014f88:	c3                   	ret    
c0014f89:	90                   	nop
c0014f8a:	66 90                	xchg   ax,ax

c0014f8c <Process::createUserThread()>:
c0014f8c:	83 ec 1c             	sub    esp,0x1c
c0014f8f:	b8 80 00 00 00       	mov    eax,0x80
c0014f94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f9c:	31 d2                	xor    edx,edx
c0014f9e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0014fa2:	b9 e0 48 01 c0       	mov    ecx,0xc00148e0
c0014fa7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0014fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fae:	e8 d5 fe ff ff       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c0014fb3:	83 c4 1c             	add    esp,0x1c
c0014fb6:	c3                   	ret    
c0014fb7:	90                   	nop

c0014fb8 <setupMultitasking(void (*)())>:
c0014fb8:	56                   	push   esi
c0014fb9:	53                   	push   ebx
c0014fba:	83 ec 24             	sub    esp,0x24
c0014fbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014fc1:	eb 0d                	jmp    c0014fd0 <setupMultitasking(void (*)())+0x18>
c0014fc3:	90                   	nop
c0014fc4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014fcb:	e8 9c 99 00 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014fd0:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014fd7:	e8 6c 99 00 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014fdc:	84 c0                	test   al,al
c0014fde:	74 e4                	je     c0014fc4 <setupMultitasking(void (*)())+0xc>
c0014fe0:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0014fe7:	e8 1a 2b ff ff       	call   c0007b06 <malloc>
c0014fec:	31 d2                	xor    edx,edx
c0014fee:	b9 9d 0e 02 c0       	mov    ecx,0xc0020e9d
c0014ff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ff7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014ffb:	89 c3                	mov    ebx,eax
c0014ffd:	31 c0                	xor    eax,eax
c0014fff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015003:	b8 01 00 00 00       	mov    eax,0x1
c0015008:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001500c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001500f:	e8 5c fc ff ff       	call   c0014c70 <Process::Process(bool, char const*, Process*, char**)>
c0015014:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001501a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0015020:	89 04 24             	mov    DWORD PTR [esp],eax
c0015023:	e8 4b 37 ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c0015028:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c001502f:	31 d2                	xor    edx,edx
c0015031:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c0015036:	83 c8 01             	or     eax,0x1
c0015039:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015040:	31 c0                	xor    eax,eax
c0015042:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c0015048:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001504e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015051:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c0015057:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001505d:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015063:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c0015068:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c001506e:	31 c0                	xor    eax,eax
c0015070:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0015076:	b8 01 00 00 00       	mov    eax,0x1
c001507b:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c0015081:	31 c0                	xor    eax,eax
c0015083:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015089:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001508f:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c0015095:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c001509b:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00150a2:	e8 5f 2a ff ff       	call   c0007b06 <malloc>
c00150a7:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00150ad:	b8 99 0e 02 c0       	mov    eax,0xc0020e99
c00150b2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00150b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150bc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00150c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00150c5:	e8 56 b6 fe ff       	call   c0000720 <strcpy>
c00150ca:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00150d1:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00150d5:	83 c4 24             	add    esp,0x24
c00150d8:	5b                   	pop    ebx
c00150d9:	5e                   	pop    esi
c00150da:	e9 8a b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00150df:	90                   	nop

c00150e0 <schedule()>:
c00150e0:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150e6:	85 d2                	test   edx,edx
c00150e8:	74 0e                	je     c00150f8 <schedule()+0x18>
c00150ea:	b8 01 00 00 00       	mov    eax,0x1
c00150ef:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00150f4:	c3                   	ret    
c00150f5:	8d 76 00             	lea    esi,[esi+0x0]
c00150f8:	53                   	push   ebx
c00150f9:	83 ec 18             	sub    esp,0x18
c00150fc:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015103:	e8 40 98 00 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015108:	84 c0                	test   al,al
c001510a:	75 38                	jne    c0015144 <schedule()+0x64>
c001510c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015111:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015114:	4a                   	dec    edx
c0015115:	74 35                	je     c001514c <schedule()+0x6c>
c0015117:	90                   	nop
c0015118:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001511f:	e8 40 98 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015124:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001512b:	89 c3                	mov    ebx,eax
c001512d:	e8 3a 98 00 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015132:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513c:	e8 ff f7 ff ff       	call   c0014940 <switchToThread(ThreadControlBlock*)>
c0015141:	8d 76 00             	lea    esi,[esi+0x0]
c0015144:	83 c4 18             	add    esp,0x18
c0015147:	5b                   	pop    ebx
c0015148:	c3                   	ret    
c0015149:	8d 76 00             	lea    esi,[esi+0x0]
c001514c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015158:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001515f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015163:	e8 b0 98 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015168:	eb ae                	jmp    c0015118 <schedule()+0x38>
c001516a:	66 90                	xchg   ax,ax

c001516c <Semaphore::tryAcquire()>:
c001516c:	53                   	push   ebx
c001516d:	83 ec 08             	sub    esp,0x8
c0015170:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015174:	fa                   	cli    
c0015175:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001517b:	8d 42 01             	lea    eax,[edx+0x1]
c001517e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015183:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015188:	8d 58 01             	lea    ebx,[eax+0x1]
c001518b:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015191:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015194:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015196:	7c 2c                	jl     c00151c4 <Semaphore::tryAcquire()+0x58>
c0015198:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001519d:	85 c0                	test   eax,eax
c001519f:	75 0b                	jne    c00151ac <Semaphore::tryAcquire()+0x40>
c00151a1:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00151a7:	85 c9                	test   ecx,ecx
c00151a9:	75 55                	jne    c0015200 <Semaphore::tryAcquire()+0x94>
c00151ab:	90                   	nop
c00151ac:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00151b2:	31 c0                	xor    eax,eax
c00151b4:	85 d2                	test   edx,edx
c00151b6:	75 04                	jne    c00151bc <Semaphore::tryAcquire()+0x50>
c00151b8:	fb                   	sti    
c00151b9:	8d 76 00             	lea    esi,[esi+0x0]
c00151bc:	83 c4 08             	add    esp,0x8
c00151bf:	5b                   	pop    ebx
c00151c0:	c3                   	ret    
c00151c1:	8d 76 00             	lea    esi,[esi+0x0]
c00151c4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151c9:	43                   	inc    ebx
c00151ca:	85 c0                	test   eax,eax
c00151cc:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00151cf:	75 1f                	jne    c00151f0 <Semaphore::tryAcquire()+0x84>
c00151d1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151d6:	85 c0                	test   eax,eax
c00151d8:	74 16                	je     c00151f0 <Semaphore::tryAcquire()+0x84>
c00151da:	31 db                	xor    ebx,ebx
c00151dc:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c00151e2:	e8 f9 fe ff ff       	call   c00150e0 <schedule()>
c00151e7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151ec:	8d 50 ff             	lea    edx,[eax-0x1]
c00151ef:	90                   	nop
c00151f0:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00151f6:	85 d2                	test   edx,edx
c00151f8:	b0 01                	mov    al,0x1
c00151fa:	75 c0                	jne    c00151bc <Semaphore::tryAcquire()+0x50>
c00151fc:	eb ba                	jmp    c00151b8 <Semaphore::tryAcquire()+0x4c>
c00151fe:	66 90                	xchg   ax,ax
c0015200:	31 c0                	xor    eax,eax
c0015202:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015207:	e8 d4 fe ff ff       	call   c00150e0 <schedule()>
c001520c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015211:	8d 50 ff             	lea    edx,[eax-0x1]
c0015214:	31 c0                	xor    eax,eax
c0015216:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001521c:	85 d2                	test   edx,edx
c001521e:	75 9c                	jne    c00151bc <Semaphore::tryAcquire()+0x50>
c0015220:	eb 96                	jmp    c00151b8 <Semaphore::tryAcquire()+0x4c>
c0015222:	66 90                	xchg   ax,ax

c0015224 <Semaphore::assertLocked(char const*)>:
c0015224:	83 ec 1c             	sub    esp,0x1c
c0015227:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001522b:	fa                   	cli    
c001522c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015231:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015237:	8d 48 01             	lea    ecx,[eax+0x1]
c001523a:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015240:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015242:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015245:	7c 29                	jl     c0015270 <Semaphore::assertLocked(char const*)+0x4c>
c0015247:	90                   	nop
c0015248:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001524d:	85 c0                	test   eax,eax
c001524f:	75 0b                	jne    c001525c <Semaphore::assertLocked(char const*)+0x38>
c0015251:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015257:	85 d2                	test   edx,edx
c0015259:	75 29                	jne    c0015284 <Semaphore::assertLocked(char const*)+0x60>
c001525b:	90                   	nop
c001525c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015261:	48                   	dec    eax
c0015262:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015267:	75 03                	jne    c001526c <Semaphore::assertLocked(char const*)+0x48>
c0015269:	fb                   	sti    
c001526a:	66 90                	xchg   ax,ax
c001526c:	83 c4 1c             	add    esp,0x1c
c001526f:	c3                   	ret    
c0015270:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015274:	89 04 24             	mov    DWORD PTR [esp],eax
c0015277:	e8 49 b5 ff ff       	call   c00107c5 <KePanic(char const*)>
c001527c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015281:	48                   	dec    eax
c0015282:	eb c4                	jmp    c0015248 <Semaphore::assertLocked(char const*)+0x24>
c0015284:	31 c0                	xor    eax,eax
c0015286:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c001528b:	e8 50 fe ff ff       	call   c00150e0 <schedule()>
c0015290:	eb ca                	jmp    c001525c <Semaphore::assertLocked(char const*)+0x38>
c0015292:	66 90                	xchg   ax,ax

c0015294 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152a3:	e8 38 fe ff ff       	call   c00150e0 <schedule()>
c00152a8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152ad:	48                   	dec    eax
c00152ae:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152b3:	75 03                	jne    c00152b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00152b5:	fb                   	sti    
c00152b6:	66 90                	xchg   ax,ax
c00152b8:	83 c4 0c             	add    esp,0xc
c00152bb:	c3                   	ret    

c00152bc <blockTask(TaskState)>:
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	fa                   	cli    
c00152c0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00152c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152d2:	e8 09 fe ff ff       	call   c00150e0 <schedule()>
c00152d7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152dc:	48                   	dec    eax
c00152dd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152e2:	75 04                	jne    c00152e8 <blockTask(TaskState)+0x2c>
c00152e4:	fb                   	sti    
c00152e5:	8d 76 00             	lea    esi,[esi+0x0]
c00152e8:	83 c4 0c             	add    esp,0xc
c00152eb:	c3                   	ret    

c00152ec <waitTask(int, int*, int)>:
c00152ec:	83 ec 1c             	sub    esp,0x1c
c00152ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00152f8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00152fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015304:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015307:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001530e:	e8 a9 ff ff ff       	call   c00152bc <blockTask(TaskState)>
c0015313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015318:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001531b:	85 d2                	test   edx,edx
c001531d:	74 0d                	je     c001532c <waitTask(int, int*, int)+0x40>
c001531f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015322:	89 02                	mov    DWORD PTR [edx],eax
c0015324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015329:	8d 76 00             	lea    esi,[esi+0x0]
c001532c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001532f:	83 c4 1c             	add    esp,0x1c
c0015332:	c3                   	ret    
c0015333:	90                   	nop

c0015334 <milliTenthSleepUntil(unsigned int)>:
c0015334:	83 ec 1c             	sub    esp,0x1c
c0015337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001533b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015341:	76 05                	jbe    c0015348 <milliTenthSleepUntil(unsigned int)+0x14>
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    
c0015348:	fa                   	cli    
c0015349:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001534f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015355:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001535b:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001535e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015363:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c001536a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001536e:	e8 a5 96 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015373:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001537a:	e8 3d ff ff ff       	call   c00152bc <blockTask(TaskState)>
c001537f:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015384:	48                   	dec    eax
c0015385:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001538a:	75 0c                	jne    c0015398 <milliTenthSleepUntil(unsigned int)+0x64>
c001538c:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015392:	85 d2                	test   edx,edx
c0015394:	75 16                	jne    c00153ac <milliTenthSleepUntil(unsigned int)+0x78>
c0015396:	66 90                	xchg   ax,ax
c0015398:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001539d:	48                   	dec    eax
c001539e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153a3:	75 9f                	jne    c0015344 <milliTenthSleepUntil(unsigned int)+0x10>
c00153a5:	fb                   	sti    
c00153a6:	83 c4 1c             	add    esp,0x1c
c00153a9:	c3                   	ret    
c00153aa:	66 90                	xchg   ax,ax
c00153ac:	31 c0                	xor    eax,eax
c00153ae:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00153b3:	e8 28 fd ff ff       	call   c00150e0 <schedule()>
c00153b8:	eb de                	jmp    c0015398 <milliTenthSleepUntil(unsigned int)+0x64>
c00153ba:	66 90                	xchg   ax,ax

c00153bc <milliTenthSleep(unsigned int)>:
c00153bc:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00153c1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00153c5:	e9 6a ff ff ff       	jmp    c0015334 <milliTenthSleepUntil(unsigned int)>
c00153ca:	66 90                	xchg   ax,ax

c00153cc <sleep(unsigned int)>:
c00153cc:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00153d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153d8:	eb e2                	jmp    c00153bc <milliTenthSleep(unsigned int)>
c00153da:	66 90                	xchg   ax,ax

c00153dc <Semaphore::acquire()>:
c00153dc:	83 ec 1c             	sub    esp,0x1c
c00153df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153e3:	fa                   	cli    
c00153e4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153e9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00153ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00153f2:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153fb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153fd:	7d 2d                	jge    c001542c <Semaphore::acquire()+0x50>
c00153ff:	41                   	inc    ecx
c0015400:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015403:	90                   	nop
c0015404:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015409:	85 c0                	test   eax,eax
c001540b:	75 0b                	jne    c0015418 <Semaphore::acquire()+0x3c>
c001540d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015413:	85 d2                	test   edx,edx
c0015415:	75 5d                	jne    c0015474 <Semaphore::acquire()+0x98>
c0015417:	90                   	nop
c0015418:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001541d:	48                   	dec    eax
c001541e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015423:	75 03                	jne    c0015428 <Semaphore::acquire()+0x4c>
c0015425:	fb                   	sti    
c0015426:	66 90                	xchg   ax,ax
c0015428:	83 c4 1c             	add    esp,0x1c
c001542b:	c3                   	ret    
c001542c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015431:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015438:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001543b:	85 c9                	test   ecx,ecx
c001543d:	74 45                	je     c0015484 <Semaphore::acquire()+0xa8>
c001543f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015442:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015448:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001544b:	90                   	nop
c001544c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015451:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015454:	c7 04 24 18 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f18
c001545b:	e8 16 56 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015460:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015467:	e8 50 fe ff ff       	call   c00152bc <blockTask(TaskState)>
c001546c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015471:	48                   	dec    eax
c0015472:	eb 90                	jmp    c0015404 <Semaphore::acquire()+0x28>
c0015474:	31 c0                	xor    eax,eax
c0015476:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c001547b:	e8 60 fc ff ff       	call   c00150e0 <schedule()>
c0015480:	eb 96                	jmp    c0015418 <Semaphore::acquire()+0x3c>
c0015482:	66 90                	xchg   ax,ax
c0015484:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015489:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001548c:	eb be                	jmp    c001544c <Semaphore::acquire()+0x70>
c001548e:	66 90                	xchg   ax,ax

c0015490 <taskReturned>:
c0015490:	83 ec 1c             	sub    esp,0x1c
c0015493:	c7 04 24 38 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f38
c001549a:	e8 26 b3 ff ff       	call   c00107c5 <KePanic(char const*)>
c001549f:	90                   	nop
c00154a0:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00154a7:	e8 10 fe ff ff       	call   c00152bc <blockTask(TaskState)>
c00154ac:	fa                   	cli    
c00154ad:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00154b3:	e8 28 fc ff ff       	call   c00150e0 <schedule()>
c00154b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154bd:	48                   	dec    eax
c00154be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154c3:	75 db                	jne    c00154a0 <taskReturned+0x10>
c00154c5:	fb                   	sti    
c00154c6:	eb d8                	jmp    c00154a0 <taskReturned+0x10>

c00154c8 <Thr::processFromPID(int)>:
c00154c8:	57                   	push   edi
c00154c9:	56                   	push   esi
c00154ca:	53                   	push   ebx
c00154cb:	83 ec 10             	sub    esp,0x10
c00154ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00154d2:	fa                   	cli    
c00154d3:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154da:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00154e0:	e8 7f 94 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e5:	89 c7                	mov    edi,eax
c00154e7:	eb 13                	jmp    c00154fc <Thr::processFromPID(int)+0x34>
c00154e9:	8d 76 00             	lea    esi,[esi+0x0]
c00154ec:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154f3:	e8 6c 94 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154f8:	39 f8                	cmp    eax,edi
c00154fa:	74 50                	je     c001554c <Thr::processFromPID(int)+0x84>
c00154fc:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015503:	e8 5c 94 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015508:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001550f:	89 c3                	mov    ebx,eax
c0015511:	e8 56 94 00 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015516:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001551a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015521:	e8 f2 94 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015526:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015529:	39 30                	cmp    DWORD PTR [eax],esi
c001552b:	75 bf                	jne    c00154ec <Thr::processFromPID(int)+0x24>
c001552d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015532:	48                   	dec    eax
c0015533:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015538:	74 0e                	je     c0015548 <Thr::processFromPID(int)+0x80>
c001553a:	66 90                	xchg   ax,ax
c001553c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001553f:	90                   	nop
c0015540:	83 c4 10             	add    esp,0x10
c0015543:	5b                   	pop    ebx
c0015544:	5e                   	pop    esi
c0015545:	5f                   	pop    edi
c0015546:	c3                   	ret    
c0015547:	90                   	nop
c0015548:	fb                   	sti    
c0015549:	eb f1                	jmp    c001553c <Thr::processFromPID(int)+0x74>
c001554b:	90                   	nop
c001554c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015551:	8d 50 ff             	lea    edx,[eax-0x1]
c0015554:	31 c0                	xor    eax,eax
c0015556:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001555c:	85 d2                	test   edx,edx
c001555e:	75 e0                	jne    c0015540 <Thr::processFromPID(int)+0x78>
c0015560:	fb                   	sti    
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	5b                   	pop    ebx
c0015565:	5e                   	pop    esi
c0015566:	5f                   	pop    edi
c0015567:	c3                   	ret    

c0015568 <unblockTask(ThreadControlBlock*)>:
c0015568:	53                   	push   ebx
c0015569:	83 ec 18             	sub    esp,0x18
c001556c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015570:	fa                   	cli    
c0015571:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015574:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001557a:	85 c0                	test   eax,eax
c001557c:	74 5a                	je     c00155d8 <unblockTask(ThreadControlBlock*)+0x70>
c001557e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015581:	48                   	dec    eax
c0015582:	74 30                	je     c00155b4 <unblockTask(ThreadControlBlock*)+0x4c>
c0015584:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001558b:	e8 d4 93 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015590:	85 c0                	test   eax,eax
c0015592:	75 18                	jne    c00155ac <unblockTask(ThreadControlBlock*)+0x44>
c0015594:	eb 52                	jmp    c00155e8 <unblockTask(ThreadControlBlock*)+0x80>
c0015596:	66 90                	xchg   ax,ax
c0015598:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001559c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00155a3:	e8 a4 96 00 00       	call   c001ec4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00155a8:	85 c0                	test   eax,eax
c00155aa:	74 3c                	je     c00155e8 <unblockTask(ThreadControlBlock*)+0x80>
c00155ac:	39 c3                	cmp    ebx,eax
c00155ae:	75 e8                	jne    c0015598 <unblockTask(ThreadControlBlock*)+0x30>
c00155b0:	eb 0e                	jmp    c00155c0 <unblockTask(ThreadControlBlock*)+0x58>
c00155b2:	66 90                	xchg   ax,ax
c00155b4:	c7 04 24 bb 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ebb
c00155bb:	e8 b6 54 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00155c0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155c5:	48                   	dec    eax
c00155c6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155cb:	75 03                	jne    c00155d0 <unblockTask(ThreadControlBlock*)+0x68>
c00155cd:	fb                   	sti    
c00155ce:	66 90                	xchg   ax,ax
c00155d0:	83 c4 18             	add    esp,0x18
c00155d3:	5b                   	pop    ebx
c00155d4:	c3                   	ret    
c00155d5:	8d 76 00             	lea    esi,[esi+0x0]
c00155d8:	c7 04 24 a4 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ea4
c00155df:	e8 92 54 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00155e4:	eb da                	jmp    c00155c0 <unblockTask(ThreadControlBlock*)+0x58>
c00155e6:	66 90                	xchg   ax,ax
c00155e8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00155ec:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00155f3:	e8 20 94 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155f8:	eb c6                	jmp    c00155c0 <unblockTask(ThreadControlBlock*)+0x58>
c00155fa:	66 90                	xchg   ax,ax

c00155fc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155fc:	55                   	push   ebp
c00155fd:	57                   	push   edi
c00155fe:	56                   	push   esi
c00155ff:	53                   	push   ebx
c0015600:	83 ec 2c             	sub    esp,0x2c
c0015603:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015607:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001560a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015610:	85 ff                	test   edi,edi
c0015612:	7e 20                	jle    c0015634 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015614:	31 f6                	xor    esi,esi
c0015616:	66 90                	xchg   ax,ax
c0015618:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001561f:	46                   	inc    esi
c0015620:	89 04 24             	mov    DWORD PTR [esp],eax
c0015623:	e8 f1 24 ff ff       	call   c0007b19 <free>
c0015628:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001562b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015631:	7f e5                	jg     c0015618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015633:	90                   	nop
c0015634:	31 f6                	xor    esi,esi
c0015636:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c001563c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015641:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015644:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015647:	d3 c0                	rol    eax,cl
c0015649:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c0015650:	21 c8                	and    eax,ecx
c0015652:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015659:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001565c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015664:	89 f7                	mov    edi,esi
c0015666:	0f 85 68 01 00 00    	jne    c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c001566c:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015672:	85 ed                	test   ebp,ebp
c0015674:	74 1e                	je     c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c0015676:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015679:	e8 5c ae ff ff       	call   c00104da <EnvVarContainer::~EnvVarContainer()>
c001567e:	b9 0c 00 00 00       	mov    ecx,0xc
c0015683:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0015687:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001568a:	e8 cd 52 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001568f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015692:	89 f7                	mov    edi,esi
c0015694:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001569a:	85 c0                	test   eax,eax
c001569c:	0f 84 ae 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00156a2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00156a5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00156a9:	31 c9                	xor    ecx,ecx
c00156ab:	eb 17                	jmp    c00156c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00156ad:	8d 76 00             	lea    esi,[esi+0x0]
c00156b0:	41                   	inc    ecx
c00156b1:	83 f9 10             	cmp    ecx,0x10
c00156b4:	0f 84 96 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00156ba:	66 90                	xchg   ax,ax
c00156bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156c2:	66 90                	xchg   ax,ax
c00156c4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156cb:	d3 fa                	sar    edx,cl
c00156cd:	f6 c2 01             	test   dl,0x1
c00156d0:	74 de                	je     c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c00156d2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156d5:	c1 e2 05             	shl    edx,0x5
c00156d8:	29 ca                	sub    edx,ecx
c00156da:	01 d0                	add    eax,edx
c00156dc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156e2:	83 fd 07             	cmp    ebp,0x7
c00156e5:	75 c9                	jne    c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c00156e7:	05 40 02 00 00       	add    eax,0x240
c00156ec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156ef:	83 fd ff             	cmp    ebp,0xffffffff
c00156f2:	0f 8c e4 00 00 00    	jl     c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00156f8:	0f 84 9a 01 00 00    	je     c0015898 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00156fe:	85 ed                	test   ebp,ebp
c0015700:	0f 84 72 01 00 00    	je     c0015878 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015706:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015708:	75 a6                	jne    c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001570a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001570e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015714:	01 d0                	add    eax,edx
c0015716:	66 90                	xchg   ax,ax
c0015718:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001571c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015722:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015725:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015732:	89 04 24             	mov    DWORD PTR [esp],eax
c0015735:	e8 2e fe ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c001573a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001573e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015741:	41                   	inc    ecx
c0015742:	83 f9 10             	cmp    ecx,0x10
c0015745:	89 f7                	mov    edi,esi
c0015747:	0f 85 6f ff ff ff    	jne    c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c001574d:	8d 76 00             	lea    esi,[esi+0x0]
c0015750:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015756:	85 c0                	test   eax,eax
c0015758:	74 56                	je     c00157b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001575a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015760:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015766:	74 48                	je     c00157b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0015768:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001576f:	e8 f0 91 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015774:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001577b:	89 c7                	mov    edi,eax
c001577d:	e8 c6 91 00 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015782:	84 c0                	test   al,al
c0015784:	0f 84 be 00 00 00    	je     c0015848 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c001578a:	66 90                	xchg   ax,ax
c001578c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001578f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015795:	85 d2                	test   edx,edx
c0015797:	74 0b                	je     c00157a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0015799:	8b 02                	mov    eax,DWORD PTR [edx]
c001579b:	89 14 24             	mov    DWORD PTR [esp],edx
c001579e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157a4:	31 d2                	xor    edx,edx
c00157a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157ac:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157af:	90                   	nop
c00157b0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157b6:	85 db                	test   ebx,ebx
c00157b8:	74 1a                	je     c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00157ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157bd:	e8 16 44 ff ff       	call   c0009bd8 <VAS::~VAS()>
c00157c2:	b8 14 00 00 00       	mov    eax,0x14
c00157c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157ce:	e8 89 51 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c00157d3:	90                   	nop
c00157d4:	83 c4 2c             	add    esp,0x2c
c00157d7:	5b                   	pop    ebx
c00157d8:	5e                   	pop    esi
c00157d9:	5f                   	pop    edi
c00157da:	5d                   	pop    ebp
c00157db:	c3                   	ret    
c00157dc:	c7 04 24 6c 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f6c
c00157e3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00157e7:	e8 d9 af ff ff       	call   c00107c5 <KePanic(char const*)>
c00157ec:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157f3:	89 f7                	mov    edi,esi
c00157f5:	e9 b6 fe ff ff       	jmp    c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c00157fa:	66 90                	xchg   ax,ax
c00157fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015802:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015808:	75 1a                	jne    c0015824 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c001580a:	c7 04 24 d4 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fd4
c0015811:	e8 60 52 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015816:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001581d:	e8 9a fa ff ff       	call   c00152bc <blockTask(TaskState)>
c0015822:	66 90                	xchg   ax,ax
c0015824:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015828:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001582f:	e8 e4 91 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015834:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001583b:	e8 24 91 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015840:	39 f8                	cmp    eax,edi
c0015842:	0f 84 44 ff ff ff    	je     c001578c <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c0015848:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001584f:	e8 10 91 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015854:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001585b:	89 c6                	mov    esi,eax
c001585d:	e8 0a 91 00 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015862:	39 f3                	cmp    ebx,esi
c0015864:	74 be                	je     c0015824 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0015866:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015869:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001586c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015872:	75 b0                	jne    c0015824 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c0015874:	eb 86                	jmp    c00157fc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015876:	66 90                	xchg   ax,ax
c0015878:	c7 04 24 a0 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fa0
c001587f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015883:	e8 3d af ff ff       	call   c00107c5 <KePanic(char const*)>
c0015888:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001588b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001588f:	89 f7                	mov    edi,esi
c0015891:	e9 1a fe ff ff       	jmp    c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015896:	66 90                	xchg   ax,ax
c0015898:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001589c:	8b 36                	mov    esi,DWORD PTR [esi]
c001589e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158a4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158aa:	01 d7                	add    edi,edx
c00158ac:	89 f8                	mov    eax,edi
c00158ae:	e9 65 fe ff ff       	jmp    c0015718 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c00158b3:	90                   	nop

c00158b4 <cleanerTaskFunction(void*)>:
c00158b4:	53                   	push   ebx
c00158b5:	83 ec 18             	sub    esp,0x18
c00158b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158bd:	48                   	dec    eax
c00158be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158c3:	75 03                	jne    c00158c8 <cleanerTaskFunction(void*)+0x14>
c00158c5:	fb                   	sti    
c00158c6:	66 90                	xchg   ax,ax
c00158c8:	fa                   	cli    
c00158c9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158ce:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158d5:	8d 50 01             	lea    edx,[eax+0x1]
c00158d8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158de:	0f 84 a0 00 00 00    	je     c0015984 <cleanerTaskFunction(void*)+0xd0>
c00158e4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158e9:	85 c0                	test   eax,eax
c00158eb:	75 03                	jne    c00158f0 <cleanerTaskFunction(void*)+0x3c>
c00158ed:	fb                   	sti    
c00158ee:	66 90                	xchg   ax,ax
c00158f0:	31 c9                	xor    ecx,ecx
c00158f2:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c00158f8:	fa                   	cli    
c00158f9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00158ff:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015905:	fa                   	cli    
c0015906:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001590c:	eb 26                	jmp    c0015934 <cleanerTaskFunction(void*)+0x80>
c001590e:	66 90                	xchg   ax,ax
c0015910:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015917:	e8 48 90 00 00       	call   c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001591c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015923:	89 c3                	mov    ebx,eax
c0015925:	e8 42 90 00 00       	call   c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001592a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001592d:	e8 ca fc ff ff       	call   c00155fc <cleanupTerminatedTask(ThreadControlBlock*)>
c0015932:	66 90                	xchg   ax,ax
c0015934:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001593b:	e8 08 90 00 00       	call   c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015940:	84 c0                	test   al,al
c0015942:	74 cc                	je     c0015910 <cleanerTaskFunction(void*)+0x5c>
c0015944:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015949:	48                   	dec    eax
c001594a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001594f:	75 03                	jne    c0015954 <cleanerTaskFunction(void*)+0xa0>
c0015951:	fb                   	sti    
c0015952:	66 90                	xchg   ax,ax
c0015954:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015959:	48                   	dec    eax
c001595a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001595f:	0f 85 53 ff ff ff    	jne    c00158b8 <cleanerTaskFunction(void*)+0x4>
c0015965:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c001596b:	85 d2                	test   edx,edx
c001596d:	0f 84 45 ff ff ff    	je     c00158b8 <cleanerTaskFunction(void*)+0x4>
c0015973:	31 c0                	xor    eax,eax
c0015975:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c001597a:	e8 61 f7 ff ff       	call   c00150e0 <schedule()>
c001597f:	e9 34 ff ff ff       	jmp    c00158b8 <cleanerTaskFunction(void*)+0x4>
c0015984:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001598b:	e8 04 f9 ff ff       	call   c0015294 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015990:	e9 5b ff ff ff       	jmp    c00158f0 <cleanerTaskFunction(void*)+0x3c>
c0015995:	8d 76 00             	lea    esi,[esi+0x0]

c0015998 <terminateTask(int)>:
c0015998:	83 ec 1c             	sub    esp,0x1c
c001599b:	fa                   	cli    
c001599c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159a2:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00159a8:	fa                   	cli    
c00159a9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159b8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00159bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00159c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159c7:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159ce:	e8 45 90 00 00       	call   c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159d8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00159df:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c00159e4:	85 c0                	test   eax,eax
c00159e6:	74 58                	je     c0015a40 <terminateTask(int)+0xa8>
c00159e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00159eb:	b2 01                	mov    dl,0x1
c00159ed:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c00159f3:	e8 70 fb ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c00159f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159fd:	48                   	dec    eax
c00159fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a03:	75 03                	jne    c0015a08 <terminateTask(int)+0x70>
c0015a05:	fb                   	sti    
c0015a06:	66 90                	xchg   ax,ax
c0015a08:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a0d:	48                   	dec    eax
c0015a0e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a13:	75 0b                	jne    c0015a20 <terminateTask(int)+0x88>
c0015a15:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a1c:	75 32                	jne    c0015a50 <terminateTask(int)+0xb8>
c0015a1e:	66 90                	xchg   ax,ax
c0015a20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a25:	48                   	dec    eax
c0015a26:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a2b:	75 03                	jne    c0015a30 <terminateTask(int)+0x98>
c0015a2d:	fb                   	sti    
c0015a2e:	66 90                	xchg   ax,ax
c0015a30:	fa                   	cli    
c0015a31:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a37:	90                   	nop
c0015a38:	e8 a3 f6 ff ff       	call   c00150e0 <schedule()>
c0015a3d:	eb e1                	jmp    c0015a20 <terminateTask(int)+0x88>
c0015a3f:	90                   	nop
c0015a40:	c7 04 24 d2 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ed2
c0015a47:	e8 2a 50 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015a4c:	eb aa                	jmp    c00159f8 <terminateTask(int)+0x60>
c0015a4e:	66 90                	xchg   ax,ax
c0015a50:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a5a:	eb dc                	jmp    c0015a38 <terminateTask(int)+0xa0>

c0015a5c <Thr::terminateFromIRQ(int)>:
c0015a5c:	83 ec 1c             	sub    esp,0x1c
c0015a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a66:	e8 2d ff ff ff       	call   c0015998 <terminateTask(int)>
c0015a6b:	90                   	nop

c0015a6c <Semaphore::release()>:
c0015a6c:	83 ec 1c             	sub    esp,0x1c
c0015a6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a73:	fa                   	cli    
c0015a74:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a79:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a7f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015a82:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a88:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015a8b:	85 c9                	test   ecx,ecx
c0015a8d:	74 3d                	je     c0015acc <Semaphore::release()+0x60>
c0015a8f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015a92:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a95:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015a98:	e8 cb fa ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015a9d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015aa2:	48                   	dec    eax
c0015aa3:	90                   	nop
c0015aa4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015aa9:	85 c0                	test   eax,eax
c0015aab:	75 0b                	jne    c0015ab8 <Semaphore::release()+0x4c>
c0015aad:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015ab3:	85 d2                	test   edx,edx
c0015ab5:	75 1d                	jne    c0015ad4 <Semaphore::release()+0x68>
c0015ab7:	90                   	nop
c0015ab8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015abd:	48                   	dec    eax
c0015abe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ac3:	75 03                	jne    c0015ac8 <Semaphore::release()+0x5c>
c0015ac5:	fb                   	sti    
c0015ac6:	66 90                	xchg   ax,ax
c0015ac8:	83 c4 1c             	add    esp,0x1c
c0015acb:	c3                   	ret    
c0015acc:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015acf:	eb d3                	jmp    c0015aa4 <Semaphore::release()+0x38>
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	31 c0                	xor    eax,eax
c0015ad6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015adb:	e8 00 f6 ff ff       	call   c00150e0 <schedule()>
c0015ae0:	eb d6                	jmp    c0015ab8 <Semaphore::release()+0x4c>
c0015ae2:	66 90                	xchg   ax,ax

c0015ae4 <__static_initialization_and_destruction_0(int, int)>:
c0015ae4:	83 ec 1c             	sub    esp,0x1c
c0015ae7:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0015aec:	0f 85 82 00 00 00    	jne    c0015b74 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015af2:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0015afa:	75 78                	jne    c0015b74 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015afc:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b03:	e8 9c 91 00 00       	call   c001eca4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b08:	c7 44 24 08 68 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021b68
c0015b10:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0015b18:	c7 04 24 54 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec54
c0015b1f:	e8 e8 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015b24:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c0015b2b:	e8 74 91 00 00       	call   c001eca4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b30:	c7 44 24 08 68 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021b68
c0015b38:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c0015b40:	c7 04 24 54 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec54
c0015b47:	e8 c0 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015b4c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015b53:	e8 4c 91 00 00       	call   c001eca4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b58:	c7 44 24 08 68 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021b68
c0015b60:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c0015b68:	c7 04 24 54 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec54
c0015b6f:	e8 98 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015b74:	90                   	nop
c0015b75:	83 c4 1c             	add    esp,0x1c
c0015b78:	c3                   	ret    
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]

c0015b7c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015b7c:	83 ec 1c             	sub    esp,0x1c
c0015b7f:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0015b87:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0015b8e:	e8 51 ff ff ff       	call   c0015ae4 <__static_initialization_and_destruction_0(int, int)>
c0015b93:	83 c4 1c             	add    esp,0x1c
c0015b96:	c3                   	ret    

c0015b97 <Vm::inbv(unsigned short)>:
c0015b97:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015b9c:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015ba2:	75 06                	jne    c0015baa <Vm::inbv(unsigned short)+0x13>
c0015ba4:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015ba9:	c3                   	ret    
c0015baa:	ec                   	in     al,dx
c0015bab:	c3                   	ret    

c0015bac <Vm::outbv(unsigned short, unsigned char)>:
c0015bac:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015bb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bb5:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015bbb:	75 25                	jne    c0015be2 <Vm::outbv(unsigned short, unsigned char)+0x36>
c0015bbd:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015bc3:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015bc9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015bcc:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015bd2:	83 fa 20             	cmp    edx,0x20
c0015bd5:	75 0c                	jne    c0015be3 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0015bd7:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015be1:	c3                   	ret    
c0015be2:	ee                   	out    dx,al
c0015be3:	c3                   	ret    

c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015be4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015be9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015bee:	c1 e0 04             	shl    eax,0x4
c0015bf1:	01 d0                	add    eax,edx
c0015bf3:	c3                   	ret    

c0015bf4 <Vm::getSegment(unsigned int)>:
c0015bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf8:	c1 e8 10             	shr    eax,0x10
c0015bfb:	c3                   	ret    

c0015bfc <Vm::getOffset(unsigned int)>:
c0015bfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c00:	c3                   	ret    

c0015c01 <Vm::mainloop2()>:
c0015c01:	83 ec 18             	sub    esp,0x18
c0015c04:	fa                   	cli    
c0015c05:	6a 02                	push   0x2
c0015c07:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c0d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c14:	e8 7b f6 ff ff       	call   c0015294 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c1e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c22:	52                   	push   edx
c0015c23:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c27:	52                   	push   edx
c0015c28:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c2c:	52                   	push   edx
c0015c2d:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c31:	50                   	push   eax
c0015c32:	e8 d8 a5 fe ff       	call   c000020f <goToVM86>
c0015c37:	83 c4 2c             	add    esp,0x2c
c0015c3a:	c3                   	ret    

c0015c3b <Vm::mainVm8086Loop(void*)>:
c0015c3b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c40:	48                   	dec    eax
c0015c41:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c46:	75 01                	jne    c0015c49 <Vm::mainVm8086Loop(void*)+0xe>
c0015c48:	fb                   	sti    
c0015c49:	eb b6                	jmp    c0015c01 <Vm::mainloop2()>

c0015c4b <Vm::mainloop3(unsigned long)>:
c0015c4b:	83 ec 18             	sub    esp,0x18
c0015c4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c52:	fa                   	cli    
c0015c53:	6a 02                	push   0x2
c0015c55:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c5b:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015c62:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015c67:	e8 28 f6 ff ff       	call   c0015294 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c6c:	83 c4 1c             	add    esp,0x1c
c0015c6f:	eb 90                	jmp    c0015c01 <Vm::mainloop2()>

c0015c71 <Vm::initialise8086()>:
c0015c71:	83 ec 0c             	sub    esp,0xc
c0015c74:	68 80 00 00 00       	push   0x80
c0015c79:	6a 00                	push   0x0
c0015c7b:	68 3b 5c 01 c0       	push   0xc0015c3b
c0015c80:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015c86:	e8 fd f1 ff ff       	call   c0014e88 <Process::createThread(void (*)(void*), void*, int)>
c0015c8b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015c92:	68 00 01 00 00       	push   0x100
c0015c97:	6a 00                	push   0x0
c0015c99:	6a 00                	push   0x0
c0015c9b:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015ca0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015ca5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015cab:	e8 d2 43 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015cb0:	83 c4 2c             	add    esp,0x2c
c0015cb3:	c3                   	ret    

c0015cb4 <Vm::finish8086()>:
c0015cb4:	53                   	push   ebx
c0015cb5:	83 ec 08             	sub    esp,0x8
c0015cb8:	fa                   	cli    
c0015cb9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cbf:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015cc6:	75 15                	jne    c0015cdd <Vm::finish8086()+0x29>
c0015cc8:	e8 13 f4 ff ff       	call   c00150e0 <schedule()>
c0015ccd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cd2:	48                   	dec    eax
c0015cd3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd8:	75 de                	jne    c0015cb8 <Vm::finish8086()+0x4>
c0015cda:	fb                   	sti    
c0015cdb:	eb db                	jmp    c0015cb8 <Vm::finish8086()+0x4>
c0015cdd:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015ced:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015cf3:	e8 70 f8 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015cf8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d03:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d09:	85 d2                	test   edx,edx
c0015d0b:	75 01                	jne    c0015d0e <Vm::finish8086()+0x5a>
c0015d0d:	fb                   	sti    
c0015d0e:	83 c4 08             	add    esp,0x8
c0015d11:	89 d8                	mov    eax,ebx
c0015d13:	5b                   	pop    ebx
c0015d14:	c3                   	ret    

c0015d15 <Vm::getOutput8086(unsigned char*)>:
c0015d15:	57                   	push   edi
c0015d16:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d1c:	56                   	push   esi
c0015d1d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d28:	5e                   	pop    esi
c0015d29:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d2e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d38:	5f                   	pop    edi
c0015d39:	c3                   	ret    

c0015d3a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d3a:	55                   	push   ebp
c0015d3b:	57                   	push   edi
c0015d3c:	56                   	push   esi
c0015d3d:	53                   	push   ebx
c0015d3e:	83 ec 0c             	sub    esp,0xc
c0015d41:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015d46:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c0015d4b:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c0015d50:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c0015d55:	fa                   	cli    
c0015d56:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d5c:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015d63:	75 15                	jne    c0015d7a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c0015d65:	e8 76 f3 ff ff       	call   c00150e0 <schedule()>
c0015d6a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6f:	48                   	dec    eax
c0015d70:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d75:	75 de                	jne    c0015d55 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015d77:	fb                   	sti    
c0015d78:	eb db                	jmp    c0015d55 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015d7a:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d84:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015d89:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015d8d:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015d91:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015d95:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015d99:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015d9d:	50                   	push   eax
c0015d9e:	6a 20                	push   0x20
c0015da0:	6a 00                	push   0x0
c0015da2:	68 e0 81 02 c0       	push   0xc00281e0
c0015da7:	e8 d4 a7 fe ff       	call   c0000580 <memset>
c0015dac:	5a                   	pop    edx
c0015dad:	59                   	pop    ecx
c0015dae:	57                   	push   edi
c0015daf:	56                   	push   esi
c0015db0:	e8 2f fe ff ff       	call   c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dbc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015dc0:	89 c7                	mov    edi,eax
c0015dc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015dc4:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015dcb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dd0:	48                   	dec    eax
c0015dd1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dd6:	75 01                	jne    c0015dd9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0015dd8:	fb                   	sti    
c0015dd9:	83 ec 0c             	sub    esp,0xc
c0015ddc:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015de2:	e8 81 f7 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015de7:	83 c4 1c             	add    esp,0x1c
c0015dea:	b0 01                	mov    al,0x1
c0015dec:	5b                   	pop    ebx
c0015ded:	5e                   	pop    esi
c0015dee:	5f                   	pop    edi
c0015def:	5d                   	pop    ebp
c0015df0:	c3                   	ret    

c0015df1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015df1:	55                   	push   ebp
c0015df2:	57                   	push   edi
c0015df3:	56                   	push   esi
c0015df4:	53                   	push   ebx
c0015df5:	83 ec 2c             	sub    esp,0x2c
c0015df8:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c0015dfd:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0015e02:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0015e07:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c0015e0c:	fa                   	cli    
c0015e0d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0015e12:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015e1c:	84 c0                	test   al,al
c0015e1e:	75 15                	jne    c0015e35 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015e20:	e8 bb f2 ff ff       	call   c00150e0 <schedule()>
c0015e25:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e2a:	48                   	dec    eax
c0015e2b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e30:	75 da                	jne    c0015e0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e32:	fb                   	sti    
c0015e33:	eb d7                	jmp    c0015e0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e35:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e3f:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e44:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e48:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e4c:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e50:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e54:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e58:	50                   	push   eax
c0015e59:	6a 20                	push   0x20
c0015e5b:	6a 00                	push   0x0
c0015e5d:	68 e0 81 02 c0       	push   0xc00281e0
c0015e62:	e8 19 a7 fe ff       	call   c0000580 <memset>
c0015e67:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e6e:	e8 93 1c ff ff       	call   c0007b06 <malloc>
c0015e73:	83 c4 0c             	add    esp,0xc
c0015e76:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015e7c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e80:	89 c3                	mov    ebx,eax
c0015e82:	50                   	push   eax
c0015e83:	e8 70 51 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	85 db                	test   ebx,ebx
c0015e8d:	75 0a                	jne    c0015e99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c0015e8f:	83 ec 0c             	sub    esp,0xc
c0015e92:	68 fc 0f 02 c0       	push   0xc0020ffc
c0015e97:	eb 3e                	jmp    c0015ed7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015e99:	55                   	push   ebp
c0015e9a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e9e:	50                   	push   eax
c0015e9f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015ea3:	50                   	push   eax
c0015ea4:	53                   	push   ebx
c0015ea5:	e8 b2 54 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0015eaa:	83 c4 10             	add    esp,0x10
c0015ead:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015eb2:	74 0a                	je     c0015ebe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0015eb4:	83 ec 0c             	sub    esp,0xc
c0015eb7:	68 10 10 02 c0       	push   0xc0021010
c0015ebc:	eb 19                	jmp    c0015ed7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015ebe:	51                   	push   ecx
c0015ebf:	51                   	push   ecx
c0015ec0:	6a 01                	push   0x1
c0015ec2:	53                   	push   ebx
c0015ec3:	e8 ee 51 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0015ec8:	83 c4 10             	add    esp,0x10
c0015ecb:	85 c0                	test   eax,eax
c0015ecd:	74 27                	je     c0015ef6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c0015ecf:	83 ec 0c             	sub    esp,0xc
c0015ed2:	68 29 10 02 c0       	push   0xc0021029
c0015ed7:	e8 e9 a8 ff ff       	call   c00107c5 <KePanic(char const*)>
c0015edc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	48                   	dec    eax
c0015ee5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015eea:	85 c0                	test   eax,eax
c0015eec:	75 01                	jne    c0015eef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c0015eee:	fb                   	sti    
c0015eef:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015ef4:	eb 52                	jmp    c0015f48 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0015ef6:	50                   	push   eax
c0015ef7:	50                   	push   eax
c0015ef8:	57                   	push   edi
c0015ef9:	56                   	push   esi
c0015efa:	e8 e5 fc ff ff       	call   c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>
c0015eff:	5a                   	pop    edx
c0015f00:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f02:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015f06:	51                   	push   ecx
c0015f07:	50                   	push   eax
c0015f08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f10:	53                   	push   ebx
c0015f11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f14:	83 c4 14             	add    esp,0x14
c0015f17:	53                   	push   ebx
c0015f18:	e8 f7 51 ff ff       	call   c000b114 <File::close()>
c0015f1d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f22:	83 c4 10             	add    esp,0x10
c0015f25:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f2c:	48                   	dec    eax
c0015f2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f32:	85 c0                	test   eax,eax
c0015f34:	75 01                	jne    c0015f37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c0015f36:	fb                   	sti    
c0015f37:	83 ec 0c             	sub    esp,0xc
c0015f3a:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f40:	e8 23 f6 ff ff       	call   c0015568 <unblockTask(ThreadControlBlock*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f4c:	83 c4 2c             	add    esp,0x2c
c0015f4f:	5b                   	pop    ebx
c0015f50:	5e                   	pop    esi
c0015f51:	5f                   	pop    edi
c0015f52:	5d                   	pop    ebp
c0015f53:	c3                   	ret    

c0015f54 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015f54:	57                   	push   edi
c0015f55:	56                   	push   esi
c0015f56:	53                   	push   ebx
c0015f57:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015f5c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0015f61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f69:	83 e8 06             	sub    eax,0x6
c0015f6c:	0f b7 c0             	movzx  eax,ax
c0015f6f:	50                   	push   eax
c0015f70:	52                   	push   edx
c0015f71:	e8 6e fc ff ff       	call   c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f76:	5a                   	pop    edx
c0015f77:	5e                   	pop    esi
c0015f78:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015f7b:	8d 56 fa             	lea    edx,[esi-0x6]
c0015f7e:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015f81:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015f87:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015f8a:	8d 56 02             	lea    edx,[esi+0x2]
c0015f8d:	66 89 10             	mov    WORD PTR [eax],dx
c0015f90:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015f93:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015f97:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c0015f9b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015f9f:	89 d6                	mov    esi,edx
c0015fa1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015fa7:	81 e6 ff fd 00 00    	and    esi,0xfdff
c0015fad:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015fb1:	74 08                	je     c0015fbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0015fb3:	89 d6                	mov    esi,edx
c0015fb5:	81 ce 00 02 00 00    	or     esi,0x200
c0015fbb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015fc8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015fd0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015fd3:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015fdb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015fde:	5b                   	pop    ebx
c0015fdf:	5e                   	pop    esi
c0015fe0:	5f                   	pop    edi
c0015fe1:	c3                   	ret    

c0015fe2 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015fe2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015fe7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015fec:	c1 e0 04             	shl    eax,0x4
c0015fef:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015ff2:	c3                   	ret    

c0015ff3 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015ff3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015ff8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ffd:	c1 e0 04             	shl    eax,0x4
c0016000:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016004:	c3                   	ret    

c0016005 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016005:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001600a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001600f:	c1 e0 04             	shl    eax,0x4
c0016012:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016015:	c3                   	ret    

c0016016 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016016:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001601b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016020:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016024:	c1 e0 04             	shl    eax,0x4
c0016027:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001602a:	c3                   	ret    

c001602b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001602b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016030:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016035:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c001603a:	c1 e0 04             	shl    eax,0x4
c001603d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016041:	c3                   	ret    

c0016042 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016042:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016047:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001604c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016050:	c1 e0 04             	shl    eax,0x4
c0016053:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016056:	c3                   	ret    

c0016057 <Vm::faultHandler(regs*)>:
c0016057:	55                   	push   ebp
c0016058:	57                   	push   edi
c0016059:	56                   	push   esi
c001605a:	53                   	push   ebx
c001605b:	83 ec 1c             	sub    esp,0x1c
c001605e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016062:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c0016066:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c001606a:	50                   	push   eax
c001606b:	57                   	push   edi
c001606c:	e8 73 fb ff ff       	call   c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>
c0016071:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c0016075:	59                   	pop    ecx
c0016076:	5e                   	pop    esi
c0016077:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c001607a:	89 c1                	mov    ecx,eax
c001607c:	0f b7 c6             	movzx  eax,si
c001607f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016083:	50                   	push   eax
c0016084:	55                   	push   ebp
c0016085:	e8 5a fb ff ff       	call   c0015be4 <Vm::realToLinear(unsigned short, unsigned short)>
c001608a:	5a                   	pop    edx
c001608b:	5a                   	pop    edx
c001608c:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c0016091:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016096:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c001609b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001609e:	80 fa 9d             	cmp    dl,0x9d
c00160a1:	0f 84 2c 02 00 00    	je     c00162d3 <Vm::faultHandler(regs*)+0x27c>
c00160a7:	0f 87 94 00 00 00    	ja     c0016141 <Vm::faultHandler(regs*)+0xea>
c00160ad:	80 fa 66             	cmp    dl,0x66
c00160b0:	0f 84 99 01 00 00    	je     c001624f <Vm::faultHandler(regs*)+0x1f8>
c00160b6:	77 4a                	ja     c0016102 <Vm::faultHandler(regs*)+0xab>
c00160b8:	80 fa 36             	cmp    dl,0x36
c00160bb:	0f 84 81 01 00 00    	je     c0016242 <Vm::faultHandler(regs*)+0x1eb>
c00160c1:	77 1d                	ja     c00160e0 <Vm::faultHandler(regs*)+0x89>
c00160c3:	80 fa 26             	cmp    dl,0x26
c00160c6:	0f 84 4f 01 00 00    	je     c001621b <Vm::faultHandler(regs*)+0x1c4>
c00160cc:	80 fa 2e             	cmp    dl,0x2e
c00160cf:	0f 85 ec 05 00 00    	jne    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c00160d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00160d8:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00160dd:	41                   	inc    ecx
c00160de:	eb bb                	jmp    c001609b <Vm::faultHandler(regs*)+0x44>
c00160e0:	80 fa 64             	cmp    dl,0x64
c00160e3:	0f 84 3f 01 00 00    	je     c0016228 <Vm::faultHandler(regs*)+0x1d1>
c00160e9:	0f 87 46 01 00 00    	ja     c0016235 <Vm::faultHandler(regs*)+0x1de>
c00160ef:	80 fa 3e             	cmp    dl,0x3e
c00160f2:	0f 85 c9 05 00 00    	jne    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c00160f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00160fb:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016100:	eb db                	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c0016102:	80 fa 6d             	cmp    dl,0x6d
c0016105:	0f 84 e3 02 00 00    	je     c00163ee <Vm::faultHandler(regs*)+0x397>
c001610b:	77 17                	ja     c0016124 <Vm::faultHandler(regs*)+0xcd>
c001610d:	80 fa 67             	cmp    dl,0x67
c0016110:	0f 84 46 01 00 00    	je     c001625c <Vm::faultHandler(regs*)+0x205>
c0016116:	80 fa 6c             	cmp    dl,0x6c
c0016119:	0f 84 60 02 00 00    	je     c001637f <Vm::faultHandler(regs*)+0x328>
c001611f:	e9 9d 05 00 00       	jmp    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c0016124:	80 fa 6f             	cmp    dl,0x6f
c0016127:	0f 84 f1 03 00 00    	je     c001651e <Vm::faultHandler(regs*)+0x4c7>
c001612d:	0f 82 54 03 00 00    	jb     c0016487 <Vm::faultHandler(regs*)+0x430>
c0016133:	80 fa 9c             	cmp    dl,0x9c
c0016136:	0f 84 2d 01 00 00    	je     c0016269 <Vm::faultHandler(regs*)+0x212>
c001613c:	e9 80 05 00 00       	jmp    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c0016141:	80 fa ec             	cmp    dl,0xec
c0016144:	0f 84 19 05 00 00    	je     c0016663 <Vm::faultHandler(regs*)+0x60c>
c001614a:	77 79                	ja     c00161c5 <Vm::faultHandler(regs*)+0x16e>
c001614c:	80 fa e4             	cmp    dl,0xe4
c001614f:	0f 84 98 04 00 00    	je     c00165ed <Vm::faultHandler(regs*)+0x596>
c0016155:	77 51                	ja     c00161a8 <Vm::faultHandler(regs*)+0x151>
c0016157:	80 fa cd             	cmp    dl,0xcd
c001615a:	0f 84 d3 01 00 00    	je     c0016333 <Vm::faultHandler(regs*)+0x2dc>
c0016160:	80 fa cf             	cmp    dl,0xcf
c0016163:	0f 85 58 05 00 00    	jne    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c0016169:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001616c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001616f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016173:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016176:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001617a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016180:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016183:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016187:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001618d:	c1 e8 09             	shr    eax,0x9
c0016190:	24 01                	and    al,0x1
c0016192:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016195:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016198:	83 c0 06             	add    eax,0x6
c001619b:	25 ff ff 00 00       	and    eax,0xffff
c00161a0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00161a3:	e9 15 05 00 00       	jmp    c00166bd <Vm::faultHandler(regs*)+0x666>
c00161a8:	80 fa e6             	cmp    dl,0xe6
c00161ab:	0f 84 86 04 00 00    	je     c0016637 <Vm::faultHandler(regs*)+0x5e0>
c00161b1:	0f 82 52 04 00 00    	jb     c0016609 <Vm::faultHandler(regs*)+0x5b2>
c00161b7:	80 fa e7             	cmp    dl,0xe7
c00161ba:	0f 84 8e 04 00 00    	je     c001664e <Vm::faultHandler(regs*)+0x5f7>
c00161c0:	e9 fc 04 00 00       	jmp    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c00161c5:	80 fa ef             	cmp    dl,0xef
c00161c8:	0f 84 d9 04 00 00    	je     c00166a7 <Vm::faultHandler(regs*)+0x650>
c00161ce:	77 28                	ja     c00161f8 <Vm::faultHandler(regs*)+0x1a1>
c00161d0:	80 fa ed             	cmp    dl,0xed
c00161d3:	0f 84 a6 04 00 00    	je     c001667f <Vm::faultHandler(regs*)+0x628>
c00161d9:	80 fa ee             	cmp    dl,0xee
c00161dc:	0f 85 df 04 00 00    	jne    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c00161e2:	50                   	push   eax
c00161e3:	50                   	push   eax
c00161e4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00161e8:	50                   	push   eax
c00161e9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00161ed:	50                   	push   eax
c00161ee:	e8 b9 f9 ff ff       	call   c0015bac <Vm::outbv(unsigned short, unsigned char)>
c00161f3:	e9 a7 04 00 00       	jmp    c001669f <Vm::faultHandler(regs*)+0x648>
c00161f8:	80 fa fa             	cmp    dl,0xfa
c00161fb:	0f 84 62 01 00 00    	je     c0016363 <Vm::faultHandler(regs*)+0x30c>
c0016201:	80 fa fb             	cmp    dl,0xfb
c0016204:	0f 84 67 01 00 00    	je     c0016371 <Vm::faultHandler(regs*)+0x31a>
c001620a:	80 fa f3             	cmp    dl,0xf3
c001620d:	0f 85 ae 04 00 00    	jne    c00166c1 <Vm::faultHandler(regs*)+0x66a>
c0016213:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016216:	e9 c2 fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c001621b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001621e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c0016223:	e9 b5 fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c0016228:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001622b:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c0016230:	e9 a8 fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c0016235:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016238:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c001623d:	e9 9b fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c0016242:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016245:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c001624a:	e9 8e fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c001624f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016252:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c0016257:	e9 81 fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c001625c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001625f:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0016264:	e9 74 fe ff ff       	jmp    c00160dd <Vm::faultHandler(regs*)+0x86>
c0016269:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001626e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016271:	74 30                	je     c00162a3 <Vm::faultHandler(regs*)+0x24c>
c0016273:	8d 4e fc             	lea    ecx,[esi-0x4]
c0016276:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001627c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016282:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016285:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016288:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001628e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016292:	0f 84 22 04 00 00    	je     c00166ba <Vm::faultHandler(regs*)+0x663>
c0016298:	80 ce 02             	or     dh,0x2
c001629b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001629e:	e9 17 04 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c00162a3:	8d 4e fe             	lea    ecx,[esi-0x2]
c00162a6:	0f b7 d2             	movzx  edx,dx
c00162a9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162af:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162b2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00162b6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162bc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00162c0:	74 05                	je     c00162c7 <Vm::faultHandler(regs*)+0x270>
c00162c2:	80 ce 02             	or     dh,0x2
c00162c5:	eb 03                	jmp    c00162ca <Vm::faultHandler(regs*)+0x273>
c00162c7:	80 e6 fd             	and    dh,0xfd
c00162ca:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00162ce:	e9 e7 03 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c00162d3:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00162d8:	74 29                	je     c0016303 <Vm::faultHandler(regs*)+0x2ac>
c00162da:	8b 10                	mov    edx,DWORD PTR [eax]
c00162dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162e2:	81 ca 00 02 02 00    	or     edx,0x20200
c00162e8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00162eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00162ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162f3:	c1 e8 09             	shr    eax,0x9
c00162f6:	24 01                	and    al,0x1
c00162f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00162fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00162fe:	83 c0 04             	add    eax,0x4
c0016301:	eb 23                	jmp    c0016326 <Vm::faultHandler(regs*)+0x2cf>
c0016303:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016306:	81 ca 00 02 02 00    	or     edx,0x20200
c001630c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001630f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016312:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016318:	c1 e8 09             	shr    eax,0x9
c001631b:	24 01                	and    al,0x1
c001631d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016320:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016323:	83 c0 02             	add    eax,0x2
c0016326:	25 ff ff 00 00       	and    eax,0xffff
c001632b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001632e:	e9 87 03 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c0016333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016337:	3c ee                	cmp    al,0xee
c0016339:	75 10                	jne    c001634b <Vm::faultHandler(regs*)+0x2f4>
c001633b:	83 ec 0c             	sub    esp,0xc
c001633e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016341:	e8 05 f9 ff ff       	call   c0015c4b <Vm::mainloop3(unsigned long)>
c0016346:	e9 57 03 00 00       	jmp    c00166a2 <Vm::faultHandler(regs*)+0x64b>
c001634b:	83 ec 0c             	sub    esp,0xc
c001634e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016352:	55                   	push   ebp
c0016353:	51                   	push   ecx
c0016354:	50                   	push   eax
c0016355:	53                   	push   ebx
c0016356:	e8 f9 fb ff ff       	call   c0015f54 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001635b:	83 c4 20             	add    esp,0x20
c001635e:	e9 5a 03 00 00       	jmp    c00166bd <Vm::faultHandler(regs*)+0x666>
c0016363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016368:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001636c:	e9 49 03 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c0016371:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016376:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001637a:	e9 3b 03 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c001637f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016384:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016387:	74 2b                	je     c00163b4 <Vm::faultHandler(regs*)+0x35d>
c0016389:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016390:	76 22                	jbe    c00163b4 <Vm::faultHandler(regs*)+0x35d>
c0016392:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016396:	50                   	push   eax
c0016397:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001639b:	50                   	push   eax
c001639c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00163a0:	50                   	push   eax
c00163a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00163a5:	50                   	push   eax
c00163a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00163aa:	50                   	push   eax
c00163ab:	6a 6c                	push   0x6c
c00163ad:	6a 6c                	push   0x6c
c00163af:	e9 c6 01 00 00       	jmp    c001657a <Vm::faultHandler(regs*)+0x523>
c00163b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	0f b7 f6             	movzx  esi,si
c00163be:	50                   	push   eax
c00163bf:	e8 d3 f7 ff ff       	call   c0015b97 <Vm::inbv(unsigned short)>
c00163c4:	83 c4 0c             	add    esp,0xc
c00163c7:	0f b6 c0             	movzx  eax,al
c00163ca:	50                   	push   eax
c00163cb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00163cf:	50                   	push   eax
c00163d0:	56                   	push   esi
c00163d1:	e8 40 fc ff ff       	call   c0016016 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163dc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00163e0:	74 03                	je     c00163e5 <Vm::faultHandler(regs*)+0x38e>
c00163e2:	48                   	dec    eax
c00163e3:	eb 01                	jmp    c00163e6 <Vm::faultHandler(regs*)+0x38f>
c00163e5:	40                   	inc    eax
c00163e6:	0f b7 c0             	movzx  eax,ax
c00163e9:	e9 91 00 00 00       	jmp    c001647f <Vm::faultHandler(regs*)+0x428>
c00163ee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00163f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163f9:	74 29                	je     c0016424 <Vm::faultHandler(regs*)+0x3cd>
c00163fb:	3d ff ff 00 00       	cmp    eax,0xffff
c0016400:	76 22                	jbe    c0016424 <Vm::faultHandler(regs*)+0x3cd>
c0016402:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016406:	50                   	push   eax
c0016407:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001640b:	50                   	push   eax
c001640c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016410:	50                   	push   eax
c0016411:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016415:	50                   	push   eax
c0016416:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001641a:	50                   	push   eax
c001641b:	6a 6d                	push   0x6d
c001641d:	6a 6d                	push   0x6d
c001641f:	e9 56 01 00 00       	jmp    c001657a <Vm::faultHandler(regs*)+0x523>
c0016424:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016429:	0f b7 c8             	movzx  ecx,ax
c001642c:	0f b7 f6             	movzx  esi,si
c001642f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016433:	74 1e                	je     c0016453 <Vm::faultHandler(regs*)+0x3fc>
c0016435:	ed                   	in     eax,dx
c0016436:	52                   	push   edx
c0016437:	50                   	push   eax
c0016438:	51                   	push   ecx
c0016439:	56                   	push   esi
c001643a:	e8 03 fc ff ff       	call   c0016042 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001643f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016442:	83 c4 10             	add    esp,0x10
c0016445:	8d 50 04             	lea    edx,[eax+0x4]
c0016448:	83 e8 04             	sub    eax,0x4
c001644b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016451:	eb 20                	jmp    c0016473 <Vm::faultHandler(regs*)+0x41c>
c0016453:	66 ed                	in     ax,dx
c0016455:	55                   	push   ebp
c0016456:	0f b7 c0             	movzx  eax,ax
c0016459:	50                   	push   eax
c001645a:	51                   	push   ecx
c001645b:	56                   	push   esi
c001645c:	e8 ca fb ff ff       	call   c001602b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016461:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016464:	83 c4 10             	add    esp,0x10
c0016467:	8d 50 02             	lea    edx,[eax+0x2]
c001646a:	83 e8 02             	sub    eax,0x2
c001646d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016473:	25 ff ff 00 00       	and    eax,0xffff
c0016478:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001647c:	0f 44 c2             	cmove  eax,edx
c001647f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016482:	e9 33 02 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c0016487:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c001648b:	fe c8                	dec    al
c001648d:	3c 05                	cmp    al,0x5
c001648f:	77 23                	ja     c00164b4 <Vm::faultHandler(regs*)+0x45d>
c0016491:	0f b6 c0             	movzx  eax,al
c0016494:	ff 24 85 9c 10 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdef64]
c001649b:	89 ef                	mov    edi,ebp
c001649d:	eb 15                	jmp    c00164b4 <Vm::faultHandler(regs*)+0x45d>
c001649f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00164a3:	eb 0f                	jmp    c00164b4 <Vm::faultHandler(regs*)+0x45d>
c00164a5:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00164a9:	eb 09                	jmp    c00164b4 <Vm::faultHandler(regs*)+0x45d>
c00164ab:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00164af:	eb 03                	jmp    c00164b4 <Vm::faultHandler(regs*)+0x45d>
c00164b1:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00164b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00164b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00164bc:	74 29                	je     c00164e7 <Vm::faultHandler(regs*)+0x490>
c00164be:	3d ff ff 00 00       	cmp    eax,0xffff
c00164c3:	76 22                	jbe    c00164e7 <Vm::faultHandler(regs*)+0x490>
c00164c5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164c9:	50                   	push   eax
c00164ca:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164ce:	50                   	push   eax
c00164cf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164d3:	50                   	push   eax
c00164d4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164d8:	50                   	push   eax
c00164d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164dd:	50                   	push   eax
c00164de:	6a 6e                	push   0x6e
c00164e0:	6a 6e                	push   0x6e
c00164e2:	e9 93 00 00 00       	jmp    c001657a <Vm::faultHandler(regs*)+0x523>
c00164e7:	51                   	push   ecx
c00164e8:	0f b7 c0             	movzx  eax,ax
c00164eb:	51                   	push   ecx
c00164ec:	50                   	push   eax
c00164ed:	57                   	push   edi
c00164ee:	e8 ef fa ff ff       	call   c0015fe2 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00164f3:	5e                   	pop    esi
c00164f4:	5f                   	pop    edi
c00164f5:	0f b6 c0             	movzx  eax,al
c00164f8:	50                   	push   eax
c00164f9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164fd:	50                   	push   eax
c00164fe:	e8 a9 f6 ff ff       	call   c0015bac <Vm::outbv(unsigned short, unsigned char)>
c0016503:	83 c4 10             	add    esp,0x10
c0016506:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016509:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001650d:	74 03                	je     c0016512 <Vm::faultHandler(regs*)+0x4bb>
c001650f:	48                   	dec    eax
c0016510:	eb 01                	jmp    c0016513 <Vm::faultHandler(regs*)+0x4bc>
c0016512:	40                   	inc    eax
c0016513:	0f b7 c0             	movzx  eax,ax
c0016516:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016519:	e9 9c 01 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c001651e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016522:	fe c8                	dec    al
c0016524:	3c 05                	cmp    al,0x5
c0016526:	77 23                	ja     c001654b <Vm::faultHandler(regs*)+0x4f4>
c0016528:	0f b6 c0             	movzx  eax,al
c001652b:	ff 24 85 b4 10 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdef4c]
c0016532:	89 ef                	mov    edi,ebp
c0016534:	eb 15                	jmp    c001654b <Vm::faultHandler(regs*)+0x4f4>
c0016536:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001653a:	eb 0f                	jmp    c001654b <Vm::faultHandler(regs*)+0x4f4>
c001653c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016540:	eb 09                	jmp    c001654b <Vm::faultHandler(regs*)+0x4f4>
c0016542:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016546:	eb 03                	jmp    c001654b <Vm::faultHandler(regs*)+0x4f4>
c0016548:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001654b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016550:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016553:	74 37                	je     c001658c <Vm::faultHandler(regs*)+0x535>
c0016555:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001655b:	76 2f                	jbe    c001658c <Vm::faultHandler(regs*)+0x535>
c001655d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016561:	50                   	push   eax
c0016562:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016566:	50                   	push   eax
c0016567:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001656b:	50                   	push   eax
c001656c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016570:	50                   	push   eax
c0016571:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016575:	50                   	push   eax
c0016576:	6a 6f                	push   0x6f
c0016578:	6a 6f                	push   0x6f
c001657a:	68 42 10 02 c0       	push   0xc0021042
c001657f:	e8 f2 44 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016584:	83 c4 20             	add    esp,0x20
c0016587:	e9 89 01 00 00       	jmp    c0016715 <Vm::faultHandler(regs*)+0x6be>
c001658c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001658f:	0f b7 c6             	movzx  eax,si
c0016592:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c0016596:	81 e1 00 04 00 00    	and    ecx,0x400
c001659c:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00165a1:	74 1c                	je     c00165bf <Vm::faultHandler(regs*)+0x568>
c00165a3:	52                   	push   edx
c00165a4:	52                   	push   edx
c00165a5:	50                   	push   eax
c00165a6:	57                   	push   edi
c00165a7:	e8 59 fa ff ff       	call   c0016005 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00165ac:	83 c4 10             	add    esp,0x10
c00165af:	89 ea                	mov    edx,ebp
c00165b1:	ef                   	out    dx,eax
c00165b2:	8d 46 04             	lea    eax,[esi+0x4]
c00165b5:	83 ee 04             	sub    esi,0x4
c00165b8:	25 ff ff 00 00       	and    eax,0xffff
c00165bd:	eb 1b                	jmp    c00165da <Vm::faultHandler(regs*)+0x583>
c00165bf:	52                   	push   edx
c00165c0:	52                   	push   edx
c00165c1:	50                   	push   eax
c00165c2:	57                   	push   edi
c00165c3:	e8 2b fa ff ff       	call   c0015ff3 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	89 ea                	mov    edx,ebp
c00165cd:	66 ef                	out    dx,ax
c00165cf:	8d 46 02             	lea    eax,[esi+0x2]
c00165d2:	83 ee 02             	sub    esi,0x2
c00165d5:	25 ff ff 00 00       	and    eax,0xffff
c00165da:	81 e6 ff ff 00 00    	and    esi,0xffff
c00165e0:	85 c9                	test   ecx,ecx
c00165e2:	0f 44 f0             	cmove  esi,eax
c00165e5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00165e8:	e9 cd 00 00 00       	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c00165ed:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165fb:	50                   	push   eax
c00165fc:	e8 96 f5 ff ff       	call   c0015b97 <Vm::inbv(unsigned short)>
c0016601:	0f b6 c0             	movzx  eax,al
c0016604:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016607:	eb 3f                	jmp    c0016648 <Vm::faultHandler(regs*)+0x5f1>
c0016609:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001660e:	74 07                	je     c0016617 <Vm::faultHandler(regs*)+0x5c0>
c0016610:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016614:	ed                   	in     eax,dx
c0016615:	eb 14                	jmp    c001662b <Vm::faultHandler(regs*)+0x5d4>
c0016617:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001661a:	66 31 f6             	xor    si,si
c001661d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016620:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016624:	66 ed                	in     ax,dx
c0016626:	0f b7 c0             	movzx  eax,ax
c0016629:	09 f0                	or     eax,esi
c001662b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001662e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016632:	e9 86 00 00 00       	jmp    c00166bd <Vm::faultHandler(regs*)+0x666>
c0016637:	52                   	push   edx
c0016638:	52                   	push   edx
c0016639:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001663d:	50                   	push   eax
c001663e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016642:	50                   	push   eax
c0016643:	e8 64 f5 ff ff       	call   c0015bac <Vm::outbv(unsigned short, unsigned char)>
c0016648:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001664c:	eb 54                	jmp    c00166a2 <Vm::faultHandler(regs*)+0x64b>
c001664e:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016653:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016656:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001665a:	74 03                	je     c001665f <Vm::faultHandler(regs*)+0x608>
c001665c:	ef                   	out    dx,eax
c001665d:	eb cf                	jmp    c001662e <Vm::faultHandler(regs*)+0x5d7>
c001665f:	66 ef                	out    dx,ax
c0016661:	eb cb                	jmp    c001662e <Vm::faultHandler(regs*)+0x5d7>
c0016663:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016667:	83 ec 0c             	sub    esp,0xc
c001666a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016671:	50                   	push   eax
c0016672:	e8 20 f5 ff ff       	call   c0015b97 <Vm::inbv(unsigned short)>
c0016677:	0f b6 c0             	movzx  eax,al
c001667a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001667d:	eb 20                	jmp    c001669f <Vm::faultHandler(regs*)+0x648>
c001667f:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016684:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016688:	74 03                	je     c001668d <Vm::faultHandler(regs*)+0x636>
c001668a:	ed                   	in     eax,dx
c001668b:	eb 0d                	jmp    c001669a <Vm::faultHandler(regs*)+0x643>
c001668d:	66 ed                	in     ax,dx
c001668f:	0f b7 d0             	movzx  edx,ax
c0016692:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016695:	66 31 c0             	xor    ax,ax
c0016698:	09 d0                	or     eax,edx
c001669a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001669d:	eb 1b                	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c001669f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	eb 16                	jmp    c00166bd <Vm::faultHandler(regs*)+0x666>
c00166a7:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00166ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166af:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00166b3:	74 03                	je     c00166b8 <Vm::faultHandler(regs*)+0x661>
c00166b5:	ef                   	out    dx,eax
c00166b6:	eb 02                	jmp    c00166ba <Vm::faultHandler(regs*)+0x663>
c00166b8:	66 ef                	out    dx,ax
c00166ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166bd:	b0 01                	mov    al,0x1
c00166bf:	eb 56                	jmp    c0016717 <Vm::faultHandler(regs*)+0x6c0>
c00166c1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166c5:	50                   	push   eax
c00166c6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166ca:	50                   	push   eax
c00166cb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166cf:	50                   	push   eax
c00166d0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166d4:	50                   	push   eax
c00166d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166d9:	50                   	push   eax
c00166da:	52                   	push   edx
c00166db:	52                   	push   edx
c00166dc:	68 6f 10 02 c0       	push   0xc002106f
c00166e1:	e8 90 43 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00166e6:	83 c4 20             	add    esp,0x20
c00166e9:	83 ec 0c             	sub    esp,0xc
c00166ec:	6a 60                	push   0x60
c00166ee:	e8 a4 f4 ff ff       	call   c0015b97 <Vm::inbv(unsigned short)>
c00166f3:	83 c4 10             	add    esp,0x10
c00166f6:	3c 1c                	cmp    al,0x1c
c00166f8:	74 04                	je     c00166fe <Vm::faultHandler(regs*)+0x6a7>
c00166fa:	3c 5a                	cmp    al,0x5a
c00166fc:	75 eb                	jne    c00166e9 <Vm::faultHandler(regs*)+0x692>
c00166fe:	3c 1c                	cmp    al,0x1c
c0016700:	74 04                	je     c0016706 <Vm::faultHandler(regs*)+0x6af>
c0016702:	3c 5a                	cmp    al,0x5a
c0016704:	75 0f                	jne    c0016715 <Vm::faultHandler(regs*)+0x6be>
c0016706:	83 ec 0c             	sub    esp,0xc
c0016709:	6a 60                	push   0x60
c001670b:	e8 87 f4 ff ff       	call   c0015b97 <Vm::inbv(unsigned short)>
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	eb e9                	jmp    c00166fe <Vm::faultHandler(regs*)+0x6a7>
c0016715:	31 c0                	xor    eax,eax
c0016717:	83 c4 1c             	add    esp,0x1c
c001671a:	5b                   	pop    ebx
c001671b:	5e                   	pop    esi
c001671c:	5f                   	pop    edi
c001671d:	5d                   	pop    ebp
c001671e:	c3                   	ret    

c001671f <noCopro(unsigned long)>:
c001671f:	c3                   	ret    

c0016720 <nmiHandler(regs*, void*)>:
c0016720:	83 ec 1c             	sub    esp,0x1c
c0016723:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016728:	89 04 24             	mov    DWORD PTR [esp],eax
c001672b:	e8 c8 0b ff ff       	call   c00072f8 <Computer::handleNMI()>
c0016730:	90                   	nop
c0016731:	83 c4 1c             	add    esp,0x1c
c0016734:	c3                   	ret    

c0016735 <doubleFault(regs*, void*)>:
c0016735:	55                   	push   ebp
c0016736:	89 e5                	mov    ebp,esp
c0016738:	83 ec 18             	sub    esp,0x18
c001673b:	c7 04 24 cc 10 02 c0 	mov    DWORD PTR [esp],0xc00210cc
c0016742:	e8 7e a0 ff ff       	call   c00107c5 <KePanic(char const*)>
c0016747:	90                   	nop
c0016748:	c9                   	leave  
c0016749:	c3                   	ret    

c001674a <displayDebugInfo(regs*)>:
c001674a:	83 ec 2c             	sub    esp,0x2c
c001674d:	0f 20 c0             	mov    eax,cr0
c0016750:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016754:	0f 20 d0             	mov    eax,cr2
c0016757:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001675b:	0f 20 d8             	mov    eax,cr3
c001675e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016762:	0f 20 e0             	mov    eax,cr4
c0016765:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001676d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016770:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016774:	c7 04 24 e8 10 02 c0 	mov    DWORD PTR [esp],0xc00210e8
c001677b:	e8 f6 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016784:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016787:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001678b:	c7 04 24 d9 10 02 c0 	mov    DWORD PTR [esp],0xc00210d9
c0016792:	e8 df 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001679b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001679e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167a2:	c7 04 24 e4 10 02 c0 	mov    DWORD PTR [esp],0xc00210e4
c00167a9:	e8 c8 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00167ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b9:	c7 04 24 f3 10 02 c0 	mov    DWORD PTR [esp],0xc00210f3
c00167c0:	e8 b1 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00167c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167c9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00167cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167d0:	c7 04 24 fe 10 02 c0 	mov    DWORD PTR [esp],0xc00210fe
c00167d7:	e8 9a 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00167dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00167e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167e4:	c7 04 24 09 11 02 c0 	mov    DWORD PTR [esp],0xc0021109
c00167eb:	e8 86 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00167f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167f8:	c7 04 24 14 11 02 c0 	mov    DWORD PTR [esp],0xc0021114
c00167ff:	e8 72 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016804:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016809:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001680f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016812:	e8 5c 1f ff ff       	call   c0008773 <setActiveTerminal(VgaText*)>
c0016817:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001681c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016822:	c7 44 24 04 1f 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002111f
c001682a:	89 04 24             	mov    DWORD PTR [esp],eax
c001682d:	e8 86 22 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016832:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016837:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001683d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016841:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016844:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016848:	89 04 24             	mov    DWORD PTR [esp],eax
c001684b:	e8 22 22 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016850:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016855:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001685b:	c7 44 24 04 2d 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002112d
c0016863:	89 04 24             	mov    DWORD PTR [esp],eax
c0016866:	e8 4d 22 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001686b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016870:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016876:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001687b:	8b 12                	mov    edx,DWORD PTR [edx]
c001687d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016880:	83 c2 0c             	add    edx,0xc
c0016883:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016887:	89 04 24             	mov    DWORD PTR [esp],eax
c001688a:	e8 29 22 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001688f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016894:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001689a:	c7 44 24 04 36 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021136
c00168a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00168a5:	e8 0e 22 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c00168aa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168b9:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00168bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00168c3:	e8 aa 21 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c00168c8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d3:	c7 44 24 04 3e 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002113e
c00168db:	89 04 24             	mov    DWORD PTR [esp],eax
c00168de:	e8 d5 21 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c00168e3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168f2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00168f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00168fc:	e8 71 21 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016901:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016906:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690c:	c7 44 24 04 46 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021146
c0016914:	89 04 24             	mov    DWORD PTR [esp],eax
c0016917:	e8 9c 21 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001691c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016921:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001692b:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001692e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016932:	89 04 24             	mov    DWORD PTR [esp],eax
c0016935:	e8 38 21 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c001693a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016945:	c7 44 24 04 4e 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002114e
c001694d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016950:	e8 63 21 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016955:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016960:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016964:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016967:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001696b:	89 04 24             	mov    DWORD PTR [esp],eax
c001696e:	e8 ff 20 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016973:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016978:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001697e:	c7 44 24 04 56 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021156
c0016986:	89 04 24             	mov    DWORD PTR [esp],eax
c0016989:	e8 2a 21 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001698e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016993:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016999:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001699d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00169a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00169a7:	e8 c6 20 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c00169ac:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169b7:	c7 44 24 04 5e 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002115e
c00169bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00169c2:	e8 f1 20 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c00169c7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00169d6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00169d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00169e0:	e8 8d 20 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c00169e5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169f0:	c7 44 24 04 66 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021166
c00169f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00169fb:	e8 b8 20 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016a00:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a13:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a16:	e8 57 20 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016a1b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a26:	c7 44 24 04 6f 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002116f
c0016a2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a31:	e8 82 20 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016a36:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a49:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a4c:	e8 21 20 ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016a51:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a5c:	c7 44 24 04 77 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021177
c0016a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a67:	e8 4c 20 ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016a6c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a71:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a82:	e8 eb 1f ff ff       	call   c0008a72 <VgaText::putx(unsigned int)>
c0016a87:	fa                   	cli    
c0016a88:	f4                   	hlt    
c0016a89:	eb fe                	jmp    c0016a89 <displayDebugInfo(regs*)+0x33f>

c0016a8b <HalSystemIdle()>:
c0016a8b:	56                   	push   esi
c0016a8c:	53                   	push   ebx
c0016a8d:	83 ec 24             	sub    esp,0x24
c0016a90:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a9b:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0016aa2:	24 04                	and    al,0x4
c0016aa4:	0f 95 c0             	setne  al
c0016aa7:	84 c0                	test   al,al
c0016aa9:	74 53                	je     c0016afe <HalSystemIdle()+0x73>
c0016aab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ab0:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016abb:	e8 00 06 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0016ac0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ac4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016ac8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016acd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ad1:	83 e2 02             	and    edx,0x2
c0016ad4:	89 d3                	mov    ebx,edx
c0016ad6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ada:	83 e2 00             	and    edx,0x0
c0016add:	89 d6                	mov    esi,edx
c0016adf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016ae3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016ae7:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016aef:	89 04 24             	mov    DWORD PTR [esp],eax
c0016af2:	e8 f1 05 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016af7:	e8 98 96 fe ff       	call   c0000194 <doTPAUSE>
c0016afc:	eb 01                	jmp    c0016aff <HalSystemIdle()+0x74>
c0016afe:	f4                   	hlt    
c0016aff:	90                   	nop
c0016b00:	83 c4 24             	add    esp,0x24
c0016b03:	5b                   	pop    ebx
c0016b04:	5e                   	pop    esi
c0016b05:	c3                   	ret    

c0016b06 <displayProgramFault(char const*)>:
c0016b06:	83 ec 1c             	sub    esp,0x1c
c0016b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b10:	e8 61 3f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016b15:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b25:	85 c0                	test   eax,eax
c0016b27:	74 30                	je     c0016b59 <displayProgramFault(char const*)+0x53>
c0016b29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b39:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c0016b41:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0016b49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b51:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b54:	e8 d1 1f ff ff       	call   c0008b2a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016b59:	90                   	nop
c0016b5a:	83 c4 1c             	add    esp,0x1c
c0016b5d:	c3                   	ret    

c0016b5e <gpFault(regs*, void*)>:
c0016b5e:	83 ec 2c             	sub    esp,0x2c
c0016b61:	c7 05 10 82 02 c0 57 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016057
c0016b6b:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016b70:	85 c0                	test   eax,eax
c0016b72:	74 19                	je     c0016b8d <gpFault(regs*, void*)+0x2f>
c0016b74:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016b79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b7d:	89 14 24             	mov    DWORD PTR [esp],edx
c0016b80:	ff d0                	call   eax
c0016b82:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016b86:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016b8b:	75 26                	jne    c0016bb3 <gpFault(regs*, void*)+0x55>
c0016b8d:	c7 04 24 7f 11 02 c0 	mov    DWORD PTR [esp],0xc002117f
c0016b94:	e8 6d ff ff ff       	call   c0016b06 <displayProgramFault(char const*)>
c0016b99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ba0:	e8 a5 fb ff ff       	call   c001674a <displayDebugInfo(regs*)>
c0016ba5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016bac:	e8 ab ee ff ff       	call   c0015a5c <Thr::terminateFromIRQ(int)>
c0016bb1:	eb 01                	jmp    c0016bb4 <gpFault(regs*, void*)+0x56>
c0016bb3:	90                   	nop
c0016bb4:	83 c4 2c             	add    esp,0x2c
c0016bb7:	c3                   	ret    

c0016bb8 <pgFault(regs*, void*)>:
c0016bb8:	83 ec 2c             	sub    esp,0x2c
c0016bbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bbf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016bc2:	0f 20 d0             	mov    eax,cr2
c0016bc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bcd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016bd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bd5:	c7 04 24 5c 12 02 c0 	mov    DWORD PTR [esp],0xc002125c
c0016bdc:	e8 95 3e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016be1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0016be8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016beb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016bf1:	0f 20 d2             	mov    edx,cr2
c0016bf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bfc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c03:	e8 c2 39 ff ff       	call   c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c08:	84 c0                	test   al,al
c0016c0a:	75 26                	jne    c0016c32 <pgFault(regs*, void*)+0x7a>
c0016c0c:	c7 04 24 98 11 02 c0 	mov    DWORD PTR [esp],0xc0021198
c0016c13:	e8 ee fe ff ff       	call   c0016b06 <displayProgramFault(char const*)>
c0016c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c1f:	e8 26 fb ff ff       	call   c001674a <displayDebugInfo(regs*)>
c0016c24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c2b:	e8 2c ee ff ff       	call   c0015a5c <Thr::terminateFromIRQ(int)>
c0016c30:	eb 01                	jmp    c0016c33 <pgFault(regs*, void*)+0x7b>
c0016c32:	90                   	nop
c0016c33:	83 c4 2c             	add    esp,0x2c
c0016c36:	c3                   	ret    

c0016c37 <otherISRHandler(regs*, void*)>:
c0016c37:	83 ec 1c             	sub    esp,0x1c
c0016c3a:	c7 04 24 84 12 02 c0 	mov    DWORD PTR [esp],0xc0021284
c0016c41:	e8 c0 fe ff ff       	call   c0016b06 <displayProgramFault(char const*)>
c0016c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c4d:	e8 f8 fa ff ff       	call   c001674a <displayDebugInfo(regs*)>
c0016c52:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c59:	e8 fe ed ff ff       	call   c0015a5c <Thr::terminateFromIRQ(int)>
c0016c5e:	90                   	nop
c0016c5f:	83 c4 1c             	add    esp,0x1c
c0016c62:	c3                   	ret    

c0016c63 <opcodeFault(regs*, void*)>:
c0016c63:	55                   	push   ebp
c0016c64:	89 e5                	mov    ebp,esp
c0016c66:	83 ec 18             	sub    esp,0x18
c0016c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c73:	c7 04 24 a3 11 02 c0 	mov    DWORD PTR [esp],0xc00211a3
c0016c7a:	e8 f7 3d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016c7f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016c84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c8a:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c0016c91:	84 c0                	test   al,al
c0016c93:	74 1d                	je     c0016cb2 <opcodeFault(regs*, void*)+0x4f>
c0016c95:	c7 04 24 ac 12 02 c0 	mov    DWORD PTR [esp],0xc00212ac
c0016c9c:	e8 d5 3d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016ca4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ca7:	8d 50 19             	lea    edx,[eax+0x19]
c0016caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016cb0:	eb 23                	jmp    c0016cd5 <opcodeFault(regs*, void*)+0x72>
c0016cb2:	c7 04 24 b1 11 02 c0 	mov    DWORD PTR [esp],0xc00211b1
c0016cb9:	e8 48 fe ff ff       	call   c0016b06 <displayProgramFault(char const*)>
c0016cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cc4:	e8 81 fa ff ff       	call   c001674a <displayDebugInfo(regs*)>
c0016cc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016cd0:	e8 87 ed ff ff       	call   c0015a5c <Thr::terminateFromIRQ(int)>
c0016cd5:	c9                   	leave  
c0016cd6:	c3                   	ret    

c0016cd7 <i386SaveCoprocessor(void*)>:
c0016cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cdb:	83 c0 3f             	add    eax,0x3f
c0016cde:	83 e0 c0             	and    eax,0xffffffc0
c0016ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016ce5:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016ceb <i386LoadCoprocessor(void*)>:
c0016ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cef:	83 c0 3f             	add    eax,0x3f
c0016cf2:	83 e0 c0             	and    eax,0xffffffc0
c0016cf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cf9:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016cff <x87EmulHandler(regs*, void*)>:
c0016cff:	53                   	push   ebx
c0016d00:	83 ec 08             	sub    esp,0x8
c0016d03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d08:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016d0c:	74 10                	je     c0016d1e <x87EmulHandler(regs*, void*)+0x1f>
c0016d0e:	83 ec 0c             	sub    esp,0xc
c0016d11:	68 be 11 02 c0       	push   0xc00211be
c0016d16:	e8 aa 9a ff ff       	call   c00107c5 <KePanic(char const*)>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	0f 20 c0             	mov    eax,cr0
c0016d21:	a8 08                	test   al,0x8
c0016d23:	74 59                	je     c0016d7e <x87EmulHandler(regs*, void*)+0x7f>
c0016d25:	0f 06                	clts   
c0016d27:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016d2c:	85 c0                	test   eax,eax
c0016d2e:	74 0e                	je     c0016d3e <x87EmulHandler(regs*, void*)+0x3f>
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016d36:	e8 9c ff ff ff       	call   c0016cd7 <i386SaveCoprocessor(void*)>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016d44:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016d48:	75 12                	jne    c0016d5c <x87EmulHandler(regs*, void*)+0x5d>
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	68 40 02 00 00       	push   0x240
c0016d52:	e8 af 0d ff ff       	call   c0007b06 <malloc>
c0016d57:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016d5a:	eb 10                	jmp    c0016d6c <x87EmulHandler(regs*, void*)+0x6d>
c0016d5c:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016d61:	83 ec 0c             	sub    esp,0xc
c0016d64:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016d67:	e8 7f ff ff ff       	call   c0016ceb <i386LoadCoprocessor(void*)>
c0016d6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016d79:	83 c4 08             	add    esp,0x8
c0016d7c:	5b                   	pop    ebx
c0016d7d:	c3                   	ret    
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	68 d2 11 02 c0       	push   0xc00211d2
c0016d86:	e8 eb 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016d8b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016d93:	83 c4 18             	add    esp,0x18
c0016d96:	5b                   	pop    ebx
c0016d97:	e9 c0 ec ff ff       	jmp    c0015a5c <Thr::terminateFromIRQ(int)>

c0016d9c <HalInitialiseCoprocessor()>:
c0016d9c:	83 ec 10             	sub    esp,0x10
c0016d9f:	6a 00                	push   0x0
c0016da1:	68 ff 6c 01 c0       	push   0xc0016cff
c0016da6:	6a 07                	push   0x7
c0016da8:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016db2:	e8 04 56 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016db7:	e8 d4 6e 00 00       	call   c001dc90 <avxDetect>
c0016dbc:	83 c4 10             	add    esp,0x10
c0016dbf:	85 c0                	test   eax,eax
c0016dc1:	74 1c                	je     c0016ddf <HalInitialiseCoprocessor()+0x43>
c0016dc3:	c7 05 0c 82 02 c0 ba dc 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dcba
c0016dcd:	c7 05 08 82 02 c0 cb dc 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dccb
c0016dd7:	83 c4 0c             	add    esp,0xc
c0016dda:	e9 fd 6e 00 00       	jmp    c001dcdc <avxInit>
c0016ddf:	e8 3c 72 00 00       	call   c001e020 <absolutelyNoChanceInHell>
c0016de4:	85 c0                	test   eax,eax
c0016de6:	74 1c                	je     c0016e04 <HalInitialiseCoprocessor()+0x68>
c0016de8:	c7 05 0c 82 02 c0 38 e0 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e038
c0016df2:	c7 05 08 82 02 c0 40 e0 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e040
c0016dfc:	83 c4 0c             	add    esp,0xc
c0016dff:	e9 44 72 00 00       	jmp    c001e048 <sseInit>
c0016e04:	e8 5d 72 00 00       	call   c001e066 <x87Detect>
c0016e09:	85 c0                	test   eax,eax
c0016e0b:	74 1c                	je     c0016e29 <HalInitialiseCoprocessor()+0x8d>
c0016e0d:	c7 05 0c 82 02 c0 81 e0 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e081
c0016e17:	c7 05 08 82 02 c0 88 e0 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e088
c0016e21:	83 c4 0c             	add    esp,0xc
c0016e24:	e9 66 72 00 00       	jmp    c001e08f <x87Init>
c0016e29:	c7 05 0c 82 02 c0 1f 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001671f
c0016e33:	c7 05 08 82 02 c0 1f 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001671f
c0016e3d:	0f 20 c0             	mov    eax,cr0
c0016e40:	83 c8 04             	or     eax,0x4
c0016e43:	0f 22 c0             	mov    cr0,eax
c0016e46:	83 c4 0c             	add    esp,0xc
c0016e49:	c3                   	ret    

c0016e4a <HalPanic(char const*)>:
c0016e4a:	53                   	push   ebx
c0016e4b:	83 ec 10             	sub    esp,0x10
c0016e4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016e52:	fa                   	cli    
c0016e53:	53                   	push   ebx
c0016e54:	68 e8 11 02 c0       	push   0xc00211e8
c0016e59:	e8 18 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016e5e:	83 c4 0c             	add    esp,0xc
c0016e61:	6a 01                	push   0x1
c0016e63:	6a 0f                	push   0xf
c0016e65:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e6b:	e8 5e 17 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e70:	58                   	pop    eax
c0016e71:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e77:	e8 42 19 ff ff       	call   c00087be <VgaText::clearScreen()>
c0016e7c:	5a                   	pop    edx
c0016e7d:	59                   	pop    ecx
c0016e7e:	68 44 fa 01 c0       	push   0xc001fa44
c0016e83:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e89:	e8 78 17 ff ff       	call   c0008606 <VgaText::setTitle(char*)>
c0016e8e:	83 c4 0c             	add    esp,0xc
c0016e91:	6a 01                	push   0x1
c0016e93:	6a 0f                	push   0xf
c0016e95:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e9b:	e8 2e 17 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ea0:	58                   	pop    eax
c0016ea1:	5a                   	pop    edx
c0016ea2:	68 01 12 02 c0       	push   0xc0021201
c0016ea7:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ead:	e8 06 1c ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016eb2:	83 c4 0c             	add    esp,0xc
c0016eb5:	6a 0f                	push   0xf
c0016eb7:	6a 01                	push   0x1
c0016eb9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ebf:	e8 0a 17 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ec4:	59                   	pop    ecx
c0016ec5:	58                   	pop    eax
c0016ec6:	68 0a 12 02 c0       	push   0xc002120a
c0016ecb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ed1:	e8 e2 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016ed6:	83 c4 0c             	add    esp,0xc
c0016ed9:	6a 01                	push   0x1
c0016edb:	6a 0f                	push   0xf
c0016edd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ee3:	e8 e6 16 ff ff       	call   c00085ce <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ee8:	58                   	pop    eax
c0016ee9:	5a                   	pop    edx
c0016eea:	68 4e 12 02 c0       	push   0xc002124e
c0016eef:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ef5:	e8 be 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016efa:	59                   	pop    ecx
c0016efb:	58                   	pop    eax
c0016efc:	68 17 12 02 c0       	push   0xc0021217
c0016f01:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f07:	e8 ac 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016f0c:	58                   	pop    eax
c0016f0d:	5a                   	pop    edx
c0016f0e:	68 51 12 02 c0       	push   0xc0021251
c0016f13:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f19:	e8 9a 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016f1e:	59                   	pop    ecx
c0016f1f:	58                   	pop    eax
c0016f20:	53                   	push   ebx
c0016f21:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f27:	e8 8c 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016f2c:	58                   	pop    eax
c0016f2d:	5a                   	pop    edx
c0016f2e:	68 4e 12 02 c0       	push   0xc002124e
c0016f33:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f39:	e8 7a 1b ff ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0016f3e:	83 c4 10             	add    esp,0x10
c0016f41:	eb fe                	jmp    c0016f41 <HalPanic(char const*)+0xf7>

c0016f43 <HalQueryPerformanceCounter()>:
c0016f43:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f48:	31 d2                	xor    edx,edx
c0016f4a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016f50:	31 c0                	xor    eax,eax
c0016f52:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016f59:	74 02                	je     c0016f5d <HalQueryPerformanceCounter()+0x1a>
c0016f5b:	0f 31                	rdtsc  
c0016f5d:	c3                   	ret    

c0016f5e <HalInitialise()>:
c0016f5e:	53                   	push   ebx
c0016f5f:	83 ec 08             	sub    esp,0x8
c0016f62:	e8 7f 56 ff ff       	call   c000c5e6 <setupINTS()>
c0016f67:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016f6c:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0016f73:	75 07                	jne    c0016f7c <HalInitialise()+0x1e>
c0016f75:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016f7c:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016f83:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0016f8a:	e8 a9 02 00 00       	call   c0017238 <picOpen()>
c0016f8f:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0016f96:	74 0a                	je     c0016fa2 <HalInitialise()+0x44>
c0016f98:	e8 df 01 00 00       	call   c001717c <picDisable()>
c0016f9d:	e8 47 66 00 00       	call   c001d5e9 <apicOpen()>
c0016fa2:	50                   	push   eax
c0016fa3:	bb 0f 00 00 00       	mov    ebx,0xf
c0016fa8:	6a 00                	push   0x0
c0016faa:	68 37 6c 01 c0       	push   0xc0016c37
c0016faf:	6a 00                	push   0x0
c0016fb1:	e8 05 54 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fb6:	83 c4 0c             	add    esp,0xc
c0016fb9:	6a 00                	push   0x0
c0016fbb:	68 37 6c 01 c0       	push   0xc0016c37
c0016fc0:	6a 01                	push   0x1
c0016fc2:	e8 f4 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fc7:	83 c4 0c             	add    esp,0xc
c0016fca:	6a 00                	push   0x0
c0016fcc:	68 20 67 01 c0       	push   0xc0016720
c0016fd1:	6a 02                	push   0x2
c0016fd3:	e8 e3 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fd8:	83 c4 0c             	add    esp,0xc
c0016fdb:	6a 00                	push   0x0
c0016fdd:	68 37 6c 01 c0       	push   0xc0016c37
c0016fe2:	6a 03                	push   0x3
c0016fe4:	e8 d2 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fe9:	83 c4 0c             	add    esp,0xc
c0016fec:	6a 00                	push   0x0
c0016fee:	68 37 6c 01 c0       	push   0xc0016c37
c0016ff3:	6a 04                	push   0x4
c0016ff5:	e8 c1 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ffa:	83 c4 0c             	add    esp,0xc
c0016ffd:	6a 00                	push   0x0
c0016fff:	68 37 6c 01 c0       	push   0xc0016c37
c0017004:	6a 05                	push   0x5
c0017006:	e8 b0 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001700b:	83 c4 0c             	add    esp,0xc
c001700e:	6a 00                	push   0x0
c0017010:	68 63 6c 01 c0       	push   0xc0016c63
c0017015:	6a 06                	push   0x6
c0017017:	e8 9f 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001701c:	83 c4 0c             	add    esp,0xc
c001701f:	6a 00                	push   0x0
c0017021:	68 35 67 01 c0       	push   0xc0016735
c0017026:	6a 08                	push   0x8
c0017028:	e8 8e 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001702d:	83 c4 0c             	add    esp,0xc
c0017030:	6a 00                	push   0x0
c0017032:	68 37 6c 01 c0       	push   0xc0016c37
c0017037:	6a 09                	push   0x9
c0017039:	e8 7d 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001703e:	83 c4 0c             	add    esp,0xc
c0017041:	6a 00                	push   0x0
c0017043:	68 37 6c 01 c0       	push   0xc0016c37
c0017048:	6a 0a                	push   0xa
c001704a:	e8 6c 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001704f:	83 c4 0c             	add    esp,0xc
c0017052:	6a 00                	push   0x0
c0017054:	68 37 6c 01 c0       	push   0xc0016c37
c0017059:	6a 0b                	push   0xb
c001705b:	e8 5b 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017060:	83 c4 0c             	add    esp,0xc
c0017063:	6a 00                	push   0x0
c0017065:	68 5e 6b 01 c0       	push   0xc0016b5e
c001706a:	6a 0d                	push   0xd
c001706c:	e8 4a 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017071:	83 c4 0c             	add    esp,0xc
c0017074:	6a 00                	push   0x0
c0017076:	68 b8 6b 01 c0       	push   0xc0016bb8
c001707b:	6a 0e                	push   0xe
c001707d:	e8 39 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	50                   	push   eax
c0017086:	6a 00                	push   0x0
c0017088:	68 37 6c 01 c0       	push   0xc0016c37
c001708d:	53                   	push   ebx
c001708e:	43                   	inc    ebx
c001708f:	e8 27 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017094:	83 c4 10             	add    esp,0x10
c0017097:	83 fb 1e             	cmp    ebx,0x1e
c001709a:	75 e9                	jne    c0017085 <HalInitialise()+0x127>
c001709c:	50                   	push   eax
c001709d:	6a 00                	push   0x0
c001709f:	68 bb 1b 01 c0       	push   0xc0011bbb
c00170a4:	6a 60                	push   0x60
c00170a6:	e8 10 53 ff ff       	call   c000c3bb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170b0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00170ba:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00170c1:	e8 40 0a ff ff       	call   c0007b06 <malloc>
c00170c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00170c9:	89 c3                	mov    ebx,eax
c00170cb:	e8 5c 09 00 00       	call   c0017a2c <RTC::RTC()>
c00170d0:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00170da:	5a                   	pop    edx
c00170db:	59                   	pop    ecx
c00170dc:	53                   	push   ebx
c00170dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00170e3:	e8 ba 4d ff ff       	call   c000bea2 <Device::addChild(Device*)>
c00170e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00170ea:	6a 00                	push   0x0
c00170ec:	6a 00                	push   0x0
c00170ee:	6a 00                	push   0x0
c00170f0:	53                   	push   ebx
c00170f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00170f4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00170f9:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00170ff:	83 c4 28             	add    esp,0x28
c0017102:	5b                   	pop    ebx
c0017103:	c3                   	ret    

c0017104 <HalMakeBeep(int)>:
c0017104:	53                   	push   ebx
c0017105:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017109:	85 db                	test   ebx,ebx
c001710b:	75 06                	jne    c0017113 <HalMakeBeep(int)+0xf>
c001710d:	e4 61                	in     al,0x61
c001710f:	24 fc                	and    al,0xfc
c0017111:	eb 26                	jmp    c0017139 <HalMakeBeep(int)+0x35>
c0017113:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017118:	99                   	cdq    
c0017119:	f7 fb                	idiv   ebx
c001711b:	89 c1                	mov    ecx,eax
c001711d:	b0 b6                	mov    al,0xb6
c001711f:	e6 43                	out    0x43,al
c0017121:	88 c8                	mov    al,cl
c0017123:	e6 42                	out    0x42,al
c0017125:	89 c8                	mov    eax,ecx
c0017127:	c1 e8 08             	shr    eax,0x8
c001712a:	e6 42                	out    0x42,al
c001712c:	e4 61                	in     al,0x61
c001712e:	88 c2                	mov    dl,al
c0017130:	80 ca 03             	or     dl,0x3
c0017133:	38 c2                	cmp    dl,al
c0017135:	74 04                	je     c001713b <HalMakeBeep(int)+0x37>
c0017137:	88 d0                	mov    al,dl
c0017139:	e6 61                	out    0x61,al
c001713b:	5b                   	pop    ebx
c001713c:	c3                   	ret    

c001713d <HalGetRand()>:
c001713d:	31 c0                	xor    eax,eax
c001713f:	c3                   	ret    

c0017140 <HalEndOfInterrupt(int)>:
c0017140:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017147:	74 23                	je     c001716c <HalEndOfInterrupt(int)+0x2c>
c0017149:	83 ec 14             	sub    esp,0x14
c001714c:	6a 1b                	push   0x1b
c001714e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017154:	e8 67 ff fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017159:	25 00 f0 ff ff       	and    eax,0xfffff000
c001715e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017168:	83 c4 1c             	add    esp,0x1c
c001716b:	c3                   	ret    
c001716c:	e9 5b 02 00 00       	jmp    c00173cc <picEOI(int)>

c0017171 <HalRestart()>:
c0017171:	c3                   	ret    

c0017172 <HalShutdown()>:
c0017172:	c3                   	ret    

c0017173 <HalSleep()>:
c0017173:	c3                   	ret    

c0017174 <picIoWait()>:
c0017174:	eb 00                	jmp    c0017176 <picIoWait()+0x2>
c0017176:	eb 00                	jmp    c0017178 <picIoWait()+0x4>
c0017178:	90                   	nop
c0017179:	c3                   	ret    
c001717a:	66 90                	xchg   ax,ax

c001717c <picDisable()>:
c001717c:	83 ec 10             	sub    esp,0x10
c001717f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017186:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001718b:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017190:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017195:	ee                   	out    dx,al
c0017196:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001719d:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00171a2:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00171a7:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00171ac:	ee                   	out    dx,al
c00171ad:	90                   	nop
c00171ae:	83 c4 10             	add    esp,0x10
c00171b1:	c3                   	ret    
c00171b2:	66 90                	xchg   ax,ax

c00171b4 <picGetIRQReg(int)>:
c00171b4:	83 ec 10             	sub    esp,0x10
c00171b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171bb:	0f b6 c0             	movzx  eax,al
c00171be:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00171c5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00171c9:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c00171ce:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00171d3:	ee                   	out    dx,al
c00171d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171d8:	0f b6 c0             	movzx  eax,al
c00171db:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00171e2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00171e6:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c00171eb:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00171f0:	ee                   	out    dx,al
c00171f1:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00171f8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00171fd:	89 c2                	mov    edx,eax
c00171ff:	ec                   	in     al,dx
c0017200:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017204:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017209:	0f b6 c0             	movzx  eax,al
c001720c:	c1 e0 08             	shl    eax,0x8
c001720f:	0f bf c8             	movsx  ecx,ax
c0017212:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017219:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001721e:	89 c2                	mov    edx,eax
c0017220:	ec                   	in     al,dx
c0017221:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017225:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001722a:	0f b6 c0             	movzx  eax,al
c001722d:	98                   	cwde   
c001722e:	09 c8                	or     eax,ecx
c0017230:	98                   	cwde   
c0017231:	0f b7 c0             	movzx  eax,ax
c0017234:	83 c4 10             	add    esp,0x10
c0017237:	c3                   	ret    

c0017238 <picOpen()>:
c0017238:	83 ec 50             	sub    esp,0x50
c001723b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017242:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017247:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001724c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017250:	ee                   	out    dx,al
c0017251:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017258:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001725d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017262:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017266:	ee                   	out    dx,al
c0017267:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001726f:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017277:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001727e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017282:	89 c2                	mov    edx,eax
c0017284:	ec                   	in     al,dx
c0017285:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017289:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001728e:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017292:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001729d:	89 c2                	mov    edx,eax
c001729f:	ec                   	in     al,dx
c00172a0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00172a4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00172a9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00172ad:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00172b4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00172b9:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00172be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00172c2:	ee                   	out    dx,al
c00172c3:	e8 ac fe ff ff       	call   c0017174 <picIoWait()>
c00172c8:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00172cf:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00172d4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00172d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00172dd:	ee                   	out    dx,al
c00172de:	e8 91 fe ff ff       	call   c0017174 <picIoWait()>
c00172e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00172e7:	0f b6 c0             	movzx  eax,al
c00172ea:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00172f1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00172f5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00172fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172fe:	ee                   	out    dx,al
c00172ff:	e8 70 fe ff ff       	call   c0017174 <picIoWait()>
c0017304:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017308:	0f b6 c0             	movzx  eax,al
c001730b:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017312:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017316:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c001731b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001731f:	ee                   	out    dx,al
c0017320:	e8 4f fe ff ff       	call   c0017174 <picIoWait()>
c0017325:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001732c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017331:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0017336:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001733a:	ee                   	out    dx,al
c001733b:	e8 34 fe ff ff       	call   c0017174 <picIoWait()>
c0017340:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017347:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001734c:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c0017351:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017355:	ee                   	out    dx,al
c0017356:	e8 19 fe ff ff       	call   c0017174 <picIoWait()>
c001735b:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017362:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017367:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001736c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017370:	ee                   	out    dx,al
c0017371:	e8 fe fd ff ff       	call   c0017174 <picIoWait()>
c0017376:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001737d:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017382:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0017387:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001738b:	ee                   	out    dx,al
c001738c:	e8 e3 fd ff ff       	call   c0017174 <picIoWait()>
c0017391:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017396:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001739d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00173a1:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c00173a6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00173aa:	ee                   	out    dx,al
c00173ab:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00173b0:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00173b7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00173bb:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c00173c0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173c4:	ee                   	out    dx,al
c00173c5:	90                   	nop
c00173c6:	83 c4 50             	add    esp,0x50
c00173c9:	c3                   	ret    
c00173ca:	66 90                	xchg   ax,ax

c00173cc <picEOI(int)>:
c00173cc:	83 ec 14             	sub    esp,0x14
c00173cf:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c00173d4:	75 1e                	jne    c00173f4 <picEOI(int)+0x28>
c00173d6:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00173dd:	e8 d2 fd ff ff       	call   c00171b4 <picGetIRQReg(int)>
c00173e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00173e7:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00173ec:	25 80 00 00 00       	and    eax,0x80
c00173f1:	74 79                	je     c001746c <picEOI(int)+0xa0>
c00173f3:	90                   	nop
c00173f4:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c00173f9:	75 35                	jne    c0017430 <picEOI(int)+0x64>
c00173fb:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017402:	e8 ad fd ff ff       	call   c00171b4 <picGetIRQReg(int)>
c0017407:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001740c:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017411:	85 c0                	test   eax,eax
c0017413:	78 1b                	js     c0017430 <picEOI(int)+0x64>
c0017415:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001741c:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c0017421:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017426:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001742b:	ee                   	out    dx,al
c001742c:	eb 42                	jmp    c0017470 <picEOI(int)+0xa4>
c001742e:	66 90                	xchg   ax,ax
c0017430:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017435:	7e 19                	jle    c0017450 <picEOI(int)+0x84>
c0017437:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001743e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017443:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017448:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001744d:	ee                   	out    dx,al
c001744e:	66 90                	xchg   ax,ax
c0017450:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c0017457:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001745c:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c0017461:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017466:	ee                   	out    dx,al
c0017467:	eb 07                	jmp    c0017470 <picEOI(int)+0xa4>
c0017469:	8d 76 00             	lea    esi,[esi+0x0]
c001746c:	90                   	nop
c001746d:	8d 76 00             	lea    esi,[esi+0x0]
c0017470:	83 c4 14             	add    esp,0x14
c0017473:	c3                   	ret    

c0017474 <RTC::open(int, int, void*)>:
c0017474:	31 c0                	xor    eax,eax
c0017476:	c3                   	ret    
c0017477:	90                   	nop

c0017478 <RTC::close(int, int, void*)>:
c0017478:	31 c0                	xor    eax,eax
c001747a:	c3                   	ret    
c001747b:	90                   	nop

c001747c <RTC::timeInSecondsUTC()>:
c001747c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017480:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017486:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001748c:	c3                   	ret    
c001748d:	90                   	nop

c001748e <RTC::timeInDatetimeUTC()>:
c001748e:	53                   	push   ebx
c001748f:	83 ec 14             	sub    esp,0x14
c0017492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017496:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001749a:	8b 10                	mov    edx,DWORD PTR [eax]
c001749c:	50                   	push   eax
c001749d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174a0:	83 c4 0c             	add    esp,0xc
c00174a3:	52                   	push   edx
c00174a4:	50                   	push   eax
c00174a5:	53                   	push   ebx
c00174a6:	e8 69 47 ff ff       	call   c000bc14 <secondsToDatetime(unsigned long long)>
c00174ab:	89 d8                	mov    eax,ebx
c00174ad:	83 c4 14             	add    esp,0x14
c00174b0:	5b                   	pop    ebx
c00174b1:	c2 04 00             	ret    0x4

c00174b4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00174b4:	56                   	push   esi
c00174b5:	53                   	push   ebx
c00174b6:	83 ec 14             	sub    esp,0x14
c00174b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00174bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174bf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00174c2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00174c6:	52                   	push   edx
c00174c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174cf:	50                   	push   eax
c00174d0:	e8 3f 47 ff ff       	call   c000bc14 <secondsToDatetime(unsigned long long)>
c00174d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00174dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00174e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174e5:	89 f0                	mov    eax,esi
c00174e7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00174eb:	83 c4 20             	add    esp,0x20
c00174ee:	5b                   	pop    ebx
c00174ef:	5e                   	pop    esi
c00174f0:	ff e0                	jmp    eax

c00174f2 <RTC::~RTC()>:
c00174f2:	83 ec 1c             	sub    esp,0x1c
c00174f5:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c00174fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174fe:	89 10                	mov    DWORD PTR [eax],edx
c0017500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017504:	89 04 24             	mov    DWORD PTR [esp],eax
c0017507:	e8 a0 44 ff ff       	call   c000b9ac <Clock::~Clock()>
c001750c:	90                   	nop
c001750d:	83 c4 1c             	add    esp,0x1c
c0017510:	c3                   	ret    
c0017511:	90                   	nop

c0017512 <RTC::~RTC()>:
c0017512:	83 ec 1c             	sub    esp,0x1c
c0017515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017519:	89 04 24             	mov    DWORD PTR [esp],eax
c001751c:	e8 d1 ff ff ff       	call   c00174f2 <RTC::~RTC()>
c0017521:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c0017529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017530:	e8 27 34 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0017535:	83 c4 1c             	add    esp,0x1c
c0017538:	c3                   	ret    
c0017539:	90                   	nop

c001753a <RTC::get_update_in_progress_flag()>:
c001753a:	83 ec 14             	sub    esp,0x14
c001753d:	6a 0a                	push   0xa
c001753f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017545:	e8 50 fc fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001754a:	83 c4 1c             	add    esp,0x1c
c001754d:	c0 e8 07             	shr    al,0x7
c0017550:	c3                   	ret    
c0017551:	90                   	nop

c0017552 <RTC::completeRTCRefresh()>:
c0017552:	57                   	push   edi
c0017553:	56                   	push   esi
c0017554:	53                   	push   ebx
c0017555:	83 ec 20             	sub    esp,0x20
c0017558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001755c:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	53                   	push   ebx
c0017566:	e8 cf ff ff ff       	call   c001753a <RTC::get_update_in_progress_flag()>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	84 c0                	test   al,al
c0017570:	74 0e                	je     c0017580 <RTC::completeRTCRefresh()+0x2e>
c0017572:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c0017578:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001757e:	73 e2                	jae    c0017562 <RTC::completeRTCRefresh()+0x10>
c0017580:	51                   	push   ecx
c0017581:	51                   	push   ecx
c0017582:	6a 00                	push   0x0
c0017584:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001758a:	e8 0b fc fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001758f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017593:	5e                   	pop    esi
c0017594:	5f                   	pop    edi
c0017595:	6a 02                	push   0x2
c0017597:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001759d:	e8 f8 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175a2:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00175a6:	58                   	pop    eax
c00175a7:	5a                   	pop    edx
c00175a8:	6a 04                	push   0x4
c00175aa:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175b0:	e8 e5 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175b5:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00175b9:	59                   	pop    ecx
c00175ba:	5e                   	pop    esi
c00175bb:	6a 07                	push   0x7
c00175bd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175c3:	e8 d2 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175c8:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00175cc:	5f                   	pop    edi
c00175cd:	58                   	pop    eax
c00175ce:	6a 08                	push   0x8
c00175d0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175d6:	e8 bf fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175db:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00175df:	58                   	pop    eax
c00175e0:	5a                   	pop    edx
c00175e1:	6a 09                	push   0x9
c00175e3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175e9:	e8 ac fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175ee:	83 c4 10             	add    esp,0x10
c00175f1:	0f b6 f0             	movzx  esi,al
c00175f4:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	53                   	push   ebx
c00175fe:	e8 37 ff ff ff       	call   c001753a <RTC::get_update_in_progress_flag()>
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	84 c0                	test   al,al
c0017608:	74 0e                	je     c0017618 <RTC::completeRTCRefresh()+0xc6>
c001760a:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017610:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017616:	73 e2                	jae    c00175fa <RTC::completeRTCRefresh()+0xa8>
c0017618:	57                   	push   edi
c0017619:	57                   	push   edi
c001761a:	6a 00                	push   0x0
c001761c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017622:	e8 73 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017627:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001762b:	58                   	pop    eax
c001762c:	5a                   	pop    edx
c001762d:	6a 02                	push   0x2
c001762f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017635:	e8 60 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001763a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001763e:	59                   	pop    ecx
c001763f:	5f                   	pop    edi
c0017640:	6a 04                	push   0x4
c0017642:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017648:	e8 4d fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001764d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017651:	58                   	pop    eax
c0017652:	5a                   	pop    edx
c0017653:	6a 07                	push   0x7
c0017655:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001765b:	e8 3a fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017660:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0017664:	59                   	pop    ecx
c0017665:	5f                   	pop    edi
c0017666:	6a 08                	push   0x8
c0017668:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001766e:	e8 27 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017673:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017677:	58                   	pop    eax
c0017678:	5a                   	pop    edx
c0017679:	6a 09                	push   0x9
c001767b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017681:	e8 14 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017686:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	0f b6 f8             	movzx  edi,al
c0017690:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0017694:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017698:	74 2f                	je     c00176c9 <RTC::completeRTCRefresh()+0x177>
c001769a:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001769e:	89 fe                	mov    esi,edi
c00176a0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176a4:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00176a8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00176ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176b0:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00176b4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00176b8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00176bc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00176c0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00176c4:	e9 2b ff ff ff       	jmp    c00175f4 <RTC::completeRTCRefresh()+0xa2>
c00176c9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00176cd:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c00176d1:	75 c7                	jne    c001769a <RTC::completeRTCRefresh()+0x148>
c00176d3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00176d7:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c00176db:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c00176df:	0f 94 c2             	sete   dl
c00176e2:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00176e6:	0f 94 c1             	sete   cl
c00176e9:	20 d1                	and    cl,dl
c00176eb:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c00176ef:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c00176f3:	0f 94 c2             	sete   dl
c00176f6:	84 d1                	test   cl,dl
c00176f8:	74 a0                	je     c001769a <RTC::completeRTCRefresh()+0x148>
c00176fa:	39 fe                	cmp    esi,edi
c00176fc:	75 9c                	jne    c001769a <RTC::completeRTCRefresh()+0x148>
c00176fe:	56                   	push   esi
c00176ff:	56                   	push   esi
c0017700:	6a 0b                	push   0xb
c0017702:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017708:	e8 8d fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001770d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017711:	24 04                	and    al,0x4
c0017713:	83 c4 10             	add    esp,0x10
c0017716:	84 c0                	test   al,al
c0017718:	0f 85 8c 00 00 00    	jne    c00177aa <RTC::completeRTCRefresh()+0x258>
c001771e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017722:	c1 ef 04             	shr    edi,0x4
c0017725:	b1 0a                	mov    cl,0xa
c0017727:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001772b:	6b ff 0a             	imul   edi,edi,0xa
c001772e:	c0 e8 04             	shr    al,0x4
c0017731:	f6 e1                	mul    cl
c0017733:	80 e2 0f             	and    dl,0xf
c0017736:	00 c2                	add    dl,al
c0017738:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001773c:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0017740:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017744:	c0 e8 04             	shr    al,0x4
c0017747:	f6 e1                	mul    cl
c0017749:	80 e2 0f             	and    dl,0xf
c001774c:	00 c2                	add    dl,al
c001774e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017752:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0017756:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001775a:	c0 e8 04             	shr    al,0x4
c001775d:	24 07                	and    al,0x7
c001775f:	80 e2 0f             	and    dl,0xf
c0017762:	f6 e1                	mul    cl
c0017764:	00 d0                	add    al,dl
c0017766:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001776a:	80 e2 80             	and    dl,0x80
c001776d:	08 d0                	or     al,dl
c001776f:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c0017773:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017777:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001777b:	80 e2 0f             	and    dl,0xf
c001777e:	c0 e8 04             	shr    al,0x4
c0017781:	f6 e1                	mul    cl
c0017783:	00 c2                	add    dl,al
c0017785:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0017789:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001778d:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017791:	c0 e8 04             	shr    al,0x4
c0017794:	f6 e1                	mul    cl
c0017796:	80 e2 0f             	and    dl,0xf
c0017799:	00 c2                	add    dl,al
c001779b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001779f:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00177a3:	24 0f                	and    al,0xf
c00177a5:	0f b6 c0             	movzx  eax,al
c00177a8:	01 c7                	add    edi,eax
c00177aa:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00177ae:	24 02                	and    al,0x2
c00177b0:	75 20                	jne    c00177d2 <RTC::completeRTCRefresh()+0x280>
c00177b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00177b7:	79 19                	jns    c00177d2 <RTC::completeRTCRefresh()+0x280>
c00177b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177bd:	b9 18 00 00 00       	mov    ecx,0x18
c00177c2:	80 e2 7f             	and    dl,0x7f
c00177c5:	0f b6 d2             	movzx  edx,dl
c00177c8:	8d 42 0c             	lea    eax,[edx+0xc]
c00177cb:	99                   	cdq    
c00177cc:	f7 f9                	idiv   ecx
c00177ce:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00177d2:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c00177d8:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c00177de:	77 06                	ja     c00177e6 <RTC::completeRTCRefresh()+0x294>
c00177e0:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c00177e6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00177eb:	c1 e6 10             	shl    esi,0x10
c00177ee:	31 d2                	xor    edx,edx
c00177f0:	89 d7                	mov    edi,edx
c00177f2:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00177f8:	c1 e0 10             	shl    eax,0x10
c00177fb:	89 c1                	mov    ecx,eax
c00177fd:	31 c0                	xor    eax,eax
c00177ff:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017803:	09 cf                	or     edi,ecx
c0017805:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c0017809:	89 fa                	mov    edx,edi
c001780b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001780f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017813:	0f b7 c8             	movzx  ecx,ax
c0017816:	09 f1                	or     ecx,esi
c0017818:	89 c8                	mov    eax,ecx
c001781a:	51                   	push   ecx
c001781b:	51                   	push   ecx
c001781c:	52                   	push   edx
c001781d:	50                   	push   eax
c001781e:	e8 72 42 ff ff       	call   c000ba95 <datetimeToSeconds(datetime_t)>
c0017823:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0017829:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001782f:	83 c4 30             	add    esp,0x30
c0017832:	5b                   	pop    ebx
c0017833:	5e                   	pop    esi
c0017834:	5f                   	pop    edi
c0017835:	c3                   	ret    

c0017836 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017836:	53                   	push   ebx
c0017837:	83 ec 1c             	sub    esp,0x1c
c001783a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017842:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017846:	6a 00                	push   0x0
c0017848:	6a 00                	push   0x0
c001784a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017850:	e8 83 fa fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017855:	83 c4 0c             	add    esp,0xc
c0017858:	6a 00                	push   0x0
c001785a:	6a 02                	push   0x2
c001785c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017862:	e8 71 fa fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017867:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001786b:	89 d8                	mov    eax,ebx
c001786d:	c1 e8 10             	shr    eax,0x10
c0017870:	b9 64 00 00 00       	mov    ecx,0x64
c0017875:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017879:	0f b6 c7             	movzx  eax,bh
c001787c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017880:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017884:	0f b6 c6             	movzx  eax,dh
c0017887:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001788b:	89 d0                	mov    eax,edx
c001788d:	31 d2                	xor    edx,edx
c001788f:	c1 e8 10             	shr    eax,0x10
c0017892:	f7 f1                	div    ecx
c0017894:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c0017898:	59                   	pop    ecx
c0017899:	58                   	pop    eax
c001789a:	6a 0b                	push   0xb
c001789c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178a2:	e8 f3 f8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00178a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00178ab:	24 04                	and    al,0x4
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	84 c0                	test   al,al
c00178b2:	75 78                	jne    c001792c <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c00178b4:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00178b9:	b1 0a                	mov    cl,0xa
c00178bb:	f6 f1                	div    cl
c00178bd:	88 c2                	mov    dl,al
c00178bf:	0f b6 c4             	movzx  eax,ah
c00178c2:	c0 e2 04             	shl    dl,0x4
c00178c5:	08 c2                	or     dl,al
c00178c7:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00178cb:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c00178cf:	f6 f1                	div    cl
c00178d1:	88 c2                	mov    dl,al
c00178d3:	0f b6 c4             	movzx  eax,ah
c00178d6:	c0 e2 04             	shl    dl,0x4
c00178d9:	08 c2                	or     dl,al
c00178db:	0f b6 c3             	movzx  eax,bl
c00178de:	f6 f1                	div    cl
c00178e0:	88 14 24             	mov    BYTE PTR [esp],dl
c00178e3:	88 c3                	mov    bl,al
c00178e5:	0f b6 c4             	movzx  eax,ah
c00178e8:	c0 e3 04             	shl    bl,0x4
c00178eb:	08 c3                	or     bl,al
c00178ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00178f2:	f6 f1                	div    cl
c00178f4:	88 c2                	mov    dl,al
c00178f6:	0f b6 c4             	movzx  eax,ah
c00178f9:	c0 e2 04             	shl    dl,0x4
c00178fc:	08 c2                	or     dl,al
c00178fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017903:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017907:	f6 f1                	div    cl
c0017909:	88 c2                	mov    dl,al
c001790b:	0f b6 c4             	movzx  eax,ah
c001790e:	c0 e2 04             	shl    dl,0x4
c0017911:	08 c2                	or     dl,al
c0017913:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0017918:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001791c:	f6 f1                	div    cl
c001791e:	88 c2                	mov    dl,al
c0017920:	0f b6 c4             	movzx  eax,ah
c0017923:	c0 e2 04             	shl    dl,0x4
c0017926:	08 c2                	or     dl,al
c0017928:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c001792c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017930:	24 02                	and    al,0x2
c0017932:	75 17                	jne    c001794b <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017934:	80 fb 0b             	cmp    bl,0xb
c0017937:	76 0c                	jbe    c0017945 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017939:	80 eb 0c             	sub    bl,0xc
c001793c:	75 02                	jne    c0017940 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001793e:	b3 0c                	mov    bl,0xc
c0017940:	80 cb 80             	or     bl,0x80
c0017943:	eb 06                	jmp    c001794b <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017945:	84 db                	test   bl,bl
c0017947:	75 02                	jne    c001794b <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017949:	b3 0c                	mov    bl,0xc
c001794b:	50                   	push   eax
c001794c:	0f b6 db             	movzx  ebx,bl
c001794f:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c0017954:	50                   	push   eax
c0017955:	6a 00                	push   0x0
c0017957:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001795d:	e8 76 f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017962:	83 c4 0c             	add    esp,0xc
c0017965:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001796a:	50                   	push   eax
c001796b:	6a 02                	push   0x2
c001796d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017973:	e8 60 f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017978:	83 c4 0c             	add    esp,0xc
c001797b:	53                   	push   ebx
c001797c:	6a 04                	push   0x4
c001797e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017984:	e8 4f f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017989:	83 c4 0c             	add    esp,0xc
c001798c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017991:	50                   	push   eax
c0017992:	6a 07                	push   0x7
c0017994:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001799a:	e8 39 f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001799f:	83 c4 0c             	add    esp,0xc
c00179a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00179a7:	50                   	push   eax
c00179a8:	6a 08                	push   0x8
c00179aa:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179b0:	e8 23 f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179b5:	83 c4 0c             	add    esp,0xc
c00179b8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00179bd:	52                   	push   edx
c00179be:	6a 09                	push   0x9
c00179c0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179c6:	e8 0d f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179cb:	5a                   	pop    edx
c00179cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179d0:	e8 7d fb ff ff       	call   c0017552 <RTC::completeRTCRefresh()>
c00179d5:	83 c4 28             	add    esp,0x28
c00179d8:	b0 01                	mov    al,0x1
c00179da:	5b                   	pop    ebx
c00179db:	c3                   	ret    

c00179dc <rtcIRQHandler(regs*, void*)>:
c00179dc:	53                   	push   ebx
c00179dd:	83 ec 10             	sub    esp,0x10
c00179e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00179e4:	6a 0c                	push   0xc
c00179e6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179ec:	e8 a9 f7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	84 c0                	test   al,al
c00179f6:	79 2f                	jns    c0017a27 <rtcIRQHandler(regs*, void*)+0x4b>
c00179f8:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c00179fe:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a05:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017a0c:	40                   	inc    eax
c0017a0d:	0f b7 c0             	movzx  eax,ax
c0017a10:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c0017a16:	85 c0                	test   eax,eax
c0017a18:	75 0d                	jne    c0017a27 <rtcIRQHandler(regs*, void*)+0x4b>
c0017a1a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017a1e:	83 c4 08             	add    esp,0x8
c0017a21:	5b                   	pop    ebx
c0017a22:	e9 2b fb ff ff       	jmp    c0017552 <RTC::completeRTCRefresh()>
c0017a27:	83 c4 08             	add    esp,0x8
c0017a2a:	5b                   	pop    ebx
c0017a2b:	c3                   	ret    

c0017a2c <RTC::RTC()>:
c0017a2c:	83 ec 3c             	sub    esp,0x3c
c0017a2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a33:	c7 44 24 04 cf 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc00212cf
c0017a3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a3e:	e8 33 3f ff ff       	call   c000b976 <Clock::Clock(char const*)>
c0017a43:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c0017a48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a4c:	89 10                	mov    DWORD PTR [eax],edx
c0017a4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a52:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a56:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017a5a:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017a62:	c7 44 24 08 dc 79 01 c0 	mov    DWORD PTR [esp+0x8],0xc00179dc
c0017a6a:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017a72:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a75:	e8 d6 43 ff ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017a7a:	89 c2                	mov    edx,eax
c0017a7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a80:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017a86:	fa                   	cli    
c0017a87:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017a8c:	40                   	inc    eax
c0017a8d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017a92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017a97:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017a9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017aa2:	e8 f3 f6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017aa7:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017aab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017ab0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0017ab5:	80 ca 10             	or     dl,0x10
c0017ab8:	0f b6 d2             	movzx  edx,dl
c0017abb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017abf:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017aca:	e8 09 f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017acf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad3:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ad6:	e8 77 fa ff ff       	call   c0017552 <RTC::completeRTCRefresh()>
c0017adb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017ae0:	48                   	dec    eax
c0017ae1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017ae6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017aeb:	85 c0                	test   eax,eax
c0017aed:	75 01                	jne    c0017af0 <RTC::RTC()+0xc4>
c0017aef:	fb                   	sti    
c0017af0:	90                   	nop
c0017af1:	83 c4 3c             	add    esp,0x3c
c0017af4:	c3                   	ret    
c0017af5:	66 90                	xchg   ax,ax
c0017af7:	90                   	nop

c0017af8 <HalConsoleScroll(int, int)>:
c0017af8:	83 ec 10             	sub    esp,0x10
c0017afb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b03:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b0b:	90                   	nop
c0017b0c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b11:	0f 8f e1 00 00 00    	jg     c0017bf8 <HalConsoleScroll(int, int)+0x100>
c0017b17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017b1f:	90                   	nop
c0017b20:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017b28:	0f 8f be 00 00 00    	jg     c0017bec <HalConsoleScroll(int, int)+0xf4>
c0017b2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b32:	89 d0                	mov    eax,edx
c0017b34:	c1 e0 02             	shl    eax,0x2
c0017b37:	01 d0                	add    eax,edx
c0017b39:	c1 e0 05             	shl    eax,0x5
c0017b3c:	89 c2                	mov    edx,eax
c0017b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b42:	01 d0                	add    eax,edx
c0017b44:	89 c2                	mov    edx,eax
c0017b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b4a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017b4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b51:	89 d0                	mov    eax,edx
c0017b53:	c1 e0 02             	shl    eax,0x2
c0017b56:	01 d0                	add    eax,edx
c0017b58:	c1 e0 05             	shl    eax,0x5
c0017b5b:	89 c2                	mov    edx,eax
c0017b5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b61:	01 d0                	add    eax,edx
c0017b63:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017b69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b6d:	01 d0                	add    eax,edx
c0017b6f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017b72:	88 10                	mov    BYTE PTR [eax],dl
c0017b74:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b79:	75 65                	jne    c0017be0 <HalConsoleScroll(int, int)+0xe8>
c0017b7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b7f:	83 e0 01             	and    eax,0x1
c0017b82:	74 38                	je     c0017bbc <HalConsoleScroll(int, int)+0xc4>
c0017b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b88:	24 0f                	and    al,0xf
c0017b8a:	88 c2                	mov    dl,al
c0017b8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b90:	c1 e0 04             	shl    eax,0x4
c0017b93:	88 d1                	mov    cl,dl
c0017b95:	08 c1                	or     cl,al
c0017b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b9b:	89 d0                	mov    eax,edx
c0017b9d:	c1 e0 02             	shl    eax,0x2
c0017ba0:	01 d0                	add    eax,edx
c0017ba2:	c1 e0 05             	shl    eax,0x5
c0017ba5:	89 c2                	mov    edx,eax
c0017ba7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bab:	01 d0                	add    eax,edx
c0017bad:	89 c2                	mov    edx,eax
c0017baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bb3:	01 d0                	add    eax,edx
c0017bb5:	88 ca                	mov    dl,cl
c0017bb7:	88 10                	mov    BYTE PTR [eax],dl
c0017bb9:	eb 25                	jmp    c0017be0 <HalConsoleScroll(int, int)+0xe8>
c0017bbb:	90                   	nop
c0017bbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bc0:	89 d0                	mov    eax,edx
c0017bc2:	c1 e0 02             	shl    eax,0x2
c0017bc5:	01 d0                	add    eax,edx
c0017bc7:	c1 e0 05             	shl    eax,0x5
c0017bca:	89 c2                	mov    edx,eax
c0017bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bd0:	01 d0                	add    eax,edx
c0017bd2:	89 c2                	mov    edx,eax
c0017bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bd8:	01 d0                	add    eax,edx
c0017bda:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0017be0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017be4:	e9 37 ff ff ff       	jmp    c0017b20 <HalConsoleScroll(int, int)+0x28>
c0017be9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017bf0:	e9 17 ff ff ff       	jmp    c0017b0c <HalConsoleScroll(int, int)+0x14>
c0017bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0017bf8:	90                   	nop
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	c3                   	ret    
c0017bfd:	8d 76 00             	lea    esi,[esi+0x0]

c0017c00 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c00:	83 ec 14             	sub    esp,0x14
c0017c03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c07:	88 04 24             	mov    BYTE PTR [esp],al
c0017c0a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017c0e:	0f b6 c0             	movzx  eax,al
c0017c11:	0f bf d0             	movsx  edx,ax
c0017c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c18:	83 e0 0f             	and    eax,0xf
c0017c1b:	89 c1                	mov    ecx,eax
c0017c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c21:	c1 e0 04             	shl    eax,0x4
c0017c24:	0f b6 c0             	movzx  eax,al
c0017c27:	09 c8                	or     eax,ecx
c0017c29:	c1 e0 08             	shl    eax,0x8
c0017c2c:	98                   	cwde   
c0017c2d:	09 d0                	or     eax,edx
c0017c2f:	98                   	cwde   
c0017c30:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017c35:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017c3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c41:	89 d0                	mov    eax,edx
c0017c43:	c1 e0 02             	shl    eax,0x2
c0017c46:	01 d0                	add    eax,edx
c0017c48:	c1 e0 04             	shl    eax,0x4
c0017c4b:	89 c2                	mov    edx,eax
c0017c4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c51:	01 d0                	add    eax,edx
c0017c53:	01 c0                	add    eax,eax
c0017c55:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017c59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c5d:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0017c62:	66 89 10             	mov    WORD PTR [eax],dx
c0017c65:	90                   	nop
c0017c66:	83 c4 14             	add    esp,0x14
c0017c69:	c3                   	ret    
c0017c6a:	66 90                	xchg   ax,ax

c0017c6c <HalConsoleCursorUpdate(int, int)>:
c0017c6c:	83 ec 20             	sub    esp,0x20
c0017c6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c73:	0f b7 c0             	movzx  eax,ax
c0017c76:	89 c2                	mov    edx,eax
c0017c78:	c1 e2 02             	shl    edx,0x2
c0017c7b:	01 d0                	add    eax,edx
c0017c7d:	c1 e0 04             	shl    eax,0x4
c0017c80:	0f b7 d0             	movzx  edx,ax
c0017c83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c87:	0f b7 c0             	movzx  eax,ax
c0017c8a:	01 d0                	add    eax,edx
c0017c8c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017c91:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017c98:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017c9d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017ca2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ca6:	ee                   	out    dx,al
c0017ca7:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017cac:	0f b6 c0             	movzx  eax,al
c0017caf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017cb6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017cba:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017cbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cc3:	ee                   	out    dx,al
c0017cc4:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017ccb:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017cd0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017cd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cd9:	ee                   	out    dx,al
c0017cda:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017cdf:	c1 e8 08             	shr    eax,0x8
c0017ce2:	0f b7 c0             	movzx  eax,ax
c0017ce5:	0f b6 c0             	movzx  eax,al
c0017ce8:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017cef:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017cf3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017cf8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cfc:	ee                   	out    dx,al
c0017cfd:	90                   	nop
c0017cfe:	83 c4 20             	add    esp,0x20
c0017d01:	c3                   	ret    
c0017d02:	66 90                	xchg   ax,ax

c0017d04 <FAT::getName()>:
c0017d04:	b8 20 13 02 c0       	mov    eax,0xc0021320
c0017d09:	c3                   	ret    
c0017d0a:	66 90                	xchg   ax,ax

c0017d0c <FAT::tell(void*, unsigned long long*)>:
c0017d0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d11:	75 09                	jne    c0017d1c <FAT::tell(void*, unsigned long long*)+0x10>
c0017d13:	b8 04 00 00 00       	mov    eax,0x4
c0017d18:	c3                   	ret    
c0017d19:	8d 76 00             	lea    esi,[esi+0x0]
c0017d1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d21:	75 09                	jne    c0017d2c <FAT::tell(void*, unsigned long long*)+0x20>
c0017d23:	b8 04 00 00 00       	mov    eax,0x4
c0017d28:	c3                   	ret    
c0017d29:	8d 76 00             	lea    esi,[esi+0x0]
c0017d2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d33:	ba 00 00 00 00       	mov    edx,0x0
c0017d38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d3c:	89 01                	mov    DWORD PTR [ecx],eax
c0017d3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d41:	b8 00 00 00 00       	mov    eax,0x0
c0017d46:	c3                   	ret    
c0017d47:	90                   	nop

c0017d48 <FAT::stat(void*, unsigned long long*)>:
c0017d48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d4d:	75 09                	jne    c0017d58 <FAT::stat(void*, unsigned long long*)+0x10>
c0017d4f:	b8 04 00 00 00       	mov    eax,0x4
c0017d54:	c3                   	ret    
c0017d55:	8d 76 00             	lea    esi,[esi+0x0]
c0017d58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d5d:	75 09                	jne    c0017d68 <FAT::stat(void*, unsigned long long*)+0x20>
c0017d5f:	b8 04 00 00 00       	mov    eax,0x4
c0017d64:	c3                   	ret    
c0017d65:	8d 76 00             	lea    esi,[esi+0x0]
c0017d68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d6f:	ba 00 00 00 00       	mov    edx,0x0
c0017d74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d78:	89 01                	mov    DWORD PTR [ecx],eax
c0017d7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017d7d:	b8 00 00 00 00       	mov    eax,0x0
c0017d82:	c3                   	ret    
c0017d83:	90                   	nop

c0017d84 <FAT::~FAT()>:
c0017d84:	83 ec 1c             	sub    esp,0x1c
c0017d87:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c0017d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d90:	89 10                	mov    DWORD PTR [eax],edx
c0017d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d96:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d99:	e8 2a 30 ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c0017d9e:	90                   	nop
c0017d9f:	83 c4 1c             	add    esp,0x1c
c0017da2:	c3                   	ret    
c0017da3:	90                   	nop

c0017da4 <FAT::~FAT()>:
c0017da4:	83 ec 1c             	sub    esp,0x1c
c0017da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dae:	e8 d1 ff ff ff       	call   c0017d84 <FAT::~FAT()>
c0017db3:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dc2:	e8 95 2b ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0017dc7:	83 c4 1c             	add    esp,0x1c
c0017dca:	c3                   	ret    
c0017dcb:	90                   	nop

c0017dcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017dcc:	83 ec 2c             	sub    esp,0x2c
c0017dcf:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c0017dd6:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0017ddb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ddf:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017de6:	83 f8 ff             	cmp    eax,0xffffffff
c0017de9:	75 35                	jne    c0017e20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017deb:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017df0:	88 c2                	mov    dl,al
c0017df2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017df7:	00 d0                	add    al,dl
c0017df9:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017dfd:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e07:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e0e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e13:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017e17:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e1e:	eb 18                	jmp    c0017e38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017e20:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017e25:	88 c2                	mov    dl,al
c0017e27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e2b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e32:	00 d0                	add    al,dl
c0017e34:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017e38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e48:	8d 44 24 19          	lea    eax,[esp+0x19]
c0017e4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e4f:	e8 75 d1 fe ff       	call   c0004fc9 <f_getlabel>
c0017e54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e58:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017e5d:	75 09                	jne    c0017e68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c0017e5f:	b8 00 00 00 00       	mov    eax,0x0
c0017e64:	eb 0a                	jmp    c0017e70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c0017e66:	66 90                	xchg   ax,ax
c0017e68:	b8 01 00 00 00       	mov    eax,0x1
c0017e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e70:	83 c4 2c             	add    esp,0x2c
c0017e73:	c3                   	ret    

c0017e74 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017e74:	53                   	push   ebx
c0017e75:	83 ec 68             	sub    esp,0x68
c0017e78:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0017e80:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017e84:	b9 00 00 00 00       	mov    ecx,0x0
c0017e89:	b8 3c 00 00 00       	mov    eax,0x3c
c0017e8e:	83 e0 f8             	and    eax,0xfffffff8
c0017e91:	89 c3                	mov    ebx,eax
c0017e93:	b8 00 00 00 00       	mov    eax,0x0
c0017e98:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0017e9c:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0017ea0:	83 c0 08             	add    eax,0x8
c0017ea3:	39 d8                	cmp    eax,ebx
c0017ea5:	72 f1                	jb     c0017e98 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017ea7:	01 c2                	add    edx,eax
c0017ea9:	89 0a                	mov    DWORD PTR [edx],ecx
c0017eab:	83 c2 04             	add    edx,0x4
c0017eae:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017eb2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eb9:	83 f8 ff             	cmp    eax,0xffffffff
c0017ebc:	75 36                	jne    c0017ef4 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017ebe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017ec3:	88 c2                	mov    dl,al
c0017ec5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017eca:	00 d0                	add    al,dl
c0017ecc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017ed0:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ed6:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017eda:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ee1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ee6:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0017eea:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017ef1:	eb 19                	jmp    c0017f0c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017ef3:	90                   	nop
c0017ef4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017ef9:	88 c2                	mov    dl,al
c0017efb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017eff:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f06:	00 d0                	add    al,dl
c0017f08:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017f0c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017f10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f14:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f1b:	e8 10 8a fe ff       	call   c0000930 <strcat>
c0017f20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f27:	e8 f1 d1 fe ff       	call   c000511d <f_setlabel>
c0017f2c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0017f30:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0017f35:	75 09                	jne    c0017f40 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c0017f37:	b8 00 00 00 00       	mov    eax,0x0
c0017f3c:	eb 0a                	jmp    c0017f48 <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c0017f3e:	66 90                	xchg   ax,ax
c0017f40:	b8 01 00 00 00       	mov    eax,0x1
c0017f45:	8d 76 00             	lea    esi,[esi+0x0]
c0017f48:	83 c4 68             	add    esp,0x68
c0017f4b:	5b                   	pop    ebx
c0017f4c:	c3                   	ret    
c0017f4d:	90                   	nop
c0017f4e:	66 90                	xchg   ax,ax

c0017f50 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017f50:	83 ec 3c             	sub    esp,0x3c
c0017f53:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f5b:	c7 44 24 04 44 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021344
c0017f63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f67:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f6a:	e8 d1 88 fe ff       	call   c0000840 <strcmp>
c0017f6f:	85 c0                	test   eax,eax
c0017f71:	0f 94 c0             	sete   al
c0017f74:	84 c0                	test   al,al
c0017f76:	74 10                	je     c0017f88 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017f78:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017f80:	e9 b3 00 00 00       	jmp    c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f85:	8d 76 00             	lea    esi,[esi+0x0]
c0017f88:	c7 44 24 04 36 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021336
c0017f90:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f94:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f97:	e8 a4 88 fe ff       	call   c0000840 <strcmp>
c0017f9c:	85 c0                	test   eax,eax
c0017f9e:	0f 94 c0             	sete   al
c0017fa1:	84 c0                	test   al,al
c0017fa3:	74 0f                	je     c0017fb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017fa5:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017fad:	e9 86 00 00 00       	jmp    c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017fb2:	66 90                	xchg   ax,ax
c0017fb4:	c7 44 24 04 3c 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002133c
c0017fbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017fc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fc3:	e8 78 88 fe ff       	call   c0000840 <strcmp>
c0017fc8:	85 c0                	test   eax,eax
c0017fca:	0f 94 c0             	sete   al
c0017fcd:	84 c0                	test   al,al
c0017fcf:	74 0b                	je     c0017fdc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017fd1:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017fd9:	eb 5d                	jmp    c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017fdb:	90                   	nop
c0017fdc:	c7 44 24 04 fc f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0fc
c0017fe4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017fe8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017feb:	e8 50 88 fe ff       	call   c0000840 <strcmp>
c0017ff0:	85 c0                	test   eax,eax
c0017ff2:	0f 94 c0             	sete   al
c0017ff5:	84 c0                	test   al,al
c0017ff7:	74 0b                	je     c0018004 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017ff9:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0018001:	eb 35                	jmp    c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018003:	90                   	nop
c0018004:	c7 44 24 04 42 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021342
c001800c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018010:	89 04 24             	mov    DWORD PTR [esp],eax
c0018013:	e8 28 88 fe ff       	call   c0000840 <strcmp>
c0018018:	85 c0                	test   eax,eax
c001801a:	0f 94 c0             	sete   al
c001801d:	84 c0                	test   al,al
c001801f:	74 0b                	je     c001802c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0018021:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c0018029:	eb 0d                	jmp    c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001802b:	90                   	nop
c001802c:	b8 08 00 00 00       	mov    eax,0x8
c0018031:	e9 f2 00 00 00       	jmp    c0018128 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018036:	66 90                	xchg   ax,ax
c0018038:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c001803f:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c0018044:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018048:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001804f:	83 f8 ff             	cmp    eax,0xffffffff
c0018052:	75 38                	jne    c001808c <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c0018054:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018059:	88 c2                	mov    dl,al
c001805b:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018060:	00 d0                	add    al,dl
c0018062:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018066:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001806c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018070:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018077:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001807c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018080:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018087:	eb 1b                	jmp    c00180a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c0018089:	8d 76 00             	lea    esi,[esi+0x0]
c001808c:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018091:	88 c2                	mov    dl,al
c0018093:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018097:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001809e:	00 d0                	add    al,dl
c00180a0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00180ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00180b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180b4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00180bc:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c00180c1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180c9:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00180d0:	e8 31 fa fe ff       	call   c0007b06 <malloc>
c00180d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00180d9:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c00180e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180e9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180f1:	8d 44 24 21          	lea    eax,[esp+0x21]
c00180f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00180f8:	e8 0e d3 fe ff       	call   c000540b <f_mkfs>
c00180fd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018101:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018106:	75 08                	jne    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c0018108:	b8 00 00 00 00       	mov    eax,0x0
c001810d:	eb 19                	jmp    c0018128 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001810f:	90                   	nop
c0018110:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c0018115:	75 09                	jne    c0018120 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0018117:	b8 09 00 00 00       	mov    eax,0x9
c001811c:	eb 0a                	jmp    c0018128 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001811e:	66 90                	xchg   ax,ax
c0018120:	b8 01 00 00 00       	mov    eax,0x1
c0018125:	8d 76 00             	lea    esi,[esi+0x0]
c0018128:	83 c4 3c             	add    esp,0x3c
c001812b:	c3                   	ret    

c001812c <FAT::tryMount(LogicalDisk*, int)>:
c001812c:	81 ec 5c 03 00 00    	sub    esp,0x35c
c0018132:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018137:	83 f8 14             	cmp    eax,0x14
c001813a:	75 14                	jne    c0018150 <FAT::tryMount(LogicalDisk*, int)+0x24>
c001813c:	c7 04 24 48 13 02 c0 	mov    DWORD PTR [esp],0xc0021348
c0018143:	e8 7d 86 ff ff       	call   c00107c5 <KePanic(char const*)>
c0018148:	b0 00                	mov    al,0x0
c001814a:	e9 f1 01 00 00       	jmp    c0018340 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001814f:	90                   	nop
c0018150:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c0018157:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001815d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018163:	3d 00 02 00 00       	cmp    eax,0x200
c0018168:	74 0a                	je     c0018174 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001816a:	b0 00                	mov    al,0x0
c001816c:	e9 cf 01 00 00       	jmp    c0018340 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018171:	8d 76 00             	lea    esi,[esi+0x0]
c0018174:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c001817c:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018183:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001818a:	83 f8 ff             	cmp    eax,0xffffffff
c001818d:	74 09                	je     c0018198 <FAT::tryMount(LogicalDisk*, int)+0x6c>
c001818f:	b0 01                	mov    al,0x1
c0018191:	e9 aa 01 00 00       	jmp    c0018340 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018196:	66 90                	xchg   ax,ax
c0018198:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c00181a2:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c00181aa:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c00181b2:	88 c2                	mov    dl,al
c00181b4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181b9:	00 d0                	add    al,dl
c00181bb:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c00181c2:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00181c8:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c00181cf:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00181d6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181db:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c00181e2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00181e9:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c00181f0:	e8 11 f9 fe ff       	call   c0007b06 <malloc>
c00181f5:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c00181fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018204:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001820b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001820f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018216:	89 04 24             	mov    DWORD PTR [esp],eax
c0018219:	e8 2d ba fe ff       	call   c0003c4b <f_mount>
c001821e:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c0018225:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c001822d:	74 19                	je     c0018248 <FAT::tryMount(LogicalDisk*, int)+0x11c>
c001822f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018236:	89 04 24             	mov    DWORD PTR [esp],eax
c0018239:	e8 ee f8 fe ff       	call   c0007b2c <rfree>
c001823e:	b0 00                	mov    al,0x0
c0018240:	e9 fb 00 00 00       	jmp    c0018340 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018245:	8d 76 00             	lea    esi,[esi+0x0]
c0018248:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0018250:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018258:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c001825f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018262:	e8 19 83 fe ff       	call   c0000580 <memset>
c0018267:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001826e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018272:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018279:	89 04 24             	mov    DWORD PTR [esp],eax
c001827c:	e8 af 86 fe ff       	call   c0000930 <strcat>
c0018281:	c7 44 24 04 56 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021356
c0018289:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018290:	89 04 24             	mov    DWORD PTR [esp],eax
c0018293:	e8 98 86 fe ff       	call   c0000930 <strcat>
c0018298:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c00182a0:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00182a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182af:	89 04 24             	mov    DWORD PTR [esp],eax
c00182b2:	e8 f6 b9 fe ff       	call   c0003cad <f_open>
c00182b7:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c00182be:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c00182c5:	85 c0                	test   eax,eax
c00182c7:	74 0b                	je     c00182d4 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c00182c9:	78 2d                	js     c00182f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00182cb:	83 e8 04             	sub    eax,0x4
c00182ce:	83 f8 01             	cmp    eax,0x1
c00182d1:	77 25                	ja     c00182f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00182d3:	90                   	nop
c00182d4:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c00182dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00182e3:	e8 55 c1 fe ff       	call   c000443d <f_close>
c00182e8:	90                   	nop
c00182e9:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c00182f1:	74 45                	je     c0018338 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00182f3:	eb 37                	jmp    c001832c <FAT::tryMount(LogicalDisk*, int)+0x200>
c00182f5:	8d 76 00             	lea    esi,[esi+0x0]
c00182f8:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00182ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0018302:	e8 25 f8 fe ff       	call   c0007b2c <rfree>
c0018307:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001830f:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c0018316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001831a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018321:	e8 25 b9 fe ff       	call   c0003c4b <f_mount>
c0018326:	b0 00                	mov    al,0x0
c0018328:	eb 16                	jmp    c0018340 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001832a:	66 90                	xchg   ax,ax
c001832c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018331:	40                   	inc    eax
c0018332:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018337:	90                   	nop
c0018338:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c0018340:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018346:	c3                   	ret    
c0018347:	90                   	nop

c0018348 <FAT::allocateSwapfile(char const*, int)>:
c0018348:	55                   	push   ebp
c0018349:	57                   	push   edi
c001834a:	56                   	push   esi
c001834b:	53                   	push   ebx
c001834c:	81 ec 5c 04 00 00    	sub    esp,0x45c
c0018352:	c7 84 24 40 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x440],0x114
c001835d:	8b 84 24 40 04 00 00 	mov    eax,DWORD PTR [esp+0x440]
c0018364:	89 04 24             	mov    DWORD PTR [esp],eax
c0018367:	e8 9a f7 fe ff       	call   c0007b06 <malloc>
c001836c:	89 c7                	mov    edi,eax
c001836e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018377:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c001837e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018382:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018385:	e8 6e 2c ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001838a:	89 bc 24 4c 04 00 00 	mov    DWORD PTR [esp+0x44c],edi
c0018391:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c0018395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018399:	8d 44 24 30          	lea    eax,[esp+0x30]
c001839d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00183a1:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00183ab:	e8 ac 2f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c00183b0:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c00183b7:	c1 e0 14             	shl    eax,0x14
c00183ba:	89 c7                	mov    edi,eax
c00183bc:	89 c5                	mov    ebp,eax
c00183be:	c1 fd 1f             	sar    ebp,0x1f
c00183c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00183c9:	89 f9                	mov    ecx,edi
c00183cb:	31 c1                	xor    ecx,eax
c00183cd:	89 cb                	mov    ebx,ecx
c00183cf:	89 e9                	mov    ecx,ebp
c00183d1:	31 d1                	xor    ecx,edx
c00183d3:	89 ce                	mov    esi,ecx
c00183d5:	89 f0                	mov    eax,esi
c00183d7:	09 d8                	or     eax,ebx
c00183d9:	0f 84 a9 00 00 00    	je     c0018488 <FAT::allocateSwapfile(char const*, int)+0x140>
c00183df:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00183e9:	e8 40 2e ff ff       	call   c000b22e <File::unlink()>
c00183ee:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c00183f6:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0018400:	e8 b1 2c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0018405:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001840c:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018412:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c0018419:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018420:	c1 e0 14             	shl    eax,0x14
c0018423:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c001842b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001842f:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0018436:	89 04 24             	mov    DWORD PTR [esp],eax
c0018439:	e8 6f ce fe ff       	call   c00052ad <f_expand>
c001843e:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018445:	8b 00                	mov    eax,DWORD PTR [eax]
c0018447:	83 c0 10             	add    eax,0x10
c001844a:	8b 00                	mov    eax,DWORD PTR [eax]
c001844c:	8d 54 24 38          	lea    edx,[esp+0x38]
c0018450:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018454:	8d 54 24 40          	lea    edx,[esp+0x40]
c0018458:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001845c:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c0018464:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001846c:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c0018473:	89 14 24             	mov    DWORD PTR [esp],edx
c0018476:	ff d0                	call   eax
c0018478:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001847f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018482:	e8 8d 2c ff ff       	call   c000b114 <File::close()>
c0018487:	90                   	nop
c0018488:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018490:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018497:	89 04 24             	mov    DWORD PTR [esp],eax
c001849a:	e8 17 2c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001849f:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00184a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a8:	83 c0 0c             	add    eax,0xc
c00184ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ad:	8d 54 24 38          	lea    edx,[esp+0x38]
c00184b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00184b5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00184b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184bd:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c00184c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00184cd:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c00184d4:	89 14 24             	mov    DWORD PTR [esp],edx
c00184d7:	ff d0                	call   eax
c00184d9:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00184e0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184e6:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c00184ed:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c00184f4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00184f7:	89 84 24 44 04 00 00 	mov    DWORD PTR [esp+0x444],eax
c00184fe:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018505:	89 04 24             	mov    DWORD PTR [esp],eax
c0018508:	e8 07 2c ff ff       	call   c000b114 <File::close()>
c001850d:	8b 84 24 44 04 00 00 	mov    eax,DWORD PTR [esp+0x444]
c0018514:	ba 00 00 00 00       	mov    edx,0x0
c0018519:	81 c4 5c 04 00 00    	add    esp,0x45c
c001851f:	5b                   	pop    ebx
c0018520:	5e                   	pop    esi
c0018521:	5f                   	pop    edi
c0018522:	5d                   	pop    ebp
c0018523:	c3                   	ret    

c0018524 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018524:	57                   	push   edi
c0018525:	56                   	push   esi
c0018526:	53                   	push   ebx
c0018527:	81 ec 60 02 00 00    	sub    esp,0x260
c001852d:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c0018535:	74 0d                	je     c0018544 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018537:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c001853f:	75 0f                	jne    c0018550 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018541:	8d 76 00             	lea    esi,[esi+0x0]
c0018544:	b8 04 00 00 00       	mov    eax,0x4
c0018549:	e9 32 01 00 00       	jmp    c0018680 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001854e:	66 90                	xchg   ax,ax
c0018550:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018557:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001855b:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c0018562:	89 04 24             	mov    DWORD PTR [esp],eax
c0018565:	e8 95 c1 fe ff       	call   c00046ff <f_readdir>
c001856a:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c0018571:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0018578:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001857f:	83 c0 16             	add    eax,0x16
c0018582:	89 04 24             	mov    DWORD PTR [esp],eax
c0018585:	e8 96 80 fe ff       	call   c0000620 <strlen>
c001858a:	ba 00 00 00 00       	mov    edx,0x0
c001858f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018593:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0018597:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c001859f:	0f b6 c0             	movzx  eax,al
c00185a2:	83 e0 10             	and    eax,0x10
c00185a5:	74 09                	je     c00185b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c00185a7:	b8 02 00 00 00       	mov    eax,0x2
c00185ac:	eb 0a                	jmp    c00185b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c00185ae:	66 90                	xchg   ax,ax
c00185b0:	b8 01 00 00 00       	mov    eax,0x1
c00185b5:	8d 76 00             	lea    esi,[esi+0x0]
c00185b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00185bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00185c3:	83 c0 16             	add    eax,0x16
c00185c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185ce:	83 c0 10             	add    eax,0x10
c00185d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00185d4:	e8 47 81 fe ff       	call   c0000720 <strcpy>
c00185d9:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c00185e0:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c00185e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185eb:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c00185f2:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c00185f9:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c0018600:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018607:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001860e:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018615:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c001861c:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c0018623:	89 c6                	mov    esi,eax
c0018625:	89 d7                	mov    edi,edx
c0018627:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018629:	89 c8                	mov    eax,ecx
c001862b:	89 fa                	mov    edx,edi
c001862d:	89 f3                	mov    ebx,esi
c001862f:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c0018636:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c001863d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018644:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c001864b:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018651:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c0018659:	84 c0                	test   al,al
c001865b:	75 07                	jne    c0018664 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c001865d:	b8 07 00 00 00       	mov    eax,0x7
c0018662:	eb 1c                	jmp    c0018680 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018664:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c001866b:	85 c0                	test   eax,eax
c001866d:	75 09                	jne    c0018678 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c001866f:	b8 00 00 00 00       	mov    eax,0x0
c0018674:	eb 0a                	jmp    c0018680 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018676:	66 90                	xchg   ax,ax
c0018678:	b8 01 00 00 00       	mov    eax,0x1
c001867d:	8d 76 00             	lea    esi,[esi+0x0]
c0018680:	81 c4 60 02 00 00    	add    esp,0x260
c0018686:	5b                   	pop    ebx
c0018687:	5e                   	pop    esi
c0018688:	5f                   	pop    edi
c0018689:	c3                   	ret    
c001868a:	66 90                	xchg   ax,ax

c001868c <FAT::read(void*, unsigned long, void*, int*)>:
c001868c:	83 ec 2c             	sub    esp,0x2c
c001868f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018694:	74 0a                	je     c00186a0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018696:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001869b:	75 0b                	jne    c00186a8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001869d:	8d 76 00             	lea    esi,[esi+0x0]
c00186a0:	b8 04 00 00 00       	mov    eax,0x4
c00186a5:	eb 4d                	jmp    c00186f4 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c00186a7:	90                   	nop
c00186a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00186b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00186bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00186c7:	e8 ab b8 fe ff       	call   c0003f77 <f_read>
c00186cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186d4:	89 c2                	mov    edx,eax
c00186d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186da:	89 10                	mov    DWORD PTR [eax],edx
c00186dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186e0:	85 c0                	test   eax,eax
c00186e2:	75 08                	jne    c00186ec <FAT::read(void*, unsigned long, void*, int*)+0x60>
c00186e4:	b8 00 00 00 00       	mov    eax,0x0
c00186e9:	eb 09                	jmp    c00186f4 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c00186eb:	90                   	nop
c00186ec:	b8 01 00 00 00       	mov    eax,0x1
c00186f1:	8d 76 00             	lea    esi,[esi+0x0]
c00186f4:	83 c4 2c             	add    esp,0x2c
c00186f7:	c3                   	ret    

c00186f8 <FAT::write(void*, unsigned long, void*, int*)>:
c00186f8:	83 ec 2c             	sub    esp,0x2c
c00186fb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018700:	74 0a                	je     c001870c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018702:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018707:	75 0b                	jne    c0018714 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018709:	8d 76 00             	lea    esi,[esi+0x0]
c001870c:	b8 04 00 00 00       	mov    eax,0x4
c0018711:	eb 4d                	jmp    c0018760 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018713:	90                   	nop
c0018714:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018718:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001871c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018720:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018724:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018728:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001872c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018730:	89 04 24             	mov    DWORD PTR [esp],eax
c0018733:	e8 1b ba fe ff       	call   c0004153 <f_write>
c0018738:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001873c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018740:	89 c2                	mov    edx,eax
c0018742:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018746:	89 10                	mov    DWORD PTR [eax],edx
c0018748:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001874c:	85 c0                	test   eax,eax
c001874e:	75 08                	jne    c0018758 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c0018750:	b8 00 00 00 00       	mov    eax,0x0
c0018755:	eb 09                	jmp    c0018760 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018757:	90                   	nop
c0018758:	b8 01 00 00 00       	mov    eax,0x1
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	83 c4 2c             	add    esp,0x2c
c0018763:	c3                   	ret    

c0018764 <FAT::close(void*)>:
c0018764:	83 ec 2c             	sub    esp,0x2c
c0018767:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001876c:	75 0a                	jne    c0018778 <FAT::close(void*)+0x14>
c001876e:	b8 04 00 00 00       	mov    eax,0x4
c0018773:	eb 37                	jmp    c00187ac <FAT::close(void*)+0x48>
c0018775:	8d 76 00             	lea    esi,[esi+0x0]
c0018778:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001877c:	89 04 24             	mov    DWORD PTR [esp],eax
c001877f:	e8 b9 bc fe ff       	call   c000443d <f_close>
c0018784:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018788:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001878c:	89 04 24             	mov    DWORD PTR [esp],eax
c001878f:	e8 85 f3 fe ff       	call   c0007b19 <free>
c0018794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018798:	85 c0                	test   eax,eax
c001879a:	75 08                	jne    c00187a4 <FAT::close(void*)+0x40>
c001879c:	b8 00 00 00 00       	mov    eax,0x0
c00187a1:	eb 09                	jmp    c00187ac <FAT::close(void*)+0x48>
c00187a3:	90                   	nop
c00187a4:	b8 01 00 00 00       	mov    eax,0x1
c00187a9:	8d 76 00             	lea    esi,[esi+0x0]
c00187ac:	83 c4 2c             	add    esp,0x2c
c00187af:	c3                   	ret    

c00187b0 <FAT::closeDir(void*)>:
c00187b0:	83 ec 2c             	sub    esp,0x2c
c00187b3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00187b8:	75 0a                	jne    c00187c4 <FAT::closeDir(void*)+0x14>
c00187ba:	b8 04 00 00 00       	mov    eax,0x4
c00187bf:	eb 37                	jmp    c00187f8 <FAT::closeDir(void*)+0x48>
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00187cb:	e8 0d bf fe ff       	call   c00046dd <f_closedir>
c00187d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00187db:	e8 39 f3 fe ff       	call   c0007b19 <free>
c00187e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00187e4:	85 c0                	test   eax,eax
c00187e6:	75 08                	jne    c00187f0 <FAT::closeDir(void*)+0x40>
c00187e8:	b8 00 00 00 00       	mov    eax,0x0
c00187ed:	eb 09                	jmp    c00187f8 <FAT::closeDir(void*)+0x48>
c00187ef:	90                   	nop
c00187f0:	b8 01 00 00 00       	mov    eax,0x1
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	83 c4 2c             	add    esp,0x2c
c00187fb:	c3                   	ret    

c00187fc <FAT::seek(void*, unsigned long long)>:
c00187fc:	83 ec 3c             	sub    esp,0x3c
c00187ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018803:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018807:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001880b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001880f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018814:	75 0a                	jne    c0018820 <FAT::seek(void*, unsigned long long)+0x24>
c0018816:	b8 04 00 00 00       	mov    eax,0x4
c001881b:	eb 33                	jmp    c0018850 <FAT::seek(void*, unsigned long long)+0x54>
c001881d:	8d 76 00             	lea    esi,[esi+0x0]
c0018820:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018824:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018828:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001882c:	89 04 24             	mov    DWORD PTR [esp],eax
c001882f:	e8 38 bc fe ff       	call   c000446c <f_lseek>
c0018834:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001883c:	85 c0                	test   eax,eax
c001883e:	75 08                	jne    c0018848 <FAT::seek(void*, unsigned long long)+0x4c>
c0018840:	b8 00 00 00 00       	mov    eax,0x0
c0018845:	eb 09                	jmp    c0018850 <FAT::seek(void*, unsigned long long)+0x54>
c0018847:	90                   	nop
c0018848:	b8 01 00 00 00       	mov    eax,0x1
c001884d:	8d 76 00             	lea    esi,[esi+0x0]
c0018850:	83 c4 3c             	add    esp,0x3c
c0018853:	c3                   	ret    

c0018854 <fatWrapperReadDisk>:
c0018854:	56                   	push   esi
c0018855:	53                   	push   ebx
c0018856:	83 ec 34             	sub    esp,0x34
c0018859:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001885d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001886d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0018871:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018875:	ba 00 00 00 00       	mov    edx,0x0
c001887a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001887e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018882:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001888a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001888e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018891:	e8 12 49 ff ff       	call   c000d1a8 <LogicalDisk::read(unsigned long long, int, void*)>
c0018896:	83 c4 34             	add    esp,0x34
c0018899:	5b                   	pop    ebx
c001889a:	5e                   	pop    esi
c001889b:	c3                   	ret    

c001889c <fatWrapperWriteDisk>:
c001889c:	56                   	push   esi
c001889d:	53                   	push   ebx
c001889e:	83 ec 34             	sub    esp,0x34
c00188a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188a5:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ae:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00188b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00188bd:	ba 00 00 00 00       	mov    edx,0x0
c00188c2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00188c6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00188ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00188ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00188d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00188d9:	e8 36 49 ff ff       	call   c000d214 <LogicalDisk::write(unsigned long long, int, void*)>
c00188de:	83 c4 34             	add    esp,0x34
c00188e1:	5b                   	pop    ebx
c00188e2:	5e                   	pop    esi
c00188e3:	c3                   	ret    

c00188e4 <fatWrapperIoctl>:
c00188e4:	53                   	push   ebx
c00188e5:	83 ec 38             	sub    esp,0x38
c00188e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00188f0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00188f4:	88 d0                	mov    al,dl
c00188f6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188fa:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00188ff:	75 37                	jne    c0018938 <fatWrapperIoctl+0x54>
c0018901:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018905:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018909:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001890e:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018915:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001891b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018921:	0f b7 d0             	movzx  edx,ax
c0018924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018928:	66 89 10             	mov    WORD PTR [eax],dx
c001892b:	b8 00 00 00 00       	mov    eax,0x0
c0018930:	e9 c3 00 00 00       	jmp    c00189f8 <fatWrapperIoctl+0x114>
c0018935:	8d 76 00             	lea    esi,[esi+0x0]
c0018938:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001893d:	75 71                	jne    c00189b0 <fatWrapperIoctl+0xcc>
c001893f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018943:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018947:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001894c:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018953:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018959:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001895f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018965:	89 c8                	mov    eax,ecx
c0018967:	89 da                	mov    edx,ebx
c0018969:	0f a4 c2 0a          	shld   edx,eax,0xa
c001896d:	c1 e0 0a             	shl    eax,0xa
c0018970:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0018975:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001897c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018982:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018988:	89 cb                	mov    ebx,ecx
c001898a:	c1 fb 1f             	sar    ebx,0x1f
c001898d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018991:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018995:	89 04 24             	mov    DWORD PTR [esp],eax
c0018998:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001899c:	e8 ff 59 00 00       	call   c001e3a0 <__udivdi3>
c00189a1:	89 c2                	mov    edx,eax
c00189a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189a7:	89 10                	mov    DWORD PTR [eax],edx
c00189a9:	b8 00 00 00 00       	mov    eax,0x0
c00189ae:	eb 48                	jmp    c00189f8 <fatWrapperIoctl+0x114>
c00189b0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00189b5:	75 09                	jne    c00189c0 <fatWrapperIoctl+0xdc>
c00189b7:	b8 00 00 00 00       	mov    eax,0x0
c00189bc:	eb 3a                	jmp    c00189f8 <fatWrapperIoctl+0x114>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00189c5:	75 19                	jne    c00189e0 <fatWrapperIoctl+0xfc>
c00189c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00189cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00189cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00189d9:	b8 00 00 00 00       	mov    eax,0x0
c00189de:	eb 18                	jmp    c00189f8 <fatWrapperIoctl+0x114>
c00189e0:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c00189e5:	75 09                	jne    c00189f0 <fatWrapperIoctl+0x10c>
c00189e7:	b8 00 00 00 00       	mov    eax,0x0
c00189ec:	eb 0a                	jmp    c00189f8 <fatWrapperIoctl+0x114>
c00189ee:	66 90                	xchg   ax,ax
c00189f0:	b8 04 00 00 00       	mov    eax,0x4
c00189f5:	8d 76 00             	lea    esi,[esi+0x0]
c00189f8:	83 c4 38             	add    esp,0x38
c00189fb:	5b                   	pop    ebx
c00189fc:	c3                   	ret    
c00189fd:	90                   	nop
c00189fe:	66 90                	xchg   ax,ax

c0018a00 <FAT::FAT()>:
c0018a00:	83 ec 2c             	sub    esp,0x2c
c0018a03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a0a:	e8 95 23 ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c0018a0f:	ba 6c 13 02 c0       	mov    edx,0xc002136c
c0018a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a18:	89 10                	mov    DWORD PTR [eax],edx
c0018a1a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a24:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018a2c:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c0018a31:	7f 15                	jg     c0018a48 <FAT::FAT()+0x48>
c0018a33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018a37:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018a42:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0018a46:	eb e4                	jmp    c0018a2c <FAT::FAT()+0x2c>
c0018a48:	90                   	nop
c0018a49:	83 c4 2c             	add    esp,0x2c
c0018a4c:	c3                   	ret    
c0018a4d:	90                   	nop
c0018a4e:	66 90                	xchg   ax,ax

c0018a50 <FAT::fixFilepath(char*)>:
c0018a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018a57:	3c 40                	cmp    al,0x40
c0018a59:	7e 2d                	jle    c0018a88 <FAT::fixFilepath(char*)+0x38>
c0018a5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018a62:	2c 41                	sub    al,0x41
c0018a64:	88 c2                	mov    dl,al
c0018a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a6a:	88 10                	mov    BYTE PTR [eax],dl
c0018a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018a73:	0f be c0             	movsx  eax,al
c0018a76:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018a7d:	04 30                	add    al,0x30
c0018a7f:	88 c2                	mov    dl,al
c0018a81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a85:	88 10                	mov    BYTE PTR [eax],dl
c0018a87:	90                   	nop
c0018a88:	90                   	nop
c0018a89:	c3                   	ret    
c0018a8a:	66 90                	xchg   ax,ax

c0018a8c <FAT::open(char const*, void**, FileOpenMode)>:
c0018a8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a92:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018a9a:	74 0c                	je     c0018aa8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018a9c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018aa4:	75 0e                	jne    c0018ab4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018aa6:	66 90                	xchg   ax,ax
c0018aa8:	b8 04 00 00 00       	mov    eax,0x4
c0018aad:	e9 02 01 00 00       	jmp    c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018ab2:	66 90                	xchg   ax,ax
c0018ab4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018abb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018abf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ac6:	e8 55 7c fe ff       	call   c0000720 <strcpy>
c0018acb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018acf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ad3:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018ada:	89 04 24             	mov    DWORD PTR [esp],eax
c0018add:	e8 6e ff ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018ae2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018aea:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018af1:	83 e0 01             	and    eax,0x1
c0018af4:	74 0a                	je     c0018b00 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018af6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018afe:	66 90                	xchg   ax,ax
c0018b00:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b07:	83 e0 04             	and    eax,0x4
c0018b0a:	74 10                	je     c0018b1c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018b0c:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0018b14:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018b1c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b23:	83 e0 02             	and    eax,0x2
c0018b26:	74 08                	je     c0018b30 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018b28:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018b30:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b37:	83 e0 08             	and    eax,0x8
c0018b3a:	74 08                	je     c0018b44 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018b3c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018b44:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b4b:	83 e0 10             	and    eax,0x10
c0018b4e:	74 08                	je     c0018b58 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018b50:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c0018b58:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c0018b5f:	e8 a2 ef fe ff       	call   c0007b06 <malloc>
c0018b64:	89 c2                	mov    edx,eax
c0018b66:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018b6d:	89 10                	mov    DWORD PTR [eax],edx
c0018b6f:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c0018b77:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018b84:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018b88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018b8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b8f:	e8 19 b1 fe ff       	call   c0003cad <f_open>
c0018b94:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018b9b:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0018ba3:	74 07                	je     c0018bac <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0018ba5:	b8 01 00 00 00       	mov    eax,0x1
c0018baa:	eb 08                	jmp    c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018bac:	b8 00 00 00 00       	mov    eax,0x0
c0018bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bba:	c3                   	ret    
c0018bbb:	90                   	nop

c0018bbc <FAT::openDir(char const*, void**)>:
c0018bbc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018bc2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018bca:	74 0c                	je     c0018bd8 <FAT::openDir(char const*, void**)+0x1c>
c0018bcc:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018bd4:	75 0e                	jne    c0018be4 <FAT::openDir(char const*, void**)+0x28>
c0018bd6:	66 90                	xchg   ax,ax
c0018bd8:	b8 04 00 00 00       	mov    eax,0x4
c0018bdd:	e9 82 00 00 00       	jmp    c0018c64 <FAT::openDir(char const*, void**)+0xa8>
c0018be2:	66 90                	xchg   ax,ax
c0018be4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018beb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018bf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bf6:	e8 25 7b fe ff       	call   c0000720 <strcpy>
c0018bfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c03:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018c0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c0d:	e8 3e fe ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018c12:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0018c19:	e8 e8 ee fe ff       	call   c0007b06 <malloc>
c0018c1e:	89 c2                	mov    edx,eax
c0018c20:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018c27:	89 10                	mov    DWORD PTR [eax],edx
c0018c29:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c32:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018c36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018c3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c3d:	e8 d0 b9 fe ff       	call   c0004612 <f_opendir>
c0018c42:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018c49:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c0018c51:	74 09                	je     c0018c5c <FAT::openDir(char const*, void**)+0xa0>
c0018c53:	b8 01 00 00 00       	mov    eax,0x1
c0018c58:	eb 0a                	jmp    c0018c64 <FAT::openDir(char const*, void**)+0xa8>
c0018c5a:	66 90                	xchg   ax,ax
c0018c5c:	b8 00 00 00 00       	mov    eax,0x0
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c6a:	c3                   	ret    
c0018c6b:	90                   	nop

c0018c6c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018c6c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018c72:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018c7a:	75 0c                	jne    c0018c88 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018c7c:	b8 04 00 00 00       	mov    eax,0x4
c0018c81:	e9 d2 00 00 00       	jmp    c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018c86:	66 90                	xchg   ax,ax
c0018c88:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0018c90:	75 0a                	jne    c0018c9c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018c92:	b8 04 00 00 00       	mov    eax,0x4
c0018c97:	e9 bc 00 00 00       	jmp    c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018c9c:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0018ca4:	75 0a                	jne    c0018cb0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018ca6:	b8 04 00 00 00       	mov    eax,0x4
c0018cab:	e9 a8 00 00 00       	jmp    c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018cb0:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018cb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cbb:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018cc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cc5:	e8 56 7a fe ff       	call   c0000720 <strcpy>
c0018cca:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cd5:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0018cdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cdf:	e8 6c fd ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018ce4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ce8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cec:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018cf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cf6:	e8 96 ba fe ff       	call   c0004791 <f_stat>
c0018cfb:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0018d02:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0018d09:	85 c0                	test   eax,eax
c0018d0b:	74 07                	je     c0018d14 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c0018d0d:	83 f8 04             	cmp    eax,0x4
c0018d10:	74 36                	je     c0018d48 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0018d12:	eb 3c                	jmp    c0018d50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0018d14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018d19:	0f b6 c0             	movzx  eax,al
c0018d1c:	83 e0 10             	and    eax,0x10
c0018d1f:	0f 95 c2             	setne  dl
c0018d22:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018d29:	88 10                	mov    BYTE PTR [eax],dl
c0018d2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d2f:	ba 00 00 00 00       	mov    edx,0x0
c0018d34:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c0018d3b:	89 01                	mov    DWORD PTR [ecx],eax
c0018d3d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d40:	b8 00 00 00 00       	mov    eax,0x0
c0018d45:	eb 11                	jmp    c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d47:	90                   	nop
c0018d48:	b8 02 00 00 00       	mov    eax,0x2
c0018d4d:	eb 09                	jmp    c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d4f:	90                   	nop
c0018d50:	b8 01 00 00 00       	mov    eax,0x1
c0018d55:	8d 76 00             	lea    esi,[esi+0x0]
c0018d58:	81 c4 3c 02 00 00    	add    esp,0x23c
c0018d5e:	c3                   	ret    
c0018d5f:	90                   	nop

c0018d60 <FAT::unlink(char const*)>:
c0018d60:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d66:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018d6e:	75 08                	jne    c0018d78 <FAT::unlink(char const*)+0x18>
c0018d70:	b8 04 00 00 00       	mov    eax,0x4
c0018d75:	eb 5d                	jmp    c0018dd4 <FAT::unlink(char const*)+0x74>
c0018d77:	90                   	nop
c0018d78:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d8a:	e8 91 79 fe ff       	call   c0000720 <strcpy>
c0018d8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d97:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018d9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018da1:	e8 aa fc ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018da6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018daa:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dad:	e8 46 bc fe ff       	call   c00049f8 <f_unlink>
c0018db2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018db9:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018dc0:	85 c0                	test   eax,eax
c0018dc2:	75 08                	jne    c0018dcc <FAT::unlink(char const*)+0x6c>
c0018dc4:	b8 00 00 00 00       	mov    eax,0x0
c0018dc9:	eb 09                	jmp    c0018dd4 <FAT::unlink(char const*)+0x74>
c0018dcb:	90                   	nop
c0018dcc:	b8 01 00 00 00       	mov    eax,0x1
c0018dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018dda:	c3                   	ret    
c0018ddb:	90                   	nop

c0018ddc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ddc:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0018de2:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018de9:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0018df0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018df4:	88 d0                	mov    al,dl
c0018df6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018dfa:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018e02:	75 0c                	jne    c0018e10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018e04:	b8 04 00 00 00       	mov    eax,0x4
c0018e09:	e9 32 01 00 00       	jmp    c0018f40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018e0e:	66 90                	xchg   ax,ax
c0018e10:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018e17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e1b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e22:	e8 f9 78 fe ff       	call   c0000720 <strcpy>
c0018e27:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e2f:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018e36:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e39:	e8 12 fc ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018e3e:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c0018e46:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c0018e4e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018e53:	83 e0 01             	and    eax,0x1
c0018e56:	74 08                	je     c0018e60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018e58:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c0018e60:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018e65:	83 e0 02             	and    eax,0x2
c0018e68:	74 0a                	je     c0018e74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c0018e6a:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c0018e72:	66 90                	xchg   ax,ax
c0018e74:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018e79:	83 e0 04             	and    eax,0x4
c0018e7c:	74 0a                	je     c0018e88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018e7e:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0018e86:	66 90                	xchg   ax,ax
c0018e88:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018e8d:	83 e0 08             	and    eax,0x8
c0018e90:	74 0a                	je     c0018e9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0018e92:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c0018e9a:	66 90                	xchg   ax,ax
c0018e9c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018ea1:	83 e0 01             	and    eax,0x1
c0018ea4:	74 0a                	je     c0018eb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0018ea6:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c0018eae:	66 90                	xchg   ax,ax
c0018eb0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018eb5:	83 e0 02             	and    eax,0x2
c0018eb8:	74 0a                	je     c0018ec4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c0018eba:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018ec9:	83 e0 04             	and    eax,0x4
c0018ecc:	74 0a                	je     c0018ed8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018ece:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0018ed6:	66 90                	xchg   ax,ax
c0018ed8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018edd:	83 e0 08             	and    eax,0x8
c0018ee0:	74 0a                	je     c0018eec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0018ee2:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c0018eea:	66 90                	xchg   ax,ax
c0018eec:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018ef4:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c0018efb:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0018f03:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018f0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018f0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f17:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f1a:	e8 4a bf fe ff       	call   c0004e69 <f_chmod>
c0018f1f:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0018f26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018f2d:	85 c0                	test   eax,eax
c0018f2f:	75 07                	jne    c0018f38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c0018f31:	b8 00 00 00 00       	mov    eax,0x0
c0018f36:	eb 08                	jmp    c0018f40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018f38:	b8 01 00 00 00       	mov    eax,0x1
c0018f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f40:	81 c4 3c 01 00 00    	add    esp,0x13c
c0018f46:	c3                   	ret    
c0018f47:	90                   	nop

c0018f48 <FAT::rename(char const*, char const*)>:
c0018f48:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018f4e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018f56:	74 0c                	je     c0018f64 <FAT::rename(char const*, char const*)+0x1c>
c0018f58:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018f60:	75 0e                	jne    c0018f70 <FAT::rename(char const*, char const*)+0x28>
c0018f62:	66 90                	xchg   ax,ax
c0018f64:	b8 04 00 00 00       	mov    eax,0x4
c0018f69:	e9 9e 00 00 00       	jmp    c001900c <FAT::rename(char const*, char const*)+0xc4>
c0018f6e:	66 90                	xchg   ax,ax
c0018f70:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0018f77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f7b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018f82:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f85:	e8 96 77 fe ff       	call   c0000720 <strcpy>
c0018f8a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018f91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f95:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f9f:	e8 ac fa ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018fa4:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c0018fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018faf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fb6:	e8 65 77 fe ff       	call   c0000720 <strcpy>
c0018fbb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fc3:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018fca:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fcd:	e8 7e fa ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c0018fd2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fda:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018fe1:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fe4:	e8 c8 bc fe ff       	call   c0004cb1 <f_rename>
c0018fe9:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018ff0:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018ff7:	85 c0                	test   eax,eax
c0018ff9:	75 09                	jne    c0019004 <FAT::rename(char const*, char const*)+0xbc>
c0018ffb:	b8 00 00 00 00       	mov    eax,0x0
c0019000:	eb 0a                	jmp    c001900c <FAT::rename(char const*, char const*)+0xc4>
c0019002:	66 90                	xchg   ax,ax
c0019004:	b8 01 00 00 00       	mov    eax,0x1
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019012:	c3                   	ret    
c0019013:	90                   	nop

c0019014 <FAT::mkdir(char const*)>:
c0019014:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001901a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019022:	75 08                	jne    c001902c <FAT::mkdir(char const*)+0x18>
c0019024:	b8 04 00 00 00       	mov    eax,0x4
c0019029:	eb 5d                	jmp    c0019088 <FAT::mkdir(char const*)+0x74>
c001902b:	90                   	nop
c001902c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0019033:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019037:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001903b:	89 04 24             	mov    DWORD PTR [esp],eax
c001903e:	e8 dd 76 fe ff       	call   c0000720 <strcpy>
c0019043:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019047:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001904b:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0019052:	89 04 24             	mov    DWORD PTR [esp],eax
c0019055:	e8 f6 f9 ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c001905a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001905e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019061:	e8 b0 ba fe ff       	call   c0004b16 <f_mkdir>
c0019066:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c001906d:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0019074:	85 c0                	test   eax,eax
c0019076:	75 08                	jne    c0019080 <FAT::mkdir(char const*)+0x6c>
c0019078:	b8 00 00 00 00       	mov    eax,0x0
c001907d:	eb 09                	jmp    c0019088 <FAT::mkdir(char const*)+0x74>
c001907f:	90                   	nop
c0019080:	b8 01 00 00 00       	mov    eax,0x1
c0019085:	8d 76 00             	lea    esi,[esi+0x0]
c0019088:	81 c4 2c 01 00 00    	add    esp,0x12c
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <FAT::exists(char const*)>:
c0019090:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019096:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001909d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00190a8:	e8 73 76 fe ff       	call   c0000720 <strcpy>
c00190ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190b5:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c00190bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00190bf:	e8 8c f9 ff ff       	call   c0018a50 <FAT::fixFilepath(char*)>
c00190c4:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00190d6:	e8 b6 b6 fe ff       	call   c0004791 <f_stat>
c00190db:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00190e2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00190e9:	85 c0                	test   eax,eax
c00190eb:	75 07                	jne    c00190f4 <FAT::exists(char const*)+0x64>
c00190ed:	b0 01                	mov    al,0x1
c00190ef:	eb 07                	jmp    c00190f8 <FAT::exists(char const*)+0x68>
c00190f1:	8d 76 00             	lea    esi,[esi+0x0]
c00190f4:	b0 00                	mov    al,0x0
c00190f6:	66 90                	xchg   ax,ax
c00190f8:	81 c4 3c 02 00 00    	add    esp,0x23c
c00190fe:	c3                   	ret    
c00190ff:	90                   	nop

c0019100 <isoReadDiscSectorHelper>:
c0019100:	53                   	push   ebx
c0019101:	83 ec 48             	sub    esp,0x48
c0019104:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019108:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001910c:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c0019111:	83 e8 41             	sub    eax,0x41
c0019114:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001911b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001911f:	ba 00 00 00 00       	mov    edx,0x0
c0019124:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019128:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001912c:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0019130:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019134:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019138:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001913c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001913f:	e8 64 40 ff ff       	call   c000d1a8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019144:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019148:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c001914d:	74 09                	je     c0019158 <isoReadDiscSectorHelper+0x58>
c001914f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0019153:	c1 e0 0b             	shl    eax,0xb
c0019156:	eb 08                	jmp    c0019160 <isoReadDiscSectorHelper+0x60>
c0019158:	b8 00 00 00 00       	mov    eax,0x0
c001915d:	8d 76 00             	lea    esi,[esi+0x0]
c0019160:	83 c4 48             	add    esp,0x48
c0019163:	5b                   	pop    ebx
c0019164:	c3                   	ret    
c0019165:	8d 76 00             	lea    esi,[esi+0x0]

c0019168 <iso_kprintf>:
c0019168:	83 ec 1c             	sub    esp,0x1c
c001916b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001916f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019173:	c7 04 24 79 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d79
c001917a:	e8 f7 18 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001917f:	90                   	nop
c0019180:	83 c4 1c             	add    esp,0x1c
c0019183:	c3                   	ret    

c0019184 <iso_kprintfd>:
c0019184:	83 ec 1c             	sub    esp,0x1c
c0019187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001918b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001918f:	c7 04 24 9b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd9b
c0019196:	e8 db 18 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001919b:	90                   	nop
c001919c:	83 c4 1c             	add    esp,0x1c
c001919f:	c3                   	ret    

c00191a0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00191a0:	b8 08 00 00 00       	mov    eax,0x8
c00191a5:	c3                   	ret    

c00191a6 <ISO9660::getName()>:
c00191a6:	b8 cc 13 02 c0       	mov    eax,0xc00213cc
c00191ab:	c3                   	ret    

c00191ac <ISO9660::closeDir(void*)>:
c00191ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00191b2:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00191b5:	90                   	nop

c00191b6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00191b6:	b8 01 00 00 00       	mov    eax,0x1
c00191bb:	c3                   	ret    

c00191bc <ISO9660::unlink(char const*)>:
c00191bc:	b8 01 00 00 00       	mov    eax,0x1
c00191c1:	c3                   	ret    

c00191c2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00191c2:	b8 03 00 00 00       	mov    eax,0x3
c00191c7:	c3                   	ret    

c00191c8 <ISO9660::rename(char const*, char const*)>:
c00191c8:	b8 01 00 00 00       	mov    eax,0x1
c00191cd:	c3                   	ret    

c00191ce <ISO9660::mkdir(char const*)>:
c00191ce:	b8 01 00 00 00       	mov    eax,0x1
c00191d3:	c3                   	ret    

c00191d4 <ISO9660::~ISO9660()>:
c00191d4:	83 ec 1c             	sub    esp,0x1c
c00191d7:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c00191dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191e0:	89 10                	mov    DWORD PTR [eax],edx
c00191e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00191e9:	e8 da 1b ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c00191ee:	90                   	nop
c00191ef:	83 c4 1c             	add    esp,0x1c
c00191f2:	c3                   	ret    
c00191f3:	90                   	nop

c00191f4 <ISO9660::~ISO9660()>:
c00191f4:	83 ec 1c             	sub    esp,0x1c
c00191f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00191fe:	e8 d1 ff ff ff       	call   c00191d4 <ISO9660::~ISO9660()>
c0019203:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c001920b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001920f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019212:	e8 45 17 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0019217:	83 c4 1c             	add    esp,0x1c
c001921a:	c3                   	ret    
c001921b:	90                   	nop

c001921c <ISO9660::exists(char const*)>:
c001921c:	83 ec 18             	sub    esp,0x18
c001921f:	68 e7 13 02 c0       	push   0xc00213e7
c0019224:	e8 9c 75 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019229:	31 c0                	xor    eax,eax
c001922b:	83 c4 1c             	add    esp,0x1c
c001922e:	c3                   	ret    
c001922f:	90                   	nop

c0019230 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019230:	56                   	push   esi
c0019231:	53                   	push   ebx
c0019232:	53                   	push   ebx
c0019233:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019237:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001923b:	85 db                	test   ebx,ebx
c001923d:	0f 84 c2 00 00 00    	je     c0019305 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0019243:	85 f6                	test   esi,esi
c0019245:	0f 84 ba 00 00 00    	je     c0019305 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c001924b:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019250:	b8 03 00 00 00       	mov    eax,0x3
c0019255:	0f 85 af 00 00 00    	jne    c001930a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001925b:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019260:	38 03                	cmp    BYTE PTR [ebx],al
c0019262:	74 1b                	je     c001927f <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0019264:	84 c0                	test   al,al
c0019266:	74 10                	je     c0019278 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0019268:	83 ec 0c             	sub    esp,0xc
c001926b:	68 05 14 02 c0       	push   0xc0021405
c0019270:	e8 50 75 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	8a 03                	mov    al,BYTE PTR [ebx]
c001927a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001927f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019282:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019289:	85 c0                	test   eax,eax
c001928b:	74 09                	je     c0019296 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c001928d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019294:	74 48                	je     c00192de <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0019296:	83 ec 0c             	sub    esp,0xc
c0019299:	68 15 14 02 c0       	push   0xc0021415
c001929e:	e8 d3 17 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00192a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00192a6:	83 c4 10             	add    esp,0x10
c00192a9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00192b0:	85 c0                	test   eax,eax
c00192b2:	74 17                	je     c00192cb <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00192b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00192bb:	83 ec 0c             	sub    esp,0xc
c00192be:	68 35 14 02 c0       	push   0xc0021435
c00192c3:	e8 ae 17 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00192c8:	83 c4 10             	add    esp,0x10
c00192cb:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00192d2:	83 ec 0c             	sub    esp,0xc
c00192d5:	50                   	push   eax
c00192d6:	e8 24 d7 fe ff       	call   c00069ff <init_percd>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	51                   	push   ecx
c00192df:	83 c3 03             	add    ebx,0x3
c00192e2:	51                   	push   ecx
c00192e3:	6a 00                	push   0x0
c00192e5:	53                   	push   ebx
c00192e6:	e8 d7 d1 fe ff       	call   c00064c2 <iso_open>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	89 c2                	mov    edx,eax
c00192f0:	b8 01 00 00 00       	mov    eax,0x1
c00192f5:	83 fa ff             	cmp    edx,0xffffffff
c00192f8:	74 10                	je     c001930a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00192fa:	83 c2 32             	add    edx,0x32
c00192fd:	31 c0                	xor    eax,eax
c00192ff:	01 d2                	add    edx,edx
c0019301:	89 16                	mov    DWORD PTR [esi],edx
c0019303:	eb 05                	jmp    c001930a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019305:	b8 04 00 00 00       	mov    eax,0x4
c001930a:	5a                   	pop    edx
c001930b:	5b                   	pop    ebx
c001930c:	5e                   	pop    esi
c001930d:	c3                   	ret    

c001930e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001930e:	53                   	push   ebx
c001930f:	83 ec 08             	sub    esp,0x8
c0019312:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019316:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001931a:	85 c0                	test   eax,eax
c001931c:	74 2d                	je     c001934b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001931e:	85 db                	test   ebx,ebx
c0019320:	74 29                	je     c001934b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019322:	52                   	push   edx
c0019323:	b9 02 00 00 00       	mov    ecx,0x2
c0019328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932c:	99                   	cdq    
c001932d:	f7 f9                	idiv   ecx
c001932f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019333:	83 e8 32             	sub    eax,0x32
c0019336:	50                   	push   eax
c0019337:	e8 2c d2 fe ff       	call   c0006568 <iso_read>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	89 03                	mov    DWORD PTR [ebx],eax
c0019341:	09 d0                	or     eax,edx
c0019343:	0f 94 c0             	sete   al
c0019346:	0f b6 c0             	movzx  eax,al
c0019349:	eb 05                	jmp    c0019350 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001934b:	b8 04 00 00 00       	mov    eax,0x4
c0019350:	83 c4 08             	add    esp,0x8
c0019353:	5b                   	pop    ebx
c0019354:	c3                   	ret    
c0019355:	90                   	nop

c0019356 <ISO9660::seek(void*, unsigned long long)>:
c0019356:	57                   	push   edi
c0019357:	b8 04 00 00 00       	mov    eax,0x4
c001935c:	56                   	push   esi
c001935d:	51                   	push   ecx
c001935e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019362:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019366:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001936a:	85 d2                	test   edx,edx
c001936c:	74 26                	je     c0019394 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001936e:	89 d0                	mov    eax,edx
c0019370:	b9 02 00 00 00       	mov    ecx,0x2
c0019375:	6a 00                	push   0x0
c0019377:	99                   	cdq    
c0019378:	f7 f9                	idiv   ecx
c001937a:	57                   	push   edi
c001937b:	56                   	push   esi
c001937c:	83 e8 32             	sub    eax,0x32
c001937f:	50                   	push   eax
c0019380:	e8 f9 d2 fe ff       	call   c000667e <iso_seek>
c0019385:	83 c4 10             	add    esp,0x10
c0019388:	31 f0                	xor    eax,esi
c001938a:	31 fa                	xor    edx,edi
c001938c:	09 d0                	or     eax,edx
c001938e:	0f 95 c0             	setne  al
c0019391:	0f b6 c0             	movzx  eax,al
c0019394:	5a                   	pop    edx
c0019395:	5e                   	pop    esi
c0019396:	5f                   	pop    edi
c0019397:	c3                   	ret    

c0019398 <ISO9660::tell(void*, unsigned long long*)>:
c0019398:	53                   	push   ebx
c0019399:	83 ec 08             	sub    esp,0x8
c001939c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00193a4:	85 c0                	test   eax,eax
c00193a6:	74 24                	je     c00193cc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00193a8:	85 db                	test   ebx,ebx
c00193aa:	74 20                	je     c00193cc <ISO9660::tell(void*, unsigned long long*)+0x34>
c00193ac:	b9 02 00 00 00       	mov    ecx,0x2
c00193b1:	99                   	cdq    
c00193b2:	f7 f9                	idiv   ecx
c00193b4:	83 ec 0c             	sub    esp,0xc
c00193b7:	83 e8 32             	sub    eax,0x32
c00193ba:	50                   	push   eax
c00193bb:	e8 42 d3 fe ff       	call   c0006702 <iso_tell>
c00193c0:	83 c4 10             	add    esp,0x10
c00193c3:	89 03                	mov    DWORD PTR [ebx],eax
c00193c5:	31 c0                	xor    eax,eax
c00193c7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00193ca:	eb 05                	jmp    c00193d1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00193cc:	b8 04 00 00 00       	mov    eax,0x4
c00193d1:	83 c4 08             	add    esp,0x8
c00193d4:	5b                   	pop    ebx
c00193d5:	c3                   	ret    

c00193d6 <ISO9660::stat(void*, unsigned long long*)>:
c00193d6:	56                   	push   esi
c00193d7:	53                   	push   ebx
c00193d8:	83 ec 10             	sub    esp,0x10
c00193db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00193e3:	68 59 14 02 c0       	push   0xc0021459
c00193e8:	e8 89 16 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	85 db                	test   ebx,ebx
c00193f2:	74 2a                	je     c001941e <ISO9660::stat(void*, unsigned long long*)+0x48>
c00193f4:	85 f6                	test   esi,esi
c00193f6:	74 26                	je     c001941e <ISO9660::stat(void*, unsigned long long*)+0x48>
c00193f8:	89 d8                	mov    eax,ebx
c00193fa:	b9 02 00 00 00       	mov    ecx,0x2
c00193ff:	99                   	cdq    
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	f7 f9                	idiv   ecx
c0019405:	83 e8 32             	sub    eax,0x32
c0019408:	50                   	push   eax
c0019409:	e8 25 d3 fe ff       	call   c0006733 <iso_total>
c001940e:	83 c4 10             	add    esp,0x10
c0019411:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019418:	89 06                	mov    DWORD PTR [esi],eax
c001941a:	31 c0                	xor    eax,eax
c001941c:	eb 05                	jmp    c0019423 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001941e:	b8 04 00 00 00       	mov    eax,0x4
c0019423:	5a                   	pop    edx
c0019424:	5b                   	pop    ebx
c0019425:	5e                   	pop    esi
c0019426:	c3                   	ret    
c0019427:	90                   	nop

c0019428 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019428:	55                   	push   ebp
c0019429:	57                   	push   edi
c001942a:	56                   	push   esi
c001942b:	53                   	push   ebx
c001942c:	83 ec 18             	sub    esp,0x18
c001942f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019433:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019437:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001943b:	68 61 14 02 c0       	push   0xc0021461
c0019440:	e8 31 16 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	85 ff                	test   edi,edi
c001944a:	0f 94 c2             	sete   dl
c001944d:	85 f6                	test   esi,esi
c001944f:	0f 94 c0             	sete   al
c0019452:	08 c2                	or     dl,al
c0019454:	0f 85 d5 00 00 00    	jne    c001952f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c001945a:	85 db                	test   ebx,ebx
c001945c:	0f 84 cd 00 00 00    	je     c001952f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0019462:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019465:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001946b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019472:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019477:	38 03                	cmp    BYTE PTR [ebx],al
c0019479:	74 1b                	je     c0019496 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c001947b:	84 c0                	test   al,al
c001947d:	74 10                	je     c001948f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c001947f:	83 ec 0c             	sub    esp,0xc
c0019482:	68 05 14 02 c0       	push   0xc0021405
c0019487:	e8 39 73 ff ff       	call   c00107c5 <KePanic(char const*)>
c001948c:	83 c4 10             	add    esp,0x10
c001948f:	8a 03                	mov    al,BYTE PTR [ebx]
c0019491:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019496:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019499:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00194a0:	85 c0                	test   eax,eax
c00194a2:	74 09                	je     c00194ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c00194a4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00194ab:	74 51                	je     c00194fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c00194ad:	83 ec 0c             	sub    esp,0xc
c00194b0:	68 69 14 02 c0       	push   0xc0021469
c00194b5:	e8 bc 15 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00194ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00194c8:	74 21                	je     c00194eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	68 89 14 02 c0       	push   0xc0021489
c00194d2:	e8 9f 15 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00194d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00194e4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00194eb:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00194f2:	83 ec 0c             	sub    esp,0xc
c00194f5:	50                   	push   eax
c00194f6:	e8 04 d5 fe ff       	call   c00069ff <init_percd>
c00194fb:	83 c4 10             	add    esp,0x10
c00194fe:	52                   	push   edx
c00194ff:	83 c3 03             	add    ebx,0x3
c0019502:	52                   	push   edx
c0019503:	6a 00                	push   0x0
c0019505:	53                   	push   ebx
c0019506:	e8 b7 cf fe ff       	call   c00064c2 <iso_open>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	83 f8 ff             	cmp    eax,0xffffffff
c0019511:	89 c5                	mov    ebp,eax
c0019513:	75 21                	jne    c0019536 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019515:	50                   	push   eax
c0019516:	50                   	push   eax
c0019517:	6a 01                	push   0x1
c0019519:	53                   	push   ebx
c001951a:	e8 a3 cf fe ff       	call   c00064c2 <iso_open>
c001951f:	83 c4 10             	add    esp,0x10
c0019522:	ba 02 00 00 00       	mov    edx,0x2
c0019527:	40                   	inc    eax
c0019528:	74 2b                	je     c0019555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001952a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001952d:	eb 24                	jmp    c0019553 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c001952f:	ba 04 00 00 00       	mov    edx,0x4
c0019534:	eb 1f                	jmp    c0019555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	50                   	push   eax
c001953a:	e8 f4 d1 fe ff       	call   c0006733 <iso_total>
c001953f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019546:	89 07                	mov    DWORD PTR [edi],eax
c0019548:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001954b:	e8 fa cf fe ff       	call   c000654a <iso_close>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	31 d2                	xor    edx,edx
c0019555:	83 c4 0c             	add    esp,0xc
c0019558:	89 d0                	mov    eax,edx
c001955a:	5b                   	pop    ebx
c001955b:	5e                   	pop    esi
c001955c:	5f                   	pop    edi
c001955d:	5d                   	pop    ebp
c001955e:	c3                   	ret    
c001955f:	90                   	nop

c0019560 <ISO9660::close(void*)>:
c0019560:	83 ec 0c             	sub    esp,0xc
c0019563:	b8 04 00 00 00       	mov    eax,0x4
c0019568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001956c:	85 d2                	test   edx,edx
c001956e:	74 1b                	je     c001958b <ISO9660::close(void*)+0x2b>
c0019570:	89 d0                	mov    eax,edx
c0019572:	b9 02 00 00 00       	mov    ecx,0x2
c0019577:	99                   	cdq    
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	f7 f9                	idiv   ecx
c001957d:	83 e8 32             	sub    eax,0x32
c0019580:	50                   	push   eax
c0019581:	e8 c4 cf fe ff       	call   c000654a <iso_close>
c0019586:	83 c4 10             	add    esp,0x10
c0019589:	31 c0                	xor    eax,eax
c001958b:	83 c4 0c             	add    esp,0xc
c001958e:	c3                   	ret    
c001958f:	90                   	nop

c0019590 <ISO9660::openDir(char const*, void**)>:
c0019590:	56                   	push   esi
c0019591:	53                   	push   ebx
c0019592:	50                   	push   eax
c0019593:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019597:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001959b:	85 db                	test   ebx,ebx
c001959d:	0f 84 b5 00 00 00    	je     c0019658 <ISO9660::openDir(char const*, void**)+0xc8>
c00195a3:	85 f6                	test   esi,esi
c00195a5:	0f 84 ad 00 00 00    	je     c0019658 <ISO9660::openDir(char const*, void**)+0xc8>
c00195ab:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00195b0:	38 03                	cmp    BYTE PTR [ebx],al
c00195b2:	74 1b                	je     c00195cf <ISO9660::openDir(char const*, void**)+0x3f>
c00195b4:	84 c0                	test   al,al
c00195b6:	74 10                	je     c00195c8 <ISO9660::openDir(char const*, void**)+0x38>
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	68 05 14 02 c0       	push   0xc0021405
c00195c0:	e8 00 72 ff ff       	call   c00107c5 <KePanic(char const*)>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	8a 03                	mov    al,BYTE PTR [ebx]
c00195ca:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195d2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195d9:	85 c0                	test   eax,eax
c00195db:	74 10                	je     c00195ed <ISO9660::openDir(char const*, void**)+0x5d>
c00195dd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00195e4:	74 1a                	je     c0019600 <ISO9660::openDir(char const*, void**)+0x70>
c00195e6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00195ed:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195f4:	83 ec 0c             	sub    esp,0xc
c00195f7:	50                   	push   eax
c00195f8:	e8 02 d4 fe ff       	call   c00069ff <init_percd>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	50                   	push   eax
c0019601:	83 c3 03             	add    ebx,0x3
c0019604:	50                   	push   eax
c0019605:	6a 01                	push   0x1
c0019607:	53                   	push   ebx
c0019608:	e8 b5 ce fe ff       	call   c00064c2 <iso_open>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	83 f8 ff             	cmp    eax,0xffffffff
c0019613:	89 c3                	mov    ebx,eax
c0019615:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001961a:	75 1c                	jne    c0019638 <ISO9660::openDir(char const*, void**)+0xa8>
c001961c:	53                   	push   ebx
c001961d:	53                   	push   ebx
c001961e:	68 ad 14 02 c0       	push   0xc00214ad
c0019623:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019629:	e8 8a f4 fe ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001962e:	83 c4 10             	add    esp,0x10
c0019631:	b8 01 00 00 00       	mov    eax,0x1
c0019636:	eb 25                	jmp    c001965d <ISO9660::openDir(char const*, void**)+0xcd>
c0019638:	51                   	push   ecx
c0019639:	01 db                	add    ebx,ebx
c001963b:	51                   	push   ecx
c001963c:	83 c3 65             	add    ebx,0x65
c001963f:	68 c0 14 02 c0       	push   0xc00214c0
c0019644:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001964a:	e8 69 f4 fe ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001964f:	83 c4 10             	add    esp,0x10
c0019652:	31 c0                	xor    eax,eax
c0019654:	89 1e                	mov    DWORD PTR [esi],ebx
c0019656:	eb 05                	jmp    c001965d <ISO9660::openDir(char const*, void**)+0xcd>
c0019658:	b8 04 00 00 00       	mov    eax,0x4
c001965d:	5a                   	pop    edx
c001965e:	5b                   	pop    ebx
c001965f:	5e                   	pop    esi
c0019660:	c3                   	ret    
c0019661:	90                   	nop

c0019662 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019662:	55                   	push   ebp
c0019663:	57                   	push   edi
c0019664:	56                   	push   esi
c0019665:	53                   	push   ebx
c0019666:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001966c:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019673:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001967a:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019681:	85 db                	test   ebx,ebx
c0019683:	0f 84 e4 00 00 00    	je     c001976d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019689:	85 ed                	test   ebp,ebp
c001968b:	0f 84 dc 00 00 00    	je     c001976d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019691:	83 ec 0c             	sub    esp,0xc
c0019694:	68 d3 14 02 c0       	push   0xc00214d3
c0019699:	e8 d8 13 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001969e:	89 d8                	mov    eax,ebx
c00196a0:	b9 02 00 00 00       	mov    ecx,0x2
c00196a5:	99                   	cdq    
c00196a6:	f7 f9                	idiv   ecx
c00196a8:	83 e8 32             	sub    eax,0x32
c00196ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00196ae:	e8 d1 d0 fe ff       	call   c0006784 <iso_readdir>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	85 c0                	test   eax,eax
c00196b8:	89 c3                	mov    ebx,eax
c00196ba:	75 38                	jne    c00196f4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00196bc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00196c1:	53                   	push   ebx
c00196c2:	53                   	push   ebx
c00196c3:	68 de 14 02 c0       	push   0xc00214de
c00196c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00196ce:	e8 e5 f3 fe ff       	call   c0008ab8 <VgaText::puts(char const*)>
c00196d3:	83 c4 0c             	add    esp,0xc
c00196d6:	68 10 01 00 00       	push   0x110
c00196db:	6a 00                	push   0x0
c00196dd:	57                   	push   edi
c00196de:	e8 9d 6e fe ff       	call   c0000580 <memset>
c00196e3:	83 c4 10             	add    esp,0x10
c00196e6:	b8 01 00 00 00       	mov    eax,0x1
c00196eb:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00196f2:	eb 7e                	jmp    c0019772 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00196f4:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00196fa:	8d 70 08             	lea    esi,[eax+0x8]
c00196fd:	83 ec 0c             	sub    esp,0xc
c0019700:	56                   	push   esi
c0019701:	e8 1a 6f fe ff       	call   c0000620 <strlen>
c0019706:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001970e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019712:	83 c4 10             	add    esp,0x10
c0019715:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019719:	75 0a                	jne    c0019725 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001971b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001971e:	b8 02 00 00 00       	mov    eax,0x2
c0019723:	74 05                	je     c001972a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019725:	b8 01 00 00 00       	mov    eax,0x1
c001972a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001972e:	50                   	push   eax
c001972f:	50                   	push   eax
c0019730:	56                   	push   esi
c0019731:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019735:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019739:	50                   	push   eax
c001973a:	e8 e1 6f fe ff       	call   c0000720 <strcpy>
c001973f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019746:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019748:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001974f:	5a                   	pop    edx
c0019750:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019755:	59                   	pop    ecx
c0019756:	68 f1 14 02 c0       	push   0xc00214f1
c001975b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019761:	e8 52 f3 fe ff       	call   c0008ab8 <VgaText::puts(char const*)>
c0019766:	83 c4 10             	add    esp,0x10
c0019769:	31 c0                	xor    eax,eax
c001976b:	eb 05                	jmp    c0019772 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001976d:	b8 04 00 00 00       	mov    eax,0x4
c0019772:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019778:	5b                   	pop    ebx
c0019779:	5e                   	pop    esi
c001977a:	5f                   	pop    edi
c001977b:	5d                   	pop    ebp
c001977c:	c3                   	ret    

c001977d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001977d:	57                   	push   edi
c001977e:	56                   	push   esi
c001977f:	53                   	push   ebx
c0019780:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019784:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c001978a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001978e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0019792:	75 08                	jne    c001979c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019794:	38 1d 44 20 02 c0    	cmp    BYTE PTR ds:0xc0022044,bl
c001979a:	74 4a                	je     c00197e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	31 d2                	xor    edx,edx
c00197a1:	68 40 83 02 c0       	push   0xc0028340
c00197a6:	0f be c3             	movsx  eax,bl
c00197a9:	6a 01                	push   0x1
c00197ab:	52                   	push   edx
c00197ac:	56                   	push   esi
c00197ad:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c00197b4:	e8 ef 39 ff ff       	call   c000d1a8 <LogicalDisk::read(unsigned long long, int, void*)>
c00197b9:	83 c4 20             	add    esp,0x20
c00197bc:	85 c0                	test   eax,eax
c00197be:	75 0e                	jne    c00197ce <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00197c0:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00197c6:	88 1d 44 20 02 c0    	mov    BYTE PTR ds:0xc0022044,bl
c00197cc:	eb 18                	jmp    c00197e6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00197ce:	50                   	push   eax
c00197cf:	68 00 08 00 00       	push   0x800
c00197d4:	6a 00                	push   0x0
c00197d6:	57                   	push   edi
c00197d7:	e8 a4 6d fe ff       	call   c0000580 <memset>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	b8 01 00 00 00       	mov    eax,0x1
c00197e4:	eb 0e                	jmp    c00197f4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00197e6:	be 40 83 02 c0       	mov    esi,0xc0028340
c00197eb:	b9 00 08 00 00       	mov    ecx,0x800
c00197f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197f2:	31 c0                	xor    eax,eax
c00197f4:	5b                   	pop    ebx
c00197f5:	5e                   	pop    esi
c00197f6:	5f                   	pop    edi
c00197f7:	c3                   	ret    

c00197f8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00197f8:	53                   	push   ebx
c00197f9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00197ff:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019809:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c0019810:	80 c3 41             	add    bl,0x41
c0019813:	0f be db             	movsx  ebx,bl
c0019816:	53                   	push   ebx
c0019817:	8d 44 24 08          	lea    eax,[esp+0x8]
c001981b:	50                   	push   eax
c001981c:	6a 10                	push   0x10
c001981e:	e8 5a ff ff ff       	call   c001977d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	31 d2                	xor    edx,edx
c0019828:	85 c0                	test   eax,eax
c001982a:	75 33                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001982c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019831:	75 2c                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019833:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019838:	75 25                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001983a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001983f:	75 1e                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019841:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019846:	75 17                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019848:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001984d:	75 10                	jne    c001985f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001984f:	83 ec 0c             	sub    esp,0xc
c0019852:	53                   	push   ebx
c0019853:	e8 a7 d1 fe ff       	call   c00069ff <init_percd>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	40                   	inc    eax
c001985c:	0f 95 c2             	setne  dl
c001985f:	81 c4 08 08 00 00    	add    esp,0x808
c0019865:	88 d0                	mov    al,dl
c0019867:	5b                   	pop    ebx
c0019868:	c3                   	ret    
c0019869:	90                   	nop

c001986a <ISO9660::ISO9660()>:
c001986a:	83 ec 1c             	sub    esp,0x1c
c001986d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019871:	89 04 24             	mov    DWORD PTR [esp],eax
c0019874:	e8 2b 15 ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c0019879:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c001987e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019882:	89 10                	mov    DWORD PTR [eax],edx
c0019884:	e8 88 d2 fe ff       	call   c0006b11 <fs_iso9660_init>
c0019889:	90                   	nop
c001988a:	83 c4 1c             	add    esp,0x1c
c001988d:	c3                   	ret    

c001988e <SoundCard::beginPlayback()>:
c001988e:	c7 44 24 04 6c 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002156c
c0019896:	e9 2a 6f ff ff       	jmp    c00107c5 <KePanic(char const*)>
c001989b:	90                   	nop

c001989c <SoundCard::stopPlayback()>:
c001989c:	c7 44 24 04 6c 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002156c
c00198a4:	e9 1c 6f ff ff       	jmp    c00107c5 <KePanic(char const*)>
c00198a9:	90                   	nop

c00198aa <SoundCard::SoundCard(char const*)>:
c00198aa:	83 ec 2c             	sub    esp,0x2c
c00198ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00198b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00198b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00198bc:	e8 79 27 ff ff       	call   c000c03a <Device::Device(char const*)>
c00198c1:	ba b8 15 02 c0       	mov    edx,0xc00215b8
c00198c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198ca:	89 10                	mov    DWORD PTR [eax],edx
c00198cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198d0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00198d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198db:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00198e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198e9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00198f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198f7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019905:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001990f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019917:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c001991c:	7f 19                	jg     c0019937 <SoundCard::SoundCard(char const*)+0x8d>
c001991e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019922:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019926:	83 c2 54             	add    edx,0x54
c0019929:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019931:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0019935:	eb e0                	jmp    c0019917 <SoundCard::SoundCard(char const*)+0x6d>
c0019937:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001993b:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019942:	90                   	nop
c0019943:	83 c4 2c             	add    esp,0x2c
c0019946:	c3                   	ret    
c0019947:	90                   	nop

c0019948 <SoundCard::~SoundCard()>:
c0019948:	83 ec 1c             	sub    esp,0x1c
c001994b:	ba b8 15 02 c0       	mov    edx,0xc00215b8
c0019950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019954:	89 10                	mov    DWORD PTR [eax],edx
c0019956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001995a:	89 04 24             	mov    DWORD PTR [esp],eax
c001995d:	e8 44 24 ff ff       	call   c000bda6 <Device::~Device()>
c0019962:	90                   	nop
c0019963:	83 c4 1c             	add    esp,0x1c
c0019966:	c3                   	ret    
c0019967:	90                   	nop

c0019968 <SoundCard::~SoundCard()>:
c0019968:	83 ec 1c             	sub    esp,0x1c
c001996b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001996f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019972:	e8 d1 ff ff ff       	call   c0019948 <SoundCard::~SoundCard()>
c0019977:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c001997f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019983:	89 04 24             	mov    DWORD PTR [esp],eax
c0019986:	e8 d1 0f ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001998b:	83 c4 1c             	add    esp,0x1c
c001998e:	c3                   	ret    
c001998f:	90                   	nop

c0019990 <SoundCard::configureRates(int, int, int)>:
c0019990:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019994:	31 c0                	xor    eax,eax
c0019996:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001999d:	75 20                	jne    c00199bf <SoundCard::configureRates(int, int, int)+0x2f>
c001999f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00199a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ad:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00199b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199b7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00199bd:	b0 01                	mov    al,0x1
c00199bf:	c3                   	ret    

c00199c0 <SoundCard::getSamples16(int, short*)>:
c00199c0:	55                   	push   ebp
c00199c1:	57                   	push   edi
c00199c2:	31 ff                	xor    edi,edi
c00199c4:	56                   	push   esi
c00199c5:	53                   	push   ebx
c00199c6:	31 db                	xor    ebx,ebx
c00199c8:	83 ec 10             	sub    esp,0x10
c00199cb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00199cf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00199d3:	8d 04 36             	lea    eax,[esi+esi*1]
c00199d6:	50                   	push   eax
c00199d7:	6a 00                	push   0x0
c00199d9:	55                   	push   ebp
c00199da:	e8 a1 6b fe ff       	call   c0000580 <memset>
c00199df:	83 c4 10             	add    esp,0x10
c00199e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199e6:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c00199ed:	85 c0                	test   eax,eax
c00199ef:	74 1a                	je     c0019a0b <SoundCard::getSamples16(int, short*)+0x4b>
c00199f1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00199f5:	75 14                	jne    c0019a0b <SoundCard::getSamples16(int, short*)+0x4b>
c00199f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00199fb:	55                   	push   ebp
c00199fc:	56                   	push   esi
c00199fd:	50                   	push   eax
c00199fe:	e8 e5 02 00 00       	call   c0019ce8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	39 c3                	cmp    ebx,eax
c0019a08:	0f 4c d8             	cmovl  ebx,eax
c0019a0b:	47                   	inc    edi
c0019a0c:	83 ff 20             	cmp    edi,0x20
c0019a0f:	75 d1                	jne    c00199e2 <SoundCard::getSamples16(int, short*)+0x22>
c0019a11:	83 c4 0c             	add    esp,0xc
c0019a14:	89 d8                	mov    eax,ebx
c0019a16:	5b                   	pop    ebx
c0019a17:	5e                   	pop    esi
c0019a18:	5f                   	pop    edi
c0019a19:	5d                   	pop    ebp
c0019a1a:	c3                   	ret    
c0019a1b:	90                   	nop

c0019a1c <SoundCard::getSamples32(int, int*)>:
c0019a1c:	55                   	push   ebp
c0019a1d:	57                   	push   edi
c0019a1e:	31 ff                	xor    edi,edi
c0019a20:	56                   	push   esi
c0019a21:	31 f6                	xor    esi,esi
c0019a23:	53                   	push   ebx
c0019a24:	83 ec 10             	sub    esp,0x10
c0019a27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019a2f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019a33:	c1 e0 02             	shl    eax,0x2
c0019a36:	50                   	push   eax
c0019a37:	6a 00                	push   0x0
c0019a39:	55                   	push   ebp
c0019a3a:	e8 41 6b fe ff       	call   c0000580 <memset>
c0019a3f:	83 c4 10             	add    esp,0x10
c0019a42:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019a49:	85 c0                	test   eax,eax
c0019a4b:	74 1a                	je     c0019a67 <SoundCard::getSamples32(int, int*)+0x4b>
c0019a4d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019a51:	75 14                	jne    c0019a67 <SoundCard::getSamples32(int, int*)+0x4b>
c0019a53:	53                   	push   ebx
c0019a54:	55                   	push   ebp
c0019a55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a59:	50                   	push   eax
c0019a5a:	e8 45 03 00 00       	call   c0019da4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019a5f:	83 c4 10             	add    esp,0x10
c0019a62:	39 c6                	cmp    esi,eax
c0019a64:	0f 4c f0             	cmovl  esi,eax
c0019a67:	47                   	inc    edi
c0019a68:	83 ff 20             	cmp    edi,0x20
c0019a6b:	75 d5                	jne    c0019a42 <SoundCard::getSamples32(int, int*)+0x26>
c0019a6d:	85 f6                	test   esi,esi
c0019a6f:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019a75:	75 0f                	jne    c0019a86 <SoundCard::getSamples32(int, int*)+0x6a>
c0019a77:	84 c0                	test   al,al
c0019a79:	74 1b                	je     c0019a96 <SoundCard::getSamples32(int, int*)+0x7a>
c0019a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a7d:	83 ec 0c             	sub    esp,0xc
c0019a80:	53                   	push   ebx
c0019a81:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019a84:	eb 0d                	jmp    c0019a93 <SoundCard::getSamples32(int, int*)+0x77>
c0019a86:	84 c0                	test   al,al
c0019a88:	75 0c                	jne    c0019a96 <SoundCard::getSamples32(int, int*)+0x7a>
c0019a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	53                   	push   ebx
c0019a90:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	83 c4 0c             	add    esp,0xc
c0019a99:	89 f0                	mov    eax,esi
c0019a9b:	5b                   	pop    ebx
c0019a9c:	5e                   	pop    esi
c0019a9d:	5f                   	pop    edi
c0019a9e:	5d                   	pop    ebp
c0019a9f:	c3                   	ret    

c0019aa0 <SoundCard::addChannel(SoundPort*)>:
c0019aa0:	83 ec 0c             	sub    esp,0xc
c0019aa3:	31 c0                	xor    eax,eax
c0019aa5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aa9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019ab1:	74 1b                	je     c0019ace <SoundCard::addChannel(SoundPort*)+0x2e>
c0019ab3:	40                   	inc    eax
c0019ab4:	83 f8 20             	cmp    eax,0x20
c0019ab7:	75 f0                	jne    c0019aa9 <SoundCard::addChannel(SoundPort*)+0x9>
c0019ab9:	83 ec 0c             	sub    esp,0xc
c0019abc:	68 91 15 02 c0       	push   0xc0021591
c0019ac1:	e8 ff 6c ff ff       	call   c00107c5 <KePanic(char const*)>
c0019ac6:	83 c4 10             	add    esp,0x10
c0019ac9:	83 c8 ff             	or     eax,0xffffffff
c0019acc:	eb 0b                	jmp    c0019ad9 <SoundCard::addChannel(SoundPort*)+0x39>
c0019ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ad2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019ad9:	83 c4 0c             	add    esp,0xc
c0019adc:	c3                   	ret    
c0019add:	90                   	nop

c0019ade <SoundCard::removeChannel(int)>:
c0019ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ae6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019af1:	c3                   	ret    
c0019af2:	66 90                	xchg   ax,ax

c0019af4 <SoundPort::SoundPort(int, int, int, int)>:
c0019af4:	83 ec 1c             	sub    esp,0x1c
c0019af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b06:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019b12:	89 10                	mov    DWORD PTR [eax],edx
c0019b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b18:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019b1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b23:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019b27:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019b2a:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0019b2f:	75 13                	jne    c0019b44 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b37:	05 a0 0f 00 00       	add    eax,0xfa0
c0019b3c:	01 c0                	add    eax,eax
c0019b3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019b42:	66 90                	xchg   ax,ax
c0019b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b48:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b53:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019b5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b5e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019b61:	c1 e0 02             	shl    eax,0x2
c0019b64:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b67:	e8 9a df fe ff       	call   c0007b06 <malloc>
c0019b6c:	89 c2                	mov    edx,eax
c0019b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b72:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019b75:	90                   	nop
c0019b76:	83 c4 1c             	add    esp,0x1c
c0019b79:	c3                   	ret    
c0019b7a:	66 90                	xchg   ax,ax

c0019b7c <SoundPort::~SoundPort()>:
c0019b7c:	83 ec 1c             	sub    esp,0x1c
c0019b7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019b86:	85 c0                	test   eax,eax
c0019b88:	74 1a                	je     c0019ba4 <SoundPort::~SoundPort()+0x28>
c0019b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019b91:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b94:	e8 80 df fe ff       	call   c0007b19 <free>
c0019b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b9d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019ba4:	90                   	nop
c0019ba5:	83 c4 1c             	add    esp,0x1c
c0019ba8:	c3                   	ret    
c0019ba9:	90                   	nop
c0019baa:	66 90                	xchg   ax,ax

c0019bac <SoundPort::unpause()>:
c0019bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019bb4:	c3                   	ret    
c0019bb5:	90                   	nop
c0019bb6:	66 90                	xchg   ax,ax

c0019bb8 <SoundPort::pause()>:
c0019bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019bc0:	c3                   	ret    
c0019bc1:	90                   	nop
c0019bc2:	66 90                	xchg   ax,ax

c0019bc4 <SoundPort::getBufferUsed()>:
c0019bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019bcb:	c3                   	ret    

c0019bcc <SoundPort::getBufferSize()>:
c0019bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019bd3:	c3                   	ret    

c0019bd4 <SoundPort::buffer16(short*, int)>:
c0019bd4:	55                   	push   ebp
c0019bd5:	57                   	push   edi
c0019bd6:	56                   	push   esi
c0019bd7:	53                   	push   ebx
c0019bd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019bdc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019be0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019be3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019be6:	74 68                	je     c0019c50 <SoundPort::buffer16(short*, int)+0x7c>
c0019be8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bec:	85 c9                	test   ecx,ecx
c0019bee:	7e 60                	jle    c0019c50 <SoundPort::buffer16(short*, int)+0x7c>
c0019bf0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019bf4:	8d 70 01             	lea    esi,[eax+0x1]
c0019bf7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019bfa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019bfd:	c1 e1 0f             	shl    ecx,0xf
c0019c00:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019c03:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c06:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c09:	74 4d                	je     c0019c58 <SoundPort::buffer16(short*, int)+0x84>
c0019c0b:	31 f6                	xor    esi,esi
c0019c0d:	eb 21                	jmp    c0019c30 <SoundPort::buffer16(short*, int)+0x5c>
c0019c0f:	90                   	nop
c0019c10:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019c15:	8d 79 01             	lea    edi,[ecx+0x1]
c0019c18:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019c1b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019c1e:	c1 e3 0f             	shl    ebx,0xf
c0019c21:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019c24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c2a:	74 1c                	je     c0019c48 <SoundPort::buffer16(short*, int)+0x74>
c0019c2c:	89 c6                	mov    esi,eax
c0019c2e:	66 90                	xchg   ax,ax
c0019c30:	8d 46 01             	lea    eax,[esi+0x1]
c0019c33:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019c37:	75 d7                	jne    c0019c10 <SoundPort::buffer16(short*, int)+0x3c>
c0019c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c40:	5b                   	pop    ebx
c0019c41:	5e                   	pop    esi
c0019c42:	5f                   	pop    edi
c0019c43:	5d                   	pop    ebp
c0019c44:	c3                   	ret    
c0019c45:	8d 76 00             	lea    esi,[esi+0x0]
c0019c48:	5b                   	pop    ebx
c0019c49:	8d 46 02             	lea    eax,[esi+0x2]
c0019c4c:	5e                   	pop    esi
c0019c4d:	5f                   	pop    edi
c0019c4e:	5d                   	pop    ebp
c0019c4f:	c3                   	ret    
c0019c50:	5b                   	pop    ebx
c0019c51:	31 c0                	xor    eax,eax
c0019c53:	5e                   	pop    esi
c0019c54:	5f                   	pop    edi
c0019c55:	5d                   	pop    ebp
c0019c56:	c3                   	ret    
c0019c57:	90                   	nop
c0019c58:	b8 01 00 00 00       	mov    eax,0x1
c0019c5d:	eb e1                	jmp    c0019c40 <SoundPort::buffer16(short*, int)+0x6c>
c0019c5f:	90                   	nop

c0019c60 <SoundPort::buffer32(int*, int)>:
c0019c60:	55                   	push   ebp
c0019c61:	57                   	push   edi
c0019c62:	56                   	push   esi
c0019c63:	53                   	push   ebx
c0019c64:	83 ec 04             	sub    esp,0x4
c0019c67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019c73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c7c:	74 5a                	je     c0019cd8 <SoundPort::buffer32(int*, int)+0x78>
c0019c7e:	85 c0                	test   eax,eax
c0019c80:	7e 56                	jle    c0019cd8 <SoundPort::buffer32(int*, int)+0x78>
c0019c82:	8d 71 01             	lea    esi,[ecx+0x1]
c0019c85:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019c88:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019c8b:	8b 37                	mov    esi,DWORD PTR [edi]
c0019c8d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019c90:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c93:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c96:	74 48                	je     c0019ce0 <SoundPort::buffer32(int*, int)+0x80>
c0019c98:	31 f6                	xor    esi,esi
c0019c9a:	eb 1c                	jmp    c0019cb8 <SoundPort::buffer32(int*, int)+0x58>
c0019c9c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019c9f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019ca2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019ca5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019ca8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019cac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019caf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019cb2:	74 18                	je     c0019ccc <SoundPort::buffer32(int*, int)+0x6c>
c0019cb4:	89 de                	mov    esi,ebx
c0019cb6:	66 90                	xchg   ax,ax
c0019cb8:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019cbb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019cbe:	75 dc                	jne    c0019c9c <SoundPort::buffer32(int*, int)+0x3c>
c0019cc0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019cc3:	90                   	nop
c0019cc4:	5a                   	pop    edx
c0019cc5:	5b                   	pop    ebx
c0019cc6:	5e                   	pop    esi
c0019cc7:	5f                   	pop    edi
c0019cc8:	5d                   	pop    ebp
c0019cc9:	c3                   	ret    
c0019cca:	66 90                	xchg   ax,ax
c0019ccc:	5a                   	pop    edx
c0019ccd:	8d 46 02             	lea    eax,[esi+0x2]
c0019cd0:	5b                   	pop    ebx
c0019cd1:	5e                   	pop    esi
c0019cd2:	5f                   	pop    edi
c0019cd3:	5d                   	pop    ebp
c0019cd4:	c3                   	ret    
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	5a                   	pop    edx
c0019cd9:	31 c0                	xor    eax,eax
c0019cdb:	5b                   	pop    ebx
c0019cdc:	5e                   	pop    esi
c0019cdd:	5f                   	pop    edi
c0019cde:	5d                   	pop    ebp
c0019cdf:	c3                   	ret    
c0019ce0:	b8 01 00 00 00       	mov    eax,0x1
c0019ce5:	eb dd                	jmp    c0019cc4 <SoundPort::buffer32(int*, int)+0x64>
c0019ce7:	90                   	nop

c0019ce8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019ce8:	55                   	push   ebp
c0019ce9:	57                   	push   edi
c0019cea:	56                   	push   esi
c0019ceb:	53                   	push   ebx
c0019cec:	83 ec 1c             	sub    esp,0x1c
c0019cef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019cf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019cf7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019cfb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019cff:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019d05:	39 03                	cmp    DWORD PTR [ebx],eax
c0019d07:	74 0f                	je     c0019d18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c0019d09:	c7 04 24 e4 15 02 c0 	mov    DWORD PTR [esp],0xc00215e4
c0019d10:	e8 b0 6a ff ff       	call   c00107c5 <KePanic(char const*)>
c0019d15:	8d 76 00             	lea    esi,[esi+0x0]
c0019d18:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019d1e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019d21:	74 0d                	je     c0019d30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019d23:	c7 04 24 23 16 02 c0 	mov    DWORD PTR [esp],0xc0021623
c0019d2a:	e8 96 6a ff ff       	call   c00107c5 <KePanic(char const*)>
c0019d2f:	90                   	nop
c0019d30:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019d36:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019d39:	74 0d                	je     c0019d48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019d3b:	c7 04 24 23 16 02 c0 	mov    DWORD PTR [esp],0xc0021623
c0019d42:	e8 7e 6a ff ff       	call   c00107c5 <KePanic(char const*)>
c0019d47:	90                   	nop
c0019d48:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019d4b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019d4f:	85 f6                	test   esi,esi
c0019d51:	7e 25                	jle    c0019d78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019d53:	31 c0                	xor    eax,eax
c0019d55:	8d 76 00             	lea    esi,[esi+0x0]
c0019d58:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d5b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019d5e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019d64:	85 c9                	test   ecx,ecx
c0019d66:	0f 49 d1             	cmovns edx,ecx
c0019d69:	c1 fa 0f             	sar    edx,0xf
c0019d6c:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c0019d70:	40                   	inc    eax
c0019d71:	39 f0                	cmp    eax,esi
c0019d73:	75 e3                	jne    c0019d58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019d7b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d7e:	29 f0                	sub    eax,esi
c0019d80:	89 14 24             	mov    DWORD PTR [esp],edx
c0019d83:	c1 e0 02             	shl    eax,0x2
c0019d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d8a:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019d8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d91:	e8 3a 66 fe ff       	call   c00003d0 <memmove>
c0019d96:	89 f0                	mov    eax,esi
c0019d98:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019d9b:	83 c4 1c             	add    esp,0x1c
c0019d9e:	5b                   	pop    ebx
c0019d9f:	5e                   	pop    esi
c0019da0:	5f                   	pop    edi
c0019da1:	5d                   	pop    ebp
c0019da2:	c3                   	ret    
c0019da3:	90                   	nop

c0019da4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019da4:	55                   	push   ebp
c0019da5:	57                   	push   edi
c0019da6:	56                   	push   esi
c0019da7:	53                   	push   ebx
c0019da8:	83 ec 1c             	sub    esp,0x1c
c0019dab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019daf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019db3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019db7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019dbb:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019dc1:	39 03                	cmp    DWORD PTR [ebx],eax
c0019dc3:	74 0f                	je     c0019dd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c0019dc5:	c7 04 24 04 16 02 c0 	mov    DWORD PTR [esp],0xc0021604
c0019dcc:	e8 f4 69 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019dda:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ddd:	74 0d                	je     c0019dec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019ddf:	c7 04 24 3f 16 02 c0 	mov    DWORD PTR [esp],0xc002163f
c0019de6:	e8 da 69 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019deb:	90                   	nop
c0019dec:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019df2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019df5:	74 0d                	je     c0019e04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c0019df7:	c7 04 24 3f 16 02 c0 	mov    DWORD PTR [esp],0xc002163f
c0019dfe:	e8 c2 69 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019e03:	90                   	nop
c0019e04:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019e07:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019e0b:	85 ff                	test   edi,edi
c0019e0d:	7e 19                	jle    c0019e28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019e0f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019e16:	31 c0                	xor    eax,eax
c0019e18:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e1b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019e1e:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019e21:	83 c0 04             	add    eax,0x4
c0019e24:	39 c1                	cmp    ecx,eax
c0019e26:	75 f0                	jne    c0019e18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019e28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019e2b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e2e:	29 f8                	sub    eax,edi
c0019e30:	89 14 24             	mov    DWORD PTR [esp],edx
c0019e33:	c1 e0 02             	shl    eax,0x2
c0019e36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e3a:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019e3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e41:	e8 8a 65 fe ff       	call   c00003d0 <memmove>
c0019e46:	89 f8                	mov    eax,edi
c0019e48:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019e4b:	83 c4 1c             	add    esp,0x1c
c0019e4e:	5b                   	pop    ebx
c0019e4f:	5e                   	pop    esi
c0019e50:	5f                   	pop    edi
c0019e51:	5d                   	pop    ebp
c0019e52:	c3                   	ret    
c0019e53:	90                   	nop

c0019e54 <PCI::open(int, int, void*)>:
c0019e54:	83 ec 18             	sub    esp,0x18
c0019e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019e5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e67:	50                   	push   eax
c0019e68:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019e6b:	31 c0                	xor    eax,eax
c0019e6d:	83 c4 1c             	add    esp,0x1c
c0019e70:	c3                   	ret    
c0019e71:	90                   	nop

c0019e72 <PCI::close(int, int, void*)>:
c0019e72:	31 c0                	xor    eax,eax
c0019e74:	c3                   	ret    
c0019e75:	90                   	nop

c0019e76 <PCI::PCI()>:
c0019e76:	83 ec 1c             	sub    esp,0x1c
c0019e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e7d:	c7 44 24 04 5b 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002165b
c0019e85:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e88:	e8 7f 19 ff ff       	call   c000b80c <Bus::Bus(char const*)>
c0019e8d:	ba 04 17 02 c0       	mov    edx,0xc0021704
c0019e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e96:	89 10                	mov    DWORD PTR [eax],edx
c0019e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e9c:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eaa:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eb3:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019eba:	0f b6 d0             	movzx  edx,al
c0019ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ec1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ecc:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019ed3:	0f b6 d0             	movzx  edx,al
c0019ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eda:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ee3:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019eea:	88 c1                	mov    cl,al
c0019eec:	fe c1                	inc    cl
c0019eee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ef2:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0019ef8:	0f b6 d0             	movzx  edx,al
c0019efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eff:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0019f04:	80 c9 c0             	or     cl,0xc0
c0019f07:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019f0b:	90                   	nop
c0019f0c:	83 c4 1c             	add    esp,0x1c
c0019f0f:	c3                   	ret    

c0019f10 <PCI::readBAR8(unsigned int, int)>:
c0019f10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f18:	f6 c2 01             	test   dl,0x1
c0019f1b:	74 07                	je     c0019f24 <PCI::readBAR8(unsigned int, int)+0x14>
c0019f1d:	83 e2 fc             	and    edx,0xfffffffc
c0019f20:	01 c2                	add    edx,eax
c0019f22:	ec                   	in     al,dx
c0019f23:	c3                   	ret    
c0019f24:	83 e2 f0             	and    edx,0xfffffff0
c0019f27:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019f2a:	c3                   	ret    
c0019f2b:	90                   	nop

c0019f2c <PCI::readBAR16(unsigned int, int)>:
c0019f2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f34:	f6 c2 01             	test   dl,0x1
c0019f37:	74 0b                	je     c0019f44 <PCI::readBAR16(unsigned int, int)+0x18>
c0019f39:	83 e2 fc             	and    edx,0xfffffffc
c0019f3c:	01 c2                	add    edx,eax
c0019f3e:	66 ed                	in     ax,dx
c0019f40:	0f b7 c0             	movzx  eax,ax
c0019f43:	c3                   	ret    
c0019f44:	83 e2 f0             	and    edx,0xfffffff0
c0019f47:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c0019f4b:	c3                   	ret    

c0019f4c <PCI::readBAR32(unsigned int, int)>:
c0019f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f54:	f6 c2 01             	test   dl,0x1
c0019f57:	74 07                	je     c0019f60 <PCI::readBAR32(unsigned int, int)+0x14>
c0019f59:	83 e2 fc             	and    edx,0xfffffffc
c0019f5c:	01 c2                	add    edx,eax
c0019f5e:	ed                   	in     eax,dx
c0019f5f:	c3                   	ret    
c0019f60:	83 e2 f0             	and    edx,0xfffffff0
c0019f63:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019f66:	c3                   	ret    
c0019f67:	90                   	nop

c0019f68 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019f68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f74:	f6 c2 01             	test   dl,0x1
c0019f77:	74 07                	je     c0019f80 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019f79:	83 e2 fc             	and    edx,0xfffffffc
c0019f7c:	01 ca                	add    edx,ecx
c0019f7e:	ee                   	out    dx,al
c0019f7f:	c3                   	ret    
c0019f80:	83 e2 f0             	and    edx,0xfffffff0
c0019f83:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019f86:	c3                   	ret    
c0019f87:	90                   	nop

c0019f88 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019f88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f90:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0019f95:	f6 c2 01             	test   dl,0x1
c0019f98:	74 08                	je     c0019fa2 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c0019f9a:	83 e2 fc             	and    edx,0xfffffffc
c0019f9d:	01 ca                	add    edx,ecx
c0019f9f:	66 ef                	out    dx,ax
c0019fa1:	c3                   	ret    
c0019fa2:	83 e2 f0             	and    edx,0xfffffff0
c0019fa5:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019fa9:	c3                   	ret    

c0019faa <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019faa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fb6:	f6 c2 01             	test   dl,0x1
c0019fb9:	74 07                	je     c0019fc2 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019fbb:	83 e2 fc             	and    edx,0xfffffffc
c0019fbe:	01 ca                	add    edx,ecx
c0019fc0:	ef                   	out    dx,eax
c0019fc1:	c3                   	ret    
c0019fc2:	83 e2 f0             	and    edx,0xfffffff0
c0019fc5:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019fc8:	c3                   	ret    
c0019fc9:	90                   	nop

c0019fca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019fca:	53                   	push   ebx
c0019fcb:	83 ec 18             	sub    esp,0x18
c0019fce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019fd2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fda:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019fde:	80 fb 07             	cmp    bl,0x7
c0019fe1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019fe5:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019fe9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fed:	76 10                	jbe    c0019fff <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c0019fef:	83 ec 0c             	sub    esp,0xc
c0019ff2:	68 63 16 02 c0       	push   0xc0021663
c0019ff7:	e8 c9 67 ff ff       	call   c00107c5 <KePanic(char const*)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c001a004:	76 10                	jbe    c001a016 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c001a006:	83 ec 0c             	sub    esp,0xc
c001a009:	68 93 16 02 c0       	push   0xc0021693
c001a00e:	e8 b2 67 ff ff       	call   c00107c5 <KePanic(char const*)>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	88 d8                	mov    al,bl
c001a018:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a01d:	00 c0                	add    al,al
c001a01f:	0c f0                	or     al,0xf0
c001a021:	ee                   	out    dx,al
c001a022:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a027:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a02b:	ee                   	out    dx,al
c001a02c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a031:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001a036:	83 c4 18             	add    esp,0x18
c001a039:	5b                   	pop    ebx
c001a03a:	c1 e0 08             	shl    eax,0x8
c001a03d:	83 e2 fc             	and    edx,0xfffffffc
c001a040:	09 d0                	or     eax,edx
c001a042:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a047:	c3                   	ret    

c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a048:	57                   	push   edi
c001a049:	56                   	push   esi
c001a04a:	53                   	push   ebx
c001a04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a04f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001a054:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a059:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c001a05e:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a064:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c001a068:	83 ff 01             	cmp    edi,0x1
c001a06b:	75 3f                	jne    c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c001a06d:	c1 e0 10             	shl    eax,0x10
c001a070:	c1 e1 08             	shl    ecx,0x8
c001a073:	89 c7                	mov    edi,eax
c001a075:	c1 e2 0b             	shl    edx,0xb
c001a078:	88 d8                	mov    al,bl
c001a07a:	24 fc                	and    al,0xfc
c001a07c:	0f b6 f0             	movzx  esi,al
c001a07f:	89 f8                	mov    eax,edi
c001a081:	09 f0                	or     eax,esi
c001a083:	09 c8                	or     eax,ecx
c001a085:	09 d0                	or     eax,edx
c001a087:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a08c:	0d 00 00 00 80       	or     eax,0x80000000
c001a091:	ef                   	out    dx,eax
c001a092:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a097:	ed                   	in     eax,dx
c001a098:	80 e3 02             	and    bl,0x2
c001a09b:	0f b6 db             	movzx  ebx,bl
c001a09e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a0a5:	d3 e8                	shr    eax,cl
c001a0a7:	0f b7 c0             	movzx  eax,ax
c001a0aa:	eb 41                	jmp    c001a0ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a0ac:	83 ff 02             	cmp    edi,0x2
c001a0af:	75 2a                	jne    c001a0db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a0b1:	83 ec 0c             	sub    esp,0xc
c001a0b4:	0f b6 fb             	movzx  edi,bl
c001a0b7:	57                   	push   edi
c001a0b8:	51                   	push   ecx
c001a0b9:	52                   	push   edx
c001a0ba:	50                   	push   eax
c001a0bb:	56                   	push   esi
c001a0bc:	e8 09 ff ff ff       	call   c0019fca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0c1:	89 c2                	mov    edx,eax
c001a0c3:	ed                   	in     eax,dx
c001a0c4:	80 e3 02             	and    bl,0x2
c001a0c7:	83 c4 20             	add    esp,0x20
c001a0ca:	0f b6 db             	movzx  ebx,bl
c001a0cd:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a0d4:	d3 e8                	shr    eax,cl
c001a0d6:	0f b7 c0             	movzx  eax,ax
c001a0d9:	eb 12                	jmp    c001a0ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a0db:	83 ec 0c             	sub    esp,0xc
c001a0de:	68 c3 16 02 c0       	push   0xc00216c3
c001a0e3:	e8 dd 66 ff ff       	call   c00107c5 <KePanic(char const*)>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	31 c0                	xor    eax,eax
c001a0ed:	5b                   	pop    ebx
c001a0ee:	5e                   	pop    esi
c001a0ef:	5f                   	pop    edi
c001a0f0:	c3                   	ret    
c001a0f1:	90                   	nop

c001a0f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a0f2:	83 ec 18             	sub    esp,0x18
c001a0f5:	6a 00                	push   0x0
c001a0f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0fc:	50                   	push   eax
c001a0fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a102:	50                   	push   eax
c001a103:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a108:	50                   	push   eax
c001a109:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a10d:	e8 36 ff ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a112:	83 c4 2c             	add    esp,0x2c
c001a115:	c3                   	ret    

c001a116 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a116:	83 ec 18             	sub    esp,0x18
c001a119:	6a 0e                	push   0xe
c001a11b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a120:	50                   	push   eax
c001a121:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a126:	50                   	push   eax
c001a127:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a12c:	50                   	push   eax
c001a12d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a131:	e8 12 ff ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a136:	83 c4 2c             	add    esp,0x2c
c001a139:	0f b6 c0             	movzx  eax,al
c001a13c:	c3                   	ret    
c001a13d:	90                   	nop

c001a13e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a13e:	55                   	push   ebp
c001a13f:	57                   	push   edi
c001a140:	56                   	push   esi
c001a141:	53                   	push   ebx
c001a142:	83 ec 18             	sub    esp,0x18
c001a145:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a14a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a14f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a154:	6a 0a                	push   0xa
c001a156:	56                   	push   esi
c001a157:	55                   	push   ebp
c001a158:	57                   	push   edi
c001a159:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a15d:	e8 e6 fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a162:	83 c4 14             	add    esp,0x14
c001a165:	6a 0a                	push   0xa
c001a167:	56                   	push   esi
c001a168:	55                   	push   ebp
c001a169:	57                   	push   edi
c001a16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a16e:	0f b7 d8             	movzx  ebx,ax
c001a171:	0f b6 db             	movzx  ebx,bl
c001a174:	e8 cf fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a179:	83 c4 2c             	add    esp,0x2c
c001a17c:	25 00 ff 00 00       	and    eax,0xff00
c001a181:	09 d8                	or     eax,ebx
c001a183:	5b                   	pop    ebx
c001a184:	5e                   	pop    esi
c001a185:	5f                   	pop    edi
c001a186:	5d                   	pop    ebp
c001a187:	c3                   	ret    

c001a188 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a188:	83 ec 18             	sub    esp,0x18
c001a18b:	6a 08                	push   0x8
c001a18d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a192:	50                   	push   eax
c001a193:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a198:	50                   	push   eax
c001a199:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a19e:	50                   	push   eax
c001a19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1a3:	e8 a0 fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1a8:	83 c4 2c             	add    esp,0x2c
c001a1ab:	0f b6 c4             	movzx  eax,ah
c001a1ae:	c3                   	ret    
c001a1af:	90                   	nop

c001a1b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a1b0:	83 ec 18             	sub    esp,0x18
c001a1b3:	6a 08                	push   0x8
c001a1b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1ba:	50                   	push   eax
c001a1bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1c0:	50                   	push   eax
c001a1c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1c6:	50                   	push   eax
c001a1c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1cb:	e8 78 fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1d0:	83 c4 2c             	add    esp,0x2c
c001a1d3:	0f b7 c0             	movzx  eax,ax
c001a1d6:	c3                   	ret    
c001a1d7:	90                   	nop

c001a1d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a1d8:	83 ec 18             	sub    esp,0x18
c001a1db:	6a 3c                	push   0x3c
c001a1dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1e2:	50                   	push   eax
c001a1e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1e8:	50                   	push   eax
c001a1e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1ee:	50                   	push   eax
c001a1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1f3:	e8 50 fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1f8:	83 c4 2c             	add    esp,0x2c
c001a1fb:	0f b7 c0             	movzx  eax,ax
c001a1fe:	c3                   	ret    
c001a1ff:	90                   	nop

c001a200 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a200:	83 ec 18             	sub    esp,0x18
c001a203:	6a 18                	push   0x18
c001a205:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a20a:	50                   	push   eax
c001a20b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a210:	50                   	push   eax
c001a211:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a216:	50                   	push   eax
c001a217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a21b:	e8 28 fe ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a220:	83 c4 2c             	add    esp,0x2c
c001a223:	0f b6 c4             	movzx  eax,ah
c001a226:	c3                   	ret    
c001a227:	90                   	nop

c001a228 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a228:	55                   	push   ebp
c001a229:	57                   	push   edi
c001a22a:	56                   	push   esi
c001a22b:	53                   	push   ebx
c001a22c:	83 ec 28             	sub    esp,0x28
c001a22f:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a233:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a238:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a23d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a242:	c0 e3 02             	shl    bl,0x2
c001a245:	88 d8                	mov    al,bl
c001a247:	80 c3 10             	add    bl,0x10
c001a24a:	04 12                	add    al,0x12
c001a24c:	0f b6 db             	movzx  ebx,bl
c001a24f:	0f b6 c0             	movzx  eax,al
c001a252:	50                   	push   eax
c001a253:	56                   	push   esi
c001a254:	57                   	push   edi
c001a255:	55                   	push   ebp
c001a256:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a25a:	e8 e9 fd ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a25f:	0f b7 c0             	movzx  eax,ax
c001a262:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a266:	83 c4 14             	add    esp,0x14
c001a269:	53                   	push   ebx
c001a26a:	56                   	push   esi
c001a26b:	57                   	push   edi
c001a26c:	55                   	push   ebp
c001a26d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a271:	e8 d2 fd ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a276:	0f b7 d0             	movzx  edx,ax
c001a279:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a27d:	83 c4 3c             	add    esp,0x3c
c001a280:	5b                   	pop    ebx
c001a281:	5e                   	pop    esi
c001a282:	c1 e0 10             	shl    eax,0x10
c001a285:	09 d0                	or     eax,edx
c001a287:	5f                   	pop    edi
c001a288:	5d                   	pop    ebp
c001a289:	c3                   	ret    

c001a28a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a28a:	55                   	push   ebp
c001a28b:	57                   	push   edi
c001a28c:	56                   	push   esi
c001a28d:	53                   	push   ebx
c001a28e:	83 ec 0c             	sub    esp,0xc
c001a291:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a295:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a29a:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a29f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2a4:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a2aa:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a2af:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a2b4:	83 fd 01             	cmp    ebp,0x1
c001a2b7:	75 50                	jne    c001a309 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a2b9:	c1 e0 08             	shl    eax,0x8
c001a2bc:	89 cf                	mov    edi,ecx
c001a2be:	c1 e7 10             	shl    edi,0x10
c001a2c1:	88 d9                	mov    cl,bl
c001a2c3:	c1 e2 0b             	shl    edx,0xb
c001a2c6:	80 e1 fc             	and    cl,0xfc
c001a2c9:	0f b6 c9             	movzx  ecx,cl
c001a2cc:	09 f9                	or     ecx,edi
c001a2ce:	09 c1                	or     ecx,eax
c001a2d0:	09 d1                	or     ecx,edx
c001a2d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2d7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a2dd:	89 c8                	mov    eax,ecx
c001a2df:	ef                   	out    dx,eax
c001a2e0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a2e5:	ed                   	in     eax,dx
c001a2e6:	80 e3 02             	and    bl,0x2
c001a2e9:	74 08                	je     c001a2f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a2eb:	c1 e6 10             	shl    esi,0x10
c001a2ee:	0f b7 c0             	movzx  eax,ax
c001a2f1:	eb 03                	jmp    c001a2f6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a2f3:	66 31 c0             	xor    ax,ax
c001a2f6:	09 c6                	or     esi,eax
c001a2f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a2fd:	89 c8                	mov    eax,ecx
c001a2ff:	ef                   	out    dx,eax
c001a300:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a305:	89 f0                	mov    eax,esi
c001a307:	eb 2d                	jmp    c001a336 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a309:	83 fd 02             	cmp    ebp,0x2
c001a30c:	75 31                	jne    c001a33f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a30e:	83 ec 0c             	sub    esp,0xc
c001a311:	53                   	push   ebx
c001a312:	50                   	push   eax
c001a313:	52                   	push   edx
c001a314:	51                   	push   ecx
c001a315:	57                   	push   edi
c001a316:	e8 af fc ff ff       	call   c0019fca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a31b:	0f b7 c8             	movzx  ecx,ax
c001a31e:	89 ca                	mov    edx,ecx
c001a320:	ed                   	in     eax,dx
c001a321:	83 c4 20             	add    esp,0x20
c001a324:	f6 c1 02             	test   cl,0x2
c001a327:	74 08                	je     c001a331 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a329:	c1 e6 10             	shl    esi,0x10
c001a32c:	0f b7 c0             	movzx  eax,ax
c001a32f:	eb 03                	jmp    c001a334 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a331:	66 31 c0             	xor    ax,ax
c001a334:	09 f0                	or     eax,esi
c001a336:	ef                   	out    dx,eax
c001a337:	83 c4 0c             	add    esp,0xc
c001a33a:	5b                   	pop    ebx
c001a33b:	5e                   	pop    esi
c001a33c:	5f                   	pop    edi
c001a33d:	5d                   	pop    ebp
c001a33e:	c3                   	ret    
c001a33f:	c7 44 24 20 c3 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216c3
c001a347:	83 c4 0c             	add    esp,0xc
c001a34a:	5b                   	pop    ebx
c001a34b:	5e                   	pop    esi
c001a34c:	5f                   	pop    edi
c001a34d:	5d                   	pop    ebp
c001a34e:	e9 72 64 ff ff       	jmp    c00107c5 <KePanic(char const*)>
c001a353:	90                   	nop

c001a354 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a354:	55                   	push   ebp
c001a355:	57                   	push   edi
c001a356:	56                   	push   esi
c001a357:	53                   	push   ebx
c001a358:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a35e:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a365:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a36c:	0f 85 bd 00 00 00    	jne    c001a42f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a372:	83 ec 0c             	sub    esp,0xc
c001a375:	68 14 01 00 00       	push   0x114
c001a37a:	e8 87 d7 fe ff       	call   c0007b06 <malloc>
c001a37f:	83 c4 0c             	add    esp,0xc
c001a382:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a388:	68 c9 16 02 c0       	push   0xc00216c9
c001a38d:	50                   	push   eax
c001a38e:	89 c3                	mov    ebx,eax
c001a390:	e8 63 0c ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001a395:	83 c4 10             	add    esp,0x10
c001a398:	85 db                	test   ebx,ebx
c001a39a:	0f 84 4c 02 00 00    	je     c001a5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a3a0:	56                   	push   esi
c001a3a1:	56                   	push   esi
c001a3a2:	6a 01                	push   0x1
c001a3a4:	53                   	push   ebx
c001a3a5:	e8 0c 0d ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	85 c0                	test   eax,eax
c001a3af:	0f 85 37 02 00 00    	jne    c001a5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a3b5:	52                   	push   edx
c001a3b6:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001a3ba:	50                   	push   eax
c001a3bb:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a3bf:	50                   	push   eax
c001a3c0:	53                   	push   ebx
c001a3c1:	e8 96 0f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001a3c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3ca:	40                   	inc    eax
c001a3cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3ce:	e8 33 d7 fe ff       	call   c0007b06 <malloc>
c001a3d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a3d7:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a3db:	59                   	pop    ecx
c001a3dc:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a3e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3e3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a3e7:	51                   	push   ecx
c001a3e8:	50                   	push   eax
c001a3e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3ed:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3f1:	53                   	push   ebx
c001a3f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a3f5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001a3f9:	83 c4 20             	add    esp,0x20
c001a3fc:	89 c8                	mov    eax,ecx
c001a3fe:	99                   	cdq    
c001a3ff:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001a403:	0f 85 e3 01 00 00    	jne    c001a5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a409:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001a40d:	0f 85 d9 01 00 00    	jne    c001a5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a413:	83 ec 0c             	sub    esp,0xc
c001a416:	53                   	push   ebx
c001a417:	e8 f8 0c ff ff       	call   c000b114 <File::close()>
c001a41c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a42a:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a42f:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001a437:	31 db                	xor    ebx,ebx
c001a439:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a441:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001a447:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a44f:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001a455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a459:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001a461:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a465:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001a46c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a470:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001a477:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a47b:	39 d9                	cmp    ecx,ebx
c001a47d:	0f 8e 69 01 00 00    	jle    c001a5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a483:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a486:	d4 40                	aam    0x40
c001a488:	d5 39                	aad    0x39
c001a48a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a48e:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001a492:	d4 40                	aam    0x40
c001a494:	d5 39                	aad    0x39
c001a496:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a49a:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001a49e:	d4 40                	aam    0x40
c001a4a0:	d5 39                	aad    0x39
c001a4a2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a4a6:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001a4aa:	d4 40                	aam    0x40
c001a4ac:	d5 39                	aad    0x39
c001a4ae:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a4b2:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001a4b6:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001a4ba:	3c 56                	cmp    al,0x56
c001a4bc:	74 46                	je     c001a504 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001a4be:	d4 40                	aam    0x40
c001a4c0:	d5 39                	aad    0x39
c001a4c2:	2c 30                	sub    al,0x30
c001a4c4:	0f b6 d0             	movzx  edx,al
c001a4c7:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001a4cb:	c1 e2 04             	shl    edx,0x4
c001a4ce:	d4 40                	aam    0x40
c001a4d0:	d5 39                	aad    0x39
c001a4d2:	2c 30                	sub    al,0x30
c001a4d4:	0f b6 c0             	movzx  eax,al
c001a4d7:	09 c2                	or     edx,eax
c001a4d9:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001a4dd:	c1 e2 04             	shl    edx,0x4
c001a4e0:	d4 40                	aam    0x40
c001a4e2:	d5 39                	aad    0x39
c001a4e4:	2c 30                	sub    al,0x30
c001a4e6:	0f b6 c0             	movzx  eax,al
c001a4e9:	09 c2                	or     edx,eax
c001a4eb:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001a4ef:	c1 e2 04             	shl    edx,0x4
c001a4f2:	0f b7 d2             	movzx  edx,dx
c001a4f5:	d4 40                	aam    0x40
c001a4f7:	d5 39                	aad    0x39
c001a4f9:	2c 30                	sub    al,0x30
c001a4fb:	0f b6 c0             	movzx  eax,al
c001a4fe:	09 d0                	or     eax,edx
c001a500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a504:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001a508:	80 fa 58             	cmp    dl,0x58
c001a50b:	74 48                	je     c001a555 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001a50d:	88 d0                	mov    al,dl
c001a50f:	d4 40                	aam    0x40
c001a511:	d5 39                	aad    0x39
c001a513:	2c 30                	sub    al,0x30
c001a515:	0f b6 e8             	movzx  ebp,al
c001a518:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001a51c:	c1 e5 04             	shl    ebp,0x4
c001a51f:	d4 40                	aam    0x40
c001a521:	d5 39                	aad    0x39
c001a523:	2c 30                	sub    al,0x30
c001a525:	0f b6 c0             	movzx  eax,al
c001a528:	09 c5                	or     ebp,eax
c001a52a:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001a52e:	c1 e5 04             	shl    ebp,0x4
c001a531:	d4 40                	aam    0x40
c001a533:	d5 39                	aad    0x39
c001a535:	2c 30                	sub    al,0x30
c001a537:	0f b6 c0             	movzx  eax,al
c001a53a:	09 c5                	or     ebp,eax
c001a53c:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001a540:	c1 e5 04             	shl    ebp,0x4
c001a543:	0f b7 ed             	movzx  ebp,bp
c001a546:	d4 40                	aam    0x40
c001a548:	d5 39                	aad    0x39
c001a54a:	2c 30                	sub    al,0x30
c001a54c:	0f b6 c0             	movzx  eax,al
c001a54f:	09 e8                	or     eax,ebp
c001a551:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a555:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001a559:	83 c3 10             	add    ebx,0x10
c001a55c:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a55f:	3c 0a                	cmp    al,0xa
c001a561:	74 07                	je     c001a56a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001a563:	45                   	inc    ebp
c001a564:	39 d9                	cmp    ecx,ebx
c001a566:	75 15                	jne    c001a57d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001a568:	89 cb                	mov    ebx,ecx
c001a56a:	3c 0a                	cmp    al,0xa
c001a56c:	0f 94 c0             	sete   al
c001a56f:	0f b6 c0             	movzx  eax,al
c001a572:	01 c3                	add    ebx,eax
c001a574:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001a579:	75 0c                	jne    c001a587 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001a57b:	eb 18                	jmp    c001a595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a57d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a580:	43                   	inc    ebx
c001a581:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a585:	eb d5                	jmp    c001a55c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a587:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a58b:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001a58f:	0f 85 e6 fe ff ff    	jne    c001a47b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a595:	80 fa 58             	cmp    dl,0x58
c001a598:	74 0e                	je     c001a5a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001a59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a59e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001a5a2:	0f 85 d3 fe ff ff    	jne    c001a47b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a5a8:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001a5ac:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001a5b0:	c0 e2 04             	shl    dl,0x4
c001a5b3:	2c 30                	sub    al,0x30
c001a5b5:	08 d0                	or     al,dl
c001a5b7:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001a5bb:	0f 85 ba fe ff ff    	jne    c001a47b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a5c1:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001a5c5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a5c9:	c0 e2 04             	shl    dl,0x4
c001a5cc:	2c 30                	sub    al,0x30
c001a5ce:	08 d0                	or     al,dl
c001a5d0:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001a5d4:	0f 85 a1 fe ff ff    	jne    c001a47b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a5da:	50                   	push   eax
c001a5db:	50                   	push   eax
c001a5dc:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a5e0:	50                   	push   eax
c001a5e1:	57                   	push   edi
c001a5e2:	e8 39 61 fe ff       	call   c0000720 <strcpy>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	eb 05                	jmp    c001a5f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001a5ec:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a5ef:	31 ff                	xor    edi,edi
c001a5f1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5f7:	89 f8                	mov    eax,edi
c001a5f9:	5b                   	pop    ebx
c001a5fa:	5e                   	pop    esi
c001a5fb:	5f                   	pop    edi
c001a5fc:	5d                   	pop    ebp
c001a5fd:	c3                   	ret    

c001a5fe <PCI::checkBus(unsigned char)>:
c001a5fe:	56                   	push   esi
c001a5ff:	53                   	push   ebx
c001a600:	31 db                	xor    ebx,ebx
c001a602:	51                   	push   ecx
c001a603:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a608:	52                   	push   edx
c001a609:	53                   	push   ebx
c001a60a:	43                   	inc    ebx
c001a60b:	56                   	push   esi
c001a60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a610:	e8 f1 02 00 00       	call   c001a906 <PCI::checkDevice(unsigned char, unsigned char)>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	83 fb 20             	cmp    ebx,0x20
c001a61b:	75 eb                	jne    c001a608 <PCI::checkBus(unsigned char)+0xa>
c001a61d:	58                   	pop    eax
c001a61e:	5b                   	pop    ebx
c001a61f:	5e                   	pop    esi
c001a620:	c3                   	ret    
c001a621:	90                   	nop

c001a622 <PCI::foundDevice(PCIDeviceInfo)>:
c001a622:	55                   	push   ebp
c001a623:	57                   	push   edi
c001a624:	56                   	push   esi
c001a625:	53                   	push   ebx
c001a626:	83 ec 1c             	sub    esp,0x1c
c001a629:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a62e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a632:	3d ff ff 00 00       	cmp    eax,0xffff
c001a637:	0f 84 54 01 00 00    	je     c001a791 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a63d:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001a642:	81 ff 06 04 00 00    	cmp    edi,0x406
c001a648:	75 2c                	jne    c001a676 <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001a64a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a64f:	50                   	push   eax
c001a650:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a655:	50                   	push   eax
c001a656:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a65b:	50                   	push   eax
c001a65c:	56                   	push   esi
c001a65d:	e8 9e fb ff ff       	call   c001a200 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a662:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a666:	0f b6 c0             	movzx  eax,al
c001a669:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a66d:	83 c4 2c             	add    esp,0x2c
c001a670:	5b                   	pop    ebx
c001a671:	5e                   	pop    esi
c001a672:	5f                   	pop    edi
c001a673:	5d                   	pop    ebp
c001a674:	eb 88                	jmp    c001a5fe <PCI::checkBus(unsigned char)>
c001a676:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a67a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a680:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a684:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a688:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001a68c:	85 c0                	test   eax,eax
c001a68e:	74 33                	je     c001a6c3 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a690:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a693:	85 d2                	test   edx,edx
c001a695:	74 28                	je     c001a6bf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a697:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001a69d:	31 e9                	xor    ecx,ebp
c001a69f:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001a6a5:	75 18                	jne    c001a6bf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a6a7:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001a6ad:	75 10                	jne    c001a6bf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a6af:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a6b3:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001a6b9:	0f 84 d2 00 00 00    	je     c001a791 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a6bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6c1:	eb c9                	jmp    c001a68c <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001a6c3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a6c7:	81 ff 01 06 00 00    	cmp    edi,0x601
c001a6cd:	75 19                	jne    c001a6e8 <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001a6cf:	83 ec 0c             	sub    esp,0xc
c001a6d2:	68 64 01 00 00       	push   0x164
c001a6d7:	e8 2a d4 fe ff       	call   c0007b06 <malloc>
c001a6dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6df:	89 c5                	mov    ebp,eax
c001a6e1:	e8 36 0e 00 00       	call   c001b51c <SATABus::SATABus()>
c001a6e6:	eb 1f                	jmp    c001a707 <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001a6e8:	81 ff 01 01 00 00    	cmp    edi,0x101
c001a6ee:	75 60                	jne    c001a750 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001a6f0:	83 ec 0c             	sub    esp,0xc
c001a6f3:	68 70 02 00 00       	push   0x270
c001a6f8:	e8 09 d4 fe ff       	call   c0007b06 <malloc>
c001a6fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a700:	89 c5                	mov    ebp,eax
c001a702:	e8 cf 02 00 00       	call   c001a9d6 <IDE::IDE()>
c001a707:	58                   	pop    eax
c001a708:	5a                   	pop    edx
c001a709:	55                   	push   ebp
c001a70a:	56                   	push   esi
c001a70b:	e8 92 17 ff ff       	call   c000bea2 <Device::addChild(Device*)>
c001a710:	83 ec 1c             	sub    esp,0x1c
c001a713:	b9 09 00 00 00       	mov    ecx,0x9
c001a718:	fc                   	cld    
c001a719:	89 e7                	mov    edi,esp
c001a71b:	89 de                	mov    esi,ebx
c001a71d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a71f:	55                   	push   ebp
c001a720:	e8 c5 16 ff ff       	call   c000bdea <Device::preOpenPCI(PCIDeviceInfo)>
c001a725:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a728:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a72c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a734:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a73c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a747:	83 c4 4c             	add    esp,0x4c
c001a74a:	5b                   	pop    ebx
c001a74b:	5e                   	pop    esi
c001a74c:	5f                   	pop    edi
c001a74d:	5d                   	pop    ebp
c001a74e:	ff e0                	jmp    eax
c001a750:	83 ec 0c             	sub    esp,0xc
c001a753:	68 58 01 00 00       	push   0x158
c001a758:	e8 a9 d3 fe ff       	call   c0007b06 <malloc>
c001a75d:	89 c5                	mov    ebp,eax
c001a75f:	58                   	pop    eax
c001a760:	5a                   	pop    edx
c001a761:	68 e2 16 02 c0       	push   0xc00216e2
c001a766:	55                   	push   ebp
c001a767:	e8 d2 19 ff ff       	call   c000c13e <DriverlessDevice::DriverlessDevice(char const*)>
c001a76c:	59                   	pop    ecx
c001a76d:	5f                   	pop    edi
c001a76e:	55                   	push   ebp
c001a76f:	56                   	push   esi
c001a770:	e8 2d 17 ff ff       	call   c000bea2 <Device::addChild(Device*)>
c001a775:	b9 09 00 00 00       	mov    ecx,0x9
c001a77a:	fc                   	cld    
c001a77b:	89 df                	mov    edi,ebx
c001a77d:	89 de                	mov    esi,ebx
c001a77f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a781:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a785:	83 c4 2c             	add    esp,0x2c
c001a788:	5b                   	pop    ebx
c001a789:	5e                   	pop    esi
c001a78a:	5f                   	pop    edi
c001a78b:	5d                   	pop    ebp
c001a78c:	e9 59 16 ff ff       	jmp    c000bdea <Device::preOpenPCI(PCIDeviceInfo)>
c001a791:	83 c4 1c             	add    esp,0x1c
c001a794:	5b                   	pop    ebx
c001a795:	5e                   	pop    esi
c001a796:	5f                   	pop    edi
c001a797:	5d                   	pop    ebp
c001a798:	c3                   	ret    
c001a799:	90                   	nop

c001a79a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a79a:	55                   	push   ebp
c001a79b:	57                   	push   edi
c001a79c:	56                   	push   esi
c001a79d:	53                   	push   ebx
c001a79e:	83 ec 58             	sub    esp,0x58
c001a7a1:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001a7a5:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001a7aa:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001a7ae:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001a7b2:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001a7b6:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001a7bb:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001a7bf:	89 f0                	mov    eax,esi
c001a7c1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a7c5:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001a7ca:	6a 0c                	push   0xc
c001a7cc:	56                   	push   esi
c001a7cd:	53                   	push   ebx
c001a7ce:	57                   	push   edi
c001a7cf:	55                   	push   ebp
c001a7d0:	e8 73 f8 ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7d5:	83 c4 20             	add    esp,0x20
c001a7d8:	56                   	push   esi
c001a7d9:	53                   	push   ebx
c001a7da:	57                   	push   edi
c001a7db:	55                   	push   ebp
c001a7dc:	e8 5d f9 ff ff       	call   c001a13e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a7e1:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a7e6:	56                   	push   esi
c001a7e7:	53                   	push   ebx
c001a7e8:	57                   	push   edi
c001a7e9:	55                   	push   ebp
c001a7ea:	e8 e9 f9 ff ff       	call   c001a1d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a7ef:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a7f3:	83 c4 14             	add    esp,0x14
c001a7f6:	6a 3c                	push   0x3c
c001a7f8:	56                   	push   esi
c001a7f9:	53                   	push   ebx
c001a7fa:	57                   	push   edi
c001a7fb:	55                   	push   ebp
c001a7fc:	e8 47 f8 ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a801:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a807:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a80d:	0f b6 c4             	movzx  eax,ah
c001a810:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a814:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a818:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001a81c:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001a822:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a826:	83 c4 20             	add    esp,0x20
c001a829:	85 c0                	test   eax,eax
c001a82b:	74 2f                	je     c001a85c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a82d:	31 d2                	xor    edx,edx
c001a82f:	39 14 24             	cmp    DWORD PTR [esp],edx
c001a832:	7e 28                	jle    c001a85c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a834:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a83c:	39 c3                	cmp    ebx,eax
c001a83e:	75 19                	jne    c001a859 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a840:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a848:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001a84c:	75 0b                	jne    c001a859 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a84e:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a855:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a859:	42                   	inc    edx
c001a85a:	eb d3                	jmp    c001a82f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001a85c:	31 d2                	xor    edx,edx
c001a85e:	83 ec 0c             	sub    esp,0xc
c001a861:	56                   	push   esi
c001a862:	53                   	push   ebx
c001a863:	57                   	push   edi
c001a864:	52                   	push   edx
c001a865:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a869:	55                   	push   ebp
c001a86a:	e8 b9 f9 ff ff       	call   c001a228 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a86f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a873:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001a877:	42                   	inc    edx
c001a878:	83 c4 20             	add    esp,0x20
c001a87b:	83 fa 06             	cmp    edx,0x6
c001a87e:	75 de                	jne    c001a85e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001a880:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a88b:	c1 e2 08             	shl    edx,0x8
c001a88e:	0f b6 c4             	movzx  eax,ah
c001a891:	09 d0                	or     eax,edx
c001a893:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001a898:	6a 02                	push   0x2
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	57                   	push   edi
c001a89d:	55                   	push   ebp
c001a89e:	e8 a5 f7 ff ff       	call   c001a048 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8a3:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001a8a8:	83 c4 20             	add    esp,0x20
c001a8ab:	56                   	push   esi
c001a8ac:	53                   	push   ebx
c001a8ad:	57                   	push   edi
c001a8ae:	55                   	push   ebp
c001a8af:	e8 d4 f8 ff ff       	call   c001a188 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a8b4:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a8b8:	56                   	push   esi
c001a8b9:	53                   	push   ebx
c001a8ba:	57                   	push   edi
c001a8bb:	55                   	push   ebp
c001a8bc:	e8 31 f8 ff ff       	call   c001a0f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a8c1:	b9 09 00 00 00       	mov    ecx,0x9
c001a8c6:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001a8cb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a8cf:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001a8d3:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001a8d7:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001a8db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001a8df:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001a8e3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a8e7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001a8eb:	83 ec 0c             	sub    esp,0xc
c001a8ee:	fc                   	cld    
c001a8ef:	8d 74 24 48          	lea    esi,[esp+0x48]
c001a8f3:	89 e7                	mov    edi,esp
c001a8f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8f7:	55                   	push   ebp
c001a8f8:	e8 25 fd ff ff       	call   c001a622 <PCI::foundDevice(PCIDeviceInfo)>
c001a8fd:	83 c4 7c             	add    esp,0x7c
c001a900:	5b                   	pop    ebx
c001a901:	5e                   	pop    esi
c001a902:	5f                   	pop    edi
c001a903:	5d                   	pop    ebp
c001a904:	c3                   	ret    
c001a905:	90                   	nop

c001a906 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a906:	55                   	push   ebp
c001a907:	57                   	push   edi
c001a908:	56                   	push   esi
c001a909:	53                   	push   ebx
c001a90a:	83 ec 0c             	sub    esp,0xc
c001a90d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a912:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a917:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a91b:	6a 00                	push   0x0
c001a91d:	56                   	push   esi
c001a91e:	57                   	push   edi
c001a91f:	55                   	push   ebp
c001a920:	e8 cd f7 ff ff       	call   c001a0f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a925:	6a 00                	push   0x0
c001a927:	56                   	push   esi
c001a928:	57                   	push   edi
c001a929:	55                   	push   ebp
c001a92a:	e8 6b fe ff ff       	call   c001a79a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a92f:	83 c4 20             	add    esp,0x20
c001a932:	6a 00                	push   0x0
c001a934:	56                   	push   esi
c001a935:	57                   	push   edi
c001a936:	55                   	push   ebp
c001a937:	e8 da f7 ff ff       	call   c001a116 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a93c:	83 c4 10             	add    esp,0x10
c001a93f:	84 c0                	test   al,al
c001a941:	79 2d                	jns    c001a970 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001a943:	bb 01 00 00 00       	mov    ebx,0x1
c001a948:	53                   	push   ebx
c001a949:	56                   	push   esi
c001a94a:	57                   	push   edi
c001a94b:	55                   	push   ebp
c001a94c:	e8 a1 f7 ff ff       	call   c001a0f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a951:	83 c4 10             	add    esp,0x10
c001a954:	0f b7 c0             	movzx  eax,ax
c001a957:	3d ff ff 00 00       	cmp    eax,0xffff
c001a95c:	74 0c                	je     c001a96a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a95e:	53                   	push   ebx
c001a95f:	56                   	push   esi
c001a960:	57                   	push   edi
c001a961:	55                   	push   ebp
c001a962:	e8 33 fe ff ff       	call   c001a79a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	43                   	inc    ebx
c001a96b:	83 fb 08             	cmp    ebx,0x8
c001a96e:	75 d8                	jne    c001a948 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a970:	83 c4 0c             	add    esp,0xc
c001a973:	5b                   	pop    ebx
c001a974:	5e                   	pop    esi
c001a975:	5f                   	pop    edi
c001a976:	5d                   	pop    ebp
c001a977:	c3                   	ret    

c001a978 <PCI::detect()>:
c001a978:	56                   	push   esi
c001a979:	53                   	push   ebx
c001a97a:	53                   	push   ebx
c001a97b:	31 db                	xor    ebx,ebx
c001a97d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a981:	6a 00                	push   0x0
c001a983:	6a 00                	push   0x0
c001a985:	6a 00                	push   0x0
c001a987:	56                   	push   esi
c001a988:	e8 89 f7 ff ff       	call   c001a116 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	a8 80                	test   al,0x80
c001a992:	75 21                	jne    c001a9b5 <PCI::detect()+0x3d>
c001a994:	51                   	push   ecx
c001a995:	51                   	push   ecx
c001a996:	6a 00                	push   0x0
c001a998:	56                   	push   esi
c001a999:	e8 60 fc ff ff       	call   c001a5fe <PCI::checkBus(unsigned char)>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	eb 2a                	jmp    c001a9cd <PCI::detect()+0x55>
c001a9a3:	52                   	push   edx
c001a9a4:	52                   	push   edx
c001a9a5:	53                   	push   ebx
c001a9a6:	43                   	inc    ebx
c001a9a7:	56                   	push   esi
c001a9a8:	e8 51 fc ff ff       	call   c001a5fe <PCI::checkBus(unsigned char)>
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	83 fb 08             	cmp    ebx,0x8
c001a9b3:	74 18                	je     c001a9cd <PCI::detect()+0x55>
c001a9b5:	53                   	push   ebx
c001a9b6:	6a 00                	push   0x0
c001a9b8:	6a 00                	push   0x0
c001a9ba:	56                   	push   esi
c001a9bb:	e8 32 f7 ff ff       	call   c001a0f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	0f b7 c0             	movzx  eax,ax
c001a9c6:	3d ff ff 00 00       	cmp    eax,0xffff
c001a9cb:	74 d6                	je     c001a9a3 <PCI::detect()+0x2b>
c001a9cd:	58                   	pop    eax
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	c3                   	ret    
c001a9d1:	90                   	nop

c001a9d2 <IDE::close(int, int, void*)>:
c001a9d2:	83 c8 ff             	or     eax,0xffffffff
c001a9d5:	c3                   	ret    

c001a9d6 <IDE::IDE()>:
c001a9d6:	83 ec 1c             	sub    esp,0x1c
c001a9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9dd:	c7 44 24 04 28 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021728
c001a9e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9e8:	e8 f7 17 ff ff       	call   c000c1e4 <HardDiskController::HardDiskController(char const*)>
c001a9ed:	ba b8 17 02 c0       	mov    edx,0xc00217b8
c001a9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9f6:	89 10                	mov    DWORD PTR [eax],edx
c001a9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9fc:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001aa03:	90                   	nop
c001aa04:	83 c4 1c             	add    esp,0x1c
c001aa07:	c3                   	ret    

c001aa08 <IDE::prepareInterrupt(unsigned char)>:
c001aa08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa11:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001aa19:	c3                   	ret    

c001aa1a <selectDrive(unsigned char, unsigned char)>:
c001aa1a:	c3                   	ret    
c001aa1b:	90                   	nop

c001aa1c <IDE::getBase(unsigned char)>:
c001aa1c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001aa21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa25:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001aa2d:	c3                   	ret    

c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001aa2e:	55                   	push   ebp
c001aa2f:	57                   	push   edi
c001aa30:	56                   	push   esi
c001aa31:	53                   	push   ebx
c001aa32:	83 ec 1c             	sub    esp,0x1c
c001aa35:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aa3a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aa3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa42:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aa47:	88 d9                	mov    cl,bl
c001aa49:	80 e9 08             	sub    cl,0x8
c001aa4c:	80 f9 03             	cmp    cl,0x3
c001aa4f:	77 4e                	ja     c001aa9f <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001aa51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa55:	0f b6 fa             	movzx  edi,dl
c001aa58:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001aa5b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001aa5f:	80 ca 80             	or     dl,0x80
c001aa62:	0f b6 d2             	movzx  edx,dl
c001aa65:	52                   	push   edx
c001aa66:	6a 0c                	push   0xc
c001aa68:	57                   	push   edi
c001aa69:	56                   	push   esi
c001aa6a:	e8 bf ff ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa6f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001aa74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa78:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001aa7c:	ee                   	out    dx,al
c001aa7d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aa82:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001aa86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001aa8a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001aa92:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa96:	83 c4 2c             	add    esp,0x2c
c001aa99:	5b                   	pop    ebx
c001aa9a:	5e                   	pop    esi
c001aa9b:	5f                   	pop    edi
c001aa9c:	5d                   	pop    ebp
c001aa9d:	eb 8f                	jmp    c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa9f:	80 fb 07             	cmp    bl,0x7
c001aaa2:	77 0c                	ja     c001aab0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001aaa4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001aaac:	01 da                	add    edx,ebx
c001aaae:	eb 23                	jmp    c001aad3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aab0:	80 fb 0d             	cmp    bl,0xd
c001aab3:	77 0d                	ja     c001aac2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001aab5:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001aabc:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001aac0:	eb 11                	jmp    c001aad3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aac2:	80 fb 15             	cmp    bl,0x15
c001aac5:	77 0d                	ja     c001aad4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001aac7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001aacf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001aad3:	ee                   	out    dx,al
c001aad4:	83 c4 1c             	add    esp,0x1c
c001aad7:	5b                   	pop    ebx
c001aad8:	5e                   	pop    esi
c001aad9:	5f                   	pop    edi
c001aada:	5d                   	pop    ebp
c001aadb:	c3                   	ret    

c001aadc <IDE::read(unsigned char, unsigned char)>:
c001aadc:	55                   	push   ebp
c001aadd:	57                   	push   edi
c001aade:	56                   	push   esi
c001aadf:	53                   	push   ebx
c001aae0:	83 ec 1c             	sub    esp,0x1c
c001aae3:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aae8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aaec:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aaf1:	88 d8                	mov    al,bl
c001aaf3:	2c 08                	sub    al,0x8
c001aaf5:	3c 03                	cmp    al,0x3
c001aaf7:	77 3f                	ja     c001ab38 <IDE::read(unsigned char, unsigned char)+0x5c>
c001aaf9:	0f b6 f2             	movzx  esi,dl
c001aafc:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001aaff:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ab03:	0c 80                	or     al,0x80
c001ab05:	0f b6 c0             	movzx  eax,al
c001ab08:	50                   	push   eax
c001ab09:	6a 0c                	push   0xc
c001ab0b:	56                   	push   esi
c001ab0c:	57                   	push   edi
c001ab0d:	e8 1c ff ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab12:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001ab17:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001ab1b:	ec                   	in     al,dx
c001ab1c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab20:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ab25:	52                   	push   edx
c001ab26:	6a 0c                	push   0xc
c001ab28:	56                   	push   esi
c001ab29:	57                   	push   edi
c001ab2a:	e8 ff fe ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab2f:	83 c4 20             	add    esp,0x20
c001ab32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab36:	eb 38                	jmp    c001ab70 <IDE::read(unsigned char, unsigned char)+0x94>
c001ab38:	80 fb 07             	cmp    bl,0x7
c001ab3b:	77 0d                	ja     c001ab4a <IDE::read(unsigned char, unsigned char)+0x6e>
c001ab3d:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001ab45:	8d 14 18             	lea    edx,[eax+ebx*1]
c001ab48:	eb 25                	jmp    c001ab6f <IDE::read(unsigned char, unsigned char)+0x93>
c001ab4a:	80 fb 0d             	cmp    bl,0xd
c001ab4d:	77 0d                	ja     c001ab5c <IDE::read(unsigned char, unsigned char)+0x80>
c001ab4f:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ab56:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001ab5a:	eb 13                	jmp    c001ab6f <IDE::read(unsigned char, unsigned char)+0x93>
c001ab5c:	31 c0                	xor    eax,eax
c001ab5e:	80 fb 15             	cmp    bl,0x15
c001ab61:	77 0d                	ja     c001ab70 <IDE::read(unsigned char, unsigned char)+0x94>
c001ab63:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ab6b:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001ab6f:	ec                   	in     al,dx
c001ab70:	83 c4 1c             	add    esp,0x1c
c001ab73:	5b                   	pop    ebx
c001ab74:	5e                   	pop    esi
c001ab75:	5f                   	pop    edi
c001ab76:	5d                   	pop    ebp
c001ab77:	c3                   	ret    

c001ab78 <IDE::waitInterrupt(unsigned char)>:
c001ab78:	57                   	push   edi
c001ab79:	56                   	push   esi
c001ab7a:	53                   	push   ebx
c001ab7b:	31 db                	xor    ebx,ebx
c001ab7d:	83 ec 10             	sub    esp,0x10
c001ab80:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ab84:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ab89:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001ab90:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ab94:	84 c0                	test   al,al
c001ab96:	75 32                	jne    c001abca <IDE::waitInterrupt(unsigned char)+0x52>
c001ab98:	50                   	push   eax
c001ab99:	6a 0c                	push   0xc
c001ab9b:	56                   	push   esi
c001ab9c:	57                   	push   edi
c001ab9d:	e8 3a ff ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	24 01                	and    al,0x1
c001aba7:	84 c0                	test   al,al
c001aba9:	75 27                	jne    c001abd2 <IDE::waitInterrupt(unsigned char)+0x5a>
c001abab:	f6 c3 04             	test   bl,0x4
c001abae:	75 12                	jne    c001abc2 <IDE::waitInterrupt(unsigned char)+0x4a>
c001abb0:	83 fb 32             	cmp    ebx,0x32
c001abb3:	7e 0d                	jle    c001abc2 <IDE::waitInterrupt(unsigned char)+0x4a>
c001abb5:	83 ec 0c             	sub    esp,0xc
c001abb8:	6a 64                	push   0x64
c001abba:	e8 fd a7 ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	83 fb 3c             	cmp    ebx,0x3c
c001abc5:	74 0b                	je     c001abd2 <IDE::waitInterrupt(unsigned char)+0x5a>
c001abc7:	43                   	inc    ebx
c001abc8:	eb bf                	jmp    c001ab89 <IDE::waitInterrupt(unsigned char)+0x11>
c001abca:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001abd2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001abd6:	83 c4 10             	add    esp,0x10
c001abd9:	5b                   	pop    ebx
c001abda:	5e                   	pop    esi
c001abdb:	5f                   	pop    edi
c001abdc:	c3                   	ret    

c001abdd <ideChannel0IRQHandler(regs*, void*)>:
c001abdd:	83 ec 10             	sub    esp,0x10
c001abe0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abe4:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001abeb:	6a 07                	push   0x7
c001abed:	6a 00                	push   0x0
c001abef:	50                   	push   eax
c001abf0:	e8 e7 fe ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001abf5:	83 c4 1c             	add    esp,0x1c
c001abf8:	c3                   	ret    

c001abf9 <ideChannel1IRQHandler(regs*, void*)>:
c001abf9:	83 ec 10             	sub    esp,0x10
c001abfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac00:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ac07:	6a 07                	push   0x7
c001ac09:	6a 01                	push   0x1
c001ac0b:	50                   	push   eax
c001ac0c:	e8 cb fe ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001ac11:	83 c4 1c             	add    esp,0x1c
c001ac14:	c3                   	ret    
c001ac15:	90                   	nop

c001ac16 <IDE::enableIRQs(unsigned char, bool)>:
c001ac16:	57                   	push   edi
c001ac17:	56                   	push   esi
c001ac18:	be 04 00 00 00       	mov    esi,0x4
c001ac1d:	53                   	push   ebx
c001ac1e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ac23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac27:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ac2c:	0f 94 c0             	sete   al
c001ac2f:	00 c0                	add    al,al
c001ac31:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ac38:	0f b6 c0             	movzx  eax,al
c001ac3b:	50                   	push   eax
c001ac3c:	6a 0c                	push   0xc
c001ac3e:	57                   	push   edi
c001ac3f:	53                   	push   ebx
c001ac40:	e8 e9 fd ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	50                   	push   eax
c001ac49:	6a 0c                	push   0xc
c001ac4b:	57                   	push   edi
c001ac4c:	53                   	push   ebx
c001ac4d:	e8 8a fe ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001ac52:	83 c4 10             	add    esp,0x10
c001ac55:	4e                   	dec    esi
c001ac56:	75 f0                	jne    c001ac48 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ac58:	5b                   	pop    ebx
c001ac59:	5e                   	pop    esi
c001ac5a:	5f                   	pop    edi
c001ac5b:	c3                   	ret    

c001ac5c <IDE::open(int, int, void*)>:
c001ac5c:	55                   	push   ebp
c001ac5d:	57                   	push   edi
c001ac5e:	56                   	push   esi
c001ac5f:	53                   	push   ebx
c001ac60:	83 ec 1c             	sub    esp,0x1c
c001ac63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ac67:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ac6e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ac77:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ac80:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ac87:	0f 85 b7 02 00 00    	jne    c001af44 <IDE::open(int, int, void*)+0x2e8>
c001ac8d:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001ac93:	88 c8                	mov    al,cl
c001ac95:	24 7f                	and    al,0x7f
c001ac97:	0f b6 c0             	movzx  eax,al
c001ac9a:	83 f8 05             	cmp    eax,0x5
c001ac9d:	74 05                	je     c001aca4 <IDE::open(int, int, void*)+0x48>
c001ac9f:	83 f8 0f             	cmp    eax,0xf
c001aca2:	75 32                	jne    c001acd6 <IDE::open(int, int, void*)+0x7a>
c001aca4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001acaa:	83 e0 fc             	and    eax,0xfffffffc
c001acad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001acb4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001acba:	83 e0 fc             	and    eax,0xfffffffc
c001acbd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001acc4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001acca:	83 e0 fc             	and    eax,0xfffffffc
c001accd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001acd4:	eb 14                	jmp    c001acea <IDE::open(int, int, void*)+0x8e>
c001acd6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ace0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001acea:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001acf1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acf6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001acfd:	89 fe                	mov    esi,edi
c001acff:	c1 e6 10             	shl    esi,0x10
c001ad02:	89 e8                	mov    eax,ebp
c001ad04:	c1 e0 0b             	shl    eax,0xb
c001ad07:	09 c6                	or     esi,eax
c001ad09:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ad10:	c1 e0 08             	shl    eax,0x8
c001ad13:	09 c6                	or     esi,eax
c001ad15:	89 f0                	mov    eax,esi
c001ad17:	0d 08 00 00 80       	or     eax,0x80000008
c001ad1c:	ef                   	out    dx,eax
c001ad1d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad22:	ed                   	in     eax,dx
c001ad23:	c1 e8 10             	shr    eax,0x10
c001ad26:	3d ff ff 00 00       	cmp    eax,0xffff
c001ad2b:	0f 84 f9 00 00 00    	je     c001ae2a <IDE::open(int, int, void*)+0x1ce>
c001ad31:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ad37:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad3c:	89 f0                	mov    eax,esi
c001ad3e:	ef                   	out    dx,eax
c001ad3f:	b0 fe                	mov    al,0xfe
c001ad41:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad46:	ee                   	out    dx,al
c001ad47:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad4c:	89 f0                	mov    eax,esi
c001ad4e:	ef                   	out    dx,eax
c001ad4f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad54:	ed                   	in     eax,dx
c001ad55:	3c fe                	cmp    al,0xfe
c001ad57:	0f 85 a5 00 00 00    	jne    c001ae02 <IDE::open(int, int, void*)+0x1a6>
c001ad5d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001ad63:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001ad6a:	74 31                	je     c001ad9d <IDE::open(int, int, void*)+0x141>
c001ad6c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ad72:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ad76:	83 ec 0c             	sub    esp,0xc
c001ad79:	fe c0                	inc    al
c001ad7b:	0f b6 c0             	movzx  eax,al
c001ad7e:	50                   	push   eax
c001ad7f:	55                   	push   ebp
c001ad80:	57                   	push   edi
c001ad81:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001ad87:	51                   	push   ecx
c001ad88:	e8 bb 3f ff ff       	call   c000ed48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ad8d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ad92:	83 c4 1c             	add    esp,0x1c
c001ad95:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ad9b:	eb 0a                	jmp    c001ada7 <IDE::open(int, int, void*)+0x14b>
c001ad9d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ada7:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001adae:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001adb3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001adba:	89 ea                	mov    edx,ebp
c001adbc:	c1 e6 10             	shl    esi,0x10
c001adbf:	c1 e0 08             	shl    eax,0x8
c001adc2:	09 c6                	or     esi,eax
c001adc4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001adcb:	c1 e0 0b             	shl    eax,0xb
c001adce:	09 c6                	or     esi,eax
c001add0:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001add6:	89 f0                	mov    eax,esi
c001add8:	ef                   	out    dx,eax
c001add9:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001addf:	bf fc 0c 00 00       	mov    edi,0xcfc
c001ade4:	89 fa                	mov    edx,edi
c001ade6:	88 c8                	mov    al,cl
c001ade8:	ee                   	out    dx,al
c001ade9:	89 f0                	mov    eax,esi
c001adeb:	89 ea                	mov    edx,ebp
c001aded:	ef                   	out    dx,eax
c001adee:	89 fa                	mov    edx,edi
c001adf0:	ed                   	in     eax,dx
c001adf1:	0f b6 c0             	movzx  eax,al
c001adf4:	39 c8                	cmp    eax,ecx
c001adf6:	74 42                	je     c001ae3a <IDE::open(int, int, void*)+0x1de>
c001adf8:	83 ec 0c             	sub    esp,0xc
c001adfb:	68 40 17 02 c0       	push   0xc0021740
c001ae00:	eb 30                	jmp    c001ae32 <IDE::open(int, int, void*)+0x1d6>
c001ae02:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ae0b:	75 13                	jne    c001ae20 <IDE::open(int, int, void*)+0x1c4>
c001ae0d:	80 f9 8a             	cmp    cl,0x8a
c001ae10:	74 05                	je     c001ae17 <IDE::open(int, int, void*)+0x1bb>
c001ae12:	80 f9 80             	cmp    cl,0x80
c001ae15:	75 09                	jne    c001ae20 <IDE::open(int, int, void*)+0x1c4>
c001ae17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ae1e:	eb 1a                	jmp    c001ae3a <IDE::open(int, int, void*)+0x1de>
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	68 48 17 02 c0       	push   0xc0021748
c001ae28:	eb 08                	jmp    c001ae32 <IDE::open(int, int, void*)+0x1d6>
c001ae2a:	83 ec 0c             	sub    esp,0xc
c001ae2d:	68 79 17 02 c0       	push   0xc0021779
c001ae32:	e8 8e 59 ff ff       	call   c00107c5 <KePanic(char const*)>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ae41:	79 1c                	jns    c001ae5f <IDE::open(int, int, void*)+0x203>
c001ae43:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ae49:	25 fc ff 00 00       	and    eax,0xfffc
c001ae4e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ae55:	83 c0 08             	add    eax,0x8
c001ae58:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ae5f:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001ae66:	89 c2                	mov    edx,eax
c001ae68:	83 e2 0f             	and    edx,0xf
c001ae6b:	83 fa 08             	cmp    edx,0x8
c001ae6e:	75 0a                	jne    c001ae7a <IDE::open(int, int, void*)+0x21e>
c001ae70:	83 e8 02             	sub    eax,0x2
c001ae73:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ae7a:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001ae81:	89 c2                	mov    edx,eax
c001ae83:	83 e2 0f             	and    edx,0xf
c001ae86:	83 fa 08             	cmp    edx,0x8
c001ae89:	75 0a                	jne    c001ae95 <IDE::open(int, int, void*)+0x239>
c001ae8b:	83 e8 02             	sub    eax,0x2
c001ae8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ae95:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ae9c:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001aea3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aea6:	89 d0                	mov    eax,edx
c001aea8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aeac:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001aeb0:	88 d1                	mov    cl,dl
c001aeb2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aeb7:	fe c1                	inc    cl
c001aeb9:	0f b6 c9             	movzx  ecx,cl
c001aebc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aebf:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001aec6:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001aeca:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001aece:	88 c2                	mov    dl,al
c001aed0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001aed5:	80 c2 02             	add    dl,0x2
c001aed8:	0f b6 d2             	movzx  edx,dl
c001aedb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aede:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001aee5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001aee9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aeed:	88 c1                	mov    cl,al
c001aeef:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aef4:	80 c1 03             	add    cl,0x3
c001aef7:	0f b6 c9             	movzx  ecx,cl
c001aefa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aefd:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001af04:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001af08:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001af0c:	88 c2                	mov    dl,al
c001af0e:	80 c2 04             	add    dl,0x4
c001af11:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001af17:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001af1c:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001af23:	85 f6                	test   esi,esi
c001af25:	74 5d                	je     c001af84 <IDE::open(int, int, void*)+0x328>
c001af27:	0f b6 d2             	movzx  edx,dl
c001af2a:	04 05                	add    al,0x5
c001af2c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af2f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af33:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001af37:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001af3d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001af42:	eb 40                	jmp    c001af84 <IDE::open(int, int, void*)+0x328>
c001af44:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001af4b:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001af52:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001af59:	05 06 02 00 00       	add    eax,0x206
c001af5e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001af65:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001af6c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001af73:	05 06 02 00 00       	add    eax,0x206
c001af78:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001af7f:	e9 db fe ff ff       	jmp    c001ae5f <IDE::open(int, int, void*)+0x203>
c001af84:	50                   	push   eax
c001af85:	50                   	push   eax
c001af86:	6a 00                	push   0x0
c001af88:	53                   	push   ebx
c001af89:	e8 7a fa ff ff       	call   c001aa08 <IDE::prepareInterrupt(unsigned char)>
c001af8e:	5a                   	pop    edx
c001af8f:	59                   	pop    ecx
c001af90:	6a 01                	push   0x1
c001af92:	53                   	push   ebx
c001af93:	e8 70 fa ff ff       	call   c001aa08 <IDE::prepareInterrupt(unsigned char)>
c001af98:	83 c4 0c             	add    esp,0xc
c001af9b:	6a 00                	push   0x0
c001af9d:	6a 00                	push   0x0
c001af9f:	53                   	push   ebx
c001afa0:	e8 71 fc ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001afa5:	83 c4 0c             	add    esp,0xc
c001afa8:	6a 00                	push   0x0
c001afaa:	6a 01                	push   0x1
c001afac:	53                   	push   ebx
c001afad:	e8 64 fc ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001afbc:	74 34                	je     c001aff2 <IDE::open(int, int, void*)+0x396>
c001afbe:	83 ec 0c             	sub    esp,0xc
c001afc1:	53                   	push   ebx
c001afc2:	6a 01                	push   0x1
c001afc4:	68 dd ab 01 c0       	push   0xc001abdd
c001afc9:	6a 0e                	push   0xe
c001afcb:	53                   	push   ebx
c001afcc:	e8 7f 0e ff ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001afd1:	83 c4 14             	add    esp,0x14
c001afd4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001afda:	53                   	push   ebx
c001afdb:	6a 01                	push   0x1
c001afdd:	68 f9 ab 01 c0       	push   0xc001abf9
c001afe2:	6a 0f                	push   0xf
c001afe4:	53                   	push   ebx
c001afe5:	e8 66 0e ff ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001afea:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001aff0:	eb 38                	jmp    c001b02a <IDE::open(int, int, void*)+0x3ce>
c001aff2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001affc:	83 ec 0c             	sub    esp,0xc
c001afff:	53                   	push   ebx
c001b000:	6a 00                	push   0x0
c001b002:	68 dd ab 01 c0       	push   0xc001abdd
c001b007:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b00d:	53                   	push   ebx
c001b00e:	e8 3d 0e ff ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b013:	83 c4 14             	add    esp,0x14
c001b016:	53                   	push   ebx
c001b017:	6a 00                	push   0x0
c001b019:	68 f9 ab 01 c0       	push   0xc001abf9
c001b01e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b024:	53                   	push   ebx
c001b025:	e8 26 0e ff ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b02a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b02c:	83 c4 20             	add    esp,0x20
c001b02f:	83 ec 0c             	sub    esp,0xc
c001b032:	53                   	push   ebx
c001b033:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b036:	83 c4 0c             	add    esp,0xc
c001b039:	6a 07                	push   0x7
c001b03b:	6a 00                	push   0x0
c001b03d:	53                   	push   ebx
c001b03e:	e8 99 fa ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b043:	83 c4 0c             	add    esp,0xc
c001b046:	6a 07                	push   0x7
c001b048:	6a 01                	push   0x1
c001b04a:	53                   	push   ebx
c001b04b:	e8 8c fa ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b050:	83 c4 0c             	add    esp,0xc
c001b053:	6a 01                	push   0x1
c001b055:	6a 00                	push   0x0
c001b057:	53                   	push   ebx
c001b058:	e8 b9 fb ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001b05d:	83 c4 0c             	add    esp,0xc
c001b060:	6a 01                	push   0x1
c001b062:	6a 01                	push   0x1
c001b064:	53                   	push   ebx
c001b065:	e8 ac fb ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001b06a:	83 c4 2c             	add    esp,0x2c
c001b06d:	31 c0                	xor    eax,eax
c001b06f:	5b                   	pop    ebx
c001b070:	5e                   	pop    esi
c001b071:	5f                   	pop    edi
c001b072:	5d                   	pop    ebp
c001b073:	c3                   	ret    

c001b074 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b074:	55                   	push   ebp
c001b075:	57                   	push   edi
c001b076:	56                   	push   esi
c001b077:	53                   	push   ebx
c001b078:	83 ec 1c             	sub    esp,0x1c
c001b07b:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001b080:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b084:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b088:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b08c:	88 d0                	mov    al,dl
c001b08e:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001b093:	2c 08                	sub    al,0x8
c001b095:	3c 03                	cmp    al,0x3
c001b097:	77 57                	ja     c001b0f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b099:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b09d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b0a0:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b0a4:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b0a8:	0c 80                	or     al,0x80
c001b0aa:	0f b6 c0             	movzx  eax,al
c001b0ad:	50                   	push   eax
c001b0ae:	6a 0c                	push   0xc
c001b0b0:	53                   	push   ebx
c001b0b1:	56                   	push   esi
c001b0b2:	e8 77 f9 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0b7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b0bc:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b0c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b0c5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b0c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b0cb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b0d0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b0d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b0d8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b0e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b0e4:	83 c4 2c             	add    esp,0x2c
c001b0e7:	5b                   	pop    ebx
c001b0e8:	5e                   	pop    esi
c001b0e9:	5f                   	pop    edi
c001b0ea:	5d                   	pop    ebp
c001b0eb:	e9 3e f9 ff ff       	jmp    c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0f0:	80 fa 07             	cmp    dl,0x7
c001b0f3:	77 0c                	ja     c001b101 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b0f5:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b0fd:	01 c2                	add    edx,eax
c001b0ff:	eb 23                	jmp    c001b124 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b101:	80 fa 0d             	cmp    dl,0xd
c001b104:	77 0d                	ja     c001b113 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b106:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b10d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b111:	eb 11                	jmp    c001b124 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b113:	80 fa 15             	cmp    dl,0x15
c001b116:	77 0e                	ja     c001b126 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b118:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b120:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b124:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b126:	83 c4 1c             	add    esp,0x1c
c001b129:	5b                   	pop    ebx
c001b12a:	5e                   	pop    esi
c001b12b:	5f                   	pop    edi
c001b12c:	5d                   	pop    ebp
c001b12d:	c3                   	ret    

c001b12e <IDE::detect()>:
c001b12e:	55                   	push   ebp
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b138:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b13f:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b146:	0f 85 91 02 00 00    	jne    c001b3dd <IDE::detect()+0x2af>
c001b14c:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b153:	31 db                	xor    ebx,ebx
c001b155:	31 ff                	xor    edi,edi
c001b157:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b15c:	89 f8                	mov    eax,edi
c001b15e:	c1 e0 06             	shl    eax,0x6
c001b161:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b169:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b16d:	c0 e0 04             	shl    al,0x4
c001b170:	0c a0                	or     al,0xa0
c001b172:	0f b6 c0             	movzx  eax,al
c001b175:	50                   	push   eax
c001b176:	6a 06                	push   0x6
c001b178:	53                   	push   ebx
c001b179:	56                   	push   esi
c001b17a:	e8 af f8 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b17f:	83 c4 0c             	add    esp,0xc
c001b182:	6a 0c                	push   0xc
c001b184:	53                   	push   ebx
c001b185:	56                   	push   esi
c001b186:	e8 51 f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b18b:	83 c4 0c             	add    esp,0xc
c001b18e:	6a 0c                	push   0xc
c001b190:	53                   	push   ebx
c001b191:	56                   	push   esi
c001b192:	e8 45 f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b197:	83 c4 0c             	add    esp,0xc
c001b19a:	6a 0c                	push   0xc
c001b19c:	53                   	push   ebx
c001b19d:	56                   	push   esi
c001b19e:	e8 39 f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1a3:	83 c4 0c             	add    esp,0xc
c001b1a6:	6a 0c                	push   0xc
c001b1a8:	53                   	push   ebx
c001b1a9:	56                   	push   esi
c001b1aa:	e8 2d f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1af:	68 ec 00 00 00       	push   0xec
c001b1b4:	6a 07                	push   0x7
c001b1b6:	53                   	push   ebx
c001b1b7:	56                   	push   esi
c001b1b8:	e8 71 f8 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1bd:	83 c4 1c             	add    esp,0x1c
c001b1c0:	6a 0c                	push   0xc
c001b1c2:	53                   	push   ebx
c001b1c3:	56                   	push   esi
c001b1c4:	e8 13 f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1c9:	83 c4 0c             	add    esp,0xc
c001b1cc:	6a 0c                	push   0xc
c001b1ce:	53                   	push   ebx
c001b1cf:	56                   	push   esi
c001b1d0:	e8 07 f9 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1d5:	83 c4 0c             	add    esp,0xc
c001b1d8:	6a 0c                	push   0xc
c001b1da:	53                   	push   ebx
c001b1db:	56                   	push   esi
c001b1dc:	e8 fb f8 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1e1:	83 c4 0c             	add    esp,0xc
c001b1e4:	6a 0c                	push   0xc
c001b1e6:	53                   	push   ebx
c001b1e7:	56                   	push   esi
c001b1e8:	e8 ef f8 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1ed:	83 c4 0c             	add    esp,0xc
c001b1f0:	6a 0c                	push   0xc
c001b1f2:	53                   	push   ebx
c001b1f3:	56                   	push   esi
c001b1f4:	e8 e3 f8 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b1f9:	83 c4 10             	add    esp,0x10
c001b1fc:	84 c0                	test   al,al
c001b1fe:	0f 84 62 01 00 00    	je     c001b366 <IDE::detect()+0x238>
c001b204:	31 ed                	xor    ebp,ebp
c001b206:	50                   	push   eax
c001b207:	6a 0c                	push   0xc
c001b209:	53                   	push   ebx
c001b20a:	56                   	push   esi
c001b20b:	e8 cc f8 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	88 c2                	mov    dl,al
c001b215:	80 e2 01             	and    dl,0x1
c001b218:	84 d2                	test   dl,dl
c001b21a:	0f 85 64 01 00 00    	jne    c001b384 <IDE::detect()+0x256>
c001b220:	84 c0                	test   al,al
c001b222:	78 04                	js     c001b228 <IDE::detect()+0xfa>
c001b224:	24 08                	and    al,0x8
c001b226:	75 23                	jne    c001b24b <IDE::detect()+0x11d>
c001b228:	45                   	inc    ebp
c001b229:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b22f:	7e d5                	jle    c001b206 <IDE::detect()+0xd8>
c001b231:	83 ec 0c             	sub    esp,0xc
c001b234:	6a 32                	push   0x32
c001b236:	e8 81 a1 ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001b23b:	83 c4 10             	add    esp,0x10
c001b23e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b244:	75 c0                	jne    c001b206 <IDE::detect()+0xd8>
c001b246:	e9 39 01 00 00       	jmp    c001b384 <IDE::detect()+0x256>
c001b24b:	31 d2                	xor    edx,edx
c001b24d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b251:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b255:	83 ec 0c             	sub    esp,0xc
c001b258:	68 80 00 00 00       	push   0x80
c001b25d:	55                   	push   ebp
c001b25e:	6a 00                	push   0x0
c001b260:	53                   	push   ebx
c001b261:	56                   	push   esi
c001b262:	e8 0d fe ff ff       	call   c001b074 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b267:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b26c:	89 f8                	mov    eax,edi
c001b26e:	c1 e0 06             	shl    eax,0x6
c001b271:	01 f0                	add    eax,esi
c001b273:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b27a:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b281:	89 ca                	mov    edx,ecx
c001b283:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b287:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b28d:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b293:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b297:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b29e:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b2a6:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b2ad:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b2b5:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b2bb:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b2c2:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b2c8:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b2cc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b2d0:	83 c4 20             	add    esp,0x20
c001b2d3:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b2d6:	83 c5 02             	add    ebp,0x2
c001b2d9:	83 c0 02             	add    eax,0x2
c001b2dc:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b2e2:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b2e5:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b2eb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b2ef:	75 e2                	jne    c001b2d3 <IDE::detect()+0x1a5>
c001b2f1:	89 f9                	mov    ecx,edi
c001b2f3:	c1 e1 06             	shl    ecx,0x6
c001b2f6:	01 f1                	add    ecx,esi
c001b2f8:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b2ff:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b306:	c1 e8 09             	shr    eax,0x9
c001b309:	24 01                	and    al,0x1
c001b30b:	84 d2                	test   dl,dl
c001b30d:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b313:	75 22                	jne    c001b337 <IDE::detect()+0x209>
c001b315:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b31c:	74 47                	je     c001b365 <IDE::detect()+0x237>
c001b31e:	83 ec 0c             	sub    esp,0xc
c001b321:	68 7c 01 00 00       	push   0x17c
c001b326:	e8 db c7 fe ff       	call   c0007b06 <malloc>
c001b32b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b32e:	89 c5                	mov    ebp,eax
c001b330:	e8 3b 05 00 00       	call   c001b870 <ATA::ATA()>
c001b335:	eb 17                	jmp    c001b34e <IDE::detect()+0x220>
c001b337:	83 ec 0c             	sub    esp,0xc
c001b33a:	68 84 01 00 00       	push   0x184
c001b33f:	e8 c2 c7 fe ff       	call   c0007b06 <malloc>
c001b344:	89 04 24             	mov    DWORD PTR [esp],eax
c001b347:	89 c5                	mov    ebp,eax
c001b349:	e8 7e 0e 00 00       	call   c001c1cc <ATAPI::ATAPI()>
c001b34e:	5a                   	pop    edx
c001b34f:	59                   	pop    ecx
c001b350:	55                   	push   ebp
c001b351:	56                   	push   esi
c001b352:	e8 4b 0b ff ff       	call   c000bea2 <Device::addChild(Device*)>
c001b357:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b35a:	56                   	push   esi
c001b35b:	57                   	push   edi
c001b35c:	6a 00                	push   0x0
c001b35e:	55                   	push   ebp
c001b35f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b362:	83 c4 20             	add    esp,0x20
c001b365:	47                   	inc    edi
c001b366:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b36b:	74 0a                	je     c001b377 <IDE::detect()+0x249>
c001b36d:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b372:	e9 e5 fd ff ff       	jmp    c001b15c <IDE::detect()+0x2e>
c001b377:	4b                   	dec    ebx
c001b378:	74 63                	je     c001b3dd <IDE::detect()+0x2af>
c001b37a:	bb 01 00 00 00       	mov    ebx,0x1
c001b37f:	e9 d3 fd ff ff       	jmp    c001b157 <IDE::detect()+0x29>
c001b384:	50                   	push   eax
c001b385:	6a 04                	push   0x4
c001b387:	53                   	push   ebx
c001b388:	56                   	push   esi
c001b389:	e8 4e f7 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b38e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b392:	83 c4 0c             	add    esp,0xc
c001b395:	6a 05                	push   0x5
c001b397:	53                   	push   ebx
c001b398:	56                   	push   esi
c001b399:	e8 3e f7 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b39e:	83 c4 10             	add    esp,0x10
c001b3a1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b3a5:	80 fa 14             	cmp    dl,0x14
c001b3a8:	74 2d                	je     c001b3d7 <IDE::detect()+0x2a9>
c001b3aa:	80 fa 69             	cmp    dl,0x69
c001b3ad:	75 b7                	jne    c001b366 <IDE::detect()+0x238>
c001b3af:	3c 96                	cmp    al,0x96
c001b3b1:	75 b3                	jne    c001b366 <IDE::detect()+0x238>
c001b3b3:	68 a1 00 00 00       	push   0xa1
c001b3b8:	6a 07                	push   0x7
c001b3ba:	53                   	push   ebx
c001b3bb:	56                   	push   esi
c001b3bc:	e8 6d f6 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3c1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b3c8:	e8 ef 9f ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	b2 01                	mov    dl,0x1
c001b3d2:	e9 76 fe ff ff       	jmp    c001b24d <IDE::detect()+0x11f>
c001b3d7:	3c eb                	cmp    al,0xeb
c001b3d9:	75 cf                	jne    c001b3aa <IDE::detect()+0x27c>
c001b3db:	eb d6                	jmp    c001b3b3 <IDE::detect()+0x285>
c001b3dd:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b3e3:	5b                   	pop    ebx
c001b3e4:	5e                   	pop    esi
c001b3e5:	5f                   	pop    edi
c001b3e6:	5d                   	pop    ebp
c001b3e7:	c3                   	ret    

c001b3e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b3e8:	56                   	push   esi
c001b3e9:	53                   	push   ebx
c001b3ea:	83 ec 14             	sub    esp,0x14
c001b3ed:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001b3f1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b3f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b3f9:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b3fd:	84 d2                	test   dl,dl
c001b3ff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b403:	0f 84 a8 00 00 00    	je     c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b409:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	68 a3 17 02 c0       	push   0xc00217a3
c001b415:	e8 5c f6 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b421:	80 fa 01             	cmp    dl,0x1
c001b424:	0f 84 81 00 00 00    	je     c001b4ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001b42a:	80 fa 02             	cmp    dl,0x2
c001b42d:	75 6e                	jne    c001b49d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001b42f:	00 db                	add    bl,bl
c001b431:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001b435:	50                   	push   eax
c001b436:	6a 01                	push   0x1
c001b438:	0f b6 db             	movzx  ebx,bl
c001b43b:	c1 e3 06             	shl    ebx,0x6
c001b43e:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001b446:	50                   	push   eax
c001b447:	56                   	push   esi
c001b448:	e8 8f f6 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b454:	88 c1                	mov    cl,al
c001b456:	80 e1 01             	and    cl,0x1
c001b459:	84 c9                	test   cl,cl
c001b45b:	74 02                	je     c001b45f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001b45d:	b2 07                	mov    dl,0x7
c001b45f:	88 c1                	mov    cl,al
c001b461:	80 e1 02             	and    cl,0x2
c001b464:	74 02                	je     c001b468 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b466:	b2 03                	mov    dl,0x3
c001b468:	88 c1                	mov    cl,al
c001b46a:	80 e1 04             	and    cl,0x4
c001b46d:	74 02                	je     c001b471 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001b46f:	b2 14                	mov    dl,0x14
c001b471:	88 c1                	mov    cl,al
c001b473:	80 e1 08             	and    cl,0x8
c001b476:	74 02                	je     c001b47a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001b478:	b2 03                	mov    dl,0x3
c001b47a:	88 c1                	mov    cl,al
c001b47c:	80 e1 10             	and    cl,0x10
c001b47f:	74 02                	je     c001b483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b481:	b2 15                	mov    dl,0x15
c001b483:	88 c1                	mov    cl,al
c001b485:	80 e1 20             	and    cl,0x20
c001b488:	74 02                	je     c001b48c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b48a:	b2 03                	mov    dl,0x3
c001b48c:	88 c1                	mov    cl,al
c001b48e:	80 e1 40             	and    cl,0x40
c001b491:	74 02                	je     c001b495 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b493:	b2 16                	mov    dl,0x16
c001b495:	84 c0                	test   al,al
c001b497:	79 18                	jns    c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b499:	b2 0d                	mov    dl,0xd
c001b49b:	eb 14                	jmp    c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b49d:	80 fa 03             	cmp    dl,0x3
c001b4a0:	74 0d                	je     c001b4af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001b4a2:	80 fa 04             	cmp    dl,0x4
c001b4a5:	75 0a                	jne    c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b4a7:	b2 08                	mov    dl,0x8
c001b4a9:	eb 06                	jmp    c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b4ab:	b2 13                	mov    dl,0x13
c001b4ad:	eb 02                	jmp    c001b4b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b4af:	b2 17                	mov    dl,0x17
c001b4b1:	83 c4 14             	add    esp,0x14
c001b4b4:	88 d0                	mov    al,dl
c001b4b6:	5b                   	pop    ebx
c001b4b7:	5e                   	pop    esi
c001b4b8:	c3                   	ret    
c001b4b9:	90                   	nop

c001b4ba <IDE::polling(unsigned char, unsigned int)>:
c001b4ba:	57                   	push   edi
c001b4bb:	56                   	push   esi
c001b4bc:	53                   	push   ebx
c001b4bd:	bb 04 00 00 00       	mov    ebx,0x4
c001b4c2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b4c6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b4cb:	52                   	push   edx
c001b4cc:	6a 0c                	push   0xc
c001b4ce:	56                   	push   esi
c001b4cf:	57                   	push   edi
c001b4d0:	e8 07 f6 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	4b                   	dec    ebx
c001b4d9:	75 f0                	jne    c001b4cb <IDE::polling(unsigned char, unsigned int)+0x11>
c001b4db:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b4e0:	50                   	push   eax
c001b4e1:	6a 0c                	push   0xc
c001b4e3:	56                   	push   esi
c001b4e4:	57                   	push   edi
c001b4e5:	e8 f2 f5 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b4ea:	83 c4 10             	add    esp,0x10
c001b4ed:	88 c2                	mov    dl,al
c001b4ef:	80 e2 01             	and    dl,0x1
c001b4f2:	84 d2                	test   dl,dl
c001b4f4:	75 1a                	jne    c001b510 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b4f6:	88 c2                	mov    dl,al
c001b4f8:	80 e2 20             	and    dl,0x20
c001b4fb:	75 0f                	jne    c001b50c <IDE::polling(unsigned char, unsigned int)+0x52>
c001b4fd:	4b                   	dec    ebx
c001b4fe:	74 10                	je     c001b510 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b500:	84 c0                	test   al,al
c001b502:	78 dc                	js     c001b4e0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b504:	24 08                	and    al,0x8
c001b506:	74 d8                	je     c001b4e0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b508:	31 c0                	xor    eax,eax
c001b50a:	eb 06                	jmp    c001b512 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b50c:	b0 01                	mov    al,0x1
c001b50e:	eb 02                	jmp    c001b512 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b510:	b0 02                	mov    al,0x2
c001b512:	5b                   	pop    ebx
c001b513:	5e                   	pop    esi
c001b514:	5f                   	pop    edi
c001b515:	c3                   	ret    

c001b516 <SATABus::close(int, int, void*)>:
c001b516:	31 c0                	xor    eax,eax
c001b518:	c3                   	ret    
c001b519:	90                   	nop

c001b51a <SATABus::detect()>:
c001b51a:	c3                   	ret    
c001b51b:	90                   	nop

c001b51c <SATABus::SATABus()>:
c001b51c:	83 ec 2c             	sub    esp,0x2c
c001b51f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b523:	c7 44 24 04 dc 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217dc
c001b52b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b52e:	e8 b1 0c ff ff       	call   c000c1e4 <HardDiskController::HardDiskController(char const*)>
c001b533:	ba 08 18 02 c0       	mov    edx,0xc0021808
c001b538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b53c:	89 10                	mov    DWORD PTR [eax],edx
c001b53e:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b545:	e8 82 c9 fe ff       	call   c0007ecc <Phys::allocateContiguousPages(int)>
c001b54a:	89 c2                	mov    edx,eax
c001b54c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b550:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b556:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b55d:	e8 be e0 fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001b562:	89 c2                	mov    edx,eax
c001b564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b568:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b56e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b573:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b577:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b57d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b581:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b587:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001b58f:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001b597:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b59b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b59f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a2:	e8 db ea fe ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b5a7:	90                   	nop
c001b5a8:	83 c4 2c             	add    esp,0x2c
c001b5ab:	c3                   	ret    

c001b5ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b5ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5b0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b5b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b5b6:	09 c2                	or     edx,eax
c001b5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b5c4:	31 c0                	xor    eax,eax
c001b5c6:	c1 e9 08             	shr    ecx,0x8
c001b5c9:	83 e1 0f             	and    ecx,0xf
c001b5cc:	39 c8                	cmp    eax,ecx
c001b5ce:	74 0a                	je     c001b5da <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b5d0:	f6 c2 01             	test   dl,0x1
c001b5d3:	74 08                	je     c001b5dd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b5d5:	d1 ea                	shr    edx,1
c001b5d7:	40                   	inc    eax
c001b5d8:	eb f2                	jmp    c001b5cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b5da:	83 c8 ff             	or     eax,0xffffffff
c001b5dd:	c3                   	ret    

c001b5de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b5de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b5e2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b5e5:	89 c2                	mov    edx,eax
c001b5e7:	c1 ea 08             	shr    edx,0x8
c001b5ea:	80 e2 0f             	and    dl,0xf
c001b5ed:	fe ca                	dec    dl
c001b5ef:	75 30                	jne    c001b621 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b5f1:	24 0f                	and    al,0xf
c001b5f3:	3c 03                	cmp    al,0x3
c001b5f5:	75 2a                	jne    c001b621 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b5f7:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b5fa:	b8 02 00 00 00       	mov    eax,0x2
c001b5ff:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b605:	74 1c                	je     c001b623 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b607:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b60d:	b8 04 00 00 00       	mov    eax,0x4
c001b612:	74 0f                	je     c001b623 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b614:	31 c0                	xor    eax,eax
c001b616:	83 fa 03             	cmp    edx,0x3
c001b619:	0f 94 c0             	sete   al
c001b61c:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b620:	c3                   	ret    
c001b621:	31 c0                	xor    eax,eax
c001b623:	c3                   	ret    

c001b624 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b628:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b62b:	0f ba e2 0f          	bt     edx,0xf
c001b62f:	72 f7                	jb     c001b628 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b631:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b634:	83 ca 10             	or     edx,0x10
c001b637:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b63a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b63d:	83 ca 01             	or     edx,0x1
c001b640:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b643:	c3                   	ret    

c001b644 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b648:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b64b:	83 e2 fe             	and    edx,0xfffffffe
c001b64e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b651:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b654:	83 e2 ef             	and    edx,0xffffffef
c001b657:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b65a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b65d:	0f ba e2 0e          	bt     edx,0xe
c001b661:	72 f7                	jb     c001b65a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b663:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b666:	0f ba e2 0f          	bt     edx,0xf
c001b66a:	72 ee                	jb     c001b65a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b66c:	c3                   	ret    
c001b66d:	90                   	nop

c001b66e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b66e:	55                   	push   ebp
c001b66f:	57                   	push   edi
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 1c             	sub    esp,0x1c
c001b675:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b679:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b67d:	53                   	push   ebx
c001b67e:	57                   	push   edi
c001b67f:	e8 c0 ff ff ff       	call   c001b644 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b684:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b688:	83 ec 0c             	sub    esp,0xc
c001b68b:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b691:	c1 e5 0a             	shl    ebp,0xa
c001b694:	01 e8                	add    eax,ebp
c001b696:	89 03                	mov    DWORD PTR [ebx],eax
c001b698:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b69a:	68 00 04 00 00       	push   0x400
c001b69f:	6a 00                	push   0x0
c001b6a1:	50                   	push   eax
c001b6a2:	e8 d9 4e fe ff       	call   c0000580 <memset>
c001b6a7:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b6ad:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b6b1:	83 c4 1c             	add    esp,0x1c
c001b6b4:	01 e8                	add    eax,ebp
c001b6b6:	89 03                	mov    DWORD PTR [ebx],eax
c001b6b8:	c1 e6 08             	shl    esi,0x8
c001b6bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b6c2:	81 c6 00 80 00 00    	add    esi,0x8000
c001b6c8:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b6ce:	01 f0                	add    eax,esi
c001b6d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b6d3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b6d6:	68 00 01 00 00       	push   0x100
c001b6db:	6a 00                	push   0x0
c001b6dd:	50                   	push   eax
c001b6de:	e8 9d 4e fe ff       	call   c0000580 <memset>
c001b6e3:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b6e9:	31 d2                	xor    edx,edx
c001b6eb:	01 f0                	add    eax,esi
c001b6ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b6f0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b6f7:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b6fd:	01 ee                	add    esi,ebp
c001b6ff:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b703:	83 c4 10             	add    esp,0x10
c001b706:	c1 e5 0d             	shl    ebp,0xd
c001b709:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b70f:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b715:	83 c6 20             	add    esi,0x20
c001b718:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b71c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b722:	01 e8                	add    eax,ebp
c001b724:	01 d0                	add    eax,edx
c001b726:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b729:	52                   	push   edx
c001b72a:	68 00 01 00 00       	push   0x100
c001b72f:	6a 00                	push   0x0
c001b731:	50                   	push   eax
c001b732:	e8 49 4e fe ff       	call   c0000580 <memset>
c001b737:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b73d:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b744:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	01 e8                	add    eax,ebp
c001b74d:	01 d0                	add    eax,edx
c001b74f:	81 c2 00 01 00 00    	add    edx,0x100
c001b755:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b758:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b75e:	75 af                	jne    c001b70f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b760:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b767:	50                   	push   eax
c001b768:	50                   	push   eax
c001b769:	53                   	push   ebx
c001b76a:	57                   	push   edi
c001b76b:	e8 b4 fe ff ff       	call   c001b624 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b770:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b777:	83 c4 2c             	add    esp,0x2c
c001b77a:	5b                   	pop    ebx
c001b77b:	5e                   	pop    esi
c001b77c:	5f                   	pop    edi
c001b77d:	5d                   	pop    ebp
c001b77e:	c3                   	ret    
c001b77f:	90                   	nop

c001b780 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b780:	55                   	push   ebp
c001b781:	57                   	push   edi
c001b782:	56                   	push   esi
c001b783:	53                   	push   ebx
c001b784:	31 db                	xor    ebx,ebx
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b78d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b791:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b794:	f7 c7 01 00 00 00    	test   edi,0x1
c001b79a:	74 7a                	je     c001b816 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b79c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b7a0:	89 d8                	mov    eax,ebx
c001b7a2:	c1 e0 07             	shl    eax,0x7
c001b7a5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b7ac:	55                   	push   ebp
c001b7ad:	56                   	push   esi
c001b7ae:	e8 2b fe ff ff       	call   c001b5de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b7b3:	5a                   	pop    edx
c001b7b4:	59                   	pop    ecx
c001b7b5:	83 f8 01             	cmp    eax,0x1
c001b7b8:	75 21                	jne    c001b7db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b7ba:	50                   	push   eax
c001b7bb:	53                   	push   ebx
c001b7bc:	55                   	push   ebp
c001b7bd:	56                   	push   esi
c001b7be:	e8 ab fe ff ff       	call   c001b66e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b7c3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b7ca:	e8 37 c3 fe ff       	call   c0007b06 <malloc>
c001b7cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7d2:	89 c5                	mov    ebp,eax
c001b7d4:	e8 a5 10 00 00       	call   c001c87e <SATA::SATA()>
c001b7d9:	eb 24                	jmp    c001b7ff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b7db:	83 f8 04             	cmp    eax,0x4
c001b7de:	75 36                	jne    c001b816 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b7e0:	51                   	push   ecx
c001b7e1:	53                   	push   ebx
c001b7e2:	55                   	push   ebp
c001b7e3:	56                   	push   esi
c001b7e4:	e8 85 fe ff ff       	call   c001b66e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b7e9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b7f0:	e8 11 c3 fe ff       	call   c0007b06 <malloc>
c001b7f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7f8:	89 c5                	mov    ebp,eax
c001b7fa:	e8 d5 17 00 00       	call   c001cfd4 <SATAPI::SATAPI()>
c001b7ff:	58                   	pop    eax
c001b800:	5a                   	pop    edx
c001b801:	55                   	push   ebp
c001b802:	56                   	push   esi
c001b803:	e8 9a 06 ff ff       	call   c000bea2 <Device::addChild(Device*)>
c001b808:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b80b:	56                   	push   esi
c001b80c:	6a 00                	push   0x0
c001b80e:	53                   	push   ebx
c001b80f:	55                   	push   ebp
c001b810:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b813:	83 c4 20             	add    esp,0x20
c001b816:	d1 ef                	shr    edi,1
c001b818:	43                   	inc    ebx
c001b819:	83 fb 20             	cmp    ebx,0x20
c001b81c:	0f 85 72 ff ff ff    	jne    c001b794 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	5b                   	pop    ebx
c001b826:	5e                   	pop    esi
c001b827:	5f                   	pop    edi
c001b828:	5d                   	pop    ebp
c001b829:	c3                   	ret    

c001b82a <SATABus::open(int, int, void*)>:
c001b82a:	83 ec 14             	sub    esp,0x14
c001b82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b831:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b837:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b83d:	52                   	push   edx
c001b83e:	50                   	push   eax
c001b83f:	e8 3c ff ff ff       	call   c001b780 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b844:	31 c0                	xor    eax,eax
c001b846:	83 c4 1c             	add    esp,0x1c
c001b849:	c3                   	ret    

c001b84a <ATA::close(int, int, void*)>:
c001b84a:	83 ec 0c             	sub    esp,0xc
c001b84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b851:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b857:	85 c0                	test   eax,eax
c001b859:	74 0c                	je     c001b867 <ATA::close(int, int, void*)+0x1d>
c001b85b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b85d:	83 ec 0c             	sub    esp,0xc
c001b860:	50                   	push   eax
c001b861:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b864:	83 c4 10             	add    esp,0x10
c001b867:	31 c0                	xor    eax,eax
c001b869:	83 c4 0c             	add    esp,0xc
c001b86c:	c3                   	ret    
c001b86d:	90                   	nop

c001b86e <ATA::powerSaving(PowerSavingLevel)>:
c001b86e:	c3                   	ret    
c001b86f:	90                   	nop

c001b870 <ATA::ATA()>:
c001b870:	83 ec 1c             	sub    esp,0x1c
c001b873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b877:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001b87f:	c7 44 24 04 d5 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218d5
c001b887:	89 04 24             	mov    DWORD PTR [esp],eax
c001b88a:	e8 d9 09 ff ff       	call   c000c268 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b88f:	ba 48 18 02 c0       	mov    edx,0xc0021848
c001b894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b898:	89 10                	mov    DWORD PTR [eax],edx
c001b89a:	90                   	nop
c001b89b:	83 c4 1c             	add    esp,0x1c
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <ATA::flush(bool)>:
c001b8a0:	53                   	push   ebx
c001b8a1:	83 ec 08             	sub    esp,0x8
c001b8a4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b8a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ad:	19 c0                	sbb    eax,eax
c001b8af:	83 e0 fd             	and    eax,0xfffffffd
c001b8b2:	05 ea 00 00 00       	add    eax,0xea
c001b8b7:	50                   	push   eax
c001b8b8:	6a 07                	push   0x7
c001b8ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b8c1:	50                   	push   eax
c001b8c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b8c8:	e8 61 f1 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	6a 00                	push   0x0
c001b8d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b8d9:	50                   	push   eax
c001b8da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b8e0:	e8 d5 fb ff ff       	call   c001b4ba <IDE::polling(unsigned char, unsigned int)>
c001b8e5:	83 c4 18             	add    esp,0x18
c001b8e8:	5b                   	pop    ebx
c001b8e9:	c3                   	ret    

c001b8ea <ATA::readyForCommand()>:
c001b8ea:	56                   	push   esi
c001b8eb:	53                   	push   ebx
c001b8ec:	53                   	push   ebx
c001b8ed:	31 db                	xor    ebx,ebx
c001b8ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8f3:	51                   	push   ecx
c001b8f4:	6a 0c                	push   0xc
c001b8f6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b8fd:	50                   	push   eax
c001b8fe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b904:	e8 d3 f1 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001b909:	83 c4 10             	add    esp,0x10
c001b90c:	a8 88                	test   al,0x88
c001b90e:	74 1f                	je     c001b92f <ATA::readyForCommand()+0x45>
c001b910:	43                   	inc    ebx
c001b911:	83 fb 63             	cmp    ebx,0x63
c001b914:	7e dd                	jle    c001b8f3 <ATA::readyForCommand()+0x9>
c001b916:	83 ec 0c             	sub    esp,0xc
c001b919:	6a 0a                	push   0xa
c001b91b:	e8 9c 9a ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b929:	75 c8                	jne    c001b8f3 <ATA::readyForCommand()+0x9>
c001b92b:	31 c0                	xor    eax,eax
c001b92d:	eb 02                	jmp    c001b931 <ATA::readyForCommand()+0x47>
c001b92f:	b0 01                	mov    al,0x1
c001b931:	5a                   	pop    edx
c001b932:	5b                   	pop    ebx
c001b933:	5e                   	pop    esi
c001b934:	c3                   	ret    
c001b935:	90                   	nop

c001b936 <ATA::access(unsigned long long, int, void*, bool)>:
c001b936:	55                   	push   ebp
c001b937:	57                   	push   edi
c001b938:	56                   	push   esi
c001b939:	53                   	push   ebx
c001b93a:	83 ec 2c             	sub    esp,0x2c
c001b93d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b941:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001b945:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001b949:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b94d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b951:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001b957:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b95b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b961:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b965:	c1 e0 06             	shl    eax,0x6
c001b968:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b970:	74 5c                	je     c001b9ce <ATA::access(unsigned long long, int, void*, bool)+0x98>
c001b972:	89 ea                	mov    edx,ebp
c001b974:	89 f8                	mov    eax,edi
c001b976:	c1 ea 1c             	shr    edx,0x1c
c001b979:	0f ac e8 1c          	shrd   eax,ebp,0x1c
c001b97d:	89 d1                	mov    ecx,edx
c001b97f:	09 c1                	or     ecx,eax
c001b981:	74 25                	je     c001b9a8 <ATA::access(unsigned long long, int, void*, bool)+0x72>
c001b983:	31 db                	xor    ebx,ebx
c001b985:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b98c:	89 ea                	mov    edx,ebp
c001b98e:	89 f8                	mov    eax,edi
c001b990:	0f ad d0             	shrd   eax,edx,cl
c001b993:	d3 ea                	shr    edx,cl
c001b995:	f6 c1 20             	test   cl,0x20
c001b998:	74 02                	je     c001b99c <ATA::access(unsigned long long, int, void*, bool)+0x66>
c001b99a:	89 d0                	mov    eax,edx
c001b99c:	88 44 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],al
c001b9a0:	43                   	inc    ebx
c001b9a1:	83 fb 06             	cmp    ebx,0x6
c001b9a4:	75 df                	jne    c001b985 <ATA::access(unsigned long long, int, void*, bool)+0x4f>
c001b9a6:	eb 73                	jmp    c001ba1b <ATA::access(unsigned long long, int, void*, bool)+0xe5>
c001b9a8:	66 89 7c 24 1a       	mov    WORD PTR [esp+0x1a],di
c001b9ad:	89 f8                	mov    eax,edi
c001b9af:	b3 01                	mov    bl,0x1
c001b9b1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b9b8:	0f ac e8 10          	shrd   eax,ebp,0x10
c001b9bc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b9c0:	89 f8                	mov    eax,edi
c001b9c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b9c7:	c1 e8 18             	shr    eax,0x18
c001b9ca:	89 c2                	mov    edx,eax
c001b9cc:	eb 51                	jmp    c001ba1f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001b9ce:	6a 00                	push   0x0
c001b9d0:	31 db                	xor    ebx,ebx
c001b9d2:	6a 3f                	push   0x3f
c001b9d4:	55                   	push   ebp
c001b9d5:	57                   	push   edi
c001b9d6:	e8 c5 2a 00 00       	call   c001e4a0 <__umoddi3>
c001b9db:	83 c4 10             	add    esp,0x10
c001b9de:	fe c0                	inc    al
c001b9e0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b9e4:	6a 00                	push   0x0
c001b9e6:	68 f0 03 00 00       	push   0x3f0
c001b9eb:	55                   	push   ebp
c001b9ec:	57                   	push   edi
c001b9ed:	e8 ae 29 00 00       	call   c001e3a0 <__udivdi3>
c001b9f2:	83 c4 10             	add    esp,0x10
c001b9f5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b9fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ba01:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ba06:	6a 00                	push   0x0
c001ba08:	6a 3f                	push   0x3f
c001ba0a:	55                   	push   ebp
c001ba0b:	57                   	push   edi
c001ba0c:	e8 8f 29 00 00       	call   c001e3a0 <__udivdi3>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	88 c2                	mov    dl,al
c001ba16:	80 e2 0f             	and    dl,0xf
c001ba19:	eb 04                	jmp    c001ba1f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001ba1b:	31 d2                	xor    edx,edx
c001ba1d:	b3 02                	mov    bl,0x2
c001ba1f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001ba23:	50                   	push   eax
c001ba24:	6a 00                	push   0x0
c001ba26:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba2d:	50                   	push   eax
c001ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ba32:	e8 df f1 ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001ba37:	89 34 24             	mov    DWORD PTR [esp],esi
c001ba3a:	e8 ab fe ff ff       	call   c001b8ea <ATA::readyForCommand()>
c001ba3f:	83 c4 10             	add    esp,0x10
c001ba42:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ba46:	84 c0                	test   al,al
c001ba48:	75 0a                	jne    c001ba54 <ATA::access(unsigned long long, int, void*, bool)+0x11e>
c001ba4a:	bb 01 00 00 00       	mov    ebx,0x1
c001ba4f:	e9 77 02 00 00       	jmp    c001bccb <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001ba54:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001ba5a:	8b 8e 6c 01 00 00    	mov    ecx,DWORD PTR [esi+0x16c]
c001ba60:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001ba67:	c1 e0 04             	shl    eax,0x4
c001ba6a:	08 c2                	or     dl,al
c001ba6c:	84 db                	test   bl,bl
c001ba6e:	75 05                	jne    c001ba75 <ATA::access(unsigned long long, int, void*, bool)+0x13f>
c001ba70:	80 ca a0             	or     dl,0xa0
c001ba73:	eb 03                	jmp    c001ba78 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001ba75:	80 ca e0             	or     dl,0xe0
c001ba78:	0f b6 d2             	movzx  edx,dl
c001ba7b:	52                   	push   edx
c001ba7c:	6a 06                	push   0x6
c001ba7e:	57                   	push   edi
c001ba7f:	51                   	push   ecx
c001ba80:	e8 a9 ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	6a 00                	push   0x0
c001ba8a:	6a 01                	push   0x1
c001ba8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba93:	50                   	push   eax
c001ba94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba9a:	e8 8f ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	80 fb 02             	cmp    bl,0x2
c001baa5:	75 6e                	jne    c001bb15 <ATA::access(unsigned long long, int, void*, bool)+0x1df>
c001baa7:	6a 00                	push   0x0
c001baa9:	6a 08                	push   0x8
c001baab:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bab2:	50                   	push   eax
c001bab3:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bab9:	e8 70 ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001babe:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bac3:	50                   	push   eax
c001bac4:	6a 09                	push   0x9
c001bac6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bacd:	50                   	push   eax
c001bace:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bad4:	e8 55 ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bad9:	83 c4 20             	add    esp,0x20
c001badc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bae1:	50                   	push   eax
c001bae2:	6a 0a                	push   0xa
c001bae4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001baeb:	50                   	push   eax
c001baec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001baf2:	e8 37 ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baf7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bafc:	50                   	push   eax
c001bafd:	6a 0b                	push   0xb
c001baff:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb06:	50                   	push   eax
c001bb07:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb0d:	e8 1c ef ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb12:	83 c4 20             	add    esp,0x20
c001bb15:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bb1a:	50                   	push   eax
c001bb1b:	6a 02                	push   0x2
c001bb1d:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb24:	50                   	push   eax
c001bb25:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb2b:	e8 fe ee ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb30:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bb35:	50                   	push   eax
c001bb36:	6a 03                	push   0x3
c001bb38:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb3f:	50                   	push   eax
c001bb40:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb46:	e8 e3 ee ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb4b:	83 c4 20             	add    esp,0x20
c001bb4e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bb53:	50                   	push   eax
c001bb54:	6a 04                	push   0x4
c001bb56:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb5d:	50                   	push   eax
c001bb5e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb64:	e8 c5 ee ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb6e:	50                   	push   eax
c001bb6f:	6a 05                	push   0x5
c001bb71:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb78:	50                   	push   eax
c001bb79:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb7f:	e8 aa ee ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb84:	83 c4 20             	add    esp,0x20
c001bb87:	80 fb 02             	cmp    bl,0x2
c001bb8a:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bb8f:	75 07                	jne    c001bb98 <ATA::access(unsigned long long, int, void*, bool)+0x262>
c001bb91:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bb96:	75 41                	jne    c001bbd9 <ATA::access(unsigned long long, int, void*, bool)+0x2a3>
c001bb98:	80 fb 02             	cmp    bl,0x2
c001bb9b:	0f 95 c1             	setne  cl
c001bb9e:	74 0c                	je     c001bbac <ATA::access(unsigned long long, int, void*, bool)+0x276>
c001bba0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bba5:	b8 30 00 00 00       	mov    eax,0x30
c001bbaa:	75 32                	jne    c001bbde <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bbac:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001bbb0:	80 f2 01             	xor    dl,0x1
c001bbb3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bbb8:	74 09                	je     c001bbc3 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001bbba:	84 d2                	test   dl,dl
c001bbbc:	b8 24 00 00 00       	mov    eax,0x24
c001bbc1:	75 1b                	jne    c001bbde <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bbc3:	84 c9                	test   cl,cl
c001bbc5:	0f 84 7f fe ff ff    	je     c001ba4a <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bbcb:	84 d2                	test   dl,dl
c001bbcd:	b8 20 00 00 00       	mov    eax,0x20
c001bbd2:	75 0a                	jne    c001bbde <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bbd4:	e9 71 fe ff ff       	jmp    c001ba4a <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bbd9:	b8 34 00 00 00       	mov    eax,0x34
c001bbde:	50                   	push   eax
c001bbdf:	6a 07                	push   0x7
c001bbe1:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbe8:	50                   	push   eax
c001bbe9:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbef:	e8 3a ee ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbf4:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	85 db                	test   ebx,ebx
c001bbfd:	0f 84 ae 00 00 00    	je     c001bcb1 <ATA::access(unsigned long long, int, void*, bool)+0x37b>
c001bc03:	50                   	push   eax
c001bc04:	6a 01                	push   0x1
c001bc06:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc0d:	50                   	push   eax
c001bc0e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc14:	e8 a1 f8 ff ff       	call   c001b4ba <IDE::polling(unsigned char, unsigned int)>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001bc22:	84 c0                	test   al,al
c001bc24:	74 20                	je     c001bc46 <ATA::access(unsigned long long, int, void*, bool)+0x310>
c001bc26:	0f b6 d8             	movzx  ebx,al
c001bc29:	53                   	push   ebx
c001bc2a:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001bc31:	50                   	push   eax
c001bc32:	0f b6 c2             	movzx  eax,dl
c001bc35:	50                   	push   eax
c001bc36:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc3c:	e8 a7 f7 ff ff       	call   c001b3e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bc41:	e9 82 00 00 00       	jmp    c001bcc8 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bc46:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bc4b:	74 33                	je     c001bc80 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001bc4d:	31 ed                	xor    ebp,ebp
c001bc4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bc53:	0f b7 3c 68          	movzx  edi,WORD PTR [eax+ebp*2]
c001bc57:	50                   	push   eax
c001bc58:	50                   	push   eax
c001bc59:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc60:	50                   	push   eax
c001bc61:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc67:	e8 b0 ed ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001bc6c:	89 c2                	mov    edx,eax
c001bc6e:	89 f8                	mov    eax,edi
c001bc70:	66 ef                	out    dx,ax
c001bc72:	45                   	inc    ebp
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001bc7c:	75 d1                	jne    c001bc4f <ATA::access(unsigned long long, int, void*, bool)+0x319>
c001bc7e:	eb 23                	jmp    c001bca3 <ATA::access(unsigned long long, int, void*, bool)+0x36d>
c001bc80:	51                   	push   ecx
c001bc81:	0f b6 c2             	movzx  eax,dl
c001bc84:	51                   	push   ecx
c001bc85:	50                   	push   eax
c001bc86:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc8c:	e8 8b ed ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001bc91:	b9 00 01 00 00       	mov    ecx,0x100
c001bc96:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bc9a:	89 c2                	mov    edx,eax
c001bc9c:	fc                   	cld    
c001bc9d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bcab:	4b                   	dec    ebx
c001bcac:	e9 4a ff ff ff       	jmp    c001bbfb <ATA::access(unsigned long long, int, void*, bool)+0x2c5>
c001bcb1:	31 db                	xor    ebx,ebx
c001bcb3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bcb8:	74 11                	je     c001bccb <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001bcba:	50                   	push   eax
c001bcbb:	50                   	push   eax
c001bcbc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bcc1:	50                   	push   eax
c001bcc2:	56                   	push   esi
c001bcc3:	e8 d8 fb ff ff       	call   c001b8a0 <ATA::flush(bool)>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	83 c4 2c             	add    esp,0x2c
c001bcce:	89 d8                	mov    eax,ebx
c001bcd0:	5b                   	pop    ebx
c001bcd1:	5e                   	pop    esi
c001bcd2:	5f                   	pop    edi
c001bcd3:	5d                   	pop    ebp
c001bcd4:	c3                   	ret    
c001bcd5:	90                   	nop

c001bcd6 <ATA::detectCHS()>:
c001bcd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bcda:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bce0:	c1 e0 06             	shl    eax,0x6
c001bce3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bce9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bcf3:	c7 44 24 04 2c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002182c
c001bcfb:	e9 c5 4a ff ff       	jmp    c00107c5 <KePanic(char const*)>

c001bd00 <ATA::open(int, int, void*)>:
c001bd00:	53                   	push   ebx
c001bd01:	83 ec 08             	sub    esp,0x8
c001bd04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd10:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bd16:	c1 e0 06             	shl    eax,0x6
c001bd19:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bd1f:	01 d0                	add    eax,edx
c001bd21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bd28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bd2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bd35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bd3f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bd46:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bd4c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bd53:	75 0c                	jne    c001bd61 <ATA::open(int, int, void*)+0x61>
c001bd55:	83 ec 0c             	sub    esp,0xc
c001bd58:	53                   	push   ebx
c001bd59:	e8 78 ff ff ff       	call   c001bcd6 <ATA::detectCHS()>
c001bd5e:	83 c4 10             	add    esp,0x10
c001bd61:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bd67:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bd6d:	c1 e0 06             	shl    eax,0x6
c001bd70:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bd77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bd81:	d1 e8                	shr    eax,1
c001bd83:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bd89:	6a 04                	push   0x4
c001bd8b:	6a 0c                	push   0xc
c001bd8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd94:	50                   	push   eax
c001bd95:	52                   	push   edx
c001bd96:	e8 93 ec ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd9b:	90                   	nop
c001bd9c:	90                   	nop
c001bd9d:	6a 00                	push   0x0
c001bd9f:	6a 0c                	push   0xc
c001bda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda8:	50                   	push   eax
c001bda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdaf:	e8 7a ec ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdb4:	83 c4 14             	add    esp,0x14
c001bdb7:	53                   	push   ebx
c001bdb8:	e8 13 05 ff ff       	call   c000c2d0 <PhysicalDisk::startCache()>
c001bdbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc0:	e8 6c 16 ff ff       	call   c000d431 <createPartitionsForDisk(PhysicalDisk*)>
c001bdc5:	83 c4 18             	add    esp,0x18
c001bdc8:	31 c0                	xor    eax,eax
c001bdca:	5b                   	pop    ebx
c001bdcb:	c3                   	ret    

c001bdcc <combineCharAndColour(char, unsigned char)>:
c001bdcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bdd1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bdd7:	c1 e0 08             	shl    eax,0x8
c001bdda:	09 d0                	or     eax,edx
c001bddc:	c3                   	ret    

c001bddd <combineColours(unsigned char, unsigned char)>:
c001bddd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bde2:	c1 e0 04             	shl    eax,0x4
c001bde5:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001bde9:	c3                   	ret    

c001bdea <ATA::read(unsigned long long, int, void*)>:
c001bdea:	55                   	push   ebp
c001bdeb:	57                   	push   edi
c001bdec:	56                   	push   esi
c001bded:	be 04 00 00 00       	mov    esi,0x4
c001bdf2:	53                   	push   ebx
c001bdf3:	83 ec 0c             	sub    esp,0xc
c001bdf6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bdfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be02:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be06:	8d 7b ff             	lea    edi,[ebx-0x1]
c001be09:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001be0f:	0f 87 a9 01 00 00    	ja     c001bfbe <ATA::read(unsigned long long, int, void*)+0x1d4>
c001be15:	85 c9                	test   ecx,ecx
c001be17:	be 06 00 00 00       	mov    esi,0x6
c001be1c:	0f 84 9c 01 00 00    	je     c001bfbe <ATA::read(unsigned long long, int, void*)+0x1d4>
c001be22:	55                   	push   ebp
c001be23:	55                   	push   ebp
c001be24:	6a 00                	push   0x0
c001be26:	51                   	push   ecx
c001be27:	53                   	push   ebx
c001be28:	52                   	push   edx
c001be29:	50                   	push   eax
c001be2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001be2e:	e8 03 fb ff ff       	call   c001b936 <ATA::access(unsigned long long, int, void*, bool)>
c001be33:	83 c4 20             	add    esp,0x20
c001be36:	85 c0                	test   eax,eax
c001be38:	89 c6                	mov    esi,eax
c001be3a:	0f 85 79 01 00 00    	jne    c001bfb9 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001be40:	50                   	push   eax
c001be41:	bd 10 27 00 00       	mov    ebp,0x2710
c001be46:	50                   	push   eax
c001be47:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001be4d:	6a 0f                	push   0xf
c001be4f:	6a 00                	push   0x0
c001be51:	89 da                	mov    edx,ebx
c001be53:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001be59:	e8 7f ff ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001be5e:	59                   	pop    ecx
c001be5f:	b9 0a 00 00 00       	mov    ecx,0xa
c001be64:	5b                   	pop    ebx
c001be65:	0f b6 d8             	movzx  ebx,al
c001be68:	89 d0                	mov    eax,edx
c001be6a:	53                   	push   ebx
c001be6b:	99                   	cdq    
c001be6c:	f7 fd                	idiv   ebp
c001be6e:	99                   	cdq    
c001be6f:	f7 f9                	idiv   ecx
c001be71:	80 c2 30             	add    dl,0x30
c001be74:	0f b6 d2             	movzx  edx,dl
c001be77:	52                   	push   edx
c001be78:	e8 4f ff ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001be7d:	5f                   	pop    edi
c001be7e:	bf e8 03 00 00       	mov    edi,0x3e8
c001be83:	5a                   	pop    edx
c001be84:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001be8a:	53                   	push   ebx
c001be8b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be90:	99                   	cdq    
c001be91:	f7 ff                	idiv   edi
c001be93:	99                   	cdq    
c001be94:	f7 f9                	idiv   ecx
c001be96:	88 d0                	mov    al,dl
c001be98:	04 30                	add    al,0x30
c001be9a:	0f b6 c0             	movzx  eax,al
c001be9d:	50                   	push   eax
c001be9e:	e8 29 ff ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bea3:	5f                   	pop    edi
c001bea4:	bf 64 00 00 00       	mov    edi,0x64
c001bea9:	5a                   	pop    edx
c001beaa:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001beb0:	53                   	push   ebx
c001beb1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001beb6:	99                   	cdq    
c001beb7:	f7 ff                	idiv   edi
c001beb9:	99                   	cdq    
c001beba:	f7 f9                	idiv   ecx
c001bebc:	88 d0                	mov    al,dl
c001bebe:	04 30                	add    al,0x30
c001bec0:	0f b6 c0             	movzx  eax,al
c001bec3:	50                   	push   eax
c001bec4:	e8 03 ff ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bec9:	5a                   	pop    edx
c001beca:	5a                   	pop    edx
c001becb:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bed1:	53                   	push   ebx
c001bed2:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bed7:	99                   	cdq    
c001bed8:	f7 f9                	idiv   ecx
c001beda:	99                   	cdq    
c001bedb:	f7 f9                	idiv   ecx
c001bedd:	88 d0                	mov    al,dl
c001bedf:	04 30                	add    al,0x30
c001bee1:	0f b6 c0             	movzx  eax,al
c001bee4:	50                   	push   eax
c001bee5:	e8 e2 fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001beea:	5a                   	pop    edx
c001beeb:	5a                   	pop    edx
c001beec:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bef2:	53                   	push   ebx
c001bef3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bef8:	99                   	cdq    
c001bef9:	f7 f9                	idiv   ecx
c001befb:	88 d0                	mov    al,dl
c001befd:	04 30                	add    al,0x30
c001beff:	0f b6 c0             	movzx  eax,al
c001bf02:	50                   	push   eax
c001bf03:	e8 c4 fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bf08:	5a                   	pop    edx
c001bf09:	5a                   	pop    edx
c001bf0a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bf10:	53                   	push   ebx
c001bf11:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf16:	99                   	cdq    
c001bf17:	f7 fd                	idiv   ebp
c001bf19:	99                   	cdq    
c001bf1a:	f7 f9                	idiv   ecx
c001bf1c:	88 d0                	mov    al,dl
c001bf1e:	04 30                	add    al,0x30
c001bf20:	0f b6 c0             	movzx  eax,al
c001bf23:	50                   	push   eax
c001bf24:	e8 a3 fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bf29:	5d                   	pop    ebp
c001bf2a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bf2f:	5a                   	pop    edx
c001bf30:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bf36:	53                   	push   ebx
c001bf37:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf3c:	99                   	cdq    
c001bf3d:	f7 fd                	idiv   ebp
c001bf3f:	99                   	cdq    
c001bf40:	f7 f9                	idiv   ecx
c001bf42:	88 d0                	mov    al,dl
c001bf44:	04 30                	add    al,0x30
c001bf46:	0f b6 c0             	movzx  eax,al
c001bf49:	50                   	push   eax
c001bf4a:	e8 7d fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bf4f:	5d                   	pop    ebp
c001bf50:	5a                   	pop    edx
c001bf51:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bf57:	53                   	push   ebx
c001bf58:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf5d:	99                   	cdq    
c001bf5e:	f7 ff                	idiv   edi
c001bf60:	99                   	cdq    
c001bf61:	f7 f9                	idiv   ecx
c001bf63:	88 d0                	mov    al,dl
c001bf65:	04 30                	add    al,0x30
c001bf67:	0f b6 c0             	movzx  eax,al
c001bf6a:	50                   	push   eax
c001bf6b:	e8 5c fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bf70:	5f                   	pop    edi
c001bf71:	5d                   	pop    ebp
c001bf72:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bf78:	53                   	push   ebx
c001bf79:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf7e:	99                   	cdq    
c001bf7f:	f7 f9                	idiv   ecx
c001bf81:	99                   	cdq    
c001bf82:	f7 f9                	idiv   ecx
c001bf84:	88 d0                	mov    al,dl
c001bf86:	04 30                	add    al,0x30
c001bf88:	0f b6 c0             	movzx  eax,al
c001bf8b:	50                   	push   eax
c001bf8c:	e8 3b fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bf91:	5a                   	pop    edx
c001bf92:	5f                   	pop    edi
c001bf93:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bf99:	53                   	push   ebx
c001bf9a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bf9f:	99                   	cdq    
c001bfa0:	f7 f9                	idiv   ecx
c001bfa2:	80 c2 30             	add    dl,0x30
c001bfa5:	0f b6 d2             	movzx  edx,dl
c001bfa8:	52                   	push   edx
c001bfa9:	e8 1e fe ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001bfae:	83 c4 10             	add    esp,0x10
c001bfb1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bfb7:	eb 05                	jmp    c001bfbe <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bfb9:	be 01 00 00 00       	mov    esi,0x1
c001bfbe:	83 c4 0c             	add    esp,0xc
c001bfc1:	89 f0                	mov    eax,esi
c001bfc3:	5b                   	pop    ebx
c001bfc4:	5e                   	pop    esi
c001bfc5:	5f                   	pop    edi
c001bfc6:	5d                   	pop    ebp
c001bfc7:	c3                   	ret    

c001bfc8 <ATA::write(unsigned long long, int, void*)>:
c001bfc8:	55                   	push   ebp
c001bfc9:	57                   	push   edi
c001bfca:	56                   	push   esi
c001bfcb:	be 04 00 00 00       	mov    esi,0x4
c001bfd0:	53                   	push   ebx
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bfd8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bfdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfe0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bfe4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bfe7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bfed:	0f 87 a5 01 00 00    	ja     c001c198 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001bff3:	85 c9                	test   ecx,ecx
c001bff5:	be 06 00 00 00       	mov    esi,0x6
c001bffa:	0f 84 98 01 00 00    	je     c001c198 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c000:	55                   	push   ebp
c001c001:	55                   	push   ebp
c001c002:	6a 01                	push   0x1
c001c004:	51                   	push   ecx
c001c005:	53                   	push   ebx
c001c006:	52                   	push   edx
c001c007:	50                   	push   eax
c001c008:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c00c:	e8 25 f9 ff ff       	call   c001b936 <ATA::access(unsigned long long, int, void*, bool)>
c001c011:	83 c4 20             	add    esp,0x20
c001c014:	85 c0                	test   eax,eax
c001c016:	89 c6                	mov    esi,eax
c001c018:	0f 85 75 01 00 00    	jne    c001c193 <ATA::write(unsigned long long, int, void*)+0x1cb>
c001c01e:	50                   	push   eax
c001c01f:	bd 10 27 00 00       	mov    ebp,0x2710
c001c024:	50                   	push   eax
c001c025:	6a 0f                	push   0xf
c001c027:	6a 00                	push   0x0
c001c029:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c02f:	e8 a9 fd ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001c034:	5a                   	pop    edx
c001c035:	59                   	pop    ecx
c001c036:	b9 0a 00 00 00       	mov    ecx,0xa
c001c03b:	0f b6 d8             	movzx  ebx,al
c001c03e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c043:	53                   	push   ebx
c001c044:	99                   	cdq    
c001c045:	f7 fd                	idiv   ebp
c001c047:	99                   	cdq    
c001c048:	f7 f9                	idiv   ecx
c001c04a:	88 d0                	mov    al,dl
c001c04c:	04 30                	add    al,0x30
c001c04e:	0f b6 c0             	movzx  eax,al
c001c051:	50                   	push   eax
c001c052:	e8 75 fd ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c057:	5f                   	pop    edi
c001c058:	bf e8 03 00 00       	mov    edi,0x3e8
c001c05d:	5a                   	pop    edx
c001c05e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c064:	53                   	push   ebx
c001c065:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c06a:	99                   	cdq    
c001c06b:	f7 ff                	idiv   edi
c001c06d:	99                   	cdq    
c001c06e:	f7 f9                	idiv   ecx
c001c070:	88 d0                	mov    al,dl
c001c072:	04 30                	add    al,0x30
c001c074:	0f b6 c0             	movzx  eax,al
c001c077:	50                   	push   eax
c001c078:	e8 4f fd ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c07d:	5f                   	pop    edi
c001c07e:	bf 64 00 00 00       	mov    edi,0x64
c001c083:	5a                   	pop    edx
c001c084:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c08a:	53                   	push   ebx
c001c08b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c090:	99                   	cdq    
c001c091:	f7 ff                	idiv   edi
c001c093:	99                   	cdq    
c001c094:	f7 f9                	idiv   ecx
c001c096:	88 d0                	mov    al,dl
c001c098:	04 30                	add    al,0x30
c001c09a:	0f b6 c0             	movzx  eax,al
c001c09d:	50                   	push   eax
c001c09e:	e8 29 fd ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c0a3:	5a                   	pop    edx
c001c0a4:	5a                   	pop    edx
c001c0a5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0ab:	53                   	push   ebx
c001c0ac:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0b1:	99                   	cdq    
c001c0b2:	f7 f9                	idiv   ecx
c001c0b4:	99                   	cdq    
c001c0b5:	f7 f9                	idiv   ecx
c001c0b7:	88 d0                	mov    al,dl
c001c0b9:	04 30                	add    al,0x30
c001c0bb:	0f b6 c0             	movzx  eax,al
c001c0be:	50                   	push   eax
c001c0bf:	e8 08 fd ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c0c4:	5a                   	pop    edx
c001c0c5:	5a                   	pop    edx
c001c0c6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c0cc:	53                   	push   ebx
c001c0cd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0d2:	99                   	cdq    
c001c0d3:	f7 f9                	idiv   ecx
c001c0d5:	88 d0                	mov    al,dl
c001c0d7:	04 30                	add    al,0x30
c001c0d9:	0f b6 c0             	movzx  eax,al
c001c0dc:	50                   	push   eax
c001c0dd:	e8 ea fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c0e2:	5a                   	pop    edx
c001c0e3:	5a                   	pop    edx
c001c0e4:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c0ea:	53                   	push   ebx
c001c0eb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0f0:	99                   	cdq    
c001c0f1:	f7 fd                	idiv   ebp
c001c0f3:	99                   	cdq    
c001c0f4:	f7 f9                	idiv   ecx
c001c0f6:	88 d0                	mov    al,dl
c001c0f8:	04 30                	add    al,0x30
c001c0fa:	0f b6 c0             	movzx  eax,al
c001c0fd:	50                   	push   eax
c001c0fe:	e8 c9 fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c103:	5d                   	pop    ebp
c001c104:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c109:	5a                   	pop    edx
c001c10a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c110:	53                   	push   ebx
c001c111:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c116:	99                   	cdq    
c001c117:	f7 fd                	idiv   ebp
c001c119:	99                   	cdq    
c001c11a:	f7 f9                	idiv   ecx
c001c11c:	88 d0                	mov    al,dl
c001c11e:	04 30                	add    al,0x30
c001c120:	0f b6 c0             	movzx  eax,al
c001c123:	50                   	push   eax
c001c124:	e8 a3 fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c129:	5d                   	pop    ebp
c001c12a:	5a                   	pop    edx
c001c12b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c131:	53                   	push   ebx
c001c132:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c137:	99                   	cdq    
c001c138:	f7 ff                	idiv   edi
c001c13a:	99                   	cdq    
c001c13b:	f7 f9                	idiv   ecx
c001c13d:	88 d0                	mov    al,dl
c001c13f:	04 30                	add    al,0x30
c001c141:	0f b6 c0             	movzx  eax,al
c001c144:	50                   	push   eax
c001c145:	e8 82 fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c14a:	5f                   	pop    edi
c001c14b:	5d                   	pop    ebp
c001c14c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c152:	53                   	push   ebx
c001c153:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c158:	99                   	cdq    
c001c159:	f7 f9                	idiv   ecx
c001c15b:	99                   	cdq    
c001c15c:	f7 f9                	idiv   ecx
c001c15e:	88 d0                	mov    al,dl
c001c160:	04 30                	add    al,0x30
c001c162:	0f b6 c0             	movzx  eax,al
c001c165:	50                   	push   eax
c001c166:	e8 61 fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c16b:	5a                   	pop    edx
c001c16c:	5f                   	pop    edi
c001c16d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c173:	53                   	push   ebx
c001c174:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c179:	99                   	cdq    
c001c17a:	f7 f9                	idiv   ecx
c001c17c:	80 c2 30             	add    dl,0x30
c001c17f:	0f b6 d2             	movzx  edx,dl
c001c182:	52                   	push   edx
c001c183:	e8 44 fc ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001c188:	83 c4 10             	add    esp,0x10
c001c18b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c191:	eb 05                	jmp    c001c198 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c193:	be 01 00 00 00       	mov    esi,0x1
c001c198:	83 c4 0c             	add    esp,0xc
c001c19b:	89 f0                	mov    eax,esi
c001c19d:	5b                   	pop    ebx
c001c19e:	5e                   	pop    esi
c001c19f:	5f                   	pop    edi
c001c1a0:	5d                   	pop    ebp
c001c1a1:	c3                   	ret    

c001c1a2 <ATAPI::write(unsigned long long, int, void*)>:
c001c1a2:	b8 03 00 00 00       	mov    eax,0x3
c001c1a7:	c3                   	ret    

c001c1a8 <ATAPI::close(int, int, void*)>:
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c1b5:	85 c0                	test   eax,eax
c001c1b7:	74 0c                	je     c001c1c5 <ATAPI::close(int, int, void*)+0x1d>
c001c1b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001c1bb:	83 ec 0c             	sub    esp,0xc
c001c1be:	50                   	push   eax
c001c1bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c1c2:	83 c4 10             	add    esp,0x10
c001c1c5:	31 c0                	xor    eax,eax
c001c1c7:	83 c4 0c             	add    esp,0xc
c001c1ca:	c3                   	ret    
c001c1cb:	90                   	nop

c001c1cc <ATAPI::ATAPI()>:
c001c1cc:	83 ec 1c             	sub    esp,0x1c
c001c1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1d3:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c1db:	c7 44 24 04 75 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021975
c001c1e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1e6:	e8 7d 00 ff ff       	call   c000c268 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c1eb:	ba 90 18 02 c0       	mov    edx,0xc0021890
c001c1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1f4:	89 10                	mov    DWORD PTR [eax],edx
c001c1f6:	90                   	nop
c001c1f7:	83 c4 1c             	add    esp,0x1c
c001c1fa:	c3                   	ret    
c001c1fb:	90                   	nop

c001c1fc <ATAPI::readyForCommand()>:
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	53                   	push   ebx
c001c1ff:	31 db                	xor    ebx,ebx
c001c201:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c205:	51                   	push   ecx
c001c206:	6a 0c                	push   0xc
c001c208:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c20f:	50                   	push   eax
c001c210:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c216:	e8 c1 e8 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001c21b:	83 c4 10             	add    esp,0x10
c001c21e:	a8 88                	test   al,0x88
c001c220:	74 25                	je     c001c247 <ATAPI::readyForCommand()+0x4b>
c001c222:	43                   	inc    ebx
c001c223:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c229:	7e da                	jle    c001c205 <ATAPI::readyForCommand()+0x9>
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	68 5e 01 00 00       	push   0x15e
c001c233:	e8 84 91 ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c241:	75 c2                	jne    c001c205 <ATAPI::readyForCommand()+0x9>
c001c243:	31 c0                	xor    eax,eax
c001c245:	eb 02                	jmp    c001c249 <ATAPI::readyForCommand()+0x4d>
c001c247:	b0 01                	mov    al,0x1
c001c249:	5a                   	pop    edx
c001c24a:	5b                   	pop    ebx
c001c24b:	5e                   	pop    esi
c001c24c:	c3                   	ret    
c001c24d:	90                   	nop

c001c24e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c24e:	55                   	push   ebp
c001c24f:	57                   	push   edi
c001c250:	56                   	push   esi
c001c251:	53                   	push   ebx
c001c252:	83 ec 20             	sub    esp,0x20
c001c255:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c259:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c25d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c261:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c265:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c269:	6a 01                	push   0x1
c001c26b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c272:	50                   	push   eax
c001c273:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c279:	e8 98 e9 ff ff       	call   c001ac16 <IDE::enableIRQs(unsigned char, bool)>
c001c27e:	5e                   	pop    esi
c001c27f:	58                   	pop    eax
c001c280:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c287:	50                   	push   eax
c001c288:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c28e:	e8 75 e7 ff ff       	call   c001aa08 <IDE::prepareInterrupt(unsigned char)>
c001c293:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c296:	e8 61 ff ff ff       	call   c001c1fc <ATAPI::readyForCommand()>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	84 c0                	test   al,al
c001c2a0:	75 0a                	jne    c001c2ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c2a2:	bb 01 00 00 00       	mov    ebx,0x1
c001c2a7:	e9 57 02 00 00       	jmp    c001c503 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c2ac:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c2b2:	c0 e0 04             	shl    al,0x4
c001c2b5:	0f b6 c0             	movzx  eax,al
c001c2b8:	50                   	push   eax
c001c2b9:	6a 06                	push   0x6
c001c2bb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c2c2:	50                   	push   eax
c001c2c3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2c9:	e8 60 e7 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2ce:	6a 00                	push   0x0
c001c2d0:	6a 01                	push   0x1
c001c2d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c2d9:	50                   	push   eax
c001c2da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2e0:	e8 49 e7 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2e5:	83 c4 20             	add    esp,0x20
c001c2e8:	0f b6 c3             	movzx  eax,bl
c001c2eb:	50                   	push   eax
c001c2ec:	0f b6 df             	movzx  ebx,bh
c001c2ef:	6a 04                	push   0x4
c001c2f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c2f8:	50                   	push   eax
c001c2f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2ff:	e8 2a e7 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c304:	53                   	push   ebx
c001c305:	6a 05                	push   0x5
c001c307:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c30e:	50                   	push   eax
c001c30f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c315:	e8 14 e7 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c31a:	83 c4 20             	add    esp,0x20
c001c31d:	68 a0 00 00 00       	push   0xa0
c001c322:	6a 07                	push   0x7
c001c324:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c32b:	50                   	push   eax
c001c32c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c332:	e8 f7 e6 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c337:	83 c4 0c             	add    esp,0xc
c001c33a:	6a 01                	push   0x1
c001c33c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c343:	50                   	push   eax
c001c344:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c34a:	e8 6b f1 ff ff       	call   c001b4ba <IDE::polling(unsigned char, unsigned int)>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c358:	84 c0                	test   al,al
c001c35a:	74 23                	je     c001c37f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c35c:	0f b6 d8             	movzx  ebx,al
c001c35f:	0f b6 d2             	movzx  edx,dl
c001c362:	53                   	push   ebx
c001c363:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c36a:	50                   	push   eax
c001c36b:	52                   	push   edx
c001c36c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c372:	e8 71 f0 ff ff       	call   c001b3e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	e9 84 01 00 00       	jmp    c001c503 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c37f:	53                   	push   ebx
c001c380:	0f b6 d2             	movzx  edx,dl
c001c383:	53                   	push   ebx
c001c384:	52                   	push   edx
c001c385:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c38b:	e8 8c e6 ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001c390:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c394:	b9 06 00 00 00       	mov    ecx,0x6
c001c399:	89 c2                	mov    edx,eax
c001c39b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c39e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	85 db                	test   ebx,ebx
c001c3a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c3ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c3b4:	0f 84 e9 00 00 00    	je     c001c4a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001c3ba:	51                   	push   ecx
c001c3bb:	51                   	push   ecx
c001c3bc:	52                   	push   edx
c001c3bd:	50                   	push   eax
c001c3be:	e8 b5 e7 ff ff       	call   c001ab78 <IDE::waitInterrupt(unsigned char)>
c001c3c3:	83 c4 10             	add    esp,0x10
c001c3c6:	84 c0                	test   al,al
c001c3c8:	0f 84 d4 fe ff ff    	je     c001c2a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c3ce:	56                   	push   esi
c001c3cf:	56                   	push   esi
c001c3d0:	31 f6                	xor    esi,esi
c001c3d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3d9:	50                   	push   eax
c001c3da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3e0:	e8 23 e6 ff ff       	call   c001aa08 <IDE::prepareInterrupt(unsigned char)>
c001c3e5:	83 c4 0c             	add    esp,0xc
c001c3e8:	6a 04                	push   0x4
c001c3ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3f1:	50                   	push   eax
c001c3f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3f8:	e8 df e6 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001c3fd:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001c401:	83 c4 0c             	add    esp,0xc
c001c404:	6a 05                	push   0x5
c001c406:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c40d:	50                   	push   eax
c001c40e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c414:	e8 c3 e6 ff ff       	call   c001aadc <IDE::read(unsigned char, unsigned char)>
c001c419:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c41e:	0f b6 c0             	movzx  eax,al
c001c421:	c1 e0 08             	shl    eax,0x8
c001c424:	09 d0                	or     eax,edx
c001c426:	d1 f8                	sar    eax,1
c001c428:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c434:	74 54                	je     c001c48a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001c436:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c43a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c440:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c447:	75 0b                	jne    c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c449:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c44c:	01 cd                	add    ebp,ecx
c001c44e:	4b                   	dec    ebx
c001c44f:	e9 51 ff ff ff       	jmp    c001c3a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c454:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001c459:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c45d:	51                   	push   ecx
c001c45e:	51                   	push   ecx
c001c45f:	52                   	push   edx
c001c460:	50                   	push   eax
c001c461:	e8 b6 e5 ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001c466:	89 c2                	mov    edx,eax
c001c468:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c46c:	66 ef                	out    dx,ax
c001c46e:	46                   	inc    esi
c001c46f:	83 c4 10             	add    esp,0x10
c001c472:	eb c2                	jmp    c001c436 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001c474:	51                   	push   ecx
c001c475:	51                   	push   ecx
c001c476:	52                   	push   edx
c001c477:	50                   	push   eax
c001c478:	e8 9f e5 ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001c47d:	89 c2                	mov    edx,eax
c001c47f:	66 ed                	in     ax,dx
c001c481:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c486:	83 c4 10             	add    esp,0x10
c001c489:	46                   	inc    esi
c001c48a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c48e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c494:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c49b:	75 d7                	jne    c001c474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c49d:	01 f6                	add    esi,esi
c001c49f:	01 f5                	add    ebp,esi
c001c4a1:	eb ab                	jmp    c001c44e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001c4a3:	51                   	push   ecx
c001c4a4:	51                   	push   ecx
c001c4a5:	52                   	push   edx
c001c4a6:	50                   	push   eax
c001c4a7:	e8 cc e6 ff ff       	call   c001ab78 <IDE::waitInterrupt(unsigned char)>
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	84 c0                	test   al,al
c001c4b1:	0f 84 eb fd ff ff    	je     c001c2a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c4b7:	52                   	push   edx
c001c4b8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c4bd:	52                   	push   edx
c001c4be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4c5:	50                   	push   eax
c001c4c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4cc:	e8 37 e5 ff ff       	call   c001aa08 <IDE::prepareInterrupt(unsigned char)>
c001c4d1:	83 c4 10             	add    esp,0x10
c001c4d4:	50                   	push   eax
c001c4d5:	50                   	push   eax
c001c4d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4dd:	50                   	push   eax
c001c4de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4e4:	e8 33 e5 ff ff       	call   c001aa1c <IDE::getBase(unsigned char)>
c001c4e9:	0f b7 c0             	movzx  eax,ax
c001c4ec:	8d 50 07             	lea    edx,[eax+0x7]
c001c4ef:	ec                   	in     al,dx
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	a8 88                	test   al,0x88
c001c4f5:	74 0a                	je     c001c501 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c4f7:	4b                   	dec    ebx
c001c4f8:	75 da                	jne    c001c4d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001c4fa:	bb 02 00 00 00       	mov    ebx,0x2
c001c4ff:	eb 02                	jmp    c001c503 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c501:	31 db                	xor    ebx,ebx
c001c503:	83 c4 1c             	add    esp,0x1c
c001c506:	89 d8                	mov    eax,ebx
c001c508:	5b                   	pop    ebx
c001c509:	5e                   	pop    esi
c001c50a:	5f                   	pop    edi
c001c50b:	5d                   	pop    ebp
c001c50c:	c3                   	ret    
c001c50d:	90                   	nop

c001c50e <ATAPI::diskRemoved()>:
c001c50e:	53                   	push   ebx
c001c50f:	83 ec 14             	sub    esp,0x14
c001c512:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c516:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c51d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c523:	e8 06 0c ff ff       	call   c000d12e <LogicalDisk::unmount()>
c001c528:	58                   	pop    eax
c001c529:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c52f:	e8 a8 15 ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c001c534:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c53a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c53e:	83 c4 18             	add    esp,0x18
c001c541:	5b                   	pop    ebx
c001c542:	e9 85 15 ff ff       	jmp    c000dacc <VCache::invalidateReadBuffer()>
c001c547:	90                   	nop

c001c548 <ATAPI::eject()>:
c001c548:	57                   	push   edi
c001c549:	b9 03 00 00 00       	mov    ecx,0x3
c001c54e:	53                   	push   ebx
c001c54f:	83 ec 14             	sub    esp,0x14
c001c552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c556:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c55a:	fc                   	cld    
c001c55b:	31 c0                	xor    eax,eax
c001c55d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c55f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c564:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c569:	50                   	push   eax
c001c56a:	50                   	push   eax
c001c56b:	6a 00                	push   0x0
c001c56d:	6a 00                	push   0x0
c001c56f:	6a 00                	push   0x0
c001c571:	6a 02                	push   0x2
c001c573:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c577:	50                   	push   eax
c001c578:	53                   	push   ebx
c001c579:	e8 d0 fc ff ff       	call   c001c24e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c57e:	83 c4 14             	add    esp,0x14
c001c581:	53                   	push   ebx
c001c582:	e8 87 ff ff ff       	call   c001c50e <ATAPI::diskRemoved()>
c001c587:	83 c4 24             	add    esp,0x24
c001c58a:	31 c0                	xor    eax,eax
c001c58c:	5b                   	pop    ebx
c001c58d:	5f                   	pop    edi
c001c58e:	c3                   	ret    
c001c58f:	90                   	nop

c001c590 <ATAPI::diskInserted()>:
c001c590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c594:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c59b:	c3                   	ret    

c001c59c <ATAPI::detectMedia()>:
c001c59c:	56                   	push   esi
c001c59d:	53                   	push   ebx
c001c59e:	83 ec 28             	sub    esp,0x28
c001c5a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c5a5:	6a 0c                	push   0xc
c001c5a7:	6a 00                	push   0x0
c001c5a9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c5ad:	56                   	push   esi
c001c5ae:	e8 cd 3f fe ff       	call   c0000580 <memset>
c001c5b3:	58                   	pop    eax
c001c5b4:	5a                   	pop    edx
c001c5b5:	6a 00                	push   0x0
c001c5b7:	6a 00                	push   0x0
c001c5b9:	6a 00                	push   0x0
c001c5bb:	6a 00                	push   0x0
c001c5bd:	56                   	push   esi
c001c5be:	53                   	push   ebx
c001c5bf:	e8 8a fc ff ff       	call   c001c24e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c5c4:	83 c4 1c             	add    esp,0x1c
c001c5c7:	6a 0c                	push   0xc
c001c5c9:	6a 00                	push   0x0
c001c5cb:	56                   	push   esi
c001c5cc:	e8 af 3f fe ff       	call   c0000580 <memset>
c001c5d1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c5d6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c5db:	59                   	pop    ecx
c001c5dc:	58                   	pop    eax
c001c5dd:	6a 01                	push   0x1
c001c5df:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c5e3:	50                   	push   eax
c001c5e4:	6a 00                	push   0x0
c001c5e6:	6a 12                	push   0x12
c001c5e8:	56                   	push   esi
c001c5e9:	53                   	push   ebx
c001c5ea:	e8 5f fc ff ff       	call   c001c24e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c5ef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c5f3:	83 c4 20             	add    esp,0x20
c001c5f6:	24 7f                	and    al,0x7f
c001c5f8:	3c 70                	cmp    al,0x70
c001c5fa:	74 15                	je     c001c611 <ATAPI::detectMedia()+0x75>
c001c5fc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c603:	75 0c                	jne    c001c611 <ATAPI::detectMedia()+0x75>
c001c605:	83 ec 0c             	sub    esp,0xc
c001c608:	53                   	push   ebx
c001c609:	e8 82 ff ff ff       	call   c001c590 <ATAPI::diskInserted()>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c615:	24 0f                	and    al,0xf
c001c617:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c61c:	75 18                	jne    c001c636 <ATAPI::detectMedia()+0x9a>
c001c61e:	3c 02                	cmp    al,0x2
c001c620:	75 14                	jne    c001c636 <ATAPI::detectMedia()+0x9a>
c001c622:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c629:	74 24                	je     c001c64f <ATAPI::detectMedia()+0xb3>
c001c62b:	83 ec 0c             	sub    esp,0xc
c001c62e:	53                   	push   ebx
c001c62f:	e8 da fe ff ff       	call   c001c50e <ATAPI::diskRemoved()>
c001c634:	eb 16                	jmp    c001c64c <ATAPI::detectMedia()+0xb0>
c001c636:	84 c0                	test   al,al
c001c638:	75 15                	jne    c001c64f <ATAPI::detectMedia()+0xb3>
c001c63a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c641:	75 0c                	jne    c001c64f <ATAPI::detectMedia()+0xb3>
c001c643:	83 ec 0c             	sub    esp,0xc
c001c646:	53                   	push   ebx
c001c647:	e8 44 ff ff ff       	call   c001c590 <ATAPI::diskInserted()>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	83 c4 24             	add    esp,0x24
c001c652:	5b                   	pop    ebx
c001c653:	5e                   	pop    esi
c001c654:	c3                   	ret    
c001c655:	90                   	nop

c001c656 <ATAPI::open(int, int, void*)>:
c001c656:	56                   	push   esi
c001c657:	53                   	push   ebx
c001c658:	50                   	push   eax
c001c659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c65d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c665:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c66b:	c1 e0 06             	shl    eax,0x6
c001c66e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c674:	01 d0                	add    eax,edx
c001c676:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c67d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c683:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c68a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c694:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c69b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c6a1:	6a 04                	push   0x4
c001c6a3:	6a 0c                	push   0xc
c001c6a5:	51                   	push   ecx
c001c6a6:	52                   	push   edx
c001c6a7:	e8 82 e3 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ac:	90                   	nop
c001c6ad:	90                   	nop
c001c6ae:	6a 00                	push   0x0
c001c6b0:	6a 0c                	push   0xc
c001c6b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6b9:	50                   	push   eax
c001c6ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6c0:	e8 69 e3 ff ff       	call   c001aa2e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c5:	83 c4 14             	add    esp,0x14
c001c6c8:	68 78 01 00 00       	push   0x178
c001c6cd:	e8 34 b4 fe ff       	call   c0007b06 <malloc>
c001c6d2:	83 c4 0c             	add    esp,0xc
c001c6d5:	6a 00                	push   0x0
c001c6d7:	68 ff ff ff 7f       	push   0x7fffffff
c001c6dc:	6a 00                	push   0x0
c001c6de:	6a 00                	push   0x0
c001c6e0:	53                   	push   ebx
c001c6e1:	68 27 1a 02 c0       	push   0xc0021a27
c001c6e6:	89 c6                	mov    esi,eax
c001c6e8:	50                   	push   eax
c001c6e9:	e8 80 08 ff ff       	call   c000cf6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c6ee:	83 c4 14             	add    esp,0x14
c001c6f1:	56                   	push   esi
c001c6f2:	e8 39 09 ff ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c001c6f7:	5a                   	pop    edx
c001c6f8:	59                   	pop    ecx
c001c6f9:	0f be c0             	movsx  eax,al
c001c6fc:	50                   	push   eax
c001c6fd:	68 78 18 02 c0       	push   0xc0021878
c001c702:	e8 6f e3 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001c707:	58                   	pop    eax
c001c708:	5a                   	pop    edx
c001c709:	56                   	push   esi
c001c70a:	53                   	push   ebx
c001c70b:	e8 92 f7 fe ff       	call   c000bea2 <Device::addChild(Device*)>
c001c710:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c719:	e8 b2 fb fe ff       	call   c000c2d0 <PhysicalDisk::startCache()>
c001c71e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c728:	e8 6f fe ff ff       	call   c001c59c <ATAPI::detectMedia()>
c001c72d:	83 c4 14             	add    esp,0x14
c001c730:	31 c0                	xor    eax,eax
c001c732:	5b                   	pop    ebx
c001c733:	5e                   	pop    esi
c001c734:	c3                   	ret    
c001c735:	90                   	nop

c001c736 <ATAPI::read(unsigned long long, int, void*)>:
c001c736:	55                   	push   ebp
c001c737:	57                   	push   edi
c001c738:	56                   	push   esi
c001c739:	53                   	push   ebx
c001c73a:	83 ec 1c             	sub    esp,0x1c
c001c73d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c741:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c745:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c749:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c750:	74 3a                	je     c001c78c <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c752:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c756:	b9 03 00 00 00       	mov    ecx,0x3
c001c75b:	fc                   	cld    
c001c75c:	31 c0                	xor    eax,eax
c001c75e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c760:	0f ce                	bswap  esi
c001c762:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c766:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c76b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c76f:	50                   	push   eax
c001c770:	50                   	push   eax
c001c771:	53                   	push   ebx
c001c772:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c776:	c1 e3 0b             	shl    ebx,0xb
c001c779:	6a 00                	push   0x0
c001c77b:	53                   	push   ebx
c001c77c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c780:	50                   	push   eax
c001c781:	55                   	push   ebp
c001c782:	e8 c7 fa ff ff       	call   c001c24e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c787:	83 c4 20             	add    esp,0x20
c001c78a:	eb 1a                	jmp    c001c7a6 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	55                   	push   ebp
c001c790:	e8 07 fe ff ff       	call   c001c59c <ATAPI::detectMedia()>
c001c795:	83 c4 10             	add    esp,0x10
c001c798:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c79f:	75 b1                	jne    c001c752 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c7a1:	b8 02 00 00 00       	mov    eax,0x2
c001c7a6:	83 c4 1c             	add    esp,0x1c
c001c7a9:	5b                   	pop    ebx
c001c7aa:	5e                   	pop    esi
c001c7ab:	5f                   	pop    edi
c001c7ac:	5d                   	pop    ebp
c001c7ad:	c3                   	ret    

c001c7ae <SATA::close(int, int, void*)>:
c001c7ae:	83 ec 0c             	sub    esp,0xc
c001c7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7bb:	85 c0                	test   eax,eax
c001c7bd:	74 0c                	je     c001c7cb <SATA::close(int, int, void*)+0x1d>
c001c7bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7c1:	83 ec 0c             	sub    esp,0xc
c001c7c4:	50                   	push   eax
c001c7c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	31 c0                	xor    eax,eax
c001c7cd:	83 c4 0c             	add    esp,0xc
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop

c001c7d2 <SATA::powerSaving(PowerSavingLevel)>:
c001c7d2:	c3                   	ret    
c001c7d3:	90                   	nop

c001c7d4 <SATA::open(int, int, void*)>:
c001c7d4:	56                   	push   esi
c001c7d5:	53                   	push   ebx
c001c7d6:	50                   	push   eax
c001c7d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c7e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c7ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7f3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c7fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c807:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c80e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c814:	e8 f3 b5 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001c819:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c81f:	89 c6                	mov    esi,eax
c001c821:	e8 e6 b5 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001c826:	81 c6 00 10 00 00    	add    esi,0x1000
c001c82c:	39 c6                	cmp    esi,eax
c001c82e:	74 10                	je     c001c840 <SATA::open(int, int, void*)+0x6c>
c001c830:	83 ec 0c             	sub    esp,0xc
c001c833:	68 c0 18 02 c0       	push   0xc00218c0
c001c838:	e8 88 3f ff ff       	call   c00107c5 <KePanic(char const*)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	6a 02                	push   0x2
c001c845:	e8 d6 cd fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001c84a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c850:	6a 03                	push   0x3
c001c852:	50                   	push   eax
c001c853:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c859:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001c85f:	e8 de d4 fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c864:	83 c4 14             	add    esp,0x14
c001c867:	53                   	push   ebx
c001c868:	e8 63 fa fe ff       	call   c000c2d0 <PhysicalDisk::startCache()>
c001c86d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c870:	e8 bc 0b ff ff       	call   c000d431 <createPartitionsForDisk(PhysicalDisk*)>
c001c875:	83 c4 14             	add    esp,0x14
c001c878:	31 c0                	xor    eax,eax
c001c87a:	5b                   	pop    ebx
c001c87b:	5e                   	pop    esi
c001c87c:	c3                   	ret    
c001c87d:	90                   	nop

c001c87e <SATA::SATA()>:
c001c87e:	83 ec 1c             	sub    esp,0x1c
c001c881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c885:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001c88d:	c7 44 24 04 d4 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218d4
c001c895:	89 04 24             	mov    DWORD PTR [esp],eax
c001c898:	e8 cb f9 fe ff       	call   c000c268 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c89d:	ba 44 19 02 c0       	mov    edx,0xc0021944
c001c8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8a6:	89 10                	mov    DWORD PTR [eax],edx
c001c8a8:	90                   	nop
c001c8a9:	83 c4 1c             	add    esp,0x1c
c001c8ac:	c3                   	ret    
c001c8ad:	90                   	nop

c001c8ae <SATA::access(unsigned long long, int, void*, bool)>:
c001c8ae:	55                   	push   ebp
c001c8af:	57                   	push   edi
c001c8b0:	56                   	push   esi
c001c8b1:	53                   	push   ebx
c001c8b2:	83 ec 2c             	sub    esp,0x2c
c001c8b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c8b9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c8be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c8ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8ce:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001c8d2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c8d6:	7e 10                	jle    c001c8e8 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	68 e4 18 02 c0       	push   0xc00218e4
c001c8e0:	e8 e0 3e ff ff       	call   c00107c5 <KePanic(char const*)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c8ee:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001c8f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001c8fa:	89 e8                	mov    eax,ebp
c001c8fc:	c1 e0 07             	shl    eax,0x7
c001c8ff:	01 d0                	add    eax,edx
c001c901:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c90b:	8d 45 02             	lea    eax,[ebp+0x2]
c001c90e:	51                   	push   ecx
c001c90f:	c1 e0 07             	shl    eax,0x7
c001c912:	51                   	push   ecx
c001c913:	01 d0                	add    eax,edx
c001c915:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c919:	50                   	push   eax
c001c91a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c920:	e8 87 ec ff ff       	call   c001b5ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c925:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001c931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c935:	0f 84 4e 01 00 00    	je     c001ca89 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001c93b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c93f:	c1 e0 09             	shl    eax,0x9
c001c942:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c947:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c94b:	74 0e                	je     c001c95b <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001c94d:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c953:	89 c1                	mov    ecx,eax
c001c955:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c959:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c95b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c95f:	8d 45 02             	lea    eax,[ebp+0x2]
c001c962:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c966:	c1 e0 07             	shl    eax,0x7
c001c969:	01 d0                	add    eax,edx
c001c96b:	8b 38                	mov    edi,DWORD PTR [eax]
c001c96d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c973:	80 e1 01             	and    cl,0x1
c001c976:	c0 e1 06             	shl    cl,0x6
c001c979:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001c97f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001c985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c989:	c1 e0 05             	shl    eax,0x5
c001c98c:	01 c7                	add    edi,eax
c001c98e:	8a 07                	mov    al,BYTE PTR [edi]
c001c990:	24 bf                	and    al,0xbf
c001c992:	08 c8                	or     al,cl
c001c994:	88 07                	mov    BYTE PTR [edi],al
c001c996:	8b 07                	mov    eax,DWORD PTR [edi]
c001c998:	25 e0 ff 00 00       	and    eax,0xffe0
c001c99d:	0d 05 00 01 00       	or     eax,0x10005
c001c9a2:	89 07                	mov    DWORD PTR [edi],eax
c001c9a4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c9aa:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001c9b0:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001c9b6:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001c9b9:	50                   	push   eax
c001c9ba:	68 90 00 00 00       	push   0x90
c001c9bf:	6a 00                	push   0x0
c001c9c1:	56                   	push   esi
c001c9c2:	e8 b9 3b fe ff       	call   c0000580 <memset>
c001c9c7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9cd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c9d1:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	48                   	dec    eax
c001c9df:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c9e4:	89 c1                	mov    ecx,eax
c001c9e6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c9ec:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c9f1:	09 c8                	or     eax,ecx
c001c9f3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c9f9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c9fc:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ca03:	25 00 7f 00 00       	and    eax,0x7f00
c001ca08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca0c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ca11:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ca16:	66 89 06             	mov    WORD PTR [esi],ax
c001ca19:	19 c0                	sbb    eax,eax
c001ca1b:	24 f0                	and    al,0xf0
c001ca1d:	04 35                	add    al,0x35
c001ca1f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ca22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca26:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001ca2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca2e:	c1 e8 10             	shr    eax,0x10
c001ca31:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ca34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca38:	c1 e8 18             	shr    eax,0x18
c001ca3b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ca3e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ca42:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ca45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca49:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ca4c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ca50:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ca54:	89 ee                	mov    esi,ebp
c001ca56:	31 c0                	xor    eax,eax
c001ca58:	c1 e6 07             	shl    esi,0x7
c001ca5b:	01 d6                	add    esi,edx
c001ca5d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ca63:	f6 c1 88             	test   cl,0x88
c001ca66:	74 0a                	je     c001ca72 <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001ca68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ca6d:	74 0a                	je     c001ca79 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001ca6f:	40                   	inc    eax
c001ca70:	eb eb                	jmp    c001ca5d <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001ca72:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ca77:	75 17                	jne    c001ca90 <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001ca79:	83 ec 0c             	sub    esp,0xc
c001ca7c:	68 1d 19 02 c0       	push   0xc002191d
c001ca81:	e8 f0 df fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	b8 01 00 00 00       	mov    eax,0x1
c001ca8e:	eb 5b                	jmp    c001caeb <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001ca90:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ca94:	c1 e5 07             	shl    ebp,0x7
c001ca97:	b8 01 00 00 00       	mov    eax,0x1
c001ca9c:	01 d5                	add    ebp,edx
c001ca9e:	d3 e0                	shl    eax,cl
c001caa0:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001caa6:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001caac:	85 d0                	test   eax,edx
c001caae:	74 16                	je     c001cac6 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001cab0:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001cab6:	0f ba e2 1e          	bt     edx,0x1e
c001caba:	73 ea                	jae    c001caa6 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001cabc:	83 ec 0c             	sub    esp,0xc
c001cabf:	68 2b 19 02 c0       	push   0xc002192b
c001cac4:	eb bb                	jmp    c001ca81 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001cac6:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001cacc:	0f ba e0 1e          	bt     eax,0x1e
c001cad0:	72 b7                	jb     c001ca89 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001cad2:	31 c0                	xor    eax,eax
c001cad4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cad9:	75 10                	jne    c001caeb <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001cadb:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cae1:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cae5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cae9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001caeb:	83 c4 2c             	add    esp,0x2c
c001caee:	5b                   	pop    ebx
c001caef:	5e                   	pop    esi
c001caf0:	5f                   	pop    edi
c001caf1:	5d                   	pop    ebp
c001caf2:	c3                   	ret    
c001caf3:	90                   	nop

c001caf4 <SATA::read(unsigned long long, int, void*)>:
c001caf4:	55                   	push   ebp
c001caf5:	57                   	push   edi
c001caf6:	56                   	push   esi
c001caf7:	be 04 00 00 00       	mov    esi,0x4
c001cafc:	53                   	push   ebx
c001cafd:	83 ec 0c             	sub    esp,0xc
c001cb00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb0c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb10:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cb13:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cb19:	0f 87 1c 02 00 00    	ja     c001cd3b <SATA::read(unsigned long long, int, void*)+0x247>
c001cb1f:	85 c9                	test   ecx,ecx
c001cb21:	be 06 00 00 00       	mov    esi,0x6
c001cb26:	0f 84 0f 02 00 00    	je     c001cd3b <SATA::read(unsigned long long, int, void*)+0x247>
c001cb2c:	56                   	push   esi
c001cb2d:	56                   	push   esi
c001cb2e:	6a 00                	push   0x0
c001cb30:	51                   	push   ecx
c001cb31:	53                   	push   ebx
c001cb32:	52                   	push   edx
c001cb33:	50                   	push   eax
c001cb34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb38:	e8 71 fd ff ff       	call   c001c8ae <SATA::access(unsigned long long, int, void*, bool)>
c001cb3d:	83 c4 20             	add    esp,0x20
c001cb40:	85 c0                	test   eax,eax
c001cb42:	89 c6                	mov    esi,eax
c001cb44:	0f 85 ec 01 00 00    	jne    c001cd36 <SATA::read(unsigned long long, int, void*)+0x242>
c001cb4a:	50                   	push   eax
c001cb4b:	bd 10 27 00 00       	mov    ebp,0x2710
c001cb50:	50                   	push   eax
c001cb51:	6a 0f                	push   0xf
c001cb53:	6a 00                	push   0x0
c001cb55:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cb5b:	bb 0a 00 00 00       	mov    ebx,0xa
c001cb60:	e8 78 f2 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cb65:	5a                   	pop    edx
c001cb66:	59                   	pop    ecx
c001cb67:	0f b6 c0             	movzx  eax,al
c001cb6a:	50                   	push   eax
c001cb6b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb70:	99                   	cdq    
c001cb71:	f7 fd                	idiv   ebp
c001cb73:	99                   	cdq    
c001cb74:	f7 fb                	idiv   ebx
c001cb76:	80 c2 30             	add    dl,0x30
c001cb79:	0f b6 d2             	movzx  edx,dl
c001cb7c:	52                   	push   edx
c001cb7d:	e8 4a f2 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cb82:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cb88:	5f                   	pop    edi
c001cb89:	bf e8 03 00 00       	mov    edi,0x3e8
c001cb8e:	58                   	pop    eax
c001cb8f:	6a 0f                	push   0xf
c001cb91:	6a 00                	push   0x0
c001cb93:	e8 45 f2 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cb98:	5a                   	pop    edx
c001cb99:	59                   	pop    ecx
c001cb9a:	0f b6 c0             	movzx  eax,al
c001cb9d:	50                   	push   eax
c001cb9e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cba3:	99                   	cdq    
c001cba4:	f7 ff                	idiv   edi
c001cba6:	99                   	cdq    
c001cba7:	f7 fb                	idiv   ebx
c001cba9:	80 c2 30             	add    dl,0x30
c001cbac:	0f b6 d2             	movzx  edx,dl
c001cbaf:	52                   	push   edx
c001cbb0:	e8 17 f2 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cbb5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cbbb:	58                   	pop    eax
c001cbbc:	5a                   	pop    edx
c001cbbd:	6a 0f                	push   0xf
c001cbbf:	6a 00                	push   0x0
c001cbc1:	e8 17 f2 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cbc6:	59                   	pop    ecx
c001cbc7:	b9 64 00 00 00       	mov    ecx,0x64
c001cbcc:	5a                   	pop    edx
c001cbcd:	0f b6 c0             	movzx  eax,al
c001cbd0:	50                   	push   eax
c001cbd1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cbd6:	99                   	cdq    
c001cbd7:	f7 f9                	idiv   ecx
c001cbd9:	99                   	cdq    
c001cbda:	f7 fb                	idiv   ebx
c001cbdc:	80 c2 30             	add    dl,0x30
c001cbdf:	0f b6 d2             	movzx  edx,dl
c001cbe2:	52                   	push   edx
c001cbe3:	e8 e4 f1 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cbe8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cbee:	59                   	pop    ecx
c001cbef:	58                   	pop    eax
c001cbf0:	6a 0f                	push   0xf
c001cbf2:	6a 00                	push   0x0
c001cbf4:	e8 e4 f1 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cbf9:	5a                   	pop    edx
c001cbfa:	59                   	pop    ecx
c001cbfb:	0f b6 c0             	movzx  eax,al
c001cbfe:	50                   	push   eax
c001cbff:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc04:	99                   	cdq    
c001cc05:	f7 fb                	idiv   ebx
c001cc07:	99                   	cdq    
c001cc08:	f7 fb                	idiv   ebx
c001cc0a:	80 c2 30             	add    dl,0x30
c001cc0d:	0f b6 d2             	movzx  edx,dl
c001cc10:	52                   	push   edx
c001cc11:	e8 b6 f1 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cc16:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc1c:	58                   	pop    eax
c001cc1d:	5a                   	pop    edx
c001cc1e:	6a 0f                	push   0xf
c001cc20:	6a 00                	push   0x0
c001cc22:	e8 b6 f1 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cc27:	59                   	pop    ecx
c001cc28:	5a                   	pop    edx
c001cc29:	0f b6 c0             	movzx  eax,al
c001cc2c:	50                   	push   eax
c001cc2d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc32:	99                   	cdq    
c001cc33:	f7 fb                	idiv   ebx
c001cc35:	80 c2 30             	add    dl,0x30
c001cc38:	0f b6 d2             	movzx  edx,dl
c001cc3b:	52                   	push   edx
c001cc3c:	e8 8b f1 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cc41:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cc47:	59                   	pop    ecx
c001cc48:	58                   	pop    eax
c001cc49:	6a 0f                	push   0xf
c001cc4b:	6a 00                	push   0x0
c001cc4d:	e8 8b f1 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cc52:	5a                   	pop    edx
c001cc53:	59                   	pop    ecx
c001cc54:	0f b6 c0             	movzx  eax,al
c001cc57:	50                   	push   eax
c001cc58:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc5d:	99                   	cdq    
c001cc5e:	f7 fd                	idiv   ebp
c001cc60:	99                   	cdq    
c001cc61:	f7 fb                	idiv   ebx
c001cc63:	80 c2 30             	add    dl,0x30
c001cc66:	0f b6 d2             	movzx  edx,dl
c001cc69:	52                   	push   edx
c001cc6a:	e8 5d f1 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cc6f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cc75:	5d                   	pop    ebp
c001cc76:	58                   	pop    eax
c001cc77:	6a 0f                	push   0xf
c001cc79:	6a 00                	push   0x0
c001cc7b:	e8 5d f1 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cc80:	5a                   	pop    edx
c001cc81:	59                   	pop    ecx
c001cc82:	0f b6 c0             	movzx  eax,al
c001cc85:	50                   	push   eax
c001cc86:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc8b:	99                   	cdq    
c001cc8c:	f7 ff                	idiv   edi
c001cc8e:	99                   	cdq    
c001cc8f:	f7 fb                	idiv   ebx
c001cc91:	80 c2 30             	add    dl,0x30
c001cc94:	0f b6 d2             	movzx  edx,dl
c001cc97:	52                   	push   edx
c001cc98:	e8 2f f1 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cc9d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cca3:	5f                   	pop    edi
c001cca4:	5d                   	pop    ebp
c001cca5:	6a 0f                	push   0xf
c001cca7:	6a 00                	push   0x0
c001cca9:	e8 2f f1 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ccae:	5a                   	pop    edx
c001ccaf:	59                   	pop    ecx
c001ccb0:	b9 64 00 00 00       	mov    ecx,0x64
c001ccb5:	0f b6 c0             	movzx  eax,al
c001ccb8:	50                   	push   eax
c001ccb9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ccbe:	99                   	cdq    
c001ccbf:	f7 f9                	idiv   ecx
c001ccc1:	99                   	cdq    
c001ccc2:	f7 fb                	idiv   ebx
c001ccc4:	88 d0                	mov    al,dl
c001ccc6:	04 30                	add    al,0x30
c001ccc8:	0f b6 c0             	movzx  eax,al
c001cccb:	50                   	push   eax
c001cccc:	e8 fb f0 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001ccd1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ccd7:	5f                   	pop    edi
c001ccd8:	5d                   	pop    ebp
c001ccd9:	6a 0f                	push   0xf
c001ccdb:	6a 00                	push   0x0
c001ccdd:	e8 fb f0 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cce2:	5a                   	pop    edx
c001cce3:	59                   	pop    ecx
c001cce4:	0f b6 c0             	movzx  eax,al
c001cce7:	50                   	push   eax
c001cce8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cced:	99                   	cdq    
c001ccee:	f7 fb                	idiv   ebx
c001ccf0:	99                   	cdq    
c001ccf1:	f7 fb                	idiv   ebx
c001ccf3:	88 d0                	mov    al,dl
c001ccf5:	04 30                	add    al,0x30
c001ccf7:	0f b6 c0             	movzx  eax,al
c001ccfa:	50                   	push   eax
c001ccfb:	e8 cc f0 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cd00:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd06:	5f                   	pop    edi
c001cd07:	5d                   	pop    ebp
c001cd08:	6a 0f                	push   0xf
c001cd0a:	6a 00                	push   0x0
c001cd0c:	e8 cc f0 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cd11:	5a                   	pop    edx
c001cd12:	59                   	pop    ecx
c001cd13:	0f b6 c0             	movzx  eax,al
c001cd16:	50                   	push   eax
c001cd17:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd1c:	99                   	cdq    
c001cd1d:	f7 fb                	idiv   ebx
c001cd1f:	80 c2 30             	add    dl,0x30
c001cd22:	0f b6 d2             	movzx  edx,dl
c001cd25:	52                   	push   edx
c001cd26:	e8 a1 f0 ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cd2b:	83 c4 10             	add    esp,0x10
c001cd2e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd34:	eb 05                	jmp    c001cd3b <SATA::read(unsigned long long, int, void*)+0x247>
c001cd36:	be 01 00 00 00       	mov    esi,0x1
c001cd3b:	83 c4 0c             	add    esp,0xc
c001cd3e:	89 f0                	mov    eax,esi
c001cd40:	5b                   	pop    ebx
c001cd41:	5e                   	pop    esi
c001cd42:	5f                   	pop    edi
c001cd43:	5d                   	pop    ebp
c001cd44:	c3                   	ret    
c001cd45:	90                   	nop

c001cd46 <SATA::write(unsigned long long, int, void*)>:
c001cd46:	55                   	push   ebp
c001cd47:	57                   	push   edi
c001cd48:	56                   	push   esi
c001cd49:	53                   	push   ebx
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cd51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cd55:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cd59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd5d:	8d 70 ff             	lea    esi,[eax-0x1]
c001cd60:	b8 04 00 00 00       	mov    eax,0x4
c001cd65:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cd6b:	0f 87 30 02 00 00    	ja     c001cfa1 <SATA::write(unsigned long long, int, void*)+0x25b>
c001cd71:	85 db                	test   ebx,ebx
c001cd73:	b8 06 00 00 00       	mov    eax,0x6
c001cd78:	0f 84 23 02 00 00    	je     c001cfa1 <SATA::write(unsigned long long, int, void*)+0x25b>
c001cd7e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd82:	c1 e6 09             	shl    esi,0x9
c001cd85:	01 de                	add    esi,ebx
c001cd87:	50                   	push   eax
c001cd88:	89 d7                	mov    edi,edx
c001cd8a:	50                   	push   eax
c001cd8b:	83 c7 01             	add    edi,0x1
c001cd8e:	6a 01                	push   0x1
c001cd90:	89 cd                	mov    ebp,ecx
c001cd92:	53                   	push   ebx
c001cd93:	83 d5 00             	adc    ebp,0x0
c001cd96:	6a 01                	push   0x1
c001cd98:	81 c3 00 02 00 00    	add    ebx,0x200
c001cd9e:	51                   	push   ecx
c001cd9f:	52                   	push   edx
c001cda0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cda4:	e8 05 fb ff ff       	call   c001c8ae <SATA::access(unsigned long long, int, void*, bool)>
c001cda9:	83 c4 20             	add    esp,0x20
c001cdac:	39 f3                	cmp    ebx,esi
c001cdae:	89 fa                	mov    edx,edi
c001cdb0:	89 e9                	mov    ecx,ebp
c001cdb2:	75 d3                	jne    c001cd87 <SATA::write(unsigned long long, int, void*)+0x41>
c001cdb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cdb8:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdbd:	bb 0a 00 00 00       	mov    ebx,0xa
c001cdc2:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001cdc8:	50                   	push   eax
c001cdc9:	50                   	push   eax
c001cdca:	6a 0f                	push   0xf
c001cdcc:	6a 00                	push   0x0
c001cdce:	e8 0a f0 ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cdd3:	5a                   	pop    edx
c001cdd4:	59                   	pop    ecx
c001cdd5:	0f b6 c0             	movzx  eax,al
c001cdd8:	50                   	push   eax
c001cdd9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdde:	99                   	cdq    
c001cddf:	f7 fd                	idiv   ebp
c001cde1:	99                   	cdq    
c001cde2:	f7 fb                	idiv   ebx
c001cde4:	88 d0                	mov    al,dl
c001cde6:	04 30                	add    al,0x30
c001cde8:	0f b6 c0             	movzx  eax,al
c001cdeb:	50                   	push   eax
c001cdec:	e8 db ef ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cdf1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdf7:	5e                   	pop    esi
c001cdf8:	5f                   	pop    edi
c001cdf9:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdfe:	6a 0f                	push   0xf
c001ce00:	6a 00                	push   0x0
c001ce02:	e8 d6 ef ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ce07:	5a                   	pop    edx
c001ce08:	59                   	pop    ecx
c001ce09:	0f b6 c0             	movzx  eax,al
c001ce0c:	50                   	push   eax
c001ce0d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce12:	99                   	cdq    
c001ce13:	f7 ff                	idiv   edi
c001ce15:	99                   	cdq    
c001ce16:	f7 fb                	idiv   ebx
c001ce18:	80 c2 30             	add    dl,0x30
c001ce1b:	0f b6 d2             	movzx  edx,dl
c001ce1e:	52                   	push   edx
c001ce1f:	e8 a8 ef ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001ce24:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce2a:	5e                   	pop    esi
c001ce2b:	be 64 00 00 00       	mov    esi,0x64
c001ce30:	58                   	pop    eax
c001ce31:	6a 0f                	push   0xf
c001ce33:	6a 00                	push   0x0
c001ce35:	e8 a3 ef ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ce3a:	5a                   	pop    edx
c001ce3b:	59                   	pop    ecx
c001ce3c:	0f b6 c0             	movzx  eax,al
c001ce3f:	50                   	push   eax
c001ce40:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce45:	99                   	cdq    
c001ce46:	f7 fe                	idiv   esi
c001ce48:	99                   	cdq    
c001ce49:	f7 fb                	idiv   ebx
c001ce4b:	80 c2 30             	add    dl,0x30
c001ce4e:	0f b6 d2             	movzx  edx,dl
c001ce51:	52                   	push   edx
c001ce52:	e8 75 ef ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001ce57:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce5d:	58                   	pop    eax
c001ce5e:	5a                   	pop    edx
c001ce5f:	6a 0f                	push   0xf
c001ce61:	6a 00                	push   0x0
c001ce63:	e8 75 ef ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ce68:	59                   	pop    ecx
c001ce69:	5a                   	pop    edx
c001ce6a:	0f b6 c0             	movzx  eax,al
c001ce6d:	50                   	push   eax
c001ce6e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce73:	99                   	cdq    
c001ce74:	f7 fb                	idiv   ebx
c001ce76:	99                   	cdq    
c001ce77:	f7 fb                	idiv   ebx
c001ce79:	80 c2 30             	add    dl,0x30
c001ce7c:	0f b6 d2             	movzx  edx,dl
c001ce7f:	52                   	push   edx
c001ce80:	e8 47 ef ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001ce85:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce8b:	59                   	pop    ecx
c001ce8c:	58                   	pop    eax
c001ce8d:	6a 0f                	push   0xf
c001ce8f:	6a 00                	push   0x0
c001ce91:	e8 47 ef ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ce96:	5a                   	pop    edx
c001ce97:	59                   	pop    ecx
c001ce98:	0f b6 c0             	movzx  eax,al
c001ce9b:	50                   	push   eax
c001ce9c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cea1:	99                   	cdq    
c001cea2:	f7 fb                	idiv   ebx
c001cea4:	80 c2 30             	add    dl,0x30
c001cea7:	0f b6 d2             	movzx  edx,dl
c001ceaa:	52                   	push   edx
c001ceab:	e8 1c ef ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001ceb0:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ceb6:	58                   	pop    eax
c001ceb7:	5a                   	pop    edx
c001ceb8:	6a 0f                	push   0xf
c001ceba:	6a 00                	push   0x0
c001cebc:	e8 1c ef ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cec1:	59                   	pop    ecx
c001cec2:	5a                   	pop    edx
c001cec3:	0f b6 c0             	movzx  eax,al
c001cec6:	50                   	push   eax
c001cec7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cecc:	99                   	cdq    
c001cecd:	f7 fd                	idiv   ebp
c001cecf:	99                   	cdq    
c001ced0:	f7 fb                	idiv   ebx
c001ced2:	80 c2 30             	add    dl,0x30
c001ced5:	0f b6 d2             	movzx  edx,dl
c001ced8:	52                   	push   edx
c001ced9:	e8 ee ee ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cede:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cee4:	59                   	pop    ecx
c001cee5:	5d                   	pop    ebp
c001cee6:	6a 0f                	push   0xf
c001cee8:	6a 00                	push   0x0
c001ceea:	e8 ee ee ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001ceef:	5a                   	pop    edx
c001cef0:	59                   	pop    ecx
c001cef1:	0f b6 c0             	movzx  eax,al
c001cef4:	50                   	push   eax
c001cef5:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cefa:	99                   	cdq    
c001cefb:	f7 ff                	idiv   edi
c001cefd:	99                   	cdq    
c001cefe:	f7 fb                	idiv   ebx
c001cf00:	88 d0                	mov    al,dl
c001cf02:	04 30                	add    al,0x30
c001cf04:	0f b6 c0             	movzx  eax,al
c001cf07:	50                   	push   eax
c001cf08:	e8 bf ee ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cf0d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf13:	5f                   	pop    edi
c001cf14:	5d                   	pop    ebp
c001cf15:	6a 0f                	push   0xf
c001cf17:	6a 00                	push   0x0
c001cf19:	e8 bf ee ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cf1e:	5a                   	pop    edx
c001cf1f:	59                   	pop    ecx
c001cf20:	0f b6 c0             	movzx  eax,al
c001cf23:	50                   	push   eax
c001cf24:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf29:	99                   	cdq    
c001cf2a:	f7 fe                	idiv   esi
c001cf2c:	99                   	cdq    
c001cf2d:	f7 fb                	idiv   ebx
c001cf2f:	88 d0                	mov    al,dl
c001cf31:	04 30                	add    al,0x30
c001cf33:	0f b6 c0             	movzx  eax,al
c001cf36:	50                   	push   eax
c001cf37:	e8 90 ee ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cf3c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf42:	5e                   	pop    esi
c001cf43:	5f                   	pop    edi
c001cf44:	6a 0f                	push   0xf
c001cf46:	6a 00                	push   0x0
c001cf48:	e8 90 ee ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cf4d:	5d                   	pop    ebp
c001cf4e:	5a                   	pop    edx
c001cf4f:	0f b6 c0             	movzx  eax,al
c001cf52:	50                   	push   eax
c001cf53:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf58:	99                   	cdq    
c001cf59:	f7 fb                	idiv   ebx
c001cf5b:	99                   	cdq    
c001cf5c:	f7 fb                	idiv   ebx
c001cf5e:	88 d0                	mov    al,dl
c001cf60:	04 30                	add    al,0x30
c001cf62:	0f b6 c0             	movzx  eax,al
c001cf65:	50                   	push   eax
c001cf66:	e8 61 ee ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cf6b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf71:	59                   	pop    ecx
c001cf72:	5e                   	pop    esi
c001cf73:	6a 0f                	push   0xf
c001cf75:	6a 00                	push   0x0
c001cf77:	e8 61 ee ff ff       	call   c001bddd <combineColours(unsigned char, unsigned char)>
c001cf7c:	5f                   	pop    edi
c001cf7d:	5d                   	pop    ebp
c001cf7e:	0f b6 c0             	movzx  eax,al
c001cf81:	50                   	push   eax
c001cf82:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf87:	99                   	cdq    
c001cf88:	f7 fb                	idiv   ebx
c001cf8a:	80 c2 30             	add    dl,0x30
c001cf8d:	0f b6 d2             	movzx  edx,dl
c001cf90:	52                   	push   edx
c001cf91:	e8 36 ee ff ff       	call   c001bdcc <combineCharAndColour(char, unsigned char)>
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf9f:	31 c0                	xor    eax,eax
c001cfa1:	83 c4 0c             	add    esp,0xc
c001cfa4:	5b                   	pop    ebx
c001cfa5:	5e                   	pop    esi
c001cfa6:	5f                   	pop    edi
c001cfa7:	5d                   	pop    ebp
c001cfa8:	c3                   	ret    
c001cfa9:	90                   	nop

c001cfaa <SATAPI::write(unsigned long long, int, void*)>:
c001cfaa:	b8 03 00 00 00       	mov    eax,0x3
c001cfaf:	c3                   	ret    

c001cfb0 <SATAPI::close(int, int, void*)>:
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cfbd:	85 c0                	test   eax,eax
c001cfbf:	74 0c                	je     c001cfcd <SATAPI::close(int, int, void*)+0x1d>
c001cfc1:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfc3:	83 ec 0c             	sub    esp,0xc
c001cfc6:	50                   	push   eax
c001cfc7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	31 c0                	xor    eax,eax
c001cfcf:	83 c4 0c             	add    esp,0xc
c001cfd2:	c3                   	ret    
c001cfd3:	90                   	nop

c001cfd4 <SATAPI::SATAPI()>:
c001cfd4:	83 ec 1c             	sub    esp,0x1c
c001cfd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfdb:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001cfe3:	c7 44 24 04 74 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021974
c001cfeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfee:	e8 75 f2 fe ff       	call   c000c268 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cff3:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001cff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffc:	89 10                	mov    DWORD PTR [eax],edx
c001cffe:	90                   	nop
c001cfff:	83 c4 1c             	add    esp,0x1c
c001d002:	c3                   	ret    
c001d003:	90                   	nop

c001d004 <SATAPI::diskRemoved()>:
c001d004:	c3                   	ret    
c001d005:	90                   	nop

c001d006 <SATAPI::diskInserted()>:
c001d006:	83 ec 18             	sub    esp,0x18
c001d009:	68 80 19 02 c0       	push   0xc0021980
c001d00e:	e8 63 da fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d017:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d01e:	83 c4 1c             	add    esp,0x1c
c001d021:	c3                   	ret    

c001d022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d022:	55                   	push   ebp
c001d023:	57                   	push   edi
c001d024:	56                   	push   esi
c001d025:	53                   	push   ebx
c001d026:	83 ec 34             	sub    esp,0x34
c001d029:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d02d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d031:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d035:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d039:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d03d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d043:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d04d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d057:	83 c0 02             	add    eax,0x2
c001d05a:	c1 e0 07             	shl    eax,0x7
c001d05d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d065:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d069:	c1 e0 07             	shl    eax,0x7
c001d06c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d070:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d074:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d07e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d082:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d088:	e8 1f e5 ff ff       	call   c001b5ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	89 c2                	mov    edx,eax
c001d092:	b8 01 00 00 00       	mov    eax,0x1
c001d097:	83 fa ff             	cmp    edx,0xffffffff
c001d09a:	0f 84 55 02 00 00    	je     c001d2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d0a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0a8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0b0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d0b6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d0bc:	89 d1                	mov    ecx,edx
c001d0be:	c1 e1 05             	shl    ecx,0x5
c001d0c1:	01 c8                	add    eax,ecx
c001d0c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d0c5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d0cb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d0d1:	89 08                	mov    DWORD PTR [eax],ecx
c001d0d3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d0d9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d0df:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d0e5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d0e8:	50                   	push   eax
c001d0e9:	68 90 00 00 00       	push   0x90
c001d0ee:	6a 00                	push   0x0
c001d0f0:	53                   	push   ebx
c001d0f1:	e8 8a 34 fe ff       	call   c0000580 <memset>
c001d0f6:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d0f9:	b9 0c 00 00 00       	mov    ecx,0xc
c001d0fe:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d102:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d104:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d10a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d10e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d112:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d118:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d11c:	48                   	dec    eax
c001d11d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d122:	89 c1                	mov    ecx,eax
c001d124:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d12a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d12f:	09 c8                	or     eax,ecx
c001d131:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d137:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d13a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d141:	25 00 7f 00 00       	and    eax,0x7f00
c001d146:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d14b:	66 89 03             	mov    WORD PTR [ebx],ax
c001d14e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d152:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d15a:	c1 e8 10             	shr    eax,0x10
c001d15d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d164:	c1 e8 18             	shr    eax,0x18
c001d167:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d16a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d16e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d171:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d175:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d178:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d183:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d187:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d18b:	31 c0                	xor    eax,eax
c001d18d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d193:	f6 c1 88             	test   cl,0x88
c001d196:	74 0a                	je     c001d1a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d198:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d19d:	74 0a                	je     c001d1a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d19f:	40                   	inc    eax
c001d1a0:	eb eb                	jmp    c001d18d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d1a2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d1a7:	75 43                	jne    c001d1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	68 98 19 02 c0       	push   0xc0021998
c001d1b1:	e8 c0 d8 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d1b6:	58                   	pop    eax
c001d1b7:	5a                   	pop    edx
c001d1b8:	68 ad 19 02 c0       	push   0xc00219ad
c001d1bd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d1c3:	e8 f0 b8 fe ff       	call   c0008ab8 <VgaText::puts(char const*)>
c001d1c8:	59                   	pop    ecx
c001d1c9:	5b                   	pop    ebx
c001d1ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d1ce:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d1d4:	e8 6b e4 ff ff       	call   c001b644 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d1d9:	5e                   	pop    esi
c001d1da:	5f                   	pop    edi
c001d1db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d1df:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d1e5:	e8 3a e4 ff ff       	call   c001b624 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d1ea:	eb 46                	jmp    c001d232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d1ec:	be 01 00 00 00       	mov    esi,0x1
c001d1f1:	88 d1                	mov    cl,dl
c001d1f3:	d3 e6                	shl    esi,cl
c001d1f5:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d1fa:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d200:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d204:	c1 e3 07             	shl    ebx,0x7
c001d207:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d20b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d211:	85 c6                	test   esi,eax
c001d213:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d219:	0f 84 a3 00 00 00    	je     c001d2c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d21f:	0f ba e0 1e          	bt     eax,0x1e
c001d223:	73 1a                	jae    c001d23f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	68 bf 19 02 c0       	push   0xc00219bf
c001d22d:	e8 44 d8 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	b8 01 00 00 00       	mov    eax,0x1
c001d23a:	e9 b6 00 00 00       	jmp    c001d2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d23f:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d245:	83 f8 0d             	cmp    eax,0xd
c001d248:	77 0a                	ja     c001d254 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d24a:	83 ec 0c             	sub    esp,0xc
c001d24d:	68 c8 00 00 00       	push   0xc8
c001d252:	eb 28                	jmp    c001d27c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d254:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d25a:	83 f8 0d             	cmp    eax,0xd
c001d25d:	77 0a                	ja     c001d269 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d25f:	83 ec 0c             	sub    esp,0xc
c001d262:	68 58 02 00 00       	push   0x258
c001d267:	eb 13                	jmp    c001d27c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d269:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d26f:	83 f8 06             	cmp    eax,0x6
c001d272:	77 10                	ja     c001d284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d274:	83 ec 0c             	sub    esp,0xc
c001d277:	68 dc 05 00 00       	push   0x5dc
c001d27c:	e8 3b 81 ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001d281:	83 c4 10             	add    esp,0x10
c001d284:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d288:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d28b:	75 06                	jne    c001d293 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d28d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d291:	74 15                	je     c001d2a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d293:	83 ff 06             	cmp    edi,0x6
c001d296:	77 10                	ja     c001d2a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	68 c4 09 00 00       	push   0x9c4
c001d2a0:	e8 17 81 ff ff       	call   c00153bc <milliTenthSleep(unsigned int)>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	47                   	inc    edi
c001d2a9:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d2af:	0f 85 56 ff ff ff    	jne    c001d20b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d2b5:	83 ec 0c             	sub    esp,0xc
c001d2b8:	68 d2 19 02 c0       	push   0xc00219d2
c001d2bd:	e9 6b ff ff ff       	jmp    c001d22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d2c2:	0f ba e0 1e          	bt     eax,0x1e
c001d2c6:	73 0d                	jae    c001d2d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d2c8:	83 ec 0c             	sub    esp,0xc
c001d2cb:	68 e6 19 02 c0       	push   0xc00219e6
c001d2d0:	e9 58 ff ff ff       	jmp    c001d22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d2d5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d2da:	74 17                	je     c001d2f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d2dc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d2e1:	74 10                	je     c001d2f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d2e3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d2e9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d2ed:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d2f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d2f3:	31 c0                	xor    eax,eax
c001d2f5:	83 c4 2c             	add    esp,0x2c
c001d2f8:	5b                   	pop    ebx
c001d2f9:	5e                   	pop    esi
c001d2fa:	5f                   	pop    edi
c001d2fb:	5d                   	pop    ebp
c001d2fc:	c3                   	ret    
c001d2fd:	90                   	nop

c001d2fe <SATAPI::eject()>:
c001d2fe:	57                   	push   edi
c001d2ff:	b9 03 00 00 00       	mov    ecx,0x3
c001d304:	83 ec 18             	sub    esp,0x18
c001d307:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d30b:	fc                   	cld    
c001d30c:	31 c0                	xor    eax,eax
c001d30e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d310:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d315:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d31a:	50                   	push   eax
c001d31b:	6a 00                	push   0x0
c001d31d:	6a 00                	push   0x0
c001d31f:	6a 00                	push   0x0
c001d321:	6a 00                	push   0x0
c001d323:	6a 02                	push   0x2
c001d325:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d329:	50                   	push   eax
c001d32a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d32e:	e8 ef fc ff ff       	call   c001d022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d333:	83 c4 38             	add    esp,0x38
c001d336:	31 c0                	xor    eax,eax
c001d338:	5f                   	pop    edi
c001d339:	c3                   	ret    

c001d33a <SATAPI::detectMedia()>:
c001d33a:	53                   	push   ebx
c001d33b:	83 ec 14             	sub    esp,0x14
c001d33e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d342:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d348:	e8 8f 07 ff ff       	call   c000dadc <VCache::writeWriteBuffer()>
c001d34d:	59                   	pop    ecx
c001d34e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d354:	e8 73 07 ff ff       	call   c000dacc <VCache::invalidateReadBuffer()>
c001d359:	c7 04 24 fb 19 02 c0 	mov    DWORD PTR [esp],0xc00219fb
c001d360:	e8 11 d7 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d365:	83 c4 10             	add    esp,0x10
c001d368:	31 c0                	xor    eax,eax
c001d36a:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d371:	85 d2                	test   edx,edx
c001d373:	74 0f                	je     c001d384 <SATAPI::detectMedia()+0x4a>
c001d375:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d37b:	75 07                	jne    c001d384 <SATAPI::detectMedia()+0x4a>
c001d37d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d384:	40                   	inc    eax
c001d385:	83 f8 1a             	cmp    eax,0x1a
c001d388:	75 e0                	jne    c001d36a <SATAPI::detectMedia()+0x30>
c001d38a:	83 c4 08             	add    esp,0x8
c001d38d:	5b                   	pop    ebx
c001d38e:	c3                   	ret    
c001d38f:	90                   	nop

c001d390 <SATAPI::open(int, int, void*)>:
c001d390:	56                   	push   esi
c001d391:	53                   	push   ebx
c001d392:	51                   	push   ecx
c001d393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d39b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d3a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d3ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3af:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d3b9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d3c3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d3ca:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d3d0:	e8 37 aa fe ff       	call   c0007e0c <Phys::allocatePage()>
c001d3d5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d3db:	89 c6                	mov    esi,eax
c001d3dd:	e8 2a aa fe ff       	call   c0007e0c <Phys::allocatePage()>
c001d3e2:	81 c6 00 10 00 00    	add    esi,0x1000
c001d3e8:	39 c6                	cmp    esi,eax
c001d3ea:	74 10                	je     c001d3fc <SATAPI::open(int, int, void*)+0x6c>
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	68 10 1a 02 c0       	push   0xc0021a10
c001d3f4:	e8 cc 33 ff ff       	call   c00107c5 <KePanic(char const*)>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	6a 02                	push   0x2
c001d401:	e8 1a c2 fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001d406:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d40c:	6a 03                	push   0x3
c001d40e:	50                   	push   eax
c001d40f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d415:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d41b:	e8 22 c9 fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d420:	83 c4 14             	add    esp,0x14
c001d423:	68 78 01 00 00       	push   0x178
c001d428:	e8 d9 a6 fe ff       	call   c0007b06 <malloc>
c001d42d:	83 c4 0c             	add    esp,0xc
c001d430:	6a 00                	push   0x0
c001d432:	68 ff ff ff 7f       	push   0x7fffffff
c001d437:	6a 00                	push   0x0
c001d439:	6a 00                	push   0x0
c001d43b:	53                   	push   ebx
c001d43c:	68 26 1a 02 c0       	push   0xc0021a26
c001d441:	89 c6                	mov    esi,eax
c001d443:	50                   	push   eax
c001d444:	e8 25 fb fe ff       	call   c000cf6e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d449:	83 c4 14             	add    esp,0x14
c001d44c:	56                   	push   esi
c001d44d:	e8 de fb fe ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c001d452:	5a                   	pop    edx
c001d453:	59                   	pop    ecx
c001d454:	0f be c0             	movsx  eax,al
c001d457:	50                   	push   eax
c001d458:	68 78 18 02 c0       	push   0xc0021878
c001d45d:	e8 14 d6 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d462:	58                   	pop    eax
c001d463:	5a                   	pop    edx
c001d464:	56                   	push   esi
c001d465:	53                   	push   ebx
c001d466:	e8 37 ea fe ff       	call   c000bea2 <Device::addChild(Device*)>
c001d46b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d471:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d474:	e8 57 ee fe ff       	call   c000c2d0 <PhysicalDisk::startCache()>
c001d479:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d480:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d483:	e8 b2 fe ff ff       	call   c001d33a <SATAPI::detectMedia()>
c001d488:	83 c4 14             	add    esp,0x14
c001d48b:	31 c0                	xor    eax,eax
c001d48d:	5b                   	pop    ebx
c001d48e:	5e                   	pop    esi
c001d48f:	c3                   	ret    

c001d490 <SATAPI::read(unsigned long long, int, void*)>:
c001d490:	55                   	push   ebp
c001d491:	57                   	push   edi
c001d492:	56                   	push   esi
c001d493:	53                   	push   ebx
c001d494:	83 ec 3c             	sub    esp,0x3c
c001d497:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001d49b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d49f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d4a3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d4a7:	83 fb 04             	cmp    ebx,0x4
c001d4aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d4ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d4b2:	7e 10                	jle    c001d4c4 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	68 34 1a 02 c0       	push   0xc0021a34
c001d4bc:	e8 04 33 ff ff       	call   c00107c5 <KePanic(char const*)>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001d4ca:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001d4d0:	51                   	push   ecx
c001d4d1:	50                   	push   eax
c001d4d2:	83 c0 02             	add    eax,0x2
c001d4d5:	c1 e0 07             	shl    eax,0x7
c001d4d8:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d4de:	50                   	push   eax
c001d4df:	52                   	push   edx
c001d4e0:	e8 89 e1 ff ff       	call   c001b66e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d4e5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d4e9:	b9 03 00 00 00       	mov    ecx,0x3
c001d4ee:	fc                   	cld    
c001d4ef:	31 c0                	xor    eax,eax
c001d4f1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4f3:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d4f8:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d4fd:	83 c4 0c             	add    esp,0xc
c001d500:	6a 00                	push   0x0
c001d502:	6a 00                	push   0x0
c001d504:	6a 00                	push   0x0
c001d506:	6a 00                	push   0x0
c001d508:	6a 02                	push   0x2
c001d50a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d50e:	50                   	push   eax
c001d50f:	56                   	push   esi
c001d510:	e8 0d fb ff ff       	call   c001d022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d515:	83 c4 20             	add    esp,0x20
c001d518:	85 c0                	test   eax,eax
c001d51a:	89 c5                	mov    ebp,eax
c001d51c:	75 44                	jne    c001d562 <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001d51e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d522:	b9 03 00 00 00       	mov    ecx,0x3
c001d527:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d52d:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001d531:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d536:	0f c8                	bswap  eax
c001d538:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d53c:	50                   	push   eax
c001d53d:	53                   	push   ebx
c001d53e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d542:	c1 e3 0b             	shl    ebx,0xb
c001d545:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d54d:	53                   	push   ebx
c001d54e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d552:	50                   	push   eax
c001d553:	56                   	push   esi
c001d554:	e8 c9 fa ff ff       	call   c001d022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d559:	83 c4 20             	add    esp,0x20
c001d55c:	85 c0                	test   eax,eax
c001d55e:	89 c5                	mov    ebp,eax
c001d560:	74 0c                	je     c001d56e <SATAPI::read(unsigned long long, int, void*)+0xde>
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	56                   	push   esi
c001d566:	e8 cf fd ff ff       	call   c001d33a <SATAPI::detectMedia()>
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	83 c4 3c             	add    esp,0x3c
c001d571:	89 e8                	mov    eax,ebp
c001d573:	5b                   	pop    ebx
c001d574:	5e                   	pop    esi
c001d575:	5f                   	pop    edi
c001d576:	5d                   	pop    ebp
c001d577:	c3                   	ret    

c001d578 <IOAPIC::close(int, int, void*)>:
c001d578:	b8 00 00 00 00       	mov    eax,0x0
c001d57d:	c3                   	ret    

c001d57e <apicGetBase()>:
c001d57e:	55                   	push   ebp
c001d57f:	89 e5                	mov    ebp,esp
c001d581:	83 ec 28             	sub    esp,0x28
c001d584:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d589:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001d590:	24 08                	and    al,0x8
c001d592:	84 c0                	test   al,al
c001d594:	75 07                	jne    c001d59d <apicGetBase()+0x1f>
c001d596:	b8 00 00 00 00       	mov    eax,0x0
c001d59b:	eb 23                	jmp    c001d5c0 <apicGetBase()+0x42>
c001d59d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d5a2:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001d5aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5ad:	e8 0e 9b fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001d5b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d5b5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d5b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d5bb:	25 00 00 ff ff       	and    eax,0xffff0000
c001d5c0:	c9                   	leave  
c001d5c1:	c3                   	ret    

c001d5c2 <IOAPIC::IOAPIC()>:
c001d5c2:	83 ec 1c             	sub    esp,0x1c
c001d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c9:	c7 44 24 04 98 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a98
c001d5d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5d4:	e8 61 ea fe ff       	call   c000c03a <Device::Device(char const*)>
c001d5d9:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001d5de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5e2:	89 10                	mov    DWORD PTR [eax],edx
c001d5e4:	90                   	nop
c001d5e5:	83 c4 1c             	add    esp,0x1c
c001d5e8:	c3                   	ret    

c001d5e9 <apicOpen()>:
c001d5e9:	55                   	push   ebp
c001d5ea:	89 e5                	mov    ebp,esp
c001d5ec:	53                   	push   ebx
c001d5ed:	83 ec 44             	sub    esp,0x44
c001d5f0:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001d5f7:	34 01                	xor    al,0x1
c001d5f9:	84 c0                	test   al,al
c001d5fb:	0f 84 a1 00 00 00    	je     c001d6a2 <apicOpen()+0xb9>
c001d601:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d605:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001d60c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d60f:	0f 83 86 00 00 00    	jae    c001d69b <apicOpen()+0xb2>
c001d615:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d61c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001d61f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d622:	e8 df a4 fe ff       	call   c0007b06 <malloc>
c001d627:	89 c3                	mov    ebx,eax
c001d629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d62c:	e8 91 ff ff ff       	call   c001d5c2 <IOAPIC::IOAPIC()>
c001d631:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d634:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d638:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d63b:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d642:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d647:	40                   	inc    eax
c001d648:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d64d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d652:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d658:	89 c2                	mov    edx,eax
c001d65a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d65d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d661:	89 14 24             	mov    DWORD PTR [esp],edx
c001d664:	e8 39 e8 fe ff       	call   c000bea2 <Device::addChild(Device*)>
c001d669:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d66c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d66e:	83 c0 08             	add    eax,0x8
c001d671:	8b 00                	mov    eax,DWORD PTR [eax]
c001d673:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d677:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d67f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d68b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d68e:	89 14 24             	mov    DWORD PTR [esp],edx
c001d691:	ff d0                	call   eax
c001d693:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d696:	e9 6a ff ff ff       	jmp    c001d605 <apicOpen()+0x1c>
c001d69b:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d6a2:	e8 d7 fe ff ff       	call   c001d57e <apicGetBase()>
c001d6a7:	05 f0 00 00 00       	add    eax,0xf0
c001d6ac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d6af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d6b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6b4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6b7:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d6be:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d6c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d6c8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d6cb:	89 10                	mov    DWORD PTR [eax],edx
c001d6cd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d6d4:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d6d9:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d6dc:	7d 70                	jge    c001d74e <apicOpen()+0x165>
c001d6de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6e1:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d6e8:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d6eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6ee:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d6f5:	c1 e8 08             	shr    eax,0x8
c001d6f8:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d6fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d6ff:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d706:	c1 e8 18             	shr    eax,0x18
c001d709:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d70c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d710:	75 37                	jne    c001d749 <apicOpen()+0x160>
c001d712:	e8 67 fe ff ff       	call   c001d57e <apicGetBase()>
c001d717:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d71b:	75 07                	jne    c001d724 <apicOpen()+0x13b>
c001d71d:	ba 60 03 00 00       	mov    edx,0x360
c001d722:	eb 05                	jmp    c001d729 <apicOpen()+0x140>
c001d724:	ba 50 03 00 00       	mov    edx,0x350
c001d729:	01 d0                	add    eax,edx
c001d72b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d72e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d731:	8b 00                	mov    eax,DWORD PTR [eax]
c001d733:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d736:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d73d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d741:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d744:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d747:	89 10                	mov    DWORD PTR [eax],edx
c001d749:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d74c:	eb 86                	jmp    c001d6d4 <apicOpen()+0xeb>
c001d74e:	90                   	nop
c001d74f:	83 c4 44             	add    esp,0x44
c001d752:	5b                   	pop    ebx
c001d753:	5d                   	pop    ebp
c001d754:	c3                   	ret    
c001d755:	90                   	nop

c001d756 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d756:	55                   	push   ebp
c001d757:	89 e5                	mov    ebp,esp
c001d759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d75c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d762:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d765:	72 1d                	jb     c001d784 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d76a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d773:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d779:	01 d0                	add    eax,edx
c001d77b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d77e:	73 04                	jae    c001d784 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d780:	b0 01                	mov    al,0x1
c001d782:	eb 02                	jmp    c001d786 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d784:	b0 00                	mov    al,0x0
c001d786:	5d                   	pop    ebp
c001d787:	c3                   	ret    

c001d788 <IOAPIC::read(int)>:
c001d788:	55                   	push   ebp
c001d789:	89 e5                	mov    ebp,esp
c001d78b:	83 ec 10             	sub    esp,0x10
c001d78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d791:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d797:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d79a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d79d:	0f b6 d0             	movzx  edx,al
c001d7a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d7a3:	89 10                	mov    DWORD PTR [eax],edx
c001d7a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d7a8:	83 c0 10             	add    eax,0x10
c001d7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7ad:	c9                   	leave  
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <IOAPIC::open(int, int, void*)>:
c001d7b0:	55                   	push   ebp
c001d7b1:	89 e5                	mov    ebp,esp
c001d7b3:	57                   	push   edi
c001d7b4:	56                   	push   esi
c001d7b5:	53                   	push   ebx
c001d7b6:	83 ec 0c             	sub    esp,0xc
c001d7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7ce:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d7e7:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d7f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7fa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d803:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d80a:	0f b6 f0             	movzx  esi,al
c001d80d:	89 d0                	mov    eax,edx
c001d80f:	ba 00 00 00 00       	mov    edx,0x0
c001d814:	89 c7                	mov    edi,eax
c001d816:	83 e7 ff             	and    edi,0xffffffff
c001d819:	89 f9                	mov    ecx,edi
c001d81b:	0f b6 da             	movzx  ebx,dl
c001d81e:	89 c8                	mov    eax,ecx
c001d820:	89 da                	mov    edx,ebx
c001d822:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d825:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d828:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d82c:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001d831:	24 00                	and    al,0x0
c001d833:	08 d0                	or     al,dl
c001d835:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d83c:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d843:	88 c1                	mov    cl,al
c001d845:	fe c1                	inc    cl
c001d847:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001d84a:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001d850:	0f b6 d0             	movzx  edx,al
c001d853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d856:	83 c2 08             	add    edx,0x8
c001d859:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d85d:	0f b6 c9             	movzx  ecx,cl
c001d860:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d866:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d86a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d875:	89 04 24             	mov    DWORD PTR [esp],eax
c001d878:	e8 0b ff ff ff       	call   c001d788 <IOAPIC::read(int)>
c001d87d:	c1 f8 10             	sar    eax,0x10
c001d880:	0f b6 c0             	movzx  eax,al
c001d883:	8d 50 01             	lea    edx,[eax+0x1]
c001d886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d889:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d88f:	b8 00 00 00 00       	mov    eax,0x0
c001d894:	83 c4 0c             	add    esp,0xc
c001d897:	5b                   	pop    ebx
c001d898:	5e                   	pop    esi
c001d899:	5f                   	pop    edi
c001d89a:	5d                   	pop    ebp
c001d89b:	c3                   	ret    

c001d89c <IOAPIC::write(int, int)>:
c001d89c:	55                   	push   ebp
c001d89d:	89 e5                	mov    ebp,esp
c001d89f:	83 ec 10             	sub    esp,0x10
c001d8a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8b1:	0f b6 d0             	movzx  edx,al
c001d8b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8b7:	89 10                	mov    DWORD PTR [eax],edx
c001d8b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8bc:	8d 50 10             	lea    edx,[eax+0x10]
c001d8bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d8c2:	89 02                	mov    DWORD PTR [edx],eax
c001d8c4:	90                   	nop
c001d8c5:	c9                   	leave  
c001d8c6:	c3                   	ret    
c001d8c7:	90                   	nop

c001d8c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d8c8:	55                   	push   ebp
c001d8c9:	89 e5                	mov    ebp,esp
c001d8cb:	53                   	push   ebx
c001d8cc:	83 ec 38             	sub    esp,0x38
c001d8cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8d2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d8d5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d8d8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d8db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d8de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d8e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d8e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d8e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d8ea:	88 d8                	mov    al,bl
c001d8ec:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d8ef:	88 c8                	mov    al,cl
c001d8f1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d8f4:	88 d0                	mov    al,dl
c001d8f6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d8f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d8fd:	83 c0 08             	add    eax,0x8
c001d900:	01 c0                	add    eax,eax
c001d902:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d905:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d909:	83 c0 08             	add    eax,0x8
c001d90c:	01 c0                	add    eax,eax
c001d90e:	40                   	inc    eax
c001d90f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d912:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d915:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d91f:	e8 64 fe ff ff       	call   c001d788 <IOAPIC::read(int)>
c001d924:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d927:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d92e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d931:	c1 e0 18             	shl    eax,0x18
c001d934:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d937:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d93a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d93d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d948:	89 04 24             	mov    DWORD PTR [esp],eax
c001d94b:	e8 4c ff ff ff       	call   c001d89c <IOAPIC::write(int, int)>
c001d950:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d95a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d95d:	e8 26 fe ff ff       	call   c001d788 <IOAPIC::read(int)>
c001d962:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d965:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d96c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d973:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d97a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d97e:	74 09                	je     c001d989 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001d980:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d987:	eb 07                	jmp    c001d990 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001d989:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d990:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d994:	74 09                	je     c001d99f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001d996:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d99d:	eb 07                	jmp    c001d9a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001d99f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d9a6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d9ad:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001d9b1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d9b4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d9b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d9be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9c8:	e8 cf fe ff ff       	call   c001d89c <IOAPIC::write(int, int)>
c001d9cd:	90                   	nop
c001d9ce:	83 c4 38             	add    esp,0x38
c001d9d1:	5b                   	pop    ebx
c001d9d2:	5d                   	pop    ebp
c001d9d3:	c3                   	ret    

c001d9d4 <APICTimer::close(int, int, void*)>:
c001d9d4:	b8 00 00 00 00       	mov    eax,0x0
c001d9d9:	c3                   	ret    
c001d9da:	66 90                	xchg   ax,ax

c001d9dc <apicTimerHandler(regs*, void*)>:
c001d9dc:	83 ec 1c             	sub    esp,0x1c
c001d9df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d9e5:	b8 10 27 00 00       	mov    eax,0x2710
c001d9ea:	ba 00 00 00 00       	mov    edx,0x0
c001d9ef:	f7 f1                	div    ecx
c001d9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9f4:	e8 0d fe fe ff       	call   c000d806 <timerHandler(unsigned int)>
c001d9f9:	90                   	nop
c001d9fa:	83 c4 1c             	add    esp,0x1c
c001d9fd:	c3                   	ret    
c001d9fe:	66 90                	xchg   ax,ax

c001da00 <APICTimer::open(int, int, void*)>:
c001da00:	83 ec 2c             	sub    esp,0x2c
c001da03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da07:	8b 00                	mov    eax,DWORD PTR [eax]
c001da09:	83 c0 24             	add    eax,0x24
c001da0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001da0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001da12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001da16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da1a:	89 14 24             	mov    DWORD PTR [esp],edx
c001da1d:	ff d0                	call   eax
c001da1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da23:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001da27:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da35:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001da3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da3f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001da45:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da49:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001da51:	c7 44 24 08 dc d9 01 c0 	mov    DWORD PTR [esp+0x8],0xc001d9dc
c001da59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001da5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001da60:	e8 eb e3 fe ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001da65:	89 c2                	mov    edx,eax
c001da67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da6b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001da71:	b8 00 00 00 00       	mov    eax,0x0
c001da76:	83 c4 2c             	add    esp,0x2c
c001da79:	c3                   	ret    
c001da7a:	66 90                	xchg   ax,ax

c001da7c <APICTimer::write(int)>:
c001da7c:	83 ec 1c             	sub    esp,0x1c
c001da7f:	c7 04 24 cc 1a 02 c0 	mov    DWORD PTR [esp],0xc0021acc
c001da86:	e8 3a 2d ff ff       	call   c00107c5 <KePanic(char const*)>
c001da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001da93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da99:	90                   	nop
c001da9a:	83 c4 1c             	add    esp,0x1c
c001da9d:	c3                   	ret    
c001da9e:	66 90                	xchg   ax,ax

c001daa0 <APICTimer::APICTimer()>:
c001daa0:	83 ec 1c             	sub    esp,0x1c
c001daa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa7:	c7 44 24 04 dc 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021adc
c001daaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dab2:	e8 89 fc fe ff       	call   c000d740 <Timer::Timer(char const*)>
c001dab7:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001dabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac0:	89 10                	mov    DWORD PTR [eax],edx
c001dac2:	90                   	nop
c001dac3:	83 c4 1c             	add    esp,0x1c
c001dac6:	c3                   	ret    
c001dac7:	90                   	nop

c001dac8 <PIT::write(int)>:
c001dac8:	83 ec 10             	sub    esp,0x10
c001dacb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dacf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dad3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dad9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dadd:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dae2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dae7:	99                   	cdq    
c001dae8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001daec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001daf0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001daf7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dafc:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001db01:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001db06:	ee                   	out    dx,al
c001db07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db0b:	0f b6 c0             	movzx  eax,al
c001db0e:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001db15:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001db19:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001db1e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001db23:	ee                   	out    dx,al
c001db24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db28:	c1 f8 08             	sar    eax,0x8
c001db2b:	0f b6 c0             	movzx  eax,al
c001db2e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001db35:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001db39:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001db3e:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001db43:	ee                   	out    dx,al
c001db44:	90                   	nop
c001db45:	83 c4 10             	add    esp,0x10
c001db48:	c3                   	ret    
c001db49:	8d 76 00             	lea    esi,[esi+0x0]

c001db4c <pitHandler(regs*, void*)>:
c001db4c:	83 ec 1c             	sub    esp,0x1c
c001db4f:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001db55:	b8 10 27 00 00       	mov    eax,0x2710
c001db5a:	99                   	cdq    
c001db5b:	f7 f9                	idiv   ecx
c001db5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001db60:	e8 a1 fc fe ff       	call   c000d806 <timerHandler(unsigned int)>
c001db65:	90                   	nop
c001db66:	83 c4 1c             	add    esp,0x1c
c001db69:	c3                   	ret    
c001db6a:	66 90                	xchg   ax,ax

c001db6c <PIT::open(int, int, void*)>:
c001db6c:	83 ec 2c             	sub    esp,0x2c
c001db6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db73:	8b 00                	mov    eax,DWORD PTR [eax]
c001db75:	83 c0 24             	add    eax,0x24
c001db78:	8b 00                	mov    eax,DWORD PTR [eax]
c001db7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001db7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001db82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db86:	89 14 24             	mov    DWORD PTR [esp],edx
c001db89:	ff d0                	call   eax
c001db8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db8f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001db97:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001db9f:	c7 44 24 08 4c db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001db4c
c001dba7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dbaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbb2:	e8 99 e2 fe ff       	call   c000be50 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dbb7:	89 c2                	mov    edx,eax
c001dbb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbbd:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dbc3:	b8 00 00 00 00       	mov    eax,0x0
c001dbc8:	83 c4 2c             	add    esp,0x2c
c001dbcb:	c3                   	ret    

c001dbcc <PIT::close(int, int, void*)>:
c001dbcc:	83 ec 1c             	sub    esp,0x1c
c001dbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dbe9:	c7 44 24 08 4c db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001db4c
c001dbf1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dbf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbfc:	e8 83 e2 fe ff       	call   c000be84 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dc01:	b8 00 00 00 00       	mov    eax,0x0
c001dc06:	83 c4 1c             	add    esp,0x1c
c001dc09:	c3                   	ret    
c001dc0a:	66 90                	xchg   ax,ax

c001dc0c <PIT::PIT()>:
c001dc0c:	83 ec 1c             	sub    esp,0x1c
c001dc0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc13:	c7 44 24 04 18 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b18
c001dc1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc1e:	e8 1d fb fe ff       	call   c000d740 <Timer::Timer(char const*)>
c001dc23:	ba 40 1b 02 c0       	mov    edx,0xc0021b40
c001dc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2c:	89 10                	mov    DWORD PTR [eax],edx
c001dc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc32:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dc39:	0f b6 d0             	movzx  edx,al
c001dc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc40:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc4b:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dc52:	0f b6 d0             	movzx  edx,al
c001dc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc59:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc62:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dc69:	88 c1                	mov    cl,al
c001dc6b:	fe c1                	inc    cl
c001dc6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dc77:	0f b6 d0             	movzx  edx,al
c001dc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc7e:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001dc83:	80 e1 3f             	and    cl,0x3f
c001dc86:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc8a:	90                   	nop
c001dc8b:	83 c4 1c             	add    esp,0x1c
c001dc8e:	c3                   	ret    
c001dc8f:	90                   	nop

c001dc90 <avxDetect>:
c001dc90:	b8 01 00 00 00       	mov    eax,0x1
c001dc95:	0f a2                	cpuid  
c001dc97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dc9d:	74 15                	je     c001dcb4 <avxDetect.noAVX>
c001dc9f:	b8 01 00 00 00       	mov    eax,0x1
c001dca4:	0f a2                	cpuid  
c001dca6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dcac:	74 06                	je     c001dcb4 <avxDetect.noAVX>
c001dcae:	b8 01 00 00 00       	mov    eax,0x1
c001dcb3:	c3                   	ret    

c001dcb4 <avxDetect.noAVX>:
c001dcb4:	b8 00 00 00 00       	mov    eax,0x0
c001dcb9:	c3                   	ret    

c001dcba <avxSave>:
c001dcba:	53                   	push   ebx
c001dcbb:	52                   	push   edx
c001dcbc:	31 c0                	xor    eax,eax
c001dcbe:	48                   	dec    eax
c001dcbf:	89 c2                	mov    edx,eax
c001dcc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dcc5:	0f ae 23             	xsave  [ebx]
c001dcc8:	5a                   	pop    edx
c001dcc9:	5b                   	pop    ebx
c001dcca:	c3                   	ret    

c001dccb <avxLoad>:
c001dccb:	53                   	push   ebx
c001dccc:	52                   	push   edx
c001dccd:	31 c0                	xor    eax,eax
c001dccf:	48                   	dec    eax
c001dcd0:	89 c2                	mov    edx,eax
c001dcd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dcd6:	0f ae 2b             	xrstor [ebx]
c001dcd9:	5a                   	pop    edx
c001dcda:	5b                   	pop    ebx
c001dcdb:	c3                   	ret    

c001dcdc <avxInit>:
c001dcdc:	e8 67 03 00 00       	call   c001e048 <sseInit>
c001dce1:	50                   	push   eax
c001dce2:	51                   	push   ecx
c001dce3:	0f 20 e0             	mov    eax,cr4
c001dce6:	0d 00 00 04 00       	or     eax,0x40000
c001dceb:	0f 22 e0             	mov    cr4,eax
c001dcee:	31 c9                	xor    ecx,ecx
c001dcf0:	0f 01 d0             	xgetbv 
c001dcf3:	0d 07 00 00 00       	or     eax,0x7
c001dcf8:	0f 01 d1             	xsetbv 
c001dcfb:	59                   	pop    ecx
c001dcfc:	58                   	pop    eax
c001dcfd:	c3                   	ret    

c001dcfe <avxClose>:
c001dcfe:	c3                   	ret    

c001dcff <wouldSheSayYes>:
c001dcff:	c3                   	ret    
c001dd00:	49                   	dec    ecx
c001dd01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dd05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dd09:	75 20                	jne    c001dd2b <isr0+0xb>
c001dd0b:	4e                   	dec    esi
c001dd0c:	79 61                	jns    c001dd6f <isr7+0x3>
c001dd0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dd13:	66 90                	xchg   ax,ax
c001dd15:	66 90                	xchg   ax,ax
c001dd17:	66 90                	xchg   ax,ax
c001dd19:	66 90                	xchg   ax,ax
c001dd1b:	66 90                	xchg   ax,ax
c001dd1d:	66 90                	xchg   ax,ax
c001dd1f:	90                   	nop

c001dd20 <isr0>:
c001dd20:	fa                   	cli    
c001dd21:	68 00 00 00 00       	push   0x0
c001dd26:	68 00 00 00 00       	push   0x0
c001dd2b:	e9 56 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd30 <isr1>:
c001dd30:	fa                   	cli    
c001dd31:	6a 00                	push   0x0
c001dd33:	6a 01                	push   0x1
c001dd35:	e9 4c 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd3a <isr2>:
c001dd3a:	fa                   	cli    
c001dd3b:	6a 00                	push   0x0
c001dd3d:	6a 02                	push   0x2
c001dd3f:	e9 42 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd44 <isr3>:
c001dd44:	fa                   	cli    
c001dd45:	6a 00                	push   0x0
c001dd47:	6a 03                	push   0x3
c001dd49:	e9 38 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd4e <isr4>:
c001dd4e:	fa                   	cli    
c001dd4f:	6a 00                	push   0x0
c001dd51:	6a 04                	push   0x4
c001dd53:	e9 2e 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd58 <isr5>:
c001dd58:	fa                   	cli    
c001dd59:	6a 00                	push   0x0
c001dd5b:	6a 05                	push   0x5
c001dd5d:	e9 24 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd62 <isr6>:
c001dd62:	fa                   	cli    
c001dd63:	6a 00                	push   0x0
c001dd65:	6a 06                	push   0x6
c001dd67:	e9 1a 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd6c <isr7>:
c001dd6c:	fa                   	cli    
c001dd6d:	6a 00                	push   0x0
c001dd6f:	6a 07                	push   0x7
c001dd71:	e9 10 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd76 <isr8>:
c001dd76:	fa                   	cli    
c001dd77:	6a 08                	push   0x8
c001dd79:	e9 08 01 00 00       	jmp    c001de86 <int_common_stub>

c001dd7e <isr9>:
c001dd7e:	fa                   	cli    
c001dd7f:	6a 00                	push   0x0
c001dd81:	6a 09                	push   0x9
c001dd83:	e9 fe 00 00 00       	jmp    c001de86 <int_common_stub>

c001dd88 <isr10>:
c001dd88:	fa                   	cli    
c001dd89:	6a 0a                	push   0xa
c001dd8b:	e9 f6 00 00 00       	jmp    c001de86 <int_common_stub>

c001dd90 <isr11>:
c001dd90:	fa                   	cli    
c001dd91:	6a 0b                	push   0xb
c001dd93:	e9 ee 00 00 00       	jmp    c001de86 <int_common_stub>

c001dd98 <isr12>:
c001dd98:	fa                   	cli    
c001dd99:	6a 0c                	push   0xc
c001dd9b:	e9 e6 00 00 00       	jmp    c001de86 <int_common_stub>

c001dda0 <isr13>:
c001dda0:	fa                   	cli    
c001dda1:	6a 0d                	push   0xd
c001dda3:	53                   	push   ebx
c001dda4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dda8:	81 fb 76 df 01 c0    	cmp    ebx,0xc001df76
c001ddae:	5b                   	pop    ebx
c001ddaf:	0f 84 c3 01 00 00    	je     c001df78 <finishSignal2>
c001ddb5:	e9 cc 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddba <isr14>:
c001ddba:	fa                   	cli    
c001ddbb:	6a 0e                	push   0xe
c001ddbd:	e9 c4 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddc2 <isr15>:
c001ddc2:	fa                   	cli    
c001ddc3:	6a 00                	push   0x0
c001ddc5:	6a 0f                	push   0xf
c001ddc7:	e9 ba 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddcc <isr16>:
c001ddcc:	fa                   	cli    
c001ddcd:	6a 00                	push   0x0
c001ddcf:	6a 10                	push   0x10
c001ddd1:	e9 b0 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddd6 <isr17>:
c001ddd6:	fa                   	cli    
c001ddd7:	6a 00                	push   0x0
c001ddd9:	6a 11                	push   0x11
c001dddb:	e9 a6 00 00 00       	jmp    c001de86 <int_common_stub>

c001dde0 <isr18>:
c001dde0:	fa                   	cli    
c001dde1:	6a 00                	push   0x0
c001dde3:	6a 12                	push   0x12
c001dde5:	e9 9c 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddea <irq3>:
c001ddea:	fa                   	cli    
c001ddeb:	6a 00                	push   0x0
c001dded:	6a 23                	push   0x23
c001ddef:	e9 92 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddf4 <irq4>:
c001ddf4:	fa                   	cli    
c001ddf5:	6a 00                	push   0x0
c001ddf7:	6a 24                	push   0x24
c001ddf9:	e9 88 00 00 00       	jmp    c001de86 <int_common_stub>

c001ddfe <irq5>:
c001ddfe:	fa                   	cli    
c001ddff:	6a 00                	push   0x0
c001de01:	6a 25                	push   0x25
c001de03:	e9 7e 00 00 00       	jmp    c001de86 <int_common_stub>

c001de08 <irq6>:
c001de08:	fa                   	cli    
c001de09:	6a 00                	push   0x0
c001de0b:	6a 26                	push   0x26
c001de0d:	e9 74 00 00 00       	jmp    c001de86 <int_common_stub>

c001de12 <irq7>:
c001de12:	fa                   	cli    
c001de13:	6a 00                	push   0x0
c001de15:	6a 27                	push   0x27
c001de17:	e9 6a 00 00 00       	jmp    c001de86 <int_common_stub>

c001de1c <irq8>:
c001de1c:	fa                   	cli    
c001de1d:	6a 00                	push   0x0
c001de1f:	6a 28                	push   0x28
c001de21:	e9 60 00 00 00       	jmp    c001de86 <int_common_stub>

c001de26 <irq9>:
c001de26:	fa                   	cli    
c001de27:	6a 00                	push   0x0
c001de29:	6a 29                	push   0x29
c001de2b:	e9 56 00 00 00       	jmp    c001de86 <int_common_stub>

c001de30 <irq10>:
c001de30:	fa                   	cli    
c001de31:	6a 00                	push   0x0
c001de33:	6a 2a                	push   0x2a
c001de35:	e9 4c 00 00 00       	jmp    c001de86 <int_common_stub>

c001de3a <irq11>:
c001de3a:	fa                   	cli    
c001de3b:	6a 00                	push   0x0
c001de3d:	6a 2b                	push   0x2b
c001de3f:	e9 42 00 00 00       	jmp    c001de86 <int_common_stub>

c001de44 <irq12>:
c001de44:	fa                   	cli    
c001de45:	6a 00                	push   0x0
c001de47:	6a 2c                	push   0x2c
c001de49:	e9 38 00 00 00       	jmp    c001de86 <int_common_stub>

c001de4e <irq13>:
c001de4e:	fa                   	cli    
c001de4f:	6a 00                	push   0x0
c001de51:	6a 2d                	push   0x2d
c001de53:	e9 2e 00 00 00       	jmp    c001de86 <int_common_stub>

c001de58 <irq14>:
c001de58:	fa                   	cli    
c001de59:	6a 00                	push   0x0
c001de5b:	6a 2e                	push   0x2e
c001de5d:	e9 24 00 00 00       	jmp    c001de86 <int_common_stub>

c001de62 <irq15>:
c001de62:	fa                   	cli    
c001de63:	6a 00                	push   0x0
c001de65:	6a 2f                	push   0x2f
c001de67:	e9 1a 00 00 00       	jmp    c001de86 <int_common_stub>

c001de6c <irq1>:
c001de6c:	fa                   	cli    
c001de6d:	6a 00                	push   0x0
c001de6f:	6a 21                	push   0x21
c001de71:	eb 13                	jmp    c001de86 <int_common_stub>

c001de73 <irq2>:
c001de73:	fa                   	cli    
c001de74:	6a 00                	push   0x0
c001de76:	6a 22                	push   0x22
c001de78:	eb 0c                	jmp    c001de86 <int_common_stub>

c001de7a <isr96>:
c001de7a:	6a 00                	push   0x0
c001de7c:	6a 60                	push   0x60
c001de7e:	fb                   	sti    
c001de7f:	eb 37                	jmp    c001deb8 <syscall_common_stub>

c001de81 <irq0>:
c001de81:	fa                   	cli    
c001de82:	6a 00                	push   0x0
c001de84:	6a 20                	push   0x20

c001de86 <int_common_stub>:
c001de86:	60                   	pusha  
c001de87:	1e                   	push   ds
c001de88:	06                   	push   es
c001de89:	0f a0                	push   fs
c001de8b:	0f a8                	push   gs
c001de8d:	66 b8 10 00          	mov    ax,0x10
c001de91:	66 8e d8             	mov    ds,ax
c001de94:	66 8e c0             	mov    es,ax
c001de97:	66 8e e0             	mov    fs,ax
c001de9a:	66 8e e8             	mov    gs,ax
c001de9d:	54                   	push   esp
c001de9e:	fc                   	cld    
c001de9f:	e8 9c e4 fe ff       	call   c000c340 <int_handler>
c001dea4:	81 c4 04 00 00 00    	add    esp,0x4
c001deaa:	0f a9                	pop    gs
c001deac:	0f a1                	pop    fs
c001deae:	07                   	pop    es
c001deaf:	1f                   	pop    ds
c001deb0:	61                   	popa   
c001deb1:	81 c4 08 00 00 00    	add    esp,0x8
c001deb7:	cf                   	iret   

c001deb8 <syscall_common_stub>:
c001deb8:	60                   	pusha  
c001deb9:	1e                   	push   ds
c001deba:	06                   	push   es
c001debb:	0f a0                	push   fs
c001debd:	0f a8                	push   gs
c001debf:	66 b8 10 00          	mov    ax,0x10
c001dec3:	66 8e d8             	mov    ds,ax
c001dec6:	66 8e c0             	mov    es,ax
c001dec9:	66 8e e0             	mov    fs,ax
c001decc:	66 8e e8             	mov    gs,ax
c001decf:	54                   	push   esp
c001ded0:	fc                   	cld    
c001ded1:	e8 6a e4 fe ff       	call   c000c340 <int_handler>
c001ded6:	81 c4 04 00 00 00    	add    esp,0x4
c001dedc:	0f a9                	pop    gs
c001dede:	0f a1                	pop    fs
c001dee0:	07                   	pop    es
c001dee1:	1f                   	pop    ds
c001dee2:	e8 ba 2e ff ff       	call   c0010da1 <KiCheckSignalZ>
c001dee7:	3d 00 00 00 00       	cmp    eax,0x0
c001deec:	0f 84 c0 00 00 00    	je     c001dfb2 <skipSignals>
c001def2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001def7:	61                   	popa   
c001def8:	53                   	push   ebx
c001def9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001deff:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001df02:	5b                   	pop    ebx
c001df03:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001df08:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001df0b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001df0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df11:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001df14:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001df17:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001df1a:	81 c4 08 00 00 00    	add    esp,0x8
c001df20:	5e                   	pop    esi
c001df21:	5b                   	pop    ebx
c001df22:	59                   	pop    ecx
c001df23:	5a                   	pop    edx
c001df24:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001df27:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001df2a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001df2d:	52                   	push   edx
c001df2e:	51                   	push   ecx
c001df2f:	53                   	push   ebx
c001df30:	56                   	push   esi
c001df31:	81 ec 08 00 00 00    	sub    esp,0x8
c001df37:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001df3a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001df3d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001df40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001df43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df46:	60                   	pusha  
c001df47:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001df4d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001df50:	89 e3                	mov    ebx,esp
c001df52:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001df55:	52                   	push   edx
c001df56:	68 76 df 01 c0       	push   0xc001df76
c001df5b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001df5e:	89 dc                	mov    esp,ebx
c001df60:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001df63:	68 23 00 00 00       	push   0x23
c001df68:	51                   	push   ecx
c001df69:	68 02 02 00 00       	push   0x202
c001df6e:	68 1b 00 00 00       	push   0x1b
c001df73:	ff 36                	push   DWORD PTR [esi]
c001df75:	cf                   	iret   

c001df76 <finishSignal>:
c001df76:	cd 0f                	int    0xf

c001df78 <finishSignal2>:
c001df78:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001df7e:	e8 9b 2e ff ff       	call   c0010e1e <KiFinishSignalZ>
c001df83:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001df89:	68 23 00 00 00       	push   0x23
c001df8e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001df91:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001df94:	68 1b 00 00 00       	push   0x1b
c001df99:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001df9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001dfa2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001dfa5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dfa8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001dfab:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001dfae:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001dfb1:	cf                   	iret   

c001dfb2 <skipSignals>:
c001dfb2:	61                   	popa   
c001dfb3:	81 c4 08 00 00 00    	add    esp,0x8
c001dfb9:	cf                   	iret   
c001dfba:	90                   	nop
c001dfbb:	90                   	nop

c001dfbc <irq16>:
c001dfbc:	fa                   	cli    
c001dfbd:	6a 00                	push   0x0
c001dfbf:	6a 30                	push   0x30
c001dfc1:	e9 c0 fe ff ff       	jmp    c001de86 <int_common_stub>

c001dfc6 <irq17>:
c001dfc6:	fa                   	cli    
c001dfc7:	6a 00                	push   0x0
c001dfc9:	6a 31                	push   0x31
c001dfcb:	e9 b6 fe ff ff       	jmp    c001de86 <int_common_stub>

c001dfd0 <irq18>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 00                	push   0x0
c001dfd3:	6a 32                	push   0x32
c001dfd5:	e9 ac fe ff ff       	jmp    c001de86 <int_common_stub>

c001dfda <irq19>:
c001dfda:	fa                   	cli    
c001dfdb:	6a 00                	push   0x0
c001dfdd:	6a 33                	push   0x33
c001dfdf:	e9 a2 fe ff ff       	jmp    c001de86 <int_common_stub>

c001dfe4 <irq20>:
c001dfe4:	fa                   	cli    
c001dfe5:	6a 00                	push   0x0
c001dfe7:	6a 34                	push   0x34
c001dfe9:	e9 98 fe ff ff       	jmp    c001de86 <int_common_stub>

c001dfee <irq21>:
c001dfee:	fa                   	cli    
c001dfef:	6a 00                	push   0x0
c001dff1:	6a 35                	push   0x35
c001dff3:	e9 8e fe ff ff       	jmp    c001de86 <int_common_stub>

c001dff8 <irq22>:
c001dff8:	fa                   	cli    
c001dff9:	6a 00                	push   0x0
c001dffb:	6a 36                	push   0x36
c001dffd:	e9 84 fe ff ff       	jmp    c001de86 <int_common_stub>

c001e002 <irq23>:
c001e002:	fa                   	cli    
c001e003:	6a 00                	push   0x0
c001e005:	6a 37                	push   0x37
c001e007:	e9 7a fe ff ff       	jmp    c001de86 <int_common_stub>
c001e00c:	66 90                	xchg   ax,ax
c001e00e:	66 90                	xchg   ax,ax

c001e010 <i386GetRDRAND>:
c001e010:	b9 64 00 00 00       	mov    ecx,0x64

c001e015 <retry>:
c001e015:	0f c7 f0             	rdrand eax
c001e018:	72 05                	jb     c001e01f <retry.done>
c001e01a:	e2 f9                	loop   c001e015 <retry>

c001e01c <retry.fail>:
c001e01c:	31 c0                	xor    eax,eax
c001e01e:	c3                   	ret    

c001e01f <retry.done>:
c001e01f:	c3                   	ret    

c001e020 <absolutelyNoChanceInHell>:
c001e020:	b8 01 00 00 00       	mov    eax,0x1
c001e025:	0f a2                	cpuid  
c001e027:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e02d:	74 06                	je     c001e035 <sseDetect.noSSE>
c001e02f:	b8 01 00 00 00       	mov    eax,0x1
c001e034:	c3                   	ret    

c001e035 <sseDetect.noSSE>:
c001e035:	31 c0                	xor    eax,eax
c001e037:	c3                   	ret    

c001e038 <sseSave>:
c001e038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e03c:	0f ae 00             	fxsave [eax]
c001e03f:	c3                   	ret    

c001e040 <sseLoad>:
c001e040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e044:	0f ae 08             	fxrstor [eax]
c001e047:	c3                   	ret    

c001e048 <sseInit>:
c001e048:	e8 42 00 00 00       	call   c001e08f <x87Init>
c001e04d:	0f 20 e0             	mov    eax,cr4
c001e050:	66 0d 00 06          	or     ax,0x600
c001e054:	0f 22 e0             	mov    cr4,eax
c001e057:	c3                   	ret    

c001e058 <sseClose>:
c001e058:	c3                   	ret    
c001e059:	66 90                	xchg   ax,ax
c001e05b:	66 90                	xchg   ax,ax
c001e05d:	66 90                	xchg   ax,ax
c001e05f:	90                   	nop

c001e060 <value_37F>:
c001e060:	7f 03                	jg     c001e065 <value_37A+0x1>

c001e062 <value_37E>:
c001e062:	7e 03                	jle    c001e067 <x87Detect+0x1>

c001e064 <value_37A>:
c001e064:	7a 03                	jp     c001e069 <x87Detect+0x3>

c001e066 <x87Detect>:
c001e066:	b8 01 00 00 00       	mov    eax,0x1
c001e06b:	0f a2                	cpuid  
c001e06d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e073:	74 06                	je     c001e07b <x87Detect.nox87>
c001e075:	b8 01 00 00 00       	mov    eax,0x1
c001e07a:	c3                   	ret    

c001e07b <x87Detect.nox87>:
c001e07b:	b8 00 00 00 00       	mov    eax,0x0
c001e080:	c3                   	ret    

c001e081 <x87Save>:
c001e081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e085:	dd 30                	fnsave [eax]
c001e087:	c3                   	ret    

c001e088 <x87Load>:
c001e088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e08c:	dd 20                	frstor [eax]
c001e08e:	c3                   	ret    

c001e08f <x87Init>:
c001e08f:	0f 20 c0             	mov    eax,cr0
c001e092:	66 25 fb ff          	and    ax,0xfffb
c001e096:	66 0d 22 00          	or     ax,0x22
c001e09a:	0f 22 c0             	mov    cr0,eax
c001e09d:	db e3                	fninit 
c001e09f:	0f 06                	clts   
c001e0a1:	d9 2d 64 e0 01 c0    	fldcw  WORD PTR ds:0xc001e064
c001e0a7:	c3                   	ret    

c001e0a8 <x87Close>:
c001e0a8:	c3                   	ret    
c001e0a9:	66 90                	xchg   ax,ax
c001e0ab:	90                   	nop

c001e0ac <__do_global_ctors_aux>:
c001e0ac:	a1 c0 ef 01 c0       	mov    eax,ds:0xc001efc0
c001e0b1:	83 f8 ff             	cmp    eax,0xffffffff
c001e0b4:	74 1a                	je     c001e0d0 <__do_global_ctors_aux+0x24>
c001e0b6:	55                   	push   ebp
c001e0b7:	89 e5                	mov    ebp,esp
c001e0b9:	53                   	push   ebx
c001e0ba:	52                   	push   edx
c001e0bb:	bb c0 ef 01 c0       	mov    ebx,0xc001efc0
c001e0c0:	ff d0                	call   eax
c001e0c2:	83 eb 04             	sub    ebx,0x4
c001e0c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e0c7:	83 f8 ff             	cmp    eax,0xffffffff
c001e0ca:	75 f4                	jne    c001e0c0 <__do_global_ctors_aux+0x14>
c001e0cc:	58                   	pop    eax
c001e0cd:	5b                   	pop    ebx
c001e0ce:	5d                   	pop    ebp
c001e0cf:	c3                   	ret    
c001e0d0:	c3                   	ret    
c001e0d1:	66 90                	xchg   ax,ax
c001e0d3:	90                   	nop

c001e0d4 <__divdi3>:
c001e0d4:	55                   	push   ebp
c001e0d5:	57                   	push   edi
c001e0d6:	56                   	push   esi
c001e0d7:	53                   	push   ebx
c001e0d8:	83 ec 1c             	sub    esp,0x1c
c001e0db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e0df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e0e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e0ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0f2:	85 db                	test   ebx,ebx
c001e0f4:	0f 88 8e 00 00 00    	js     c001e188 <__divdi3+0xb4>
c001e0fa:	89 dd                	mov    ebp,ebx
c001e0fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e104:	89 d3                	mov    ebx,edx
c001e106:	85 d2                	test   edx,edx
c001e108:	79 0d                	jns    c001e117 <__divdi3+0x43>
c001e10a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e10e:	f7 d8                	neg    eax
c001e110:	83 d2 00             	adc    edx,0x0
c001e113:	f7 da                	neg    edx
c001e115:	89 d3                	mov    ebx,edx
c001e117:	89 c7                	mov    edi,eax
c001e119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e11c:	85 db                	test   ebx,ebx
c001e11e:	75 48                	jne    c001e168 <__divdi3+0x94>
c001e120:	39 ef                	cmp    edi,ebp
c001e122:	76 24                	jbe    c001e148 <__divdi3+0x74>
c001e124:	89 ea                	mov    edx,ebp
c001e126:	f7 f7                	div    edi
c001e128:	89 c1                	mov    ecx,eax
c001e12a:	31 f6                	xor    esi,esi
c001e12c:	89 c8                	mov    eax,ecx
c001e12e:	89 f2                	mov    edx,esi
c001e130:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e134:	85 c9                	test   ecx,ecx
c001e136:	74 07                	je     c001e13f <__divdi3+0x6b>
c001e138:	f7 d8                	neg    eax
c001e13a:	83 d2 00             	adc    edx,0x0
c001e13d:	f7 da                	neg    edx
c001e13f:	83 c4 1c             	add    esp,0x1c
c001e142:	5b                   	pop    ebx
c001e143:	5e                   	pop    esi
c001e144:	5f                   	pop    edi
c001e145:	5d                   	pop    ebp
c001e146:	c3                   	ret    
c001e147:	90                   	nop
c001e148:	85 ff                	test   edi,edi
c001e14a:	75 0b                	jne    c001e157 <__divdi3+0x83>
c001e14c:	b8 01 00 00 00       	mov    eax,0x1
c001e151:	31 d2                	xor    edx,edx
c001e153:	f7 f3                	div    ebx
c001e155:	89 c7                	mov    edi,eax
c001e157:	31 d2                	xor    edx,edx
c001e159:	89 e8                	mov    eax,ebp
c001e15b:	f7 f7                	div    edi
c001e15d:	89 c6                	mov    esi,eax
c001e15f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e162:	f7 f7                	div    edi
c001e164:	89 c1                	mov    ecx,eax
c001e166:	eb c4                	jmp    c001e12c <__divdi3+0x58>
c001e168:	39 eb                	cmp    ebx,ebp
c001e16a:	77 3c                	ja     c001e1a8 <__divdi3+0xd4>
c001e16c:	0f bd f3             	bsr    esi,ebx
c001e16f:	83 f6 1f             	xor    esi,0x1f
c001e172:	75 40                	jne    c001e1b4 <__divdi3+0xe0>
c001e174:	39 eb                	cmp    ebx,ebp
c001e176:	72 09                	jb     c001e181 <__divdi3+0xad>
c001e178:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e17b:	0f 87 97 00 00 00    	ja     c001e218 <__divdi3+0x144>
c001e181:	b9 01 00 00 00       	mov    ecx,0x1
c001e186:	eb a4                	jmp    c001e12c <__divdi3+0x58>
c001e188:	f7 d9                	neg    ecx
c001e18a:	83 d3 00             	adc    ebx,0x0
c001e18d:	f7 db                	neg    ebx
c001e18f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e192:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e196:	89 dd                	mov    ebp,ebx
c001e198:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e1a0:	e9 5f ff ff ff       	jmp    c001e104 <__divdi3+0x30>
c001e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e1a8:	31 f6                	xor    esi,esi
c001e1aa:	31 c9                	xor    ecx,ecx
c001e1ac:	e9 7b ff ff ff       	jmp    c001e12c <__divdi3+0x58>
c001e1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1b4:	b8 20 00 00 00       	mov    eax,0x20
c001e1b9:	29 f0                	sub    eax,esi
c001e1bb:	89 f1                	mov    ecx,esi
c001e1bd:	d3 e3                	shl    ebx,cl
c001e1bf:	89 fa                	mov    edx,edi
c001e1c1:	88 c1                	mov    cl,al
c001e1c3:	d3 ea                	shr    edx,cl
c001e1c5:	09 da                	or     edx,ebx
c001e1c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1cb:	89 f1                	mov    ecx,esi
c001e1cd:	d3 e7                	shl    edi,cl
c001e1cf:	89 eb                	mov    ebx,ebp
c001e1d1:	88 c1                	mov    cl,al
c001e1d3:	d3 eb                	shr    ebx,cl
c001e1d5:	89 f1                	mov    ecx,esi
c001e1d7:	d3 e5                	shl    ebp,cl
c001e1d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e1dc:	88 c1                	mov    cl,al
c001e1de:	d3 ea                	shr    edx,cl
c001e1e0:	09 d5                	or     ebp,edx
c001e1e2:	89 e8                	mov    eax,ebp
c001e1e4:	89 da                	mov    edx,ebx
c001e1e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e1ea:	89 d3                	mov    ebx,edx
c001e1ec:	89 c5                	mov    ebp,eax
c001e1ee:	f7 e7                	mul    edi
c001e1f0:	39 d3                	cmp    ebx,edx
c001e1f2:	72 18                	jb     c001e20c <__divdi3+0x138>
c001e1f4:	74 0a                	je     c001e200 <__divdi3+0x12c>
c001e1f6:	89 e9                	mov    ecx,ebp
c001e1f8:	31 f6                	xor    esi,esi
c001e1fa:	e9 2d ff ff ff       	jmp    c001e12c <__divdi3+0x58>
c001e1ff:	90                   	nop
c001e200:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e203:	89 f1                	mov    ecx,esi
c001e205:	d3 e7                	shl    edi,cl
c001e207:	39 c7                	cmp    edi,eax
c001e209:	73 eb                	jae    c001e1f6 <__divdi3+0x122>
c001e20b:	90                   	nop
c001e20c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e20f:	31 f6                	xor    esi,esi
c001e211:	e9 16 ff ff ff       	jmp    c001e12c <__divdi3+0x58>
c001e216:	66 90                	xchg   ax,ax
c001e218:	31 c9                	xor    ecx,ecx
c001e21a:	e9 0d ff ff ff       	jmp    c001e12c <__divdi3+0x58>
c001e21f:	90                   	nop

c001e220 <__moddi3>:
c001e220:	55                   	push   ebp
c001e221:	57                   	push   edi
c001e222:	56                   	push   esi
c001e223:	53                   	push   ebx
c001e224:	83 ec 2c             	sub    esp,0x2c
c001e227:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e22b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e22f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e233:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e237:	85 db                	test   ebx,ebx
c001e239:	0f 88 85 00 00 00    	js     c001e2c4 <__moddi3+0xa4>
c001e23f:	89 de                	mov    esi,ebx
c001e241:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e249:	89 d7                	mov    edi,edx
c001e24b:	85 d2                	test   edx,edx
c001e24d:	79 09                	jns    c001e258 <__moddi3+0x38>
c001e24f:	f7 d8                	neg    eax
c001e251:	83 d2 00             	adc    edx,0x0
c001e254:	f7 da                	neg    edx
c001e256:	89 d7                	mov    edi,edx
c001e258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e25c:	89 cd                	mov    ebp,ecx
c001e25e:	85 ff                	test   edi,edi
c001e260:	75 52                	jne    c001e2b4 <__moddi3+0x94>
c001e262:	89 c3                	mov    ebx,eax
c001e264:	39 f0                	cmp    eax,esi
c001e266:	76 24                	jbe    c001e28c <__moddi3+0x6c>
c001e268:	89 c8                	mov    eax,ecx
c001e26a:	89 f2                	mov    edx,esi
c001e26c:	f7 f3                	div    ebx
c001e26e:	89 d6                	mov    esi,edx
c001e270:	89 f0                	mov    eax,esi
c001e272:	31 d2                	xor    edx,edx
c001e274:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e278:	85 c9                	test   ecx,ecx
c001e27a:	74 07                	je     c001e283 <__moddi3+0x63>
c001e27c:	f7 d8                	neg    eax
c001e27e:	83 d2 00             	adc    edx,0x0
c001e281:	f7 da                	neg    edx
c001e283:	83 c4 2c             	add    esp,0x2c
c001e286:	5b                   	pop    ebx
c001e287:	5e                   	pop    esi
c001e288:	5f                   	pop    edi
c001e289:	5d                   	pop    ebp
c001e28a:	c3                   	ret    
c001e28b:	90                   	nop
c001e28c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e290:	85 db                	test   ebx,ebx
c001e292:	75 0d                	jne    c001e2a1 <__moddi3+0x81>
c001e294:	b8 01 00 00 00       	mov    eax,0x1
c001e299:	31 d2                	xor    edx,edx
c001e29b:	f7 f7                	div    edi
c001e29d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2a1:	89 f0                	mov    eax,esi
c001e2a3:	31 d2                	xor    edx,edx
c001e2a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e2a9:	f7 f7                	div    edi
c001e2ab:	89 e8                	mov    eax,ebp
c001e2ad:	f7 f7                	div    edi
c001e2af:	89 d6                	mov    esi,edx
c001e2b1:	eb bd                	jmp    c001e270 <__moddi3+0x50>
c001e2b3:	90                   	nop
c001e2b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e2b8:	39 f7                	cmp    edi,esi
c001e2ba:	76 20                	jbe    c001e2dc <__moddi3+0xbc>
c001e2bc:	89 c8                	mov    eax,ecx
c001e2be:	89 f2                	mov    edx,esi
c001e2c0:	eb b2                	jmp    c001e274 <__moddi3+0x54>
c001e2c2:	66 90                	xchg   ax,ax
c001e2c4:	f7 d9                	neg    ecx
c001e2c6:	83 d3 00             	adc    ebx,0x0
c001e2c9:	f7 db                	neg    ebx
c001e2cb:	89 de                	mov    esi,ebx
c001e2cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e2d5:	e9 6f ff ff ff       	jmp    c001e249 <__moddi3+0x29>
c001e2da:	66 90                	xchg   ax,ax
c001e2dc:	0f bd c7             	bsr    eax,edi
c001e2df:	83 f0 1f             	xor    eax,0x1f
c001e2e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e2e6:	75 24                	jne    c001e30c <__moddi3+0xec>
c001e2e8:	39 f7                	cmp    edi,esi
c001e2ea:	72 06                	jb     c001e2f2 <__moddi3+0xd2>
c001e2ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e2f0:	77 0c                	ja     c001e2fe <__moddi3+0xde>
c001e2f2:	89 e9                	mov    ecx,ebp
c001e2f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e2f8:	19 fe                	sbb    esi,edi
c001e2fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e2fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e302:	89 f2                	mov    edx,esi
c001e304:	e9 6b ff ff ff       	jmp    c001e274 <__moddi3+0x54>
c001e309:	8d 76 00             	lea    esi,[esi+0x0]
c001e30c:	b8 20 00 00 00       	mov    eax,0x20
c001e311:	89 c2                	mov    edx,eax
c001e313:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e317:	29 da                	sub    edx,ebx
c001e319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e31d:	88 d9                	mov    cl,bl
c001e31f:	d3 e7                	shl    edi,cl
c001e321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e325:	88 d1                	mov    cl,dl
c001e327:	d3 e8                	shr    eax,cl
c001e329:	09 c7                	or     edi,eax
c001e32b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e32f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e333:	89 d8                	mov    eax,ebx
c001e335:	88 d9                	mov    cl,bl
c001e337:	d3 e7                	shl    edi,cl
c001e339:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e33d:	89 f3                	mov    ebx,esi
c001e33f:	88 d1                	mov    cl,dl
c001e341:	d3 eb                	shr    ebx,cl
c001e343:	89 c7                	mov    edi,eax
c001e345:	88 c1                	mov    cl,al
c001e347:	d3 e6                	shl    esi,cl
c001e349:	89 e8                	mov    eax,ebp
c001e34b:	88 d1                	mov    cl,dl
c001e34d:	d3 e8                	shr    eax,cl
c001e34f:	09 f0                	or     eax,esi
c001e351:	89 f9                	mov    ecx,edi
c001e353:	d3 e5                	shl    ebp,cl
c001e355:	89 da                	mov    edx,ebx
c001e357:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e35b:	89 d3                	mov    ebx,edx
c001e35d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e361:	89 c6                	mov    esi,eax
c001e363:	89 d1                	mov    ecx,edx
c001e365:	39 d3                	cmp    ebx,edx
c001e367:	72 27                	jb     c001e390 <__moddi3+0x170>
c001e369:	74 21                	je     c001e38c <__moddi3+0x16c>
c001e36b:	29 f5                	sub    ebp,esi
c001e36d:	19 cb                	sbb    ebx,ecx
c001e36f:	89 de                	mov    esi,ebx
c001e371:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e375:	d3 e6                	shl    esi,cl
c001e377:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e37b:	89 f9                	mov    ecx,edi
c001e37d:	d3 ed                	shr    ebp,cl
c001e37f:	09 ee                	or     esi,ebp
c001e381:	89 f0                	mov    eax,esi
c001e383:	d3 eb                	shr    ebx,cl
c001e385:	89 da                	mov    edx,ebx
c001e387:	e9 e8 fe ff ff       	jmp    c001e274 <__moddi3+0x54>
c001e38c:	39 c5                	cmp    ebp,eax
c001e38e:	73 db                	jae    c001e36b <__moddi3+0x14b>
c001e390:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e394:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e398:	89 d1                	mov    ecx,edx
c001e39a:	89 c6                	mov    esi,eax
c001e39c:	eb cd                	jmp    c001e36b <__moddi3+0x14b>
c001e39e:	66 90                	xchg   ax,ax

c001e3a0 <__udivdi3>:
c001e3a0:	55                   	push   ebp
c001e3a1:	57                   	push   edi
c001e3a2:	56                   	push   esi
c001e3a3:	53                   	push   ebx
c001e3a4:	83 ec 1c             	sub    esp,0x1c
c001e3a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e3ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e3af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e3b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3b7:	85 d2                	test   edx,edx
c001e3b9:	75 41                	jne    c001e3fc <__udivdi3+0x5c>
c001e3bb:	39 f7                	cmp    edi,esi
c001e3bd:	76 15                	jbe    c001e3d4 <__udivdi3+0x34>
c001e3bf:	89 e8                	mov    eax,ebp
c001e3c1:	89 f2                	mov    edx,esi
c001e3c3:	f7 f7                	div    edi
c001e3c5:	31 db                	xor    ebx,ebx
c001e3c7:	89 da                	mov    edx,ebx
c001e3c9:	83 c4 1c             	add    esp,0x1c
c001e3cc:	5b                   	pop    ebx
c001e3cd:	5e                   	pop    esi
c001e3ce:	5f                   	pop    edi
c001e3cf:	5d                   	pop    ebp
c001e3d0:	c3                   	ret    
c001e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d4:	89 f9                	mov    ecx,edi
c001e3d6:	85 ff                	test   edi,edi
c001e3d8:	75 0b                	jne    c001e3e5 <__udivdi3+0x45>
c001e3da:	b8 01 00 00 00       	mov    eax,0x1
c001e3df:	31 d2                	xor    edx,edx
c001e3e1:	f7 f7                	div    edi
c001e3e3:	89 c1                	mov    ecx,eax
c001e3e5:	31 d2                	xor    edx,edx
c001e3e7:	89 f0                	mov    eax,esi
c001e3e9:	f7 f1                	div    ecx
c001e3eb:	89 c3                	mov    ebx,eax
c001e3ed:	89 e8                	mov    eax,ebp
c001e3ef:	f7 f1                	div    ecx
c001e3f1:	89 da                	mov    edx,ebx
c001e3f3:	83 c4 1c             	add    esp,0x1c
c001e3f6:	5b                   	pop    ebx
c001e3f7:	5e                   	pop    esi
c001e3f8:	5f                   	pop    edi
c001e3f9:	5d                   	pop    ebp
c001e3fa:	c3                   	ret    
c001e3fb:	90                   	nop
c001e3fc:	39 f2                	cmp    edx,esi
c001e3fe:	77 1c                	ja     c001e41c <__udivdi3+0x7c>
c001e400:	0f bd da             	bsr    ebx,edx
c001e403:	83 f3 1f             	xor    ebx,0x1f
c001e406:	75 24                	jne    c001e42c <__udivdi3+0x8c>
c001e408:	39 f2                	cmp    edx,esi
c001e40a:	72 08                	jb     c001e414 <__udivdi3+0x74>
c001e40c:	39 ef                	cmp    edi,ebp
c001e40e:	0f 87 84 00 00 00    	ja     c001e498 <__udivdi3+0xf8>
c001e414:	b8 01 00 00 00       	mov    eax,0x1
c001e419:	eb ac                	jmp    c001e3c7 <__udivdi3+0x27>
c001e41b:	90                   	nop
c001e41c:	31 db                	xor    ebx,ebx
c001e41e:	31 c0                	xor    eax,eax
c001e420:	89 da                	mov    edx,ebx
c001e422:	83 c4 1c             	add    esp,0x1c
c001e425:	5b                   	pop    ebx
c001e426:	5e                   	pop    esi
c001e427:	5f                   	pop    edi
c001e428:	5d                   	pop    ebp
c001e429:	c3                   	ret    
c001e42a:	66 90                	xchg   ax,ax
c001e42c:	b8 20 00 00 00       	mov    eax,0x20
c001e431:	29 d8                	sub    eax,ebx
c001e433:	88 d9                	mov    cl,bl
c001e435:	d3 e2                	shl    edx,cl
c001e437:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e43b:	89 fa                	mov    edx,edi
c001e43d:	88 c1                	mov    cl,al
c001e43f:	d3 ea                	shr    edx,cl
c001e441:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e445:	09 d1                	or     ecx,edx
c001e447:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e44b:	88 d9                	mov    cl,bl
c001e44d:	d3 e7                	shl    edi,cl
c001e44f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e453:	89 f7                	mov    edi,esi
c001e455:	88 c1                	mov    cl,al
c001e457:	d3 ef                	shr    edi,cl
c001e459:	88 d9                	mov    cl,bl
c001e45b:	d3 e6                	shl    esi,cl
c001e45d:	89 ea                	mov    edx,ebp
c001e45f:	88 c1                	mov    cl,al
c001e461:	d3 ea                	shr    edx,cl
c001e463:	09 d6                	or     esi,edx
c001e465:	89 f0                	mov    eax,esi
c001e467:	89 fa                	mov    edx,edi
c001e469:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e46d:	89 d7                	mov    edi,edx
c001e46f:	89 c6                	mov    esi,eax
c001e471:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e475:	39 d7                	cmp    edi,edx
c001e477:	72 13                	jb     c001e48c <__udivdi3+0xec>
c001e479:	74 09                	je     c001e484 <__udivdi3+0xe4>
c001e47b:	89 f0                	mov    eax,esi
c001e47d:	31 db                	xor    ebx,ebx
c001e47f:	e9 43 ff ff ff       	jmp    c001e3c7 <__udivdi3+0x27>
c001e484:	88 d9                	mov    cl,bl
c001e486:	d3 e5                	shl    ebp,cl
c001e488:	39 c5                	cmp    ebp,eax
c001e48a:	73 ef                	jae    c001e47b <__udivdi3+0xdb>
c001e48c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e48f:	31 db                	xor    ebx,ebx
c001e491:	e9 31 ff ff ff       	jmp    c001e3c7 <__udivdi3+0x27>
c001e496:	66 90                	xchg   ax,ax
c001e498:	31 c0                	xor    eax,eax
c001e49a:	e9 28 ff ff ff       	jmp    c001e3c7 <__udivdi3+0x27>
c001e49f:	90                   	nop

c001e4a0 <__umoddi3>:
c001e4a0:	55                   	push   ebp
c001e4a1:	57                   	push   edi
c001e4a2:	56                   	push   esi
c001e4a3:	53                   	push   ebx
c001e4a4:	83 ec 1c             	sub    esp,0x1c
c001e4a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e4ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e4af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e4b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4b7:	89 da                	mov    edx,ebx
c001e4b9:	85 c0                	test   eax,eax
c001e4bb:	75 37                	jne    c001e4f4 <__umoddi3+0x54>
c001e4bd:	39 df                	cmp    edi,ebx
c001e4bf:	76 13                	jbe    c001e4d4 <__umoddi3+0x34>
c001e4c1:	89 f0                	mov    eax,esi
c001e4c3:	f7 f7                	div    edi
c001e4c5:	89 d0                	mov    eax,edx
c001e4c7:	31 d2                	xor    edx,edx
c001e4c9:	83 c4 1c             	add    esp,0x1c
c001e4cc:	5b                   	pop    ebx
c001e4cd:	5e                   	pop    esi
c001e4ce:	5f                   	pop    edi
c001e4cf:	5d                   	pop    ebp
c001e4d0:	c3                   	ret    
c001e4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4d4:	89 fd                	mov    ebp,edi
c001e4d6:	85 ff                	test   edi,edi
c001e4d8:	75 0b                	jne    c001e4e5 <__umoddi3+0x45>
c001e4da:	b8 01 00 00 00       	mov    eax,0x1
c001e4df:	31 d2                	xor    edx,edx
c001e4e1:	f7 f7                	div    edi
c001e4e3:	89 c5                	mov    ebp,eax
c001e4e5:	89 d8                	mov    eax,ebx
c001e4e7:	31 d2                	xor    edx,edx
c001e4e9:	f7 f5                	div    ebp
c001e4eb:	89 f0                	mov    eax,esi
c001e4ed:	f7 f5                	div    ebp
c001e4ef:	89 d0                	mov    eax,edx
c001e4f1:	eb d4                	jmp    c001e4c7 <__umoddi3+0x27>
c001e4f3:	90                   	nop
c001e4f4:	89 f1                	mov    ecx,esi
c001e4f6:	39 d8                	cmp    eax,ebx
c001e4f8:	76 0a                	jbe    c001e504 <__umoddi3+0x64>
c001e4fa:	89 f0                	mov    eax,esi
c001e4fc:	83 c4 1c             	add    esp,0x1c
c001e4ff:	5b                   	pop    ebx
c001e500:	5e                   	pop    esi
c001e501:	5f                   	pop    edi
c001e502:	5d                   	pop    ebp
c001e503:	c3                   	ret    
c001e504:	0f bd e8             	bsr    ebp,eax
c001e507:	83 f5 1f             	xor    ebp,0x1f
c001e50a:	75 1c                	jne    c001e528 <__umoddi3+0x88>
c001e50c:	39 d8                	cmp    eax,ebx
c001e50e:	72 04                	jb     c001e514 <__umoddi3+0x74>
c001e510:	39 f7                	cmp    edi,esi
c001e512:	77 08                	ja     c001e51c <__umoddi3+0x7c>
c001e514:	89 da                	mov    edx,ebx
c001e516:	29 fe                	sub    esi,edi
c001e518:	19 c2                	sbb    edx,eax
c001e51a:	89 f1                	mov    ecx,esi
c001e51c:	89 c8                	mov    eax,ecx
c001e51e:	83 c4 1c             	add    esp,0x1c
c001e521:	5b                   	pop    ebx
c001e522:	5e                   	pop    esi
c001e523:	5f                   	pop    edi
c001e524:	5d                   	pop    ebp
c001e525:	c3                   	ret    
c001e526:	66 90                	xchg   ax,ax
c001e528:	ba 20 00 00 00       	mov    edx,0x20
c001e52d:	29 ea                	sub    edx,ebp
c001e52f:	89 e9                	mov    ecx,ebp
c001e531:	d3 e0                	shl    eax,cl
c001e533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e537:	89 f8                	mov    eax,edi
c001e539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e53d:	88 d1                	mov    cl,dl
c001e53f:	d3 e8                	shr    eax,cl
c001e541:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e545:	09 c1                	or     ecx,eax
c001e547:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e54b:	89 e9                	mov    ecx,ebp
c001e54d:	d3 e7                	shl    edi,cl
c001e54f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e553:	89 d8                	mov    eax,ebx
c001e555:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e559:	88 d1                	mov    cl,dl
c001e55b:	d3 e8                	shr    eax,cl
c001e55d:	89 c7                	mov    edi,eax
c001e55f:	89 e9                	mov    ecx,ebp
c001e561:	d3 e3                	shl    ebx,cl
c001e563:	89 f0                	mov    eax,esi
c001e565:	88 d1                	mov    cl,dl
c001e567:	d3 e8                	shr    eax,cl
c001e569:	09 d8                	or     eax,ebx
c001e56b:	89 e9                	mov    ecx,ebp
c001e56d:	d3 e6                	shl    esi,cl
c001e56f:	89 f3                	mov    ebx,esi
c001e571:	89 fa                	mov    edx,edi
c001e573:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e577:	89 d1                	mov    ecx,edx
c001e579:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e57d:	89 c6                	mov    esi,eax
c001e57f:	89 d7                	mov    edi,edx
c001e581:	39 d1                	cmp    ecx,edx
c001e583:	72 27                	jb     c001e5ac <__umoddi3+0x10c>
c001e585:	74 21                	je     c001e5a8 <__umoddi3+0x108>
c001e587:	89 ca                	mov    edx,ecx
c001e589:	29 f3                	sub    ebx,esi
c001e58b:	19 fa                	sbb    edx,edi
c001e58d:	89 d0                	mov    eax,edx
c001e58f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e593:	d3 e0                	shl    eax,cl
c001e595:	89 e9                	mov    ecx,ebp
c001e597:	d3 eb                	shr    ebx,cl
c001e599:	09 d8                	or     eax,ebx
c001e59b:	d3 ea                	shr    edx,cl
c001e59d:	83 c4 1c             	add    esp,0x1c
c001e5a0:	5b                   	pop    ebx
c001e5a1:	5e                   	pop    esi
c001e5a2:	5f                   	pop    edi
c001e5a3:	5d                   	pop    ebp
c001e5a4:	c3                   	ret    
c001e5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a8:	39 c3                	cmp    ebx,eax
c001e5aa:	73 db                	jae    c001e587 <__umoddi3+0xe7>
c001e5ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e5b4:	89 d7                	mov    edi,edx
c001e5b6:	89 c6                	mov    esi,eax
c001e5b8:	eb cd                	jmp    c001e587 <__umoddi3+0xe7>

Disassembly of section .init:

c001e5ba <_init>:
c001e5ba:	55                   	push   ebp
c001e5bb:	89 e5                	mov    ebp,esp
c001e5bd:	e8 32 1b fe ff       	call   c00000f4 <frame_dummy>
c001e5c2:	e8 e5 fa ff ff       	call   c001e0ac <__do_global_ctors_aux>
c001e5c7:	5d                   	pop    ebp
c001e5c8:	c3                   	ret    

Disassembly of section .fini:

c001e5c9 <_fini>:
c001e5c9:	55                   	push   ebp
c001e5ca:	89 e5                	mov    ebp,esp
c001e5cc:	e8 b3 1a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e5d1:	5d                   	pop    ebp
c001e5d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e5d4 <Computer::~Computer()>:
c001e5d4:	83 ec 1c             	sub    esp,0x1c
c001e5d7:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c001e5dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5e0:	89 10                	mov    DWORD PTR [eax],edx
c001e5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5e9:	e8 b8 d7 fe ff       	call   c000bda6 <Device::~Device()>
c001e5ee:	90                   	nop
c001e5ef:	83 c4 1c             	add    esp,0x1c
c001e5f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e5f4 <Computer::~Computer()>:
c001e5f4:	83 ec 1c             	sub    esp,0x1c
c001e5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5fe:	e8 d1 ff ff ff       	call   c001e5d4 <Computer::~Computer()>
c001e603:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001e60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e60f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e612:	e8 45 c3 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001e617:	83 c4 1c             	add    esp,0x1c
c001e61a:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e61b <idleCommon()>:
c001e61b:	83 ec 0c             	sub    esp,0xc
c001e61e:	fa                   	cli    
c001e61f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e625:	e8 b6 6a ff ff       	call   c00150e0 <schedule()>
c001e62a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e62f:	48                   	dec    eax
c001e630:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e635:	75 01                	jne    c001e638 <idleCommon()+0x1d>
c001e637:	fb                   	sti    
c001e638:	83 c4 0c             	add    esp,0xc
c001e63b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e63c <LinkedList<UnixFile>::~LinkedList()>:
c001e63c:	90                   	nop
c001e63d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e63e <LinkedList<UnixFile>::LinkedList()>:
c001e63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e642:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e64c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e657:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e662:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e677:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e67e:	90                   	nop
c001e67f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e680 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e680:	83 ec 1c             	sub    esp,0x1c
c001e683:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e688:	75 0c                	jne    c001e696 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e68a:	c7 04 24 68 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa68
c001e691:	e8 2f 21 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e69c:	85 c0                	test   eax,eax
c001e69e:	74 34                	je     c001e6d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6a7:	85 c0                	test   eax,eax
c001e6a9:	74 29                	je     c001e6d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6d2:	eb 5d                	jmp    c001e731 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6da:	85 c0                	test   eax,eax
c001e6dc:	75 47                	jne    c001e725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6e5:	85 c0                	test   eax,eax
c001e6e7:	75 3c                	jne    c001e725 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e6e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6f1:	89 10                	mov    DWORD PTR [eax],edx
c001e6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e702:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e705:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e713:	85 c0                	test   eax,eax
c001e715:	74 1a                	je     c001e731 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e717:	c7 04 24 8a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa8a
c001e71e:	e8 a2 20 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e723:	eb 0c                	jmp    c001e731 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e725:	c7 04 24 94 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa94
c001e72c:	e8 94 20 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e735:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e738:	8d 50 01             	lea    edx,[eax+0x1]
c001e73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e742:	90                   	nop
c001e743:	83 c4 1c             	add    esp,0x1c
c001e746:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e748 <LinkedList<UnixFile>::getFirstElement()>:
c001e748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e74c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e74e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e750 <LinkedList<UnixFile>::removeFirst()>:
c001e750:	83 ec 1c             	sub    esp,0x1c
c001e753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e757:	8b 00                	mov    eax,DWORD PTR [eax]
c001e759:	85 c0                	test   eax,eax
c001e75b:	75 0e                	jne    c001e76b <LinkedList<UnixFile>::removeFirst()+0x1b>
c001e75d:	c7 04 24 a0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa0
c001e764:	e8 5c 20 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e769:	eb 76                	jmp    c001e7e1 <LinkedList<UnixFile>::removeFirst()+0x91>
c001e76b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e76f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e775:	85 c0                	test   eax,eax
c001e777:	74 0c                	je     c001e785 <LinkedList<UnixFile>::removeFirst()+0x35>
c001e779:	c7 04 24 eb fa 01 c0 	mov    DWORD PTR [esp],0xc001faeb
c001e780:	e8 40 20 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e789:	8b 00                	mov    eax,DWORD PTR [eax]
c001e78b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e78e:	85 c0                	test   eax,eax
c001e790:	75 2f                	jne    c001e7c1 <LinkedList<UnixFile>::removeFirst()+0x71>
c001e792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e796:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7ae:	83 f8 01             	cmp    eax,0x1
c001e7b1:	74 1d                	je     c001e7d0 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e7b3:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001e7ba:	e8 06 20 ff ff       	call   c00107c5 <KePanic(char const*)>
c001e7bf:	eb 0f                	jmp    c001e7d0 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e7ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7ce:	89 10                	mov    DWORD PTR [eax],edx
c001e7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7e1:	83 c4 1c             	add    esp,0x1c
c001e7e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e7e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e7ee <DriverlessDevice::~DriverlessDevice()>:
c001e7ee:	83 ec 04             	sub    esp,0x4
c001e7f1:	ba 3c 01 02 c0       	mov    edx,0xc002013c
c001e7f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7fa:	89 10                	mov    DWORD PTR [eax],edx
c001e7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e800:	89 04 24             	mov    DWORD PTR [esp],eax
c001e803:	e8 9e d5 fe ff       	call   c000bda6 <Device::~Device()>
c001e808:	90                   	nop
c001e809:	83 c4 04             	add    esp,0x4
c001e80c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e80e <DriverlessDevice::~DriverlessDevice()>:
c001e80e:	83 ec 1c             	sub    esp,0x1c
c001e811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e815:	89 04 24             	mov    DWORD PTR [esp],eax
c001e818:	e8 d1 ff ff ff       	call   c001e7ee <DriverlessDevice::~DriverlessDevice()>
c001e81d:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001e825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e829:	89 04 24             	mov    DWORD PTR [esp],eax
c001e82c:	e8 2b c1 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001e831:	83 c4 1c             	add    esp,0x1c
c001e834:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e836 <LinkedList<Device>::addElement(Device*)>:
c001e836:	83 ec 1c             	sub    esp,0x1c
c001e839:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e83e:	75 0c                	jne    c001e84c <LinkedList<Device>::addElement(Device*)+0x16>
c001e840:	c7 04 24 68 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa68
c001e847:	e8 79 1f ff ff       	call   c00107c5 <KePanic(char const*)>
c001e84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e850:	8b 00                	mov    eax,DWORD PTR [eax]
c001e852:	85 c0                	test   eax,eax
c001e854:	74 3a                	je     c001e890 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e85d:	85 c0                	test   eax,eax
c001e85f:	74 2f                	je     c001e890 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e868:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e86c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e876:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e87a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e881:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e884:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e88e:	eb 60                	jmp    c001e8f0 <LinkedList<Device>::addElement(Device*)+0xba>
c001e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e894:	8b 00                	mov    eax,DWORD PTR [eax]
c001e896:	85 c0                	test   eax,eax
c001e898:	75 4a                	jne    c001e8e4 <LinkedList<Device>::addElement(Device*)+0xae>
c001e89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e89e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8a1:	85 c0                	test   eax,eax
c001e8a3:	75 3f                	jne    c001e8e4 <LinkedList<Device>::addElement(Device*)+0xae>
c001e8a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8ad:	89 10                	mov    DWORD PTR [eax],edx
c001e8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8d2:	85 c0                	test   eax,eax
c001e8d4:	74 1a                	je     c001e8f0 <LinkedList<Device>::addElement(Device*)+0xba>
c001e8d6:	c7 04 24 8a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa8a
c001e8dd:	e8 e3 1e ff ff       	call   c00107c5 <KePanic(char const*)>
c001e8e2:	eb 0c                	jmp    c001e8f0 <LinkedList<Device>::addElement(Device*)+0xba>
c001e8e4:	c7 04 24 94 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa94
c001e8eb:	e8 d5 1e ff ff       	call   c00107c5 <KePanic(char const*)>
c001e8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8f7:	8d 50 01             	lea    edx,[eax+0x1]
c001e8fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e901:	90                   	nop
c001e902:	83 c4 1c             	add    esp,0x1c
c001e905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e906 <LinkedList<Device>::LinkedList()>:
c001e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e91f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e92a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e946:	90                   	nop
c001e947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e948 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e94e:	85 c0                	test   eax,eax
c001e950:	75 0e                	jne    c001e960 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e959:	85 c0                	test   eax,eax
c001e95b:	75 03                	jne    c001e960 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e95d:	b0 01                	mov    al,0x1
c001e95f:	c3                   	ret    
c001e960:	b0 00                	mov    al,0x0
c001e962:	90                   	nop
c001e963:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e964 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e968:	8b 00                	mov    eax,DWORD PTR [eax]
c001e96a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e96c <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e96c:	83 ec 1c             	sub    esp,0x1c
c001e96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e973:	8b 00                	mov    eax,DWORD PTR [eax]
c001e975:	85 c0                	test   eax,eax
c001e977:	75 13                	jne    c001e98c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001e979:	c7 04 24 a0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa0
c001e980:	e8 40 1e ff ff       	call   c00107c5 <KePanic(char const*)>
c001e985:	e9 8a 00 00 00       	jmp    c001ea14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001e98a:	66 90                	xchg   ax,ax
c001e98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e993:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e996:	85 c0                	test   eax,eax
c001e998:	0f 95 c0             	setne  al
c001e99b:	84 c0                	test   al,al
c001e99d:	74 0d                	je     c001e9ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001e99f:	c7 04 24 eb fa 01 c0 	mov    DWORD PTR [esp],0xc001faeb
c001e9a6:	e8 1a 1e ff ff       	call   c00107c5 <KePanic(char const*)>
c001e9ab:	90                   	nop
c001e9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e9b5:	85 c0                	test   eax,eax
c001e9b7:	0f 94 c0             	sete   al
c001e9ba:	84 c0                	test   al,al
c001e9bc:	74 32                	je     c001e9f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001e9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9da:	83 f8 01             	cmp    eax,0x1
c001e9dd:	74 21                	je     c001ea00 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e9df:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001e9e6:	e8 da 1d ff ff       	call   c00107c5 <KePanic(char const*)>
c001e9eb:	eb 13                	jmp    c001ea00 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e9ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e9f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9fd:	89 10                	mov    DWORD PTR [eax],edx
c001e9ff:	90                   	nop
c001ea00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea07:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea11:	8d 76 00             	lea    esi,[esi+0x0]
c001ea14:	83 c4 1c             	add    esp,0x1c
c001ea17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ea18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ea18:	83 ec 1c             	sub    esp,0x1c
c001ea1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea20:	75 0e                	jne    c001ea30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001ea22:	c7 04 24 68 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa68
c001ea29:	e8 97 1d ff ff       	call   c00107c5 <KePanic(char const*)>
c001ea2e:	66 90                	xchg   ax,ax
c001ea30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea34:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea36:	85 c0                	test   eax,eax
c001ea38:	74 36                	je     c001ea70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea41:	85 c0                	test   eax,eax
c001ea43:	74 2b                	je     c001ea70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea50:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ea53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea65:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea6c:	eb 62                	jmp    c001ead0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001ea6e:	66 90                	xchg   ax,ax
c001ea70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea76:	85 c0                	test   eax,eax
c001ea78:	75 4a                	jne    c001eac4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001ea7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea81:	85 c0                	test   eax,eax
c001ea83:	75 3f                	jne    c001eac4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001ea85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea8d:	89 10                	mov    DWORD PTR [eax],edx
c001ea8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ea97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eaa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaaf:	85 c0                	test   eax,eax
c001eab1:	74 1d                	je     c001ead0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eab3:	c7 04 24 8a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa8a
c001eaba:	e8 06 1d ff ff       	call   c00107c5 <KePanic(char const*)>
c001eabf:	eb 0f                	jmp    c001ead0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eac1:	8d 76 00             	lea    esi,[esi+0x0]
c001eac4:	c7 04 24 94 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa94
c001eacb:	e8 f5 1c ff ff       	call   c00107c5 <KePanic(char const*)>
c001ead0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ead4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ead7:	8d 50 01             	lea    edx,[eax+0x1]
c001eada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eade:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eae1:	90                   	nop
c001eae2:	83 c4 1c             	add    esp,0x1c
c001eae5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001eae8 <ACPI::~ACPI()>:
c001eae8:	83 ec 1c             	sub    esp,0x1c
c001eaeb:	ba 08 07 02 c0       	mov    edx,0xc0020708
c001eaf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaf4:	89 10                	mov    DWORD PTR [eax],edx
c001eaf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eafa:	89 04 24             	mov    DWORD PTR [esp],eax
c001eafd:	e8 a4 d2 fe ff       	call   c000bda6 <Device::~Device()>
c001eb02:	90                   	nop
c001eb03:	83 c4 1c             	add    esp,0x1c
c001eb06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eb08 <ACPI::~ACPI()>:
c001eb08:	83 ec 1c             	sub    esp,0x1c
c001eb0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb12:	e8 d1 ff ff ff       	call   c001eae8 <ACPI::~ACPI()>
c001eb17:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001eb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb23:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb26:	e8 31 be fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001eb2b:	83 c4 1c             	add    esp,0x1c
c001eb2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001eb30 <LinkedList<Device>::~LinkedList()>:
c001eb30:	90                   	nop
c001eb31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001eb34 <LinkedList<Device>::isEmpty()>:
c001eb34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb38:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3a:	85 c0                	test   eax,eax
c001eb3c:	75 0e                	jne    c001eb4c <LinkedList<Device>::isEmpty()+0x18>
c001eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb45:	85 c0                	test   eax,eax
c001eb47:	75 03                	jne    c001eb4c <LinkedList<Device>::isEmpty()+0x18>
c001eb49:	b0 01                	mov    al,0x1
c001eb4b:	c3                   	ret    
c001eb4c:	b0 00                	mov    al,0x0
c001eb4e:	90                   	nop
c001eb4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001eb50 <LinkedList<Device>::getFirstElement()>:
c001eb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb56:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001eb58 <LinkedList<Device>::removeFirst()>:
c001eb58:	83 ec 1c             	sub    esp,0x1c
c001eb5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb61:	85 c0                	test   eax,eax
c001eb63:	75 13                	jne    c001eb78 <LinkedList<Device>::removeFirst()+0x20>
c001eb65:	c7 04 24 a0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa0
c001eb6c:	e8 54 1c ff ff       	call   c00107c5 <KePanic(char const*)>
c001eb71:	e9 8a 00 00 00       	jmp    c001ec00 <LinkedList<Device>::removeFirst()+0xa8>
c001eb76:	66 90                	xchg   ax,ax
c001eb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb7f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eb85:	85 c0                	test   eax,eax
c001eb87:	74 0f                	je     c001eb98 <LinkedList<Device>::removeFirst()+0x40>
c001eb89:	c7 04 24 eb fa 01 c0 	mov    DWORD PTR [esp],0xc001faeb
c001eb90:	e8 30 1c ff ff       	call   c00107c5 <KePanic(char const*)>
c001eb95:	8d 76 00             	lea    esi,[esi+0x0]
c001eb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb9e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eba4:	85 c0                	test   eax,eax
c001eba6:	75 30                	jne    c001ebd8 <LinkedList<Device>::removeFirst()+0x80>
c001eba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebc4:	83 f8 01             	cmp    eax,0x1
c001ebc7:	74 23                	je     c001ebec <LinkedList<Device>::removeFirst()+0x94>
c001ebc9:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001ebd0:	e8 f0 1b ff ff       	call   c00107c5 <KePanic(char const*)>
c001ebd5:	eb 15                	jmp    c001ebec <LinkedList<Device>::removeFirst()+0x94>
c001ebd7:	90                   	nop
c001ebd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebde:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ebe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebe8:	89 10                	mov    DWORD PTR [eax],edx
c001ebea:	66 90                	xchg   ax,ax
c001ebec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebf0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebf3:	8d 50 ff             	lea    edx,[eax-0x1]
c001ebf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebfa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ec00:	83 c4 1c             	add    esp,0x1c
c001ec03:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ec04 <CPU::~CPU()>:
c001ec04:	83 ec 1c             	sub    esp,0x1c
c001ec07:	ba a4 08 02 c0       	mov    edx,0xc00208a4
c001ec0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec10:	89 10                	mov    DWORD PTR [eax],edx
c001ec12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec16:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec19:	e8 88 d1 fe ff       	call   c000bda6 <Device::~Device()>
c001ec1e:	90                   	nop
c001ec1f:	83 c4 1c             	add    esp,0x1c
c001ec22:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ec24 <CPU::~CPU()>:
c001ec24:	83 ec 1c             	sub    esp,0x1c
c001ec27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec2b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec2e:	e8 d1 ff ff ff       	call   c001ec04 <CPU::~CPU()>
c001ec33:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001ec3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec42:	e8 15 bd fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ec47:	83 c4 1c             	add    esp,0x1c
c001ec4a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec4c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ec54 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ec54:	90                   	nop
c001ec55:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ec58 <ThreadControlBlock::ThreadControlBlock()>:
c001ec58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ec6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec72:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ec79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec7d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ec84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec88:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ec8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec93:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ec97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec9b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ec9f:	90                   	nop
c001eca0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eca4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eca8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecdd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ece4:	90                   	nop
c001ece5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ece6 <PCI::~PCI()>:
c001ece6:	83 ec 1c             	sub    esp,0x1c
c001ece9:	ba 04 17 02 c0       	mov    edx,0xc0021704
c001ecee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf2:	89 10                	mov    DWORD PTR [eax],edx
c001ecf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecfb:	e8 44 cb fe ff       	call   c000b844 <Bus::~Bus()>
c001ed00:	90                   	nop
c001ed01:	83 c4 1c             	add    esp,0x1c
c001ed04:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ed06 <PCI::~PCI()>:
c001ed06:	83 ec 1c             	sub    esp,0x1c
c001ed09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed10:	e8 d1 ff ff ff       	call   c001ece6 <PCI::~PCI()>
c001ed15:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ed1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed21:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed24:	e8 33 bc fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ed29:	83 c4 1c             	add    esp,0x1c
c001ed2c:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ed2e <IDE::~IDE()>:
c001ed2e:	83 ec 1c             	sub    esp,0x1c
c001ed31:	ba b8 17 02 c0       	mov    edx,0xc00217b8
c001ed36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed3a:	89 10                	mov    DWORD PTR [eax],edx
c001ed3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed40:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed43:	e8 d4 d4 fe ff       	call   c000c21c <HardDiskController::~HardDiskController()>
c001ed48:	90                   	nop
c001ed49:	83 c4 1c             	add    esp,0x1c
c001ed4c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ed4e <IDE::~IDE()>:
c001ed4e:	83 ec 1c             	sub    esp,0x1c
c001ed51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed55:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed58:	e8 d1 ff ff ff       	call   c001ed2e <IDE::~IDE()>
c001ed5d:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001ed65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed69:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed6c:	e8 eb bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ed71:	83 c4 1c             	add    esp,0x1c
c001ed74:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ed76 <SATABus::~SATABus()>:
c001ed76:	83 ec 1c             	sub    esp,0x1c
c001ed79:	ba 08 18 02 c0       	mov    edx,0xc0021808
c001ed7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed82:	89 10                	mov    DWORD PTR [eax],edx
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed8b:	e8 8c d4 fe ff       	call   c000c21c <HardDiskController::~HardDiskController()>
c001ed90:	90                   	nop
c001ed91:	83 c4 1c             	add    esp,0x1c
c001ed94:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ed96 <SATABus::~SATABus()>:
c001ed96:	83 ec 1c             	sub    esp,0x1c
c001ed99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001eda0:	e8 d1 ff ff ff       	call   c001ed76 <SATABus::~SATABus()>
c001eda5:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001edad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edb4:	e8 a3 bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001edb9:	83 c4 1c             	add    esp,0x1c
c001edbc:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001edbe <ATA::~ATA()>:
c001edbe:	83 ec 1c             	sub    esp,0x1c
c001edc1:	ba 48 18 02 c0       	mov    edx,0xc0021848
c001edc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edca:	89 10                	mov    DWORD PTR [eax],edx
c001edcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd0:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd3:	e8 20 d5 fe ff       	call   c000c2f8 <PhysicalDisk::~PhysicalDisk()>
c001edd8:	90                   	nop
c001edd9:	83 c4 1c             	add    esp,0x1c
c001eddc:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001edde <ATA::~ATA()>:
c001edde:	83 ec 1c             	sub    esp,0x1c
c001ede1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede8:	e8 d1 ff ff ff       	call   c001edbe <ATA::~ATA()>
c001eded:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001edf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001edfc:	e8 5b bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ee01:	83 c4 1c             	add    esp,0x1c
c001ee04:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ee06 <ATAPI::~ATAPI()>:
c001ee06:	83 ec 1c             	sub    esp,0x1c
c001ee09:	ba 90 18 02 c0       	mov    edx,0xc0021890
c001ee0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee12:	89 10                	mov    DWORD PTR [eax],edx
c001ee14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee1b:	e8 d8 d4 fe ff       	call   c000c2f8 <PhysicalDisk::~PhysicalDisk()>
c001ee20:	90                   	nop
c001ee21:	83 c4 1c             	add    esp,0x1c
c001ee24:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ee26 <ATAPI::~ATAPI()>:
c001ee26:	83 ec 1c             	sub    esp,0x1c
c001ee29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee30:	e8 d1 ff ff ff       	call   c001ee06 <ATAPI::~ATAPI()>
c001ee35:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee41:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee44:	e8 13 bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ee49:	83 c4 1c             	add    esp,0x1c
c001ee4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ee4e <SATA::~SATA()>:
c001ee4e:	83 ec 1c             	sub    esp,0x1c
c001ee51:	ba 44 19 02 c0       	mov    edx,0xc0021944
c001ee56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5a:	89 10                	mov    DWORD PTR [eax],edx
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee63:	e8 90 d4 fe ff       	call   c000c2f8 <PhysicalDisk::~PhysicalDisk()>
c001ee68:	90                   	nop
c001ee69:	83 c4 1c             	add    esp,0x1c
c001ee6c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ee6e <SATA::~SATA()>:
c001ee6e:	83 ec 1c             	sub    esp,0x1c
c001ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee75:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee78:	e8 d1 ff ff ff       	call   c001ee4e <SATA::~SATA()>
c001ee7d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee89:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee8c:	e8 cb ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ee91:	83 c4 1c             	add    esp,0x1c
c001ee94:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ee96 <SATAPI::~SATAPI()>:
c001ee96:	83 ec 1c             	sub    esp,0x1c
c001ee99:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001ee9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea2:	89 10                	mov    DWORD PTR [eax],edx
c001eea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeab:	e8 48 d4 fe ff       	call   c000c2f8 <PhysicalDisk::~PhysicalDisk()>
c001eeb0:	90                   	nop
c001eeb1:	83 c4 1c             	add    esp,0x1c
c001eeb4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001eeb6 <SATAPI::~SATAPI()>:
c001eeb6:	83 ec 1c             	sub    esp,0x1c
c001eeb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eebd:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec0:	e8 d1 ff ff ff       	call   c001ee96 <SATAPI::~SATAPI()>
c001eec5:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001eecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed1:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed4:	e8 83 ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001eed9:	83 c4 1c             	add    esp,0x1c
c001eedc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001eede <IOAPIC::~IOAPIC()>:
c001eede:	83 ec 1c             	sub    esp,0x1c
c001eee1:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001eee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeea:	89 10                	mov    DWORD PTR [eax],edx
c001eeec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eef3:	e8 ae ce fe ff       	call   c000bda6 <Device::~Device()>
c001eef8:	90                   	nop
c001eef9:	83 c4 1c             	add    esp,0x1c
c001eefc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001eefe <IOAPIC::~IOAPIC()>:
c001eefe:	83 ec 1c             	sub    esp,0x1c
c001ef01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef05:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef08:	e8 d1 ff ff ff       	call   c001eede <IOAPIC::~IOAPIC()>
c001ef0d:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ef15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef19:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef1c:	e8 3b ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ef21:	83 c4 1c             	add    esp,0x1c
c001ef24:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ef28 <APICTimer::~APICTimer()>:
c001ef28:	83 ec 1c             	sub    esp,0x1c
c001ef2b:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001ef30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef34:	89 10                	mov    DWORD PTR [eax],edx
c001ef36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef3a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef3d:	e8 36 e8 fe ff       	call   c000d778 <Timer::~Timer()>
c001ef42:	90                   	nop
c001ef43:	83 c4 1c             	add    esp,0x1c
c001ef46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ef48 <APICTimer::~APICTimer()>:
c001ef48:	83 ec 1c             	sub    esp,0x1c
c001ef4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef4f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef52:	e8 d1 ff ff ff       	call   c001ef28 <APICTimer::~APICTimer()>
c001ef57:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001ef5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef63:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef66:	e8 f1 b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ef6b:	83 c4 1c             	add    esp,0x1c
c001ef6e:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ef70 <PIT::~PIT()>:
c001ef70:	83 ec 1c             	sub    esp,0x1c
c001ef73:	ba 40 1b 02 c0       	mov    edx,0xc0021b40
c001ef78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef7c:	89 10                	mov    DWORD PTR [eax],edx
c001ef7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef82:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef85:	e8 ee e7 fe ff       	call   c000d778 <Timer::~Timer()>
c001ef8a:	90                   	nop
c001ef8b:	83 c4 1c             	add    esp,0x1c
c001ef8e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ef90 <PIT::~PIT()>:
c001ef90:	83 ec 1c             	sub    esp,0x1c
c001ef93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef97:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef9a:	e8 d1 ff ff ff       	call   c001ef70 <PIT::~PIT()>
c001ef9f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001efa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efab:	89 04 24             	mov    DWORD PTR [esp],eax
c001efae:	e8 a9 b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001efb3:	83 c4 1c             	add    esp,0x1c
c001efb6:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 95 09 02 c0       	mov    esi,0xc0020995
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be b1 09 02 c0       	mov    esi,0xc00209b1
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
