
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9b f7 00 00       	call   c000f7bb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 55 02 00       	call   c0025618 <_init>
c0000025:	c3                   	ret    
c0000026:	bb d8 60 02 c0       	mov    ebx,0xc00260d8
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb e4 60 02 c0    	cmp    ebx,0xc00260e4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 4c 9f 02 c0       	mov    eax,0xc0029f4c
c0000049:	3d 4c 9f 02 c0       	cmp    eax,0xc0029f4c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 4c 9f 02 c0       	push   0xc0029f4c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 4c 9f 02 c0       	mov    eax,0xc0029f4c
c0000075:	2d 4c 9f 02 c0       	sub    eax,0xc0029f4c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 4c 9f 02 c0       	push   0xc0029f4c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 7c a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a57c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb ec 60 02 c0       	mov    ebx,0xc00260ec
c00000bb:	81 eb e8 60 02 c0    	sub    ebx,0xc00260e8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e8 60 02 c0       	mov    esi,0xc00260e8
c00000ca:	a1 80 a5 02 c0       	mov    eax,ds:0xc002a580
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 80 a5 02 c0       	mov    ds:0xc002a580,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 80 a5 02 c0       	mov    eax,ds:0xc002a580
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 4c 9f 02 c0       	push   0xc0029f4c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 7c a5 02 c0 01 	mov    BYTE PTR ds:0xc002a57c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 84 a5 02 c0       	push   0xc002a584
c000012c:	68 4c 9f 02 c0       	push   0xc0029f4c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 ba b6 01 00       	call   c001ba0c <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 b3 20 01 00       	call   c001241d <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 98 b6 01 00       	call   c001ba0c <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 af ba 01 00       	call   c001be42 <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 5c c0 01 00       	call   c001c3f8 <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 b0 a9 02 c0 	lgdtd  ds:0xc002a9b0
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 55 3d 01 00       	call   c00142d5 <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 9c a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a59c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 9c a5 02 c0       	mov    ds:0xc002a59c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 9c a5 02 c0       	mov    eax,ds:0xc002a59c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 9c a5 02 c0    	mov    DWORD PTR ds:0xc002a59c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 00 61 02 c0 02 	test   BYTE PTR [edx-0x3ffd9f00],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 00 61 02 c0 01 	test   BYTE PTR [edx-0x3ffd9f00],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 00 61 02 c0 08 	test   BYTE PTR [edx-0x3ffd9f00],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 00 61 02 c0 04 	test   BYTE PTR [edi-0x3ffd9f00],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 00 61 02 c0 01 	test   BYTE PTR [edx-0x3ffd9f00],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d a0 a5 02 c0    	mov    ecx,DWORD PTR ds:0xc002a5a0
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d a0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a0,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 a4 a5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5a5c]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 a4 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a5c],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d a0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a0,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 cc a5 02 c0    	cmp    DWORD PTR ds:0xc002a5cc,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d dc a5 02 c0    	mov    ecx,DWORD PTR ds:0xc002a5dc
c0000c02:	c7 42 0c d4 a5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a5d4
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 dc a5 02 c0    	mov    DWORD PTR ds:0xc002a5dc,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 cc a5 02 c0    	mov    DWORD PTR ds:0xc002a5cc,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 a0 a5 02 c0 02 	test   BYTE PTR ds:0xc002a5a0,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 40 e6 00 00       	call   c000f323 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 82 e5 00 00       	call   c000f323 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 6c e5 00 00       	call   c000f323 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 48 e5 00 00       	call   c000f323 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d a0 a5 02 c0    	mov    edi,DWORD PTR ds:0xc002a5a0
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 a4 a5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a5c]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 a4 a5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5a5c],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 d4 a5 02 c0 	lea    edx,[eax*8-0x3ffd5a2c]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d e0 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5e0
c0000f84:	81 fb d4 a5 02 c0    	cmp    ebx,0xc002a5d4
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d d4 a5 02 c0       	cmp    eax,0xc002a5d4
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d d0 a5 02 c0    	cmp    DWORD PTR ds:0xc002a5d0,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 dc a5 02 c0       	mov    ds:0xc002a5dc,eax
c0000fc0:	a3 e0 a5 02 c0       	mov    ds:0xc002a5e0,eax
c0000fc5:	a3 d0 a5 02 c0       	mov    ds:0xc002a5d0,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 d4 a5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a5d4
c0000fd3:	c7 40 0c d4 a5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a5d4
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 e0 a5 02 c0       	mov    ds:0xc002a5e0,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 d4 a5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a5d4
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 98 a5 02 c0 	lea    ebp,[edx*4-0x3ffd5a68]
c0001024:	8b 14 95 a0 a5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5a60]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 a0 a5 02 c0 	lea    ecx,[edx*4-0x3ffd5a60]
c000103f:	8b 14 95 a0 a5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5a60]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd d4 a8 02 c0 	or     DWORD PTR [edi*4-0x3ffd572c],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 d4 a5 02 c0 	lea    eax,[eax*8-0x3ffd5a2c]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d dc a5 02 c0    	mov    DWORD PTR ds:0xc002a5dc,ecx
c00010f9:	89 0d e0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5e0,ecx
c00010ff:	c7 41 08 d4 a5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a5d4
c0001106:	c7 41 0c d4 a5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a5d4
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd cc a5 02 c0 	lea    edx,[ecx*8-0x3ffd5a34]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d d4 a8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd572c]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d d4 a8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd572c]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 cc a5 02 c0 	lea    edx,[eax*4-0x3ffd5a34]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d d4 a8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd572c],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d dc a5 02 c0    	mov    DWORD PTR ds:0xc002a5dc,edi
c00011cc:	89 3d e0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5e0,edi
c00011d2:	c7 47 08 d4 a5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a5d4
c00011d9:	c7 47 0c d4 a5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a5d4
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d d0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5d0,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 cc a5 02 c0       	mov    eax,ds:0xc002a5cc
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d cc a5 02 c0    	mov    DWORD PTR ds:0xc002a5cc,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba a0 a5 02 c0       	mov    edx,0xc002a5a0
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d a0 a5 02 c0 00 	cmp    DWORD PTR ds:0xc002a5a0,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d f4 a8 02 c0    	mov    ebx,DWORD PTR ds:0xc002a8f4
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 f4 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8f4,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d f4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8f4,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 cc a5 02 c0    	cmp    DWORD PTR ds:0xc002a5cc,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d cc a5 02 c0    	mov    DWORD PTR ds:0xc002a5cc,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d a0 a5 02 c0 00 	cmp    DWORD PTR ds:0xc002a5a0,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 fc a8 02 c0    	push   DWORD PTR ds:0xc002a8fc
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d a0 a5 02 c0 00 	cmp    DWORD PTR ds:0xc002a5a0,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 fc a8 02 c0       	mov    eax,ds:0xc002a8fc
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d cc a5 02 c0 00 	cmp    DWORD PTR ds:0xc002a5cc,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 cc a5 02 c0       	mov    eax,ds:0xc002a5cc
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 a4 a5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5a5c]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 d4 a5 02 c0       	mov    eax,0xc002a5d4
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d cc a8 02 c0       	cmp    eax,0xc002a8cc
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 08 a9 02 c0       	mov    eax,ds:0xc002a908
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 f0 a8 02 c0    	mov    esi,DWORD PTR ds:0xc002a8f0
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 04 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a904
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 14 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a914
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 a0 a5 02 c0       	mov    eax,0xc002a5a0
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 04 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9dfc]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 a0 a5 02 c0       	mov    ds:0xc002a5a0,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d e4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8e4,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d e8 a8 02 c0    	mov    DWORD PTR ds:0xc002a8e8,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d ec a8 02 c0    	mov    DWORD PTR ds:0xc002a8ec,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 f4 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8f4,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 e0 bf 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4020]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 a4 d0 01 00       	jmp    c001ea72 <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 e0 bf 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4020]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 d5 d0 01 00       	jmp    c001eab9 <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 e0 bf 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4020]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 fd d0 01 00       	jmp    c001eb00 <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 96 1c 02 00       	call   c002397c <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 20 63 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd9ce0]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 20 63 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd9ce0]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba 20 62 02 c0       	mov    edx,0xc0026220
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba 40 63 02 c0       	mov    edx,0xc0026340
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba 60 90 02 c0       	mov    edx,0xc0029060
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba 4c 63 02 c0       	mov    edx,0xc002634c
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba 30 63 02 c0       	mov    edx,0xc0026330
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 40 a9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd56c0]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 20 a9 02 c0    	mov    ax,ds:0xc002a920
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 20 a9 02 c0    	mov    ds:0xc002a920,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 93 0a 02 00       	call   c002397c <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 52 63 02 c0       	mov    eax,0xc0026352
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad a0 62 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd9d60]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 5b 63 02 c0       	mov    eax,0xc002635b
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 20 63 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9ce0]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 5e f4 01 00       	call   c002397c <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba 30 63 02 c0       	mov    edx,0xc0026330
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba 20 62 02 c0       	mov    edx,0xc0026220
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba 30 62 02 c0       	mov    edx,0xc0026230
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 40 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd56c0]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 40 a9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd56c0],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 25 de 01 00       	call   c002397c <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 0b de 01 00       	call   c002397c <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 77 62 02 c0       	mov    eax,0xc0026277
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 70 62 02 c0       	mov    eax,0xc0026270
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 40 a9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd56c0]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 60 62 02 c0       	mov    esi,0xc0026260
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 4e c5 01 00       	call   c002397c <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba 40 63 02 c0       	mov    edx,0xc0026340
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba 40 62 02 c0       	mov    edx,0xc0026240
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba 50 62 02 c0       	mov    edx,0xc0026250
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 62 63 02 c0       	mov    edx,0xc0026362
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 6e 63 02 c0       	mov    edx,0xc002636e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba 82 63 02 c0       	mov    edx,0xc0026382
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 87 72 00 00       	call   c000f4cc <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 81 72 00 00       	call   c000f4dc <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c a0 66 02 c0 	mov    DWORD PTR [esp+0xc],0xc00266a0
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 a0 66 02 c0 	mov    DWORD PTR [esp+0x10],0xc00266a0
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 a0 64 02 c0       	mov    eax,0xc00264a0
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 e0 63 02 c0       	mov    eax,0xc00263e0
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 a0 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c60]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <psrc_set_converter>:
c00084b6:	56                   	push   esi
c00084b7:	89 d6                	mov    esi,edx
c00084b9:	53                   	push   ebx
c00084ba:	89 c3                	mov    ebx,eax
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	52                   	push   edx
c00084c0:	50                   	push   eax
c00084c1:	e8 6f 55 00 00       	call   c000da35 <sinc_set_converter>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	85 c0                	test   eax,eax
c00084cb:	74 25                	je     c00084f2 <psrc_set_converter+0x3c>
c00084cd:	50                   	push   eax
c00084ce:	50                   	push   eax
c00084cf:	56                   	push   esi
c00084d0:	53                   	push   ebx
c00084d1:	e8 17 5d 00 00       	call   c000e1ed <zoh_set_converter>
c00084d6:	83 c4 10             	add    esp,0x10
c00084d9:	85 c0                	test   eax,eax
c00084db:	74 15                	je     c00084f2 <psrc_set_converter+0x3c>
c00084dd:	51                   	push   ecx
c00084de:	51                   	push   ecx
c00084df:	56                   	push   esi
c00084e0:	53                   	push   ebx
c00084e1:	e8 0f 11 00 00       	call   c00095f5 <linear_set_converter>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	ba 0a 00 00 00       	mov    edx,0xa
c00084ee:	85 c0                	test   eax,eax
c00084f0:	75 02                	jne    c00084f4 <psrc_set_converter+0x3e>
c00084f2:	31 d2                	xor    edx,edx
c00084f4:	89 d0                	mov    eax,edx
c00084f6:	5a                   	pop    edx
c00084f7:	5b                   	pop    ebx
c00084f8:	5e                   	pop    esi
c00084f9:	c3                   	ret    

c00084fa <src_delete>:
c00084fa:	53                   	push   ebx
c00084fb:	83 ec 08             	sub    esp,0x8
c00084fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008502:	85 db                	test   ebx,ebx
c0008504:	74 29                	je     c000852f <src_delete+0x35>
c0008506:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008509:	85 c0                	test   eax,eax
c000850b:	74 0c                	je     c0008519 <src_delete+0x1f>
c000850d:	83 ec 0c             	sub    esp,0xc
c0008510:	50                   	push   eax
c0008511:	e8 c6 6f 00 00       	call   c000f4dc <free>
c0008516:	83 c4 10             	add    esp,0x10
c0008519:	50                   	push   eax
c000851a:	6a 3c                	push   0x3c
c000851c:	6a 00                	push   0x0
c000851e:	53                   	push   ebx
c000851f:	e8 59 81 ff ff       	call   c000067d <memset>
c0008524:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008527:	e8 b0 6f 00 00       	call   c000f4dc <free>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	31 c0                	xor    eax,eax
c0008531:	83 c4 08             	add    esp,0x8
c0008534:	5b                   	pop    ebx
c0008535:	c3                   	ret    

c0008536 <src_process>:
c0008536:	55                   	push   ebp
c0008537:	57                   	push   edi
c0008538:	56                   	push   esi
c0008539:	53                   	push   ebx
c000853a:	83 ec 1c             	sub    esp,0x1c
c000853d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008541:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008545:	85 ed                	test   ebp,ebp
c0008547:	0f 84 6f 01 00 00    	je     c00086bc <src_process+0x186>
c000854d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008551:	0f 84 6c 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008557:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000855b:	0f 84 62 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008561:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008568:	0f 85 5c 01 00 00    	jne    c00086ca <src_process+0x194>
c000856e:	85 db                	test   ebx,ebx
c0008570:	0f 84 5b 01 00 00    	je     c00086d1 <src_process+0x19b>
c0008576:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008578:	85 f6                	test   esi,esi
c000857a:	0f 84 58 01 00 00    	je     c00086d8 <src_process+0x1a2>
c0008580:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008583:	85 ff                	test   edi,edi
c0008585:	0f 84 4d 01 00 00    	je     c00086d8 <src_process+0x1a2>
c000858b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008599:	68 00 00 70 3f       	push   0x3f700000
c000859e:	6a 00                	push   0x0
c00085a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a8:	e8 a2 ce 01 00       	call   c002544f <__ltdf2>
c00085ad:	83 c4 10             	add    esp,0x10
c00085b0:	85 c0                	test   eax,eax
c00085b2:	0f 88 27 01 00 00    	js     c00086df <src_process+0x1a9>
c00085b8:	68 00 00 70 40       	push   0x40700000
c00085bd:	6a 00                	push   0x0
c00085bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c7:	e8 65 ce 01 00       	call   c0025431 <__gtdf2>
c00085cc:	83 c4 10             	add    esp,0x10
c00085cf:	85 c0                	test   eax,eax
c00085d1:	0f 8f 08 01 00 00    	jg     c00086df <src_process+0x1a9>
c00085d7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085db:	79 07                	jns    c00085e4 <src_process+0xae>
c00085dd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e7:	85 c0                	test   eax,eax
c00085e9:	79 50                	jns    c000863b <src_process+0x105>
c00085eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f2:	39 fe                	cmp    esi,edi
c00085f4:	72 37                	jb     c000862d <src_process+0xf7>
c00085f6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008604:	68 00 00 70 3f       	push   0x3f700000
c0008609:	6a 00                	push   0x0
c000860b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008611:	e8 39 ce 01 00       	call   c002544f <__ltdf2>
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	85 c0                	test   eax,eax
c000861b:	79 37                	jns    c0008654 <src_process+0x11e>
c000861d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008621:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008625:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008628:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000862b:	eb 27                	jmp    c0008654 <src_process+0x11e>
c000862d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008630:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008634:	8d 04 86             	lea    eax,[esi+eax*4]
c0008637:	39 c7                	cmp    edi,eax
c0008639:	eb 0d                	jmp    c0008648 <src_process+0x112>
c000863b:	39 fe                	cmp    esi,edi
c000863d:	72 ee                	jb     c000862d <src_process+0xf7>
c000863f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008643:	8d 04 87             	lea    eax,[edi+eax*4]
c0008646:	39 c6                	cmp    esi,eax
c0008648:	73 ac                	jae    c00085f6 <src_process+0xc0>
c000864a:	b8 10 00 00 00       	mov    eax,0x10
c000864f:	e9 90 00 00 00       	jmp    c00086e4 <src_process+0x1ae>
c0008654:	83 ec 10             	sub    esp,0x10
c0008657:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000865a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008660:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008663:	e8 ec c4 01 00       	call   c0024b54 <__subdf3>
c0008668:	83 c4 18             	add    esp,0x18
c000866b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008673:	52                   	push   edx
c0008674:	50                   	push   eax
c0008675:	e8 66 cf 01 00       	call   c00255e0 <fabs>
c000867a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	68 af 03 d2 3c       	push   0x3cd203af
c000868a:	68 16 56 e7 9e       	push   0x9ee75616
c000868f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008697:	e8 b3 cd 01 00       	call   c002544f <__ltdf2>
c000869c:	83 c4 10             	add    esp,0x10
c000869f:	85 c0                	test   eax,eax
c00086a1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a9:	79 05                	jns    c00086b0 <src_process+0x17a>
c00086ab:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ae:	eb 03                	jmp    c00086b3 <src_process+0x17d>
c00086b0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b3:	83 c4 1c             	add    esp,0x1c
c00086b6:	5b                   	pop    ebx
c00086b7:	5e                   	pop    esi
c00086b8:	5f                   	pop    edi
c00086b9:	5d                   	pop    ebp
c00086ba:	ff e0                	jmp    eax
c00086bc:	b8 02 00 00 00       	mov    eax,0x2
c00086c1:	eb 21                	jmp    c00086e4 <src_process+0x1ae>
c00086c3:	b8 07 00 00 00       	mov    eax,0x7
c00086c8:	eb 1a                	jmp    c00086e4 <src_process+0x1ae>
c00086ca:	b8 12 00 00 00       	mov    eax,0x12
c00086cf:	eb 13                	jmp    c00086e4 <src_process+0x1ae>
c00086d1:	b8 03 00 00 00       	mov    eax,0x3
c00086d6:	eb 0c                	jmp    c00086e4 <src_process+0x1ae>
c00086d8:	b8 04 00 00 00       	mov    eax,0x4
c00086dd:	eb 05                	jmp    c00086e4 <src_process+0x1ae>
c00086df:	b8 06 00 00 00       	mov    eax,0x6
c00086e4:	83 c4 1c             	add    esp,0x1c
c00086e7:	5b                   	pop    ebx
c00086e8:	5e                   	pop    esi
c00086e9:	5f                   	pop    edi
c00086ea:	5d                   	pop    ebp
c00086eb:	c3                   	ret    

c00086ec <src_callback_read>:
c00086ec:	55                   	push   ebp
c00086ed:	57                   	push   edi
c00086ee:	56                   	push   esi
c00086ef:	53                   	push   ebx
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086ff:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008703:	85 ed                	test   ebp,ebp
c0008705:	0f 8e 52 01 00 00    	jle    c000885d <src_callback_read+0x171>
c000870b:	85 db                	test   ebx,ebx
c000870d:	0f 84 4a 01 00 00    	je     c000885d <src_callback_read+0x171>
c0008713:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000871a:	74 0c                	je     c0008728 <src_callback_read+0x3c>
c000871c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008723:	e9 35 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c0008728:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872c:	75 0c                	jne    c000873a <src_callback_read+0x4e>
c000872e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008735:	e9 23 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c000873a:	51                   	push   ecx
c000873b:	6a 24                	push   0x24
c000873d:	6a 00                	push   0x0
c000873f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008743:	50                   	push   eax
c0008744:	e8 34 7f ff ff       	call   c000067d <memset>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	68 00 00 70 3f       	push   0x3f700000
c0008751:	6a 00                	push   0x0
c0008753:	57                   	push   edi
c0008754:	56                   	push   esi
c0008755:	e8 f5 cc 01 00       	call   c002544f <__ltdf2>
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	85 c0                	test   eax,eax
c000875f:	78 3e                	js     c000879f <src_callback_read+0xb3>
c0008761:	68 00 00 70 40       	push   0x40700000
c0008766:	6a 00                	push   0x0
c0008768:	57                   	push   edi
c0008769:	56                   	push   esi
c000876a:	e8 c2 cc 01 00       	call   c0025431 <__gtdf2>
c000876f:	83 c4 10             	add    esp,0x10
c0008772:	85 c0                	test   eax,eax
c0008774:	7f 29                	jg     c000879f <src_callback_read+0xb3>
c0008776:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000877a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008782:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008786:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008789:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008791:	31 f6                	xor    esi,esi
c0008793:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008796:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000879a:	e9 97 00 00 00       	jmp    c0008836 <src_callback_read+0x14a>
c000879f:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a6:	e9 b2 00 00 00       	jmp    c000885d <src_callback_read+0x171>
c00087ab:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b3:	52                   	push   edx
c00087b4:	52                   	push   edx
c00087b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b9:	50                   	push   eax
c00087ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087cc:	83 c4 10             	add    esp,0x10
c00087cf:	85 c0                	test   eax,eax
c00087d1:	75 08                	jne    c00087db <src_callback_read+0xef>
c00087d3:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087db:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e2:	50                   	push   eax
c00087e3:	50                   	push   eax
c00087e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e8:	50                   	push   eax
c00087e9:	53                   	push   ebx
c00087ea:	e8 47 fd ff ff       	call   c0008536 <src_process>
c00087ef:	83 c4 10             	add    esp,0x10
c00087f2:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f9:	85 c0                	test   eax,eax
c00087fb:	75 49                	jne    c0008846 <src_callback_read+0x15a>
c00087fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008801:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008804:	89 f9                	mov    ecx,edi
c0008806:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000880a:	0f af ca             	imul   ecx,edx
c000880d:	c1 e1 02             	shl    ecx,0x2
c0008810:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008814:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008818:	0f af d1             	imul   edx,ecx
c000881b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881f:	c1 e2 02             	shl    edx,0x2
c0008822:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008826:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008829:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882e:	74 12                	je     c0008842 <src_callback_read+0x156>
c0008830:	39 d5                	cmp    ebp,edx
c0008832:	7e 14                	jle    c0008848 <src_callback_read+0x15c>
c0008834:	89 d6                	mov    esi,edx
c0008836:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000883b:	75 9e                	jne    c00087db <src_callback_read+0xef>
c000883d:	e9 69 ff ff ff       	jmp    c00087ab <src_callback_read+0xbf>
c0008842:	85 c9                	test   ecx,ecx
c0008844:	75 ea                	jne    c0008830 <src_callback_read+0x144>
c0008846:	89 f2                	mov    edx,esi
c0008848:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884c:	85 c0                	test   eax,eax
c000884e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008855:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008858:	74 05                	je     c000885f <src_callback_read+0x173>
c000885a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885d:	31 d2                	xor    edx,edx
c000885f:	83 c4 3c             	add    esp,0x3c
c0008862:	89 d0                	mov    eax,edx
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	5f                   	pop    edi
c0008867:	5d                   	pop    ebp
c0008868:	c3                   	ret    

c0008869 <src_set_ratio>:
c0008869:	57                   	push   edi
c000886a:	ba 02 00 00 00       	mov    edx,0x2
c000886f:	56                   	push   esi
c0008870:	53                   	push   ebx
c0008871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008875:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008879:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887d:	85 db                	test   ebx,ebx
c000887f:	74 4c                	je     c00088cd <src_set_ratio+0x64>
c0008881:	ba 07 00 00 00       	mov    edx,0x7
c0008886:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000888a:	74 41                	je     c00088cd <src_set_ratio+0x64>
c000888c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008890:	74 3b                	je     c00088cd <src_set_ratio+0x64>
c0008892:	68 00 00 70 3f       	push   0x3f700000
c0008897:	6a 00                	push   0x0
c0008899:	57                   	push   edi
c000889a:	56                   	push   esi
c000889b:	e8 af cb 01 00       	call   c002544f <__ltdf2>
c00088a0:	83 c4 10             	add    esp,0x10
c00088a3:	ba 06 00 00 00       	mov    edx,0x6
c00088a8:	85 c0                	test   eax,eax
c00088aa:	78 21                	js     c00088cd <src_set_ratio+0x64>
c00088ac:	68 00 00 70 40       	push   0x40700000
c00088b1:	6a 00                	push   0x0
c00088b3:	57                   	push   edi
c00088b4:	56                   	push   esi
c00088b5:	e8 77 cb 01 00       	call   c0025431 <__gtdf2>
c00088ba:	83 c4 10             	add    esp,0x10
c00088bd:	ba 06 00 00 00       	mov    edx,0x6
c00088c2:	85 c0                	test   eax,eax
c00088c4:	7f 07                	jg     c00088cd <src_set_ratio+0x64>
c00088c6:	89 33                	mov    DWORD PTR [ebx],esi
c00088c8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088cb:	31 d2                	xor    edx,edx
c00088cd:	5b                   	pop    ebx
c00088ce:	89 d0                	mov    eax,edx
c00088d0:	5e                   	pop    esi
c00088d1:	5f                   	pop    edi
c00088d2:	c3                   	ret    

c00088d3 <src_get_channels>:
c00088d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d7:	b8 02 00 00 00       	mov    eax,0x2
c00088dc:	85 d2                	test   edx,edx
c00088de:	74 14                	je     c00088f4 <src_get_channels+0x21>
c00088e0:	b8 07 00 00 00       	mov    eax,0x7
c00088e5:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e9:	74 09                	je     c00088f4 <src_get_channels+0x21>
c00088eb:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ef:	74 03                	je     c00088f4 <src_get_channels+0x21>
c00088f1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f4:	c3                   	ret    

c00088f5 <src_reset>:
c00088f5:	53                   	push   ebx
c00088f6:	b8 02 00 00 00       	mov    eax,0x2
c00088fb:	83 ec 08             	sub    esp,0x8
c00088fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008902:	85 db                	test   ebx,ebx
c0008904:	74 36                	je     c000893c <src_reset+0x47>
c0008906:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008909:	85 c0                	test   eax,eax
c000890b:	74 09                	je     c0008916 <src_reset+0x21>
c000890d:	83 ec 0c             	sub    esp,0xc
c0008910:	53                   	push   ebx
c0008911:	ff d0                	call   eax
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	31 c0                	xor    eax,eax
c0008918:	31 d2                	xor    edx,edx
c000891a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891d:	89 03                	mov    DWORD PTR [ebx],eax
c000891f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008922:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008925:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008933:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000893a:	31 c0                	xor    eax,eax
c000893c:	83 c4 08             	add    esp,0x8
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    

c0008941 <src_new>:
c0008941:	57                   	push   edi
c0008942:	56                   	push   esi
c0008943:	53                   	push   ebx
c0008944:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008948:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894c:	85 f6                	test   esi,esi
c000894e:	74 73                	je     c00089c3 <src_new+0x82>
c0008950:	85 ff                	test   edi,edi
c0008952:	7f 08                	jg     c000895c <src_new+0x1b>
c0008954:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000895a:	eb 1e                	jmp    c000897a <src_new+0x39>
c000895c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 3c                	push   0x3c
c0008966:	6a 01                	push   0x1
c0008968:	e8 8f 6b 00 00       	call   c000f4fc <calloc>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	89 c3                	mov    ebx,eax
c0008972:	85 c0                	test   eax,eax
c0008974:	75 10                	jne    c0008986 <src_new+0x45>
c0008976:	85 f6                	test   esi,esi
c0008978:	75 04                	jne    c000897e <src_new+0x3d>
c000897a:	31 db                	xor    ebx,ebx
c000897c:	eb 4b                	jmp    c00089c9 <src_new+0x88>
c000897e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008984:	eb 43                	jmp    c00089c9 <src_new+0x88>
c0008986:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008989:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008990:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008994:	e8 1d fb ff ff       	call   c00084b6 <psrc_set_converter>
c0008999:	85 c0                	test   eax,eax
c000899b:	74 18                	je     c00089b5 <src_new+0x74>
c000899d:	85 f6                	test   esi,esi
c000899f:	74 06                	je     c00089a7 <src_new+0x66>
c00089a1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a7:	83 ec 0c             	sub    esp,0xc
c00089aa:	53                   	push   ebx
c00089ab:	31 db                	xor    ebx,ebx
c00089ad:	e8 2a 6b 00 00       	call   c000f4dc <free>
c00089b2:	83 c4 10             	add    esp,0x10
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	e8 37 ff ff ff       	call   c00088f5 <src_reset>
c00089be:	83 c4 10             	add    esp,0x10
c00089c1:	eb 06                	jmp    c00089c9 <src_new+0x88>
c00089c3:	85 ff                	test   edi,edi
c00089c5:	7f 9b                	jg     c0008962 <src_new+0x21>
c00089c7:	eb b1                	jmp    c000897a <src_new+0x39>
c00089c9:	89 d8                	mov    eax,ebx
c00089cb:	5b                   	pop    ebx
c00089cc:	5e                   	pop    esi
c00089cd:	5f                   	pop    edi
c00089ce:	c3                   	ret    

c00089cf <src_callback_new>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	53                   	push   ebx
c00089d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089da:	85 f6                	test   esi,esi
c00089dc:	75 0e                	jne    c00089ec <src_callback_new+0x1d>
c00089de:	31 db                	xor    ebx,ebx
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 47                	je     c0008a2b <src_callback_new+0x5c>
c00089e4:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089ea:	eb 3f                	jmp    c0008a2b <src_callback_new+0x5c>
c00089ec:	85 c0                	test   eax,eax
c00089ee:	74 06                	je     c00089f6 <src_callback_new+0x27>
c00089f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f6:	51                   	push   ecx
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a00:	e8 3c ff ff ff       	call   c0008941 <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	89 c3                	mov    ebx,eax
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	74 1d                	je     c0008a2b <src_callback_new+0x5c>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	50                   	push   eax
c0008a12:	e8 de fe ff ff       	call   c00088f5 <src_reset>
c0008a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a1b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a22:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a25:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	89 d8                	mov    eax,ebx
c0008a2d:	5a                   	pop    edx
c0008a2e:	5b                   	pop    ebx
c0008a2f:	5e                   	pop    esi
c0008a30:	c3                   	ret    

c0008a31 <src_get_name>:
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 14             	sub    esp,0x14
c0008a35:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a39:	53                   	push   ebx
c0008a3a:	e8 d0 4f 00 00       	call   c000da0f <sinc_get_name>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 1d                	jne    c0008a63 <src_get_name+0x32>
c0008a46:	83 ec 0c             	sub    esp,0xc
c0008a49:	53                   	push   ebx
c0008a4a:	e8 80 57 00 00       	call   c000e1cf <zoh_get_name>
c0008a4f:	83 c4 10             	add    esp,0x10
c0008a52:	85 c0                	test   eax,eax
c0008a54:	75 0d                	jne    c0008a63 <src_get_name+0x32>
c0008a56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a5a:	83 c4 08             	add    esp,0x8
c0008a5d:	5b                   	pop    ebx
c0008a5e:	e9 74 0b 00 00       	jmp    c00095d7 <linear_get_name>
c0008a63:	83 c4 08             	add    esp,0x8
c0008a66:	5b                   	pop    ebx
c0008a67:	c3                   	ret    

c0008a68 <src_get_description>:
c0008a68:	53                   	push   ebx
c0008a69:	83 ec 14             	sub    esp,0x14
c0008a6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a70:	53                   	push   ebx
c0008a71:	e8 ac 4f 00 00       	call   c000da22 <sinc_get_description>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	85 c0                	test   eax,eax
c0008a7b:	75 1d                	jne    c0008a9a <src_get_description+0x32>
c0008a7d:	83 ec 0c             	sub    esp,0xc
c0008a80:	53                   	push   ebx
c0008a81:	e8 58 57 00 00       	call   c000e1de <zoh_get_description>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 0d                	jne    c0008a9a <src_get_description+0x32>
c0008a8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a91:	83 c4 08             	add    esp,0x8
c0008a94:	5b                   	pop    ebx
c0008a95:	e9 4c 0b 00 00       	jmp    c00095e6 <linear_get_description>
c0008a9a:	83 c4 08             	add    esp,0x8
c0008a9d:	5b                   	pop    ebx
c0008a9e:	c3                   	ret    

c0008a9f <src_get_version>:
c0008a9f:	b8 a0 67 02 c0       	mov    eax,0xc00267a0
c0008aa4:	c3                   	ret    

c0008aa5 <src_is_valid_ratio>:
c0008aa5:	83 ec 1c             	sub    esp,0x1c
c0008aa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab8:	68 00 00 70 3f       	push   0x3f700000
c0008abd:	6a 00                	push   0x0
c0008abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac7:	e8 83 c9 01 00       	call   c002544f <__ltdf2>
c0008acc:	83 c4 10             	add    esp,0x10
c0008acf:	31 d2                	xor    edx,edx
c0008ad1:	85 c0                	test   eax,eax
c0008ad3:	78 1e                	js     c0008af3 <src_is_valid_ratio+0x4e>
c0008ad5:	68 00 00 70 40       	push   0x40700000
c0008ada:	6a 00                	push   0x0
c0008adc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae4:	e8 48 c9 01 00       	call   c0025431 <__gtdf2>
c0008ae9:	31 d2                	xor    edx,edx
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	85 c0                	test   eax,eax
c0008af0:	0f 9e c2             	setle  dl
c0008af3:	89 d0                	mov    eax,edx
c0008af5:	83 c4 1c             	add    esp,0x1c
c0008af8:	c3                   	ret    

c0008af9 <src_error>:
c0008af9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afd:	31 c0                	xor    eax,eax
c0008aff:	85 d2                	test   edx,edx
c0008b01:	74 03                	je     c0008b06 <src_error+0xd>
c0008b03:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b06:	c3                   	ret    

c0008b07 <src_strerror>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	83 fa 17             	cmp    edx,0x17
c0008b10:	77 07                	ja     c0008b19 <src_strerror+0x12>
c0008b12:	8b 04 95 00 6c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9400]
c0008b19:	c3                   	ret    

c0008b1a <src_simple>:
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 18             	sub    esp,0x18
c0008b1f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b27:	50                   	push   eax
c0008b28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b30:	e8 0c fe ff ff       	call   c0008941 <src_new>
c0008b35:	83 c4 10             	add    esp,0x10
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	75 06                	jne    c0008b42 <src_simple+0x28>
c0008b3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b40:	eb 25                	jmp    c0008b67 <src_simple+0x4d>
c0008b42:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b49:	89 c3                	mov    ebx,eax
c0008b4b:	50                   	push   eax
c0008b4c:	50                   	push   eax
c0008b4d:	56                   	push   esi
c0008b4e:	53                   	push   ebx
c0008b4f:	e8 e2 f9 ff ff       	call   c0008536 <src_process>
c0008b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b5b:	e8 9a f9 ff ff       	call   c00084fa <src_delete>
c0008b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b64:	83 c4 10             	add    esp,0x10
c0008b67:	83 c4 14             	add    esp,0x14
c0008b6a:	5b                   	pop    ebx
c0008b6b:	5e                   	pop    esi
c0008b6c:	c3                   	ret    

c0008b6d <src_short_to_float_array>:
c0008b6d:	53                   	push   ebx
c0008b6e:	83 ec 18             	sub    esp,0x18
c0008b71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b75:	85 db                	test   ebx,ebx
c0008b77:	74 54                	je     c0008bcd <src_short_to_float_array+0x60>
c0008b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7d:	4b                   	dec    ebx
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b85:	50                   	push   eax
c0008b86:	e8 58 c6 01 00       	call   c00251e3 <__floatsidf>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b96:	68 00 00 00 3f       	push   0x3f000000
c0008b9b:	6a 00                	push   0x0
c0008b9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba5:	e8 d6 bf 01 00       	call   c0024b80 <__muldf3>
c0008baa:	59                   	pop    ecx
c0008bab:	59                   	pop    ecx
c0008bac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbc:	e8 92 c8 01 00       	call   c0025453 <__truncdfsf2>
c0008bc1:	83 c4 10             	add    esp,0x10
c0008bc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bcb:	eb a8                	jmp    c0008b75 <src_short_to_float_array+0x8>
c0008bcd:	83 c4 18             	add    esp,0x18
c0008bd0:	5b                   	pop    ebx
c0008bd1:	c3                   	ret    

c0008bd2 <src_float_to_short_array>:
c0008bd2:	56                   	push   esi
c0008bd3:	53                   	push   ebx
c0008bd4:	83 ec 14             	sub    esp,0x14
c0008bd7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bdb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bdf:	85 db                	test   ebx,ebx
c0008be1:	0f 84 a4 00 00 00    	je     c0008c8b <src_float_to_short_array+0xb9>
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	4b                   	dec    ebx
c0008beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bef:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf2:	e8 80 c9 01 00       	call   c0025577 <__extendsfdf2>
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c02:	68 00 00 e0 41       	push   0x41e00000
c0008c07:	6a 00                	push   0x0
c0008c09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c11:	e8 6a bf 01 00       	call   c0024b80 <__muldf3>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c21:	68 ff ff df 41       	push   0x41dfffff
c0008c26:	68 00 00 c0 ff       	push   0xffc00000
c0008c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c33:	e8 15 c8 01 00       	call   c002544d <__gedf2>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	85 c0                	test   eax,eax
c0008c3d:	78 08                	js     c0008c47 <src_float_to_short_array+0x75>
c0008c3f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c45:	eb 98                	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c47:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4c:	6a 00                	push   0x0
c0008c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c56:	e8 f6 c7 01 00       	call   c0025451 <__ledf2>
c0008c5b:	83 c4 10             	add    esp,0x10
c0008c5e:	85 c0                	test   eax,eax
c0008c60:	7f 0b                	jg     c0008c6d <src_float_to_short_array+0x9b>
c0008c62:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c68:	e9 72 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c6d:	50                   	push   eax
c0008c6e:	50                   	push   eax
c0008c6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c77:	e8 84 c9 01 00       	call   c0025600 <lrint>
c0008c7c:	83 c4 10             	add    esp,0x10
c0008c7f:	c1 f8 10             	sar    eax,0x10
c0008c82:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c86:	e9 54 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c8b:	83 c4 14             	add    esp,0x14
c0008c8e:	5b                   	pop    ebx
c0008c8f:	5e                   	pop    esi
c0008c90:	c3                   	ret    

c0008c91 <src_int_to_float_array>:
c0008c91:	53                   	push   ebx
c0008c92:	83 ec 18             	sub    esp,0x18
c0008c95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c99:	85 db                	test   ebx,ebx
c0008c9b:	74 52                	je     c0008cef <src_int_to_float_array+0x5e>
c0008c9d:	83 ec 0c             	sub    esp,0xc
c0008ca0:	4b                   	dec    ebx
c0008ca1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca8:	e8 36 c5 01 00       	call   c00251e3 <__floatsidf>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb8:	68 00 00 00 3e       	push   0x3e000000
c0008cbd:	6a 00                	push   0x0
c0008cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc7:	e8 b4 be 01 00       	call   c0024b80 <__muldf3>
c0008ccc:	59                   	pop    ecx
c0008ccd:	59                   	pop    ecx
c0008cce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cde:	e8 70 c7 01 00       	call   c0025453 <__truncdfsf2>
c0008ce3:	83 c4 10             	add    esp,0x10
c0008ce6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cea:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ced:	eb aa                	jmp    c0008c99 <src_int_to_float_array+0x8>
c0008cef:	83 c4 18             	add    esp,0x18
c0008cf2:	5b                   	pop    ebx
c0008cf3:	c3                   	ret    

c0008cf4 <src_float_to_int_array>:
c0008cf4:	56                   	push   esi
c0008cf5:	53                   	push   ebx
c0008cf6:	83 ec 14             	sub    esp,0x14
c0008cf9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d01:	85 db                	test   ebx,ebx
c0008d03:	0f 84 a2 00 00 00    	je     c0008dab <src_float_to_int_array+0xb7>
c0008d09:	83 ec 0c             	sub    esp,0xc
c0008d0c:	4b                   	dec    ebx
c0008d0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d11:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d14:	e8 5e c8 01 00       	call   c0025577 <__extendsfdf2>
c0008d19:	83 c4 10             	add    esp,0x10
c0008d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d24:	68 00 00 e0 41       	push   0x41e00000
c0008d29:	6a 00                	push   0x0
c0008d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d33:	e8 48 be 01 00       	call   c0024b80 <__muldf3>
c0008d38:	83 c4 10             	add    esp,0x10
c0008d3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d43:	68 ff ff df 41       	push   0x41dfffff
c0008d48:	68 00 00 c0 ff       	push   0xffc00000
c0008d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d55:	e8 f3 c6 01 00       	call   c002544d <__gedf2>
c0008d5a:	83 c4 10             	add    esp,0x10
c0008d5d:	85 c0                	test   eax,eax
c0008d5f:	78 09                	js     c0008d6a <src_float_to_int_array+0x76>
c0008d61:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d68:	eb 97                	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d6a:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6f:	6a 00                	push   0x0
c0008d71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d79:	e8 d3 c6 01 00       	call   c0025451 <__ledf2>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	85 c0                	test   eax,eax
c0008d83:	7f 0c                	jg     c0008d91 <src_float_to_int_array+0x9d>
c0008d85:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8c:	e9 70 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d91:	50                   	push   eax
c0008d92:	50                   	push   eax
c0008d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9b:	e8 60 c8 01 00       	call   c0025600 <lrint>
c0008da0:	83 c4 10             	add    esp,0x10
c0008da3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da6:	e9 56 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008dab:	83 c4 14             	add    esp,0x14
c0008dae:	5b                   	pop    ebx
c0008daf:	5e                   	pop    esi
c0008db0:	c3                   	ret    

c0008db1 <linear_vari_process>:
c0008db1:	55                   	push   ebp
c0008db2:	31 d2                	xor    edx,edx
c0008db4:	57                   	push   edi
c0008db5:	56                   	push   esi
c0008db6:	53                   	push   ebx
c0008db7:	83 ec 3c             	sub    esp,0x3c
c0008dba:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc2:	0f 8e d3 07 00 00    	jle    c000959b <linear_vari_process+0x7ea>
c0008dc8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dcc:	ba 05 00 00 00       	mov    edx,0x5
c0008dd1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd4:	85 db                	test   ebx,ebx
c0008dd6:	0f 84 bf 07 00 00    	je     c000959b <linear_vari_process+0x7ea>
c0008ddc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ddf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de3:	74 19                	je     c0008dfe <linear_vari_process+0x4d>
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	39 c2                	cmp    edx,eax
c0008de9:	7d 0c                	jge    c0008df7 <linear_vari_process+0x46>
c0008deb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ded:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008df0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df4:	42                   	inc    edx
c0008df5:	eb f0                	jmp    c0008de7 <linear_vari_process+0x36>
c0008df7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfe:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e01:	0f af d0             	imul   edx,eax
c0008e04:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e07:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e0b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e12:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2d:	68 00 00 70 3f       	push   0x3f700000
c0008e32:	6a 00                	push   0x0
c0008e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3c:	e8 0e c6 01 00       	call   c002544f <__ltdf2>
c0008e41:	83 c4 10             	add    esp,0x10
c0008e44:	ba 16 00 00 00       	mov    edx,0x16
c0008e49:	85 c0                	test   eax,eax
c0008e4b:	0f 88 4a 07 00 00    	js     c000959b <linear_vari_process+0x7ea>
c0008e51:	68 00 00 70 40       	push   0x40700000
c0008e56:	6a 00                	push   0x0
c0008e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e60:	e8 cc c5 01 00       	call   c0025431 <__gtdf2>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	ba 16 00 00 00       	mov    edx,0x16
c0008e6d:	85 c0                	test   eax,eax
c0008e6f:	0f 8f 26 07 00 00    	jg     c000959b <linear_vari_process+0x7ea>
c0008e75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 b4 c5 01 00       	call   c002544f <__ltdf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	0f 89 89 02 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008ea6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eac:	0f 8d 7d 02 00 00    	jge    c000912f <linear_vari_process+0x37e>
c0008eb2:	83 ec 0c             	sub    esp,0xc
c0008eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb8:	e8 26 c3 01 00       	call   c00251e3 <__floatsidf>
c0008ebd:	83 c4 10             	add    esp,0x10
c0008ec0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec7:	68 00 00 f0 3f       	push   0x3ff00000
c0008ecc:	6a 00                	push   0x0
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed6:	e8 28 b6 01 00       	call   c0024503 <__adddf3>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee6:	52                   	push   edx
c0008ee7:	50                   	push   eax
c0008ee8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ef0:	e8 8b bc 01 00       	call   c0024b80 <__muldf3>
c0008ef5:	5d                   	pop    ebp
c0008ef6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008efa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f01:	e8 dd c2 01 00       	call   c00251e3 <__floatsidf>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f11:	52                   	push   edx
c0008f12:	50                   	push   eax
c0008f13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f1b:	e8 e3 b5 01 00       	call   c0024503 <__adddf3>
c0008f20:	59                   	pop    ecx
c0008f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f25:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f29:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2c:	e8 b2 c2 01 00       	call   c00251e3 <__floatsidf>
c0008f31:	83 c4 10             	add    esp,0x10
c0008f34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3c:	52                   	push   edx
c0008f3d:	50                   	push   eax
c0008f3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f46:	e8 02 c5 01 00       	call   c002544d <__gedf2>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	85 c0                	test   eax,eax
c0008f50:	0f 89 d9 01 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008f56:	85 ff                	test   edi,edi
c0008f58:	0f 8e f4 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008f5e:	83 ec 10             	sub    esp,0x10
c0008f61:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f64:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6e:	ff 30                	push   DWORD PTR [eax]
c0008f70:	e8 df bb 01 00       	call   c0024b54 <__subdf3>
c0008f75:	83 c4 18             	add    esp,0x18
c0008f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f80:	52                   	push   edx
c0008f81:	50                   	push   eax
c0008f82:	e8 59 c6 01 00       	call   c00255e0 <fabs>
c0008f87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f8b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f97:	68 23 42 92 0c       	push   0xc924223
c0008f9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa4:	e8 88 c4 01 00       	call   c0025431 <__gtdf2>
c0008fa9:	83 c4 10             	add    esp,0x10
c0008fac:	85 c0                	test   eax,eax
c0008fae:	0f 8e 9e 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008fb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc4:	52                   	push   edx
c0008fc5:	50                   	push   eax
c0008fc6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fcc:	e8 83 bb 01 00       	call   c0024b54 <__subdf3>
c0008fd1:	59                   	pop    ecx
c0008fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdd:	e8 01 c2 01 00       	call   c00251e3 <__floatsidf>
c0008fe2:	83 c4 10             	add    esp,0x10
c0008fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fed:	52                   	push   edx
c0008fee:	50                   	push   eax
c0008fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff7:	e8 84 bb 01 00       	call   c0024b80 <__muldf3>
c0008ffc:	5f                   	pop    edi
c0008ffd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009001:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009005:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009008:	e8 d6 c1 01 00       	call   c00251e3 <__floatsidf>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009018:	52                   	push   edx
c0009019:	50                   	push   eax
c000901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009022:	e8 3d be 01 00       	call   c0024e64 <__divdf3>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009032:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009036:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 bc b4 01 00       	call   c0024503 <__adddf3>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009052:	31 ff                	xor    edi,edi
c0009054:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009057:	0f 8e 9d 00 00 00    	jle    c00090fa <linear_vari_process+0x349>
c000905d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009060:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009064:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009067:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000906b:	89 04 24             	mov    DWORD PTR [esp],eax
c000906e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009070:	52                   	push   edx
c0009071:	52                   	push   edx
c0009072:	55                   	push   ebp
c0009073:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009076:	47                   	inc    edi
c0009077:	e8 1c ae 01 00       	call   c0023e98 <__subsf3>
c000907c:	89 04 24             	mov    DWORD PTR [esp],eax
c000907f:	e8 f3 c4 01 00       	call   c0025577 <__extendsfdf2>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000908b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909f:	e8 dc ba 01 00       	call   c0024b80 <__muldf3>
c00090a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090af:	e8 c3 c4 01 00       	call   c0025577 <__extendsfdf2>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090bf:	52                   	push   edx
c00090c0:	50                   	push   eax
c00090c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c9:	e8 35 b4 01 00       	call   c0024503 <__adddf3>
c00090ce:	59                   	pop    ecx
c00090cf:	5d                   	pop    ebp
c00090d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e0:	e8 6e c3 01 00       	call   c0025453 <__truncdfsf2>
c00090e5:	83 c4 10             	add    esp,0x10
c00090e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ef:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f5:	e9 5a ff ff ff       	jmp    c0009054 <linear_vari_process+0x2a3>
c00090fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009102:	68 00 00 f0 3f       	push   0x3ff00000
c0009107:	6a 00                	push   0x0
c0009109:	e8 56 bd 01 00       	call   c0024e64 <__divdf3>
c000910e:	83 c4 10             	add    esp,0x10
c0009111:	89 04 24             	mov    DWORD PTR [esp],eax
c0009114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009118:	52                   	push   edx
c0009119:	50                   	push   eax
c000911a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009122:	e8 dc b3 01 00       	call   c0024503 <__adddf3>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	e9 50 fd ff ff       	jmp    c0008e7f <linear_vari_process+0xce>
c000912f:	50                   	push   eax
c0009130:	50                   	push   eax
c0009131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009139:	e8 c2 c4 01 00       	call   c0025600 <lrint>
c000913e:	83 ec 0c             	sub    esp,0xc
c0009141:	50                   	push   eax
c0009142:	e8 9c c0 01 00       	call   c00251e3 <__floatsidf>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009152:	52                   	push   edx
c0009153:	50                   	push   eax
c0009154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915c:	e8 f3 b9 01 00       	call   c0024b54 <__subdf3>
c0009161:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009169:	83 c4 20             	add    esp,0x20
c000916c:	6a 00                	push   0x0
c000916e:	6a 00                	push   0x0
c0009170:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009174:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009178:	e8 d2 c2 01 00       	call   c002544f <__ltdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	85 c0                	test   eax,eax
c0009182:	79 1e                	jns    c00091a2 <linear_vari_process+0x3f1>
c0009184:	68 00 00 f0 3f       	push   0x3ff00000
c0009189:	6a 00                	push   0x0
c000918b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009193:	e8 6b b3 01 00       	call   c0024503 <__adddf3>
c0009198:	83 c4 10             	add    esp,0x10
c000919b:	89 04 24             	mov    DWORD PTR [esp],eax
c000919e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a5:	83 ec 10             	sub    esp,0x10
c00091a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b8:	e8 97 b9 01 00       	call   c0024b54 <__subdf3>
c00091bd:	83 c4 18             	add    esp,0x18
c00091c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c8:	52                   	push   edx
c00091c9:	50                   	push   eax
c00091ca:	e8 31 c4 01 00       	call   c0025600 <lrint>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	0f af f8             	imul   edi,eax
c00091d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d8:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091db:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091de:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091e1:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e8:	0f 8d 13 03 00 00    	jge    c0009501 <linear_vari_process+0x750>
c00091ee:	83 ec 0c             	sub    esp,0xc
c00091f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f4:	e8 ea bf 01 00       	call   c00251e3 <__floatsidf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009204:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009208:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009214:	e8 67 b9 01 00       	call   c0024b80 <__muldf3>
c0009219:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009224:	e8 ba bf 01 00       	call   c00251e3 <__floatsidf>
c0009229:	83 c4 10             	add    esp,0x10
c000922c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009234:	52                   	push   edx
c0009235:	50                   	push   eax
c0009236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923e:	e8 c0 b2 01 00       	call   c0024503 <__adddf3>
c0009243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009246:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924e:	e8 90 bf 01 00       	call   c00251e3 <__floatsidf>
c0009253:	83 c4 10             	add    esp,0x10
c0009256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925e:	52                   	push   edx
c000925f:	50                   	push   eax
c0009260:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009268:	e8 e2 c1 01 00       	call   c002544f <__ltdf2>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	85 c0                	test   eax,eax
c0009272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009276:	0f 89 85 02 00 00    	jns    c0009501 <linear_vari_process+0x750>
c000927c:	85 c9                	test   ecx,ecx
c000927e:	0f 8e f5 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c0009284:	83 ec 10             	sub    esp,0x10
c0009287:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000928a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009291:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009294:	ff 30                	push   DWORD PTR [eax]
c0009296:	e8 b9 b8 01 00       	call   c0024b54 <__subdf3>
c000929b:	83 c4 18             	add    esp,0x18
c000929e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a6:	52                   	push   edx
c00092a7:	50                   	push   eax
c00092a8:	e8 33 c3 01 00       	call   c00255e0 <fabs>
c00092ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bd:	68 23 42 92 0c       	push   0xc924223
c00092c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ca:	e8 62 c1 01 00       	call   c0025431 <__gtdf2>
c00092cf:	83 c4 10             	add    esp,0x10
c00092d2:	85 c0                	test   eax,eax
c00092d4:	0f 8e 9f 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c00092da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092eb:	52                   	push   edx
c00092ec:	50                   	push   eax
c00092ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f3:	e8 5c b8 01 00       	call   c0024b54 <__subdf3>
c00092f8:	5f                   	pop    edi
c00092f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009301:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009304:	e8 da be 01 00       	call   c00251e3 <__floatsidf>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009314:	52                   	push   edx
c0009315:	50                   	push   eax
c0009316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931e:	e8 5d b8 01 00       	call   c0024b80 <__muldf3>
c0009323:	5d                   	pop    ebp
c0009324:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009328:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932f:	e8 af be 01 00       	call   c00251e3 <__floatsidf>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933f:	52                   	push   edx
c0009340:	50                   	push   eax
c0009341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009349:	e8 16 bb 01 00       	call   c0024e64 <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009355:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009359:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009369:	e8 95 b1 01 00       	call   c0024503 <__adddf3>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009375:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009379:	31 ff                	xor    edi,edi
c000937b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937e:	39 f8                	cmp    eax,edi
c0009380:	0f 8e ac 00 00 00    	jle    c0009432 <linear_vari_process+0x681>
c0009386:	8b 16                	mov    edx,DWORD PTR [esi]
c0009388:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000938b:	29 c1                	sub    ecx,eax
c000938d:	89 c8                	mov    eax,ecx
c000938f:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009392:	01 f8                	add    eax,edi
c0009394:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009398:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000939b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a5:	51                   	push   ecx
c00093a6:	01 f8                	add    eax,edi
c00093a8:	51                   	push   ecx
c00093a9:	47                   	inc    edi
c00093aa:	55                   	push   ebp
c00093ab:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ae:	e8 e5 aa 01 00       	call   c0023e98 <__subsf3>
c00093b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b6:	e8 bc c1 01 00       	call   c0025577 <__extendsfdf2>
c00093bb:	83 c4 10             	add    esp,0x10
c00093be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ca:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d6:	e8 a5 b7 01 00       	call   c0024b80 <__muldf3>
c00093db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e6:	e8 8c c1 01 00       	call   c0025577 <__extendsfdf2>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f6:	52                   	push   edx
c00093f7:	50                   	push   eax
c00093f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009400:	e8 fe b0 01 00       	call   c0024503 <__adddf3>
c0009405:	5d                   	pop    ebp
c0009406:	59                   	pop    ecx
c0009407:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000940b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009413:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009417:	e8 37 c0 01 00       	call   c0025453 <__truncdfsf2>
c000941c:	83 c4 10             	add    esp,0x10
c000941f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009423:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009427:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000942a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942d:	e9 49 ff ff ff       	jmp    c000937b <linear_vari_process+0x5ca>
c0009432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000943a:	68 00 00 f0 3f       	push   0x3ff00000
c000943f:	6a 00                	push   0x0
c0009441:	e8 1e ba 01 00       	call   c0024e64 <__divdf3>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009461:	e8 9d b0 01 00       	call   c0024503 <__adddf3>
c0009466:	59                   	pop    ecx
c0009467:	5f                   	pop    edi
c0009468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009478:	e8 83 c1 01 00       	call   c0025600 <lrint>
c000947d:	83 ec 0c             	sub    esp,0xc
c0009480:	50                   	push   eax
c0009481:	e8 5d bd 01 00       	call   c00251e3 <__floatsidf>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009491:	52                   	push   edx
c0009492:	50                   	push   eax
c0009493:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949b:	e8 b4 b6 01 00       	call   c0024b54 <__subdf3>
c00094a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a8:	83 c4 20             	add    esp,0x20
c00094ab:	6a 00                	push   0x0
c00094ad:	6a 00                	push   0x0
c00094af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b7:	e8 93 bf 01 00       	call   c002544f <__ltdf2>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	85 c0                	test   eax,eax
c00094c1:	79 1e                	jns    c00094e1 <linear_vari_process+0x730>
c00094c3:	68 00 00 f0 3f       	push   0x3ff00000
c00094c8:	6a 00                	push   0x0
c00094ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d2:	e8 2c b0 01 00       	call   c0024503 <__adddf3>
c00094d7:	83 c4 10             	add    esp,0x10
c00094da:	89 04 24             	mov    DWORD PTR [esp],eax
c00094dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e4:	83 ec 10             	sub    esp,0x10
c00094e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f7:	e8 58 b6 01 00       	call   c0024b54 <__subdf3>
c00094fc:	e9 bc fc ff ff       	jmp    c00091bd <linear_vari_process+0x40c>
c0009501:	39 fd                	cmp    ebp,edi
c0009503:	7d 38                	jge    c000953d <linear_vari_process+0x78c>
c0009505:	83 ec 0c             	sub    esp,0xc
c0009508:	89 f8                	mov    eax,edi
c000950a:	29 e8                	sub    eax,ebp
c000950c:	99                   	cdq    
c000950d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009510:	50                   	push   eax
c0009511:	e8 cd bc 01 00       	call   c00251e3 <__floatsidf>
c0009516:	83 c4 10             	add    esp,0x10
c0009519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009521:	52                   	push   edx
c0009522:	50                   	push   eax
c0009523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009527:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000952b:	e8 d3 af 01 00       	call   c0024503 <__adddf3>
c0009530:	83 c4 10             	add    esp,0x10
c0009533:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009536:	89 04 24             	mov    DWORD PTR [esp],eax
c0009539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009541:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009544:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009548:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000954b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009551:	85 c0                	test   eax,eax
c0009553:	7f 29                	jg     c000957e <linear_vari_process+0x7cd>
c0009555:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009561:	89 01                	mov    DWORD PTR [ecx],eax
c0009563:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009566:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009569:	99                   	cdq    
c000956a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009570:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009573:	99                   	cdq    
c0009574:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009577:	31 d2                	xor    edx,edx
c0009579:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957c:	eb 1d                	jmp    c000959b <linear_vari_process+0x7ea>
c000957e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009581:	31 d2                	xor    edx,edx
c0009583:	29 c8                	sub    eax,ecx
c0009585:	c1 e0 02             	shl    eax,0x2
c0009588:	39 d1                	cmp    ecx,edx
c000958a:	7e c9                	jle    c0009555 <linear_vari_process+0x7a4>
c000958c:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958e:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009591:	83 c0 04             	add    eax,0x4
c0009594:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009598:	42                   	inc    edx
c0009599:	eb ed                	jmp    c0009588 <linear_vari_process+0x7d7>
c000959b:	83 c4 3c             	add    esp,0x3c
c000959e:	89 d0                	mov    eax,edx
c00095a0:	5b                   	pop    ebx
c00095a1:	5e                   	pop    esi
c00095a2:	5f                   	pop    edi
c00095a3:	5d                   	pop    ebp
c00095a4:	c3                   	ret    

c00095a5 <linear_reset>:
c00095a5:	83 ec 0c             	sub    esp,0xc
c00095a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ac:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095af:	85 c0                	test   eax,eax
c00095b1:	74 20                	je     c00095d3 <linear_reset+0x2e>
c00095b3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b6:	83 c0 1c             	add    eax,0x1c
c00095b9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095bc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c3:	c1 e2 02             	shl    edx,0x2
c00095c6:	51                   	push   ecx
c00095c7:	52                   	push   edx
c00095c8:	6a 00                	push   0x0
c00095ca:	50                   	push   eax
c00095cb:	e8 ad 70 ff ff       	call   c000067d <memset>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	83 c4 0c             	add    esp,0xc
c00095d6:	c3                   	ret    

c00095d7 <linear_get_name>:
c00095d7:	31 c0                	xor    eax,eax
c00095d9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095de:	75 05                	jne    c00095e5 <linear_get_name+0xe>
c00095e0:	b8 60 6c 02 c0       	mov    eax,0xc0026c60
c00095e5:	c3                   	ret    

c00095e6 <linear_get_description>:
c00095e6:	31 c0                	xor    eax,eax
c00095e8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ed:	75 05                	jne    c00095f4 <linear_get_description+0xe>
c00095ef:	b8 74 6c 02 c0       	mov    eax,0xc0026c74
c00095f4:	c3                   	ret    

c00095f5 <linear_set_converter>:
c00095f5:	53                   	push   ebx
c00095f6:	b8 0a 00 00 00       	mov    eax,0xa
c00095fb:	83 ec 08             	sub    esp,0x8
c00095fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009602:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009607:	75 6e                	jne    c0009677 <linear_set_converter+0x82>
c0009609:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960c:	85 c0                	test   eax,eax
c000960e:	74 13                	je     c0009623 <linear_set_converter+0x2e>
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	50                   	push   eax
c0009614:	e8 c3 5e 00 00       	call   c000f4dc <free>
c0009619:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009620:	83 c4 10             	add    esp,0x10
c0009623:	50                   	push   eax
c0009624:	50                   	push   eax
c0009625:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009628:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962f:	50                   	push   eax
c0009630:	6a 01                	push   0x1
c0009632:	e8 c5 5e 00 00       	call   c000f4fc <calloc>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 c2                	mov    edx,eax
c000963c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963f:	85 d2                	test   edx,edx
c0009641:	b8 01 00 00 00       	mov    eax,0x1
c0009646:	74 2f                	je     c0009677 <linear_set_converter+0x82>
c0009648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009651:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009657:	c7 43 24 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008db1
c000965e:	c7 43 20 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008db1
c0009665:	c7 43 28 a5 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a5
c000966c:	53                   	push   ebx
c000966d:	e8 33 ff ff ff       	call   c00095a5 <linear_reset>
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	31 c0                	xor    eax,eax
c0009677:	83 c4 08             	add    esp,0x8
c000967a:	5b                   	pop    ebx
c000967b:	c3                   	ret    

c000967c <int_to_fp>:
c000967c:	c1 e0 0c             	shl    eax,0xc
c000967f:	c3                   	ret    

c0009680 <fp_to_int>:
c0009680:	c1 f8 0c             	sar    eax,0xc
c0009683:	c3                   	ret    

c0009684 <fp_fraction_part>:
c0009684:	25 ff 0f 00 00       	and    eax,0xfff
c0009689:	c3                   	ret    

c000968a <fp_to_double>:
c000968a:	83 ec 1c             	sub    esp,0x1c
c000968d:	e8 f2 ff ff ff       	call   c0009684 <fp_fraction_part>
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	50                   	push   eax
c0009696:	e8 48 bb 01 00       	call   c00251e3 <__floatsidf>
c000969b:	83 c4 10             	add    esp,0x10
c000969e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a6:	68 00 00 30 3f       	push   0x3f300000
c00096ab:	6a 00                	push   0x0
c00096ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b5:	e8 c6 b4 01 00       	call   c0024b80 <__muldf3>
c00096ba:	83 c4 2c             	add    esp,0x2c
c00096bd:	c3                   	ret    

c00096be <calc_output_single>:
c00096be:	55                   	push   ebp
c00096bf:	57                   	push   edi
c00096c0:	56                   	push   esi
c00096c1:	89 c6                	mov    esi,eax
c00096c3:	53                   	push   ebx
c00096c4:	89 d3                	mov    ebx,edx
c00096c6:	83 ec 4c             	sub    esp,0x4c
c00096c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d0:	e8 a7 ff ff ff       	call   c000967c <int_to_fp>
c00096d5:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096dc:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096e0:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e4:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e7:	99                   	cdq    
c00096e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096f0:	f7 fb                	idiv   ebx
c00096f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096fa:	89 da                	mov    edx,ebx
c00096fc:	0f af d0             	imul   edx,eax
c00096ff:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009703:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009707:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000970b:	29 c2                	sub    edx,eax
c000970d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009714:	83 c5 04             	add    ebp,0x4
c0009717:	e8 6e ff ff ff       	call   c000968a <fp_to_double>
c000971c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009720:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	e8 53 ff ff ff       	call   c0009680 <fp_to_int>
c000972d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009730:	52                   	push   edx
c0009731:	52                   	push   edx
c0009732:	51                   	push   ecx
c0009733:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009737:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000973b:	e8 58 a7 01 00       	call   c0023e98 <__subsf3>
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	e8 2f be 01 00       	call   c0025577 <__extendsfdf2>
c0009748:	83 c4 10             	add    esp,0x10
c000974b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000975b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009763:	e8 18 b4 01 00       	call   c0024b80 <__muldf3>
c0009768:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009770:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009773:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009777:	e8 fb bd 01 00       	call   c0025577 <__extendsfdf2>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009791:	e8 6d ad 01 00       	call   c0024503 <__adddf3>
c0009796:	59                   	pop    ecx
c0009797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000979b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979f:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a5:	e8 cd bd 01 00       	call   c0025577 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 bc b3 01 00       	call   c0024b80 <__muldf3>
c00097c4:	83 c4 10             	add    esp,0x10
c00097c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097cf:	52                   	push   edx
c00097d0:	50                   	push   eax
c00097d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d9:	e8 25 ad 01 00       	call   c0024503 <__adddf3>
c00097de:	83 c4 10             	add    esp,0x10
c00097e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e9:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097ed:	0f 89 1d ff ff ff    	jns    c0009710 <calc_output_single+0x52>
c00097f3:	89 d9                	mov    ecx,ebx
c00097f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fd:	89 dd                	mov    ebp,ebx
c00097ff:	29 c8                	sub    eax,ecx
c0009801:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009809:	99                   	cdq    
c000980a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009812:	f7 fb                	idiv   ebx
c0009814:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009818:	0f af e8             	imul   ebp,eax
c000981b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981f:	01 cd                	add    ebp,ecx
c0009821:	8d 34 86             	lea    esi,[esi+eax*4]
c0009824:	89 e8                	mov    eax,ebp
c0009826:	83 ee 04             	sub    esi,0x4
c0009829:	e8 5c fe ff ff       	call   c000968a <fp_to_double>
c000982e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009836:	89 e8                	mov    eax,ebp
c0009838:	29 dd                	sub    ebp,ebx
c000983a:	e8 41 fe ff ff       	call   c0009680 <fp_to_int>
c000983f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009842:	52                   	push   edx
c0009843:	52                   	push   edx
c0009844:	51                   	push   ecx
c0009845:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009849:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984d:	e8 46 a6 01 00       	call   c0023e98 <__subsf3>
c0009852:	89 04 24             	mov    DWORD PTR [esp],eax
c0009855:	e8 1d bd 01 00       	call   c0025577 <__extendsfdf2>
c000985a:	83 c4 10             	add    esp,0x10
c000985d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009861:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009865:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009875:	e8 06 b3 01 00       	call   c0024b80 <__muldf3>
c000987a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009882:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009885:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009889:	e8 e9 bc 01 00       	call   c0025577 <__extendsfdf2>
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009895:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009899:	52                   	push   edx
c000989a:	50                   	push   eax
c000989b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a3:	e8 5b ac 01 00       	call   c0024503 <__adddf3>
c00098a8:	59                   	pop    ecx
c00098a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098b1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b7:	e8 bb bc 01 00       	call   c0025577 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 aa b2 01 00       	call   c0024b80 <__muldf3>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098e1:	52                   	push   edx
c00098e2:	50                   	push   eax
c00098e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098eb:	e8 13 ac 01 00       	call   c0024503 <__adddf3>
c00098f0:	83 c4 10             	add    esp,0x10
c00098f3:	85 ed                	test   ebp,ebp
c00098f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fd:	0f 8f 21 ff ff ff    	jg     c0009824 <calc_output_single+0x166>
c0009903:	52                   	push   edx
c0009904:	50                   	push   eax
c0009905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990d:	e8 f1 ab 01 00       	call   c0024503 <__adddf3>
c0009912:	83 c4 5c             	add    esp,0x5c
c0009915:	5b                   	pop    ebx
c0009916:	5e                   	pop    esi
c0009917:	5f                   	pop    edi
c0009918:	5d                   	pop    ebp
c0009919:	c3                   	ret    

c000991a <calc_output_stereo>:
c000991a:	55                   	push   ebp
c000991b:	89 cd                	mov    ebp,ecx
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	89 c3                	mov    ebx,eax
c0009922:	83 ec 6c             	sub    esp,0x6c
c0009925:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009929:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009930:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009937:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000993b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009942:	e8 35 fd ff ff       	call   c000967c <int_to_fp>
c0009947:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009953:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000995b:	29 c8                	sub    eax,ecx
c000995d:	99                   	cdq    
c000995e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009966:	0f af d0             	imul   edx,eax
c0009969:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996c:	31 d2                	xor    edx,edx
c000996e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009972:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009976:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009979:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997d:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009980:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009984:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009988:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000998b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009990:	29 c1                	sub    ecx,eax
c0009992:	31 c0                	xor    eax,eax
c0009994:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009997:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000999b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999f:	83 c7 08             	add    edi,0x8
c00099a2:	e8 e3 fc ff ff       	call   c000968a <fp_to_double>
c00099a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b3:	e8 c8 fc ff ff       	call   c0009680 <fp_to_int>
c00099b8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099bb:	52                   	push   edx
c00099bc:	52                   	push   edx
c00099bd:	51                   	push   ecx
c00099be:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c6:	e8 cd a4 01 00       	call   c0023e98 <__subsf3>
c00099cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00099ce:	e8 a4 bb 01 00       	call   c0025577 <__extendsfdf2>
c00099d3:	83 c4 10             	add    esp,0x10
c00099d6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099da:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ee:	e8 8d b1 01 00       	call   c0024b80 <__muldf3>
c00099f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fe:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a02:	e8 70 bb 01 00       	call   c0025577 <__extendsfdf2>
c0009a07:	83 c4 10             	add    esp,0x10
c0009a0a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a12:	52                   	push   edx
c0009a13:	50                   	push   eax
c0009a14:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a18:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1c:	e8 e2 aa 01 00       	call   c0024503 <__adddf3>
c0009a21:	59                   	pop    ecx
c0009a22:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a26:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a2a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a30:	e8 42 bb 01 00       	call   c0025577 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a50:	e8 2b b1 01 00       	call   c0024b80 <__muldf3>
c0009a55:	83 c4 10             	add    esp,0x10
c0009a58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a60:	52                   	push   edx
c0009a61:	50                   	push   eax
c0009a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a6a:	e8 94 aa 01 00       	call   c0024503 <__adddf3>
c0009a6f:	59                   	pop    ecx
c0009a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a74:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a78:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7e:	e8 f4 ba 01 00       	call   c0025577 <__extendsfdf2>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9e:	e8 dd b0 01 00       	call   c0024b80 <__muldf3>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aaa:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aae:	52                   	push   edx
c0009aaf:	50                   	push   eax
c0009ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab8:	e8 46 aa 01 00       	call   c0024503 <__adddf3>
c0009abd:	83 c4 10             	add    esp,0x10
c0009ac0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acc:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ad0:	0f 89 c5 fe ff ff    	jns    c000999b <calc_output_stereo+0x81>
c0009ad6:	29 e9                	sub    ecx,ebp
c0009ad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009adc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009ae0:	29 c8                	sub    eax,ecx
c0009ae2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009aea:	99                   	cdq    
c0009aeb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aef:	31 d2                	xor    edx,edx
c0009af1:	0f af f8             	imul   edi,eax
c0009af4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af8:	40                   	inc    eax
c0009af9:	01 cf                	add    edi,ecx
c0009afb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b00:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b04:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0f:	31 c0                	xor    eax,eax
c0009b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b15:	89 f8                	mov    eax,edi
c0009b17:	83 eb 08             	sub    ebx,0x8
c0009b1a:	e8 6b fb ff ff       	call   c000968a <fp_to_double>
c0009b1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b27:	89 f8                	mov    eax,edi
c0009b29:	e8 52 fb ff ff       	call   c0009680 <fp_to_int>
c0009b2e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b31:	52                   	push   edx
c0009b32:	52                   	push   edx
c0009b33:	55                   	push   ebp
c0009b34:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b38:	e8 5b a3 01 00       	call   c0023e98 <__subsf3>
c0009b3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b40:	e8 32 ba 01 00       	call   c0025577 <__extendsfdf2>
c0009b45:	83 c4 10             	add    esp,0x10
c0009b48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b60:	e8 1b b0 01 00       	call   c0024b80 <__muldf3>
c0009b65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b70:	e8 02 ba 01 00       	call   c0025577 <__extendsfdf2>
c0009b75:	83 c4 10             	add    esp,0x10
c0009b78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b80:	52                   	push   edx
c0009b81:	50                   	push   eax
c0009b82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b8a:	e8 74 a9 01 00       	call   c0024503 <__adddf3>
c0009b8f:	59                   	pop    ecx
c0009b90:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b94:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b98:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9e:	e8 d4 b9 01 00       	call   c0025577 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbe:	e8 bd af 01 00       	call   c0024b80 <__muldf3>
c0009bc3:	83 c4 10             	add    esp,0x10
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bce:	52                   	push   edx
c0009bcf:	50                   	push   eax
c0009bd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd8:	e8 26 a9 01 00       	call   c0024503 <__adddf3>
c0009bdd:	5d                   	pop    ebp
c0009bde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be6:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bec:	e8 86 b9 01 00       	call   c0025577 <__extendsfdf2>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0c:	e8 6f af 01 00       	call   c0024b80 <__muldf3>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1c:	52                   	push   edx
c0009c1d:	50                   	push   eax
c0009c1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c26:	e8 d8 a8 01 00       	call   c0024503 <__adddf3>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c3a:	85 ff                	test   edi,edi
c0009c3c:	0f 8f d3 fe ff ff    	jg     c0009b15 <calc_output_stereo+0x1fb>
c0009c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c52:	e8 ac a8 01 00       	call   c0024503 <__adddf3>
c0009c57:	83 c4 10             	add    esp,0x10
c0009c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c72:	e8 09 af 01 00       	call   c0024b80 <__muldf3>
c0009c77:	59                   	pop    ecx
c0009c78:	5b                   	pop    ebx
c0009c79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c89:	e8 c5 b7 01 00       	call   c0025453 <__truncdfsf2>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c98:	89 03                	mov    DWORD PTR [ebx],eax
c0009c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009caa:	e8 54 a8 01 00       	call   c0024503 <__adddf3>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cca:	e8 b1 ae 01 00       	call   c0024b80 <__muldf3>
c0009ccf:	5e                   	pop    esi
c0009cd0:	5f                   	pop    edi
c0009cd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce1:	e8 6d b7 01 00       	call   c0025453 <__truncdfsf2>
c0009ce6:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009ced:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cf0:	83 c4 7c             	add    esp,0x7c
c0009cf3:	5b                   	pop    ebx
c0009cf4:	5e                   	pop    esi
c0009cf5:	5f                   	pop    edi
c0009cf6:	5d                   	pop    ebp
c0009cf7:	c3                   	ret    

c0009cf8 <calc_output_quad>:
c0009cf8:	55                   	push   ebp
c0009cf9:	57                   	push   edi
c0009cfa:	56                   	push   esi
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 7c             	sub    esp,0x7c
c0009d01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d05:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d10:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d22:	e8 55 f9 ff ff       	call   c000967c <int_to_fp>
c0009d27:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d2a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d31:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d35:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d39:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3d:	99                   	cdq    
c0009d3e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d42:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d46:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d49:	31 d2                	xor    edx,edx
c0009d4b:	0f af d8             	imul   ebx,eax
c0009d4e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d56:	0f af c7             	imul   eax,edi
c0009d59:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5d:	29 c1                	sub    ecx,eax
c0009d5f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d67:	31 c0                	xor    eax,eax
c0009d69:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d80:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d84:	89 d8                	mov    eax,ebx
c0009d86:	83 c7 10             	add    edi,0x10
c0009d89:	e8 fc f8 ff ff       	call   c000968a <fp_to_double>
c0009d8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d96:	89 d8                	mov    eax,ebx
c0009d98:	e8 e3 f8 ff ff       	call   c0009680 <fp_to_int>
c0009d9d:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009da1:	52                   	push   edx
c0009da2:	52                   	push   edx
c0009da3:	51                   	push   ecx
c0009da4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dac:	e8 e7 a0 01 00       	call   c0023e98 <__subsf3>
c0009db1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db4:	e8 be b7 01 00       	call   c0025577 <__extendsfdf2>
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dc0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dcc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd4:	e8 a7 ad 01 00       	call   c0024b80 <__muldf3>
c0009dd9:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de8:	e8 8a b7 01 00       	call   c0025577 <__extendsfdf2>
c0009ded:	83 c4 10             	add    esp,0x10
c0009df0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df8:	52                   	push   edx
c0009df9:	50                   	push   eax
c0009dfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e02:	e8 fc a6 01 00       	call   c0024503 <__adddf3>
c0009e07:	59                   	pop    ecx
c0009e08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e10:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e16:	e8 5c b7 01 00       	call   c0025577 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e32:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e36:	e8 45 ad 01 00       	call   c0024b80 <__muldf3>
c0009e3b:	83 c4 10             	add    esp,0x10
c0009e3e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e42:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e46:	52                   	push   edx
c0009e47:	50                   	push   eax
c0009e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e50:	e8 ae a6 01 00       	call   c0024503 <__adddf3>
c0009e55:	59                   	pop    ecx
c0009e56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e5a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e64:	e8 0e b7 01 00       	call   c0025577 <__extendsfdf2>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e80:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e84:	e8 f7 ac 01 00       	call   c0024b80 <__muldf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e90:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e94:	52                   	push   edx
c0009e95:	50                   	push   eax
c0009e96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9e:	e8 60 a6 01 00       	call   c0024503 <__adddf3>
c0009ea3:	59                   	pop    ecx
c0009ea4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb2:	e8 c0 b6 01 00       	call   c0025577 <__extendsfdf2>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ece:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed2:	e8 a9 ac 01 00       	call   c0024b80 <__muldf3>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ede:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee2:	52                   	push   edx
c0009ee3:	50                   	push   eax
c0009ee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eec:	e8 12 a6 01 00       	call   c0024503 <__adddf3>
c0009ef1:	59                   	pop    ecx
c0009ef2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef6:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009efa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f00:	e8 72 b6 01 00       	call   c0025577 <__extendsfdf2>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f20:	e8 5b ac 01 00       	call   c0024b80 <__muldf3>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f30:	52                   	push   edx
c0009f31:	50                   	push   eax
c0009f32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f3a:	e8 c4 a5 01 00       	call   c0024503 <__adddf3>
c0009f3f:	83 c4 10             	add    esp,0x10
c0009f42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f46:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f4a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4e:	0f 89 30 fe ff ff    	jns    c0009d84 <calc_output_quad+0x8c>
c0009f54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f60:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f64:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6c:	29 c8                	sub    eax,ecx
c0009f6e:	99                   	cdq    
c0009f6f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f73:	31 d2                	xor    edx,edx
c0009f75:	0f af d8             	imul   ebx,eax
c0009f78:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7c:	40                   	inc    eax
c0009f7d:	01 cb                	add    ebx,ecx
c0009f7f:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f88:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f90:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f93:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f9b:	31 c0                	xor    eax,eax
c0009f9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fa1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa9:	89 d8                	mov    eax,ebx
c0009fab:	83 ee 10             	sub    esi,0x10
c0009fae:	e8 d7 f6 ff ff       	call   c000968a <fp_to_double>
c0009fb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fbb:	89 d8                	mov    eax,ebx
c0009fbd:	e8 be f6 ff ff       	call   c0009680 <fp_to_int>
c0009fc2:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc6:	52                   	push   edx
c0009fc7:	52                   	push   edx
c0009fc8:	57                   	push   edi
c0009fc9:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcd:	e8 c6 9e 01 00       	call   c0023e98 <__subsf3>
c0009fd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd5:	e8 9d b5 01 00       	call   c0025577 <__extendsfdf2>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff5:	e8 86 ab 01 00       	call   c0024b80 <__muldf3>
c0009ffa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a001:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a005:	e8 6d b5 01 00       	call   c0025577 <__extendsfdf2>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a011:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a015:	52                   	push   edx
c000a016:	50                   	push   eax
c000a017:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01f:	e8 df a4 01 00       	call   c0024503 <__adddf3>
c000a024:	59                   	pop    ecx
c000a025:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a029:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a033:	e8 3f b5 01 00       	call   c0025577 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a053:	e8 28 ab 01 00       	call   c0024b80 <__muldf3>
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a063:	52                   	push   edx
c000a064:	50                   	push   eax
c000a065:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06d:	e8 91 a4 01 00       	call   c0024503 <__adddf3>
c000a072:	5f                   	pop    edi
c000a073:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a077:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a07b:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a081:	e8 f1 b4 01 00       	call   c0025577 <__extendsfdf2>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a099:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a1:	e8 da aa 01 00       	call   c0024b80 <__muldf3>
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b1:	52                   	push   edx
c000a0b2:	50                   	push   eax
c000a0b3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0bb:	e8 43 a4 01 00       	call   c0024503 <__adddf3>
c000a0c0:	59                   	pop    ecx
c000a0c1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c5:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c9:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0cf:	e8 a3 b4 01 00       	call   c0025577 <__extendsfdf2>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ef:	e8 8c aa 01 00       	call   c0024b80 <__muldf3>
c000a0f4:	83 c4 10             	add    esp,0x10
c000a0f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ff:	52                   	push   edx
c000a100:	50                   	push   eax
c000a101:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a105:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a109:	e8 f5 a3 01 00       	call   c0024503 <__adddf3>
c000a10e:	5f                   	pop    edi
c000a10f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a113:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a117:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11d:	e8 55 b4 01 00       	call   c0025577 <__extendsfdf2>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a135:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a139:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13d:	e8 3e aa 01 00       	call   c0024b80 <__muldf3>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14d:	52                   	push   edx
c000a14e:	50                   	push   eax
c000a14f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a153:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a157:	e8 a7 a3 01 00       	call   c0024503 <__adddf3>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a163:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a167:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a16b:	85 db                	test   ebx,ebx
c000a16d:	0f 8f 36 fe ff ff    	jg     c0009fa9 <calc_output_quad+0x2b1>
c000a173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a183:	e8 7b a3 01 00       	call   c0024503 <__adddf3>
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a193:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a3:	e8 d8 a9 01 00       	call   c0024b80 <__muldf3>
c000a1a8:	59                   	pop    ecx
c000a1a9:	5b                   	pop    ebx
c000a1aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ba:	e8 94 b2 01 00       	call   c0025453 <__truncdfsf2>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c9:	89 06                	mov    DWORD PTR [esi],eax
c000a1cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1db:	e8 23 a3 01 00       	call   c0024503 <__adddf3>
c000a1e0:	83 c4 10             	add    esp,0x10
c000a1e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fb:	e8 80 a9 01 00       	call   c0024b80 <__muldf3>
c000a200:	5e                   	pop    esi
c000a201:	5f                   	pop    edi
c000a202:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a212:	e8 3c b2 01 00       	call   c0025453 <__truncdfsf2>
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a221:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a224:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a228:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a234:	e8 ca a2 01 00       	call   c0024503 <__adddf3>
c000a239:	83 c4 10             	add    esp,0x10
c000a23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a254:	e8 27 a9 01 00       	call   c0024b80 <__muldf3>
c000a259:	5d                   	pop    ebp
c000a25a:	59                   	pop    ecx
c000a25b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26b:	e8 e3 b1 01 00       	call   c0025453 <__truncdfsf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a27a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a281:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a285:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a289:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28d:	e8 71 a2 01 00       	call   c0024503 <__adddf3>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ad:	e8 ce a8 01 00       	call   c0024b80 <__muldf3>
c000a2b2:	5b                   	pop    ebx
c000a2b3:	5e                   	pop    esi
c000a2b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c4:	e8 8a b1 01 00       	call   c0025453 <__truncdfsf2>
c000a2c9:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2d0:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d9:	5b                   	pop    ebx
c000a2da:	5e                   	pop    esi
c000a2db:	5f                   	pop    edi
c000a2dc:	5d                   	pop    ebp
c000a2dd:	c3                   	ret    

c000a2de <calc_output_hex>:
c000a2de:	55                   	push   ebp
c000a2df:	89 cd                	mov    ebp,ecx
c000a2e1:	57                   	push   edi
c000a2e2:	56                   	push   esi
c000a2e3:	53                   	push   ebx
c000a2e4:	89 c3                	mov    ebx,eax
c000a2e6:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2ec:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ef:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f6:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a301:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a305:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a308:	e8 6f f3 ff ff       	call   c000967c <int_to_fp>
c000a30d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a310:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a314:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a317:	29 c8                	sub    eax,ecx
c000a319:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31d:	99                   	cdq    
c000a31e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a326:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a329:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a331:	0f af f8             	imul   edi,eax
c000a334:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a337:	01 cf                	add    edi,ecx
c000a339:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a340:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a344:	0f af c2             	imul   eax,edx
c000a347:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a34b:	29 c1                	sub    ecx,eax
c000a34d:	31 d2                	xor    edx,edx
c000a34f:	31 c0                	xor    eax,eax
c000a351:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a360:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a364:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a368:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a370:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a378:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37c:	89 f8                	mov    eax,edi
c000a37e:	e8 07 f3 ff ff       	call   c000968a <fp_to_double>
c000a383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a387:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a38b:	89 f8                	mov    eax,edi
c000a38d:	e8 ee f2 ff ff       	call   c0009680 <fp_to_int>
c000a392:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a396:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a399:	52                   	push   edx
c000a39a:	52                   	push   edx
c000a39b:	51                   	push   ecx
c000a39c:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3a0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3ab:	e8 e8 9a 01 00       	call   c0023e98 <__subsf3>
c000a3b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b3:	e8 bf b1 01 00       	call   c0025577 <__extendsfdf2>
c000a3b8:	83 c4 10             	add    esp,0x10
c000a3bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d3:	e8 a8 a7 01 00       	call   c0024b80 <__muldf3>
c000a3d8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e7:	e8 8b b1 01 00       	call   c0025577 <__extendsfdf2>
c000a3ec:	83 c4 10             	add    esp,0x10
c000a3ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f7:	52                   	push   edx
c000a3f8:	50                   	push   eax
c000a3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a401:	e8 fd a0 01 00       	call   c0024503 <__adddf3>
c000a406:	59                   	pop    ecx
c000a407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a40b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a415:	e8 5d b1 01 00       	call   c0025577 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a431:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a435:	e8 46 a7 01 00       	call   c0024b80 <__muldf3>
c000a43a:	83 c4 10             	add    esp,0x10
c000a43d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a441:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a445:	52                   	push   edx
c000a446:	50                   	push   eax
c000a447:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44f:	e8 af a0 01 00       	call   c0024503 <__adddf3>
c000a454:	59                   	pop    ecx
c000a455:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a459:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a463:	e8 0f b1 01 00       	call   c0025577 <__extendsfdf2>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a483:	e8 f8 a6 01 00       	call   c0024b80 <__muldf3>
c000a488:	83 c4 10             	add    esp,0x10
c000a48b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a493:	52                   	push   edx
c000a494:	50                   	push   eax
c000a495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a499:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49d:	e8 61 a0 01 00       	call   c0024503 <__adddf3>
c000a4a2:	59                   	pop    ecx
c000a4a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4ab:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4b1:	e8 c1 b0 01 00       	call   c0025577 <__extendsfdf2>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d1:	e8 aa a6 01 00       	call   c0024b80 <__muldf3>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4dd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e1:	52                   	push   edx
c000a4e2:	50                   	push   eax
c000a4e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4eb:	e8 13 a0 01 00       	call   c0024503 <__adddf3>
c000a4f0:	59                   	pop    ecx
c000a4f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f9:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4ff:	e8 73 b0 01 00       	call   c0025577 <__extendsfdf2>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a517:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51f:	e8 5c a6 01 00       	call   c0024b80 <__muldf3>
c000a524:	83 c4 10             	add    esp,0x10
c000a527:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52f:	52                   	push   edx
c000a530:	50                   	push   eax
c000a531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a535:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a539:	e8 c5 9f 01 00       	call   c0024503 <__adddf3>
c000a53e:	59                   	pop    ecx
c000a53f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a543:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a547:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54d:	e8 25 b0 01 00       	call   c0025577 <__extendsfdf2>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a565:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a569:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56d:	e8 0e a6 01 00       	call   c0024b80 <__muldf3>
c000a572:	83 c4 10             	add    esp,0x10
c000a575:	83 c6 18             	add    esi,0x18
c000a578:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a580:	52                   	push   edx
c000a581:	50                   	push   eax
c000a582:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a586:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a58a:	e8 74 9f 01 00       	call   c0024503 <__adddf3>
c000a58f:	59                   	pop    ecx
c000a590:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a594:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a598:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59e:	e8 d4 af 01 00       	call   c0025577 <__extendsfdf2>
c000a5a3:	83 c4 10             	add    esp,0x10
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5be:	e8 bd a5 01 00       	call   c0024b80 <__muldf3>
c000a5c3:	83 c4 10             	add    esp,0x10
c000a5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ce:	52                   	push   edx
c000a5cf:	50                   	push   eax
c000a5d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d8:	e8 26 9f 01 00       	call   c0024503 <__adddf3>
c000a5dd:	83 c4 10             	add    esp,0x10
c000a5e0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e8:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5eb:	0f 89 8b fd ff ff    	jns    c000a37c <calc_output_hex+0x9e>
c000a5f1:	31 f6                	xor    esi,esi
c000a5f3:	31 ff                	xor    edi,edi
c000a5f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fc:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a600:	29 e9                	sub    ecx,ebp
c000a602:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a606:	29 c8                	sub    eax,ecx
c000a608:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a60b:	99                   	cdq    
c000a60c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a610:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a613:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a617:	0f af e8             	imul   ebp,eax
c000a61a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61e:	40                   	inc    eax
c000a61f:	01 cd                	add    ebp,ecx
c000a621:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a626:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a62a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a632:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a635:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a639:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a641:	89 e8                	mov    eax,ebp
c000a643:	e8 42 f0 ff ff       	call   c000968a <fp_to_double>
c000a648:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a650:	89 e8                	mov    eax,ebp
c000a652:	e8 29 f0 ff ff       	call   c0009680 <fp_to_int>
c000a657:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65e:	52                   	push   edx
c000a65f:	52                   	push   edx
c000a660:	51                   	push   ecx
c000a661:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a668:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a673:	e8 20 98 01 00       	call   c0023e98 <__subsf3>
c000a678:	89 04 24             	mov    DWORD PTR [esp],eax
c000a67b:	e8 f7 ae 01 00       	call   c0025577 <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a687:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a697:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a69b:	e8 e0 a4 01 00       	call   c0024b80 <__muldf3>
c000a6a0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b2:	e8 c0 ae 01 00       	call   c0025577 <__extendsfdf2>
c000a6b7:	83 c4 10             	add    esp,0x10
c000a6ba:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6be:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c2:	52                   	push   edx
c000a6c3:	50                   	push   eax
c000a6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6cc:	e8 32 9e 01 00       	call   c0024503 <__adddf3>
c000a6d1:	59                   	pop    ecx
c000a6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6da:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6e0:	e8 92 ae 01 00       	call   c0025577 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a700:	e8 7b a4 01 00       	call   c0024b80 <__muldf3>
c000a705:	83 c4 10             	add    esp,0x10
c000a708:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a710:	52                   	push   edx
c000a711:	50                   	push   eax
c000a712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a71a:	e8 e4 9d 01 00       	call   c0024503 <__adddf3>
c000a71f:	59                   	pop    ecx
c000a720:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a724:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a728:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72e:	e8 44 ae 01 00       	call   c0025577 <__extendsfdf2>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a746:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74e:	e8 2d a4 01 00       	call   c0024b80 <__muldf3>
c000a753:	83 c4 10             	add    esp,0x10
c000a756:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a75a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75e:	52                   	push   edx
c000a75f:	50                   	push   eax
c000a760:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a764:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a768:	e8 96 9d 01 00       	call   c0024503 <__adddf3>
c000a76d:	59                   	pop    ecx
c000a76e:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a772:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a776:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77c:	e8 f6 ad 01 00       	call   c0025577 <__extendsfdf2>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a790:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a794:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a798:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79c:	e8 df a3 01 00       	call   c0024b80 <__muldf3>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ac:	52                   	push   edx
c000a7ad:	50                   	push   eax
c000a7ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b6:	e8 48 9d 01 00       	call   c0024503 <__adddf3>
c000a7bb:	59                   	pop    ecx
c000a7bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7c0:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7ca:	e8 a8 ad 01 00       	call   c0025577 <__extendsfdf2>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ea:	e8 91 a3 01 00       	call   c0024b80 <__muldf3>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7fa:	52                   	push   edx
c000a7fb:	50                   	push   eax
c000a7fc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a800:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a804:	e8 fa 9c 01 00       	call   c0024503 <__adddf3>
c000a809:	59                   	pop    ecx
c000a80a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a812:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a818:	e8 5a ad 01 00       	call   c0025577 <__extendsfdf2>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a830:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a834:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a838:	e8 43 a3 01 00       	call   c0024b80 <__muldf3>
c000a83d:	83 c4 10             	add    esp,0x10
c000a840:	83 eb 18             	sub    ebx,0x18
c000a843:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a847:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a84b:	52                   	push   edx
c000a84c:	50                   	push   eax
c000a84d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a851:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a855:	e8 a9 9c 01 00       	call   c0024503 <__adddf3>
c000a85a:	59                   	pop    ecx
c000a85b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a863:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a869:	e8 09 ad 01 00       	call   c0025577 <__extendsfdf2>
c000a86e:	83 c4 10             	add    esp,0x10
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a881:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a885:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a889:	e8 f2 a2 01 00       	call   c0024b80 <__muldf3>
c000a88e:	83 c4 10             	add    esp,0x10
c000a891:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a895:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a899:	52                   	push   edx
c000a89a:	50                   	push   eax
c000a89b:	57                   	push   edi
c000a89c:	56                   	push   esi
c000a89d:	e8 61 9c 01 00       	call   c0024503 <__adddf3>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	89 c6                	mov    esi,eax
c000a8a7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8aa:	89 d7                	mov    edi,edx
c000a8ac:	85 ed                	test   ebp,ebp
c000a8ae:	0f 8f 8d fd ff ff    	jg     c000a641 <calc_output_hex+0x363>
c000a8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c4:	e8 3a 9c 01 00       	call   c0024503 <__adddf3>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e3:	e8 98 a2 01 00       	call   c0024b80 <__muldf3>
c000a8e8:	59                   	pop    ecx
c000a8e9:	5b                   	pop    ebx
c000a8ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8fa:	e8 54 ab 01 00       	call   c0025453 <__truncdfsf2>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a909:	89 03                	mov    DWORD PTR [ebx],eax
c000a90b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a917:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a91b:	e8 e3 9b 01 00       	call   c0024503 <__adddf3>
c000a920:	83 c4 10             	add    esp,0x10
c000a923:	89 04 24             	mov    DWORD PTR [esp],eax
c000a926:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a92a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a932:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93a:	e8 41 a2 01 00       	call   c0024b80 <__muldf3>
c000a93f:	5d                   	pop    ebp
c000a940:	59                   	pop    ecx
c000a941:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	e8 fd aa 01 00       	call   c0025453 <__truncdfsf2>
c000a956:	83 c4 10             	add    esp,0x10
c000a959:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a960:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a963:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a967:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a96b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a973:	e8 8b 9b 01 00       	call   c0024503 <__adddf3>
c000a978:	83 c4 10             	add    esp,0x10
c000a97b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a986:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a992:	e8 e9 a1 01 00       	call   c0024b80 <__muldf3>
c000a997:	5b                   	pop    ebx
c000a998:	5d                   	pop    ebp
c000a999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a9:	e8 a5 aa 01 00       	call   c0025453 <__truncdfsf2>
c000a9ae:	83 c4 10             	add    esp,0x10
c000a9b1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9cb:	e8 33 9b 01 00       	call   c0024503 <__adddf3>
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	e8 91 a1 01 00       	call   c0024b80 <__muldf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	5b                   	pop    ebx
c000a9f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa01:	e8 4d aa 01 00       	call   c0025453 <__truncdfsf2>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa10:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa23:	e8 db 9a 01 00       	call   c0024503 <__adddf3>
c000aa28:	83 c4 10             	add    esp,0x10
c000aa2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	e8 39 a1 01 00       	call   c0024b80 <__muldf3>
c000aa47:	5d                   	pop    ebp
c000aa48:	59                   	pop    ecx
c000aa49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa59:	e8 f5 a9 01 00       	call   c0025453 <__truncdfsf2>
c000aa5e:	83 c4 10             	add    esp,0x10
c000aa61:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa68:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa6b:	57                   	push   edi
c000aa6c:	56                   	push   esi
c000aa6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa75:	e8 89 9a 01 00       	call   c0024503 <__adddf3>
c000aa7a:	83 c4 10             	add    esp,0x10
c000aa7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	e8 e7 a0 01 00       	call   c0024b80 <__muldf3>
c000aa99:	5b                   	pop    ebx
c000aa9a:	5e                   	pop    esi
c000aa9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaab:	e8 a3 a9 01 00       	call   c0025453 <__truncdfsf2>
c000aab0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaba:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aac0:	5b                   	pop    ebx
c000aac1:	5e                   	pop    esi
c000aac2:	5f                   	pop    edi
c000aac3:	5d                   	pop    ebp
c000aac4:	c3                   	ret    

c000aac5 <sinc_reset>:
c000aac5:	56                   	push   esi
c000aac6:	53                   	push   ebx
c000aac7:	51                   	push   ecx
c000aac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacc:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aacf:	85 db                	test   ebx,ebx
c000aad1:	74 59                	je     c000ab2c <sinc_reset+0x67>
c000aad3:	31 d2                	xor    edx,edx
c000aad5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aadc:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aadf:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae9:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaf0:	31 c0                	xor    eax,eax
c000aaf2:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aafb:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafe:	52                   	push   edx
c000aaff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab02:	c1 e0 02             	shl    eax,0x2
c000ab05:	50                   	push   eax
c000ab06:	6a 00                	push   0x0
c000ab08:	56                   	push   esi
c000ab09:	e8 6f 5b ff ff       	call   c000067d <memset>
c000ab0e:	83 c4 0c             	add    esp,0xc
c000ab11:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab14:	c1 e0 02             	shl    eax,0x2
c000ab17:	50                   	push   eax
c000ab18:	68 aa 00 00 00       	push   0xaa
c000ab1d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab20:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab23:	50                   	push   eax
c000ab24:	e8 54 5b ff ff       	call   c000067d <memset>
c000ab29:	83 c4 10             	add    esp,0x10
c000ab2c:	58                   	pop    eax
c000ab2d:	5b                   	pop    ebx
c000ab2e:	5e                   	pop    esi
c000ab2f:	c3                   	ret    

c000ab30 <calc_output_multi>:
c000ab30:	55                   	push   ebp
c000ab31:	57                   	push   edi
c000ab32:	56                   	push   esi
c000ab33:	89 c6                	mov    esi,eax
c000ab35:	53                   	push   ebx
c000ab36:	83 ec 4c             	sub    esp,0x4c
c000ab39:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab49:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab55:	8d 46 44             	lea    eax,[esi+0x44]
c000ab58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab5b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab65:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab68:	e8 0f eb ff ff       	call   c000967c <int_to_fp>
c000ab6d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab70:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab78:	99                   	cdq    
c000ab79:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab81:	0f af d0             	imul   edx,eax
c000ab84:	0f af c3             	imul   eax,ebx
c000ab87:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab8b:	29 c1                	sub    ecx,eax
c000ab8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab95:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aba0:	57                   	push   edi
c000aba1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba5:	6a 00                	push   0x0
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	e8 cd 5a ff ff       	call   c000067d <memset>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb7:	89 df                	mov    edi,ebx
c000abb9:	e8 cc ea ff ff       	call   c000968a <fp_to_double>
c000abbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abca:	e8 b1 ea ff ff       	call   c0009680 <fp_to_int>
c000abcf:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd5:	51                   	push   ecx
c000abd6:	51                   	push   ecx
c000abd7:	55                   	push   ebp
c000abd8:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abdc:	e8 b7 92 01 00       	call   c0023e98 <__subsf3>
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	e8 8e a9 01 00       	call   c0025577 <__extendsfdf2>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac04:	e8 77 9f 01 00       	call   c0024b80 <__muldf3>
c000ac09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac14:	e8 5e a9 01 00       	call   c0025577 <__extendsfdf2>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac24:	52                   	push   edx
c000ac25:	50                   	push   eax
c000ac26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 d0 98 01 00       	call   c0024503 <__adddf3>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3e:	89 f8                	mov    eax,edi
c000ac40:	b9 08 00 00 00       	mov    ecx,0x8
c000ac45:	99                   	cdq    
c000ac46:	f7 f9                	idiv   ecx
c000ac48:	4a                   	dec    edx
c000ac49:	83 fa 06             	cmp    edx,0x6
c000ac4c:	77 07                	ja     c000ac55 <calc_output_multi+0x125>
c000ac4e:	ff 24 95 a4 6c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd935c]
c000ac55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac58:	4f                   	dec    edi
c000ac59:	83 ec 0c             	sub    esp,0xc
c000ac5c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac63:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac6a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6e:	e8 04 a9 01 00       	call   c0025577 <__extendsfdf2>
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8e:	e8 ed 9e 01 00       	call   c0024b80 <__muldf3>
c000ac93:	83 c4 10             	add    esp,0x10
c000ac96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac9a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9e:	52                   	push   edx
c000ac9f:	50                   	push   eax
c000aca0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca6:	e8 58 98 01 00       	call   c0024503 <__adddf3>
c000acab:	83 c4 10             	add    esp,0x10
c000acae:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acb1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb7:	4f                   	dec    edi
c000acb8:	83 ec 0c             	sub    esp,0xc
c000acbb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accd:	e8 a5 a8 01 00       	call   c0025577 <__extendsfdf2>
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aced:	e8 8e 9e 01 00       	call   c0024b80 <__muldf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfd:	52                   	push   edx
c000acfe:	50                   	push   eax
c000acff:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad02:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad05:	e8 f9 97 01 00       	call   c0024503 <__adddf3>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad10:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad16:	4f                   	dec    edi
c000ad17:	83 ec 0c             	sub    esp,0xc
c000ad1a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad21:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2c:	e8 46 a8 01 00       	call   c0025577 <__extendsfdf2>
c000ad31:	83 c4 10             	add    esp,0x10
c000ad34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4c:	e8 2f 9e 01 00       	call   c0024b80 <__muldf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5c:	52                   	push   edx
c000ad5d:	50                   	push   eax
c000ad5e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad61:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad64:	e8 9a 97 01 00       	call   c0024503 <__adddf3>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad75:	4f                   	dec    edi
c000ad76:	83 ec 0c             	sub    esp,0xc
c000ad79:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad80:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad87:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad8b:	e8 e7 a7 01 00       	call   c0025577 <__extendsfdf2>
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adab:	e8 d0 9d 01 00       	call   c0024b80 <__muldf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adbb:	52                   	push   edx
c000adbc:	50                   	push   eax
c000adbd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adc0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc3:	e8 3b 97 01 00       	call   c0024503 <__adddf3>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000add1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add4:	4f                   	dec    edi
c000add5:	83 ec 0c             	sub    esp,0xc
c000add8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000addb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000addf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adea:	e8 88 a7 01 00       	call   c0025577 <__extendsfdf2>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae0a:	e8 71 9d 01 00       	call   c0024b80 <__muldf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae16:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae1a:	52                   	push   edx
c000ae1b:	50                   	push   eax
c000ae1c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae22:	e8 dc 96 01 00       	call   c0024503 <__adddf3>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae33:	4f                   	dec    edi
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae45:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae49:	e8 29 a7 01 00       	call   c0025577 <__extendsfdf2>
c000ae4e:	83 c4 10             	add    esp,0x10
c000ae51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae55:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae69:	e8 12 9d 01 00       	call   c0024b80 <__muldf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae79:	52                   	push   edx
c000ae7a:	50                   	push   eax
c000ae7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae81:	e8 7d 96 01 00       	call   c0024503 <__adddf3>
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae92:	4f                   	dec    edi
c000ae93:	83 ec 0c             	sub    esp,0xc
c000ae96:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea8:	e8 ca a6 01 00       	call   c0025577 <__extendsfdf2>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec8:	e8 b3 9c 01 00       	call   c0024b80 <__muldf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed8:	52                   	push   edx
c000aed9:	50                   	push   eax
c000aeda:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee0:	e8 1e 96 01 00       	call   c0024503 <__adddf3>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeeb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef1:	4f                   	dec    edi
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af03:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af07:	e8 6b a6 01 00       	call   c0025577 <__extendsfdf2>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af27:	e8 54 9c 01 00       	call   c0024b80 <__muldf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af37:	52                   	push   edx
c000af38:	50                   	push   eax
c000af39:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3f:	e8 bf 95 01 00       	call   c0024503 <__adddf3>
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4d:	85 ff                	test   edi,edi
c000af4f:	0f 8f e9 fc ff ff    	jg     c000ac3e <calc_output_multi+0x10e>
c000af55:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af59:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af61:	0f 89 4c fc ff ff    	jns    c000abb3 <calc_output_multi+0x83>
c000af67:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6f:	29 c8                	sub    eax,ecx
c000af71:	99                   	cdq    
c000af72:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af7a:	0f af d0             	imul   edx,eax
c000af7d:	40                   	inc    eax
c000af7e:	01 d1                	add    ecx,edx
c000af80:	0f af c3             	imul   eax,ebx
c000af83:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af87:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8e:	55                   	push   ebp
c000af8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af93:	6a 00                	push   0x0
c000af95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af99:	e8 df 56 ff ff       	call   c000067d <memset>
c000af9e:	83 c4 10             	add    esp,0x10
c000afa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa5:	e8 e0 e6 ff ff       	call   c000968a <fp_to_double>
c000afaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb6:	e8 c5 e6 ff ff       	call   c0009680 <fp_to_int>
c000afbb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afc1:	57                   	push   edi
c000afc2:	57                   	push   edi
c000afc3:	89 df                	mov    edi,ebx
c000afc5:	55                   	push   ebp
c000afc6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afca:	e8 c9 8e 01 00       	call   c0023e98 <__subsf3>
c000afcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd2:	e8 a0 a5 01 00       	call   c0025577 <__extendsfdf2>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff2:	e8 89 9b 01 00       	call   c0024b80 <__muldf3>
c000aff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000affa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b002:	e8 70 a5 01 00       	call   c0025577 <__extendsfdf2>
c000b007:	83 c4 10             	add    esp,0x10
c000b00a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b012:	52                   	push   edx
c000b013:	50                   	push   eax
c000b014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01c:	e8 e2 94 01 00       	call   c0024503 <__adddf3>
c000b021:	83 c4 10             	add    esp,0x10
c000b024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02c:	89 f8                	mov    eax,edi
c000b02e:	b9 08 00 00 00       	mov    ecx,0x8
c000b033:	99                   	cdq    
c000b034:	f7 f9                	idiv   ecx
c000b036:	4a                   	dec    edx
c000b037:	83 fa 06             	cmp    edx,0x6
c000b03a:	77 07                	ja     c000b043 <calc_output_multi+0x513>
c000b03c:	ff 24 95 c0 6c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9340]
c000b043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b047:	4f                   	dec    edi
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b052:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b059:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05d:	e8 15 a5 01 00       	call   c0025577 <__extendsfdf2>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b075:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b079:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07d:	e8 fe 9a 01 00       	call   c0024b80 <__muldf3>
c000b082:	83 c4 10             	add    esp,0x10
c000b085:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08d:	52                   	push   edx
c000b08e:	50                   	push   eax
c000b08f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b092:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b095:	e8 69 94 01 00       	call   c0024503 <__adddf3>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a7:	4f                   	dec    edi
c000b0a8:	83 ec 0c             	sub    esp,0xc
c000b0ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bd:	e8 b5 a4 01 00       	call   c0025577 <__extendsfdf2>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0dd:	e8 9e 9a 01 00       	call   c0024b80 <__muldf3>
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ed:	52                   	push   edx
c000b0ee:	50                   	push   eax
c000b0ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f5:	e8 09 94 01 00       	call   c0024503 <__adddf3>
c000b0fa:	83 c4 10             	add    esp,0x10
c000b0fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b100:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b107:	4f                   	dec    edi
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b112:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b119:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11d:	e8 55 a4 01 00       	call   c0025577 <__extendsfdf2>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b135:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b139:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13d:	e8 3e 9a 01 00       	call   c0024b80 <__muldf3>
c000b142:	83 c4 10             	add    esp,0x10
c000b145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b149:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14d:	52                   	push   edx
c000b14e:	50                   	push   eax
c000b14f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b152:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b155:	e8 a9 93 01 00       	call   c0024503 <__adddf3>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b160:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b167:	4f                   	dec    edi
c000b168:	83 ec 0c             	sub    esp,0xc
c000b16b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b172:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b179:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17d:	e8 f5 a3 01 00       	call   c0025577 <__extendsfdf2>
c000b182:	83 c4 10             	add    esp,0x10
c000b185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b195:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b199:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19d:	e8 de 99 01 00       	call   c0024b80 <__muldf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ad:	52                   	push   edx
c000b1ae:	50                   	push   eax
c000b1af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b5:	e8 49 93 01 00       	call   c0024503 <__adddf3>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c7:	4f                   	dec    edi
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1dd:	e8 95 a3 01 00       	call   c0025577 <__extendsfdf2>
c000b1e2:	83 c4 10             	add    esp,0x10
c000b1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fd:	e8 7e 99 01 00       	call   c0024b80 <__muldf3>
c000b202:	83 c4 10             	add    esp,0x10
c000b205:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b209:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20d:	52                   	push   edx
c000b20e:	50                   	push   eax
c000b20f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b212:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b215:	e8 e9 92 01 00       	call   c0024503 <__adddf3>
c000b21a:	83 c4 10             	add    esp,0x10
c000b21d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b220:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b227:	4f                   	dec    edi
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b232:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b239:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23d:	e8 35 a3 01 00       	call   c0025577 <__extendsfdf2>
c000b242:	83 c4 10             	add    esp,0x10
c000b245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25d:	e8 1e 99 01 00       	call   c0024b80 <__muldf3>
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b269:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26d:	52                   	push   edx
c000b26e:	50                   	push   eax
c000b26f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b272:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b275:	e8 89 92 01 00       	call   c0024503 <__adddf3>
c000b27a:	83 c4 10             	add    esp,0x10
c000b27d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b280:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 d5 a2 01 00       	call   c0025577 <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 be 98 01 00       	call   c0024b80 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 29 92 01 00       	call   c0024503 <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 75 a2 01 00       	call   c0025577 <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 5e 98 01 00       	call   c0024b80 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 c9 91 01 00       	call   c0024503 <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	85 ff                	test   edi,edi
c000b345:	0f 8f e1 fc ff ff    	jg     c000b02c <calc_output_multi+0x4fc>
c000b34b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b353:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b357:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35c:	0f 8f 3f fc ff ff    	jg     c000afa1 <calc_output_multi+0x471>
c000b362:	be 08 00 00 00       	mov    esi,0x8
c000b367:	89 d8                	mov    eax,ebx
c000b369:	99                   	cdq    
c000b36a:	f7 fe                	idiv   esi
c000b36c:	4a                   	dec    edx
c000b36d:	83 fa 06             	cmp    edx,0x6
c000b370:	77 07                	ja     c000b379 <calc_output_multi+0x849>
c000b372:	ff 24 95 dc 6c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9324]
c000b379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37d:	4b                   	dec    ebx
c000b37e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b382:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b385:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b389:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b390:	e8 6e 91 01 00       	call   c0024503 <__adddf3>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b0:	e8 cb 97 01 00       	call   c0024b80 <__muldf3>
c000b3b5:	5d                   	pop    ebp
c000b3b6:	59                   	pop    ecx
c000b3b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c7:	e8 87 a0 01 00       	call   c0025453 <__truncdfsf2>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3da:	4b                   	dec    ebx
c000b3db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3ed:	e8 11 91 01 00       	call   c0024503 <__adddf3>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40d:	e8 6e 97 01 00       	call   c0024b80 <__muldf3>
c000b412:	59                   	pop    ecx
c000b413:	5f                   	pop    edi
c000b414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b424:	e8 2a a0 01 00       	call   c0025453 <__truncdfsf2>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b430:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b437:	4b                   	dec    ebx
c000b438:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b443:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b447:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44a:	e8 b4 90 01 00       	call   c0024503 <__adddf3>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b456:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46a:	e8 11 97 01 00       	call   c0024b80 <__muldf3>
c000b46f:	5f                   	pop    edi
c000b470:	5d                   	pop    ebp
c000b471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b475:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b481:	e8 cd 9f 01 00       	call   c0025453 <__truncdfsf2>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b494:	4b                   	dec    ebx
c000b495:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b499:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a7:	e8 57 90 01 00       	call   c0024503 <__adddf3>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c7:	e8 b4 96 01 00       	call   c0024b80 <__muldf3>
c000b4cc:	5d                   	pop    ebp
c000b4cd:	59                   	pop    ecx
c000b4ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4de:	e8 70 9f 01 00       	call   c0025453 <__truncdfsf2>
c000b4e3:	83 c4 10             	add    esp,0x10
c000b4e6:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4ea:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f1:	4b                   	dec    ebx
c000b4f2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b501:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b504:	e8 fa 8f 01 00       	call   c0024503 <__adddf3>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b510:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b524:	e8 57 96 01 00       	call   c0024b80 <__muldf3>
c000b529:	59                   	pop    ecx
c000b52a:	5f                   	pop    edi
c000b52b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53b:	e8 13 9f 01 00       	call   c0025453 <__truncdfsf2>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b547:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54e:	4b                   	dec    ebx
c000b54f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b553:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b55a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b561:	e8 9d 8f 01 00       	call   c0024503 <__adddf3>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b581:	e8 fa 95 01 00       	call   c0024b80 <__muldf3>
c000b586:	5f                   	pop    edi
c000b587:	5d                   	pop    ebp
c000b588:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b594:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b598:	e8 b6 9e 01 00       	call   c0025453 <__truncdfsf2>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ab:	4b                   	dec    ebx
c000b5ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5be:	e8 40 8f 01 00       	call   c0024503 <__adddf3>
c000b5c3:	83 c4 10             	add    esp,0x10
c000b5c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5de:	e8 9d 95 01 00       	call   c0024b80 <__muldf3>
c000b5e3:	5d                   	pop    ebp
c000b5e4:	59                   	pop    ecx
c000b5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f5:	e8 59 9e 01 00       	call   c0025453 <__truncdfsf2>
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b601:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b608:	4b                   	dec    ebx
c000b609:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b618:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61b:	e8 e3 8e 01 00       	call   c0024503 <__adddf3>
c000b620:	83 c4 10             	add    esp,0x10
c000b623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b637:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63b:	e8 40 95 01 00       	call   c0024b80 <__muldf3>
c000b640:	59                   	pop    ecx
c000b641:	5f                   	pop    edi
c000b642:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b64a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b652:	e8 fc 9d 01 00       	call   c0025453 <__truncdfsf2>
c000b657:	83 c4 10             	add    esp,0x10
c000b65a:	85 db                	test   ebx,ebx
c000b65c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b660:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b663:	0f 8f fe fc ff ff    	jg     c000b367 <calc_output_multi+0x837>
c000b669:	83 c4 4c             	add    esp,0x4c
c000b66c:	5b                   	pop    ebx
c000b66d:	5e                   	pop    esi
c000b66e:	5f                   	pop    edi
c000b66f:	5d                   	pop    ebp
c000b670:	c3                   	ret    

c000b671 <double_to_fp>:
c000b671:	83 ec 0c             	sub    esp,0xc
c000b674:	68 00 00 b0 40       	push   0x40b00000
c000b679:	6a 00                	push   0x0
c000b67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	e8 f8 94 01 00       	call   c0024b80 <__muldf3>
c000b688:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b690:	83 c4 1c             	add    esp,0x1c
c000b693:	e9 68 9f 01 00       	jmp    c0025600 <lrint>

c000b698 <prepare_data>:
c000b698:	55                   	push   ebp
c000b699:	57                   	push   edi
c000b69a:	56                   	push   esi
c000b69b:	53                   	push   ebx
c000b69c:	83 ec 1c             	sub    esp,0x1c
c000b69f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6ab:	0f 89 57 01 00 00    	jns    c000b808 <prepare_data+0x170>
c000b6b1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b7:	85 d2                	test   edx,edx
c000b6b9:	75 0d                	jne    c000b6c8 <prepare_data+0x30>
c000b6bb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6be:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6c1:	29 d0                	sub    eax,edx
c000b6c3:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c6:	eb 44                	jmp    c000b70c <prepare_data+0x74>
c000b6c8:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6cb:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6ce:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6d1:	39 c1                	cmp    ecx,eax
c000b6d3:	7d 04                	jge    c000b6d9 <prepare_data+0x41>
c000b6d5:	29 d0                	sub    eax,edx
c000b6d7:	eb 2d                	jmp    c000b706 <prepare_data+0x6e>
c000b6d9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6df:	29 d7                	sub    edi,edx
c000b6e1:	01 f7                	add    edi,esi
c000b6e3:	51                   	push   ecx
c000b6e4:	29 f2                	sub    edx,esi
c000b6e6:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6ed:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6f0:	51                   	push   ecx
c000b6f1:	52                   	push   edx
c000b6f2:	50                   	push   eax
c000b6f3:	e8 17 4f ff ff       	call   c000060f <memmove>
c000b6f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fe:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b701:	29 f0                	sub    eax,esi
c000b703:	83 c4 10             	add    esp,0x10
c000b706:	29 f0                	sub    eax,esi
c000b708:	79 02                	jns    c000b70c <prepare_data+0x74>
c000b70a:	31 c0                	xor    eax,eax
c000b70c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b712:	29 ef                	sub    edi,ebp
c000b714:	39 c7                	cmp    edi,eax
c000b716:	7e 02                	jle    c000b71a <prepare_data+0x82>
c000b718:	89 c7                	mov    edi,eax
c000b71a:	89 f8                	mov    eax,edi
c000b71c:	99                   	cdq    
c000b71d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b720:	b8 15 00 00 00       	mov    eax,0x15
c000b725:	29 d7                	sub    edi,edx
c000b727:	0f 88 dd 00 00 00    	js     c000b80a <prepare_data+0x172>
c000b72d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b730:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b733:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b736:	0f 8f ce 00 00 00    	jg     c000b80a <prepare_data+0x172>
c000b73c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b742:	50                   	push   eax
c000b743:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b74a:	50                   	push   eax
c000b74b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b751:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b754:	50                   	push   eax
c000b755:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b758:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75c:	50                   	push   eax
c000b75d:	e8 e5 4e ff ff       	call   c0000647 <memcpy>
c000b762:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b765:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b768:	01 fd                	add    ebp,edi
c000b76a:	01 f9                	add    ecx,edi
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b772:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b775:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77c:	0f 85 86 00 00 00    	jne    c000b808 <prepare_data+0x170>
c000b782:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b785:	89 e8                	mov    eax,ebp
c000b787:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b78a:	29 c8                	sub    eax,ecx
c000b78c:	39 f8                	cmp    eax,edi
c000b78e:	7d 78                	jge    c000b808 <prepare_data+0x170>
c000b790:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b794:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b798:	74 6e                	je     c000b808 <prepare_data+0x170>
c000b79a:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7a1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a4:	29 ef                	sub    edi,ebp
c000b7a6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7aa:	7c 29                	jl     c000b7d5 <prepare_data+0x13d>
c000b7ac:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7af:	29 f1                	sub    ecx,esi
c000b7b1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b8:	55                   	push   ebp
c000b7b9:	50                   	push   eax
c000b7ba:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bd:	50                   	push   eax
c000b7be:	52                   	push   edx
c000b7bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c3:	e8 47 4e ff ff       	call   c000060f <memmove>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7ce:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7db:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7de:	83 c6 05             	add    esi,0x5
c000b7e1:	78 07                	js     c000b7ea <prepare_data+0x152>
c000b7e3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e6:	39 cf                	cmp    edi,ecx
c000b7e8:	7e 04                	jle    c000b7ee <prepare_data+0x156>
c000b7ea:	89 ce                	mov    esi,ecx
c000b7ec:	29 c6                	sub    esi,eax
c000b7ee:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7f1:	51                   	push   ecx
c000b7f2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f9:	51                   	push   ecx
c000b7fa:	6a 00                	push   0x0
c000b7fc:	50                   	push   eax
c000b7fd:	e8 7b 4e ff ff       	call   c000067d <memset>
c000b802:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b805:	83 c4 10             	add    esp,0x10
c000b808:	31 c0                	xor    eax,eax
c000b80a:	83 c4 1c             	add    esp,0x1c
c000b80d:	5b                   	pop    ebx
c000b80e:	5e                   	pop    esi
c000b80f:	5f                   	pop    edi
c000b810:	5d                   	pop    ebp
c000b811:	c3                   	ret    

c000b812 <sinc_multichan_vari_process>:
c000b812:	55                   	push   ebp
c000b813:	ba 05 00 00 00       	mov    edx,0x5
c000b818:	57                   	push   edi
c000b819:	56                   	push   esi
c000b81a:	53                   	push   ebx
c000b81b:	83 ec 4c             	sub    esp,0x4c
c000b81e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b822:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b826:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b829:	85 db                	test   ebx,ebx
c000b82b:	0f 84 9b 06 00 00    	je     c000becc <sinc_multichan_vari_process+0x6ba>
c000b831:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b834:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b837:	0f af c5             	imul   eax,ebp
c000b83a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b847:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84e:	0f af c5             	imul   eax,ebp
c000b851:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b854:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b857:	8b 06                	mov    eax,DWORD PTR [esi]
c000b859:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b861:	68 00 00 70 3f       	push   0x3f700000
c000b866:	6a 00                	push   0x0
c000b868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b870:	e8 da 9b 01 00       	call   c002544f <__ltdf2>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	ba 16 00 00 00       	mov    edx,0x16
c000b87d:	85 c0                	test   eax,eax
c000b87f:	0f 88 47 06 00 00    	js     c000becc <sinc_multichan_vari_process+0x6ba>
c000b885:	68 00 00 70 40       	push   0x40700000
c000b88a:	6a 00                	push   0x0
c000b88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b894:	e8 98 9b 01 00       	call   c0025431 <__gtdf2>
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	ba 16 00 00 00       	mov    edx,0x16
c000b8a1:	85 c0                	test   eax,eax
c000b8a3:	0f 8f 23 06 00 00    	jg     c000becc <sinc_multichan_vari_process+0x6ba>
c000b8a9:	83 ec 0c             	sub    esp,0xc
c000b8ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8af:	e8 2f 99 01 00       	call   c00251e3 <__floatsidf>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8bf:	68 00 00 00 40       	push   0x40000000
c000b8c4:	6a 00                	push   0x0
c000b8c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ce:	e8 30 8c 01 00       	call   c0024503 <__adddf3>
c000b8d3:	59                   	pop    ecx
c000b8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8df:	e8 ff 98 01 00       	call   c00251e3 <__floatsidf>
c000b8e4:	83 c4 10             	add    esp,0x10
c000b8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ef:	52                   	push   edx
c000b8f0:	50                   	push   eax
c000b8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f9:	e8 66 95 01 00       	call   c0024e64 <__divdf3>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b905:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b909:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b927:	e8 05 9b 01 00       	call   c0025431 <__gtdf2>
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	85 c0                	test   eax,eax
c000b931:	7e 2d                	jle    c000b960 <sinc_multichan_vari_process+0x14e>
c000b933:	68 00 00 f0 3f       	push   0x3ff00000
c000b938:	6a 00                	push   0x0
c000b93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b942:	e8 08 9b 01 00       	call   c002544f <__ltdf2>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	85 c0                	test   eax,eax
c000b94c:	79 4d                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b952:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	eb 1b                	jmp    c000b97b <sinc_multichan_vari_process+0x169>
c000b960:	68 00 00 f0 3f       	push   0x3ff00000
c000b965:	6a 00                	push   0x0
c000b967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96f:	e8 db 9a 01 00       	call   c002544f <__ltdf2>
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	85 c0                	test   eax,eax
c000b979:	79 20                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b983:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b987:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b98b:	e8 d4 94 01 00       	call   c0024e64 <__divdf3>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b997:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b99b:	50                   	push   eax
c000b99c:	50                   	push   eax
c000b99d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a5:	e8 56 9c 01 00       	call   c0025600 <lrint>
c000b9aa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ad:	40                   	inc    eax
c000b9ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b2:	0f af c5             	imul   eax,ebp
c000b9b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9c0:	58                   	pop    eax
c000b9c1:	5a                   	pop    edx
c000b9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ca:	e8 31 9c 01 00       	call   c0025600 <lrint>
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	50                   	push   eax
c000b9d3:	e8 0b 98 01 00       	call   c00251e3 <__floatsidf>
c000b9d8:	83 c4 10             	add    esp,0x10
c000b9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e3:	52                   	push   edx
c000b9e4:	50                   	push   eax
c000b9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ed:	e8 62 91 01 00       	call   c0024b54 <__subdf3>
c000b9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9fa:	83 c4 20             	add    esp,0x20
c000b9fd:	6a 00                	push   0x0
c000b9ff:	6a 00                	push   0x0
c000ba01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba09:	e8 41 9a 01 00       	call   c002544f <__ltdf2>
c000ba0e:	83 c4 10             	add    esp,0x10
c000ba11:	85 c0                	test   eax,eax
c000ba13:	79 1f                	jns    c000ba34 <sinc_multichan_vari_process+0x222>
c000ba15:	68 00 00 f0 3f       	push   0x3ff00000
c000ba1a:	6a 00                	push   0x0
c000ba1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba24:	e8 da 8a 01 00       	call   c0024503 <__adddf3>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba34:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba37:	83 ec 10             	sub    esp,0x10
c000ba3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba51:	e8 fe 90 01 00       	call   c0024b54 <__subdf3>
c000ba56:	83 c4 18             	add    esp,0x18
c000ba59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba61:	52                   	push   edx
c000ba62:	50                   	push   eax
c000ba63:	e8 98 9b 01 00       	call   c0025600 <lrint>
c000ba68:	0f af e8             	imul   ebp,eax
c000ba6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6f:	01 e8                	add    eax,ebp
c000ba71:	99                   	cdq    
c000ba72:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba75:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba80:	68 00 00 f0 3f       	push   0x3ff00000
c000ba85:	6a 00                	push   0x0
c000ba87:	e8 d8 93 01 00       	call   c0024e64 <__divdf3>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba97:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9c:	68 23 42 92 0c       	push   0xc924223
c000baa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa9:	e8 55 8a 01 00       	call   c0024503 <__adddf3>
c000baae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab6:	83 c4 20             	add    esp,0x20
c000bab9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bac1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bacc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bacf:	7d 50                	jge    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bad1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad7:	01 c8                	add    eax,ecx
c000bad9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000badc:	99                   	cdq    
c000badd:	f7 f9                	idiv   ecx
c000badf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae3:	7d 0c                	jge    c000baf1 <sinc_multichan_vari_process+0x2df>
c000bae5:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae8:	85 ed                	test   ebp,ebp
c000baea:	79 6b                	jns    c000bb57 <sinc_multichan_vari_process+0x345>
c000baec:	e9 e6 00 00 00       	jmp    c000bbd7 <sinc_multichan_vari_process+0x3c5>
c000baf1:	50                   	push   eax
c000baf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf6:	57                   	push   edi
c000baf7:	53                   	push   ebx
c000baf8:	e8 9b fb ff ff       	call   c000b698 <prepare_data>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	89 c2                	mov    edx,eax
c000bb02:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb05:	85 c0                	test   eax,eax
c000bb07:	0f 85 bf 03 00 00    	jne    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb0d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb10:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb13:	01 c8                	add    eax,ecx
c000bb15:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb18:	99                   	cdq    
c000bb19:	f7 f9                	idiv   ecx
c000bb1b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1f:	7c c4                	jl     c000bae5 <sinc_multichan_vari_process+0x2d3>
c000bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb29:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb37:	89 06                	mov    DWORD PTR [esi],eax
c000bb39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3f:	99                   	cdq    
c000bb40:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb43:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb46:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb49:	99                   	cdq    
c000bb4a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4d:	31 d2                	xor    edx,edx
c000bb4f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb52:	e9 75 03 00 00       	jmp    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5d:	e8 81 96 01 00       	call   c00251e3 <__floatsidf>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7d:	e8 81 89 01 00       	call   c0024503 <__adddf3>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb89:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9d:	e8 61 89 01 00       	call   c0024503 <__adddf3>
c000bba2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbad:	e8 31 96 01 00       	call   c00251e3 <__floatsidf>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbd:	52                   	push   edx
c000bbbe:	50                   	push   eax
c000bbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc7:	e8 81 98 01 00       	call   c002544d <__gedf2>
c000bbcc:	83 c4 10             	add    esp,0x10
c000bbcf:	85 c0                	test   eax,eax
c000bbd1:	0f 89 4a ff ff ff    	jns    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bbd7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbdb:	0f 8e ed 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bbe1:	83 ec 10             	sub    esp,0x10
c000bbe4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbed:	ff 36                	push   DWORD PTR [esi]
c000bbef:	e8 60 8f 01 00       	call   c0024b54 <__subdf3>
c000bbf4:	83 c4 18             	add    esp,0x18
c000bbf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	e8 da 99 01 00       	call   c00255e0 <fabs>
c000bc06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc0a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0e:	83 c4 10             	add    esp,0x10
c000bc11:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc16:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc23:	e8 09 98 01 00       	call   c0025431 <__gtdf2>
c000bc28:	83 c4 10             	add    esp,0x10
c000bc2b:	85 c0                	test   eax,eax
c000bc2d:	0f 8e 9b 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bc33:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc35:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc40:	52                   	push   edx
c000bc41:	50                   	push   eax
c000bc42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc48:	e8 07 8f 01 00       	call   c0024b54 <__subdf3>
c000bc4d:	59                   	pop    ecx
c000bc4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc52:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc59:	e8 85 95 01 00       	call   c00251e3 <__floatsidf>
c000bc5e:	83 c4 10             	add    esp,0x10
c000bc61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc69:	52                   	push   edx
c000bc6a:	50                   	push   eax
c000bc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc73:	e8 08 8f 01 00       	call   c0024b80 <__muldf3>
c000bc78:	5d                   	pop    ebp
c000bc79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc81:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc84:	e8 5a 95 01 00       	call   c00251e3 <__floatsidf>
c000bc89:	83 c4 10             	add    esp,0x10
c000bc8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc94:	52                   	push   edx
c000bc95:	50                   	push   eax
c000bc96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9e:	e8 c1 91 01 00       	call   c0024e64 <__divdf3>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcaa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbe:	e8 40 88 01 00       	call   c0024503 <__adddf3>
c000bcc3:	83 c4 10             	add    esp,0x10
c000bcc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcce:	83 ec 0c             	sub    esp,0xc
c000bcd1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd4:	e8 0a 95 01 00       	call   c00251e3 <__floatsidf>
c000bcd9:	83 c4 10             	add    esp,0x10
c000bcdc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bce0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	e8 56 97 01 00       	call   c002544f <__ltdf2>
c000bcf9:	83 c4 10             	add    esp,0x10
c000bcfc:	85 c0                	test   eax,eax
c000bcfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd06:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd0a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0e:	78 10                	js     c000bd20 <sinc_multichan_vari_process+0x50e>
c000bd10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd30:	e8 4b 8e 01 00       	call   c0024b80 <__muldf3>
c000bd35:	59                   	pop    ecx
c000bd36:	5d                   	pop    ebp
c000bd37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd47:	e8 25 f9 ff ff       	call   c000b671 <double_to_fp>
c000bd4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd50:	89 c5                	mov    ebp,eax
c000bd52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5e:	e8 1d 8e 01 00       	call   c0024b80 <__muldf3>
c000bd63:	83 c4 18             	add    esp,0x18
c000bd66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6e:	52                   	push   edx
c000bd6f:	50                   	push   eax
c000bd70:	e8 fc f8 ff ff       	call   c000b671 <double_to_fp>
c000bd75:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd78:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7f:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd82:	50                   	push   eax
c000bd83:	50                   	push   eax
c000bd84:	50                   	push   eax
c000bd85:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd88:	e8 56 94 01 00       	call   c00251e3 <__floatsidf>
c000bd8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd91:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda5:	e8 ba 90 01 00       	call   c0024e64 <__divdf3>
c000bdaa:	83 c4 1c             	add    esp,0x1c
c000bdad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdb1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb5:	52                   	push   edx
c000bdb6:	89 ea                	mov    edx,ebp
c000bdb8:	50                   	push   eax
c000bdb9:	89 d8                	mov    eax,ebx
c000bdbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc2:	e8 69 ed ff ff       	call   c000ab30 <calc_output_multi>
c000bdc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdca:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddd:	e8 82 90 01 00       	call   c0024e64 <__divdf3>
c000bde2:	83 c4 10             	add    esp,0x10
c000bde5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfd:	e8 01 87 01 00       	call   c0024503 <__adddf3>
c000be02:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be06:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be0a:	83 c4 28             	add    esp,0x28
c000be0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be15:	e8 e6 97 01 00       	call   c0025600 <lrint>
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	50                   	push   eax
c000be1e:	e8 c0 93 01 00       	call   c00251e3 <__floatsidf>
c000be23:	83 c4 10             	add    esp,0x10
c000be26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2e:	52                   	push   edx
c000be2f:	50                   	push   eax
c000be30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be38:	e8 17 8d 01 00       	call   c0024b54 <__subdf3>
c000be3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be45:	83 c4 20             	add    esp,0x20
c000be48:	6a 00                	push   0x0
c000be4a:	6a 00                	push   0x0
c000be4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be54:	e8 f6 95 01 00       	call   c002544f <__ltdf2>
c000be59:	83 c4 10             	add    esp,0x10
c000be5c:	85 c0                	test   eax,eax
c000be5e:	79 20                	jns    c000be80 <sinc_multichan_vari_process+0x66e>
c000be60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be70:	e8 8e 86 01 00       	call   c0024503 <__adddf3>
c000be75:	83 c4 10             	add    esp,0x10
c000be78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be83:	83 ec 10             	sub    esp,0x10
c000be86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be8a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9d:	e8 b2 8c 01 00       	call   c0024b54 <__subdf3>
c000bea2:	83 c4 18             	add    esp,0x18
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bead:	52                   	push   edx
c000beae:	50                   	push   eax
c000beaf:	e8 4c 97 01 00       	call   c0025600 <lrint>
c000beb4:	0f af e8             	imul   ebp,eax
c000beb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bebb:	83 c4 10             	add    esp,0x10
c000bebe:	01 e8                	add    eax,ebp
c000bec0:	99                   	cdq    
c000bec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec7:	e9 fd fb ff ff       	jmp    c000bac9 <sinc_multichan_vari_process+0x2b7>
c000becc:	83 c4 4c             	add    esp,0x4c
c000becf:	89 d0                	mov    eax,edx
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	5f                   	pop    edi
c000bed4:	5d                   	pop    ebp
c000bed5:	c3                   	ret    

c000bed6 <sinc_hex_vari_process>:
c000bed6:	55                   	push   ebp
c000bed7:	ba 05 00 00 00       	mov    edx,0x5
c000bedc:	57                   	push   edi
c000bedd:	56                   	push   esi
c000bede:	53                   	push   ebx
c000bedf:	83 ec 4c             	sub    esp,0x4c
c000bee2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000beea:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beed:	85 db                	test   ebx,ebx
c000beef:	0f 84 9c 06 00 00    	je     c000c591 <sinc_hex_vari_process+0x6bb>
c000bef5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000befb:	0f af c7             	imul   eax,edi
c000befe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf01:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf12:	0f af c7             	imul   eax,edi
c000bf15:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf18:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf26:	68 00 00 70 3f       	push   0x3f700000
c000bf2b:	6a 00                	push   0x0
c000bf2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf35:	e8 15 95 01 00       	call   c002544f <__ltdf2>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	ba 16 00 00 00       	mov    edx,0x16
c000bf42:	85 c0                	test   eax,eax
c000bf44:	0f 88 47 06 00 00    	js     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf4a:	68 00 00 70 40       	push   0x40700000
c000bf4f:	6a 00                	push   0x0
c000bf51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf59:	e8 d3 94 01 00       	call   c0025431 <__gtdf2>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	ba 16 00 00 00       	mov    edx,0x16
c000bf66:	85 c0                	test   eax,eax
c000bf68:	0f 8f 23 06 00 00    	jg     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf6e:	83 ec 0c             	sub    esp,0xc
c000bf71:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf74:	e8 6a 92 01 00       	call   c00251e3 <__floatsidf>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf84:	68 00 00 00 40       	push   0x40000000
c000bf89:	6a 00                	push   0x0
c000bf8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf93:	e8 6b 85 01 00       	call   c0024503 <__adddf3>
c000bf98:	59                   	pop    ecx
c000bf99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfa1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa4:	e8 3a 92 01 00       	call   c00251e3 <__floatsidf>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb4:	52                   	push   edx
c000bfb5:	50                   	push   eax
c000bfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbe:	e8 a1 8e 01 00       	call   c0024e64 <__divdf3>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfce:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfec:	e8 40 94 01 00       	call   c0025431 <__gtdf2>
c000bff1:	83 c4 10             	add    esp,0x10
c000bff4:	85 c0                	test   eax,eax
c000bff6:	7e 2d                	jle    c000c025 <sinc_hex_vari_process+0x14f>
c000bff8:	68 00 00 f0 3f       	push   0x3ff00000
c000bffd:	6a 00                	push   0x0
c000bfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c007:	e8 43 94 01 00       	call   c002544f <__ltdf2>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	85 c0                	test   eax,eax
c000c011:	79 4d                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c017:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	eb 1b                	jmp    c000c040 <sinc_hex_vari_process+0x16a>
c000c025:	68 00 00 f0 3f       	push   0x3ff00000
c000c02a:	6a 00                	push   0x0
c000c02c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c034:	e8 16 94 01 00       	call   c002544f <__ltdf2>
c000c039:	83 c4 10             	add    esp,0x10
c000c03c:	85 c0                	test   eax,eax
c000c03e:	79 20                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 0f 8e 01 00       	call   c0024e64 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	50                   	push   eax
c000c061:	50                   	push   eax
c000c062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c066:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06a:	e8 91 95 01 00       	call   c0025600 <lrint>
c000c06f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c072:	40                   	inc    eax
c000c073:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c077:	0f af c7             	imul   eax,edi
c000c07a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c085:	58                   	pop    eax
c000c086:	5a                   	pop    edx
c000c087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08f:	e8 6c 95 01 00       	call   c0025600 <lrint>
c000c094:	83 ec 0c             	sub    esp,0xc
c000c097:	50                   	push   eax
c000c098:	e8 46 91 01 00       	call   c00251e3 <__floatsidf>
c000c09d:	83 c4 10             	add    esp,0x10
c000c0a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a8:	52                   	push   edx
c000c0a9:	50                   	push   eax
c000c0aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b2:	e8 9d 8a 01 00       	call   c0024b54 <__subdf3>
c000c0b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bf:	83 c4 20             	add    esp,0x20
c000c0c2:	6a 00                	push   0x0
c000c0c4:	6a 00                	push   0x0
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 7c 93 01 00       	call   c002544f <__ltdf2>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	85 c0                	test   eax,eax
c000c0d8:	79 1f                	jns    c000c0f9 <sinc_hex_vari_process+0x223>
c000c0da:	68 00 00 f0 3f       	push   0x3ff00000
c000c0df:	6a 00                	push   0x0
c000c0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e9:	e8 15 84 01 00       	call   c0024503 <__adddf3>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fc:	83 ec 10             	sub    esp,0x10
c000c0ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c103:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c116:	e8 39 8a 01 00       	call   c0024b54 <__subdf3>
c000c11b:	83 c4 18             	add    esp,0x18
c000c11e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c122:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c126:	52                   	push   edx
c000c127:	50                   	push   eax
c000c128:	e8 d3 94 01 00       	call   c0025600 <lrint>
c000c12d:	0f af f8             	imul   edi,eax
c000c130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c134:	01 f8                	add    eax,edi
c000c136:	99                   	cdq    
c000c137:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c13a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c141:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c145:	68 00 00 f0 3f       	push   0x3ff00000
c000c14a:	6a 00                	push   0x0
c000c14c:	e8 13 8d 01 00       	call   c0024e64 <__divdf3>
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c158:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c161:	68 23 42 92 0c       	push   0xc924223
c000c166:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16e:	e8 90 83 01 00       	call   c0024503 <__adddf3>
c000c173:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c177:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c17b:	83 c4 20             	add    esp,0x20
c000c17e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c186:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c191:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c194:	7d 50                	jge    c000c1e6 <sinc_hex_vari_process+0x310>
c000c196:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c199:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19c:	01 c8                	add    eax,ecx
c000c19e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a1:	99                   	cdq    
c000c1a2:	f7 f9                	idiv   ecx
c000c1a4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a8:	7d 0c                	jge    c000c1b6 <sinc_hex_vari_process+0x2e0>
c000c1aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ad:	85 ff                	test   edi,edi
c000c1af:	79 6c                	jns    c000c21d <sinc_hex_vari_process+0x347>
c000c1b1:	e9 e7 00 00 00       	jmp    c000c29d <sinc_hex_vari_process+0x3c7>
c000c1b6:	50                   	push   eax
c000c1b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1bb:	56                   	push   esi
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 d6 f4 ff ff       	call   c000b698 <prepare_data>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	89 c2                	mov    edx,eax
c000c1c7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1ca:	85 c0                	test   eax,eax
c000c1cc:	0f 85 bf 03 00 00    	jne    c000c591 <sinc_hex_vari_process+0x6bb>
c000c1d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d8:	01 c8                	add    eax,ecx
c000c1da:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1dd:	99                   	cdq    
c000c1de:	f7 f9                	idiv   ecx
c000c1e0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e4:	7c c4                	jl     c000c1aa <sinc_hex_vari_process+0x2d4>
c000c1e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ee:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1f1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c202:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c205:	99                   	cdq    
c000c206:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c209:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20f:	99                   	cdq    
c000c210:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c213:	31 d2                	xor    edx,edx
c000c215:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c218:	e9 74 03 00 00       	jmp    c000c591 <sinc_hex_vari_process+0x6bb>
c000c21d:	83 ec 0c             	sub    esp,0xc
c000c220:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c223:	e8 bb 8f 01 00       	call   c00251e3 <__floatsidf>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c233:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c237:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c23b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c243:	e8 bb 82 01 00       	call   c0024503 <__adddf3>
c000c248:	83 c4 10             	add    esp,0x10
c000c24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c253:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c257:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c263:	e8 9b 82 01 00       	call   c0024503 <__adddf3>
c000c268:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c26b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c273:	e8 6b 8f 01 00       	call   c00251e3 <__floatsidf>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c283:	52                   	push   edx
c000c284:	50                   	push   eax
c000c285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28d:	e8 bb 91 01 00       	call   c002544d <__gedf2>
c000c292:	83 c4 10             	add    esp,0x10
c000c295:	85 c0                	test   eax,eax
c000c297:	0f 89 49 ff ff ff    	jns    c000c1e6 <sinc_hex_vari_process+0x310>
c000c29d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2a1:	0f 8e ef 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2a7:	83 ec 10             	sub    esp,0x10
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b6:	e8 99 88 01 00       	call   c0024b54 <__subdf3>
c000c2bb:	83 c4 18             	add    esp,0x18
c000c2be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c6:	52                   	push   edx
c000c2c7:	50                   	push   eax
c000c2c8:	e8 13 93 01 00       	call   c00255e0 <fabs>
c000c2cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d5:	83 c4 10             	add    esp,0x10
c000c2d8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2dd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2ea:	e8 42 91 01 00       	call   c0025431 <__gtdf2>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	85 c0                	test   eax,eax
c000c2f4:	0f 8e 9c 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c300:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c304:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c308:	52                   	push   edx
c000c309:	50                   	push   eax
c000c30a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c310:	e8 3f 88 01 00       	call   c0024b54 <__subdf3>
c000c315:	59                   	pop    ecx
c000c316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c31a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c321:	e8 bd 8e 01 00       	call   c00251e3 <__floatsidf>
c000c326:	83 c4 10             	add    esp,0x10
c000c329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c331:	52                   	push   edx
c000c332:	50                   	push   eax
c000c333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33b:	e8 40 88 01 00       	call   c0024b80 <__muldf3>
c000c340:	5f                   	pop    edi
c000c341:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c345:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c349:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34c:	e8 92 8e 01 00       	call   c00251e3 <__floatsidf>
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35c:	52                   	push   edx
c000c35d:	50                   	push   eax
c000c35e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c362:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c366:	e8 f9 8a 01 00       	call   c0024e64 <__divdf3>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c372:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c386:	e8 78 81 01 00       	call   c0024503 <__adddf3>
c000c38b:	83 c4 10             	add    esp,0x10
c000c38e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c392:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39c:	e8 42 8e 01 00       	call   c00251e3 <__floatsidf>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3bc:	e8 8e 90 01 00       	call   c002544f <__ltdf2>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	85 c0                	test   eax,eax
c000c3c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3ce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d6:	78 10                	js     c000c3e8 <sinc_hex_vari_process+0x512>
c000c3d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f8:	e8 83 87 01 00       	call   c0024b80 <__muldf3>
c000c3fd:	59                   	pop    ecx
c000c3fe:	5f                   	pop    edi
c000c3ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40f:	e8 5d f2 ff ff       	call   c000b671 <double_to_fp>
c000c414:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c418:	89 c7                	mov    edi,eax
c000c41a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c422:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c426:	e8 55 87 01 00       	call   c0024b80 <__muldf3>
c000c42b:	83 c4 18             	add    esp,0x18
c000c42e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c432:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c436:	52                   	push   edx
c000c437:	50                   	push   eax
c000c438:	e8 34 f2 ff ff       	call   c000b671 <double_to_fp>
c000c43d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c444:	83 c4 0c             	add    esp,0xc
c000c447:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c44a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44d:	50                   	push   eax
c000c44e:	50                   	push   eax
c000c44f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c452:	e8 8c 8d 01 00       	call   c00251e3 <__floatsidf>
c000c457:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c45b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c463:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c467:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46f:	e8 f0 89 01 00       	call   c0024e64 <__divdf3>
c000c474:	83 c4 18             	add    esp,0x18
c000c477:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47f:	52                   	push   edx
c000c480:	89 fa                	mov    edx,edi
c000c482:	50                   	push   eax
c000c483:	89 d8                	mov    eax,ebx
c000c485:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c489:	e8 50 de ff ff       	call   c000a2de <calc_output_hex>
c000c48e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c496:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a2:	e8 bd 89 01 00       	call   c0024e64 <__divdf3>
c000c4a7:	83 c4 10             	add    esp,0x10
c000c4aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c2:	e8 3c 80 01 00       	call   c0024503 <__adddf3>
c000c4c7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4cb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cf:	83 c4 18             	add    esp,0x18
c000c4d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4da:	e8 21 91 01 00       	call   c0025600 <lrint>
c000c4df:	83 ec 0c             	sub    esp,0xc
c000c4e2:	50                   	push   eax
c000c4e3:	e8 fb 8c 01 00       	call   c00251e3 <__floatsidf>
c000c4e8:	83 c4 10             	add    esp,0x10
c000c4eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f3:	52                   	push   edx
c000c4f4:	50                   	push   eax
c000c4f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fd:	e8 52 86 01 00       	call   c0024b54 <__subdf3>
c000c502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c506:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c50a:	83 c4 20             	add    esp,0x20
c000c50d:	6a 00                	push   0x0
c000c50f:	6a 00                	push   0x0
c000c511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c519:	e8 31 8f 01 00       	call   c002544f <__ltdf2>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	85 c0                	test   eax,eax
c000c523:	79 20                	jns    c000c545 <sinc_hex_vari_process+0x66f>
c000c525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c535:	e8 c9 7f 01 00       	call   c0024503 <__adddf3>
c000c53a:	83 c4 10             	add    esp,0x10
c000c53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c545:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c548:	83 ec 10             	sub    esp,0x10
c000c54b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c562:	e8 ed 85 01 00       	call   c0024b54 <__subdf3>
c000c567:	83 c4 18             	add    esp,0x18
c000c56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c572:	52                   	push   edx
c000c573:	50                   	push   eax
c000c574:	e8 87 90 01 00       	call   c0025600 <lrint>
c000c579:	0f af f8             	imul   edi,eax
c000c57c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c580:	83 c4 10             	add    esp,0x10
c000c583:	01 f8                	add    eax,edi
c000c585:	99                   	cdq    
c000c586:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c589:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58c:	e9 fd fb ff ff       	jmp    c000c18e <sinc_hex_vari_process+0x2b8>
c000c591:	83 c4 4c             	add    esp,0x4c
c000c594:	89 d0                	mov    eax,edx
c000c596:	5b                   	pop    ebx
c000c597:	5e                   	pop    esi
c000c598:	5f                   	pop    edi
c000c599:	5d                   	pop    ebp
c000c59a:	c3                   	ret    

c000c59b <sinc_quad_vari_process>:
c000c59b:	55                   	push   ebp
c000c59c:	ba 05 00 00 00       	mov    edx,0x5
c000c5a1:	57                   	push   edi
c000c5a2:	56                   	push   esi
c000c5a3:	53                   	push   ebx
c000c5a4:	83 ec 4c             	sub    esp,0x4c
c000c5a7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5ab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5af:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b2:	85 db                	test   ebx,ebx
c000c5b4:	0f 84 9c 06 00 00    	je     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c5ba:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5c0:	0f af c7             	imul   eax,edi
c000c5c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5d0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d7:	0f af c7             	imul   eax,edi
c000c5da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5dd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5eb:	68 00 00 70 3f       	push   0x3f700000
c000c5f0:	6a 00                	push   0x0
c000c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fa:	e8 50 8e 01 00       	call   c002544f <__ltdf2>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	ba 16 00 00 00       	mov    edx,0x16
c000c607:	85 c0                	test   eax,eax
c000c609:	0f 88 47 06 00 00    	js     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c60f:	68 00 00 70 40       	push   0x40700000
c000c614:	6a 00                	push   0x0
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	e8 0e 8e 01 00       	call   c0025431 <__gtdf2>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	ba 16 00 00 00       	mov    edx,0x16
c000c62b:	85 c0                	test   eax,eax
c000c62d:	0f 8f 23 06 00 00    	jg     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c639:	e8 a5 8b 01 00       	call   c00251e3 <__floatsidf>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c649:	68 00 00 00 40       	push   0x40000000
c000c64e:	6a 00                	push   0x0
c000c650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c658:	e8 a6 7e 01 00       	call   c0024503 <__adddf3>
c000c65d:	59                   	pop    ecx
c000c65e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c662:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c666:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c669:	e8 75 8b 01 00       	call   c00251e3 <__floatsidf>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c675:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c679:	52                   	push   edx
c000c67a:	50                   	push   eax
c000c67b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c683:	e8 dc 87 01 00       	call   c0024e64 <__divdf3>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c693:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c696:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b1:	e8 7b 8d 01 00       	call   c0025431 <__gtdf2>
c000c6b6:	83 c4 10             	add    esp,0x10
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	7e 2d                	jle    c000c6ea <sinc_quad_vari_process+0x14f>
c000c6bd:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c2:	6a 00                	push   0x0
c000c6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cc:	e8 7e 8d 01 00       	call   c002544f <__ltdf2>
c000c6d1:	83 c4 10             	add    esp,0x10
c000c6d4:	85 c0                	test   eax,eax
c000c6d6:	79 4d                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	eb 1b                	jmp    c000c705 <sinc_quad_vari_process+0x16a>
c000c6ea:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ef:	6a 00                	push   0x0
c000c6f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f9:	e8 51 8d 01 00       	call   c002544f <__ltdf2>
c000c6fe:	83 c4 10             	add    esp,0x10
c000c701:	85 c0                	test   eax,eax
c000c703:	79 20                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c711:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c715:	e8 4a 87 01 00       	call   c0024e64 <__divdf3>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c721:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c725:	50                   	push   eax
c000c726:	50                   	push   eax
c000c727:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72f:	e8 cc 8e 01 00       	call   c0025600 <lrint>
c000c734:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c737:	40                   	inc    eax
c000c738:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73c:	0f af c7             	imul   eax,edi
c000c73f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c746:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c74a:	58                   	pop    eax
c000c74b:	5a                   	pop    edx
c000c74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c750:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c754:	e8 a7 8e 01 00       	call   c0025600 <lrint>
c000c759:	83 ec 0c             	sub    esp,0xc
c000c75c:	50                   	push   eax
c000c75d:	e8 81 8a 01 00       	call   c00251e3 <__floatsidf>
c000c762:	83 c4 10             	add    esp,0x10
c000c765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c769:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76d:	52                   	push   edx
c000c76e:	50                   	push   eax
c000c76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c777:	e8 d8 83 01 00       	call   c0024b54 <__subdf3>
c000c77c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c780:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c784:	83 c4 20             	add    esp,0x20
c000c787:	6a 00                	push   0x0
c000c789:	6a 00                	push   0x0
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 b7 8c 01 00       	call   c002544f <__ltdf2>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	85 c0                	test   eax,eax
c000c79d:	79 1f                	jns    c000c7be <sinc_quad_vari_process+0x223>
c000c79f:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a4:	6a 00                	push   0x0
c000c7a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ae:	e8 50 7d 01 00       	call   c0024503 <__adddf3>
c000c7b3:	83 c4 10             	add    esp,0x10
c000c7b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7c1:	83 ec 10             	sub    esp,0x10
c000c7c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7db:	e8 74 83 01 00       	call   c0024b54 <__subdf3>
c000c7e0:	83 c4 18             	add    esp,0x18
c000c7e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7eb:	52                   	push   edx
c000c7ec:	50                   	push   eax
c000c7ed:	e8 0e 8e 01 00       	call   c0025600 <lrint>
c000c7f2:	0f af f8             	imul   edi,eax
c000c7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f9:	01 f8                	add    eax,edi
c000c7fb:	99                   	cdq    
c000c7fc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c802:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c806:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80a:	68 00 00 f0 3f       	push   0x3ff00000
c000c80f:	6a 00                	push   0x0
c000c811:	e8 4e 86 01 00       	call   c0024e64 <__divdf3>
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c821:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c826:	68 23 42 92 0c       	push   0xc924223
c000c82b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c833:	e8 cb 7c 01 00       	call   c0024503 <__adddf3>
c000c838:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c840:	83 c4 20             	add    esp,0x20
c000c843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c84b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c853:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c856:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c859:	7d 50                	jge    c000c8ab <sinc_quad_vari_process+0x310>
c000c85b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c861:	01 c8                	add    eax,ecx
c000c863:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c866:	99                   	cdq    
c000c867:	f7 f9                	idiv   ecx
c000c869:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86d:	7d 0c                	jge    c000c87b <sinc_quad_vari_process+0x2e0>
c000c86f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c872:	85 ff                	test   edi,edi
c000c874:	79 6c                	jns    c000c8e2 <sinc_quad_vari_process+0x347>
c000c876:	e9 e7 00 00 00       	jmp    c000c962 <sinc_quad_vari_process+0x3c7>
c000c87b:	50                   	push   eax
c000c87c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	e8 11 ee ff ff       	call   c000b698 <prepare_data>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 c2                	mov    edx,eax
c000c88c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88f:	85 c0                	test   eax,eax
c000c891:	0f 85 bf 03 00 00    	jne    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c897:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c89a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89d:	01 c8                	add    eax,ecx
c000c89f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a2:	99                   	cdq    
c000c8a3:	f7 f9                	idiv   ecx
c000c8a5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a9:	7c c4                	jl     c000c86f <sinc_quad_vari_process+0x2d4>
c000c8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8ca:	99                   	cdq    
c000c8cb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8ce:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8d1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d4:	99                   	cdq    
c000c8d5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d8:	31 d2                	xor    edx,edx
c000c8da:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8dd:	e9 74 03 00 00       	jmp    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c8e2:	83 ec 0c             	sub    esp,0xc
c000c8e5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e8:	e8 f6 88 01 00       	call   c00251e3 <__floatsidf>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c908:	e8 f6 7b 01 00       	call   c0024503 <__adddf3>
c000c90d:	83 c4 10             	add    esp,0x10
c000c910:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c920:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c924:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c928:	e8 d6 7b 01 00       	call   c0024503 <__adddf3>
c000c92d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c930:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c934:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c938:	e8 a6 88 01 00       	call   c00251e3 <__floatsidf>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c944:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c948:	52                   	push   edx
c000c949:	50                   	push   eax
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c952:	e8 f6 8a 01 00       	call   c002544d <__gedf2>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	85 c0                	test   eax,eax
c000c95c:	0f 89 49 ff ff ff    	jns    c000c8ab <sinc_quad_vari_process+0x310>
c000c962:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c966:	0f 8e ef 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c96c:	83 ec 10             	sub    esp,0x10
c000c96f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c972:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c975:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c978:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c97b:	e8 d4 81 01 00       	call   c0024b54 <__subdf3>
c000c980:	83 c4 18             	add    esp,0x18
c000c983:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c987:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98b:	52                   	push   edx
c000c98c:	50                   	push   eax
c000c98d:	e8 4e 8c 01 00       	call   c00255e0 <fabs>
c000c992:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c996:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c99a:	83 c4 10             	add    esp,0x10
c000c99d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9af:	e8 7d 8a 01 00       	call   c0025431 <__gtdf2>
c000c9b4:	83 c4 10             	add    esp,0x10
c000c9b7:	85 c0                	test   eax,eax
c000c9b9:	0f 8e 9c 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c9bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cd:	52                   	push   edx
c000c9ce:	50                   	push   eax
c000c9cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d5:	e8 7a 81 01 00       	call   c0024b54 <__subdf3>
c000c9da:	59                   	pop    ecx
c000c9db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e6:	e8 f8 87 01 00       	call   c00251e3 <__floatsidf>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f6:	52                   	push   edx
c000c9f7:	50                   	push   eax
c000c9f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca00:	e8 7b 81 01 00       	call   c0024b80 <__muldf3>
c000ca05:	5f                   	pop    edi
c000ca06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca0a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca11:	e8 cd 87 01 00       	call   c00251e3 <__floatsidf>
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca21:	52                   	push   edx
c000ca22:	50                   	push   eax
c000ca23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca2b:	e8 34 84 01 00       	call   c0024e64 <__divdf3>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca4b:	e8 b3 7a 01 00       	call   c0024503 <__adddf3>
c000ca50:	83 c4 10             	add    esp,0x10
c000ca53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca5b:	83 ec 0c             	sub    esp,0xc
c000ca5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca61:	e8 7d 87 01 00       	call   c00251e3 <__floatsidf>
c000ca66:	83 c4 10             	add    esp,0x10
c000ca69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca81:	e8 c9 89 01 00       	call   c002544f <__ltdf2>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	85 c0                	test   eax,eax
c000ca8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca93:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca97:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca9b:	78 10                	js     c000caad <sinc_quad_vari_process+0x512>
c000ca9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabd:	e8 be 80 01 00       	call   c0024b80 <__muldf3>
c000cac2:	59                   	pop    ecx
c000cac3:	5f                   	pop    edi
c000cac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad4:	e8 98 eb ff ff       	call   c000b671 <double_to_fp>
c000cad9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadd:	89 c7                	mov    edi,eax
c000cadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caeb:	e8 90 80 01 00       	call   c0024b80 <__muldf3>
c000caf0:	83 c4 18             	add    esp,0x18
c000caf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cafb:	52                   	push   edx
c000cafc:	50                   	push   eax
c000cafd:	e8 6f eb ff ff       	call   c000b671 <double_to_fp>
c000cb02:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb09:	83 c4 0c             	add    esp,0xc
c000cb0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb12:	50                   	push   eax
c000cb13:	50                   	push   eax
c000cb14:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb17:	e8 c7 86 01 00       	call   c00251e3 <__floatsidf>
c000cb1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb34:	e8 2b 83 01 00       	call   c0024e64 <__divdf3>
c000cb39:	83 c4 18             	add    esp,0x18
c000cb3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb44:	52                   	push   edx
c000cb45:	89 fa                	mov    edx,edi
c000cb47:	50                   	push   eax
c000cb48:	89 d8                	mov    eax,ebx
c000cb4a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4e:	e8 a5 d1 ff ff       	call   c0009cf8 <calc_output_quad>
c000cb53:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb67:	e8 f8 82 01 00       	call   c0024e64 <__divdf3>
c000cb6c:	83 c4 10             	add    esp,0x10
c000cb6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb87:	e8 77 79 01 00       	call   c0024503 <__adddf3>
c000cb8c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb94:	83 c4 18             	add    esp,0x18
c000cb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9f:	e8 5c 8a 01 00       	call   c0025600 <lrint>
c000cba4:	83 ec 0c             	sub    esp,0xc
c000cba7:	50                   	push   eax
c000cba8:	e8 36 86 01 00       	call   c00251e3 <__floatsidf>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb8:	52                   	push   edx
c000cbb9:	50                   	push   eax
c000cbba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc2:	e8 8d 7f 01 00       	call   c0024b54 <__subdf3>
c000cbc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcf:	83 c4 20             	add    esp,0x20
c000cbd2:	6a 00                	push   0x0
c000cbd4:	6a 00                	push   0x0
c000cbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbde:	e8 6c 88 01 00       	call   c002544f <__ltdf2>
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	85 c0                	test   eax,eax
c000cbe8:	79 20                	jns    c000cc0a <sinc_quad_vari_process+0x66f>
c000cbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbfa:	e8 04 79 01 00       	call   c0024503 <__adddf3>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc0a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0d:	83 ec 10             	sub    esp,0x10
c000cc10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc27:	e8 28 7f 01 00       	call   c0024b54 <__subdf3>
c000cc2c:	83 c4 18             	add    esp,0x18
c000cc2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc37:	52                   	push   edx
c000cc38:	50                   	push   eax
c000cc39:	e8 c2 89 01 00       	call   c0025600 <lrint>
c000cc3e:	0f af f8             	imul   edi,eax
c000cc41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc45:	83 c4 10             	add    esp,0x10
c000cc48:	01 f8                	add    eax,edi
c000cc4a:	99                   	cdq    
c000cc4b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc51:	e9 fd fb ff ff       	jmp    c000c853 <sinc_quad_vari_process+0x2b8>
c000cc56:	83 c4 4c             	add    esp,0x4c
c000cc59:	89 d0                	mov    eax,edx
c000cc5b:	5b                   	pop    ebx
c000cc5c:	5e                   	pop    esi
c000cc5d:	5f                   	pop    edi
c000cc5e:	5d                   	pop    ebp
c000cc5f:	c3                   	ret    

c000cc60 <sinc_stereo_vari_process>:
c000cc60:	55                   	push   ebp
c000cc61:	ba 05 00 00 00       	mov    edx,0x5
c000cc66:	57                   	push   edi
c000cc67:	56                   	push   esi
c000cc68:	53                   	push   ebx
c000cc69:	83 ec 4c             	sub    esp,0x4c
c000cc6c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc70:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc74:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc77:	85 db                	test   ebx,ebx
c000cc79:	0f 84 9c 06 00 00    	je     c000d31b <sinc_stereo_vari_process+0x6bb>
c000cc7f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc85:	0f af c7             	imul   eax,edi
c000cc88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc8b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc95:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9c:	0f af c7             	imul   eax,edi
c000cc9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb0:	68 00 00 70 3f       	push   0x3f700000
c000ccb5:	6a 00                	push   0x0
c000ccb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbf:	e8 8b 87 01 00       	call   c002544f <__ltdf2>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	ba 16 00 00 00       	mov    edx,0x16
c000cccc:	85 c0                	test   eax,eax
c000ccce:	0f 88 47 06 00 00    	js     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccd4:	68 00 00 70 40       	push   0x40700000
c000ccd9:	6a 00                	push   0x0
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	e8 49 87 01 00       	call   c0025431 <__gtdf2>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	ba 16 00 00 00       	mov    edx,0x16
c000ccf0:	85 c0                	test   eax,eax
c000ccf2:	0f 8f 23 06 00 00    	jg     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfe:	e8 e0 84 01 00       	call   c00251e3 <__floatsidf>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0e:	68 00 00 00 40       	push   0x40000000
c000cd13:	6a 00                	push   0x0
c000cd15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1d:	e8 e1 77 01 00       	call   c0024503 <__adddf3>
c000cd22:	59                   	pop    ecx
c000cd23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd2b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2e:	e8 b0 84 01 00       	call   c00251e3 <__floatsidf>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3e:	52                   	push   edx
c000cd3f:	50                   	push   eax
c000cd40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd48:	e8 17 81 01 00       	call   c0024e64 <__divdf3>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd58:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd5b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd76:	e8 b6 86 01 00       	call   c0025431 <__gtdf2>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	85 c0                	test   eax,eax
c000cd80:	7e 2d                	jle    c000cdaf <sinc_stereo_vari_process+0x14f>
c000cd82:	68 00 00 f0 3f       	push   0x3ff00000
c000cd87:	6a 00                	push   0x0
c000cd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd91:	e8 b9 86 01 00       	call   c002544f <__ltdf2>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	85 c0                	test   eax,eax
c000cd9b:	79 4d                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	eb 1b                	jmp    c000cdca <sinc_stereo_vari_process+0x16a>
c000cdaf:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb4:	6a 00                	push   0x0
c000cdb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbe:	e8 8c 86 01 00       	call   c002544f <__ltdf2>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	85 c0                	test   eax,eax
c000cdc8:	79 20                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cdca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdda:	e8 85 80 01 00       	call   c0024e64 <__divdf3>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdea:	50                   	push   eax
c000cdeb:	50                   	push   eax
c000cdec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf4:	e8 07 88 01 00       	call   c0025600 <lrint>
c000cdf9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfc:	40                   	inc    eax
c000cdfd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce01:	0f af c7             	imul   eax,edi
c000ce04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0f:	58                   	pop    eax
c000ce10:	5a                   	pop    edx
c000ce11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce19:	e8 e2 87 01 00       	call   c0025600 <lrint>
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	50                   	push   eax
c000ce22:	e8 bc 83 01 00       	call   c00251e3 <__floatsidf>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce32:	52                   	push   edx
c000ce33:	50                   	push   eax
c000ce34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3c:	e8 13 7d 01 00       	call   c0024b54 <__subdf3>
c000ce41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce49:	83 c4 20             	add    esp,0x20
c000ce4c:	6a 00                	push   0x0
c000ce4e:	6a 00                	push   0x0
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 f2 85 01 00       	call   c002544f <__ltdf2>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	85 c0                	test   eax,eax
c000ce62:	79 1f                	jns    c000ce83 <sinc_stereo_vari_process+0x223>
c000ce64:	68 00 00 f0 3f       	push   0x3ff00000
c000ce69:	6a 00                	push   0x0
c000ce6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce73:	e8 8b 76 01 00       	call   c0024503 <__adddf3>
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce83:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce86:	83 ec 10             	sub    esp,0x10
c000ce89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cea0:	e8 af 7c 01 00       	call   c0024b54 <__subdf3>
c000cea5:	83 c4 18             	add    esp,0x18
c000cea8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceb0:	52                   	push   edx
c000ceb1:	50                   	push   eax
c000ceb2:	e8 49 87 01 00       	call   c0025600 <lrint>
c000ceb7:	0f af f8             	imul   edi,eax
c000ceba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebe:	01 f8                	add    eax,edi
c000cec0:	99                   	cdq    
c000cec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecf:	68 00 00 f0 3f       	push   0x3ff00000
c000ced4:	6a 00                	push   0x0
c000ced6:	e8 89 7f 01 00       	call   c0024e64 <__divdf3>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ceeb:	68 23 42 92 0c       	push   0xc924223
c000cef0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef8:	e8 06 76 01 00       	call   c0024503 <__adddf3>
c000cefd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf01:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf05:	83 c4 20             	add    esp,0x20
c000cf08:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf10:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf1b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1e:	7d 50                	jge    c000cf70 <sinc_stereo_vari_process+0x310>
c000cf20:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf23:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf26:	01 c8                	add    eax,ecx
c000cf28:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf2b:	99                   	cdq    
c000cf2c:	f7 f9                	idiv   ecx
c000cf2e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf32:	7d 0c                	jge    c000cf40 <sinc_stereo_vari_process+0x2e0>
c000cf34:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf37:	85 ff                	test   edi,edi
c000cf39:	79 6c                	jns    c000cfa7 <sinc_stereo_vari_process+0x347>
c000cf3b:	e9 e7 00 00 00       	jmp    c000d027 <sinc_stereo_vari_process+0x3c7>
c000cf40:	50                   	push   eax
c000cf41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf45:	56                   	push   esi
c000cf46:	53                   	push   ebx
c000cf47:	e8 4c e7 ff ff       	call   c000b698 <prepare_data>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	89 c2                	mov    edx,eax
c000cf51:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf54:	85 c0                	test   eax,eax
c000cf56:	0f 85 bf 03 00 00    	jne    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cf5c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf62:	01 c8                	add    eax,ecx
c000cf64:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf67:	99                   	cdq    
c000cf68:	f7 f9                	idiv   ecx
c000cf6a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6e:	7c c4                	jl     c000cf34 <sinc_stereo_vari_process+0x2d4>
c000cf70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf78:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf7b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf86:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf89:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8f:	99                   	cdq    
c000cf90:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf93:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf96:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf99:	99                   	cdq    
c000cf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9d:	31 d2                	xor    edx,edx
c000cf9f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa2:	e9 74 03 00 00       	jmp    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cfa7:	83 ec 0c             	sub    esp,0xc
c000cfaa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfad:	e8 31 82 01 00       	call   c00251e3 <__floatsidf>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcd:	e8 31 75 01 00       	call   c0024503 <__adddf3>
c000cfd2:	83 c4 10             	add    esp,0x10
c000cfd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfed:	e8 11 75 01 00       	call   c0024503 <__adddf3>
c000cff2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffd:	e8 e1 81 01 00       	call   c00251e3 <__floatsidf>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00d:	52                   	push   edx
c000d00e:	50                   	push   eax
c000d00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d017:	e8 31 84 01 00       	call   c002544d <__gedf2>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	85 c0                	test   eax,eax
c000d021:	0f 89 49 ff ff ff    	jns    c000cf70 <sinc_stereo_vari_process+0x310>
c000d027:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d02b:	0f 8e ef 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d031:	83 ec 10             	sub    esp,0x10
c000d034:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d037:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d03a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d040:	e8 0f 7b 01 00       	call   c0024b54 <__subdf3>
c000d045:	83 c4 18             	add    esp,0x18
c000d048:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d050:	52                   	push   edx
c000d051:	50                   	push   eax
c000d052:	e8 89 85 01 00       	call   c00255e0 <fabs>
c000d057:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d05b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05f:	83 c4 10             	add    esp,0x10
c000d062:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d067:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d074:	e8 b8 83 01 00       	call   c0025431 <__gtdf2>
c000d079:	83 c4 10             	add    esp,0x10
c000d07c:	85 c0                	test   eax,eax
c000d07e:	0f 8e 9c 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d084:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d087:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d092:	52                   	push   edx
c000d093:	50                   	push   eax
c000d094:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d097:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d09a:	e8 b5 7a 01 00       	call   c0024b54 <__subdf3>
c000d09f:	59                   	pop    ecx
c000d0a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0ab:	e8 33 81 01 00       	call   c00251e3 <__floatsidf>
c000d0b0:	83 c4 10             	add    esp,0x10
c000d0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0bb:	52                   	push   edx
c000d0bc:	50                   	push   eax
c000d0bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c5:	e8 b6 7a 01 00       	call   c0024b80 <__muldf3>
c000d0ca:	5f                   	pop    edi
c000d0cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0cf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d6:	e8 08 81 01 00       	call   c00251e3 <__floatsidf>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e6:	52                   	push   edx
c000d0e7:	50                   	push   eax
c000d0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0f0:	e8 6f 7d 01 00       	call   c0024e64 <__divdf3>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d110:	e8 ee 73 01 00       	call   c0024503 <__adddf3>
c000d115:	83 c4 10             	add    esp,0x10
c000d118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d126:	e8 b8 80 01 00       	call   c00251e3 <__floatsidf>
c000d12b:	83 c4 10             	add    esp,0x10
c000d12e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 04 83 01 00       	call   c002544f <__ltdf2>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	85 c0                	test   eax,eax
c000d150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d158:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d160:	78 10                	js     c000d172 <sinc_stereo_vari_process+0x512>
c000d162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d16a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d172:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d176:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d17a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d182:	e8 f9 79 01 00       	call   c0024b80 <__muldf3>
c000d187:	59                   	pop    ecx
c000d188:	5f                   	pop    edi
c000d189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d199:	e8 d3 e4 ff ff       	call   c000b671 <double_to_fp>
c000d19e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a2:	89 c7                	mov    edi,eax
c000d1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b0:	e8 cb 79 01 00       	call   c0024b80 <__muldf3>
c000d1b5:	83 c4 18             	add    esp,0x18
c000d1b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1c0:	52                   	push   edx
c000d1c1:	50                   	push   eax
c000d1c2:	e8 aa e4 ff ff       	call   c000b671 <double_to_fp>
c000d1c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1ce:	83 c4 0c             	add    esp,0xc
c000d1d1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d4:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d7:	50                   	push   eax
c000d1d8:	50                   	push   eax
c000d1d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1dc:	e8 02 80 01 00       	call   c00251e3 <__floatsidf>
c000d1e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f9:	e8 66 7c 01 00       	call   c0024e64 <__divdf3>
c000d1fe:	83 c4 18             	add    esp,0x18
c000d201:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d205:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d209:	52                   	push   edx
c000d20a:	89 fa                	mov    edx,edi
c000d20c:	50                   	push   eax
c000d20d:	89 d8                	mov    eax,ebx
c000d20f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d213:	e8 02 c7 ff ff       	call   c000991a <calc_output_stereo>
c000d218:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d224:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d228:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22c:	e8 33 7c 01 00       	call   c0024e64 <__divdf3>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d238:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d248:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24c:	e8 b2 72 01 00       	call   c0024503 <__adddf3>
c000d251:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d255:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d259:	83 c4 18             	add    esp,0x18
c000d25c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d264:	e8 97 83 01 00       	call   c0025600 <lrint>
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	50                   	push   eax
c000d26d:	e8 71 7f 01 00       	call   c00251e3 <__floatsidf>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27d:	52                   	push   edx
c000d27e:	50                   	push   eax
c000d27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d287:	e8 c8 78 01 00       	call   c0024b54 <__subdf3>
c000d28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d294:	83 c4 20             	add    esp,0x20
c000d297:	6a 00                	push   0x0
c000d299:	6a 00                	push   0x0
c000d29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a3:	e8 a7 81 01 00       	call   c002544f <__ltdf2>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	85 c0                	test   eax,eax
c000d2ad:	79 20                	jns    c000d2cf <sinc_stereo_vari_process+0x66f>
c000d2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bf:	e8 3f 72 01 00       	call   c0024503 <__adddf3>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2cf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d2:	83 ec 10             	sub    esp,0x10
c000d2d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ec:	e8 63 78 01 00       	call   c0024b54 <__subdf3>
c000d2f1:	83 c4 18             	add    esp,0x18
c000d2f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fc:	52                   	push   edx
c000d2fd:	50                   	push   eax
c000d2fe:	e8 fd 82 01 00       	call   c0025600 <lrint>
c000d303:	0f af f8             	imul   edi,eax
c000d306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d30a:	83 c4 10             	add    esp,0x10
c000d30d:	01 f8                	add    eax,edi
c000d30f:	99                   	cdq    
c000d310:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d313:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d316:	e9 fd fb ff ff       	jmp    c000cf18 <sinc_stereo_vari_process+0x2b8>
c000d31b:	83 c4 4c             	add    esp,0x4c
c000d31e:	89 d0                	mov    eax,edx
c000d320:	5b                   	pop    ebx
c000d321:	5e                   	pop    esi
c000d322:	5f                   	pop    edi
c000d323:	5d                   	pop    ebp
c000d324:	c3                   	ret    

c000d325 <sinc_mono_vari_process>:
c000d325:	55                   	push   ebp
c000d326:	ba 05 00 00 00       	mov    edx,0x5
c000d32b:	57                   	push   edi
c000d32c:	56                   	push   esi
c000d32d:	53                   	push   ebx
c000d32e:	83 ec 4c             	sub    esp,0x4c
c000d331:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d335:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d339:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33c:	85 db                	test   ebx,ebx
c000d33e:	0f 84 c1 06 00 00    	je     c000da05 <sinc_mono_vari_process+0x6e0>
c000d344:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d347:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d34a:	0f af c7             	imul   eax,edi
c000d34d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d350:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d353:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d35a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d361:	0f af c7             	imul   eax,edi
c000d364:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d367:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d36b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d370:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d374:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d378:	68 00 00 70 3f       	push   0x3f700000
c000d37d:	6a 00                	push   0x0
c000d37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d387:	e8 c3 80 01 00       	call   c002544f <__ltdf2>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	ba 16 00 00 00       	mov    edx,0x16
c000d394:	85 c0                	test   eax,eax
c000d396:	0f 88 69 06 00 00    	js     c000da05 <sinc_mono_vari_process+0x6e0>
c000d39c:	68 00 00 70 40       	push   0x40700000
c000d3a1:	6a 00                	push   0x0
c000d3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ab:	e8 81 80 01 00       	call   c0025431 <__gtdf2>
c000d3b0:	83 c4 10             	add    esp,0x10
c000d3b3:	ba 16 00 00 00       	mov    edx,0x16
c000d3b8:	85 c0                	test   eax,eax
c000d3ba:	0f 8f 45 06 00 00    	jg     c000da05 <sinc_mono_vari_process+0x6e0>
c000d3c0:	83 ec 0c             	sub    esp,0xc
c000d3c3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c6:	e8 18 7e 01 00       	call   c00251e3 <__floatsidf>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d6:	68 00 00 00 40       	push   0x40000000
c000d3db:	6a 00                	push   0x0
c000d3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e5:	e8 19 71 01 00       	call   c0024503 <__adddf3>
c000d3ea:	59                   	pop    ecx
c000d3eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f6:	e8 e8 7d 01 00       	call   c00251e3 <__floatsidf>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d402:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d406:	52                   	push   edx
c000d407:	50                   	push   eax
c000d408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d410:	e8 4f 7a 01 00       	call   c0024e64 <__divdf3>
c000d415:	83 c4 10             	add    esp,0x10
c000d418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d420:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d423:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d42a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43e:	e8 ee 7f 01 00       	call   c0025431 <__gtdf2>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	85 c0                	test   eax,eax
c000d448:	7e 2d                	jle    c000d477 <sinc_mono_vari_process+0x152>
c000d44a:	68 00 00 f0 3f       	push   0x3ff00000
c000d44f:	6a 00                	push   0x0
c000d451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d459:	e8 f1 7f 01 00       	call   c002544f <__ltdf2>
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	85 c0                	test   eax,eax
c000d463:	79 4d                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	eb 1b                	jmp    c000d492 <sinc_mono_vari_process+0x16d>
c000d477:	68 00 00 f0 3f       	push   0x3ff00000
c000d47c:	6a 00                	push   0x0
c000d47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d486:	e8 c4 7f 01 00       	call   c002544f <__ltdf2>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	85 c0                	test   eax,eax
c000d490:	79 20                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d492:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d496:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d49a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	e8 bd 79 01 00       	call   c0024e64 <__divdf3>
c000d4a7:	83 c4 10             	add    esp,0x10
c000d4aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b2:	50                   	push   eax
c000d4b3:	50                   	push   eax
c000d4b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	e8 3f 81 01 00       	call   c0025600 <lrint>
c000d4c1:	40                   	inc    eax
c000d4c2:	0f af c7             	imul   eax,edi
c000d4c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4db:	58                   	pop    eax
c000d4dc:	5a                   	pop    edx
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	e8 16 81 01 00       	call   c0025600 <lrint>
c000d4ea:	83 ec 0c             	sub    esp,0xc
c000d4ed:	50                   	push   eax
c000d4ee:	e8 f0 7c 01 00       	call   c00251e3 <__floatsidf>
c000d4f3:	83 c4 10             	add    esp,0x10
c000d4f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fe:	52                   	push   edx
c000d4ff:	50                   	push   eax
c000d500:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d508:	e8 47 76 01 00       	call   c0024b54 <__subdf3>
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	83 c4 20             	add    esp,0x20
c000d518:	6a 00                	push   0x0
c000d51a:	6a 00                	push   0x0
c000d51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d524:	e8 26 7f 01 00       	call   c002544f <__ltdf2>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	85 c0                	test   eax,eax
c000d52e:	79 1f                	jns    c000d54f <sinc_mono_vari_process+0x22a>
c000d530:	68 00 00 f0 3f       	push   0x3ff00000
c000d535:	6a 00                	push   0x0
c000d537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53f:	e8 bf 6f 01 00       	call   c0024503 <__adddf3>
c000d544:	83 c4 10             	add    esp,0x10
c000d547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d552:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d555:	83 ec 10             	sub    esp,0x10
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d564:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d568:	e8 e7 75 01 00       	call   c0024b54 <__subdf3>
c000d56d:	83 c4 18             	add    esp,0x18
c000d570:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d574:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d578:	52                   	push   edx
c000d579:	50                   	push   eax
c000d57a:	e8 81 80 01 00       	call   c0025600 <lrint>
c000d57f:	0f af f8             	imul   edi,eax
c000d582:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d585:	31 ff                	xor    edi,edi
c000d587:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58c:	99                   	cdq    
c000d58d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d590:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d593:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d59b:	55                   	push   ebp
c000d59c:	57                   	push   edi
c000d59d:	e8 c2 78 01 00       	call   c0024e64 <__divdf3>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ad:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b2:	68 23 42 92 0c       	push   0xc924223
c000d5b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bf:	e8 3f 6f 01 00       	call   c0024503 <__adddf3>
c000d5c4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5cc:	83 c4 20             	add    esp,0x20
c000d5cf:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5dd:	7d 54                	jge    c000d633 <sinc_mono_vari_process+0x30e>
c000d5df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e5:	01 c8                	add    eax,ecx
c000d5e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5ea:	99                   	cdq    
c000d5eb:	f7 f9                	idiv   ecx
c000d5ed:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5f1:	7d 0c                	jge    c000d5ff <sinc_mono_vari_process+0x2da>
c000d5f3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f6:	85 ff                	test   edi,edi
c000d5f8:	79 73                	jns    c000d66d <sinc_mono_vari_process+0x348>
c000d5fa:	e9 ee 00 00 00       	jmp    c000d6ed <sinc_mono_vari_process+0x3c8>
c000d5ff:	50                   	push   eax
c000d600:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d604:	56                   	push   esi
c000d605:	53                   	push   ebx
c000d606:	e8 8d e0 ff ff       	call   c000b698 <prepare_data>
c000d60b:	89 c2                	mov    edx,eax
c000d60d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d617:	85 d2                	test   edx,edx
c000d619:	0f 85 e6 03 00 00    	jne    c000da05 <sinc_mono_vari_process+0x6e0>
c000d61f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d622:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d625:	01 c8                	add    eax,ecx
c000d627:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d62a:	99                   	cdq    
c000d62b:	f7 f9                	idiv   ecx
c000d62d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d631:	7c c0                	jl     c000d5f3 <sinc_mono_vari_process+0x2ce>
c000d633:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d63b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d642:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64d:	89 01                	mov    DWORD PTR [ecx],eax
c000d64f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d652:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d655:	99                   	cdq    
c000d656:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d659:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65f:	99                   	cdq    
c000d660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d663:	31 d2                	xor    edx,edx
c000d665:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d668:	e9 98 03 00 00       	jmp    c000da05 <sinc_mono_vari_process+0x6e0>
c000d66d:	83 ec 0c             	sub    esp,0xc
c000d670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d673:	e8 6b 7b 01 00       	call   c00251e3 <__floatsidf>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d693:	e8 6b 6e 01 00       	call   c0024503 <__adddf3>
c000d698:	83 c4 10             	add    esp,0x10
c000d69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b3:	e8 4b 6e 01 00       	call   c0024503 <__adddf3>
c000d6b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c3:	e8 1b 7b 01 00       	call   c00251e3 <__floatsidf>
c000d6c8:	83 c4 10             	add    esp,0x10
c000d6cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d3:	52                   	push   edx
c000d6d4:	50                   	push   eax
c000d6d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6dd:	e8 4f 7d 01 00       	call   c0025431 <__gtdf2>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	85 c0                	test   eax,eax
c000d6e7:	0f 8f 46 ff ff ff    	jg     c000d633 <sinc_mono_vari_process+0x30e>
c000d6ed:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6f1:	0f 8e f5 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d6f7:	83 ec 10             	sub    esp,0x10
c000d6fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d700:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d704:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d707:	ff 30                	push   DWORD PTR [eax]
c000d709:	e8 46 74 01 00       	call   c0024b54 <__subdf3>
c000d70e:	83 c4 18             	add    esp,0x18
c000d711:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d715:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d719:	52                   	push   edx
c000d71a:	50                   	push   eax
c000d71b:	e8 c0 7e 01 00       	call   c00255e0 <fabs>
c000d720:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d724:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d730:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d735:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d739:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73d:	e8 ef 7c 01 00       	call   c0025431 <__gtdf2>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	85 c0                	test   eax,eax
c000d747:	0f 8e 9f 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d74d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d751:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d754:	8b 00                	mov    eax,DWORD PTR [eax]
c000d756:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75e:	52                   	push   edx
c000d75f:	50                   	push   eax
c000d760:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d763:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d766:	e8 e9 73 01 00       	call   c0024b54 <__subdf3>
c000d76b:	5f                   	pop    edi
c000d76c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d770:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d774:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d777:	e8 67 7a 01 00       	call   c00251e3 <__floatsidf>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d787:	52                   	push   edx
c000d788:	50                   	push   eax
c000d789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d791:	e8 ea 73 01 00       	call   c0024b80 <__muldf3>
c000d796:	5d                   	pop    ebp
c000d797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d79b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a2:	e8 3c 7a 01 00       	call   c00251e3 <__floatsidf>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b2:	52                   	push   edx
c000d7b3:	50                   	push   eax
c000d7b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7bc:	e8 a3 76 01 00       	call   c0024e64 <__divdf3>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7dc:	e8 22 6d 01 00       	call   c0024503 <__adddf3>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f2:	e8 ec 79 01 00       	call   c00251e3 <__floatsidf>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 38 7c 01 00       	call   c002544f <__ltdf2>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	85 c0                	test   eax,eax
c000d81c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d824:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d828:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82c:	78 10                	js     c000d83e <sinc_mono_vari_process+0x519>
c000d82e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d836:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d83a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d846:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84e:	e8 2d 73 01 00       	call   c0024b80 <__muldf3>
c000d853:	59                   	pop    ecx
c000d854:	5f                   	pop    edi
c000d855:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d859:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d861:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d865:	e8 07 de ff ff       	call   c000b671 <double_to_fp>
c000d86a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86e:	89 c7                	mov    edi,eax
c000d870:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d874:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87c:	e8 ff 72 01 00       	call   c0024b80 <__muldf3>
c000d881:	83 c4 18             	add    esp,0x18
c000d884:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d888:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88c:	52                   	push   edx
c000d88d:	50                   	push   eax
c000d88e:	e8 de dd ff ff       	call   c000b671 <double_to_fp>
c000d893:	83 ec 0c             	sub    esp,0xc
c000d896:	89 c5                	mov    ebp,eax
c000d898:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d89b:	e8 43 79 01 00       	call   c00251e3 <__floatsidf>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8ab:	52                   	push   edx
c000d8ac:	50                   	push   eax
c000d8ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b5:	e8 aa 75 01 00       	call   c0024e64 <__divdf3>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	89 e9                	mov    ecx,ebp
c000d8bf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c7:	89 d8                	mov    eax,ebx
c000d8c9:	89 fa                	mov    edx,edi
c000d8cb:	e8 ee bd ff ff       	call   c00096be <calc_output_single>
c000d8d0:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8da:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8de:	52                   	push   edx
c000d8df:	50                   	push   eax
c000d8e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e8:	e8 93 72 01 00       	call   c0024b80 <__muldf3>
c000d8ed:	59                   	pop    ecx
c000d8ee:	59                   	pop    ecx
c000d8ef:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8ff:	e8 4f 7b 01 00       	call   c0025453 <__truncdfsf2>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d90a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 42 75 01 00       	call   c0024e64 <__divdf3>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d929:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d935:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d939:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93d:	e8 c1 6b 01 00       	call   c0024503 <__adddf3>
c000d942:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d946:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d94a:	83 c4 18             	add    esp,0x18
c000d94d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d951:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d955:	e8 a6 7c 01 00       	call   c0025600 <lrint>
c000d95a:	83 ec 0c             	sub    esp,0xc
c000d95d:	50                   	push   eax
c000d95e:	e8 80 78 01 00       	call   c00251e3 <__floatsidf>
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d96a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96e:	52                   	push   edx
c000d96f:	50                   	push   eax
c000d970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d974:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d978:	e8 d7 71 01 00       	call   c0024b54 <__subdf3>
c000d97d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d985:	83 c4 20             	add    esp,0x20
c000d988:	6a 00                	push   0x0
c000d98a:	6a 00                	push   0x0
c000d98c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d990:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d994:	e8 b6 7a 01 00       	call   c002544f <__ltdf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	79 20                	jns    c000d9c0 <sinc_mono_vari_process+0x69b>
c000d9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9b0:	e8 4e 6b 01 00       	call   c0024503 <__adddf3>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9c0:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c6:	83 ec 10             	sub    esp,0x10
c000d9c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d9:	e8 76 71 01 00       	call   c0024b54 <__subdf3>
c000d9de:	83 c4 18             	add    esp,0x18
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	52                   	push   edx
c000d9ea:	50                   	push   eax
c000d9eb:	e8 10 7c 01 00       	call   c0025600 <lrint>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	0f af f8             	imul   edi,eax
c000d9f6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f9:	99                   	cdq    
c000d9fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da00:	e9 d2 fb ff ff       	jmp    c000d5d7 <sinc_mono_vari_process+0x2b2>
c000da05:	83 c4 4c             	add    esp,0x4c
c000da08:	89 d0                	mov    eax,edx
c000da0a:	5b                   	pop    ebx
c000da0b:	5e                   	pop    esi
c000da0c:	5f                   	pop    edi
c000da0d:	5d                   	pop    ebp
c000da0e:	c3                   	ret    

c000da0f <sinc_get_name>:
c000da0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da13:	31 c0                	xor    eax,eax
c000da15:	83 fa 02             	cmp    edx,0x2
c000da18:	77 07                	ja     c000da21 <sinc_get_name+0x12>
c000da1a:	8b 04 95 04 6d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd92fc]
c000da21:	c3                   	ret    

c000da22 <sinc_get_description>:
c000da22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da26:	31 c0                	xor    eax,eax
c000da28:	83 fa 02             	cmp    edx,0x2
c000da2b:	77 07                	ja     c000da34 <sinc_get_description+0x12>
c000da2d:	8b 04 95 f8 6c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9308]
c000da34:	c3                   	ret    

c000da35 <sinc_set_converter>:
c000da35:	53                   	push   ebx
c000da36:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da43:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da46:	85 c0                	test   eax,eax
c000da48:	74 13                	je     c000da5d <sinc_set_converter+0x28>
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	50                   	push   eax
c000da4e:	e8 89 1a 00 00       	call   c000f4dc <free>
c000da53:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da5a:	83 c4 10             	add    esp,0x10
c000da5d:	50                   	push   eax
c000da5e:	68 44 08 00 00       	push   0x844
c000da63:	6a 00                	push   0x0
c000da65:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da69:	50                   	push   eax
c000da6a:	e8 0e 2c ff ff       	call   c000067d <memset>
c000da6f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	b8 0b 00 00 00       	mov    eax,0xb
c000da7a:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da80:	7f 6e                	jg     c000daf0 <sinc_set_converter+0xbb>
c000da82:	83 fa 01             	cmp    edx,0x1
c000da85:	75 10                	jne    c000da97 <sinc_set_converter+0x62>
c000da87:	c7 43 24 25 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d325
c000da8e:	c7 43 20 25 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d325
c000da95:	eb 4d                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000da97:	83 fa 02             	cmp    edx,0x2
c000da9a:	75 10                	jne    c000daac <sinc_set_converter+0x77>
c000da9c:	c7 43 24 60 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc60
c000daa3:	c7 43 20 60 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc60
c000daaa:	eb 38                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000daac:	83 fa 04             	cmp    edx,0x4
c000daaf:	75 10                	jne    c000dac1 <sinc_set_converter+0x8c>
c000dab1:	c7 43 24 9b c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c59b
c000dab8:	c7 43 20 9b c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c59b
c000dabf:	eb 23                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dac1:	83 fa 06             	cmp    edx,0x6
c000dac4:	75 10                	jne    c000dad6 <sinc_set_converter+0xa1>
c000dac6:	c7 43 24 d6 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed6
c000dacd:	c7 43 20 d6 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed6
c000dad4:	eb 0e                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dad6:	c7 43 24 12 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b812
c000dadd:	c7 43 20 12 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b812
c000dae4:	c7 43 28 c5 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac5
c000daeb:	b8 0a 00 00 00       	mov    eax,0xa
c000daf0:	81 c4 58 08 00 00    	add    esp,0x858
c000daf6:	5b                   	pop    ebx
c000daf7:	c3                   	ret    

c000daf8 <zoh_vari_process>:
c000daf8:	55                   	push   ebp
c000daf9:	31 d2                	xor    edx,edx
c000dafb:	57                   	push   edi
c000dafc:	56                   	push   esi
c000dafd:	53                   	push   ebx
c000dafe:	83 ec 3c             	sub    esp,0x3c
c000db01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db05:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db09:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0d:	0f 8e 80 06 00 00    	jle    c000e193 <zoh_vari_process+0x69b>
c000db13:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db16:	ba 05 00 00 00       	mov    edx,0x5
c000db1b:	85 db                	test   ebx,ebx
c000db1d:	0f 84 70 06 00 00    	je     c000e193 <zoh_vari_process+0x69b>
c000db23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db2a:	74 19                	je     c000db45 <zoh_vari_process+0x4d>
c000db2c:	31 d2                	xor    edx,edx
c000db2e:	39 c2                	cmp    edx,eax
c000db30:	7d 0c                	jge    c000db3e <zoh_vari_process+0x46>
c000db32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db3b:	42                   	inc    edx
c000db3c:	eb f0                	jmp    c000db2e <zoh_vari_process+0x36>
c000db3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db48:	0f af d0             	imul   edx,eax
c000db4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db63:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db66:	8b 07                	mov    eax,DWORD PTR [edi]
c000db68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db70:	68 00 00 70 3f       	push   0x3f700000
c000db75:	6a 00                	push   0x0
c000db77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7f:	e8 cb 78 01 00       	call   c002544f <__ltdf2>
c000db84:	83 c4 10             	add    esp,0x10
c000db87:	ba 16 00 00 00       	mov    edx,0x16
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 88 ff 05 00 00    	js     c000e193 <zoh_vari_process+0x69b>
c000db94:	68 00 00 70 40       	push   0x40700000
c000db99:	6a 00                	push   0x0
c000db9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba3:	e8 89 78 01 00       	call   c0025431 <__gtdf2>
c000dba8:	83 c4 10             	add    esp,0x10
c000dbab:	ba 16 00 00 00       	mov    edx,0x16
c000dbb0:	85 c0                	test   eax,eax
c000dbb2:	0f 8f db 05 00 00    	jg     c000e193 <zoh_vari_process+0x69b>
c000dbb8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbbb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000dbcb:	6a 00                	push   0x0
c000dbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd5:	e8 75 78 01 00       	call   c002544f <__ltdf2>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	85 c0                	test   eax,eax
c000dbdf:	0f 89 da 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dbe5:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe8:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbeb:	0f 8d ce 01 00 00    	jge    c000ddbf <zoh_vari_process+0x2c7>
c000dbf1:	83 ec 0c             	sub    esp,0xc
c000dbf4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf7:	e8 e7 75 01 00       	call   c00251e3 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc16:	e8 65 6f 01 00       	call   c0024b80 <__muldf3>
c000dc1b:	59                   	pop    ecx
c000dc1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc24:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc27:	e8 b7 75 01 00       	call   c00251e3 <__floatsidf>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc37:	52                   	push   edx
c000dc38:	50                   	push   eax
c000dc39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc41:	e8 bd 68 01 00       	call   c0024503 <__adddf3>
c000dc46:	59                   	pop    ecx
c000dc47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc4b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc52:	e8 8c 75 01 00       	call   c00251e3 <__floatsidf>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc62:	52                   	push   edx
c000dc63:	50                   	push   eax
c000dc64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6c:	e8 dc 77 01 00       	call   c002544d <__gedf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	0f 89 43 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dc7c:	85 ed                	test   ebp,ebp
c000dc7e:	0f 8e ec 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dc84:	83 ec 10             	sub    esp,0x10
c000dc87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc8a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc90:	ff 37                	push   DWORD PTR [edi]
c000dc92:	e8 bd 6e 01 00       	call   c0024b54 <__subdf3>
c000dc97:	83 c4 18             	add    esp,0x18
c000dc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca2:	52                   	push   edx
c000dca3:	50                   	push   eax
c000dca4:	e8 37 79 01 00       	call   c00255e0 <fabs>
c000dca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb9:	68 23 42 92 0c       	push   0xc924223
c000dcbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc6:	e8 66 77 01 00       	call   c0025431 <__gtdf2>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	85 c0                	test   eax,eax
c000dcd0:	0f 8e 9a 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dcd6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcea:	e8 65 6e 01 00       	call   c0024b54 <__subdf3>
c000dcef:	59                   	pop    ecx
c000dcf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcfb:	e8 e3 74 01 00       	call   c00251e3 <__floatsidf>
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd0b:	52                   	push   edx
c000dd0c:	50                   	push   eax
c000dd0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd15:	e8 66 6e 01 00       	call   c0024b80 <__muldf3>
c000dd1a:	5d                   	pop    ebp
c000dd1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd26:	e8 b8 74 01 00       	call   c00251e3 <__floatsidf>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd36:	52                   	push   edx
c000dd37:	50                   	push   eax
c000dd38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd40:	e8 1f 71 01 00       	call   c0024e64 <__divdf3>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd60:	e8 9e 67 01 00       	call   c0024503 <__adddf3>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd70:	31 c0                	xor    eax,eax
c000dd72:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd75:	7e 13                	jle    c000dd8a <zoh_vari_process+0x292>
c000dd77:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd7b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd81:	40                   	inc    eax
c000dd82:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd85:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd88:	eb e8                	jmp    c000dd72 <zoh_vari_process+0x27a>
c000dd8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd92:	68 00 00 f0 3f       	push   0x3ff00000
c000dd97:	6a 00                	push   0x0
c000dd99:	e8 c6 70 01 00       	call   c0024e64 <__divdf3>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda8:	52                   	push   edx
c000dda9:	50                   	push   eax
c000ddaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb2:	e8 4c 67 01 00       	call   c0024503 <__adddf3>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	e9 ff fd ff ff       	jmp    c000dbbe <zoh_vari_process+0xc6>
c000ddbf:	55                   	push   ebp
c000ddc0:	55                   	push   ebp
c000ddc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc9:	e8 32 78 01 00       	call   c0025600 <lrint>
c000ddce:	83 ec 0c             	sub    esp,0xc
c000ddd1:	50                   	push   eax
c000ddd2:	e8 0c 74 01 00       	call   c00251e3 <__floatsidf>
c000ddd7:	83 c4 10             	add    esp,0x10
c000ddda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde2:	52                   	push   edx
c000dde3:	50                   	push   eax
c000dde4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddec:	e8 63 6d 01 00       	call   c0024b54 <__subdf3>
c000ddf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf9:	83 c4 20             	add    esp,0x20
c000ddfc:	6a 00                	push   0x0
c000ddfe:	6a 00                	push   0x0
c000de00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de08:	e8 42 76 01 00       	call   c002544f <__ltdf2>
c000de0d:	83 c4 10             	add    esp,0x10
c000de10:	85 c0                	test   eax,eax
c000de12:	79 1e                	jns    c000de32 <zoh_vari_process+0x33a>
c000de14:	68 00 00 f0 3f       	push   0x3ff00000
c000de19:	6a 00                	push   0x0
c000de1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de23:	e8 db 66 01 00       	call   c0024503 <__adddf3>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de32:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de35:	83 ec 10             	sub    esp,0x10
c000de38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de48:	e8 07 6d 01 00       	call   c0024b54 <__subdf3>
c000de4d:	83 c4 18             	add    esp,0x18
c000de50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de58:	52                   	push   edx
c000de59:	50                   	push   eax
c000de5a:	e8 a1 77 01 00       	call   c0025600 <lrint>
c000de5f:	83 c4 10             	add    esp,0x10
c000de62:	0f af e8             	imul   ebp,eax
c000de65:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de68:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de6b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de72:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de79:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7c:	0f 8d 7a 02 00 00    	jge    c000e0fc <zoh_vari_process+0x604>
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de88:	e8 56 73 01 00       	call   c00251e3 <__floatsidf>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dea0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea8:	e8 d3 6c 01 00       	call   c0024b80 <__muldf3>
c000dead:	59                   	pop    ecx
c000deae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	e8 24 73 01 00       	call   c00251e3 <__floatsidf>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000deca:	52                   	push   edx
c000decb:	50                   	push   eax
c000decc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded4:	e8 2a 66 01 00       	call   c0024503 <__adddf3>
c000ded9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000dedc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee4:	e8 fa 72 01 00       	call   c00251e3 <__floatsidf>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000def0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def4:	52                   	push   edx
c000def5:	50                   	push   eax
c000def6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defe:	e8 4e 75 01 00       	call   c0025451 <__ledf2>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	85 c0                	test   eax,eax
c000df08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0c:	0f 8f ea 01 00 00    	jg     c000e0fc <zoh_vari_process+0x604>
c000df12:	85 c9                	test   ecx,ecx
c000df14:	0f 8e ed 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df1a:	83 ec 10             	sub    esp,0x10
c000df1d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df20:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df23:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df26:	ff 37                	push   DWORD PTR [edi]
c000df28:	e8 27 6c 01 00       	call   c0024b54 <__subdf3>
c000df2d:	83 c4 18             	add    esp,0x18
c000df30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df38:	52                   	push   edx
c000df39:	50                   	push   eax
c000df3a:	e8 a1 76 01 00       	call   c00255e0 <fabs>
c000df3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df43:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4f:	68 23 42 92 0c       	push   0xc924223
c000df54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5c:	e8 d0 74 01 00       	call   c0025431 <__gtdf2>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	85 c0                	test   eax,eax
c000df66:	0f 8e 9b 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df6c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df79:	52                   	push   edx
c000df7a:	50                   	push   eax
c000df7b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df81:	e8 ce 6b 01 00       	call   c0024b54 <__subdf3>
c000df86:	5d                   	pop    ebp
c000df87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df8b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df92:	e8 4c 72 01 00       	call   c00251e3 <__floatsidf>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa2:	52                   	push   edx
c000dfa3:	50                   	push   eax
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	e8 cf 6b 01 00       	call   c0024b80 <__muldf3>
c000dfb1:	59                   	pop    ecx
c000dfb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfba:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbd:	e8 21 72 01 00       	call   c00251e3 <__floatsidf>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcd:	52                   	push   edx
c000dfce:	50                   	push   eax
c000dfcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd7:	e8 88 6e 01 00       	call   c0024e64 <__divdf3>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfeb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff7:	e8 07 65 01 00       	call   c0024503 <__adddf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e007:	31 d2                	xor    edx,edx
c000e009:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00c:	39 d0                	cmp    eax,edx
c000e00e:	7e 1d                	jle    c000e02d <zoh_vari_process+0x535>
c000e010:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e013:	29 c1                	sub    ecx,eax
c000e015:	89 c8                	mov    eax,ecx
c000e017:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e019:	01 d0                	add    eax,edx
c000e01b:	42                   	inc    edx
c000e01c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e022:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e025:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e028:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e02b:	eb dc                	jmp    c000e009 <zoh_vari_process+0x511>
c000e02d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e031:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e035:	68 00 00 f0 3f       	push   0x3ff00000
c000e03a:	6a 00                	push   0x0
c000e03c:	e8 23 6e 01 00       	call   c0024e64 <__divdf3>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e048:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e050:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	e8 a2 64 01 00       	call   c0024503 <__adddf3>
c000e061:	5d                   	pop    ebp
c000e062:	59                   	pop    ecx
c000e063:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e073:	e8 88 75 01 00       	call   c0025600 <lrint>
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	50                   	push   eax
c000e07c:	e8 62 71 01 00       	call   c00251e3 <__floatsidf>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e088:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08c:	52                   	push   edx
c000e08d:	50                   	push   eax
c000e08e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 b9 6a 01 00       	call   c0024b54 <__subdf3>
c000e09b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a3:	83 c4 20             	add    esp,0x20
c000e0a6:	6a 00                	push   0x0
c000e0a8:	6a 00                	push   0x0
c000e0aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b2:	e8 98 73 01 00       	call   c002544f <__ltdf2>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	85 c0                	test   eax,eax
c000e0bc:	79 1e                	jns    c000e0dc <zoh_vari_process+0x5e4>
c000e0be:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c3:	6a 00                	push   0x0
c000e0c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cd:	e8 31 64 01 00       	call   c0024503 <__adddf3>
c000e0d2:	83 c4 10             	add    esp,0x10
c000e0d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0dc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0df:	83 ec 10             	sub    esp,0x10
c000e0e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f2:	e8 5d 6a 01 00       	call   c0024b54 <__subdf3>
c000e0f7:	e9 51 fd ff ff       	jmp    c000de4d <zoh_vari_process+0x355>
c000e0fc:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e100:	7d 3a                	jge    c000e13c <zoh_vari_process+0x644>
c000e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	29 e8                	sub    eax,ebp
c000e10b:	99                   	cdq    
c000e10c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10f:	50                   	push   eax
c000e110:	e8 ce 70 01 00       	call   c00251e3 <__floatsidf>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e120:	52                   	push   edx
c000e121:	50                   	push   eax
c000e122:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e126:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e12a:	e8 d4 63 01 00       	call   c0024503 <__adddf3>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e143:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e146:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e149:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14c:	85 c0                	test   eax,eax
c000e14e:	7f 25                	jg     c000e175 <zoh_vari_process+0x67d>
c000e150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e158:	89 07                	mov    DWORD PTR [edi],eax
c000e15a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e160:	99                   	cdq    
c000e161:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e164:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e167:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e16a:	99                   	cdq    
c000e16b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16e:	31 d2                	xor    edx,edx
c000e170:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e173:	eb 1e                	jmp    c000e193 <zoh_vari_process+0x69b>
c000e175:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e178:	31 d2                	xor    edx,edx
c000e17a:	29 c8                	sub    eax,ecx
c000e17c:	c1 e0 02             	shl    eax,0x2
c000e17f:	39 d1                	cmp    ecx,edx
c000e181:	7e cd                	jle    c000e150 <zoh_vari_process+0x658>
c000e183:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e185:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e189:	83 c0 04             	add    eax,0x4
c000e18c:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e190:	42                   	inc    edx
c000e191:	eb ec                	jmp    c000e17f <zoh_vari_process+0x687>
c000e193:	83 c4 3c             	add    esp,0x3c
c000e196:	89 d0                	mov    eax,edx
c000e198:	5b                   	pop    ebx
c000e199:	5e                   	pop    esi
c000e19a:	5f                   	pop    edi
c000e19b:	5d                   	pop    ebp
c000e19c:	c3                   	ret    

c000e19d <zoh_reset>:
c000e19d:	83 ec 0c             	sub    esp,0xc
c000e1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a7:	85 c0                	test   eax,eax
c000e1a9:	74 20                	je     c000e1cb <zoh_reset+0x2e>
c000e1ab:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ae:	83 c0 1c             	add    eax,0x1c
c000e1b1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1bb:	c1 e2 02             	shl    edx,0x2
c000e1be:	51                   	push   ecx
c000e1bf:	52                   	push   edx
c000e1c0:	6a 00                	push   0x0
c000e1c2:	50                   	push   eax
c000e1c3:	e8 b5 24 ff ff       	call   c000067d <memset>
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	83 c4 0c             	add    esp,0xc
c000e1ce:	c3                   	ret    

c000e1cf <zoh_get_name>:
c000e1cf:	31 c0                	xor    eax,eax
c000e1d1:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d6:	75 05                	jne    c000e1dd <zoh_get_name+0xe>
c000e1d8:	b8 1e 6e 02 c0       	mov    eax,0xc0026e1e
c000e1dd:	c3                   	ret    

c000e1de <zoh_get_description>:
c000e1de:	31 c0                	xor    eax,eax
c000e1e0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e5:	75 05                	jne    c000e1ec <zoh_get_description+0xe>
c000e1e7:	b8 2f 6e 02 c0       	mov    eax,0xc0026e2f
c000e1ec:	c3                   	ret    

c000e1ed <zoh_set_converter>:
c000e1ed:	53                   	push   ebx
c000e1ee:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f3:	83 ec 08             	sub    esp,0x8
c000e1f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1fa:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1ff:	75 6e                	jne    c000e26f <zoh_set_converter+0x82>
c000e201:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e204:	85 c0                	test   eax,eax
c000e206:	74 13                	je     c000e21b <zoh_set_converter+0x2e>
c000e208:	83 ec 0c             	sub    esp,0xc
c000e20b:	50                   	push   eax
c000e20c:	e8 cb 12 00 00       	call   c000f4dc <free>
c000e211:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	50                   	push   eax
c000e21c:	50                   	push   eax
c000e21d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e220:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e227:	50                   	push   eax
c000e228:	6a 01                	push   0x1
c000e22a:	e8 cd 12 00 00       	call   c000f4fc <calloc>
c000e22f:	83 c4 10             	add    esp,0x10
c000e232:	89 c2                	mov    edx,eax
c000e234:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e237:	85 d2                	test   edx,edx
c000e239:	b8 01 00 00 00       	mov    eax,0x1
c000e23e:	74 2f                	je     c000e26f <zoh_set_converter+0x82>
c000e240:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e243:	83 ec 0c             	sub    esp,0xc
c000e246:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e249:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24f:	c7 43 24 f8 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf8
c000e256:	c7 43 20 f8 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf8
c000e25d:	c7 43 28 9d e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19d
c000e264:	53                   	push   ebx
c000e265:	e8 33 ff ff ff       	call   c000e19d <zoh_reset>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	31 c0                	xor    eax,eax
c000e26f:	83 c4 08             	add    esp,0x8
c000e272:	5b                   	pop    ebx
c000e273:	c3                   	ret    

c000e274 <CPU::current()>:
c000e274:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c000e279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27f:	90                   	nop
c000e280:	c3                   	ret    

c000e281 <operator new(unsigned long)>:
c000e281:	83 ec 0c             	sub    esp,0xc
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e28b:	e8 3c 12 00 00       	call   c000f4cc <malloc>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	83 c4 0c             	add    esp,0xc
c000e296:	c3                   	ret    
c000e297:	90                   	nop

c000e298 <Computer::close(int, int, void*)>:
c000e298:	57                   	push   edi
c000e299:	56                   	push   esi
c000e29a:	53                   	push   ebx
c000e29b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2b0:	e8 ef 58 00 00       	call   c0013ba4 <Device::closeAll()>
c000e2b5:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2c0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c4:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d4:	5b                   	pop    ebx
c000e2d5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d8:	5e                   	pop    esi
c000e2d9:	5f                   	pop    edi
c000e2da:	ff e0                	jmp    eax

c000e2dc <Computer::Computer()>:
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e3:	83 ec 08             	sub    esp,0x8
c000e2e6:	68 66 6e 02 c0       	push   0xc0026e66
c000e2eb:	50                   	push   eax
c000e2ec:	e8 2d 59 00 00       	call   c0013c1e <Device::Device(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	ba 30 70 02 c0       	mov    edx,0xc0027030
c000e2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fd:	89 10                	mov    DWORD PTR [eax],edx
c000e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e303:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e325:	83 ca 04             	or     edx,0x4
c000e328:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e332:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e338:	0f b6 d0             	movzx  edx,al
c000e33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e350:	0f b6 d0             	movzx  edx,al
c000e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e357:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e366:	8d 50 01             	lea    edx,[eax+0x1]
c000e369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e373:	0f b6 d0             	movzx  edx,al
c000e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37e:	83 e1 3f             	and    ecx,0x3f
c000e381:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e389:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38f:	0f b6 d0             	movzx  edx,al
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a7:	0f b6 d0             	movzx  edx,al
c000e3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ae:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bd:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3ca:	0f b6 d0             	movzx  edx,al
c000e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d5:	83 e1 3f             	and    ecx,0x3f
c000e3d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e6:	0f b6 d0             	movzx  edx,al
c000e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ed:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fe:	0f b6 d0             	movzx  edx,al
c000e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e405:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e414:	8d 50 01             	lea    edx,[eax+0x1]
c000e417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e41b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e421:	0f b6 d0             	movzx  edx,al
c000e424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e428:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42c:	83 e1 3f             	and    ecx,0x3f
c000e42f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e433:	90                   	nop
c000e434:	83 c4 0c             	add    esp,0xc
c000e437:	c3                   	ret    

c000e438 <Computer::setBootMessage(char const*)>:
c000e438:	c3                   	ret    
c000e439:	90                   	nop

c000e43a <Computer::start()>:
c000e43a:	56                   	push   esi
c000e43b:	53                   	push   ebx
c000e43c:	50                   	push   eax
c000e43d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e441:	e8 c9 d9 00 00       	call   c001be0f <lockScheduler()>
c000e446:	e8 ff dc 00 00       	call   c001c14a <schedule()>
c000e44b:	e8 c1 d9 00 00       	call   c001be11 <unlockScheduler()>
c000e450:	fb                   	sti    
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	68 3b 07 00 00       	push   0x73b
c000e459:	e8 6e 10 00 00       	call   c000f4cc <malloc>
c000e45e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e465:	89 c6                	mov    esi,eax
c000e467:	ff 35 b4 be 02 c0    	push   DWORD PTR ds:0xc002beb4
c000e46d:	68 6f 6e 02 c0       	push   0xc0026e6f
c000e472:	6a 01                	push   0x1
c000e474:	50                   	push   eax
c000e475:	e8 e4 d7 00 00       	call   c001bc5e <Process::Process(bool, char const*, Process*, char**)>
c000e47a:	83 c4 20             	add    esp,0x20
c000e47d:	68 ff 00 00 00       	push   0xff
c000e482:	6a 00                	push   0x0
c000e484:	68 61 ee 00 c0       	push   0xc000ee61
c000e489:	56                   	push   esi
c000e48a:	e8 b1 da 00 00       	call   c001bf40 <Process::createThread(void (*)(void*), void*, int)>
c000e48f:	6a 7a                	push   0x7a
c000e491:	6a 00                	push   0x0
c000e493:	68 79 c7 01 c0       	push   0xc001c779
c000e498:	ff 35 b4 be 02 c0    	push   DWORD PTR ds:0xc002beb4
c000e49e:	e8 9d da 00 00       	call   c001bf40 <Process::createThread(void (*)(void*), void*, int)>
c000e4a3:	83 c4 20             	add    esp,0x20
c000e4a6:	a3 68 be 02 c0       	mov    ds:0xc002be68,eax
c000e4ab:	c6 05 ad a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9ad,0x1
c000e4b2:	e8 e3 44 00 00       	call   c001299a <initVFS()>
c000e4b7:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4bd:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4bf:	6a 00                	push   0x0
c000e4c1:	6a 00                	push   0x0
c000e4c3:	6a 00                	push   0x0
c000e4c5:	50                   	push   eax
c000e4c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4c9:	e8 54 c1 00 00       	call   c001a622 <setupSystemCalls()>
c000e4ce:	e8 d9 4f 00 00       	call   c00134ac <loadClockSettings()>
c000e4d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4d6:	e8 9d 56 00 00       	call   c0013b78 <Device::loadDriversForAll()>
c000e4db:	5a                   	pop    edx
c000e4dc:	8b 1d a8 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9a8
c000e4e2:	59                   	pop    ecx
c000e4e3:	6a 01                	push   0x1
c000e4e5:	68 7c 6e 02 c0       	push   0xc0026e7c
c000e4ea:	e8 e3 d2 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c000e4ef:	5e                   	pop    esi
c000e4f0:	5a                   	pop    edx
c000e4f1:	53                   	push   ebx
c000e4f2:	50                   	push   eax
c000e4f3:	e8 e9 d4 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c000e4f8:	c7 04 24 40 80 02 c0 	mov    DWORD PTR [esp],0xc0028040
c000e4ff:	e8 3b 41 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	83 ec 0c             	sub    esp,0xc
c000e50a:	6a 02                	push   0x2
c000e50c:	e8 93 dd 00 00       	call   c001c2a4 <blockTask(TaskState)>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	eb f1                	jmp    c000e507 <Computer::start()+0xcd>

c000e516 <firstTask()>:
c000e516:	83 ec 18             	sub    esp,0x18
c000e519:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c000e51f:	e8 16 ff ff ff       	call   c000e43a <Computer::start()>

c000e524 <Computer::detectFeatures()>:
c000e524:	55                   	push   ebp
c000e525:	57                   	push   edi
c000e526:	56                   	push   esi
c000e527:	53                   	push   ebx
c000e528:	83 ec 1c             	sub    esp,0x1c
c000e52b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e52f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e539:	e8 5b 1d ff ff       	call   c0000299 <detectCPUID>
c000e53e:	85 c0                	test   eax,eax
c000e540:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e546:	0f 95 c2             	setne  dl
c000e549:	83 e0 fd             	and    eax,0xfffffffd
c000e54c:	d1 e2                	shl    edx,1
c000e54e:	09 d0                	or     eax,edx
c000e550:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e556:	a8 02                	test   al,0x2
c000e558:	75 46                	jne    c000e5a0 <Computer::detectFeatures()+0x7c>
c000e55a:	f6 05 c1 a9 02 c0 04 	test   BYTE PTR ds:0xc002a9c1,0x4
c000e561:	74 07                	je     c000e56a <Computer::detectFeatures()+0x46>
c000e563:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e56a:	e8 d7 50 01 00       	call   c0023646 <x87Detect>
c000e56f:	83 e0 01             	and    eax,0x1
c000e572:	c1 e0 04             	shl    eax,0x4
c000e575:	88 c2                	mov    dl,al
c000e577:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e57d:	83 e0 ef             	and    eax,0xffffffef
c000e580:	09 d0                	or     eax,edx
c000e582:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e588:	a8 10                	test   al,0x10
c000e58a:	0f 85 2a 01 00 00    	jne    c000e6ba <Computer::detectFeatures()+0x196>
c000e590:	84 c0                	test   al,al
c000e592:	0f 88 45 01 00 00    	js     c000e6dd <Computer::detectFeatures()+0x1b9>
c000e598:	83 c4 1c             	add    esp,0x1c
c000e59b:	5b                   	pop    ebx
c000e59c:	5e                   	pop    esi
c000e59d:	5f                   	pop    edi
c000e59e:	5d                   	pop    ebp
c000e59f:	c3                   	ret    
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	6a 20                	push   0x20
c000e5a5:	e8 b6 96 00 00       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c000e5aa:	83 e0 01             	and    eax,0x1
c000e5ad:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5ba:	83 e0 f7             	and    eax,0xfffffff7
c000e5bd:	09 d0                	or     eax,edx
c000e5bf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5c5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5cc:	e8 8f 96 00 00       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d1:	83 e0 01             	and    eax,0x1
c000e5d4:	88 c2                	mov    dl,al
c000e5d6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5dc:	83 e0 fe             	and    eax,0xfffffffe
c000e5df:	09 d0                	or     eax,edx
c000e5e1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5e7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5ee:	e8 6d 96 00 00       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c000e5f3:	c1 e0 07             	shl    eax,0x7
c000e5f6:	88 c2                	mov    dl,al
c000e5f8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5fe:	83 e0 7f             	and    eax,0x7f
c000e601:	09 d0                	or     eax,edx
c000e603:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e609:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e610:	e8 4b 96 00 00       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c000e615:	83 c4 10             	add    esp,0x10
c000e618:	83 e0 01             	and    eax,0x1
c000e61b:	c1 e0 05             	shl    eax,0x5
c000e61e:	88 c2                	mov    dl,al
c000e620:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e626:	83 e0 df             	and    eax,0xffffffdf
c000e629:	09 d0                	or     eax,edx
c000e62b:	f7 05 c0 a9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a9c0,0x401
c000e635:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e63b:	0f 84 c2 00 00 00    	je     c000e703 <Computer::detectFeatures()+0x1df>
c000e641:	83 e0 fe             	and    eax,0xfffffffe
c000e644:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e64a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e650:	88 c2                	mov    dl,al
c000e652:	83 e2 09             	and    edx,0x9
c000e655:	fe ca                	dec    dl
c000e657:	75 09                	jne    c000e662 <Computer::detectFeatures()+0x13e>
c000e659:	83 e0 fe             	and    eax,0xfffffffe
c000e65c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e669:	50                   	push   eax
c000e66a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e66e:	55                   	push   ebp
c000e66f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e673:	57                   	push   edi
c000e674:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e678:	56                   	push   esi
c000e679:	68 00 00 00 80       	push   0x80000000
c000e67e:	e8 59 95 00 00       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e683:	83 c4 20             	add    esp,0x20
c000e686:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e68d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e691:	0f 86 c3 fe ff ff    	jbe    c000e55a <Computer::detectFeatures()+0x36>
c000e697:	83 ec 0c             	sub    esp,0xc
c000e69a:	50                   	push   eax
c000e69b:	55                   	push   ebp
c000e69c:	57                   	push   edi
c000e69d:	56                   	push   esi
c000e69e:	68 01 00 00 80       	push   0x80000001
c000e6a3:	e8 34 95 00 00       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6a8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6b2:	83 c4 20             	add    esp,0x20
c000e6b5:	e9 a0 fe ff ff       	jmp    c000e55a <Computer::detectFeatures()+0x36>
c000e6ba:	e8 41 4f 01 00       	call   c0023600 <sseDetect>
c000e6bf:	88 c2                	mov    dl,al
c000e6c1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6c7:	c1 e2 07             	shl    edx,0x7
c000e6ca:	83 e0 7f             	and    eax,0x7f
c000e6cd:	09 d0                	or     eax,edx
c000e6cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6d5:	84 c0                	test   al,al
c000e6d7:	0f 89 bb fe ff ff    	jns    c000e598 <Computer::detectFeatures()+0x74>
c000e6dd:	e8 0e 4f 01 00       	call   c00235f0 <avxDetect>
c000e6e2:	83 e0 01             	and    eax,0x1
c000e6e5:	c1 e0 05             	shl    eax,0x5
c000e6e8:	88 c2                	mov    dl,al
c000e6ea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f0:	83 e0 df             	and    eax,0xffffffdf
c000e6f3:	09 d0                	or     eax,edx
c000e6f5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6fb:	83 c4 1c             	add    esp,0x1c
c000e6fe:	5b                   	pop    ebx
c000e6ff:	5e                   	pop    esi
c000e700:	5f                   	pop    edi
c000e701:	5d                   	pop    ebp
c000e702:	c3                   	ret    
c000e703:	83 ec 0c             	sub    esp,0xc
c000e706:	68 00 02 00 00       	push   0x200
c000e70b:	e8 50 95 00 00       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	83 e0 01             	and    eax,0x1
c000e716:	88 c2                	mov    dl,al
c000e718:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e71e:	83 e0 fe             	and    eax,0xfffffffe
c000e721:	09 d0                	or     eax,edx
c000e723:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e729:	e9 1c ff ff ff       	jmp    c000e64a <Computer::detectFeatures()+0x126>

c000e72e <Computer::displayFeatures()>:
c000e72e:	53                   	push   ebx
c000e72f:	83 ec 14             	sub    esp,0x14
c000e732:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e736:	68 9f 6e 02 c0       	push   0xc0026e9f
c000e73b:	e8 ff 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e740:	83 c4 10             	add    esp,0x10
c000e743:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e74a:	0f 85 73 02 00 00    	jne    c000e9c3 <Computer::displayFeatures()+0x295>
c000e750:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e755:	83 ec 08             	sub    esp,0x8
c000e758:	50                   	push   eax
c000e759:	68 b2 6e 02 c0       	push   0xc0026eb2
c000e75e:	e8 dc 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e763:	83 c4 10             	add    esp,0x10
c000e766:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e76d:	0f 85 8c 02 00 00    	jne    c000e9ff <Computer::displayFeatures()+0x2d1>
c000e773:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	50                   	push   eax
c000e77c:	68 c3 6e 02 c0       	push   0xc0026ec3
c000e781:	e8 b9 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e786:	83 c4 10             	add    esp,0x10
c000e789:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e790:	0f 85 5f 02 00 00    	jne    c000e9f5 <Computer::displayFeatures()+0x2c7>
c000e796:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e79b:	83 ec 08             	sub    esp,0x8
c000e79e:	50                   	push   eax
c000e79f:	68 d4 6e 02 c0       	push   0xc0026ed4
c000e7a4:	e8 96 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7b3:	0f 85 32 02 00 00    	jne    c000e9eb <Computer::displayFeatures()+0x2bd>
c000e7b9:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e7be:	83 ec 08             	sub    esp,0x8
c000e7c1:	50                   	push   eax
c000e7c2:	68 e5 6e 02 c0       	push   0xc0026ee5
c000e7c7:	e8 73 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7d6:	0f 85 05 02 00 00    	jne    c000e9e1 <Computer::displayFeatures()+0x2b3>
c000e7dc:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e7e1:	83 ec 08             	sub    esp,0x8
c000e7e4:	50                   	push   eax
c000e7e5:	68 f6 6e 02 c0       	push   0xc0026ef6
c000e7ea:	e8 50 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7f9:	0f 85 d8 01 00 00    	jne    c000e9d7 <Computer::displayFeatures()+0x2a9>
c000e7ff:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e804:	83 ec 08             	sub    esp,0x8
c000e807:	50                   	push   eax
c000e808:	68 07 6f 02 c0       	push   0xc0026f07
c000e80d:	e8 2d 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e81c:	0f 85 ab 01 00 00    	jne    c000e9cd <Computer::displayFeatures()+0x29f>
c000e822:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e827:	83 ec 08             	sub    esp,0x8
c000e82a:	50                   	push   eax
c000e82b:	68 18 6f 02 c0       	push   0xc0026f18
c000e830:	e8 0a 3e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e83f:	0f 88 1b 02 00 00    	js     c000ea60 <Computer::displayFeatures()+0x332>
c000e845:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e84a:	83 ec 08             	sub    esp,0x8
c000e84d:	50                   	push   eax
c000e84e:	68 29 6f 02 c0       	push   0xc0026f29
c000e853:	e8 e7 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e858:	83 c4 10             	add    esp,0x10
c000e85b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e862:	0f 85 a1 01 00 00    	jne    c000ea09 <Computer::displayFeatures()+0x2db>
c000e868:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e86d:	83 ec 08             	sub    esp,0x8
c000e870:	50                   	push   eax
c000e871:	68 3a 6f 02 c0       	push   0xc0026f3a
c000e876:	e8 c4 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e885:	0f 85 cb 01 00 00    	jne    c000ea56 <Computer::displayFeatures()+0x328>
c000e88b:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e890:	83 ec 08             	sub    esp,0x8
c000e893:	50                   	push   eax
c000e894:	68 4b 6f 02 c0       	push   0xc0026f4b
c000e899:	e8 a1 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e89e:	83 c4 10             	add    esp,0x10
c000e8a1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8a8:	0f 85 9e 01 00 00    	jne    c000ea4c <Computer::displayFeatures()+0x31e>
c000e8ae:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e8b3:	83 ec 08             	sub    esp,0x8
c000e8b6:	50                   	push   eax
c000e8b7:	68 5c 6f 02 c0       	push   0xc0026f5c
c000e8bc:	e8 7e 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8cb:	0f 85 71 01 00 00    	jne    c000ea42 <Computer::displayFeatures()+0x314>
c000e8d1:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e8d6:	83 ec 08             	sub    esp,0x8
c000e8d9:	50                   	push   eax
c000e8da:	68 6d 6f 02 c0       	push   0xc0026f6d
c000e8df:	e8 5b 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8ee:	0f 85 44 01 00 00    	jne    c000ea38 <Computer::displayFeatures()+0x30a>
c000e8f4:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e8f9:	83 ec 08             	sub    esp,0x8
c000e8fc:	50                   	push   eax
c000e8fd:	68 7e 6f 02 c0       	push   0xc0026f7e
c000e902:	e8 38 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e907:	83 c4 10             	add    esp,0x10
c000e90a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e911:	0f 85 17 01 00 00    	jne    c000ea2e <Computer::displayFeatures()+0x300>
c000e917:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e91c:	83 ec 08             	sub    esp,0x8
c000e91f:	50                   	push   eax
c000e920:	68 8f 6f 02 c0       	push   0xc0026f8f
c000e925:	e8 15 3d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e92a:	83 c4 10             	add    esp,0x10
c000e92d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e934:	0f 85 ea 00 00 00    	jne    c000ea24 <Computer::displayFeatures()+0x2f6>
c000e93a:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e93f:	83 ec 08             	sub    esp,0x8
c000e942:	50                   	push   eax
c000e943:	68 a0 6f 02 c0       	push   0xc0026fa0
c000e948:	e8 f2 3c 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e957:	0f 88 0d 01 00 00    	js     c000ea6a <Computer::displayFeatures()+0x33c>
c000e95d:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e962:	83 ec 08             	sub    esp,0x8
c000e965:	50                   	push   eax
c000e966:	68 b1 6f 02 c0       	push   0xc0026fb1
c000e96b:	e8 cf 3c 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e970:	83 c4 10             	add    esp,0x10
c000e973:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e97a:	0f 85 9a 00 00 00    	jne    c000ea1a <Computer::displayFeatures()+0x2ec>
c000e980:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e985:	83 ec 08             	sub    esp,0x8
c000e988:	50                   	push   eax
c000e989:	68 c2 6f 02 c0       	push   0xc0026fc2
c000e98e:	e8 ac 3c 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e993:	83 c4 10             	add    esp,0x10
c000e996:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e99d:	75 74                	jne    c000ea13 <Computer::displayFeatures()+0x2e5>
c000e99f:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c000e9a4:	83 ec 08             	sub    esp,0x8
c000e9a7:	50                   	push   eax
c000e9a8:	68 d3 6f 02 c0       	push   0xc0026fd3
c000e9ad:	e8 8d 3c 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000e9b2:	c7 44 24 20 3a 86 02 c0 	mov    DWORD PTR [esp+0x20],0xc002863a
c000e9ba:	83 c4 18             	add    esp,0x18
c000e9bd:	5b                   	pop    ebx
c000e9be:	e9 7c 3c 00 00       	jmp    c001263f <Dbg::kprintf(char const*, ...)>
c000e9c3:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9c8:	e9 88 fd ff ff       	jmp    c000e755 <Computer::displayFeatures()+0x27>
c000e9cd:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9d2:	e9 50 fe ff ff       	jmp    c000e827 <Computer::displayFeatures()+0xf9>
c000e9d7:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9dc:	e9 23 fe ff ff       	jmp    c000e804 <Computer::displayFeatures()+0xd6>
c000e9e1:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9e6:	e9 f6 fd ff ff       	jmp    c000e7e1 <Computer::displayFeatures()+0xb3>
c000e9eb:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9f0:	e9 c9 fd ff ff       	jmp    c000e7be <Computer::displayFeatures()+0x90>
c000e9f5:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000e9fa:	e9 9c fd ff ff       	jmp    c000e79b <Computer::displayFeatures()+0x6d>
c000e9ff:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea04:	e9 6f fd ff ff       	jmp    c000e778 <Computer::displayFeatures()+0x4a>
c000ea09:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea0e:	e9 5a fe ff ff       	jmp    c000e86d <Computer::displayFeatures()+0x13f>
c000ea13:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea18:	eb 8a                	jmp    c000e9a4 <Computer::displayFeatures()+0x276>
c000ea1a:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea1f:	e9 61 ff ff ff       	jmp    c000e985 <Computer::displayFeatures()+0x257>
c000ea24:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea29:	e9 11 ff ff ff       	jmp    c000e93f <Computer::displayFeatures()+0x211>
c000ea2e:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea33:	e9 e4 fe ff ff       	jmp    c000e91c <Computer::displayFeatures()+0x1ee>
c000ea38:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea3d:	e9 b7 fe ff ff       	jmp    c000e8f9 <Computer::displayFeatures()+0x1cb>
c000ea42:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea47:	e9 8a fe ff ff       	jmp    c000e8d6 <Computer::displayFeatures()+0x1a8>
c000ea4c:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea51:	e9 5d fe ff ff       	jmp    c000e8b3 <Computer::displayFeatures()+0x185>
c000ea56:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea5b:	e9 30 fe ff ff       	jmp    c000e890 <Computer::displayFeatures()+0x162>
c000ea60:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea65:	e9 e0 fd ff ff       	jmp    c000e84a <Computer::displayFeatures()+0x11c>
c000ea6a:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c000ea6f:	e9 ee fe ff ff       	jmp    c000e962 <Computer::displayFeatures()+0x234>

c000ea74 <Computer::rdmsr(unsigned int)>:
c000ea74:	83 ec 0c             	sub    esp,0xc
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea82:	74 0a                	je     c000ea8e <Computer::rdmsr(unsigned int)+0x1a>
c000ea84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea88:	0f 32                	rdmsr  
c000ea8a:	83 c4 0c             	add    esp,0xc
c000ea8d:	c3                   	ret    
c000ea8e:	83 ec 0c             	sub    esp,0xc
c000ea91:	68 e4 6f 02 c0       	push   0xc0026fe4
c000ea96:	e8 68 a3 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000ea9b:	83 c4 10             	add    esp,0x10
c000ea9e:	eb e4                	jmp    c000ea84 <Computer::rdmsr(unsigned int)+0x10>

c000eaa0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa0:	57                   	push   edi
c000eaa1:	56                   	push   esi
c000eaa2:	52                   	push   edx
c000eaa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaa7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eaab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eaaf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eab6:	74 0e                	je     c000eac6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eab8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eabc:	89 f0                	mov    eax,esi
c000eabe:	89 fa                	mov    edx,edi
c000eac0:	0f 30                	wrmsr  
c000eac2:	58                   	pop    eax
c000eac3:	5e                   	pop    esi
c000eac4:	5f                   	pop    edi
c000eac5:	c3                   	ret    
c000eac6:	83 ec 0c             	sub    esp,0xc
c000eac9:	68 ea 6f 02 c0       	push   0xc0026fea
c000eace:	e8 30 a3 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	eb e0                	jmp    c000eab8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ead8 <Computer::nmiEnabled()>:
c000ead8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eadc:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eae2:	c3                   	ret    
c000eae3:	90                   	nop

c000eae4 <Computer::readCMOS(unsigned char)>:
c000eae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaef:	19 c0                	sbb    eax,eax
c000eaf1:	83 e0 80             	and    eax,0xffffff80
c000eaf4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eaf8:	e6 70                	out    0x70,al
c000eafa:	e4 71                	in     al,0x71
c000eafc:	c3                   	ret    
c000eafd:	90                   	nop

c000eafe <Computer::enableNMI(bool)>:
c000eafe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb06:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb0c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb14:	eb ce                	jmp    c000eae4 <Computer::readCMOS(unsigned char)>

c000eb16 <Computer::open(int, int, void*)>:
c000eb16:	56                   	push   esi
c000eb17:	53                   	push   ebx
c000eb18:	83 ec 10             	sub    esp,0x10
c000eb1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb1f:	f6 05 c0 a9 02 c0 04 	test   BYTE PTR ds:0xc002a9c0,0x4
c000eb26:	68 68 22 00 00       	push   0x2268
c000eb2b:	0f 94 05 60 99 02 c0 	sete   BYTE PTR ds:0xc0029960
c000eb32:	e8 95 09 00 00       	call   c000f4cc <malloc>
c000eb37:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb3a:	89 c6                	mov    esi,eax
c000eb3c:	e8 4f 87 00 00       	call   c0017290 <ACPI::ACPI()>
c000eb41:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb47:	58                   	pop    eax
c000eb48:	5a                   	pop    edx
c000eb49:	56                   	push   esi
c000eb4a:	53                   	push   ebx
c000eb4b:	e8 de 4e 00 00       	call   c0013a2e <Device::addChild(Device*)>
c000eb50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb53:	e8 cc f9 ff ff       	call   c000e524 <Computer::detectFeatures()>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 ce fb ff ff       	call   c000e72e <Computer::displayFeatures()>
c000eb60:	59                   	pop    ecx
c000eb61:	5e                   	pop    esi
c000eb62:	6a 01                	push   0x1
c000eb64:	53                   	push   ebx
c000eb65:	e8 94 ff ff ff       	call   c000eafe <Computer::enableNMI(bool)>
c000eb6a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb71:	e8 56 09 00 00       	call   c000f4cc <malloc>
c000eb76:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb79:	89 c6                	mov    esi,eax
c000eb7b:	e8 98 91 00 00       	call   c0017d18 <CPU::CPU()>
c000eb80:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb86:	58                   	pop    eax
c000eb87:	5a                   	pop    edx
c000eb88:	56                   	push   esi
c000eb89:	53                   	push   ebx
c000eb8a:	e8 9f 4e 00 00       	call   c0013a2e <Device::addChild(Device*)>
c000eb8f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb95:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb9b:	6a 00                	push   0x0
c000eb9d:	6a 00                	push   0x0
c000eb9f:	50                   	push   eax
c000eba0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eba3:	83 c4 20             	add    esp,0x20
c000eba6:	e8 f5 53 00 00       	call   c0013fa0 <setupFPU()>
c000ebab:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb1:	85 c0                	test   eax,eax
c000ebb3:	74 1f                	je     c000ebd4 <Computer::open(int, int, void*)+0xbe>
c000ebb5:	83 ec 08             	sub    esp,0x8
c000ebb8:	50                   	push   eax
c000ebb9:	53                   	push   ebx
c000ebba:	e8 6f 4e 00 00       	call   c0013a2e <Device::addChild(Device*)>
c000ebbf:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebc5:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebc7:	6a 00                	push   0x0
c000ebc9:	6a 00                	push   0x0
c000ebcb:	6a 00                	push   0x0
c000ebcd:	50                   	push   eax
c000ebce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd1:	83 c4 20             	add    esp,0x20
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	68 16 e5 00 c0       	push   0xc000e516
c000ebdc:	e8 5f d4 00 00       	call   c001c040 <setupMultitasking(void (*)())>
c000ebe1:	83 c4 14             	add    esp,0x14
c000ebe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebe9:	5b                   	pop    ebx
c000ebea:	5e                   	pop    esi
c000ebeb:	c3                   	ret    

c000ebec <Computer::disableNMI()>:
c000ebec:	6a 00                	push   0x0
c000ebee:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebf2:	e8 07 ff ff ff       	call   c000eafe <Computer::enableNMI(bool)>
c000ebf7:	58                   	pop    eax
c000ebf8:	5a                   	pop    edx
c000ebf9:	c3                   	ret    

c000ebfa <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebfe:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec05:	19 c0                	sbb    eax,eax
c000ec07:	83 e0 80             	and    eax,0xffffff80
c000ec0a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec0e:	e6 70                	out    0x70,al
c000ec10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec14:	e6 71                	out    0x71,al
c000ec16:	c3                   	ret    
c000ec17:	90                   	nop

c000ec18 <Computer::handleNMI()>:
c000ec18:	56                   	push   esi
c000ec19:	53                   	push   ebx
c000ec1a:	83 ec 10             	sub    esp,0x10
c000ec1d:	e4 92                	in     al,0x92
c000ec1f:	89 c6                	mov    esi,eax
c000ec21:	e4 61                	in     al,0x61
c000ec23:	68 f0 6f 02 c0       	push   0xc0026ff0
c000ec28:	88 c3                	mov    bl,al
c000ec2a:	e8 10 3a 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	83 e6 10             	and    esi,0x10
c000ec35:	75 0d                	jne    c000ec44 <Computer::handleNMI()+0x2c>
c000ec37:	f6 c3 40             	test   bl,0x40
c000ec3a:	75 1d                	jne    c000ec59 <Computer::handleNMI()+0x41>
c000ec3c:	84 db                	test   bl,bl
c000ec3e:	78 2d                	js     c000ec6d <Computer::handleNMI()+0x55>
c000ec40:	58                   	pop    eax
c000ec41:	5b                   	pop    ebx
c000ec42:	5e                   	pop    esi
c000ec43:	c3                   	ret    
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	68 01 70 02 c0       	push   0xc0027001
c000ec4c:	e8 b2 a1 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	f6 c3 40             	test   bl,0x40
c000ec57:	74 e3                	je     c000ec3c <Computer::handleNMI()+0x24>
c000ec59:	83 ec 0c             	sub    esp,0xc
c000ec5c:	68 0e 70 02 c0       	push   0xc002700e
c000ec61:	e8 9d a1 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000ec66:	83 c4 10             	add    esp,0x10
c000ec69:	84 db                	test   bl,bl
c000ec6b:	79 d3                	jns    c000ec40 <Computer::handleNMI()+0x28>
c000ec6d:	c7 44 24 10 18 70 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027018
c000ec75:	5a                   	pop    edx
c000ec76:	5b                   	pop    ebx
c000ec77:	5e                   	pop    esi
c000ec78:	e9 86 a1 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>
c000ec7d:	90                   	nop

c000ec7e <Computer::setDiskActivityLight(int, bool)>:
c000ec7e:	56                   	push   esi
c000ec7f:	53                   	push   ebx
c000ec80:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec84:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec89:	77 1b                	ja     c000eca6 <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec8b:	e4 92                	in     al,0x92
c000ec8d:	bb 40 00 00 00       	mov    ebx,0x40
c000ec92:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec96:	89 da                	mov    edx,ebx
c000ec98:	d3 e2                	shl    edx,cl
c000ec9a:	89 f1                	mov    ecx,esi
c000ec9c:	f7 d2                	not    edx
c000ec9e:	d3 e3                	shl    ebx,cl
c000eca0:	21 d0                	and    eax,edx
c000eca2:	09 d8                	or     eax,ebx
c000eca4:	e6 92                	out    0x92,al
c000eca6:	5b                   	pop    ebx
c000eca7:	5e                   	pop    esi
c000eca8:	c3                   	ret    
c000eca9:	90                   	nop

c000ecaa <GDTEntry::setBase(unsigned int)>:
c000ecaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecb2:	89 c1                	mov    ecx,eax
c000ecb4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecb8:	c1 e9 10             	shr    ecx,0x10
c000ecbb:	c1 e8 18             	shr    eax,0x18
c000ecbe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecc4:	c3                   	ret    
c000ecc5:	90                   	nop

c000ecc6 <GDTEntry::setLimit(unsigned int)>:
c000ecc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecce:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd1:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecd4:	83 e2 f0             	and    edx,0xfffffff0
c000ecd7:	c1 e8 10             	shr    eax,0x10
c000ecda:	83 e0 0f             	and    eax,0xf
c000ecdd:	09 d0                	or     eax,edx
c000ecdf:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ece2:	c3                   	ret    
c000ece3:	90                   	nop

c000ece4 <GDT::GDT()>:
c000ece4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf8:	90                   	nop
c000ecf9:	c3                   	ret    

c000ecfa <GDT::addEntry(GDTEntry)>:
c000ecfa:	53                   	push   ebx
c000ecfb:	83 ec 0c             	sub    esp,0xc
c000ecfe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed04:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed0b:	52                   	push   edx
c000ed0c:	50                   	push   eax
c000ed0d:	68 54 70 02 c0       	push   0xc0027054
c000ed12:	e8 28 39 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000ed17:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed1d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed21:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed25:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed29:	8d 50 01             	lea    edx,[eax+0x1]
c000ed2c:	c1 e0 03             	shl    eax,0x3
c000ed2f:	89 13                	mov    DWORD PTR [ebx],edx
c000ed31:	83 c4 18             	add    esp,0x18
c000ed34:	5b                   	pop    ebx
c000ed35:	c3                   	ret    

c000ed36 <GDT::getNumberOfEntries()>:
c000ed36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed3c:	c3                   	ret    
c000ed3d:	90                   	nop

c000ed3e <GDT::flush()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed44:	83 c0 04             	add    eax,0x4
c000ed47:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed4e:	a3 b2 a9 02 c0       	mov    ds:0xc002a9b2,eax
c000ed53:	66 89 15 b0 a9 02 c0 	mov    WORD PTR ds:0xc002a9b0,dx
c000ed5a:	e9 a0 16 ff ff       	jmp    c00003ff <loadGDT>
c000ed5f:	90                   	nop

c000ed60 <GDT::setup()>:
c000ed60:	55                   	push   ebp
c000ed61:	57                   	push   edi
c000ed62:	56                   	push   esi
c000ed63:	53                   	push   ebx
c000ed64:	83 ec 3c             	sub    esp,0x3c
c000ed67:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed6b:	6a 00                	push   0x0
c000ed6d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed71:	53                   	push   ebx
c000ed72:	e8 33 ff ff ff       	call   c000ecaa <GDTEntry::setBase(unsigned int)>
c000ed77:	6a 00                	push   0x0
c000ed79:	53                   	push   ebx
c000ed7a:	e8 47 ff ff ff       	call   c000ecc6 <GDTEntry::setLimit(unsigned int)>
c000ed7f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed87:	6a 00                	push   0x0
c000ed89:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed8d:	53                   	push   ebx
c000ed8e:	e8 17 ff ff ff       	call   c000ecaa <GDTEntry::setBase(unsigned int)>
c000ed93:	68 ff ff ff 00       	push   0xffffff
c000ed98:	53                   	push   ebx
c000ed99:	e8 28 ff ff ff       	call   c000ecc6 <GDTEntry::setLimit(unsigned int)>
c000ed9e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eda2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eda7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edac:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb0:	83 c4 20             	add    esp,0x20
c000edb3:	6a 00                	push   0x0
c000edb5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edb9:	53                   	push   ebx
c000edba:	e8 eb fe ff ff       	call   c000ecaa <GDTEntry::setBase(unsigned int)>
c000edbf:	68 ff ff ff 00       	push   0xffffff
c000edc4:	53                   	push   ebx
c000edc5:	e8 fc fe ff ff       	call   c000ecc6 <GDTEntry::setLimit(unsigned int)>
c000edca:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edd6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edda:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edde:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ede3:	0d 00 92 c0 00       	or     eax,0xc09200
c000ede8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edec:	89 d8                	mov    eax,ebx
c000edee:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf2:	80 cc 60             	or     ah,0x60
c000edf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edf9:	83 c4 0c             	add    esp,0xc
c000edfc:	89 f8                	mov    eax,edi
c000edfe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee02:	80 cc 60             	or     ah,0x60
c000ee05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee09:	89 c7                	mov    edi,eax
c000ee0b:	55                   	push   ebp
c000ee0c:	e8 e9 fe ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c000ee11:	83 c4 0c             	add    esp,0xc
c000ee14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee1c:	55                   	push   ebp
c000ee1d:	e8 d8 fe ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c000ee22:	83 c4 0c             	add    esp,0xc
c000ee25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee2d:	55                   	push   ebp
c000ee2e:	e8 c7 fe ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c000ee33:	83 c4 0c             	add    esp,0xc
c000ee36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee3e:	53                   	push   ebx
c000ee3f:	51                   	push   ecx
c000ee40:	55                   	push   ebp
c000ee41:	e8 b4 fe ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c000ee46:	83 c4 0c             	add    esp,0xc
c000ee49:	57                   	push   edi
c000ee4a:	56                   	push   esi
c000ee4b:	55                   	push   ebp
c000ee4c:	e8 a9 fe ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c000ee51:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee54:	e8 e5 fe ff ff       	call   c000ed3e <GDT::flush()>
c000ee59:	83 c4 4c             	add    esp,0x4c
c000ee5c:	5b                   	pop    ebx
c000ee5d:	5e                   	pop    esi
c000ee5e:	5f                   	pop    edi
c000ee5f:	5d                   	pop    ebp
c000ee60:	c3                   	ret    

c000ee61 <idleFunction(void*)>:
c000ee61:	53                   	push   ebx
c000ee62:	83 ec 08             	sub    esp,0x8
c000ee65:	e8 a7 cf 00 00       	call   c001be11 <unlockScheduler()>
c000ee6a:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c000ee6f:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee75:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee7c:	74 3c                	je     c000eeba <idleFunction(void*)+0x59>
c000ee7e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee85:	74 33                	je     c000eeba <idleFunction(void*)+0x59>
c000ee87:	31 db                	xor    ebx,ebx
c000ee89:	52                   	push   edx
c000ee8a:	52                   	push   edx
c000ee8b:	68 e1 00 00 00       	push   0xe1
c000ee90:	50                   	push   eax
c000ee91:	e8 de fb ff ff       	call   c000ea74 <Computer::rdmsr(unsigned int)>
c000ee96:	53                   	push   ebx
c000ee97:	83 e0 02             	and    eax,0x2
c000ee9a:	50                   	push   eax
c000ee9b:	68 e1 00 00 00       	push   0xe1
c000eea0:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c000eea6:	e8 f5 fb ff ff       	call   c000eaa0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeab:	83 c4 20             	add    esp,0x20
c000eeae:	e8 81 13 ff ff       	call   c0000234 <doTPAUSE>
c000eeb3:	e8 c8 67 01 00       	call   c0025680 <idleCommon()>
c000eeb8:	eb f4                	jmp    c000eeae <idleFunction(void*)+0x4d>
c000eeba:	fb                   	sti    
c000eebb:	f4                   	hlt    
c000eebc:	e8 bf 67 01 00       	call   c0025680 <idleCommon()>
c000eec1:	eb f7                	jmp    c000eeba <idleFunction(void*)+0x59>
c000eec3:	90                   	nop

c000eec4 <IDTEntry::IDTEntry(bool)>:
c000eec4:	83 ec 04             	sub    esp,0x4
c000eec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eecb:	88 04 24             	mov    BYTE PTR [esp],al
c000eece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eedc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eee7:	83 e2 f0             	and    edx,0xfffffff0
c000eeea:	83 ca 0e             	or     edx,0xe
c000eeed:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eef7:	83 e2 ef             	and    edx,0xffffffef
c000eefa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eefd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef01:	74 04                	je     c000ef07 <IDTEntry::IDTEntry(bool)+0x43>
c000ef03:	b2 03                	mov    dl,0x3
c000ef05:	eb 02                	jmp    c000ef09 <IDTEntry::IDTEntry(bool)+0x45>
c000ef07:	b2 00                	mov    dl,0x0
c000ef09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef0d:	83 e2 03             	and    edx,0x3
c000ef10:	88 d1                	mov    cl,dl
c000ef12:	c1 e1 05             	shl    ecx,0x5
c000ef15:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef18:	83 e2 9f             	and    edx,0xffffff9f
c000ef1b:	09 ca                	or     edx,ecx
c000ef1d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef24:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef27:	83 ca 80             	or     edx,0xffffff80
c000ef2a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef2d:	90                   	nop
c000ef2e:	83 c4 04             	add    esp,0x4
c000ef31:	c3                   	ret    

c000ef32 <IDTEntry::setOffset(unsigned int)>:
c000ef32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef3a:	66 89 02             	mov    WORD PTR [edx],ax
c000ef3d:	c1 e8 10             	shr    eax,0x10
c000ef40:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef44:	c3                   	ret    
c000ef45:	90                   	nop

c000ef46 <IDT::IDT()>:
c000ef46:	90                   	nop
c000ef47:	c3                   	ret    

c000ef48 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef4c:	83 c0 30             	add    eax,0x30
c000ef4f:	c3                   	ret    

c000ef50 <IDT::addEntry(IDTEntry, int)>:
c000ef50:	53                   	push   ebx
c000ef51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef61:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef64:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef68:	5b                   	pop    ebx
c000ef69:	c3                   	ret    

c000ef6a <IDT::addEntry(int, void (*)(), bool)>:
c000ef6a:	53                   	push   ebx
c000ef6b:	83 ec 10             	sub    esp,0x10
c000ef6e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef73:	50                   	push   eax
c000ef74:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef78:	53                   	push   ebx
c000ef79:	e8 46 ff ff ff       	call   c000eec4 <IDTEntry::IDTEntry(bool)>
c000ef7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef82:	53                   	push   ebx
c000ef83:	e8 aa ff ff ff       	call   c000ef32 <IDTEntry::setOffset(unsigned int)>
c000ef88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef98:	e8 b3 ff ff ff       	call   c000ef50 <IDT::addEntry(IDTEntry, int)>
c000ef9d:	83 c4 30             	add    esp,0x30
c000efa0:	5b                   	pop    ebx
c000efa1:	c3                   	ret    

c000efa2 <IDT::flush()>:
c000efa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efa6:	66 c7 05 b8 a9 02 c0 ff 07 	mov    WORD PTR ds:0xc002a9b8,0x7ff
c000efaf:	a3 ba a9 02 c0       	mov    ds:0xc002a9ba,eax
c000efb4:	0f 01 1d b8 a9 02 c0 	lidtd  ds:0xc002a9b8
c000efbb:	c3                   	ret    

c000efbc <IDT::setup()>:
c000efbc:	57                   	push   edi
c000efbd:	56                   	push   esi
c000efbe:	53                   	push   ebx
c000efbf:	83 ec 10             	sub    esp,0x10
c000efc2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efc6:	6a 00                	push   0x0
c000efc8:	68 1f 04 00 c0       	push   0xc000041f
c000efcd:	6a 00                	push   0x0
c000efcf:	53                   	push   ebx
c000efd0:	e8 95 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000efd5:	6a 00                	push   0x0
c000efd7:	68 2f 04 00 c0       	push   0xc000042f
c000efdc:	6a 01                	push   0x1
c000efde:	53                   	push   ebx
c000efdf:	e8 86 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000efe4:	83 c4 20             	add    esp,0x20
c000efe7:	6a 00                	push   0x0
c000efe9:	68 39 04 00 c0       	push   0xc0000439
c000efee:	6a 02                	push   0x2
c000eff0:	53                   	push   ebx
c000eff1:	e8 74 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000eff6:	6a 00                	push   0x0
c000eff8:	68 43 04 00 c0       	push   0xc0000443
c000effd:	6a 03                	push   0x3
c000efff:	53                   	push   ebx
c000f000:	e8 65 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f005:	83 c4 20             	add    esp,0x20
c000f008:	6a 00                	push   0x0
c000f00a:	68 4d 04 00 c0       	push   0xc000044d
c000f00f:	6a 04                	push   0x4
c000f011:	53                   	push   ebx
c000f012:	e8 53 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f017:	6a 00                	push   0x0
c000f019:	68 57 04 00 c0       	push   0xc0000457
c000f01e:	6a 05                	push   0x5
c000f020:	53                   	push   ebx
c000f021:	e8 44 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f026:	83 c4 20             	add    esp,0x20
c000f029:	6a 00                	push   0x0
c000f02b:	68 61 04 00 c0       	push   0xc0000461
c000f030:	6a 06                	push   0x6
c000f032:	53                   	push   ebx
c000f033:	e8 32 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f038:	6a 00                	push   0x0
c000f03a:	68 6b 04 00 c0       	push   0xc000046b
c000f03f:	6a 07                	push   0x7
c000f041:	53                   	push   ebx
c000f042:	e8 23 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	6a 00                	push   0x0
c000f04c:	68 75 04 00 c0       	push   0xc0000475
c000f051:	6a 08                	push   0x8
c000f053:	53                   	push   ebx
c000f054:	e8 11 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f059:	6a 00                	push   0x0
c000f05b:	68 7d 04 00 c0       	push   0xc000047d
c000f060:	6a 09                	push   0x9
c000f062:	53                   	push   ebx
c000f063:	e8 02 ff ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f068:	83 c4 20             	add    esp,0x20
c000f06b:	6a 00                	push   0x0
c000f06d:	68 87 04 00 c0       	push   0xc0000487
c000f072:	6a 0a                	push   0xa
c000f074:	53                   	push   ebx
c000f075:	e8 f0 fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	6a 00                	push   0x0
c000f07c:	68 8f 04 00 c0       	push   0xc000048f
c000f081:	6a 0b                	push   0xb
c000f083:	53                   	push   ebx
c000f084:	e8 e1 fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f089:	83 c4 20             	add    esp,0x20
c000f08c:	6a 00                	push   0x0
c000f08e:	68 97 04 00 c0       	push   0xc0000497
c000f093:	6a 0c                	push   0xc
c000f095:	53                   	push   ebx
c000f096:	e8 cf fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	6a 00                	push   0x0
c000f09d:	68 9f 04 00 c0       	push   0xc000049f
c000f0a2:	6a 0d                	push   0xd
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 c0 fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	83 c4 20             	add    esp,0x20
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 a7 04 00 c0       	push   0xc00004a7
c000f0b4:	6a 0e                	push   0xe
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 ae fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 af 04 00 c0       	push   0xc00004af
c000f0c3:	6a 0f                	push   0xf
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 9f fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 b9 04 00 c0       	push   0xc00004b9
c000f0d5:	6a 10                	push   0x10
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 8d fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 c3 04 00 c0       	push   0xc00004c3
c000f0e4:	6a 11                	push   0x11
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 7e fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	83 c4 20             	add    esp,0x20
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 cd 04 00 c0       	push   0xc00004cd
c000f0f6:	6a 12                	push   0x12
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 6c fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	6a 01                	push   0x1
c000f100:	68 67 05 00 c0       	push   0xc0000567
c000f105:	6a 60                	push   0x60
c000f107:	53                   	push   ebx
c000f108:	e8 5d fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	6a 00                	push   0x0
c000f112:	68 6e 05 00 c0       	push   0xc000056e
c000f117:	6a 20                	push   0x20
c000f119:	53                   	push   ebx
c000f11a:	e8 4b fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	6a 00                	push   0x0
c000f121:	68 59 05 00 c0       	push   0xc0000559
c000f126:	6a 21                	push   0x21
c000f128:	53                   	push   ebx
c000f129:	e8 3c fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	83 c4 20             	add    esp,0x20
c000f131:	6a 00                	push   0x0
c000f133:	68 60 05 00 c0       	push   0xc0000560
c000f138:	6a 22                	push   0x22
c000f13a:	53                   	push   ebx
c000f13b:	e8 2a fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f140:	6a 00                	push   0x0
c000f142:	68 d7 04 00 c0       	push   0xc00004d7
c000f147:	6a 23                	push   0x23
c000f149:	53                   	push   ebx
c000f14a:	e8 1b fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	83 c4 20             	add    esp,0x20
c000f152:	6a 00                	push   0x0
c000f154:	68 e1 04 00 c0       	push   0xc00004e1
c000f159:	6a 24                	push   0x24
c000f15b:	53                   	push   ebx
c000f15c:	e8 09 fe ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f161:	6a 00                	push   0x0
c000f163:	68 eb 04 00 c0       	push   0xc00004eb
c000f168:	6a 25                	push   0x25
c000f16a:	53                   	push   ebx
c000f16b:	e8 fa fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f170:	83 c4 20             	add    esp,0x20
c000f173:	6a 00                	push   0x0
c000f175:	68 f5 04 00 c0       	push   0xc00004f5
c000f17a:	6a 26                	push   0x26
c000f17c:	53                   	push   ebx
c000f17d:	e8 e8 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f182:	6a 00                	push   0x0
c000f184:	68 ff 04 00 c0       	push   0xc00004ff
c000f189:	6a 27                	push   0x27
c000f18b:	53                   	push   ebx
c000f18c:	e8 d9 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	6a 00                	push   0x0
c000f196:	68 09 05 00 c0       	push   0xc0000509
c000f19b:	6a 28                	push   0x28
c000f19d:	53                   	push   ebx
c000f19e:	e8 c7 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 13 05 00 c0       	push   0xc0000513
c000f1aa:	6a 29                	push   0x29
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 b8 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	83 c4 20             	add    esp,0x20
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 1d 05 00 c0       	push   0xc000051d
c000f1bc:	6a 2a                	push   0x2a
c000f1be:	53                   	push   ebx
c000f1bf:	e8 a6 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 27 05 00 c0       	push   0xc0000527
c000f1cb:	6a 2b                	push   0x2b
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 97 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	83 c4 20             	add    esp,0x20
c000f1d6:	6a 00                	push   0x0
c000f1d8:	68 31 05 00 c0       	push   0xc0000531
c000f1dd:	6a 2c                	push   0x2c
c000f1df:	53                   	push   ebx
c000f1e0:	e8 85 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1e5:	6a 00                	push   0x0
c000f1e7:	68 3b 05 00 c0       	push   0xc000053b
c000f1ec:	6a 2d                	push   0x2d
c000f1ee:	53                   	push   ebx
c000f1ef:	e8 76 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f1f4:	83 c4 20             	add    esp,0x20
c000f1f7:	6a 00                	push   0x0
c000f1f9:	68 45 05 00 c0       	push   0xc0000545
c000f1fe:	6a 2e                	push   0x2e
c000f200:	53                   	push   ebx
c000f201:	e8 64 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f206:	6a 00                	push   0x0
c000f208:	68 4f 05 00 c0       	push   0xc000054f
c000f20d:	6a 2f                	push   0x2f
c000f20f:	53                   	push   ebx
c000f210:	e8 55 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f215:	83 c4 20             	add    esp,0x20
c000f218:	6a 00                	push   0x0
c000f21a:	68 94 05 00 c0       	push   0xc0000594
c000f21f:	6a 30                	push   0x30
c000f221:	53                   	push   ebx
c000f222:	e8 43 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f227:	6a 00                	push   0x0
c000f229:	68 9e 05 00 c0       	push   0xc000059e
c000f22e:	6a 31                	push   0x31
c000f230:	53                   	push   ebx
c000f231:	e8 34 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f236:	83 c4 20             	add    esp,0x20
c000f239:	6a 00                	push   0x0
c000f23b:	68 a8 05 00 c0       	push   0xc00005a8
c000f240:	6a 32                	push   0x32
c000f242:	53                   	push   ebx
c000f243:	e8 22 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f248:	6a 00                	push   0x0
c000f24a:	68 b2 05 00 c0       	push   0xc00005b2
c000f24f:	6a 33                	push   0x33
c000f251:	53                   	push   ebx
c000f252:	e8 13 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f257:	83 c4 20             	add    esp,0x20
c000f25a:	6a 00                	push   0x0
c000f25c:	68 bc 05 00 c0       	push   0xc00005bc
c000f261:	6a 34                	push   0x34
c000f263:	53                   	push   ebx
c000f264:	e8 01 fd ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f269:	6a 00                	push   0x0
c000f26b:	68 c6 05 00 c0       	push   0xc00005c6
c000f270:	6a 35                	push   0x35
c000f272:	53                   	push   ebx
c000f273:	e8 f2 fc ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f278:	83 c4 20             	add    esp,0x20
c000f27b:	6a 00                	push   0x0
c000f27d:	68 d0 05 00 c0       	push   0xc00005d0
c000f282:	6a 36                	push   0x36
c000f284:	53                   	push   ebx
c000f285:	e8 e0 fc ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f28a:	6a 00                	push   0x0
c000f28c:	68 da 05 00 c0       	push   0xc00005da
c000f291:	6a 37                	push   0x37
c000f293:	53                   	push   ebx
c000f294:	e8 d1 fc ff ff       	call   c000ef6a <IDT::addEntry(int, void (*)(), bool)>
c000f299:	83 c4 20             	add    esp,0x20
c000f29c:	e8 3e 25 00 00       	call   c00117df <Virt::getAKernelVAS()>
c000f2a1:	52                   	push   edx
c000f2a2:	6a 03                	push   0x3
c000f2a4:	6a 02                	push   0x2
c000f2a6:	50                   	push   eax
c000f2a7:	e8 6e 2b 00 00       	call   c0011e1a <VAS::allocatePages(int, int)>
c000f2ac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2b3:	89 c6                	mov    esi,eax
c000f2b5:	e8 12 02 00 00       	call   c000f4cc <malloc>
c000f2ba:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c3:	89 c7                	mov    edi,eax
c000f2c5:	e8 b6 1c 00 00       	call   c0010f80 <TSS::TSS()>
c000f2ca:	83 c4 0c             	add    esp,0xc
c000f2cd:	68 75 04 00 c0       	push   0xc0000475
c000f2d2:	56                   	push   esi
c000f2d3:	57                   	push   edi
c000f2d4:	e8 e7 1c 00 00       	call   c0010fc0 <TSS::setup(unsigned long, unsigned long)>
c000f2d9:	59                   	pop    ecx
c000f2da:	89 c6                	mov    esi,eax
c000f2dc:	5f                   	pop    edi
c000f2dd:	6a 00                	push   0x0
c000f2df:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2e3:	50                   	push   eax
c000f2e4:	e8 db fb ff ff       	call   c000eec4 <IDTEntry::IDTEntry(bool)>
c000f2e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2ed:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2f2:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2f9:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f303:	80 ce 05             	or     dh,0x5
c000f306:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f309:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f30d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f311:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f317:	e8 86 fc ff ff       	call   c000efa2 <IDT::flush()>
c000f31c:	83 c4 20             	add    esp,0x20
c000f31f:	5b                   	pop    ebx
c000f320:	5e                   	pop    esi
c000f321:	5f                   	pop    edi
c000f322:	c3                   	ret    

c000f323 <sbrk>:
c000f323:	55                   	push   ebp
c000f324:	57                   	push   edi
c000f325:	56                   	push   esi
c000f326:	53                   	push   ebx
c000f327:	83 ec 1c             	sub    esp,0x1c
c000f32a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f32e:	85 c0                	test   eax,eax
c000f330:	74 3e                	je     c000f370 <sbrk+0x4d>
c000f332:	78 43                	js     c000f377 <sbrk+0x54>
c000f334:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c000f33a:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f340:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f346:	83 e2 01             	and    edx,0x1
c000f349:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f34d:	8b 0d 48 99 02 c0    	mov    ecx,DWORD PTR ds:0xc0029948
c000f353:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f357:	05 ff 0f 00 00       	add    eax,0xfff
c000f35c:	89 c2                	mov    edx,eax
c000f35e:	78 2f                	js     c000f38f <sbrk+0x6c>
c000f360:	c1 fa 0c             	sar    edx,0xc
c000f363:	89 d7                	mov    edi,edx
c000f365:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f369:	be 00 00 00 00       	mov    esi,0x0
c000f36e:	eb 36                	jmp    c000f3a6 <sbrk+0x83>
c000f370:	a1 48 99 02 c0       	mov    eax,ds:0xc0029948
c000f375:	eb 74                	jmp    c000f3eb <sbrk+0xc8>
c000f377:	83 ec 08             	sub    esp,0x8
c000f37a:	50                   	push   eax
c000f37b:	68 70 70 02 c0       	push   0xc0027070
c000f380:	e8 ba 32 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000f385:	83 c4 10             	add    esp,0x10
c000f388:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f38d:	eb 5c                	jmp    c000f3eb <sbrk+0xc8>
c000f38f:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f395:	eb c9                	jmp    c000f360 <sbrk+0x3d>
c000f397:	81 05 48 99 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0029948,0x1000
c000f3a1:	46                   	inc    esi
c000f3a2:	39 f7                	cmp    edi,esi
c000f3a4:	74 34                	je     c000f3da <sbrk+0xb7>
c000f3a6:	e8 34 24 00 00       	call   c00117df <Virt::getAKernelVAS()>
c000f3ab:	89 c3                	mov    ebx,eax
c000f3ad:	8b 2d 48 99 02 c0    	mov    ebp,DWORD PTR ds:0xc0029948
c000f3b3:	e8 be 06 00 00       	call   c000fa76 <Phys::allocatePage()>
c000f3b8:	68 01 04 00 00       	push   0x401
c000f3bd:	55                   	push   ebp
c000f3be:	50                   	push   eax
c000f3bf:	53                   	push   ebx
c000f3c0:	e8 55 29 00 00       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3c5:	83 c4 10             	add    esp,0x10
c000f3c8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3cd:	74 c8                	je     c000f397 <sbrk+0x74>
c000f3cf:	8b 1d 48 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029948
c000f3d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3d8:	eb bd                	jmp    c000f397 <sbrk+0x74>
c000f3da:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3df:	75 12                	jne    c000f3f3 <sbrk+0xd0>
c000f3e1:	0f 20 d8             	mov    eax,cr3
c000f3e4:	0f 22 d8             	mov    cr3,eax
c000f3e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3eb:	83 c4 1c             	add    esp,0x1c
c000f3ee:	5b                   	pop    ebx
c000f3ef:	5e                   	pop    esi
c000f3f0:	5f                   	pop    edi
c000f3f1:	5d                   	pop    ebp
c000f3f2:	c3                   	ret    
c000f3f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3f7:	89 cb                	mov    ebx,ecx
c000f3f9:	c1 eb 0a             	shr    ebx,0xa
c000f3fc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f402:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f40c:	c1 e0 0c             	shl    eax,0xc
c000f40f:	01 c8                	add    eax,ecx
c000f411:	c1 e8 0a             	shr    eax,0xa
c000f414:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f419:	2d 00 00 40 00       	sub    eax,0x400000
c000f41e:	39 c3                	cmp    ebx,eax
c000f420:	77 c5                	ja     c000f3e7 <sbrk+0xc4>
c000f422:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f425:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f42b:	39 d8                	cmp    eax,ebx
c000f42d:	73 f3                	jae    c000f422 <sbrk+0xff>
c000f42f:	eb b6                	jmp    c000f3e7 <sbrk+0xc4>

c000f431 <mmap>:
c000f431:	83 ec 18             	sub    esp,0x18
c000f434:	68 a0 70 02 c0       	push   0xc00270a0
c000f439:	e8 c5 99 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000f43e:	b8 00 00 00 00       	mov    eax,0x0
c000f443:	83 c4 1c             	add    esp,0x1c
c000f446:	c3                   	ret    

c000f447 <munmap>:
c000f447:	83 ec 18             	sub    esp,0x18
c000f44a:	68 a5 70 02 c0       	push   0xc00270a5
c000f44f:	e8 af 99 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000f454:	b8 00 00 00 00       	mov    eax,0x0
c000f459:	83 c4 1c             	add    esp,0x1c
c000f45c:	c3                   	ret    

c000f45d <liballoc_lock()>:
c000f45d:	83 ec 0c             	sub    esp,0xc
c000f460:	e8 aa c9 00 00       	call   c001be0f <lockScheduler()>
c000f465:	b8 00 00 00 00       	mov    eax,0x0
c000f46a:	83 c4 0c             	add    esp,0xc
c000f46d:	c3                   	ret    

c000f46e <liballoc_unlock()>:
c000f46e:	83 ec 0c             	sub    esp,0xc
c000f471:	e8 9b c9 00 00       	call   c001be11 <unlockScheduler()>
c000f476:	b8 00 00 00 00       	mov    eax,0x0
c000f47b:	83 c4 0c             	add    esp,0xc
c000f47e:	c3                   	ret    

c000f47f <liballoc_alloc(int)>:
c000f47f:	83 ec 0c             	sub    esp,0xc
c000f482:	e8 58 23 00 00       	call   c00117df <Virt::getAKernelVAS()>
c000f487:	83 ec 04             	sub    esp,0x4
c000f48a:	6a 01                	push   0x1
c000f48c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f490:	50                   	push   eax
c000f491:	e8 84 29 00 00       	call   c0011e1a <VAS::allocatePages(int, int)>
c000f496:	83 c4 1c             	add    esp,0x1c
c000f499:	c3                   	ret    

c000f49a <liballoc_free(void*, int)>:
c000f49a:	83 ec 0c             	sub    esp,0xc
c000f49d:	e8 3d 23 00 00       	call   c00117df <Virt::getAKernelVAS()>
c000f4a2:	83 ec 08             	sub    esp,0x8
c000f4a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4a9:	50                   	push   eax
c000f4aa:	e8 27 26 00 00       	call   c0011ad6 <VAS::freeAllocatedPages(unsigned long)>
c000f4af:	b8 00 00 00 00       	mov    eax,0x0
c000f4b4:	83 c4 1c             	add    esp,0x1c
c000f4b7:	c3                   	ret    

c000f4b8 <realloc>:
c000f4b8:	83 ec 14             	sub    esp,0x14
c000f4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c3:	e8 2e 1f ff ff       	call   c00013f6 <dlrealloc>
c000f4c8:	83 c4 1c             	add    esp,0x1c
c000f4cb:	c3                   	ret    

c000f4cc <malloc>:
c000f4cc:	83 ec 18             	sub    esp,0x18
c000f4cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d3:	e8 e1 19 ff ff       	call   c0000eb9 <dlmalloc>
c000f4d8:	83 c4 1c             	add    esp,0x1c
c000f4db:	c3                   	ret    

c000f4dc <free>:
c000f4dc:	83 ec 18             	sub    esp,0x18
c000f4df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e3:	e8 76 16 ff ff       	call   c0000b5e <dlfree>
c000f4e8:	83 c4 1c             	add    esp,0x1c
c000f4eb:	c3                   	ret    

c000f4ec <rfree>:
c000f4ec:	83 ec 18             	sub    esp,0x18
c000f4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f3:	e8 66 16 ff ff       	call   c0000b5e <dlfree>
c000f4f8:	83 c4 1c             	add    esp,0x1c
c000f4fb:	c3                   	ret    

c000f4fc <calloc>:
c000f4fc:	56                   	push   esi
c000f4fd:	53                   	push   ebx
c000f4fe:	83 ec 10             	sub    esp,0x10
c000f501:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f505:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f50a:	53                   	push   ebx
c000f50b:	e8 bc ff ff ff       	call   c000f4cc <malloc>
c000f510:	89 c6                	mov    esi,eax
c000f512:	83 c4 0c             	add    esp,0xc
c000f515:	53                   	push   ebx
c000f516:	6a 00                	push   0x0
c000f518:	50                   	push   eax
c000f519:	e8 5f 11 ff ff       	call   c000067d <memset>
c000f51e:	89 f0                	mov    eax,esi
c000f520:	83 c4 14             	add    esp,0x14
c000f523:	5b                   	pop    ebx
c000f524:	5e                   	pop    esi
c000f525:	c3                   	ret    

c000f526 <hwTextMode_loadInData(VgaText*)>:
c000f526:	57                   	push   edi
c000f527:	56                   	push   esi
c000f528:	53                   	push   ebx
c000f529:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f52d:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f533:	85 c0                	test   eax,eax
c000f535:	7e 30                	jle    c000f567 <hwTextMode_loadInData(VgaText*)+0x41>
c000f537:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f53a:	31 f6                	xor    esi,esi
c000f53c:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f53f:	31 c0                	xor    eax,eax
c000f541:	c1 e1 05             	shl    ecx,0x5
c000f544:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f54a:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f54e:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f552:	40                   	inc    eax
c000f553:	83 f8 50             	cmp    eax,0x50
c000f556:	75 f2                	jne    c000f54a <hwTextMode_loadInData(VgaText*)+0x24>
c000f558:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f55e:	46                   	inc    esi
c000f55f:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f565:	7f d5                	jg     c000f53c <hwTextMode_loadInData(VgaText*)+0x16>
c000f567:	5b                   	pop    ebx
c000f568:	5e                   	pop    esi
c000f569:	5f                   	pop    edi
c000f56a:	c3                   	ret    

c000f56b <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f56b:	56                   	push   esi
c000f56c:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f571:	53                   	push   ebx
c000f572:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f576:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f57a:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f580:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f586:	c1 e0 04             	shl    eax,0x4
c000f589:	83 e6 0f             	and    esi,0xf
c000f58c:	0f b6 c0             	movzx  eax,al
c000f58f:	41                   	inc    ecx
c000f590:	09 f0                	or     eax,esi
c000f592:	83 c2 02             	add    edx,0x2
c000f595:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f599:	c1 e0 08             	shl    eax,0x8
c000f59c:	09 f0                	or     eax,esi
c000f59e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5a2:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5a8:	75 d0                	jne    c000f57a <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5aa:	5b                   	pop    ebx
c000f5ab:	5e                   	pop    esi
c000f5ac:	c3                   	ret    

c000f5ad <hwTextMode_showCursor(VgaText*, bool)>:
c000f5ad:	56                   	push   esi
c000f5ae:	53                   	push   ebx
c000f5af:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5b4:	74 38                	je     c000f5ee <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5b6:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5bb:	b0 0a                	mov    al,0xa
c000f5bd:	89 da                	mov    edx,ebx
c000f5bf:	ee                   	out    dx,al
c000f5c0:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5c5:	89 ca                	mov    edx,ecx
c000f5c7:	ec                   	in     al,dx
c000f5c8:	b2 0f                	mov    dl,0xf
c000f5ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5ce:	83 e0 c0             	and    eax,0xffffffc0
c000f5d1:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5d7:	09 d0                	or     eax,edx
c000f5d9:	89 ca                	mov    edx,ecx
c000f5db:	ee                   	out    dx,al
c000f5dc:	b0 0b                	mov    al,0xb
c000f5de:	89 da                	mov    edx,ebx
c000f5e0:	ee                   	out    dx,al
c000f5e1:	89 ca                	mov    edx,ecx
c000f5e3:	ec                   	in     al,dx
c000f5e4:	83 e0 e0             	and    eax,0xffffffe0
c000f5e7:	83 c8 0f             	or     eax,0xf
c000f5ea:	ee                   	out    dx,al
c000f5eb:	5b                   	pop    ebx
c000f5ec:	5e                   	pop    esi
c000f5ed:	c3                   	ret    
c000f5ee:	b0 0a                	mov    al,0xa
c000f5f0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5f5:	ee                   	out    dx,al
c000f5f6:	b0 20                	mov    al,0x20
c000f5f8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f5fd:	ee                   	out    dx,al
c000f5fe:	5b                   	pop    ebx
c000f5ff:	5e                   	pop    esi
c000f600:	c3                   	ret    

c000f601 <hwTextMode_update(VgaText*)>:
c000f601:	c3                   	ret    

c000f602 <hwTextMode_updateCursor(VgaText*)>:
c000f602:	56                   	push   esi
c000f603:	b9 19 00 00 00       	mov    ecx,0x19
c000f608:	53                   	push   ebx
c000f609:	be d4 03 00 00       	mov    esi,0x3d4
c000f60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f612:	89 f2                	mov    edx,esi
c000f614:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f61a:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f620:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f623:	c1 e1 04             	shl    ecx,0x4
c000f626:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f62c:	b0 0f                	mov    al,0xf
c000f62e:	ee                   	out    dx,al
c000f62f:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f634:	88 c8                	mov    al,cl
c000f636:	89 da                	mov    edx,ebx
c000f638:	ee                   	out    dx,al
c000f639:	b0 0e                	mov    al,0xe
c000f63b:	89 f2                	mov    edx,esi
c000f63d:	ee                   	out    dx,al
c000f63e:	89 c8                	mov    eax,ecx
c000f640:	89 da                	mov    edx,ebx
c000f642:	66 c1 e8 08          	shr    ax,0x8
c000f646:	ee                   	out    dx,al
c000f647:	5b                   	pop    ebx
c000f648:	5e                   	pop    esi
c000f649:	c3                   	ret    

c000f64a <hwTextMode_disableBlink(VgaText*, bool)>:
c000f64a:	ba da 03 00 00       	mov    edx,0x3da
c000f64f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f654:	75 18                	jne    c000f66e <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f656:	ec                   	in     al,dx
c000f657:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f65c:	b0 30                	mov    al,0x30
c000f65e:	89 ca                	mov    edx,ecx
c000f660:	ee                   	out    dx,al
c000f661:	ba c1 03 00 00       	mov    edx,0x3c1
c000f666:	ec                   	in     al,dx
c000f667:	83 c8 08             	or     eax,0x8
c000f66a:	89 ca                	mov    edx,ecx
c000f66c:	ee                   	out    dx,al
c000f66d:	c3                   	ret    
c000f66e:	ec                   	in     al,dx
c000f66f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f674:	b0 30                	mov    al,0x30
c000f676:	89 ca                	mov    edx,ecx
c000f678:	ee                   	out    dx,al
c000f679:	ba c1 03 00 00       	mov    edx,0x3c1
c000f67e:	ec                   	in     al,dx
c000f67f:	83 e0 f7             	and    eax,0xfffffff7
c000f682:	89 ca                	mov    edx,ecx
c000f684:	ee                   	out    dx,al
c000f685:	c3                   	ret    

c000f686 <hwTextMode_scrollScreen(VgaText*)>:
c000f686:	55                   	push   ebp
c000f687:	bd 02 00 00 00       	mov    ebp,0x2
c000f68c:	57                   	push   edi
c000f68d:	56                   	push   esi
c000f68e:	53                   	push   ebx
c000f68f:	83 ec 1c             	sub    esp,0x1c
c000f692:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f69a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f69e:	31 c0                	xor    eax,eax
c000f6a0:	eb 0b                	jmp    c000f6ad <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6a2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6a8:	74 57                	je     c000f701 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6aa:	43                   	inc    ebx
c000f6ab:	89 f0                	mov    eax,esi
c000f6ad:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6b3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6b9:	88 13                	mov    BYTE PTR [ebx],dl
c000f6bb:	8d 70 01             	lea    esi,[eax+0x1]
c000f6be:	83 fd 18             	cmp    ebp,0x18
c000f6c1:	75 df                	jne    c000f6a2 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6c3:	a8 01                	test   al,0x1
c000f6c5:	75 13                	jne    c000f6da <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6c7:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6ca:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d0:	75 d8                	jne    c000f6aa <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6d2:	83 c4 1c             	add    esp,0x1c
c000f6d5:	5b                   	pop    ebx
c000f6d6:	5e                   	pop    esi
c000f6d7:	5f                   	pop    edi
c000f6d8:	5d                   	pop    ebp
c000f6d9:	c3                   	ret    
c000f6da:	83 ec 08             	sub    esp,0x8
c000f6dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e1:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6e8:	50                   	push   eax
c000f6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6ed:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6f4:	50                   	push   eax
c000f6f5:	e8 66 0b 00 00       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c000f6fa:	83 c4 10             	add    esp,0x10
c000f6fd:	88 07                	mov    BYTE PTR [edi],al
c000f6ff:	eb c9                	jmp    c000f6ca <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f701:	45                   	inc    ebp
c000f702:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f70a:	eb 8e                	jmp    c000f69a <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f70c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f70c:	56                   	push   esi
c000f70d:	53                   	push   ebx
c000f70e:	83 ec 0c             	sub    esp,0xc
c000f711:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f715:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f719:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f71e:	50                   	push   eax
c000f71f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f724:	50                   	push   eax
c000f725:	e8 36 0b 00 00       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c000f72a:	5a                   	pop    edx
c000f72b:	0f b6 c0             	movzx  eax,al
c000f72e:	59                   	pop    ecx
c000f72f:	50                   	push   eax
c000f730:	89 f0                	mov    eax,esi
c000f732:	0f be f0             	movsx  esi,al
c000f735:	56                   	push   esi
c000f736:	e8 cb 0b 00 00       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c000f73b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f73f:	ba 19 00 00 00       	mov    edx,0x19
c000f744:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f74a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f74d:	8d 14 92             	lea    edx,[edx+edx*4]
c000f750:	c1 e1 04             	shl    ecx,0x4
c000f753:	c1 e2 04             	shl    edx,0x4
c000f756:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f75a:	01 ca                	add    edx,ecx
c000f75c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f764:	83 c4 14             	add    esp,0x14
c000f767:	5b                   	pop    ebx
c000f768:	5e                   	pop    esi
c000f769:	c3                   	ret    

c000f76a <setupTextMode()>:
c000f76a:	c7 05 58 aa 02 c0 4a f6 00 c0 	mov    DWORD PTR ds:0xc002aa58,0xc000f64a
c000f774:	c7 05 44 aa 02 c0 26 f5 00 c0 	mov    DWORD PTR ds:0xc002aa44,0xc000f526
c000f77e:	c7 05 40 aa 02 c0 6b f5 00 c0 	mov    DWORD PTR ds:0xc002aa40,0xc000f56b
c000f788:	c7 05 4c aa 02 c0 86 f6 00 c0 	mov    DWORD PTR ds:0xc002aa4c,0xc000f686
c000f792:	c7 05 54 aa 02 c0 ad f5 00 c0 	mov    DWORD PTR ds:0xc002aa54,0xc000f5ad
c000f79c:	c7 05 48 aa 02 c0 01 f6 00 c0 	mov    DWORD PTR ds:0xc002aa48,0xc000f601
c000f7a6:	c7 05 50 aa 02 c0 02 f6 00 c0 	mov    DWORD PTR ds:0xc002aa50,0xc000f602
c000f7b0:	c7 05 5c aa 02 c0 0c f7 00 c0 	mov    DWORD PTR ds:0xc002aa5c,0xc000f70c
c000f7ba:	c3                   	ret    

c000f7bb <kernel_main>:
c000f7bb:	57                   	push   edi
c000f7bc:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c1:	56                   	push   esi
c000f7c2:	31 f6                	xor    esi,esi
c000f7c4:	53                   	push   ebx
c000f7c5:	83 ec 10             	sub    esp,0x10
c000f7c8:	e8 ed 08 00 00       	call   c00100ba <installVgaTextImplementation()>
c000f7cd:	e8 98 ff ff ff       	call   c000f76a <setupTextMode()>
c000f7d2:	89 f0                	mov    eax,esi
c000f7d4:	89 fa                	mov    edx,edi
c000f7d6:	ee                   	out    dx,al
c000f7d7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7dc:	b0 80                	mov    al,0x80
c000f7de:	89 da                	mov    edx,ebx
c000f7e0:	ee                   	out    dx,al
c000f7e1:	b1 03                	mov    cl,0x3
c000f7e3:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7e8:	88 c8                	mov    al,cl
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 f0                	mov    eax,esi
c000f7ed:	89 fa                	mov    edx,edi
c000f7ef:	ee                   	out    dx,al
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	89 da                	mov    edx,ebx
c000f7f4:	ee                   	out    dx,al
c000f7f5:	b0 c7                	mov    al,0xc7
c000f7f7:	ba fa 03 00 00       	mov    edx,0x3fa
c000f7fc:	ee                   	out    dx,al
c000f7fd:	b0 0b                	mov    al,0xb
c000f7ff:	ba fc 03 00 00       	mov    edx,0x3fc
c000f804:	ee                   	out    dx,al
c000f805:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f80a:	83 ec 0c             	sub    esp,0xc
c000f80d:	05 ff 0f 00 00       	add    eax,0xfff
c000f812:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f817:	50                   	push   eax
c000f818:	e8 59 03 00 00       	call   c000fb76 <Phys::physicalMemorySetup(unsigned int)>
c000f81d:	e8 3e 1f 00 00       	call   c0011760 <Virt::virtualMemorySetup()>
c000f822:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f831:	75 0e                	jne    c000f841 <kernel_main+0x86>
c000f833:	89 d8                	mov    eax,ebx
c000f835:	25 48 03 00 00       	and    eax,0x348
c000f83a:	3d 00 03 00 00       	cmp    eax,0x300
c000f83f:	74 10                	je     c000f851 <kernel_main+0x96>
c000f841:	83 ec 0c             	sub    esp,0xc
c000f844:	68 3b 86 02 c0       	push   0xc002863b
c000f849:	e8 b5 95 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	83 ec 0c             	sub    esp,0xc
c000f854:	89 1d c0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9c0,ebx
c000f85a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f85e:	53                   	push   ebx
c000f85f:	e8 b0 20 00 00       	call   c0011914 <VAS::VAS()>
c000f864:	89 1d 04 ab 02 c0    	mov    DWORD PTR ds:0xc002ab04,ebx
c000f86a:	e8 b1 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f86f:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f876:	e8 51 fc ff ff       	call   c000f4cc <malloc>
c000f87b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f87e:	89 c6                	mov    esi,eax
c000f880:	e8 57 ea ff ff       	call   c000e2dc <Computer::Computer()>
c000f885:	6a 00                	push   0x0
c000f887:	89 35 a8 a9 02 c0    	mov    DWORD PTR ds:0xc002a9a8,esi
c000f88d:	6a 00                	push   0x0
c000f88f:	6a 00                	push   0x0
c000f891:	56                   	push   esi
c000f892:	e8 7f f2 ff ff       	call   c000eb16 <Computer::open(int, int, void*)>
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	53                   	push   ebx
c000f89b:	e8 0e 23 00 00       	call   c0011bae <VAS::~VAS()>
c000f8a0:	c7 04 24 ac 70 02 c0 	mov    DWORD PTR [esp],0xc00270ac
c000f8a7:	e8 57 95 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000f8ac:	83 c4 20             	add    esp,0x20
c000f8af:	5b                   	pop    ebx
c000f8b0:	5e                   	pop    esi
c000f8b1:	5f                   	pop    edi
c000f8b2:	c3                   	ret    

c000f8b3 <Phys::allocateDMA(unsigned long)>:
c000f8b3:	55                   	push   ebp
c000f8b4:	31 d2                	xor    edx,edx
c000f8b6:	57                   	push   edi
c000f8b7:	31 ed                	xor    ebp,ebp
c000f8b9:	56                   	push   esi
c000f8ba:	31 c9                	xor    ecx,ecx
c000f8bc:	53                   	push   ebx
c000f8bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8c7:	31 c0                	xor    eax,eax
c000f8c9:	c1 ee 0c             	shr    esi,0xc
c000f8cc:	eb 17                	jmp    c000f8e5 <Phys::allocateDMA(unsigned long)+0x32>
c000f8ce:	85 c9                	test   ecx,ecx
c000f8d0:	75 04                	jne    c000f8d6 <Phys::allocateDMA(unsigned long)+0x23>
c000f8d2:	89 d5                	mov    ebp,edx
c000f8d4:	89 d0                	mov    eax,edx
c000f8d6:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8d9:	39 de                	cmp    esi,ebx
c000f8db:	74 20                	je     c000f8fd <Phys::allocateDMA(unsigned long)+0x4a>
c000f8dd:	42                   	inc    edx
c000f8de:	89 d9                	mov    ecx,ebx
c000f8e0:	83 fa 2f             	cmp    edx,0x2f
c000f8e3:	7f 11                	jg     c000f8f6 <Phys::allocateDMA(unsigned long)+0x43>
c000f8e5:	80 ba 00 aa 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5600],0x0
c000f8ec:	74 e0                	je     c000f8ce <Phys::allocateDMA(unsigned long)+0x1b>
c000f8ee:	31 c9                	xor    ecx,ecx
c000f8f0:	42                   	inc    edx
c000f8f1:	83 fa 2f             	cmp    edx,0x2f
c000f8f4:	7e ef                	jle    c000f8e5 <Phys::allocateDMA(unsigned long)+0x32>
c000f8f6:	5b                   	pop    ebx
c000f8f7:	31 c0                	xor    eax,eax
c000f8f9:	5e                   	pop    esi
c000f8fa:	5f                   	pop    edi
c000f8fb:	5d                   	pop    ebp
c000f8fc:	c3                   	ret    
c000f8fd:	8d 14 30             	lea    edx,[eax+esi*1]
c000f900:	89 d7                	mov    edi,edx
c000f902:	4f                   	dec    edi
c000f903:	79 03                	jns    c000f908 <Phys::allocateDMA(unsigned long)+0x55>
c000f905:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f908:	c1 ff 04             	sar    edi,0x4
c000f90b:	89 c2                	mov    edx,eax
c000f90d:	c1 fa 04             	sar    edx,0x4
c000f910:	39 fa                	cmp    edx,edi
c000f912:	75 2f                	jne    c000f943 <Phys::allocateDMA(unsigned long)+0x90>
c000f914:	85 db                	test   ebx,ebx
c000f916:	74 1a                	je     c000f932 <Phys::allocateDMA(unsigned long)+0x7f>
c000f918:	be 00 aa 02 c0       	mov    esi,0xc002aa00
c000f91d:	8d 90 00 aa 02 c0    	lea    edx,[eax-0x3ffd5600]
c000f923:	f7 d6                	not    esi
c000f925:	29 c6                	sub    esi,eax
c000f927:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f92a:	42                   	inc    edx
c000f92b:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f92e:	39 d9                	cmp    ecx,ebx
c000f930:	7f f5                	jg     c000f927 <Phys::allocateDMA(unsigned long)+0x74>
c000f932:	85 ff                	test   edi,edi
c000f934:	74 13                	je     c000f949 <Phys::allocateDMA(unsigned long)+0x96>
c000f936:	5b                   	pop    ebx
c000f937:	05 50 20 0c 00       	add    eax,0xc2050
c000f93c:	5e                   	pop    esi
c000f93d:	c1 e0 0c             	shl    eax,0xc
c000f940:	5f                   	pop    edi
c000f941:	5d                   	pop    ebp
c000f942:	c3                   	ret    
c000f943:	89 ea                	mov    edx,ebp
c000f945:	31 c9                	xor    ecx,ecx
c000f947:	eb a7                	jmp    c000f8f0 <Phys::allocateDMA(unsigned long)+0x3d>
c000f949:	5b                   	pop    ebx
c000f94a:	c1 e0 0c             	shl    eax,0xc
c000f94d:	5e                   	pop    esi
c000f94e:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f953:	5f                   	pop    edi
c000f954:	5d                   	pop    ebp
c000f955:	c3                   	ret    

c000f956 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f95a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f95e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f964:	c1 e9 0c             	shr    ecx,0xc
c000f967:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f96c:	76 25                	jbe    c000f993 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f96e:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f973:	c1 e8 0c             	shr    eax,0xc
c000f976:	8d 50 10             	lea    edx,[eax+0x10]
c000f979:	85 c9                	test   ecx,ecx
c000f97b:	74 15                	je     c000f992 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f97d:	8d 82 00 aa 02 c0    	lea    eax,[edx-0x3ffd5600]
c000f983:	8d 94 11 00 aa 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5600]
c000f98a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f98d:	40                   	inc    eax
c000f98e:	39 d0                	cmp    eax,edx
c000f990:	75 f8                	jne    c000f98a <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f992:	c3                   	ret    
c000f993:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f999:	c1 ea 0c             	shr    edx,0xc
c000f99c:	eb db                	jmp    c000f979 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f99e <Phys::setPageState(unsigned long, bool)>:
c000f99e:	56                   	push   esi
c000f99f:	ba 01 00 00 00       	mov    edx,0x1
c000f9a4:	53                   	push   ebx
c000f9a5:	8b 35 4c 99 02 c0    	mov    esi,DWORD PTR ds:0xc002994c
c000f9ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9b3:	89 c8                	mov    eax,ecx
c000f9b5:	83 e1 07             	and    ecx,0x7
c000f9b8:	c1 e8 03             	shr    eax,0x3
c000f9bb:	d3 e3                	shl    ebx,cl
c000f9bd:	01 c6                	add    esi,eax
c000f9bf:	d3 e2                	shl    edx,cl
c000f9c1:	f7 d2                	not    edx
c000f9c3:	20 16                	and    BYTE PTR [esi],dl
c000f9c5:	03 05 4c 99 02 c0    	add    eax,DWORD PTR ds:0xc002994c
c000f9cb:	08 18                	or     BYTE PTR [eax],bl
c000f9cd:	5b                   	pop    ebx
c000f9ce:	5e                   	pop    esi
c000f9cf:	c3                   	ret    

c000f9d0 <Phys::getPageState(unsigned long)>:
c000f9d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9d4:	8b 15 4c 99 02 c0    	mov    edx,DWORD PTR ds:0xc002994c
c000f9da:	89 c8                	mov    eax,ecx
c000f9dc:	83 e1 07             	and    ecx,0x7
c000f9df:	c1 e8 03             	shr    eax,0x3
c000f9e2:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9e6:	d3 f8                	sar    eax,cl
c000f9e8:	83 e0 01             	and    eax,0x1
c000f9eb:	c3                   	ret    

c000f9ec <Phys::freePage(unsigned long)>:
c000f9ec:	53                   	push   ebx
c000f9ed:	83 ec 08             	sub    esp,0x8
c000f9f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9f4:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9fa:	76 57                	jbe    c000fa53 <Phys::freePage(unsigned long)+0x67>
c000f9fc:	c1 eb 0c             	shr    ebx,0xc
c000f9ff:	53                   	push   ebx
c000fa00:	e8 cb ff ff ff       	call   c000f9d0 <Phys::getPageState(unsigned long)>
c000fa05:	5a                   	pop    edx
c000fa06:	84 c0                	test   al,al
c000fa08:	74 5b                	je     c000fa65 <Phys::freePage(unsigned long)+0x79>
c000fa0a:	a1 ec a9 02 c0       	mov    eax,ds:0xc002a9ec
c000fa0f:	48                   	dec    eax
c000fa10:	a3 ec a9 02 c0       	mov    ds:0xc002a9ec,eax
c000fa15:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa18:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa1b:	c1 e0 02             	shl    eax,0x2
c000fa1e:	99                   	cdq    
c000fa1f:	f7 3d f0 a9 02 c0    	idiv   DWORD PTR ds:0xc002a9f0
c000fa25:	39 05 e8 a9 02 c0    	cmp    DWORD PTR ds:0xc002a9e8,eax
c000fa2b:	75 13                	jne    c000fa40 <Phys::freePage(unsigned long)+0x54>
c000fa2d:	83 ec 08             	sub    esp,0x8
c000fa30:	6a 00                	push   0x0
c000fa32:	53                   	push   ebx
c000fa33:	e8 66 ff ff ff       	call   c000f99e <Phys::setPageState(unsigned long, bool)>
c000fa38:	83 c4 10             	add    esp,0x10
c000fa3b:	83 c4 08             	add    esp,0x8
c000fa3e:	5b                   	pop    ebx
c000fa3f:	c3                   	ret    
c000fa40:	83 ec 0c             	sub    esp,0xc
c000fa43:	a3 e8 a9 02 c0       	mov    ds:0xc002a9e8,eax
c000fa48:	50                   	push   eax
c000fa49:	e8 00 0a 00 00       	call   c001044e <VgaText::updateRAMUsageDisplay(int)>
c000fa4e:	83 c4 10             	add    esp,0x10
c000fa51:	eb da                	jmp    c000fa2d <Phys::freePage(unsigned long)+0x41>
c000fa53:	68 00 10 00 00       	push   0x1000
c000fa58:	53                   	push   ebx
c000fa59:	e8 f8 fe ff ff       	call   c000f956 <Phys::freeDMA(unsigned long, unsigned long)>
c000fa5e:	59                   	pop    ecx
c000fa5f:	5b                   	pop    ebx
c000fa60:	83 c4 08             	add    esp,0x8
c000fa63:	5b                   	pop    ebx
c000fa64:	c3                   	ret    
c000fa65:	c7 44 24 10 c7 70 02 c0 	mov    DWORD PTR [esp+0x10],0xc00270c7
c000fa6d:	83 c4 08             	add    esp,0x8
c000fa70:	5b                   	pop    ebx
c000fa71:	e9 8d 93 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>

c000fa76 <Phys::allocatePage()>:
c000fa76:	56                   	push   esi
c000fa77:	53                   	push   ebx
c000fa78:	51                   	push   ecx
c000fa79:	8b 35 e0 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a9e0
c000fa7f:	89 f3                	mov    ebx,esi
c000fa81:	eb 0a                	jmp    c000fa8d <Phys::allocatePage()+0x17>
c000fa83:	89 1d e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,ebx
c000fa89:	39 de                	cmp    esi,ebx
c000fa8b:	74 24                	je     c000fab1 <Phys::allocatePage()+0x3b>
c000fa8d:	53                   	push   ebx
c000fa8e:	e8 3d ff ff ff       	call   c000f9d0 <Phys::getPageState(unsigned long)>
c000fa93:	5a                   	pop    edx
c000fa94:	84 c0                	test   al,al
c000fa96:	74 5a                	je     c000faf2 <Phys::allocatePage()+0x7c>
c000fa98:	43                   	inc    ebx
c000fa99:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa9f:	75 e2                	jne    c000fa83 <Phys::allocatePage()+0xd>
c000faa1:	31 db                	xor    ebx,ebx
c000faa3:	c7 05 e0 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9e0,0x0
c000faad:	39 de                	cmp    esi,ebx
c000faaf:	75 dc                	jne    c000fa8d <Phys::allocatePage()+0x17>
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	68 dd 70 02 c0       	push   0xc00270dd
c000fab9:	e8 81 2b 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000fabe:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fac5:	e8 e9 fd ff ff       	call   c000f8b3 <Phys::allocateDMA(unsigned long)>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	85 c0                	test   eax,eax
c000facf:	75 56                	jne    c000fb27 <Phys::allocatePage()+0xb1>
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	68 ee 70 02 c0       	push   0xc00270ee
c000fad9:	e8 25 93 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000fade:	83 c4 10             	add    esp,0x10
c000fae1:	8b 1d e0 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9e0
c000fae7:	53                   	push   ebx
c000fae8:	e8 e3 fe ff ff       	call   c000f9d0 <Phys::getPageState(unsigned long)>
c000faed:	5a                   	pop    edx
c000faee:	84 c0                	test   al,al
c000faf0:	75 a6                	jne    c000fa98 <Phys::allocatePage()+0x22>
c000faf2:	6a 01                	push   0x1
c000faf4:	53                   	push   ebx
c000faf5:	e8 a4 fe ff ff       	call   c000f99e <Phys::setPageState(unsigned long, bool)>
c000fafa:	a1 ec a9 02 c0       	mov    eax,ds:0xc002a9ec
c000faff:	59                   	pop    ecx
c000fb00:	40                   	inc    eax
c000fb01:	5b                   	pop    ebx
c000fb02:	a3 ec a9 02 c0       	mov    ds:0xc002a9ec,eax
c000fb07:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb0a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb0d:	c1 e0 02             	shl    eax,0x2
c000fb10:	99                   	cdq    
c000fb11:	f7 3d f0 a9 02 c0    	idiv   DWORD PTR ds:0xc002a9f0
c000fb17:	39 05 e8 a9 02 c0    	cmp    DWORD PTR ds:0xc002a9e8,eax
c000fb1d:	75 0c                	jne    c000fb2b <Phys::allocatePage()+0xb5>
c000fb1f:	a1 e0 a9 02 c0       	mov    eax,ds:0xc002a9e0
c000fb24:	c1 e0 0c             	shl    eax,0xc
c000fb27:	5a                   	pop    edx
c000fb28:	5b                   	pop    ebx
c000fb29:	5e                   	pop    esi
c000fb2a:	c3                   	ret    
c000fb2b:	83 ec 0c             	sub    esp,0xc
c000fb2e:	a3 e8 a9 02 c0       	mov    ds:0xc002a9e8,eax
c000fb33:	50                   	push   eax
c000fb34:	e8 15 09 00 00       	call   c001044e <VgaText::updateRAMUsageDisplay(int)>
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	eb e1                	jmp    c000fb1f <Phys::allocatePage()+0xa9>

c000fb3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb3e:	56                   	push   esi
c000fb3f:	53                   	push   ebx
c000fb40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb44:	39 1d e4 a9 02 c0    	cmp    DWORD PTR ds:0xc002a9e4,ebx
c000fb4a:	73 06                	jae    c000fb52 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb4c:	89 1d e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,ebx
c000fb52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb56:	c1 eb 0c             	shr    ebx,0xc
c000fb59:	c1 e8 0c             	shr    eax,0xc
c000fb5c:	39 d8                	cmp    eax,ebx
c000fb5e:	73 13                	jae    c000fb73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb60:	6a 00                	push   0x0
c000fb62:	8d 70 01             	lea    esi,[eax+0x1]
c000fb65:	50                   	push   eax
c000fb66:	e8 33 fe ff ff       	call   c000f99e <Phys::setPageState(unsigned long, bool)>
c000fb6b:	5a                   	pop    edx
c000fb6c:	89 f0                	mov    eax,esi
c000fb6e:	59                   	pop    ecx
c000fb6f:	39 f3                	cmp    ebx,esi
c000fb71:	75 ed                	jne    c000fb60 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb73:	5b                   	pop    ebx
c000fb74:	5e                   	pop    esi
c000fb75:	c3                   	ret    

c000fb76 <Phys::physicalMemorySetup(unsigned int)>:
c000fb76:	55                   	push   ebp
c000fb77:	57                   	push   edi
c000fb78:	56                   	push   esi
c000fb79:	53                   	push   ebx
c000fb7a:	31 db                	xor    ebx,ebx
c000fb7c:	83 ec 40             	sub    esp,0x40
c000fb7f:	6a 30                	push   0x30
c000fb81:	6a 00                	push   0x0
c000fb83:	68 00 aa 02 c0       	push   0xc002aa00
c000fb88:	e8 f0 0a ff ff       	call   c000067d <memset>
c000fb8d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb96:	05 00 10 00 00       	add    eax,0x1000
c000fb9b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb9f:	83 c4 10             	add    esp,0x10
c000fba2:	83 ec 08             	sub    esp,0x8
c000fba5:	6a 01                	push   0x1
c000fba7:	53                   	push   ebx
c000fba8:	43                   	inc    ebx
c000fba9:	e8 f0 fd ff ff       	call   c000f99e <Phys::setPageState(unsigned long, bool)>
c000fbae:	83 c4 10             	add    esp,0x10
c000fbb1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbb7:	75 e9                	jne    c000fba2 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fbb9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fbc0:	66 85 c0             	test   ax,ax
c000fbc3:	0f 84 8e 01 00 00    	je     c000fd57 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fbc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fbcd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fbd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbd9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fbe2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbea:	eb 15                	jmp    c000fc01 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fbec:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fbf0:	83 c3 18             	add    ebx,0x18
c000fbf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbf7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbfb:	0f 84 66 01 00 00    	je     c000fd67 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc01:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc07:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc12:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc14:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc17:	01 f0                	add    eax,esi
c000fc19:	55                   	push   ebp
c000fc1a:	11 fa                	adc    edx,edi
c000fc1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc28:	56                   	push   esi
c000fc29:	68 28 71 02 c0       	push   0xc0027128
c000fc2e:	e8 0c 2a 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000fc33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	09 f8                	or     eax,edi
c000fc3c:	0f 85 25 01 00 00    	jne    c000fd67 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc42:	4d                   	dec    ebp
c000fc43:	75 a7                	jne    c000fbec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc45:	ba 00 00 08 00       	mov    edx,0x80000
c000fc4a:	89 c1                	mov    ecx,eax
c000fc4c:	39 f2                	cmp    edx,esi
c000fc4e:	19 f9                	sbb    ecx,edi
c000fc50:	0f 82 a7 00 00 00    	jb     c000fcfd <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc56:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc5a:	89 c1                	mov    ecx,eax
c000fc5c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc60:	0f 83 97 00 00 00    	jae    c000fcfd <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc66:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc6f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc73:	39 fa                	cmp    edx,edi
c000fc75:	19 e8                	sbb    eax,ebp
c000fc77:	0f 82 14 01 00 00    	jb     c000fd91 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc7d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc81:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc85:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc8b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc90:	83 d5 ff             	adc    ebp,0xffffffff
c000fc93:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc97:	31 c0                	xor    eax,eax
c000fc99:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc9d:	39 fa                	cmp    edx,edi
c000fc9f:	89 c1                	mov    ecx,eax
c000fca1:	19 e9                	sbb    ecx,ebp
c000fca3:	0f 83 43 ff ff ff    	jae    c000fbec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca9:	be 00 00 08 00       	mov    esi,0x80000
c000fcae:	50                   	push   eax
c000fcaf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fcb3:	57                   	push   edi
c000fcb4:	56                   	push   esi
c000fcb5:	68 4c 71 02 c0       	push   0xc002714c
c000fcba:	e8 80 29 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000fcbf:	5a                   	pop    edx
c000fcc0:	59                   	pop    ecx
c000fcc1:	57                   	push   edi
c000fcc2:	56                   	push   esi
c000fcc3:	e8 76 fe ff ff       	call   c000fb3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fcc8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fcd0:	83 c4 0c             	add    esp,0xc
c000fcd3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fcd7:	03 05 f0 a9 02 c0    	add    eax,DWORD PTR ds:0xc002a9f0
c000fcdd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fce4:	a3 f0 a9 02 c0       	mov    ds:0xc002a9f0,eax
c000fce9:	52                   	push   edx
c000fcea:	50                   	push   eax
c000fceb:	68 0a 71 02 c0       	push   0xc002710a
c000fcf0:	e8 4a 29 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c000fcf5:	83 c4 10             	add    esp,0x10
c000fcf8:	e9 ef fe ff ff       	jmp    c000fbec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcfd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd09:	39 ea                	cmp    edx,ebp
c000fd0b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd0f:	0f 82 d7 fe ff ff    	jb     c000fbec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd15:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd1a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd1e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd22:	0f 83 c4 fe ff ff    	jae    c000fbec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd28:	39 ee                	cmp    esi,ebp
c000fd2a:	89 f8                	mov    eax,edi
c000fd2c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd30:	0f 83 78 ff ff ff    	jae    c000fcae <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd3e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd46:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd52:	e9 57 ff ff ff       	jmp    c000fcae <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd57:	83 ec 0c             	sub    esp,0xc
c000fd5a:	68 fc 70 02 c0       	push   0xc00270fc
c000fd5f:	e8 9f 90 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	bb 40 01 00 00       	mov    ebx,0x140
c000fd6c:	83 ec 08             	sub    esp,0x8
c000fd6f:	6a 00                	push   0x0
c000fd71:	53                   	push   ebx
c000fd72:	43                   	inc    ebx
c000fd73:	e8 26 fc ff ff       	call   c000f99e <Phys::setPageState(unsigned long, bool)>
c000fd78:	ff 05 f0 a9 02 c0    	inc    DWORD PTR ds:0xc002a9f0
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd87:	75 e3                	jne    c000fd6c <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd89:	83 c4 3c             	add    esp,0x3c
c000fd8c:	5b                   	pop    ebx
c000fd8d:	5e                   	pop    esi
c000fd8e:	5f                   	pop    edi
c000fd8f:	5d                   	pop    ebp
c000fd90:	c3                   	ret    
c000fd91:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fda1:	e9 d7 fe ff ff       	jmp    c000fc7d <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fda6 <Pipe::isAtty()>:
c000fda6:	31 c0                	xor    eax,eax
c000fda8:	c3                   	ret    
c000fda9:	90                   	nop

c000fdaa <Pipe::~Pipe()>:
c000fdaa:	83 ec 0c             	sub    esp,0xc
c000fdad:	ba b8 71 02 c0       	mov    edx,0xc00271b8
c000fdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb6:	89 10                	mov    DWORD PTR [eax],edx
c000fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdbc:	83 ec 0c             	sub    esp,0xc
c000fdbf:	50                   	push   eax
c000fdc0:	e8 29 16 00 00       	call   c00113ee <UnixFile::~UnixFile()>
c000fdc5:	83 c4 10             	add    esp,0x10
c000fdc8:	90                   	nop
c000fdc9:	83 c4 0c             	add    esp,0xc
c000fdcc:	c3                   	ret    
c000fdcd:	90                   	nop

c000fdce <Pipe::~Pipe()>:
c000fdce:	83 ec 0c             	sub    esp,0xc
c000fdd1:	83 ec 0c             	sub    esp,0xc
c000fdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdd8:	e8 cd ff ff ff       	call   c000fdaa <Pipe::~Pipe()>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	83 ec 08             	sub    esp,0x8
c000fde3:	6a 20                	push   0x20
c000fde5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde9:	e8 71 27 00 00       	call   c001255f <operator delete(void*, unsigned long)>
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	83 c4 0c             	add    esp,0xc
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <Pipe::read(unsigned long long, void*, int*)>:
c000fdf6:	55                   	push   ebp
c000fdf7:	57                   	push   edi
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 1c             	sub    esp,0x1c
c000fdfd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe05:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe09:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe0c:	89 c8                	mov    eax,ecx
c000fe0e:	99                   	cdq    
c000fe0f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe13:	74 19                	je     c000fe2e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe15:	39 f9                	cmp    ecx,edi
c000fe17:	89 d1                	mov    ecx,edx
c000fe19:	19 f1                	sbb    ecx,esi
c000fe1b:	73 11                	jae    c000fe2e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe1d:	e8 ed bf 00 00       	call   c001be0f <lockScheduler()>
c000fe22:	e8 23 c3 00 00       	call   c001c14a <schedule()>
c000fe27:	e8 e5 bf 00 00       	call   c001be11 <unlockScheduler()>
c000fe2c:	eb db                	jmp    c000fe09 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe2e:	39 f8                	cmp    eax,edi
c000fe30:	89 d1                	mov    ecx,edx
c000fe32:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe36:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe3a:	19 f1                	sbb    ecx,esi
c000fe3c:	73 08                	jae    c000fe46 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe49:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe4c:	29 c6                	sub    esi,eax
c000fe4e:	89 f1                	mov    ecx,esi
c000fe50:	c1 f9 1f             	sar    ecx,0x1f
c000fe53:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fe57:	89 ca                	mov    edx,ecx
c000fe59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe5d:	19 d1                	sbb    ecx,edx
c000fe5f:	73 04                	jae    c000fe65 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fe61:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fe65:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe69:	89 fd                	mov    ebp,edi
c000fe6b:	29 f5                	sub    ebp,esi
c000fe6d:	85 f6                	test   esi,esi
c000fe6f:	74 12                	je     c000fe83 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe71:	52                   	push   edx
c000fe72:	56                   	push   esi
c000fe73:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe76:	50                   	push   eax
c000fe77:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe7b:	e8 c7 07 ff ff       	call   c0000647 <memcpy>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	85 ed                	test   ebp,ebp
c000fe85:	74 12                	je     c000fe99 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe87:	50                   	push   eax
c000fe88:	55                   	push   ebp
c000fe89:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe8c:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe90:	56                   	push   esi
c000fe91:	e8 b1 07 ff ff       	call   c0000647 <memcpy>
c000fe96:	83 c4 10             	add    esp,0x10
c000fe99:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fe9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe9f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fea2:	99                   	cdq    
c000fea3:	89 f7                	mov    edi,esi
c000fea5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fea9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fead:	c1 ff 1f             	sar    edi,0x1f
c000feb0:	57                   	push   edi
c000feb1:	56                   	push   esi
c000feb2:	52                   	push   edx
c000feb3:	50                   	push   eax
c000feb4:	e8 c3 3b 01 00       	call   c0023a7c <__umoddi3>
c000feb9:	83 c4 10             	add    esp,0x10
c000febc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000febf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec4:	75 10                	jne    c000fed6 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fec6:	83 ec 0c             	sub    esp,0xc
c000fec9:	68 75 71 02 c0       	push   0xc0027175
c000fece:	e8 30 8f 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000feda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fede:	89 10                	mov    DWORD PTR [eax],edx
c000fee0:	83 c4 1c             	add    esp,0x1c
c000fee3:	31 c0                	xor    eax,eax
c000fee5:	5b                   	pop    ebx
c000fee6:	5e                   	pop    esi
c000fee7:	5f                   	pop    edi
c000fee8:	5d                   	pop    ebp
c000fee9:	c3                   	ret    

c000feea <Pipe::write(unsigned long long, void*, int*)>:
c000feea:	55                   	push   ebp
c000feeb:	57                   	push   edi
c000feec:	56                   	push   esi
c000feed:	53                   	push   ebx
c000feee:	83 ec 1c             	sub    esp,0x1c
c000fef1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fef9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fefd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff00:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff03:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff0a:	89 de                	mov    esi,ebx
c000ff0c:	89 df                	mov    edi,ebx
c000ff0e:	c1 ff 1f             	sar    edi,0x1f
c000ff11:	01 c6                	add    esi,eax
c000ff13:	89 c8                	mov    eax,ecx
c000ff15:	11 d7                	adc    edi,edx
c000ff17:	99                   	cdq    
c000ff18:	39 f1                	cmp    ecx,esi
c000ff1a:	89 d0                	mov    eax,edx
c000ff1c:	19 f8                	sbb    eax,edi
c000ff1e:	b8 01 00 00 00       	mov    eax,0x1
c000ff23:	0f 82 80 00 00 00    	jb     c000ffa9 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff29:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff2f:	01 d8                	add    eax,ebx
c000ff31:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff35:	99                   	cdq    
c000ff36:	f7 f9                	idiv   ecx
c000ff38:	29 d1                	sub    ecx,edx
c000ff3a:	89 d7                	mov    edi,edx
c000ff3c:	89 c8                	mov    eax,ecx
c000ff3e:	99                   	cdq    
c000ff3f:	39 ce                	cmp    esi,ecx
c000ff41:	19 d3                	sbb    ebx,edx
c000ff43:	bb 00 00 00 00       	mov    ebx,0x0
c000ff48:	72 04                	jb     c000ff4e <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff4a:	89 f3                	mov    ebx,esi
c000ff4c:	29 cb                	sub    ebx,ecx
c000ff4e:	89 f1                	mov    ecx,esi
c000ff50:	29 d9                	sub    ecx,ebx
c000ff52:	74 1a                	je     c000ff6e <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ff54:	52                   	push   edx
c000ff55:	51                   	push   ecx
c000ff56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ff5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ff5e:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff61:	57                   	push   edi
c000ff62:	e8 e0 06 ff ff       	call   c0000647 <memcpy>
c000ff67:	83 c4 10             	add    esp,0x10
c000ff6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff6e:	85 db                	test   ebx,ebx
c000ff70:	74 12                	je     c000ff84 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff72:	50                   	push   eax
c000ff73:	53                   	push   ebx
c000ff74:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff78:	51                   	push   ecx
c000ff79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff7c:	e8 c6 06 ff ff       	call   c0000647 <memcpy>
c000ff81:	83 c4 10             	add    esp,0x10
c000ff84:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff87:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff8c:	75 10                	jne    c000ff9e <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff8e:	83 ec 0c             	sub    esp,0xc
c000ff91:	68 91 71 02 c0       	push   0xc0027191
c000ff96:	e8 68 8e 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ffa2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ffa5:	89 38                	mov    DWORD PTR [eax],edi
c000ffa7:	31 c0                	xor    eax,eax
c000ffa9:	83 c4 1c             	add    esp,0x1c
c000ffac:	5b                   	pop    ebx
c000ffad:	5e                   	pop    esi
c000ffae:	5f                   	pop    edi
c000ffaf:	5d                   	pop    ebp
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <Pipe::Pipe(int)>:
c000ffb2:	83 ec 0c             	sub    esp,0xc
c000ffb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb9:	83 ec 08             	sub    esp,0x8
c000ffbc:	6a 00                	push   0x0
c000ffbe:	50                   	push   eax
c000ffbf:	e8 48 12 00 00       	call   c001120c <UnixFile::UnixFile(int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	ba b8 71 02 c0       	mov    edx,0xc00271b8
c000ffcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd0:	89 10                	mov    DWORD PTR [eax],edx
c000ffd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ffda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ffdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffec:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fff7:	83 ec 0c             	sub    esp,0xc
c000fffa:	50                   	push   eax
c000fffb:	e8 cc f4 ff ff       	call   c000f4cc <malloc>
c0010000:	83 c4 10             	add    esp,0x10
c0010003:	89 c2                	mov    edx,eax
c0010005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010009:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001000c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010010:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010014:	90                   	nop
c0010015:	83 c4 0c             	add    esp,0xc
c0010018:	c3                   	ret    
c0010019:	90                   	nop

c001001a <VgaText::isAtty()>:
c001001a:	b0 01                	mov    al,0x1
c001001c:	c3                   	ret    
c001001d:	90                   	nop

c001001e <VgaText::~VgaText()>:
c001001e:	83 ec 0c             	sub    esp,0xc
c0010021:	ba 74 72 02 c0       	mov    edx,0xc0027274
c0010026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002a:	89 10                	mov    DWORD PTR [eax],edx
c001002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010030:	83 ec 0c             	sub    esp,0xc
c0010033:	50                   	push   eax
c0010034:	e8 b5 13 00 00       	call   c00113ee <UnixFile::~UnixFile()>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	90                   	nop
c001003d:	83 c4 0c             	add    esp,0xc
c0010040:	c3                   	ret    
c0010041:	90                   	nop

c0010042 <VgaText::~VgaText()>:
c0010042:	83 ec 0c             	sub    esp,0xc
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001004c:	e8 cd ff ff ff       	call   c001001e <VgaText::~VgaText()>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 ec 08             	sub    esp,0x8
c0010057:	68 60 12 00 00       	push   0x1260
c001005c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010060:	e8 fa 24 00 00       	call   c001255f <operator delete(void*, unsigned long)>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	83 c4 0c             	add    esp,0xc
c001006b:	c3                   	ret    

c001006c <VgaText::read(unsigned long long, void*, int*)>:
c001006c:	83 ec 10             	sub    esp,0x10
c001006f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007b:	e8 78 57 00 00       	call   c00157f8 <readKeyboard(VgaText*, char*, unsigned long)>
c0010080:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010084:	89 02                	mov    DWORD PTR [edx],eax
c0010086:	31 c0                	xor    eax,eax
c0010088:	83 c4 1c             	add    esp,0x1c
c001008b:	c3                   	ret    

c001008c <setTerminalScrollLock(bool)>:
c001008c:	c3                   	ret    

c001008d <addToTerminalCycle(VgaText*)>:
c001008d:	8b 15 60 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa60
c0010093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010097:	85 d2                	test   edx,edx
c0010099:	75 0c                	jne    c00100a7 <addToTerminalCycle(VgaText*)+0x1a>
c001009b:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00100a1:	a3 60 aa 02 c0       	mov    ds:0xc002aa60,eax
c00100a6:	c3                   	ret    
c00100a7:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100ad:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00100b3:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00100b9:	c3                   	ret    

c00100ba <installVgaTextImplementation()>:
c00100ba:	83 ec 10             	sub    esp,0x10
c00100bd:	6a 20                	push   0x20
c00100bf:	6a 00                	push   0x0
c00100c1:	68 40 aa 02 c0       	push   0xc002aa40
c00100c6:	e8 b2 05 ff ff       	call   c000067d <memset>
c00100cb:	83 c4 1c             	add    esp,0x1c
c00100ce:	c3                   	ret    

c00100cf <scrollTerminalScrollLock(int)>:
c00100cf:	c3                   	ret    

c00100d0 <VgaText::load()>:
c00100d0:	53                   	push   ebx
c00100d1:	31 c0                	xor    eax,eax
c00100d3:	83 ec 58             	sub    esp,0x58
c00100d6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100da:	89 e2                	mov    edx,esp
c00100dc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100e0:	40                   	inc    eax
c00100e1:	83 f8 50             	cmp    eax,0x50
c00100e4:	75 f6                	jne    c00100dc <VgaText::load()+0xc>
c00100e6:	31 c0                	xor    eax,eax
c00100e8:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00100ef:	84 c9                	test   cl,cl
c00100f1:	74 06                	je     c00100f9 <VgaText::load()+0x29>
c00100f3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100f6:	40                   	inc    eax
c00100f7:	eb ef                	jmp    c00100e8 <VgaText::load()+0x18>
c00100f9:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00100ff:	85 c0                	test   eax,eax
c0010101:	74 09                	je     c001010c <VgaText::load()+0x3c>
c0010103:	51                   	push   ecx
c0010104:	51                   	push   ecx
c0010105:	52                   	push   edx
c0010106:	53                   	push   ebx
c0010107:	ff d0                	call   eax
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010112:	85 c0                	test   eax,eax
c0010114:	74 09                	je     c001011f <VgaText::load()+0x4f>
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	53                   	push   ebx
c001011a:	ff d0                	call   eax
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	83 c4 58             	add    esp,0x58
c0010122:	5b                   	pop    ebx
c0010123:	c3                   	ret    

c0010124 <VgaText::updateCursor()>:
c0010124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010128:	39 05 64 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa64,eax
c001012e:	75 0c                	jne    c001013c <VgaText::updateCursor()+0x18>
c0010130:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010136:	85 c0                	test   eax,eax
c0010138:	74 02                	je     c001013c <VgaText::updateCursor()+0x18>
c001013a:	ff e0                	jmp    eax
c001013c:	c3                   	ret    
c001013d:	90                   	nop

c001013e <VgaText::showCursor(bool)>:
c001013e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010146:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001014c:	c3                   	ret    
c001014d:	90                   	nop

c001014e <VgaText::disableBlink(bool)>:
c001014e:	56                   	push   esi
c001014f:	53                   	push   ebx
c0010150:	51                   	push   ecx
c0010151:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010155:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010159:	39 1d 64 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa64,ebx
c001015f:	75 18                	jne    c0010179 <VgaText::disableBlink(bool)+0x2b>
c0010161:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010167:	85 c0                	test   eax,eax
c0010169:	74 0e                	je     c0010179 <VgaText::disableBlink(bool)+0x2b>
c001016b:	89 f1                	mov    ecx,esi
c001016d:	52                   	push   edx
c001016e:	52                   	push   edx
c001016f:	0f b6 d1             	movzx  edx,cl
c0010172:	52                   	push   edx
c0010173:	53                   	push   ebx
c0010174:	ff d0                	call   eax
c0010176:	83 c4 10             	add    esp,0x10
c0010179:	89 f0                	mov    eax,esi
c001017b:	83 f0 01             	xor    eax,0x1
c001017e:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010184:	58                   	pop    eax
c0010185:	5b                   	pop    ebx
c0010186:	5e                   	pop    esi
c0010187:	c3                   	ret    

c0010188 <VgaText::doANSI_SGR(int)>:
c0010188:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010190:	85 d2                	test   edx,edx
c0010192:	75 14                	jne    c00101a8 <VgaText::doANSI_SGR(int)+0x20>
c0010194:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001019a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101a0:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00101a6:	eb 65                	jmp    c001020d <VgaText::doANSI_SGR(int)+0x85>
c00101a8:	83 fa 07             	cmp    edx,0x7
c00101ab:	75 14                	jne    c00101c1 <VgaText::doANSI_SGR(int)+0x39>
c00101ad:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00101b3:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00101b9:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00101bf:	eb 4c                	jmp    c001020d <VgaText::doANSI_SGR(int)+0x85>
c00101c1:	83 fa 1b             	cmp    edx,0x1b
c00101c4:	74 ce                	je     c0010194 <VgaText::doANSI_SGR(int)+0xc>
c00101c6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00101c9:	83 f9 07             	cmp    ecx,0x7
c00101cc:	77 09                	ja     c00101d7 <VgaText::doANSI_SGR(int)+0x4f>
c00101ce:	8b 14 8d 80 99 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6680]
c00101d5:	eb 20                	jmp    c00101f7 <VgaText::doANSI_SGR(int)+0x6f>
c00101d7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00101da:	83 f9 07             	cmp    ecx,0x7
c00101dd:	77 09                	ja     c00101e8 <VgaText::doANSI_SGR(int)+0x60>
c00101df:	8b 14 8d 80 99 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6680]
c00101e6:	eb 25                	jmp    c001020d <VgaText::doANSI_SGR(int)+0x85>
c00101e8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00101eb:	83 f9 07             	cmp    ecx,0x7
c00101ee:	77 0e                	ja     c00101fe <VgaText::doANSI_SGR(int)+0x76>
c00101f0:	8b 14 95 38 98 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd67c8]
c00101f7:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101fd:	c3                   	ret    
c00101fe:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010201:	83 f9 07             	cmp    ecx,0x7
c0010204:	77 0d                	ja     c0010213 <VgaText::doANSI_SGR(int)+0x8b>
c0010206:	8b 14 95 10 98 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd67f0]
c001020d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010213:	c3                   	ret    

c0010214 <VgaText::setDefaultBgColour(VgaColour)>:
c0010214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010222:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010228:	c3                   	ret    
c0010229:	90                   	nop

c001022a <VgaText::setDefaultFgColour(VgaColour)>:
c001022a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010238:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001023e:	c3                   	ret    
c001023f:	90                   	nop

c0010240 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010240:	53                   	push   ebx
c0010241:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010245:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010249:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001024d:	51                   	push   ecx
c001024e:	e8 c1 ff ff ff       	call   c0010214 <VgaText::setDefaultBgColour(VgaColour)>
c0010253:	58                   	pop    eax
c0010254:	5a                   	pop    edx
c0010255:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010259:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001025d:	5b                   	pop    ebx
c001025e:	eb ca                	jmp    c001022a <VgaText::setDefaultFgColour(VgaColour)>

c0010260 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010260:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010264:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010269:	83 e0 0f             	and    eax,0xf
c001026c:	c1 e2 04             	shl    edx,0x4
c001026f:	09 d0                	or     eax,edx
c0010271:	c3                   	ret    

c0010272 <VgaText::scrollScreen()>:
c0010272:	57                   	push   edi
c0010273:	56                   	push   esi
c0010274:	be 01 00 00 00       	mov    esi,0x1
c0010279:	53                   	push   ebx
c001027a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001027e:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010284:	31 ff                	xor    edi,edi
c0010286:	01 d9                	add    ecx,ebx
c0010288:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001028b:	83 fe 17             	cmp    esi,0x17
c001028e:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010294:	75 28                	jne    c00102be <VgaText::scrollScreen()+0x4c>
c0010296:	f7 c7 01 00 00 00    	test   edi,0x1
c001029c:	74 1c                	je     c00102ba <VgaText::scrollScreen()+0x48>
c001029e:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00102a5:	50                   	push   eax
c00102a6:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102ad:	50                   	push   eax
c00102ae:	e8 ad ff ff ff       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c00102b3:	5a                   	pop    edx
c00102b4:	5a                   	pop    edx
c00102b5:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00102b8:	eb 04                	jmp    c00102be <VgaText::scrollScreen()+0x4c>
c00102ba:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00102be:	47                   	inc    edi
c00102bf:	41                   	inc    ecx
c00102c0:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00102c6:	75 c0                	jne    c0010288 <VgaText::scrollScreen()+0x16>
c00102c8:	46                   	inc    esi
c00102c9:	83 fe 18             	cmp    esi,0x18
c00102cc:	75 b0                	jne    c001027e <VgaText::scrollScreen()+0xc>
c00102ce:	39 1d 64 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa64,ebx
c00102d4:	75 24                	jne    c00102fa <VgaText::scrollScreen()+0x88>
c00102d6:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00102dd:	74 08                	je     c00102e7 <VgaText::scrollScreen()+0x75>
c00102df:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00102e5:	eb 13                	jmp    c00102fa <VgaText::scrollScreen()+0x88>
c00102e7:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00102ed:	85 c0                	test   eax,eax
c00102ef:	74 09                	je     c00102fa <VgaText::scrollScreen()+0x88>
c00102f1:	83 ec 0c             	sub    esp,0xc
c00102f4:	53                   	push   ebx
c00102f5:	ff d0                	call   eax
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102fe:	5b                   	pop    ebx
c00102ff:	5e                   	pop    esi
c0010300:	5f                   	pop    edi
c0010301:	e9 1e fe ff ff       	jmp    c0010124 <VgaText::updateCursor()>

c0010306 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010306:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001030b:	c1 e0 08             	shl    eax,0x8
c001030e:	89 c2                	mov    edx,eax
c0010310:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010315:	09 d0                	or     eax,edx
c0010317:	c3                   	ret    

c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010318:	53                   	push   ebx
c0010319:	83 ec 08             	sub    esp,0x8
c001031c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010320:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010325:	50                   	push   eax
c0010326:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001032b:	50                   	push   eax
c001032c:	e8 2f ff ff ff       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c0010331:	5a                   	pop    edx
c0010332:	0f b6 c0             	movzx  eax,al
c0010335:	5b                   	pop    ebx
c0010336:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001033b:	50                   	push   eax
c001033c:	53                   	push   ebx
c001033d:	e8 c4 ff ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010342:	5a                   	pop    edx
c0010343:	5a                   	pop    edx
c0010344:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001034a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001034e:	0f b7 d2             	movzx  edx,dx
c0010351:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010356:	39 0d 64 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa64,ecx
c001035c:	75 14                	jne    c0010372 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001035e:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010364:	85 c0                	test   eax,eax
c0010366:	74 0a                	je     c0010372 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010368:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001036c:	83 c4 08             	add    esp,0x8
c001036f:	5b                   	pop    ebx
c0010370:	ff e0                	jmp    eax
c0010372:	83 c4 08             	add    esp,0x8
c0010375:	5b                   	pop    ebx
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <VgaText::getCursorX()>:
c0010378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037c:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010382:	c3                   	ret    
c0010383:	90                   	nop

c0010384 <VgaText::getCursorY()>:
c0010384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010388:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001038e:	c3                   	ret    
c001038f:	90                   	nop

c0010390 <VgaText::setCursor(int, int)>:
c0010390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010398:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001039e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103a2:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00103a8:	e9 77 fd ff ff       	jmp    c0010124 <VgaText::updateCursor()>
c00103ad:	90                   	nop

c00103ae <VgaText::setCursorX(int)>:
c00103ae:	83 ec 10             	sub    esp,0x10
c00103b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103b5:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00103bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103bf:	50                   	push   eax
c00103c0:	e8 cb ff ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c00103c5:	83 c4 1c             	add    esp,0x1c
c00103c8:	c3                   	ret    
c00103c9:	90                   	nop

c00103ca <VgaText::setCursorY(int)>:
c00103ca:	83 ec 10             	sub    esp,0x10
c00103cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103d5:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00103db:	50                   	push   eax
c00103dc:	e8 af ff ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c00103e1:	83 c4 1c             	add    esp,0x1c
c00103e4:	c3                   	ret    
c00103e5:	90                   	nop

c00103e6 <VgaText::incrementCursor(bool)>:
c00103e6:	56                   	push   esi
c00103e7:	53                   	push   ebx
c00103e8:	51                   	push   ecx
c00103e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f1:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00103f7:	40                   	inc    eax
c00103f8:	83 f8 50             	cmp    eax,0x50
c00103fb:	74 08                	je     c0010405 <VgaText::incrementCursor(bool)+0x1f>
c00103fd:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010403:	eb 33                	jmp    c0010438 <VgaText::incrementCursor(bool)+0x52>
c0010405:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001040b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010415:	8d 50 01             	lea    edx,[eax+0x1]
c0010418:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001041e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010424:	75 12                	jne    c0010438 <VgaText::incrementCursor(bool)+0x52>
c0010426:	83 ec 0c             	sub    esp,0xc
c0010429:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001042f:	53                   	push   ebx
c0010430:	e8 3d fe ff ff       	call   c0010272 <VgaText::scrollScreen()>
c0010435:	83 c4 10             	add    esp,0x10
c0010438:	89 f0                	mov    eax,esi
c001043a:	84 c0                	test   al,al
c001043c:	74 0c                	je     c001044a <VgaText::incrementCursor(bool)+0x64>
c001043e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010442:	5a                   	pop    edx
c0010443:	5b                   	pop    ebx
c0010444:	5e                   	pop    esi
c0010445:	e9 da fc ff ff       	jmp    c0010124 <VgaText::updateCursor()>
c001044a:	58                   	pop    eax
c001044b:	5b                   	pop    ebx
c001044c:	5e                   	pop    esi
c001044d:	c3                   	ret    

c001044e <VgaText::updateRAMUsageDisplay(int)>:
c001044e:	53                   	push   ebx
c001044f:	bb 0a 00 00 00       	mov    ebx,0xa
c0010454:	6a 0f                	push   0xf
c0010456:	6a 00                	push   0x0
c0010458:	e8 03 fe ff ff       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c001045d:	5a                   	pop    edx
c001045e:	59                   	pop    ecx
c001045f:	0f b6 c8             	movzx  ecx,al
c0010462:	51                   	push   ecx
c0010463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010467:	99                   	cdq    
c0010468:	f7 fb                	idiv   ebx
c001046a:	89 d3                	mov    ebx,edx
c001046c:	83 c0 30             	add    eax,0x30
c001046f:	83 c3 30             	add    ebx,0x30
c0010472:	0f be c0             	movsx  eax,al
c0010475:	0f b6 db             	movzx  ebx,bl
c0010478:	50                   	push   eax
c0010479:	e8 88 fe ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c001047e:	5a                   	pop    edx
c001047f:	5a                   	pop    edx
c0010480:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010486:	51                   	push   ecx
c0010487:	53                   	push   ebx
c0010488:	e8 79 fe ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c001048d:	5b                   	pop    ebx
c001048e:	5a                   	pop    edx
c001048f:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010495:	51                   	push   ecx
c0010496:	6a 25                	push   0x25
c0010498:	e8 69 fe ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c001049d:	59                   	pop    ecx
c001049e:	5b                   	pop    ebx
c001049f:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00104a5:	5b                   	pop    ebx
c00104a6:	c3                   	ret    
c00104a7:	90                   	nop

c00104a8 <VgaText::updateDiskUsage()>:
c00104a8:	55                   	push   ebp
c00104a9:	bd 10 27 00 00       	mov    ebp,0x2710
c00104ae:	57                   	push   edi
c00104af:	56                   	push   esi
c00104b0:	53                   	push   ebx
c00104b1:	6a 0f                	push   0xf
c00104b3:	6a 00                	push   0x0
c00104b5:	e8 a6 fd ff ff       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c00104ba:	5a                   	pop    edx
c00104bb:	0f b6 d8             	movzx  ebx,al
c00104be:	59                   	pop    ecx
c00104bf:	a1 68 cc 02 c0       	mov    eax,ds:0xc002cc68
c00104c4:	53                   	push   ebx
c00104c5:	b9 0a 00 00 00       	mov    ecx,0xa
c00104ca:	99                   	cdq    
c00104cb:	f7 fd                	idiv   ebp
c00104cd:	99                   	cdq    
c00104ce:	f7 f9                	idiv   ecx
c00104d0:	8d 42 30             	lea    eax,[edx+0x30]
c00104d3:	0f b6 c0             	movzx  eax,al
c00104d6:	50                   	push   eax
c00104d7:	e8 2a fe ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c00104dc:	5e                   	pop    esi
c00104dd:	5f                   	pop    edi
c00104de:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00104e4:	bf e8 03 00 00       	mov    edi,0x3e8
c00104e9:	53                   	push   ebx
c00104ea:	a1 68 cc 02 c0       	mov    eax,ds:0xc002cc68
c00104ef:	99                   	cdq    
c00104f0:	f7 ff                	idiv   edi
c00104f2:	99                   	cdq    
c00104f3:	f7 f9                	idiv   ecx
c00104f5:	8d 42 30             	lea    eax,[edx+0x30]
c00104f8:	0f b6 c0             	movzx  eax,al
c00104fb:	50                   	push   eax
c00104fc:	e8 05 fe ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010501:	5a                   	pop    edx
c0010502:	5e                   	pop    esi
c0010503:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010509:	be 64 00 00 00       	mov    esi,0x64
c001050e:	53                   	push   ebx
c001050f:	a1 68 cc 02 c0       	mov    eax,ds:0xc002cc68
c0010514:	99                   	cdq    
c0010515:	f7 fe                	idiv   esi
c0010517:	99                   	cdq    
c0010518:	f7 f9                	idiv   ecx
c001051a:	8d 42 30             	lea    eax,[edx+0x30]
c001051d:	0f b6 c0             	movzx  eax,al
c0010520:	50                   	push   eax
c0010521:	e8 e0 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010526:	5a                   	pop    edx
c0010527:	5a                   	pop    edx
c0010528:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001052e:	53                   	push   ebx
c001052f:	a1 68 cc 02 c0       	mov    eax,ds:0xc002cc68
c0010534:	99                   	cdq    
c0010535:	f7 f9                	idiv   ecx
c0010537:	99                   	cdq    
c0010538:	f7 f9                	idiv   ecx
c001053a:	8d 42 30             	lea    eax,[edx+0x30]
c001053d:	0f b6 c0             	movzx  eax,al
c0010540:	50                   	push   eax
c0010541:	e8 c0 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010546:	5a                   	pop    edx
c0010547:	5a                   	pop    edx
c0010548:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001054e:	53                   	push   ebx
c001054f:	a1 68 cc 02 c0       	mov    eax,ds:0xc002cc68
c0010554:	99                   	cdq    
c0010555:	f7 f9                	idiv   ecx
c0010557:	8d 42 30             	lea    eax,[edx+0x30]
c001055a:	0f b6 c0             	movzx  eax,al
c001055d:	50                   	push   eax
c001055e:	e8 a3 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010563:	5a                   	pop    edx
c0010564:	5a                   	pop    edx
c0010565:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001056b:	53                   	push   ebx
c001056c:	a1 64 cc 02 c0       	mov    eax,ds:0xc002cc64
c0010571:	99                   	cdq    
c0010572:	f7 fd                	idiv   ebp
c0010574:	99                   	cdq    
c0010575:	f7 f9                	idiv   ecx
c0010577:	8d 42 30             	lea    eax,[edx+0x30]
c001057a:	0f b6 c0             	movzx  eax,al
c001057d:	50                   	push   eax
c001057e:	e8 83 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010583:	5d                   	pop    ebp
c0010584:	5a                   	pop    edx
c0010585:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001058b:	53                   	push   ebx
c001058c:	a1 64 cc 02 c0       	mov    eax,ds:0xc002cc64
c0010591:	99                   	cdq    
c0010592:	f7 ff                	idiv   edi
c0010594:	99                   	cdq    
c0010595:	f7 f9                	idiv   ecx
c0010597:	8d 42 30             	lea    eax,[edx+0x30]
c001059a:	0f b6 c0             	movzx  eax,al
c001059d:	50                   	push   eax
c001059e:	e8 63 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c00105a3:	5f                   	pop    edi
c00105a4:	5d                   	pop    ebp
c00105a5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00105ab:	53                   	push   ebx
c00105ac:	a1 64 cc 02 c0       	mov    eax,ds:0xc002cc64
c00105b1:	99                   	cdq    
c00105b2:	f7 fe                	idiv   esi
c00105b4:	99                   	cdq    
c00105b5:	f7 f9                	idiv   ecx
c00105b7:	8d 42 30             	lea    eax,[edx+0x30]
c00105ba:	0f b6 c0             	movzx  eax,al
c00105bd:	50                   	push   eax
c00105be:	e8 43 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c3:	5a                   	pop    edx
c00105c4:	5e                   	pop    esi
c00105c5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00105cb:	53                   	push   ebx
c00105cc:	a1 64 cc 02 c0       	mov    eax,ds:0xc002cc64
c00105d1:	99                   	cdq    
c00105d2:	f7 f9                	idiv   ecx
c00105d4:	99                   	cdq    
c00105d5:	f7 f9                	idiv   ecx
c00105d7:	8d 42 30             	lea    eax,[edx+0x30]
c00105da:	0f b6 c0             	movzx  eax,al
c00105dd:	50                   	push   eax
c00105de:	e8 23 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c00105e3:	5f                   	pop    edi
c00105e4:	5d                   	pop    ebp
c00105e5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00105eb:	53                   	push   ebx
c00105ec:	a1 64 cc 02 c0       	mov    eax,ds:0xc002cc64
c00105f1:	99                   	cdq    
c00105f2:	f7 f9                	idiv   ecx
c00105f4:	83 c2 30             	add    edx,0x30
c00105f7:	0f b6 d2             	movzx  edx,dl
c00105fa:	52                   	push   edx
c00105fb:	e8 06 fd ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010600:	5a                   	pop    edx
c0010601:	59                   	pop    ecx
c0010602:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010608:	5b                   	pop    ebx
c0010609:	5e                   	pop    esi
c001060a:	5f                   	pop    edi
c001060b:	5d                   	pop    ebp
c001060c:	c3                   	ret    
c001060d:	90                   	nop

c001060e <VgaText::updateTitle()>:
c001060e:	53                   	push   ebx
c001060f:	31 c0                	xor    eax,eax
c0010611:	83 ec 58             	sub    esp,0x58
c0010614:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010618:	89 e1                	mov    ecx,esp
c001061a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001061e:	40                   	inc    eax
c001061f:	83 f8 50             	cmp    eax,0x50
c0010622:	75 f6                	jne    c001061a <VgaText::updateTitle()+0xc>
c0010624:	31 c0                	xor    eax,eax
c0010626:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001062d:	84 db                	test   bl,bl
c001062f:	74 06                	je     c0010637 <VgaText::updateTitle()+0x29>
c0010631:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010634:	40                   	inc    eax
c0010635:	eb ef                	jmp    c0010626 <VgaText::updateTitle()+0x18>
c0010637:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001063d:	85 c0                	test   eax,eax
c001063f:	74 09                	je     c001064a <VgaText::updateTitle()+0x3c>
c0010641:	53                   	push   ebx
c0010642:	53                   	push   ebx
c0010643:	51                   	push   ecx
c0010644:	52                   	push   edx
c0010645:	ff d0                	call   eax
c0010647:	83 c4 10             	add    esp,0x10
c001064a:	e8 59 fe ff ff       	call   c00104a8 <VgaText::updateDiskUsage()>
c001064f:	83 c4 58             	add    esp,0x58
c0010652:	5b                   	pop    ebx
c0010653:	c3                   	ret    

c0010654 <VgaText::setTitleTextColour(VgaColour)>:
c0010654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001065c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010662:	eb aa                	jmp    c001060e <VgaText::updateTitle()>

c0010664 <VgaText::setTitleColour(VgaColour)>:
c0010664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010672:	eb 9a                	jmp    c001060e <VgaText::updateTitle()>

c0010674 <VgaText::setTitle(char*)>:
c0010674:	53                   	push   ebx
c0010675:	83 ec 10             	sub    esp,0x10
c0010678:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001067c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010680:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010686:	50                   	push   eax
c0010687:	e8 90 00 ff ff       	call   c000071c <strcpy>
c001068c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010690:	83 c4 18             	add    esp,0x18
c0010693:	5b                   	pop    ebx
c0010694:	e9 75 ff ff ff       	jmp    c001060e <VgaText::updateTitle()>
c0010699:	90                   	nop

c001069a <VgaText::decrementCursor(bool)>:
c001069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001069e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106a2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106a8:	85 c0                	test   eax,eax
c00106aa:	74 07                	je     c00106b3 <VgaText::decrementCursor(bool)+0x19>
c00106ac:	48                   	dec    eax
c00106ad:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106b3:	84 c9                	test   cl,cl
c00106b5:	74 09                	je     c00106c0 <VgaText::decrementCursor(bool)+0x26>
c00106b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106bb:	e9 64 fa ff ff       	jmp    c0010124 <VgaText::updateCursor()>
c00106c0:	c3                   	ret    
c00106c1:	90                   	nop

c00106c2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 08             	sub    esp,0x8
c00106c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106d2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00106d6:	3c 07                	cmp    al,0x7
c00106d8:	75 2a                	jne    c0010704 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00106da:	a1 0c ab 02 c0       	mov    eax,ds:0xc002ab0c
c00106df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106e7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106ef:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106fb:	83 c4 08             	add    esp,0x8
c00106fe:	5b                   	pop    ebx
c00106ff:	e9 3a 2d 00 00       	jmp    c001343e <Buzzer::beep(int, int, bool)>
c0010704:	3c 0d                	cmp    al,0xd
c0010706:	75 0c                	jne    c0010714 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010708:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010712:	eb 3b                	jmp    c001074f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010714:	3c 0a                	cmp    al,0xa
c0010716:	75 40                	jne    c0010758 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010718:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001071e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010728:	8d 50 01             	lea    edx,[eax+0x1]
c001072b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010731:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010737:	75 12                	jne    c001074b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010739:	83 ec 0c             	sub    esp,0xc
c001073c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010742:	53                   	push   ebx
c0010743:	e8 2a fb ff ff       	call   c0010272 <VgaText::scrollScreen()>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001074f:	83 c4 08             	add    esp,0x8
c0010752:	5b                   	pop    ebx
c0010753:	e9 cc f9 ff ff       	jmp    c0010124 <VgaText::updateCursor()>
c0010758:	3c 08                	cmp    al,0x8
c001075a:	75 31                	jne    c001078d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c001075c:	50                   	push   eax
c001075d:	50                   	push   eax
c001075e:	6a 01                	push   0x1
c0010760:	53                   	push   ebx
c0010761:	e8 34 ff ff ff       	call   c001069a <VgaText::decrementCursor(bool)>
c0010766:	5a                   	pop    edx
c0010767:	59                   	pop    ecx
c0010768:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001076e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010774:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001077a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010780:	6a 20                	push   0x20
c0010782:	53                   	push   ebx
c0010783:	e8 90 fb ff ff       	call   c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010788:	83 c4 28             	add    esp,0x28
c001078b:	5b                   	pop    ebx
c001078c:	c3                   	ret    
c001078d:	83 ec 08             	sub    esp,0x8
c0010790:	0f be c0             	movsx  eax,al
c0010793:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010799:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001079f:	51                   	push   ecx
c00107a0:	52                   	push   edx
c00107a1:	50                   	push   eax
c00107a2:	53                   	push   ebx
c00107a3:	e8 70 fb ff ff       	call   c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107a8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107ac:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107b4:	83 c4 28             	add    esp,0x28
c00107b7:	5b                   	pop    ebx
c00107b8:	e9 29 fc ff ff       	jmp    c00103e6 <VgaText::incrementCursor(bool)>
c00107bd:	90                   	nop

c00107be <VgaText::isShowingCursor()>:
c00107be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00107c8:	c3                   	ret    
c00107c9:	90                   	nop

c00107ca <VgaText::isBlinkDisabled()>:
c00107ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ce:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00107d4:	83 f0 01             	xor    eax,0x1
c00107d7:	c3                   	ret    

c00107d8 <VgaText::setCursorHeight(int)>:
c00107d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00107e6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00107ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107f1:	e9 48 f9 ff ff       	jmp    c001013e <VgaText::showCursor(bool)>

c00107f6 <VgaText::getCursorHeight()>:
c00107f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107fa:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010800:	c3                   	ret    

c0010801 <setActiveTerminal(VgaText*)>:
c0010801:	53                   	push   ebx
c0010802:	83 ec 08             	sub    esp,0x8
c0010805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010809:	85 db                	test   ebx,ebx
c001080b:	75 11                	jne    c001081e <setActiveTerminal(VgaText*)+0x1d>
c001080d:	c7 44 24 10 cc 71 02 c0 	mov    DWORD PTR [esp+0x10],0xc00271cc
c0010815:	83 c4 08             	add    esp,0x8
c0010818:	5b                   	pop    ebx
c0010819:	e9 e5 85 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>
c001081e:	50                   	push   eax
c001081f:	50                   	push   eax
c0010820:	53                   	push   ebx
c0010821:	68 da 71 02 c0       	push   0xc00271da
c0010826:	e8 14 1e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001082b:	a1 64 aa 02 c0       	mov    eax,ds:0xc002aa64
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	85 c0                	test   eax,eax
c0010835:	74 0c                	je     c0010843 <setActiveTerminal(VgaText*)+0x42>
c0010837:	83 ec 0c             	sub    esp,0xc
c001083a:	50                   	push   eax
c001083b:	e8 e4 f8 ff ff       	call   c0010124 <VgaText::updateCursor()>
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	89 1d 64 aa 02 c0    	mov    DWORD PTR ds:0xc002aa64,ebx
c0010849:	51                   	push   ecx
c001084a:	51                   	push   ecx
c001084b:	53                   	push   ebx
c001084c:	68 f2 71 02 c0       	push   0xc00271f2
c0010851:	e8 e9 1d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0010856:	83 c4 0c             	add    esp,0xc
c0010859:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001085f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010865:	53                   	push   ebx
c0010866:	e8 25 fb ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c001086b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001086e:	e8 57 ff ff ff       	call   c00107ca <VgaText::isBlinkDisabled()>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	59                   	pop    ecx
c0010878:	50                   	push   eax
c0010879:	53                   	push   ebx
c001087a:	e8 cf f8 ff ff       	call   c001014e <VgaText::disableBlink(bool)>
c001087f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010882:	e8 6f ff ff ff       	call   c00107f6 <VgaText::getCursorHeight()>
c0010887:	5a                   	pop    edx
c0010888:	59                   	pop    ecx
c0010889:	50                   	push   eax
c001088a:	53                   	push   ebx
c001088b:	e8 48 ff ff ff       	call   c00107d8 <VgaText::setCursorHeight(int)>
c0010890:	83 c4 10             	add    esp,0x10
c0010893:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001089a:	75 0a                	jne    c00108a6 <setActiveTerminal(VgaText*)+0xa5>
c001089c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108aa:	83 c4 08             	add    esp,0x8
c00108ad:	5b                   	pop    ebx
c00108ae:	e9 1d f8 ff ff       	jmp    c00100d0 <VgaText::load()>

c00108b3 <doTerminalCycle()>:
c00108b3:	83 ec 18             	sub    esp,0x18
c00108b6:	a1 60 aa 02 c0       	mov    eax,ds:0xc002aa60
c00108bb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00108c1:	50                   	push   eax
c00108c2:	a3 60 aa 02 c0       	mov    ds:0xc002aa60,eax
c00108c7:	e8 35 ff ff ff       	call   c0010801 <setActiveTerminal(VgaText*)>
c00108cc:	83 c4 1c             	add    esp,0x1c
c00108cf:	c3                   	ret    

c00108d0 <VgaText::doUpdate()>:
c00108d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00108da:	85 c0                	test   eax,eax
c00108dc:	74 02                	je     c00108e0 <VgaText::doUpdate()+0x10>
c00108de:	ff e0                	jmp    eax
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00108e2:	55                   	push   ebp
c00108e3:	57                   	push   edi
c00108e4:	56                   	push   esi
c00108e5:	53                   	push   ebx
c00108e6:	83 ec 1c             	sub    esp,0x1c
c00108e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00108ed:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108f2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00108f9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00108fc:	50                   	push   eax
c00108fd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010902:	50                   	push   eax
c0010903:	e8 58 f9 ff ff       	call   c0010260 <VgaText::combineColours(unsigned char, unsigned char)>
c0010908:	59                   	pop    ecx
c0010909:	0f b6 c0             	movzx  eax,al
c001090c:	5b                   	pop    ebx
c001090d:	31 c9                	xor    ecx,ecx
c001090f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010917:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001091b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010921:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010925:	0f b7 db             	movzx  ebx,bx
c0010928:	01 db                	add    ebx,ebx
c001092a:	01 fb                	add    ebx,edi
c001092c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001092f:	84 c0                	test   al,al
c0010931:	0f 84 38 01 00 00    	je     c0010a6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010937:	3c 0d                	cmp    al,0xd
c0010939:	75 0f                	jne    c001094a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001093b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010945:	e9 1f 01 00 00       	jmp    c0010a69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001094a:	3c 0a                	cmp    al,0xa
c001094c:	75 5b                	jne    c00109a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c001094e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010954:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001095e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010961:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010967:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c001096d:	75 12                	jne    c0010981 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c001096f:	83 ec 0c             	sub    esp,0xc
c0010972:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010978:	55                   	push   ebp
c0010979:	e8 f4 f8 ff ff       	call   c0010272 <VgaText::scrollScreen()>
c001097e:	83 c4 10             	add    esp,0x10
c0010981:	83 ec 0c             	sub    esp,0xc
c0010984:	55                   	push   ebp
c0010985:	e8 9a f7 ff ff       	call   c0010124 <VgaText::updateCursor()>
c001098a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010992:	83 c4 10             	add    esp,0x10
c0010995:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001099b:	31 c9                	xor    ecx,ecx
c001099d:	0f b7 db             	movzx  ebx,bx
c00109a0:	01 db                	add    ebx,ebx
c00109a2:	01 fb                	add    ebx,edi
c00109a4:	e9 c0 00 00 00       	jmp    c0010a69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109a9:	3c 08                	cmp    al,0x8
c00109ab:	75 4e                	jne    c00109fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109b1:	53                   	push   ebx
c00109b2:	53                   	push   ebx
c00109b3:	6a 01                	push   0x1
c00109b5:	55                   	push   ebp
c00109b6:	e8 df fc ff ff       	call   c001069a <VgaText::decrementCursor(bool)>
c00109bb:	58                   	pop    eax
c00109bc:	5a                   	pop    edx
c00109bd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00109c3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00109c9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00109cf:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00109d5:	6a 20                	push   0x20
c00109d7:	55                   	push   ebp
c00109d8:	e8 3b f9 ff ff       	call   c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109dd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109e5:	83 c4 20             	add    esp,0x20
c00109e8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109ee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109f2:	0f b7 db             	movzx  ebx,bx
c00109f5:	01 db                	add    ebx,ebx
c00109f7:	01 fb                	add    ebx,edi
c00109f9:	eb 6e                	jmp    c0010a69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109fb:	51                   	push   ecx
c00109fc:	51                   	push   ecx
c00109fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a01:	50                   	push   eax
c0010a02:	e8 ff f8 ff ff       	call   c0010306 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a0d:	39 2d 64 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa64,ebp
c0010a13:	75 2a                	jne    c0010a3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a15:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a1b:	85 c0                	test   eax,eax
c0010a1d:	74 20                	je     c0010a3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a1f:	52                   	push   edx
c0010a20:	52                   	push   edx
c0010a21:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a27:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a35:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a38:	51                   	push   ecx
c0010a39:	55                   	push   ebp
c0010a3a:	ff d0                	call   eax
c0010a3c:	83 c4 20             	add    esp,0x20
c0010a3f:	83 c3 02             	add    ebx,0x2
c0010a42:	50                   	push   eax
c0010a43:	50                   	push   eax
c0010a44:	6a 00                	push   0x0
c0010a46:	55                   	push   ebp
c0010a47:	e8 9a f9 ff ff       	call   c00103e6 <VgaText::incrementCursor(bool)>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a56:	75 0f                	jne    c0010a67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010a58:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a60:	0f b7 db             	movzx  ebx,bx
c0010a63:	01 db                	add    ebx,ebx
c0010a65:	01 fb                	add    ebx,edi
c0010a67:	b1 01                	mov    cl,0x1
c0010a69:	46                   	inc    esi
c0010a6a:	e9 bd fe ff ff       	jmp    c001092c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010a6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010a73:	83 ec 0c             	sub    esp,0xc
c0010a76:	55                   	push   ebp
c0010a77:	e8 a8 f6 ff ff       	call   c0010124 <VgaText::updateCursor()>
c0010a7c:	83 c4 10             	add    esp,0x10
c0010a7f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010a83:	84 c9                	test   cl,cl
c0010a85:	74 0c                	je     c0010a93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	55                   	push   ebp
c0010a8b:	e8 40 fe ff ff       	call   c00108d0 <VgaText::doUpdate()>
c0010a90:	83 c4 10             	add    esp,0x10
c0010a93:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010a9a:	83 c4 1c             	add    esp,0x1c
c0010a9d:	5b                   	pop    ebx
c0010a9e:	5e                   	pop    esi
c0010a9f:	5f                   	pop    edi
c0010aa0:	5d                   	pop    ebp
c0010aa1:	c3                   	ret    

c0010aa2 <VgaText::clearScreen()>:
c0010aa2:	57                   	push   edi
c0010aa3:	56                   	push   esi
c0010aa4:	31 f6                	xor    esi,esi
c0010aa6:	53                   	push   ebx
c0010aa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aab:	52                   	push   edx
c0010aac:	6a 00                	push   0x0
c0010aae:	6a 00                	push   0x0
c0010ab0:	53                   	push   ebx
c0010ab1:	e8 da f8 ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c0010ab6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ac6:	7e 26                	jle    c0010aee <VgaText::clearScreen()+0x4c>
c0010ac8:	31 ff                	xor    edi,edi
c0010aca:	50                   	push   eax
c0010acb:	50                   	push   eax
c0010acc:	56                   	push   esi
c0010acd:	57                   	push   edi
c0010ace:	47                   	inc    edi
c0010acf:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ad5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010adb:	6a 20                	push   0x20
c0010add:	53                   	push   ebx
c0010ade:	e8 35 f8 ff ff       	call   c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ae3:	83 c4 20             	add    esp,0x20
c0010ae6:	83 ff 50             	cmp    edi,0x50
c0010ae9:	75 df                	jne    c0010aca <VgaText::clearScreen()+0x28>
c0010aeb:	46                   	inc    esi
c0010aec:	eb d2                	jmp    c0010ac0 <VgaText::clearScreen()+0x1e>
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	53                   	push   ebx
c0010af2:	e8 d9 fd ff ff       	call   c00108d0 <VgaText::doUpdate()>
c0010af7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010afe:	83 c4 10             	add    esp,0x10
c0010b01:	5b                   	pop    ebx
c0010b02:	5e                   	pop    esi
c0010b03:	5f                   	pop    edi
c0010b04:	c3                   	ret    
c0010b05:	90                   	nop

c0010b06 <VgaText::putchar(char)>:
c0010b06:	56                   	push   esi
c0010b07:	53                   	push   ebx
c0010b08:	83 ec 14             	sub    esp,0x14
c0010b0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b13:	3c 5b                	cmp    al,0x5b
c0010b15:	75 21                	jne    c0010b38 <VgaText::putchar(char)+0x32>
c0010b17:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b1e:	74 28                	je     c0010b48 <VgaText::putchar(char)+0x42>
c0010b20:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b29:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b33:	e9 e2 00 00 00       	jmp    c0010c1a <VgaText::putchar(char)+0x114>
c0010b38:	3c 1b                	cmp    al,0x1b
c0010b3a:	75 0c                	jne    c0010b48 <VgaText::putchar(char)+0x42>
c0010b3c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b43:	e9 d2 00 00 00       	jmp    c0010c1a <VgaText::putchar(char)+0x114>
c0010b48:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b4e:	84 c9                	test   cl,cl
c0010b50:	0f 84 ab 00 00 00    	je     c0010c01 <VgaText::putchar(char)+0xfb>
c0010b56:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b59:	80 fa 3e             	cmp    dl,0x3e
c0010b5c:	0f 87 82 00 00 00    	ja     c0010be4 <VgaText::putchar(char)+0xde>
c0010b62:	3c 6d                	cmp    al,0x6d
c0010b64:	75 4d                	jne    c0010bb3 <VgaText::putchar(char)+0xad>
c0010b66:	31 f6                	xor    esi,esi
c0010b68:	31 d2                	xor    edx,edx
c0010b6a:	31 c0                	xor    eax,eax
c0010b6c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010b72:	7e 30                	jle    c0010ba4 <VgaText::putchar(char)+0x9e>
c0010b74:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010b7c:	80 fa 3b             	cmp    dl,0x3b
c0010b7f:	75 17                	jne    c0010b98 <VgaText::putchar(char)+0x92>
c0010b81:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b85:	50                   	push   eax
c0010b86:	53                   	push   ebx
c0010b87:	e8 fc f5 ff ff       	call   c0010188 <VgaText::doANSI_SGR(int)>
c0010b8c:	59                   	pop    ecx
c0010b8d:	31 d2                	xor    edx,edx
c0010b8f:	58                   	pop    eax
c0010b90:	31 c0                	xor    eax,eax
c0010b92:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b96:	eb 09                	jmp    c0010ba1 <VgaText::putchar(char)+0x9b>
c0010b98:	6b c0 0a             	imul   eax,eax,0xa
c0010b9b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b9f:	88 ca                	mov    dl,cl
c0010ba1:	46                   	inc    esi
c0010ba2:	eb c8                	jmp    c0010b6c <VgaText::putchar(char)+0x66>
c0010ba4:	84 d2                	test   dl,dl
c0010ba6:	74 31                	je     c0010bd9 <VgaText::putchar(char)+0xd3>
c0010ba8:	50                   	push   eax
c0010ba9:	53                   	push   ebx
c0010baa:	e8 d9 f5 ff ff       	call   c0010188 <VgaText::doANSI_SGR(int)>
c0010baf:	58                   	pop    eax
c0010bb0:	5a                   	pop    edx
c0010bb1:	eb 26                	jmp    c0010bd9 <VgaText::putchar(char)+0xd3>
c0010bb3:	3c 4a                	cmp    al,0x4a
c0010bb5:	75 22                	jne    c0010bd9 <VgaText::putchar(char)+0xd3>
c0010bb7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010bbe:	75 19                	jne    c0010bd9 <VgaText::putchar(char)+0xd3>
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	53                   	push   ebx
c0010bc4:	e8 d9 fe ff ff       	call   c0010aa2 <VgaText::clearScreen()>
c0010bc9:	83 c4 0c             	add    esp,0xc
c0010bcc:	6a 00                	push   0x0
c0010bce:	6a 00                	push   0x0
c0010bd0:	53                   	push   ebx
c0010bd1:	e8 ba f7 ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010be2:	eb 36                	jmp    c0010c1a <VgaText::putchar(char)+0x114>
c0010be4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010bea:	83 fa 0e             	cmp    edx,0xe
c0010bed:	7f 2b                	jg     c0010c1a <VgaText::putchar(char)+0x114>
c0010bef:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010bf2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010bf8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010bff:	eb 19                	jmp    c0010c1a <VgaText::putchar(char)+0x114>
c0010c01:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c07:	0f be c0             	movsx  eax,al
c0010c0a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c10:	50                   	push   eax
c0010c11:	53                   	push   ebx
c0010c12:	e8 ab fa ff ff       	call   c00106c2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	83 c4 14             	add    esp,0x14
c0010c1d:	5b                   	pop    ebx
c0010c1e:	5e                   	pop    esi
c0010c1f:	c3                   	ret    

c0010c20 <VgaText::puts(char const*)>:
c0010c20:	53                   	push   ebx
c0010c21:	83 ec 08             	sub    esp,0x8
c0010c24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c28:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c2b:	84 c0                	test   al,al
c0010c2d:	74 12                	je     c0010c41 <VgaText::puts(char const*)+0x21>
c0010c2f:	43                   	inc    ebx
c0010c30:	51                   	push   ecx
c0010c31:	51                   	push   ecx
c0010c32:	50                   	push   eax
c0010c33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c37:	e8 ca fe ff ff       	call   c0010b06 <VgaText::putchar(char)>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	eb e7                	jmp    c0010c28 <VgaText::puts(char const*)+0x8>
c0010c41:	83 c4 08             	add    esp,0x8
c0010c44:	5b                   	pop    ebx
c0010c45:	c3                   	ret    

c0010c46 <VgaText::putx(unsigned int)>:
c0010c46:	57                   	push   edi
c0010c47:	b9 11 00 00 00       	mov    ecx,0x11
c0010c4c:	56                   	push   esi
c0010c4d:	be 0e 72 02 c0       	mov    esi,0xc002720e
c0010c52:	53                   	push   ebx
c0010c53:	83 ec 20             	sub    esp,0x20
c0010c56:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c5a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c5e:	fc                   	cld    
c0010c5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c61:	be 08 00 00 00       	mov    esi,0x8
c0010c66:	50                   	push   eax
c0010c67:	50                   	push   eax
c0010c68:	89 d8                	mov    eax,ebx
c0010c6a:	c1 e3 04             	shl    ebx,0x4
c0010c6d:	c1 e8 1c             	shr    eax,0x1c
c0010c70:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c75:	50                   	push   eax
c0010c76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c7a:	e8 87 fe ff ff       	call   c0010b06 <VgaText::putchar(char)>
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	4e                   	dec    esi
c0010c83:	75 e1                	jne    c0010c66 <VgaText::putx(unsigned int)+0x20>
c0010c85:	83 c4 20             	add    esp,0x20
c0010c88:	5b                   	pop    ebx
c0010c89:	5e                   	pop    esi
c0010c8a:	5f                   	pop    edi
c0010c8b:	c3                   	ret    

c0010c8c <VgaText::VgaText(char const*)>:
c0010c8c:	57                   	push   edi
c0010c8d:	56                   	push   esi
c0010c8e:	53                   	push   ebx
c0010c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c93:	83 ec 08             	sub    esp,0x8
c0010c96:	6a 00                	push   0x0
c0010c98:	50                   	push   eax
c0010c99:	e8 6e 05 00 00       	call   c001120c <UnixFile::UnixFile(int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	ba 74 72 02 c0       	mov    edx,0xc0027274
c0010ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010caa:	89 10                	mov    DWORD PTR [eax],edx
c0010cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbe:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfe:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d09:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d14:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d1a:	bb 40 aa 02 c0       	mov    ebx,0xc002aa40
c0010d1f:	b8 08 00 00 00       	mov    eax,0x8
c0010d24:	fc                   	cld    
c0010d25:	89 d7                	mov    edi,edx
c0010d27:	89 de                	mov    esi,ebx
c0010d29:	89 c1                	mov    ecx,eax
c0010d2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d31:	05 1e 10 00 00       	add    eax,0x101e
c0010d36:	83 ec 08             	sub    esp,0x8
c0010d39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d3d:	50                   	push   eax
c0010d3e:	e8 d9 f9 fe ff       	call   c000071c <strcpy>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d58:	83 c0 0c             	add    eax,0xc
c0010d5b:	83 ec 04             	sub    esp,0x4
c0010d5e:	68 00 0f 00 00       	push   0xf00
c0010d63:	6a 00                	push   0x0
c0010d65:	50                   	push   eax
c0010d66:	e8 12 f9 fe ff       	call   c000067d <memset>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	83 ec 04             	sub    esp,0x4
c0010d71:	6a 00                	push   0x0
c0010d73:	6a 07                	push   0x7
c0010d75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d79:	e8 c2 f4 ff ff       	call   c0010240 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d7e:	83 c4 10             	add    esp,0x10
c0010d81:	83 ec 08             	sub    esp,0x8
c0010d84:	6a 02                	push   0x2
c0010d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d8a:	e8 49 fa ff ff       	call   c00107d8 <VgaText::setCursorHeight(int)>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	83 ec 04             	sub    esp,0x4
c0010d95:	6a 00                	push   0x0
c0010d97:	6a 00                	push   0x0
c0010d99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d9d:	e8 ee f5 ff ff       	call   c0010390 <VgaText::setCursor(int, int)>
c0010da2:	83 c4 10             	add    esp,0x10
c0010da5:	83 ec 08             	sub    esp,0x8
c0010da8:	6a 01                	push   0x1
c0010daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dae:	e8 8b f3 ff ff       	call   c001013e <VgaText::showCursor(bool)>
c0010db3:	83 c4 10             	add    esp,0x10
c0010db6:	83 ec 08             	sub    esp,0x8
c0010db9:	6a 01                	push   0x1
c0010dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dbf:	e8 8a f3 ff ff       	call   c001014e <VgaText::disableBlink(bool)>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	83 ec 0c             	sub    esp,0xc
c0010dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dce:	e8 cf fc ff ff       	call   c0010aa2 <VgaText::clearScreen()>
c0010dd3:	83 c4 10             	add    esp,0x10
c0010dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dda:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de5:	05 9e 10 00 00       	add    eax,0x109e
c0010dea:	83 ec 04             	sub    esp,0x4
c0010ded:	68 96 00 00 00       	push   0x96
c0010df2:	6a 00                	push   0x0
c0010df4:	50                   	push   eax
c0010df5:	e8 83 f8 fe ff       	call   c000067d <memset>
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e01:	05 34 11 00 00       	add    eax,0x1134
c0010e06:	83 ec 04             	sub    esp,0x4
c0010e09:	68 2c 01 00 00       	push   0x12c
c0010e0e:	6a 00                	push   0x0
c0010e10:	50                   	push   eax
c0010e11:	e8 67 f8 fe ff       	call   c000067d <memset>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	90                   	nop
c0010e1a:	5b                   	pop    ebx
c0010e1b:	5e                   	pop    esi
c0010e1c:	5f                   	pop    edi
c0010e1d:	c3                   	ret    

c0010e1e <VgaText::receiveKey(unsigned char)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e2d:	84 db                	test   bl,bl
c0010e2f:	0f 84 c9 00 00 00    	je     c0010efe <VgaText::receiveKey(unsigned char)+0xe0>
c0010e35:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e3b:	80 fb 08             	cmp    bl,0x8
c0010e3e:	75 2c                	jne    c0010e6c <VgaText::receiveKey(unsigned char)+0x4e>
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	57                   	push   edi
c0010e44:	e8 51 f8 fe ff       	call   c000069a <strlen>
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	85 c0                	test   eax,eax
c0010e4e:	74 41                	je     c0010e91 <VgaText::receiveKey(unsigned char)+0x73>
c0010e50:	50                   	push   eax
c0010e51:	50                   	push   eax
c0010e52:	6a 08                	push   0x8
c0010e54:	56                   	push   esi
c0010e55:	e8 ac fc ff ff       	call   c0010b06 <VgaText::putchar(char)>
c0010e5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e5d:	e8 38 f8 fe ff       	call   c000069a <strlen>
c0010e62:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010e6a:	eb 22                	jmp    c0010e8e <VgaText::receiveKey(unsigned char)+0x70>
c0010e6c:	0f be c3             	movsx  eax,bl
c0010e6f:	52                   	push   edx
c0010e70:	52                   	push   edx
c0010e71:	50                   	push   eax
c0010e72:	56                   	push   esi
c0010e73:	e8 8e fc ff ff       	call   c0010b06 <VgaText::putchar(char)>
c0010e78:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e81:	59                   	pop    ecx
c0010e82:	5d                   	pop    ebp
c0010e83:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e87:	50                   	push   eax
c0010e88:	57                   	push   edi
c0010e89:	e8 45 f9 fe ff       	call   c00007d3 <strcat>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010e98:	75 05                	jne    c0010e9f <VgaText::receiveKey(unsigned char)+0x81>
c0010e9a:	80 fb 0a             	cmp    bl,0xa
c0010e9d:	75 53                	jne    c0010ef2 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ea8:	53                   	push   ebx
c0010ea9:	e8 ec f7 fe ff       	call   c000069a <strlen>
c0010eae:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eb1:	89 c5                	mov    ebp,eax
c0010eb3:	e8 e2 f7 fe ff       	call   c000069a <strlen>
c0010eb8:	83 c4 10             	add    esp,0x10
c0010ebb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ebf:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ec4:	76 10                	jbe    c0010ed6 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	68 1f 72 02 c0       	push   0xc002721f
c0010ece:	e8 30 7f 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0010ed3:	83 c4 10             	add    esp,0x10
c0010ed6:	50                   	push   eax
c0010ed7:	50                   	push   eax
c0010ed8:	57                   	push   edi
c0010ed9:	53                   	push   ebx
c0010eda:	e8 f4 f8 fe ff       	call   c00007d3 <strcat>
c0010edf:	83 c4 0c             	add    esp,0xc
c0010ee2:	68 96 00 00 00       	push   0x96
c0010ee7:	6a 00                	push   0x0
c0010ee9:	57                   	push   edi
c0010eea:	e8 8e f7 fe ff       	call   c000067d <memset>
c0010eef:	83 c4 10             	add    esp,0x10
c0010ef2:	83 ec 0c             	sub    esp,0xc
c0010ef5:	56                   	push   esi
c0010ef6:	e8 d5 f9 ff ff       	call   c00108d0 <VgaText::doUpdate()>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	83 c4 1c             	add    esp,0x1c
c0010f01:	5b                   	pop    ebx
c0010f02:	5e                   	pop    esi
c0010f03:	5f                   	pop    edi
c0010f04:	5d                   	pop    ebp
c0010f05:	c3                   	ret    

c0010f06 <VgaText::write(unsigned long long, void*, int*)>:
c0010f06:	55                   	push   ebp
c0010f07:	57                   	push   edi
c0010f08:	56                   	push   esi
c0010f09:	53                   	push   ebx
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f11:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f19:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f20:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f23:	39 eb                	cmp    ebx,ebp
c0010f25:	74 13                	je     c0010f3a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f27:	43                   	inc    ebx
c0010f28:	50                   	push   eax
c0010f29:	50                   	push   eax
c0010f2a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f2e:	50                   	push   eax
c0010f2f:	56                   	push   esi
c0010f30:	e8 d1 fb ff ff       	call   c0010b06 <VgaText::putchar(char)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	eb e9                	jmp    c0010f23 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f44:	56                   	push   esi
c0010f45:	e8 86 f9 ff ff       	call   c00108d0 <VgaText::doUpdate()>
c0010f4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f4e:	89 38                	mov    DWORD PTR [eax],edi
c0010f50:	83 c4 1c             	add    esp,0x1c
c0010f53:	31 c0                	xor    eax,eax
c0010f55:	5b                   	pop    ebx
c0010f56:	5e                   	pop    esi
c0010f57:	5f                   	pop    edi
c0010f58:	5d                   	pop    ebp
c0010f59:	c3                   	ret    

c0010f5a <newTerminal(char*)>:
c0010f5a:	83 ec 28             	sub    esp,0x28
c0010f5d:	68 60 12 00 00       	push   0x1260
c0010f62:	e8 65 e5 ff ff       	call   c000f4cc <malloc>
c0010f67:	5a                   	pop    edx
c0010f68:	59                   	pop    ecx
c0010f69:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f6d:	50                   	push   eax
c0010f6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f72:	e8 15 fd ff ff       	call   c0010c8c <VgaText::VgaText(char const*)>
c0010f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f7b:	83 c4 2c             	add    esp,0x2c
c0010f7e:	c3                   	ret    
c0010f7f:	90                   	nop

c0010f80 <TSS::TSS()>:
c0010f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f8b:	90                   	nop
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop

c0010f8e <TSS::setESP(unsigned long)>:
c0010f8e:	55                   	push   ebp
c0010f8f:	89 e5                	mov    ebp,esp
c0010f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f9d:	90                   	nop
c0010f9e:	5d                   	pop    ebp
c0010f9f:	c3                   	ret    

c0010fa0 <TSS::flush()>:
c0010fa0:	55                   	push   ebp
c0010fa1:	89 e5                	mov    ebp,esp
c0010fa3:	83 ec 10             	sub    esp,0x10
c0010fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fab:	83 c8 03             	or     eax,0x3
c0010fae:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fb2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010fb6:	66 89 d0             	mov    ax,dx
c0010fb9:	0f 00 d8             	ltr    ax
c0010fbc:	90                   	nop
c0010fbd:	c9                   	leave  
c0010fbe:	c3                   	ret    
c0010fbf:	90                   	nop

c0010fc0 <TSS::setup(unsigned long, unsigned long)>:
c0010fc0:	55                   	push   ebp
c0010fc1:	89 e5                	mov    ebp,esp
c0010fc3:	83 ec 18             	sub    esp,0x18
c0010fc6:	83 ec 0c             	sub    esp,0xc
c0010fc9:	6a 68                	push   0x68
c0010fcb:	e8 fc e4 ff ff       	call   c000f4cc <malloc>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	89 c2                	mov    edx,eax
c0010fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe1:	83 ec 04             	sub    esp,0x4
c0010fe4:	6a 68                	push   0x68
c0010fe6:	6a 00                	push   0x0
c0010fe8:	50                   	push   eax
c0010fe9:	e8 8f f6 fe ff       	call   c000067d <memset>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011003:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011012:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001101b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011027:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001102d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011066:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011072:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011088:	0f 20 da             	mov    edx,cr3
c001108b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001108e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011091:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109a:	83 ec 08             	sub    esp,0x8
c001109d:	50                   	push   eax
c001109e:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a1:	50                   	push   eax
c00110a2:	e8 03 dc ff ff       	call   c000ecaa <GDTEntry::setBase(unsigned int)>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	83 ec 08             	sub    esp,0x8
c00110ad:	6a 68                	push   0x68
c00110af:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110b2:	50                   	push   eax
c00110b3:	e8 0e dc ff ff       	call   c000ecc6 <GDTEntry::setLimit(unsigned int)>
c00110b8:	83 c4 10             	add    esp,0x10
c00110bb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110bf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110c2:	83 e0 0f             	and    eax,0xf
c00110c5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110c8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110cb:	83 c8 40             	or     eax,0x40
c00110ce:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110d1:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00110d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110dc:	05 78 01 00 00       	add    eax,0x178
c00110e1:	83 ec 04             	sub    esp,0x4
c00110e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110e7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110ea:	50                   	push   eax
c00110eb:	e8 0a dc ff ff       	call   c000ecfa <GDT::addEntry(GDTEntry)>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	89 c2                	mov    edx,eax
c00110f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f8:	89 10                	mov    DWORD PTR [eax],edx
c00110fa:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00110ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011105:	05 78 01 00 00       	add    eax,0x178
c001110a:	83 ec 0c             	sub    esp,0xc
c001110d:	50                   	push   eax
c001110e:	e8 2b dc ff ff       	call   c000ed3e <GDT::flush()>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011119:	8b 00                	mov    eax,DWORD PTR [eax]
c001111b:	83 ec 08             	sub    esp,0x8
c001111e:	50                   	push   eax
c001111f:	68 88 72 02 c0       	push   0xc0027288
c0011124:	e8 16 15 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0011129:	83 c4 10             	add    esp,0x10
c001112c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011131:	c9                   	leave  
c0011132:	c3                   	ret    
c0011133:	90                   	nop

c0011134 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001113f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011144:	75 08                	jne    c001114e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011146:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001114c:	eb 38                	jmp    c0011186 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001114e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011153:	75 17                	jne    c001116c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001115a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001115d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011163:	8b 10                	mov    edx,DWORD PTR [eax]
c0011165:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011169:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001116c:	89 c1                	mov    ecx,eax
c001116e:	83 e1 fd             	and    ecx,0xfffffffd
c0011171:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011177:	74 cd                	je     c0011146 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011179:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001117e:	83 e0 ef             	and    eax,0xffffffef
c0011181:	83 f8 08             	cmp    eax,0x8
c0011184:	76 c0                	jbe    c0011146 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011186:	31 c0                	xor    eax,eax
c0011188:	c3                   	ret    
c0011189:	90                   	nop

c001118a <ReservedFilename::isAtty()>:
c001118a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001118e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011191:	31 c0                	xor    eax,eax
c0011193:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011199:	74 09                	je     c00111a4 <ReservedFilename::isAtty()+0x1a>
c001119b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111a1:	0f 94 c0             	sete   al
c00111a4:	c3                   	ret    
c00111a5:	90                   	nop

c00111a6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111b5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111ba:	75 08                	jne    c00111c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111bc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111c2:	eb 3d                	jmp    c0011201 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111c4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111c9:	75 17                	jne    c00111e2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111d3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00111db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111df:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111e7:	75 04                	jne    c00111ed <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111e9:	89 0a                	mov    DWORD PTR [edx],ecx
c00111eb:	eb 14                	jmp    c0011201 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111ed:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111f2:	74 c8                	je     c00111bc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111f4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111f9:	83 e0 ef             	and    eax,0xffffffef
c00111fc:	83 f8 08             	cmp    eax,0x8
c00111ff:	76 bb                	jbe    c00111bc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011201:	31 c0                	xor    eax,eax
c0011203:	c3                   	ret    

c0011204 <UnixFile::getFileDescriptor()>:
c0011204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001120b:	c3                   	ret    

c001120c <UnixFile::UnixFile(int)>:
c001120c:	53                   	push   ebx
c001120d:	83 ec 28             	sub    esp,0x28
c0011210:	ba 74 73 02 c0       	mov    edx,0xc0027374
c0011215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011219:	89 10                	mov    DWORD PTR [eax],edx
c001121b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011223:	0f 8f 8c 01 00 00    	jg     c00113b5 <UnixFile::UnixFile(int)+0x1a9>
c0011229:	a1 c0 99 02 c0       	mov    eax,ds:0xc00299c0
c001122e:	8d 50 01             	lea    edx,[eax+0x1]
c0011231:	89 15 c0 99 02 c0    	mov    DWORD PTR ds:0xc00299c0,edx
c0011237:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001123b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001123e:	83 ec 08             	sub    esp,0x8
c0011241:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011245:	68 f8 aa 02 c0       	push   0xc002aaf8
c001124a:	e8 a1 44 01 00       	call   c00256f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001124f:	83 c4 10             	add    esp,0x10
c0011252:	a0 f4 aa 02 c0       	mov    al,ds:0xc002aaf4
c0011257:	83 f0 01             	xor    eax,0x1
c001125a:	84 c0                	test   al,al
c001125c:	0f 84 54 01 00 00    	je     c00113b6 <UnixFile::UnixFile(int)+0x1aa>
c0011262:	c6 05 f4 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aaf4,0x1
c0011269:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011278:	e8 4f e2 ff ff       	call   c000f4cc <malloc>
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	89 c3                	mov    ebx,eax
c0011282:	83 ec 08             	sub    esp,0x8
c0011285:	68 03 ff ff 0f       	push   0xfffff03
c001128a:	53                   	push   ebx
c001128b:	e8 2c 01 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c0011290:	83 c4 10             	add    esp,0x10
c0011293:	89 1d ec aa 02 c0    	mov    DWORD PTR ds:0xc002aaec,ebx
c0011299:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112a1:	83 ec 0c             	sub    esp,0xc
c00112a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a8:	e8 1f e2 ff ff       	call   c000f4cc <malloc>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	89 c3                	mov    ebx,eax
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	68 01 ff ff 0f       	push   0xfffff01
c00112ba:	53                   	push   ebx
c00112bb:	e8 fc 00 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	89 1d f0 aa 02 c0    	mov    DWORD PTR ds:0xc002aaf0,ebx
c00112c9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112d8:	e8 ef e1 ff ff       	call   c000f4cc <malloc>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	89 c3                	mov    ebx,eax
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	68 00 ff ff 0f       	push   0xfffff00
c00112ea:	53                   	push   ebx
c00112eb:	e8 cc 00 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	89 1d e4 aa 02 c0    	mov    DWORD PTR ds:0xc002aae4,ebx
c00112f9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011301:	83 ec 0c             	sub    esp,0xc
c0011304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011308:	e8 bf e1 ff ff       	call   c000f4cc <malloc>
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	89 c3                	mov    ebx,eax
c0011312:	83 ec 08             	sub    esp,0x8
c0011315:	68 02 ff ff 0f       	push   0xfffff02
c001131a:	53                   	push   ebx
c001131b:	e8 9c 00 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	89 1d e8 aa 02 c0    	mov    DWORD PTR ds:0xc002aae8,ebx
c0011329:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011331:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011336:	7f 7e                	jg     c00113b6 <UnixFile::UnixFile(int)+0x1aa>
c0011338:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011340:	83 ec 0c             	sub    esp,0xc
c0011343:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011347:	e8 80 e1 ff ff       	call   c000f4cc <malloc>
c001134c:	83 c4 10             	add    esp,0x10
c001134f:	89 c3                	mov    ebx,eax
c0011351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011355:	05 10 ff ff 0f       	add    eax,0xfffff10
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	50                   	push   eax
c001135e:	53                   	push   ebx
c001135f:	e8 58 00 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001136b:	89 1c 85 c0 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5540],ebx
c0011372:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001137a:	83 ec 0c             	sub    esp,0xc
c001137d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011381:	e8 46 e1 ff ff       	call   c000f4cc <malloc>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	89 c3                	mov    ebx,eax
c001138b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001138f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	50                   	push   eax
c0011398:	53                   	push   ebx
c0011399:	e8 1e 00 00 00       	call   c00113bc <ReservedFilename::ReservedFilename(int)>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113a5:	89 1c 85 80 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5580],ebx
c00113ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113b0:	e9 7c ff ff ff       	jmp    c0011331 <UnixFile::UnixFile(int)+0x125>
c00113b5:	90                   	nop
c00113b6:	83 c4 28             	add    esp,0x28
c00113b9:	5b                   	pop    ebx
c00113ba:	c3                   	ret    
c00113bb:	90                   	nop

c00113bc <ReservedFilename::ReservedFilename(int)>:
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c3:	83 ec 08             	sub    esp,0x8
c00113c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ca:	50                   	push   eax
c00113cb:	e8 3c fe ff ff       	call   c001120c <UnixFile::UnixFile(int)>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	ba 90 73 02 c0       	mov    edx,0xc0027390
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	89 10                	mov    DWORD PTR [eax],edx
c00113de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113e6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113e9:	90                   	nop
c00113ea:	83 c4 0c             	add    esp,0xc
c00113ed:	c3                   	ret    

c00113ee <UnixFile::~UnixFile()>:
c00113ee:	83 ec 1c             	sub    esp,0x1c
c00113f1:	ba 74 73 02 c0       	mov    edx,0xc0027374
c00113f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113fa:	89 10                	mov    DWORD PTR [eax],edx
c00113fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011403:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011408:	7f 73                	jg     c001147d <UnixFile::~UnixFile()+0x8f>
c001140a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011412:	83 ec 0c             	sub    esp,0xc
c0011415:	68 f8 aa 02 c0       	push   0xc002aaf8
c001141a:	e8 a5 43 01 00       	call   c00257c4 <LinkedList<UnixFile>::getFirstElement()>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	68 f8 aa 02 c0       	push   0xc002aaf8
c001142e:	e8 99 43 01 00       	call   c00257cc <LinkedList<UnixFile>::removeFirst()>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001143a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001143e:	74 40                	je     c0011480 <UnixFile::~UnixFile()+0x92>
c0011440:	83 ec 08             	sub    esp,0x8
c0011443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011447:	68 f8 aa 02 c0       	push   0xc002aaf8
c001144c:	e8 9f 42 01 00       	call   c00256f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011458:	8d 50 01             	lea    edx,[eax+0x1]
c001145b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001145f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011464:	0f 94 c0             	sete   al
c0011467:	84 c0                	test   al,al
c0011469:	74 a7                	je     c0011412 <UnixFile::~UnixFile()+0x24>
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	68 4c 73 02 c0       	push   0xc002734c
c0011473:	e8 8b 79 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0011478:	83 c4 10             	add    esp,0x10
c001147b:	eb 95                	jmp    c0011412 <UnixFile::~UnixFile()+0x24>
c001147d:	90                   	nop
c001147e:	eb 01                	jmp    c0011481 <UnixFile::~UnixFile()+0x93>
c0011480:	90                   	nop
c0011481:	90                   	nop
c0011482:	83 c4 1c             	add    esp,0x1c
c0011485:	c3                   	ret    

c0011486 <UnixFile::~UnixFile()>:
c0011486:	83 ec 0c             	sub    esp,0xc
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011490:	e8 59 ff ff ff       	call   c00113ee <UnixFile::~UnixFile()>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	83 ec 08             	sub    esp,0x8
c001149b:	6a 0c                	push   0xc
c001149d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a1:	e8 b9 10 00 00       	call   c001255f <operator delete(void*, unsigned long)>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	83 c4 0c             	add    esp,0xc
c00114ac:	c3                   	ret    
c00114ad:	90                   	nop

c00114ae <ReservedFilename::~ReservedFilename()>:
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	ba 90 73 02 c0       	mov    edx,0xc0027390
c00114b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ba:	89 10                	mov    DWORD PTR [eax],edx
c00114bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	50                   	push   eax
c00114c4:	e8 25 ff ff ff       	call   c00113ee <UnixFile::~UnixFile()>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	90                   	nop
c00114cd:	83 c4 0c             	add    esp,0xc
c00114d0:	c3                   	ret    
c00114d1:	90                   	nop

c00114d2 <ReservedFilename::~ReservedFilename()>:
c00114d2:	83 ec 0c             	sub    esp,0xc
c00114d5:	83 ec 0c             	sub    esp,0xc
c00114d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114dc:	e8 cd ff ff ff       	call   c00114ae <ReservedFilename::~ReservedFilename()>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	6a 0c                	push   0xc
c00114e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ed:	e8 6d 10 00 00       	call   c001255f <operator delete(void*, unsigned long)>
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	83 c4 0c             	add    esp,0xc
c00114f8:	c3                   	ret    

c00114f9 <getFromFileDescriptor(int)>:
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011501:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011507:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001150d:	7f 2c                	jg     c001153b <getFromFileDescriptor(int)+0x42>
c001150f:	83 ec 0c             	sub    esp,0xc
c0011512:	68 f8 aa 02 c0       	push   0xc002aaf8
c0011517:	e8 a8 42 01 00       	call   c00257c4 <LinkedList<UnixFile>::getFirstElement()>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	85 c0                	test   eax,eax
c0011521:	75 04                	jne    c0011527 <getFromFileDescriptor(int)+0x2e>
c0011523:	31 c0                	xor    eax,eax
c0011525:	eb 6e                	jmp    c0011595 <getFromFileDescriptor(int)+0x9c>
c0011527:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001152a:	74 69                	je     c0011595 <getFromFileDescriptor(int)+0x9c>
c001152c:	52                   	push   edx
c001152d:	52                   	push   edx
c001152e:	50                   	push   eax
c001152f:	68 f8 aa 02 c0       	push   0xc002aaf8
c0011534:	e8 35 43 01 00       	call   c002586e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011539:	eb e1                	jmp    c001151c <getFromFileDescriptor(int)+0x23>
c001153b:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0011540:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011546:	74 4d                	je     c0011595 <getFromFileDescriptor(int)+0x9c>
c0011548:	a1 f0 aa 02 c0       	mov    eax,ds:0xc002aaf0
c001154d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011553:	74 40                	je     c0011595 <getFromFileDescriptor(int)+0x9c>
c0011555:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c001155a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011560:	74 33                	je     c0011595 <getFromFileDescriptor(int)+0x9c>
c0011562:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0011567:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001156d:	74 26                	je     c0011595 <getFromFileDescriptor(int)+0x9c>
c001156f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011575:	83 f8 08             	cmp    eax,0x8
c0011578:	77 09                	ja     c0011583 <getFromFileDescriptor(int)+0x8a>
c001157a:	8b 04 85 c0 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5540]
c0011581:	eb 12                	jmp    c0011595 <getFromFileDescriptor(int)+0x9c>
c0011583:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011589:	83 fb 08             	cmp    ebx,0x8
c001158c:	77 95                	ja     c0011523 <getFromFileDescriptor(int)+0x2a>
c001158e:	8b 04 9d 80 aa 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5580]
c0011595:	83 c4 08             	add    esp,0x8
c0011598:	5b                   	pop    ebx
c0011599:	c3                   	ret    

c001159a <__static_initialization_and_destruction_0(int, int)>:
c001159a:	83 ec 0c             	sub    esp,0xc
c001159d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115a2:	75 34                	jne    c00115d8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115a4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115ac:	75 2a                	jne    c00115d8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	68 f8 aa 02 c0       	push   0xc002aaf8
c00115b6:	e8 dd 40 01 00       	call   c0025698 <LinkedList<UnixFile>::LinkedList()>
c00115bb:	83 c4 10             	add    esp,0x10
c00115be:	83 ec 04             	sub    esp,0x4
c00115c1:	68 44 99 02 c0       	push   0xc0029944
c00115c6:	68 f8 aa 02 c0       	push   0xc002aaf8
c00115cb:	68 96 56 02 c0       	push   0xc0025696
c00115d0:	e8 04 0f 00 00       	call   c00124d9 <__cxa_atexit>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	90                   	nop
c00115d9:	83 c4 0c             	add    esp,0xc
c00115dc:	c3                   	ret    

c00115dd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115dd:	83 ec 0c             	sub    esp,0xc
c00115e0:	83 ec 08             	sub    esp,0x8
c00115e3:	68 ff ff 00 00       	push   0xffff
c00115e8:	6a 01                	push   0x1
c00115ea:	e8 ab ff ff ff       	call   c001159a <__static_initialization_and_destruction_0(int, int)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	83 c4 0c             	add    esp,0xc
c00115f5:	c3                   	ret    

c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115f6:	53                   	push   ebx
c00115f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00115ff:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011605:	89 c8                	mov    eax,ecx
c0011607:	d1 e8                	shr    eax,1
c0011609:	03 05 c8 99 02 c0    	add    eax,DWORD PTR ds:0xc00299c8
c001160f:	83 e1 01             	and    ecx,0x1
c0011612:	8a 10                	mov    dl,BYTE PTR [eax]
c0011614:	75 09                	jne    c001161f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011616:	83 e2 f0             	and    edx,0xfffffff0
c0011619:	09 da                	or     edx,ebx
c001161b:	88 10                	mov    BYTE PTR [eax],dl
c001161d:	5b                   	pop    ebx
c001161e:	c3                   	ret    
c001161f:	c1 e3 04             	shl    ebx,0x4
c0011622:	83 e2 0f             	and    edx,0xf
c0011625:	09 da                	or     edx,ebx
c0011627:	88 10                	mov    BYTE PTR [eax],dl
c0011629:	5b                   	pop    ebx
c001162a:	c3                   	ret    

c001162b <Virt::getPageState(unsigned long)>:
c001162b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162f:	8b 0d c8 99 02 c0    	mov    ecx,DWORD PTR ds:0xc00299c8
c0011635:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001163b:	89 d0                	mov    eax,edx
c001163d:	d1 e8                	shr    eax,1
c001163f:	83 e2 01             	and    edx,0x1
c0011642:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011645:	75 04                	jne    c001164b <Virt::getPageState(unsigned long)+0x20>
c0011647:	83 e0 0f             	and    eax,0xf
c001164a:	c3                   	ret    
c001164b:	c0 e8 04             	shr    al,0x4
c001164e:	c3                   	ret    

c001164f <Virt::allocateKernelVirtualPages(int)>:
c001164f:	55                   	push   ebp
c0011650:	31 ed                	xor    ebp,ebp
c0011652:	57                   	push   edi
c0011653:	56                   	push   esi
c0011654:	53                   	push   ebx
c0011655:	31 db                	xor    ebx,ebx
c0011657:	83 ec 1c             	sub    esp,0x1c
c001165a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001165e:	8b 3d c4 99 02 c0    	mov    edi,DWORD PTR ds:0xc00299c4
c0011664:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011669:	57                   	push   edi
c001166a:	e8 bc ff ff ff       	call   c001162b <Virt::getPageState(unsigned long)>
c001166f:	5a                   	pop    edx
c0011670:	84 c0                	test   al,al
c0011672:	75 3a                	jne    c00116ae <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011674:	85 db                	test   ebx,ebx
c0011676:	75 02                	jne    c001167a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011678:	89 fd                	mov    ebp,edi
c001167a:	43                   	inc    ebx
c001167b:	39 f3                	cmp    ebx,esi
c001167d:	74 5a                	je     c00116d9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001167f:	47                   	inc    edi
c0011680:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011686:	76 31                	jbe    c00116b9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011688:	c7 05 c4 99 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00299c4,0xc8000
c0011692:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011697:	75 28                	jne    c00116c1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011699:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001169e:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116a3:	57                   	push   edi
c00116a4:	e8 82 ff ff ff       	call   c001162b <Virt::getPageState(unsigned long)>
c00116a9:	5a                   	pop    edx
c00116aa:	84 c0                	test   al,al
c00116ac:	74 c6                	je     c0011674 <Virt::allocateKernelVirtualPages(int)+0x25>
c00116ae:	31 db                	xor    ebx,ebx
c00116b0:	47                   	inc    edi
c00116b1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116b7:	77 cf                	ja     c0011688 <Virt::allocateKernelVirtualPages(int)+0x39>
c00116b9:	89 3d c4 99 02 c0    	mov    DWORD PTR ds:0xc00299c4,edi
c00116bf:	eb a8                	jmp    c0011669 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	68 a4 73 02 c0       	push   0xc00273a4
c00116c9:	e8 35 77 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00116ce:	8b 3d c4 99 02 c0    	mov    edi,DWORD PTR ds:0xc00299c4
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	eb 90                	jmp    c0011669 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116d9:	89 2d c4 99 02 c0    	mov    DWORD PTR ds:0xc00299c4,ebp
c00116df:	4b                   	dec    ebx
c00116e0:	74 5f                	je     c0011741 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116e2:	85 f6                	test   esi,esi
c00116e4:	74 3d                	je     c0011723 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116e6:	89 e8                	mov    eax,ebp
c00116e8:	31 db                	xor    ebx,ebx
c00116ea:	8d 7e ff             	lea    edi,[esi-0x1]
c00116ed:	eb 14                	jmp    c0011703 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116ef:	6a 01                	push   0x1
c00116f1:	43                   	inc    ebx
c00116f2:	50                   	push   eax
c00116f3:	e8 fe fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f8:	58                   	pop    eax
c00116f9:	39 f3                	cmp    ebx,esi
c00116fb:	5a                   	pop    edx
c00116fc:	74 25                	je     c0011723 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116fe:	a1 c4 99 02 c0       	mov    eax,ds:0xc00299c4
c0011703:	8d 50 01             	lea    edx,[eax+0x1]
c0011706:	85 db                	test   ebx,ebx
c0011708:	89 15 c4 99 02 c0    	mov    DWORD PTR ds:0xc00299c4,edx
c001170e:	74 20                	je     c0011730 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011710:	39 df                	cmp    edi,ebx
c0011712:	75 db                	jne    c00116ef <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011714:	6a 03                	push   0x3
c0011716:	43                   	inc    ebx
c0011717:	50                   	push   eax
c0011718:	e8 d9 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001171d:	59                   	pop    ecx
c001171e:	39 f3                	cmp    ebx,esi
c0011720:	58                   	pop    eax
c0011721:	75 db                	jne    c00116fe <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011723:	83 c4 1c             	add    esp,0x1c
c0011726:	89 e8                	mov    eax,ebp
c0011728:	5b                   	pop    ebx
c0011729:	c1 e0 0c             	shl    eax,0xc
c001172c:	5e                   	pop    esi
c001172d:	5f                   	pop    edi
c001172e:	5d                   	pop    ebp
c001172f:	c3                   	ret    
c0011730:	6a 02                	push   0x2
c0011732:	bb 01 00 00 00       	mov    ebx,0x1
c0011737:	50                   	push   eax
c0011738:	e8 b9 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001173d:	58                   	pop    eax
c001173e:	5a                   	pop    edx
c001173f:	eb bd                	jmp    c00116fe <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011741:	6a 04                	push   0x4
c0011743:	8d 45 01             	lea    eax,[ebp+0x1]
c0011746:	55                   	push   ebp
c0011747:	a3 c4 99 02 c0       	mov    ds:0xc00299c4,eax
c001174c:	e8 a5 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011751:	59                   	pop    ecx
c0011752:	89 e8                	mov    eax,ebp
c0011754:	5b                   	pop    ebx
c0011755:	c1 e0 0c             	shl    eax,0xc
c0011758:	83 c4 1c             	add    esp,0x1c
c001175b:	5b                   	pop    ebx
c001175c:	5e                   	pop    esi
c001175d:	5f                   	pop    edi
c001175e:	5d                   	pop    ebp
c001175f:	c3                   	ret    

c0011760 <Virt::virtualMemorySetup()>:
c0011760:	53                   	push   ebx
c0011761:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011766:	83 ec 08             	sub    esp,0x8
c0011769:	6a 0f                	push   0xf
c001176b:	53                   	push   ebx
c001176c:	43                   	inc    ebx
c001176d:	e8 84 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011772:	59                   	pop    ecx
c0011773:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011779:	58                   	pop    eax
c001177a:	75 ed                	jne    c0011769 <Virt::virtualMemorySetup()+0x9>
c001177c:	83 ec 08             	sub    esp,0x8
c001177f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011784:	68 00 00 00 c8       	push   0xc8000000
c0011789:	68 2b 75 02 c0       	push   0xc002752b
c001178e:	e8 ac 0e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0011793:	58                   	pop    eax
c0011794:	5a                   	pop    edx
c0011795:	68 00 f0 ff ef       	push   0xeffff000
c001179a:	68 3f 75 02 c0       	push   0xc002753f
c001179f:	e8 9b 0e 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	83 ec 08             	sub    esp,0x8
c00117aa:	6a 00                	push   0x0
c00117ac:	53                   	push   ebx
c00117ad:	43                   	inc    ebx
c00117ae:	e8 43 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117bc:	75 e9                	jne    c00117a7 <Virt::virtualMemorySetup()+0x47>
c00117be:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117c3:	83 ec 08             	sub    esp,0x8
c00117c6:	6a 0f                	push   0xf
c00117c8:	53                   	push   ebx
c00117c9:	43                   	inc    ebx
c00117ca:	e8 27 fe ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117cf:	83 c4 10             	add    esp,0x10
c00117d2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117d8:	75 e9                	jne    c00117c3 <Virt::virtualMemorySetup()+0x63>
c00117da:	83 c4 08             	add    esp,0x8
c00117dd:	5b                   	pop    ebx
c00117de:	c3                   	ret    

c00117df <Virt::getAKernelVAS()>:
c00117df:	a1 04 ab 02 c0       	mov    eax,ds:0xc002ab04
c00117e4:	c3                   	ret    

c00117e5 <Virt::setupPageSwapping(int)>:
c00117e5:	57                   	push   edi
c00117e6:	56                   	push   esi
c00117e7:	53                   	push   ebx
c00117e8:	83 ec 1c             	sub    esp,0x1c
c00117eb:	68 14 01 00 00       	push   0x114
c00117f0:	e8 d7 dc ff ff       	call   c000f4cc <malloc>
c00117f5:	83 c4 0c             	add    esp,0xc
c00117f8:	89 c6                	mov    esi,eax
c00117fa:	ff 35 b4 be 02 c0    	push   DWORD PTR ds:0xc002beb4
c0011800:	68 53 75 02 c0       	push   0xc0027553
c0011805:	50                   	push   eax
c0011806:	e8 63 13 00 00       	call   c0012b6e <File::File(char const*, Process*)>
c001180b:	89 34 24             	mov    DWORD PTR [esp],esi
c001180e:	e8 37 15 00 00       	call   c0012d4a <File::unlink()>
c0011813:	58                   	pop    eax
c0011814:	5a                   	pop    edx
c0011815:	6a 12                	push   0x12
c0011817:	56                   	push   esi
c0011818:	e8 b5 13 00 00       	call   c0012bd2 <File::open(FileOpenMode)>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	85 c0                	test   eax,eax
c0011822:	0f 85 ca 00 00 00    	jne    c00118f2 <Virt::setupPageSwapping(int)+0x10d>
c0011828:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001182c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011834:	c1 e3 08             	shl    ebx,0x8
c0011837:	83 ec 0c             	sub    esp,0xc
c001183a:	68 00 00 01 00       	push   0x10000
c001183f:	e8 88 dc ff ff       	call   c000f4cc <malloc>
c0011844:	83 c4 0c             	add    esp,0xc
c0011847:	89 c7                	mov    edi,eax
c0011849:	68 00 00 01 00       	push   0x10000
c001184e:	6a 00                	push   0x0
c0011850:	50                   	push   eax
c0011851:	e8 27 ee fe ff       	call   c000067d <memset>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	85 db                	test   ebx,ebx
c001185b:	79 03                	jns    c0011860 <Virt::setupPageSwapping(int)+0x7b>
c001185d:	83 c3 0f             	add    ebx,0xf
c0011860:	c1 fb 04             	sar    ebx,0x4
c0011863:	4b                   	dec    ebx
c0011864:	83 fb ff             	cmp    ebx,0xffffffff
c0011867:	74 4b                	je     c00118b4 <Virt::setupPageSwapping(int)+0xcf>
c0011869:	83 ec 0c             	sub    esp,0xc
c001186c:	8b 06                	mov    eax,DWORD PTR [esi]
c001186e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011872:	52                   	push   edx
c0011873:	57                   	push   edi
c0011874:	6a 00                	push   0x0
c0011876:	68 00 00 01 00       	push   0x10000
c001187b:	56                   	push   esi
c001187c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001187f:	83 c4 20             	add    esp,0x20
c0011882:	85 c0                	test   eax,eax
c0011884:	75 59                	jne    c00118df <Virt::setupPageSwapping(int)+0xfa>
c0011886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001188a:	3d 00 00 01 00       	cmp    eax,0x10000
c001188f:	74 d2                	je     c0011863 <Virt::setupPageSwapping(int)+0x7e>
c0011891:	83 ec 08             	sub    esp,0x8
c0011894:	4b                   	dec    ebx
c0011895:	50                   	push   eax
c0011896:	68 a6 75 02 c0       	push   0xc00275a6
c001189b:	e8 9f 0d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00118a0:	c7 04 24 af 75 02 c0 	mov    DWORD PTR [esp],0xc00275af
c00118a7:	e8 57 75 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	83 fb ff             	cmp    ebx,0xffffffff
c00118b2:	75 b5                	jne    c0011869 <Virt::setupPageSwapping(int)+0x84>
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	56                   	push   esi
c00118b8:	e8 73 13 00 00       	call   c0012c30 <File::close()>
c00118bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118c0:	e8 27 dc ff ff       	call   c000f4ec <rfree>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	85 f6                	test   esi,esi
c00118ca:	74 0c                	je     c00118d8 <Virt::setupPageSwapping(int)+0xf3>
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00118d1:	56                   	push   esi
c00118d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118d5:	83 c4 10             	add    esp,0x10
c00118d8:	83 c4 10             	add    esp,0x10
c00118db:	5b                   	pop    ebx
c00118dc:	5e                   	pop    esi
c00118dd:	5f                   	pop    edi
c00118de:	c3                   	ret    
c00118df:	83 ec 08             	sub    esp,0x8
c00118e2:	50                   	push   eax
c00118e3:	68 8e 75 02 c0       	push   0xc002758e
c00118e8:	e8 52 0d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	eb 94                	jmp    c0011886 <Virt::setupPageSwapping(int)+0xa1>
c00118f2:	83 ec 08             	sub    esp,0x8
c00118f5:	50                   	push   eax
c00118f6:	68 6a 75 02 c0       	push   0xc002756a
c00118fb:	e8 3f 0d 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0011900:	c7 04 24 73 75 02 c0 	mov    DWORD PTR [esp],0xc0027573
c0011907:	e8 f7 74 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	e9 14 ff ff ff       	jmp    c0011828 <Virt::setupPageSwapping(int)+0x43>

c0011914 <VAS::VAS()>:
c0011914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011918:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001191f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011923:	a3 04 ab 02 c0       	mov    ds:0xc002ab04,eax
c0011928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011942:	90                   	nop
c0011943:	c3                   	ret    

c0011944 <VAS::VAS(VAS*)>:
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011952:	83 ec 0c             	sub    esp,0xc
c0011955:	68 c4 73 02 c0       	push   0xc00273c4
c001195a:	e8 a4 74 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	90                   	nop
c0011963:	83 c4 0c             	add    esp,0xc
c0011966:	c3                   	ret    
c0011967:	90                   	nop

c0011968 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001196c:	89 c2                	mov    edx,eax
c001196e:	c1 e8 0a             	shr    eax,0xa
c0011971:	c1 ea 16             	shr    edx,0x16
c0011974:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011979:	19 c9                	sbb    ecx,ecx
c001197b:	c1 e2 0c             	shl    edx,0xc
c001197e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011984:	25 fc 0f 00 00       	and    eax,0xffc
c0011989:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011990:	01 d0                	add    eax,edx
c0011992:	c3                   	ret    
c0011993:	90                   	nop

c0011994 <VAS::getPageTableEntry(unsigned long)>:
c0011994:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011998:	89 ca                	mov    edx,ecx
c001199a:	c1 e9 0a             	shr    ecx,0xa
c001199d:	c1 ea 16             	shr    edx,0x16
c00119a0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119a6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119ac:	c1 e0 0c             	shl    eax,0xc
c00119af:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119b2:	c3                   	ret    

c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119b3:	57                   	push   edi
c00119b4:	56                   	push   esi
c00119b5:	be 01 00 00 00       	mov    esi,0x1
c00119ba:	53                   	push   ebx
c00119bb:	83 ec 10             	sub    esp,0x10
c00119be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119c2:	c1 eb 0c             	shr    ebx,0xc
c00119c5:	eb 3f                	jmp    c0011a06 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119c7:	e8 13 fe ff ff       	call   c00117df <Virt::getAKernelVAS()>
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	57                   	push   edi
c00119d0:	50                   	push   eax
c00119d1:	e8 be ff ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c00119d6:	83 c4 10             	add    esp,0x10
c00119d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00119db:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119df:	f6 c4 04             	test   ah,0x4
c00119e2:	75 5f                	jne    c0011a43 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119e4:	80 fa 04             	cmp    dl,0x4
c00119e7:	74 78                	je     c0011a61 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119e9:	80 fa 02             	cmp    dl,0x2
c00119ec:	0f 84 88 00 00 00    	je     c0011a7a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119f2:	80 fa 03             	cmp    dl,0x3
c00119f5:	0f 84 ad 00 00 00    	je     c0011aa8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119fb:	fe ca                	dec    dl
c00119fd:	0f 84 92 00 00 00    	je     c0011a95 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a03:	43                   	inc    ebx
c0011a04:	31 f6                	xor    esi,esi
c0011a06:	53                   	push   ebx
c0011a07:	e8 1f fc ff ff       	call   c001162b <Virt::getPageState(unsigned long)>
c0011a0c:	5f                   	pop    edi
c0011a0d:	89 df                	mov    edi,ebx
c0011a0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a13:	c1 e7 0c             	shl    edi,0xc
c0011a16:	84 c0                	test   al,al
c0011a18:	75 ad                	jne    c00119c7 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	68 b5 75 02 c0       	push   0xc00275b5
c0011a22:	e8 dc 73 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0011a27:	e8 b3 fd ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0011a2c:	5a                   	pop    edx
c0011a2d:	59                   	pop    ecx
c0011a2e:	57                   	push   edi
c0011a2f:	50                   	push   eax
c0011a30:	e8 5f ff ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a3a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a3e:	f6 c4 04             	test   ah,0x4
c0011a41:	74 c0                	je     c0011a03 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a43:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a47:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a4c:	83 ec 0c             	sub    esp,0xc
c0011a4f:	50                   	push   eax
c0011a50:	e8 97 df ff ff       	call   c000f9ec <Phys::freePage(unsigned long)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a5c:	80 fa 04             	cmp    dl,0x4
c0011a5f:	75 88                	jne    c00119e9 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a61:	89 f0                	mov    eax,esi
c0011a63:	84 c0                	test   al,al
c0011a65:	75 47                	jne    c0011aae <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a67:	c7 44 24 20 e8 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc00273e8
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	5b                   	pop    ebx
c0011a73:	5e                   	pop    esi
c0011a74:	5f                   	pop    edi
c0011a75:	e9 89 73 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>
c0011a7a:	89 f0                	mov    eax,esi
c0011a7c:	84 c0                	test   al,al
c0011a7e:	75 15                	jne    c0011a95 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	68 d1 75 02 c0       	push   0xc00275d1
c0011a88:	e8 76 73 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0011a8d:	83 c4 10             	add    esp,0x10
c0011a90:	e9 6e ff ff ff       	jmp    c0011a03 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a95:	83 ec 08             	sub    esp,0x8
c0011a98:	6a 00                	push   0x0
c0011a9a:	53                   	push   ebx
c0011a9b:	e8 56 fb ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	e9 5b ff ff ff       	jmp    c0011a03 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aa8:	89 f0                	mov    eax,esi
c0011aaa:	84 c0                	test   al,al
c0011aac:	75 15                	jne    c0011ac3 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011aae:	83 ec 08             	sub    esp,0x8
c0011ab1:	6a 00                	push   0x0
c0011ab3:	53                   	push   ebx
c0011ab4:	e8 3d fb ff ff       	call   c00115f6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	83 c4 10             	add    esp,0x10
c0011abf:	5b                   	pop    ebx
c0011ac0:	5e                   	pop    esi
c0011ac1:	5f                   	pop    edi
c0011ac2:	c3                   	ret    
c0011ac3:	c7 44 24 20 ed 75 02 c0 	mov    DWORD PTR [esp+0x20],0xc00275ed
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	5b                   	pop    ebx
c0011acf:	5e                   	pop    esi
c0011ad0:	5f                   	pop    edi
c0011ad1:	e9 2d 73 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>

c0011ad6 <VAS::freeAllocatedPages(unsigned long)>:
c0011ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ada:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ade:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ae2:	74 09                	je     c0011aed <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ae4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ae8:	e9 c6 fe ff ff       	jmp    c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aed:	c7 44 24 04 0c 74 02 c0 	mov    DWORD PTR [esp+0x4],0xc002740c
c0011af5:	e9 45 0b 00 00       	jmp    c001263f <Dbg::kprintf(char const*, ...)>

c0011afa <VAS::virtualToPhysical(unsigned long)>:
c0011afa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011afe:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b02:	e8 8d fe ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c0011b07:	5a                   	pop    edx
c0011b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b0a:	59                   	pop    ecx
c0011b0b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b10:	c3                   	ret    
c0011b11:	90                   	nop

c0011b12 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b12:	55                   	push   ebp
c0011b13:	57                   	push   edi
c0011b14:	56                   	push   esi
c0011b15:	53                   	push   ebx
c0011b16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b1a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b1e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b22:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b26:	85 db                	test   ebx,ebx
c0011b28:	7e 22                	jle    c0011b4c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b2a:	c1 e3 0c             	shl    ebx,0xc
c0011b2d:	01 f3                	add    ebx,esi
c0011b2f:	56                   	push   esi
c0011b30:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b36:	55                   	push   ebp
c0011b37:	e8 58 fe ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c0011b3c:	5a                   	pop    edx
c0011b3d:	59                   	pop    ecx
c0011b3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b40:	21 f9                	and    ecx,edi
c0011b42:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b46:	39 f3                	cmp    ebx,esi
c0011b48:	89 08                	mov    DWORD PTR [eax],ecx
c0011b4a:	75 e3                	jne    c0011b2f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b4c:	5b                   	pop    ebx
c0011b4d:	5e                   	pop    esi
c0011b4e:	5f                   	pop    edi
c0011b4f:	5d                   	pop    ebp
c0011b50:	c3                   	ret    
c0011b51:	90                   	nop

c0011b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b52:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0011b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b5d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b64:	75 01                	jne    c0011b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b66:	c3                   	ret    
c0011b67:	68 80 00 00 00       	push   0x80
c0011b6c:	6a ff                	push   0xffffffff
c0011b6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b7a:	e8 93 ff ff ff       	call   c0011b12 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b7f:	83 c4 14             	add    esp,0x14
c0011b82:	c3                   	ret    
c0011b83:	90                   	nop

c0011b84 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b84:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b8d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b94:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011b97:	19 c0                	sbb    eax,eax
c0011b99:	83 ca 03             	or     edx,0x3
c0011b9c:	83 e0 fc             	and    eax,0xfffffffc
c0011b9f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ba6:	0f 20 d8             	mov    eax,cr3
c0011ba9:	0f 22 d8             	mov    cr3,eax
c0011bac:	c3                   	ret    
c0011bad:	90                   	nop

c0011bae <VAS::~VAS()>:
c0011bae:	83 ec 2c             	sub    esp,0x2c
c0011bb1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bb9:	e8 51 a2 00 00       	call   c001be0f <lockScheduler()>
c0011bbe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bc8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bce:	83 ec 04             	sub    esp,0x4
c0011bd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011bd5:	6a 01                	push   0x1
c0011bd7:	50                   	push   eax
c0011bd8:	e8 a7 ff ff ff       	call   c0011b84 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011be8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bf0:	0f 8f d7 00 00 00    	jg     c0011ccd <VAS::~VAS()+0x11f>
c0011bf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011bfd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c01:	c1 e2 02             	shl    edx,0x2
c0011c04:	01 d0                	add    eax,edx
c0011c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c10:	83 e0 01             	and    eax,0x1
c0011c13:	0f 84 ab 00 00 00    	je     c0011cc4 <VAS::~VAS()+0x116>
c0011c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c21:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c29:	7f 75                	jg     c0011ca0 <VAS::~VAS()+0xf2>
c0011c2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c2f:	c1 e0 0a             	shl    eax,0xa
c0011c32:	89 c2                	mov    edx,eax
c0011c34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c38:	01 d0                	add    eax,edx
c0011c3a:	c1 e0 0c             	shl    eax,0xc
c0011c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c41:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c48:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c4b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c51:	83 ec 04             	sub    esp,0x4
c0011c54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c58:	6a 01                	push   0x1
c0011c5a:	50                   	push   eax
c0011c5b:	e8 08 fd ff ff       	call   c0011968 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c75:	25 01 04 00 00       	and    eax,0x401
c0011c7a:	3d 01 04 00 00       	cmp    eax,0x401
c0011c7f:	75 19                	jne    c0011c9a <VAS::~VAS()+0xec>
c0011c81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c85:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	50                   	push   eax
c0011c8e:	e8 59 dd ff ff       	call   c000f9ec <Phys::freePage(unsigned long)>
c0011c93:	83 c4 10             	add    esp,0x10
c0011c96:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c9a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c9e:	eb 81                	jmp    c0011c21 <VAS::~VAS()+0x73>
c0011ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca4:	25 00 04 00 00       	and    eax,0x400
c0011ca9:	74 19                	je     c0011cc4 <VAS::~VAS()+0x116>
c0011cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011caf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	50                   	push   eax
c0011cb8:	e8 2f dd ff ff       	call   c000f9ec <Phys::freePage(unsigned long)>
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cc4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cc8:	e9 1b ff ff ff       	jmp    c0011be8 <VAS::~VAS()+0x3a>
c0011ccd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011cd4:	83 ec 0c             	sub    esp,0xc
c0011cd7:	50                   	push   eax
c0011cd8:	e8 d6 fc ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ce4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ce7:	83 ec 0c             	sub    esp,0xc
c0011cea:	50                   	push   eax
c0011ceb:	e8 fc dc ff ff       	call   c000f9ec <Phys::freePage(unsigned long)>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cfb:	c1 e0 02             	shl    eax,0x2
c0011cfe:	83 ec 08             	sub    esp,0x8
c0011d01:	50                   	push   eax
c0011d02:	68 30 74 02 c0       	push   0xc0027430
c0011d07:	e8 33 09 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	e8 fd a0 00 00       	call   c001be11 <unlockScheduler()>
c0011d14:	90                   	nop
c0011d15:	83 c4 2c             	add    esp,0x2c
c0011d18:	c3                   	ret    
c0011d19:	90                   	nop

c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d1a:	55                   	push   ebp
c0011d1b:	57                   	push   edi
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 1c             	sub    esp,0x1c
c0011d21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d29:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d2f:	77 08                	ja     c0011d39 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d31:	0f 20 d8             	mov    eax,cr3
c0011d34:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d37:	75 47                	jne    c0011d80 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d3d:	09 d8                	or     eax,ebx
c0011d3f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d44:	75 57                	jne    c0011d9d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d46:	89 de                	mov    esi,ebx
c0011d48:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d4b:	c1 ee 16             	shr    esi,0x16
c0011d4e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d55:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d59:	74 54                	je     c0011daf <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d65:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d69:	c1 e6 0c             	shl    esi,0xc
c0011d6c:	c1 eb 0a             	shr    ebx,0xa
c0011d6f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d75:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d78:	83 c4 1c             	add    esp,0x1c
c0011d7b:	5b                   	pop    ebx
c0011d7c:	5e                   	pop    esi
c0011d7d:	5f                   	pop    edi
c0011d7e:	5d                   	pop    ebp
c0011d7f:	c3                   	ret    
c0011d80:	83 ec 0c             	sub    esp,0xc
c0011d83:	68 50 74 02 c0       	push   0xc0027450
c0011d88:	e8 b2 08 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0011d8d:	83 c4 10             	add    esp,0x10
c0011d90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d94:	09 d8                	or     eax,ebx
c0011d96:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d9b:	74 a9                	je     c0011d46 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d9d:	83 ec 0c             	sub    esp,0xc
c0011da0:	68 b8 74 02 c0       	push   0xc00274b8
c0011da5:	e8 59 70 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	eb 97                	jmp    c0011d46 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011daf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db3:	e8 be dc ff ff       	call   c000fa76 <Phys::allocatePage()>
c0011db8:	89 c5                	mov    ebp,eax
c0011dba:	e8 20 fa ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dc6:	6a 01                	push   0x1
c0011dc8:	e8 82 f8 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0011dcd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dd4:	6a 01                	push   0x1
c0011dd6:	50                   	push   eax
c0011dd7:	55                   	push   ebp
c0011dd8:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dde:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011de2:	51                   	push   ecx
c0011de3:	e8 26 02 00 00       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011de8:	83 c4 1c             	add    esp,0x1c
c0011deb:	68 00 10 00 00       	push   0x1000
c0011df0:	6a 00                	push   0x0
c0011df2:	50                   	push   eax
c0011df3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df7:	e8 81 e8 fe ff       	call   c000067d <memset>
c0011dfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e00:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e03:	e8 ab fb ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e0c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e15:	e9 41 ff ff ff       	jmp    c0011d5b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e1a <VAS::allocatePages(int, int)>:
c0011e1a:	55                   	push   ebp
c0011e1b:	57                   	push   edi
c0011e1c:	56                   	push   esi
c0011e1d:	53                   	push   ebx
c0011e1e:	83 ec 1c             	sub    esp,0x1c
c0011e21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e25:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0011e2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e30:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e36:	83 e0 01             	and    eax,0x1
c0011e39:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e3d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e41:	0f 85 cc 00 00 00    	jne    c0011f13 <VAS::allocatePages(int, int)+0xf9>
c0011e47:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e4e:	85 c0                	test   eax,eax
c0011e50:	0f 84 a1 00 00 00    	je     c0011ef7 <VAS::allocatePages(int, int)+0xdd>
c0011e56:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e5e:	c1 e6 0c             	shl    esi,0xc
c0011e61:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e6a:	7e 33                	jle    c0011e9f <VAS::allocatePages(int, int)+0x85>
c0011e6c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e74:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e7a:	e8 f7 db ff ff       	call   c000fa76 <Phys::allocatePage()>
c0011e7f:	55                   	push   ebp
c0011e80:	53                   	push   ebx
c0011e81:	50                   	push   eax
c0011e82:	57                   	push   edi
c0011e83:	e8 92 fe ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e88:	83 c4 10             	add    esp,0x10
c0011e8b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e90:	74 03                	je     c0011e95 <VAS::allocatePages(int, int)+0x7b>
c0011e92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e95:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e9b:	39 de                	cmp    esi,ebx
c0011e9d:	75 db                	jne    c0011e7a <VAS::allocatePages(int, int)+0x60>
c0011e9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ea4:	75 12                	jne    c0011eb8 <VAS::allocatePages(int, int)+0x9e>
c0011ea6:	0f 20 d8             	mov    eax,cr3
c0011ea9:	0f 22 d8             	mov    cr3,eax
c0011eac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb0:	83 c4 1c             	add    esp,0x1c
c0011eb3:	5b                   	pop    ebx
c0011eb4:	5e                   	pop    esi
c0011eb5:	5f                   	pop    edi
c0011eb6:	5d                   	pop    ebp
c0011eb7:	c3                   	ret    
c0011eb8:	c1 ee 0a             	shr    esi,0xa
c0011ebb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ebf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ec5:	c1 eb 0a             	shr    ebx,0xa
c0011ec8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ece:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ed4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011eda:	39 c3                	cmp    ebx,eax
c0011edc:	77 ce                	ja     c0011eac <VAS::allocatePages(int, int)+0x92>
c0011ede:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee7:	39 d8                	cmp    eax,ebx
c0011ee9:	73 f3                	jae    c0011ede <VAS::allocatePages(int, int)+0xc4>
c0011eeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eef:	83 c4 1c             	add    esp,0x1c
c0011ef2:	5b                   	pop    ebx
c0011ef3:	5e                   	pop    esi
c0011ef4:	5f                   	pop    edi
c0011ef5:	5d                   	pop    ebp
c0011ef6:	c3                   	ret    
c0011ef7:	83 ec 0c             	sub    esp,0xc
c0011efa:	68 dc 74 02 c0       	push   0xc00274dc
c0011eff:	e8 ff 6e 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0011f04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	e9 43 ff ff ff       	jmp    c0011e56 <VAS::allocatePages(int, int)+0x3c>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f1a:	e8 30 f7 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0011f1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f2b:	0f 87 9b 00 00 00    	ja     c0011fcc <VAS::allocatePages(int, int)+0x1b2>
c0011f31:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f35:	85 d2                	test   edx,edx
c0011f37:	7e 3c                	jle    c0011f75 <VAS::allocatePages(int, int)+0x15b>
c0011f39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f3d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f45:	c1 e5 0c             	shl    ebp,0xc
c0011f48:	81 ce 00 04 00 00    	or     esi,0x400
c0011f4e:	01 dd                	add    ebp,ebx
c0011f50:	e8 21 db ff ff       	call   c000fa76 <Phys::allocatePage()>
c0011f55:	56                   	push   esi
c0011f56:	53                   	push   ebx
c0011f57:	50                   	push   eax
c0011f58:	57                   	push   edi
c0011f59:	e8 bc fd ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f5e:	83 c4 10             	add    esp,0x10
c0011f61:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f66:	74 03                	je     c0011f6b <VAS::allocatePages(int, int)+0x151>
c0011f68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f71:	39 dd                	cmp    ebp,ebx
c0011f73:	75 db                	jne    c0011f50 <VAS::allocatePages(int, int)+0x136>
c0011f75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f7a:	0f 84 26 ff ff ff    	je     c0011ea6 <VAS::allocatePages(int, int)+0x8c>
c0011f80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f88:	89 d3                	mov    ebx,edx
c0011f8a:	c1 e0 0c             	shl    eax,0xc
c0011f8d:	c1 eb 0a             	shr    ebx,0xa
c0011f90:	01 d0                	add    eax,edx
c0011f92:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f98:	c1 e8 0a             	shr    eax,0xa
c0011f9b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fa1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fa6:	2d 00 00 40 00       	sub    eax,0x400000
c0011fab:	39 c3                	cmp    ebx,eax
c0011fad:	0f 87 f9 fe ff ff    	ja     c0011eac <VAS::allocatePages(int, int)+0x92>
c0011fb3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fb6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fbc:	39 d8                	cmp    eax,ebx
c0011fbe:	73 f3                	jae    c0011fb3 <VAS::allocatePages(int, int)+0x199>
c0011fc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc4:	83 c4 1c             	add    esp,0x1c
c0011fc7:	5b                   	pop    ebx
c0011fc8:	5e                   	pop    esi
c0011fc9:	5f                   	pop    edi
c0011fca:	5d                   	pop    ebp
c0011fcb:	c3                   	ret    
c0011fcc:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0011fd1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fde:	0f 84 4d ff ff ff    	je     c0011f31 <VAS::allocatePages(int, int)+0x117>
c0011fe4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fec:	e9 40 ff ff ff       	jmp    c0011f31 <VAS::allocatePages(int, int)+0x117>
c0011ff1:	90                   	nop

c0011ff2 <VAS::setCPUSpecific(unsigned long)>:
c0011ff2:	83 ec 0c             	sub    esp,0xc
c0011ff5:	6a 05                	push   0x5
c0011ff7:	68 00 00 40 c2       	push   0xc2400000
c0011ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012004:	e8 11 fd ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012009:	83 c4 1c             	add    esp,0x1c
c001200c:	c3                   	ret    
c001200d:	90                   	nop

c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001200e:	55                   	push   ebp
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	53                   	push   ebx
c0012012:	83 ec 1c             	sub    esp,0x1c
c0012015:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001201a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001201e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012024:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012028:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001202e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012032:	83 e0 01             	and    eax,0x1
c0012035:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012039:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001203d:	85 c0                	test   eax,eax
c001203f:	7e 39                	jle    c001207a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012041:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012045:	89 f3                	mov    ebx,esi
c0012047:	c1 e0 0c             	shl    eax,0xc
c001204a:	01 f0                	add    eax,esi
c001204c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012050:	55                   	push   ebp
c0012051:	53                   	push   ebx
c0012052:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012056:	29 f0                	sub    eax,esi
c0012058:	01 d8                	add    eax,ebx
c001205a:	50                   	push   eax
c001205b:	57                   	push   edi
c001205c:	e8 b9 fc ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012061:	83 c4 10             	add    esp,0x10
c0012064:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012069:	74 03                	je     c001206e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001206b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001206e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012074:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012078:	75 d6                	jne    c0012050 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001207a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001207f:	75 10                	jne    c0012091 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012081:	0f 20 d8             	mov    eax,cr3
c0012084:	0f 22 d8             	mov    cr3,eax
c0012087:	83 c4 1c             	add    esp,0x1c
c001208a:	89 f0                	mov    eax,esi
c001208c:	5b                   	pop    ebx
c001208d:	5e                   	pop    esi
c001208e:	5f                   	pop    edi
c001208f:	5d                   	pop    ebp
c0012090:	c3                   	ret    
c0012091:	89 f3                	mov    ebx,esi
c0012093:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012097:	c1 eb 0a             	shr    ebx,0xa
c001209a:	c1 e0 0c             	shl    eax,0xc
c001209d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120a3:	01 f0                	add    eax,esi
c00120a5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120ab:	c1 e8 0a             	shr    eax,0xa
c00120ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b3:	2d 00 00 40 00       	sub    eax,0x400000
c00120b8:	39 c3                	cmp    ebx,eax
c00120ba:	77 cb                	ja     c0012087 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120bc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120c5:	39 d8                	cmp    eax,ebx
c00120c7:	73 f3                	jae    c00120bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120c9:	83 c4 1c             	add    esp,0x1c
c00120cc:	89 f0                	mov    eax,esi
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	5d                   	pop    ebp
c00120d2:	c3                   	ret    
c00120d3:	90                   	nop

c00120d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120d4:	55                   	push   ebp
c00120d5:	57                   	push   edi
c00120d6:	56                   	push   esi
c00120d7:	53                   	push   ebx
c00120d8:	83 ec 1c             	sub    esp,0x1c
c00120db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120e3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120eb:	a9 ff 0f 00 00       	test   eax,0xfff
c00120f0:	75 4a                	jne    c001213c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120f6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120f9:	c1 eb 16             	shr    ebx,0x16
c00120fc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012103:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012107:	74 4d                	je     c0012156 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012109:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001210d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012111:	c1 e8 0a             	shr    eax,0xa
c0012114:	80 fa 01             	cmp    dl,0x1
c0012117:	19 d2                	sbb    edx,edx
c0012119:	c1 e3 0c             	shl    ebx,0xc
c001211c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012120:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012126:	25 fc 0f 00 00       	and    eax,0xffc
c001212b:	01 d8                	add    eax,ebx
c001212d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012134:	83 c4 1c             	add    esp,0x1c
c0012137:	5b                   	pop    ebx
c0012138:	5e                   	pop    esi
c0012139:	5f                   	pop    edi
c001213a:	5d                   	pop    ebp
c001213b:	c3                   	ret    
c001213c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012140:	83 ec 0c             	sub    esp,0xc
c0012143:	68 08 75 02 c0       	push   0xc0027508
c0012148:	e8 b6 6c 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c001214d:	83 c4 10             	add    esp,0x10
c0012150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012154:	eb 9c                	jmp    c00120f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012156:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001215a:	e8 17 d9 ff ff       	call   c000fa76 <Phys::allocatePage()>
c001215f:	89 c5                	mov    ebp,eax
c0012161:	e8 79 f6 ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0012166:	83 ec 0c             	sub    esp,0xc
c0012169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001216d:	6a 01                	push   0x1
c001216f:	e8 db f4 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0012174:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001217b:	6a 01                	push   0x1
c001217d:	50                   	push   eax
c001217e:	55                   	push   ebp
c001217f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012185:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012189:	51                   	push   ecx
c001218a:	e8 7f fe ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001218f:	83 c4 1c             	add    esp,0x1c
c0012192:	68 00 10 00 00       	push   0x1000
c0012197:	6a 00                	push   0x0
c0012199:	50                   	push   eax
c001219a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001219e:	e8 da e4 fe ff       	call   c000067d <memset>
c00121a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121aa:	e8 04 f8 ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c00121af:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121b2:	83 c4 10             	add    esp,0x10
c00121b5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121bc:	e9 48 ff ff ff       	jmp    c0012109 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00121c1:	90                   	nop

c00121c2 <VAS::VAS(bool)>:
c00121c2:	53                   	push   ebx
c00121c3:	83 ec 28             	sub    esp,0x28
c00121c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121dd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121e1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121e4:	e8 8d d8 ff ff       	call   c000fa76 <Phys::allocatePage()>
c00121e9:	89 c2                	mov    edx,eax
c00121eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121f2:	e8 e8 f5 ff ff       	call   c00117df <Virt::getAKernelVAS()>
c00121f7:	89 c3                	mov    ebx,eax
c00121f9:	83 ec 0c             	sub    esp,0xc
c00121fc:	6a 01                	push   0x1
c00121fe:	e8 4c f4 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	89 c2                	mov    edx,eax
c0012208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001220f:	83 ec 0c             	sub    esp,0xc
c0012212:	6a 03                	push   0x3
c0012214:	6a 01                	push   0x1
c0012216:	52                   	push   edx
c0012217:	50                   	push   eax
c0012218:	53                   	push   ebx
c0012219:	e8 f0 fd ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001221e:	83 c4 20             	add    esp,0x20
c0012221:	89 c2                	mov    edx,eax
c0012223:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012227:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001222a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012232:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001223a:	7f 1c                	jg     c0012258 <VAS::VAS(bool)+0x96>
c001223c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012240:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012243:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012247:	c1 e2 02             	shl    edx,0x2
c001224a:	01 d0                	add    eax,edx
c001224c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012252:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012256:	eb da                	jmp    c0012232 <VAS::VAS(bool)+0x70>
c0012258:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012260:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012268:	7f 7a                	jg     c00122e4 <VAS::VAS(bool)+0x122>
c001226a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001226e:	2d 00 02 00 00       	sub    eax,0x200
c0012273:	c1 e0 0c             	shl    eax,0xc
c0012276:	83 c8 03             	or     eax,0x3
c0012279:	89 c2                	mov    edx,eax
c001227b:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0012280:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012286:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001228c:	83 e0 10             	and    eax,0x10
c001228f:	84 c0                	test   al,al
c0012291:	74 07                	je     c001229a <VAS::VAS(bool)+0xd8>
c0012293:	b8 00 01 00 00       	mov    eax,0x100
c0012298:	eb 05                	jmp    c001229f <VAS::VAS(bool)+0xdd>
c001229a:	b8 00 00 00 00       	mov    eax,0x0
c001229f:	09 d0                	or     eax,edx
c00122a1:	89 c1                	mov    ecx,eax
c00122a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122ae:	c1 e2 02             	shl    edx,0x2
c00122b1:	01 d0                	add    eax,edx
c00122b3:	89 ca                	mov    edx,ecx
c00122b5:	89 10                	mov    DWORD PTR [eax],edx
c00122b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122bb:	2d 40 03 00 00       	sub    eax,0x340
c00122c0:	83 f8 7f             	cmp    eax,0x7f
c00122c3:	77 16                	ja     c00122db <VAS::VAS(bool)+0x119>
c00122c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122d0:	c1 e2 02             	shl    edx,0x2
c00122d3:	01 d0                	add    eax,edx
c00122d5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122db:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122df:	e9 7c ff ff ff       	jmp    c0012260 <VAS::VAS(bool)+0x9e>
c00122e4:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00122e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122ef:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122f5:	83 e0 10             	and    eax,0x10
c00122f8:	84 c0                	test   al,al
c00122fa:	74 07                	je     c0012303 <VAS::VAS(bool)+0x141>
c00122fc:	b8 03 41 00 00       	mov    eax,0x4103
c0012301:	eb 05                	jmp    c0012308 <VAS::VAS(bool)+0x146>
c0012303:	b8 03 40 00 00       	mov    eax,0x4003
c0012308:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001230c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001230f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012315:	89 02                	mov    DWORD PTR [edx],eax
c0012317:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001231c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012322:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012328:	83 ec 08             	sub    esp,0x8
c001232b:	50                   	push   eax
c001232c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012330:	e8 bd fc ff ff       	call   c0011ff2 <VAS::setCPUSpecific(unsigned long)>
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001233c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001233f:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0012344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001234a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012350:	83 e0 10             	and    eax,0x10
c0012353:	84 c0                	test   al,al
c0012355:	74 07                	je     c001235e <VAS::VAS(bool)+0x19c>
c0012357:	b8 00 01 00 00       	mov    eax,0x100
c001235c:	eb 05                	jmp    c0012363 <VAS::VAS(bool)+0x1a1>
c001235e:	b8 00 00 00 00       	mov    eax,0x0
c0012363:	09 c2                	or     edx,eax
c0012365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012369:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001236c:	05 fc 0f 00 00       	add    eax,0xffc
c0012371:	83 ca 03             	or     edx,0x3
c0012374:	89 10                	mov    DWORD PTR [eax],edx
c0012376:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001237b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012381:	83 ec 0c             	sub    esp,0xc
c0012384:	50                   	push   eax
c0012385:	e8 90 19 00 00       	call   c0013d1a <Device::getName()>
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	83 ec 08             	sub    esp,0x8
c0012390:	68 07 76 02 c0       	push   0xc0027607
c0012395:	50                   	push   eax
c0012396:	e8 d2 e3 fe ff       	call   c000076d <strcmp>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	85 c0                	test   eax,eax
c00123a0:	0f 94 c0             	sete   al
c00123a3:	84 c0                	test   al,al
c00123a5:	74 70                	je     c0012417 <VAS::VAS(bool)+0x255>
c00123a7:	e8 46 9a 00 00       	call   c001bdf2 <disableIRQs()>
c00123ac:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00123b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b7:	05 7c 09 00 00       	add    eax,0x97c
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	50                   	push   eax
c00123c0:	e8 83 cb ff ff       	call   c000ef48 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123cd:	89 c3                	mov    ebx,eax
c00123cf:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00123d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123da:	05 7c 09 00 00       	add    eax,0x97c
c00123df:	83 ec 0c             	sub    esp,0xc
c00123e2:	50                   	push   eax
c00123e3:	e8 60 cb ff ff       	call   c000ef48 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	83 ec 08             	sub    esp,0x8
c00123ee:	50                   	push   eax
c00123ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123f3:	e8 9c f5 ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012402:	6a 11                	push   0x11
c0012404:	53                   	push   ebx
c0012405:	50                   	push   eax
c0012406:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001240a:	e8 0b f9 ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	e8 e9 99 00 00       	call   c001be00 <enableIRQs()>
c0012417:	90                   	nop
c0012418:	83 c4 28             	add    esp,0x28
c001241b:	5b                   	pop    ebx
c001241c:	c3                   	ret    

c001241d <mapVASFirstTime>:
c001241d:	55                   	push   ebp
c001241e:	57                   	push   edi
c001241f:	56                   	push   esi
c0012420:	53                   	push   ebx
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012429:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001242c:	4a                   	dec    edx
c001242d:	0f 84 8e 00 00 00    	je     c00124c1 <mapVASFirstTime+0xa4>
c0012433:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012436:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012439:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001243e:	c1 e5 15             	shl    ebp,0x15
c0012441:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012446:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001244c:	29 eb                	sub    ebx,ebp
c001244e:	29 ee                	sub    esi,ebp
c0012450:	e8 21 d6 ff ff       	call   c000fa76 <Phys::allocatePage()>
c0012455:	83 ec 0c             	sub    esp,0xc
c0012458:	68 03 04 00 00       	push   0x403
c001245d:	6a 01                	push   0x1
c001245f:	53                   	push   ebx
c0012460:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012466:	50                   	push   eax
c0012467:	57                   	push   edi
c0012468:	e8 a1 fb ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001246d:	83 c4 20             	add    esp,0x20
c0012470:	39 f3                	cmp    ebx,esi
c0012472:	75 dc                	jne    c0012450 <mapVASFirstTime+0x33>
c0012474:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012479:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001247e:	29 ee                	sub    esi,ebp
c0012480:	29 e8                	sub    eax,ebp
c0012482:	89 c5                	mov    ebp,eax
c0012484:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012488:	19 db                	sbb    ebx,ebx
c001248a:	e8 e7 d5 ff ff       	call   c000fa76 <Phys::allocatePage()>
c001248f:	83 e3 04             	and    ebx,0x4
c0012492:	83 ec 0c             	sub    esp,0xc
c0012495:	81 c3 03 04 00 00    	add    ebx,0x403
c001249b:	53                   	push   ebx
c001249c:	6a 01                	push   0x1
c001249e:	56                   	push   esi
c001249f:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124a5:	50                   	push   eax
c00124a6:	57                   	push   edi
c00124a7:	e8 62 fb ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ac:	83 c4 20             	add    esp,0x20
c00124af:	39 f5                	cmp    ebp,esi
c00124b1:	75 d1                	jne    c0012484 <mapVASFirstTime+0x67>
c00124b3:	0f 20 d8             	mov    eax,cr3
c00124b6:	0f 22 d8             	mov    cr3,eax
c00124b9:	83 c4 0c             	add    esp,0xc
c00124bc:	5b                   	pop    ebx
c00124bd:	5e                   	pop    esi
c00124be:	5f                   	pop    edi
c00124bf:	5d                   	pop    ebp
c00124c0:	c3                   	ret    
c00124c1:	83 ec 0c             	sub    esp,0xc
c00124c4:	68 15 76 02 c0       	push   0xc0027615
c00124c9:	e8 71 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	83 c4 0c             	add    esp,0xc
c00124d4:	5b                   	pop    ebx
c00124d5:	5e                   	pop    esi
c00124d6:	5f                   	pop    edi
c00124d7:	5d                   	pop    ebp
c00124d8:	c3                   	ret    

c00124d9 <__cxa_atexit>:
c00124d9:	31 c0                	xor    eax,eax
c00124db:	c3                   	ret    

c00124dc <__cxa_finalize>:
c00124dc:	c3                   	ret    

c00124dd <__stack_chk_fail>:
c00124dd:	55                   	push   ebp
c00124de:	89 e5                	mov    ebp,esp
c00124e0:	83 ec 14             	sub    esp,0x14
c00124e3:	68 2e 76 02 c0       	push   0xc002762e
c00124e8:	e8 52 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00124ed:	58                   	pop    eax
c00124ee:	5a                   	pop    edx
c00124ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00124f2:	68 7e 76 02 c0       	push   0xc002767e
c00124f7:	e8 43 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00124fc:	59                   	pop    ecx
c00124fd:	58                   	pop    eax
c00124fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012501:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012504:	68 7e 76 02 c0       	push   0xc002767e
c0012509:	e8 31 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001250e:	5a                   	pop    edx
c001250f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012512:	59                   	pop    ecx
c0012513:	8b 00                	mov    eax,DWORD PTR [eax]
c0012515:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012518:	68 7e 76 02 c0       	push   0xc002767e
c001251d:	e8 1d 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0012522:	5a                   	pop    edx
c0012523:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012526:	59                   	pop    ecx
c0012527:	8b 00                	mov    eax,DWORD PTR [eax]
c0012529:	8b 00                	mov    eax,DWORD PTR [eax]
c001252b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001252e:	68 7e 76 02 c0       	push   0xc002767e
c0012533:	e8 07 01 00 00       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0012538:	c7 04 24 86 76 02 c0 	mov    DWORD PTR [esp],0xc0027686
c001253f:	e8 bf 68 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0012544:	83 c4 10             	add    esp,0x10
c0012547:	c9                   	leave  
c0012548:	c3                   	ret    

c0012549 <__cxa_pure_virtual>:
c0012549:	83 ec 18             	sub    esp,0x18
c001254c:	68 9e 76 02 c0       	push   0xc002769e
c0012551:	e8 ad 68 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0012556:	83 c4 1c             	add    esp,0x1c
c0012559:	c3                   	ret    

c001255a <operator new[](unsigned long)>:
c001255a:	e9 6d cf ff ff       	jmp    c000f4cc <malloc>

c001255f <operator delete(void*, unsigned long)>:
c001255f:	e9 88 cf ff ff       	jmp    c000f4ec <rfree>

c0012564 <operator delete[](void*)>:
c0012564:	e9 83 cf ff ff       	jmp    c000f4ec <rfree>

c0012569 <operator delete[](void*, unsigned long)>:
c0012569:	e9 7e cf ff ff       	jmp    c000f4ec <rfree>

c001256e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001256e:	57                   	push   edi
c001256f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012574:	56                   	push   esi
c0012575:	be b4 76 02 c0       	mov    esi,0xc00276b4
c001257a:	53                   	push   ebx
c001257b:	83 ec 40             	sub    esp,0x40
c001257e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012582:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012586:	fc                   	cld    
c0012587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012589:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001258d:	83 f9 3e             	cmp    ecx,0x3e
c0012590:	7e 05                	jle    c0012597 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012592:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012597:	89 df                	mov    edi,ebx
c0012599:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001259d:	eb 02                	jmp    c00125a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001259f:	89 c7                	mov    edi,eax
c00125a1:	31 d2                	xor    edx,edx
c00125a3:	46                   	inc    esi
c00125a4:	89 f8                	mov    eax,edi
c00125a6:	f7 f1                	div    ecx
c00125a8:	39 cf                	cmp    edi,ecx
c00125aa:	73 f3                	jae    c001259f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125af:	eb 02                	jmp    c00125b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125b1:	89 c3                	mov    ebx,eax
c00125b3:	31 d2                	xor    edx,edx
c00125b5:	4e                   	dec    esi
c00125b6:	89 d8                	mov    eax,ebx
c00125b8:	f7 f1                	div    ecx
c00125ba:	39 cb                	cmp    ebx,ecx
c00125bc:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00125c0:	88 16                	mov    BYTE PTR [esi],dl
c00125c2:	73 ed                	jae    c00125b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00125c4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00125c8:	83 c4 40             	add    esp,0x40
c00125cb:	5b                   	pop    ebx
c00125cc:	5e                   	pop    esi
c00125cd:	5f                   	pop    edi
c00125ce:	c3                   	ret    

c00125cf <Dbg::logc(char)>:
c00125cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125d3:	ba fd 03 00 00       	mov    edx,0x3fd
c00125d8:	ec                   	in     al,dx
c00125d9:	a8 20                	test   al,0x20
c00125db:	74 fb                	je     c00125d8 <Dbg::logc(char)+0x9>
c00125dd:	ba f8 03 00 00       	mov    edx,0x3f8
c00125e2:	88 c8                	mov    al,cl
c00125e4:	ee                   	out    dx,al
c00125e5:	c3                   	ret    

c00125e6 <Dbg::logs(char*)>:
c00125e6:	53                   	push   ebx
c00125e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00125eb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125ee:	84 c0                	test   al,al
c00125f0:	74 0f                	je     c0012601 <Dbg::logs(char*)+0x1b>
c00125f2:	50                   	push   eax
c00125f3:	43                   	inc    ebx
c00125f4:	e8 d6 ff ff ff       	call   c00125cf <Dbg::logc(char)>
c00125f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125fc:	5a                   	pop    edx
c00125fd:	84 c0                	test   al,al
c00125ff:	75 f1                	jne    c00125f2 <Dbg::logs(char*)+0xc>
c0012601:	5b                   	pop    ebx
c0012602:	c3                   	ret    

c0012603 <Dbg::logWriteInt(unsigned int)>:
c0012603:	83 ec 10             	sub    esp,0x10
c0012606:	6a 0a                	push   0xa
c0012608:	8d 44 24 08          	lea    eax,[esp+0x8]
c001260c:	50                   	push   eax
c001260d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012611:	e8 58 ff ff ff       	call   c001256e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012616:	50                   	push   eax
c0012617:	e8 ca ff ff ff       	call   c00125e6 <Dbg::logs(char*)>
c001261c:	83 c4 20             	add    esp,0x20
c001261f:	c3                   	ret    

c0012620 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012620:	83 ec 10             	sub    esp,0x10
c0012623:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012627:	8d 44 24 08          	lea    eax,[esp+0x8]
c001262b:	50                   	push   eax
c001262c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012630:	e8 39 ff ff ff       	call   c001256e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012635:	50                   	push   eax
c0012636:	e8 ab ff ff ff       	call   c00125e6 <Dbg::logs(char*)>
c001263b:	83 c4 20             	add    esp,0x20
c001263e:	c3                   	ret    

c001263f <Dbg::kprintf(char const*, ...)>:
c001263f:	55                   	push   ebp
c0012640:	57                   	push   edi
c0012641:	56                   	push   esi
c0012642:	53                   	push   ebx
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	8d 44 24 24          	lea    eax,[esp+0x24]
c001264a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001264e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012652:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012655:	84 c0                	test   al,al
c0012657:	74 4a                	je     c00126a3 <Dbg::kprintf(char const*, ...)+0x64>
c0012659:	31 db                	xor    ebx,ebx
c001265b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001265e:	3c 25                	cmp    al,0x25
c0012660:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012663:	0f 85 e4 00 00 00    	jne    c001274d <Dbg::kprintf(char const*, ...)+0x10e>
c0012669:	83 c3 02             	add    ebx,0x2
c001266c:	8a 07                	mov    al,BYTE PTR [edi]
c001266e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012671:	83 e8 25             	sub    eax,0x25
c0012674:	3c 53                	cmp    al,0x53
c0012676:	0f 87 ba 00 00 00    	ja     c0012736 <Dbg::kprintf(char const*, ...)+0xf7>
c001267c:	0f b6 c0             	movzx  eax,al
c001267f:	ff 24 85 f4 76 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd890c]
c0012686:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001268a:	89 c8                	mov    eax,ecx
c001268c:	83 c1 04             	add    ecx,0x4
c001268f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012693:	ff 30                	push   DWORD PTR [eax]
c0012695:	e8 4c ff ff ff       	call   c00125e6 <Dbg::logs(char*)>
c001269a:	58                   	pop    eax
c001269b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001269f:	84 c0                	test   al,al
c00126a1:	75 b8                	jne    c001265b <Dbg::kprintf(char const*, ...)+0x1c>
c00126a3:	83 c4 0c             	add    esp,0xc
c00126a6:	5b                   	pop    ebx
c00126a7:	5e                   	pop    esi
c00126a8:	5f                   	pop    edi
c00126a9:	5d                   	pop    ebp
c00126aa:	c3                   	ret    
c00126ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126af:	89 d0                	mov    eax,edx
c00126b1:	83 c2 04             	add    edx,0x4
c00126b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126b8:	ff 30                	push   DWORD PTR [eax]
c00126ba:	e8 44 ff ff ff       	call   c0012603 <Dbg::logWriteInt(unsigned int)>
c00126bf:	58                   	pop    eax
c00126c0:	eb d9                	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c00126c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126c6:	89 d0                	mov    eax,edx
c00126c8:	83 c2 04             	add    edx,0x4
c00126cb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00126ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126d2:	50                   	push   eax
c00126d3:	e8 f7 fe ff ff       	call   c00125cf <Dbg::logc(char)>
c00126d8:	58                   	pop    eax
c00126d9:	eb c0                	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c00126db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126df:	89 c8                	mov    eax,ecx
c00126e1:	83 c1 04             	add    ecx,0x4
c00126e4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126e8:	ff 30                	push   DWORD PTR [eax]
c00126ea:	e8 14 ff ff ff       	call   c0012603 <Dbg::logWriteInt(unsigned int)>
c00126ef:	5f                   	pop    edi
c00126f0:	eb a9                	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c00126f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126f6:	89 c8                	mov    eax,ecx
c00126f8:	83 c1 04             	add    ecx,0x4
c00126fb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126ff:	6a 10                	push   0x10
c0012701:	ff 30                	push   DWORD PTR [eax]
c0012703:	e8 18 ff ff ff       	call   c0012620 <Dbg::logWriteIntBase(unsigned int, int)>
c0012708:	59                   	pop    ecx
c0012709:	5f                   	pop    edi
c001270a:	eb 8f                	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c001270c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012710:	89 d0                	mov    eax,edx
c0012712:	83 c2 08             	add    edx,0x8
c0012715:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012719:	6a 10                	push   0x10
c001271b:	ff 30                	push   DWORD PTR [eax]
c001271d:	e8 fe fe ff ff       	call   c0012620 <Dbg::logWriteIntBase(unsigned int, int)>
c0012722:	58                   	pop    eax
c0012723:	5a                   	pop    edx
c0012724:	e9 72 ff ff ff       	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c0012729:	6a 25                	push   0x25
c001272b:	e8 9f fe ff ff       	call   c00125cf <Dbg::logc(char)>
c0012730:	58                   	pop    eax
c0012731:	e9 65 ff ff ff       	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c0012736:	6a 25                	push   0x25
c0012738:	e8 92 fe ff ff       	call   c00125cf <Dbg::logc(char)>
c001273d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012740:	50                   	push   eax
c0012741:	e8 89 fe ff ff       	call   c00125cf <Dbg::logc(char)>
c0012746:	5a                   	pop    edx
c0012747:	59                   	pop    ecx
c0012748:	e9 4e ff ff ff       	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c001274d:	50                   	push   eax
c001274e:	89 eb                	mov    ebx,ebp
c0012750:	e8 7a fe ff ff       	call   c00125cf <Dbg::logc(char)>
c0012755:	89 fd                	mov    ebp,edi
c0012757:	58                   	pop    eax
c0012758:	e9 3e ff ff ff       	jmp    c001269b <Dbg::kprintf(char const*, ...)+0x5c>
c001275d:	90                   	nop

c001275e <File::read(unsigned long long, void*, int*)>:
c001275e:	53                   	push   ebx
c001275f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012763:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012767:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001276e:	3c 19                	cmp    al,0x19
c0012770:	77 35                	ja     c00127a7 <File::read(unsigned long long, void*, int*)+0x49>
c0012772:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c0012779:	85 c0                	test   eax,eax
c001277b:	74 2a                	je     c00127a7 <File::read(unsigned long long, void*, int*)+0x49>
c001277d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012783:	85 c0                	test   eax,eax
c0012785:	74 20                	je     c00127a7 <File::read(unsigned long long, void*, int*)+0x49>
c0012787:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001278b:	74 21                	je     c00127ae <File::read(unsigned long long, void*, int*)+0x50>
c001278d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001278f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012793:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012799:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001279d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a1:	5b                   	pop    ebx
c00127a2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127a5:	ff e0                	jmp    eax
c00127a7:	b8 0b 00 00 00       	mov    eax,0xb
c00127ac:	eb 05                	jmp    c00127b3 <File::read(unsigned long long, void*, int*)+0x55>
c00127ae:	b8 05 00 00 00       	mov    eax,0x5
c00127b3:	5b                   	pop    ebx
c00127b4:	c3                   	ret    
c00127b5:	90                   	nop

c00127b6 <File::write(unsigned long long, void*, int*)>:
c00127b6:	53                   	push   ebx
c00127b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127bf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127c6:	3c 19                	cmp    al,0x19
c00127c8:	77 35                	ja     c00127ff <File::write(unsigned long long, void*, int*)+0x49>
c00127ca:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c00127d1:	85 c0                	test   eax,eax
c00127d3:	74 2a                	je     c00127ff <File::write(unsigned long long, void*, int*)+0x49>
c00127d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127db:	85 c0                	test   eax,eax
c00127dd:	74 20                	je     c00127ff <File::write(unsigned long long, void*, int*)+0x49>
c00127df:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127e3:	74 21                	je     c0012806 <File::write(unsigned long long, void*, int*)+0x50>
c00127e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127eb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127f9:	5b                   	pop    ebx
c00127fa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00127fd:	ff e0                	jmp    eax
c00127ff:	b8 0b 00 00 00       	mov    eax,0xb
c0012804:	eb 05                	jmp    c001280b <File::write(unsigned long long, void*, int*)+0x55>
c0012806:	b8 05 00 00 00       	mov    eax,0x5
c001280b:	5b                   	pop    ebx
c001280c:	c3                   	ret    
c001280d:	90                   	nop

c001280e <Directory::read(unsigned long long, void*, int*)>:
c001280e:	53                   	push   ebx
c001280f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012813:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012817:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001281e:	3c 19                	cmp    al,0x19
c0012820:	77 35                	ja     c0012857 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012822:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c0012829:	85 c0                	test   eax,eax
c001282b:	74 2a                	je     c0012857 <Directory::read(unsigned long long, void*, int*)+0x49>
c001282d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012833:	85 c0                	test   eax,eax
c0012835:	74 20                	je     c0012857 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012837:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001283b:	74 21                	je     c001285e <Directory::read(unsigned long long, void*, int*)+0x50>
c001283d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001283f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012843:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001284d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012851:	5b                   	pop    ebx
c0012852:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012855:	ff e0                	jmp    eax
c0012857:	b8 0b 00 00 00       	mov    eax,0xb
c001285c:	eb 05                	jmp    c0012863 <Directory::read(unsigned long long, void*, int*)+0x55>
c001285e:	b8 05 00 00 00       	mov    eax,0x5
c0012863:	5b                   	pop    ebx
c0012864:	c3                   	ret    
c0012865:	90                   	nop

c0012866 <Directory::write(unsigned long long, void*, int*)>:
c0012866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001286a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012871:	b8 0b 00 00 00       	mov    eax,0xb
c0012876:	80 fa 19             	cmp    dl,0x19
c0012879:	77 18                	ja     c0012893 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001287b:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c0012882:	85 d2                	test   edx,edx
c0012884:	74 0d                	je     c0012893 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012886:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001288d:	19 c0                	sbb    eax,eax
c001288f:	83 e0 0a             	and    eax,0xa
c0012892:	40                   	inc    eax
c0012893:	c3                   	ret    

c0012894 <File::isAtty()>:
c0012894:	31 c0                	xor    eax,eax
c0012896:	c3                   	ret    
c0012897:	90                   	nop

c0012898 <Directory::isAtty()>:
c0012898:	31 c0                	xor    eax,eax
c001289a:	c3                   	ret    
c001289b:	90                   	nop

c001289c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001289c:	b8 0a 00 00 00       	mov    eax,0xa
c00128a1:	c3                   	ret    

c00128a2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128a2:	b8 0a 00 00 00       	mov    eax,0xa
c00128a7:	c3                   	ret    

c00128a8 <File::~File()>:
c00128a8:	83 ec 0c             	sub    esp,0xc
c00128ab:	ba b0 78 02 c0       	mov    edx,0xc00278b0
c00128b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b4:	89 10                	mov    DWORD PTR [eax],edx
c00128b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	50                   	push   eax
c00128be:	e8 2b eb ff ff       	call   c00113ee <UnixFile::~UnixFile()>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	90                   	nop
c00128c7:	83 c4 0c             	add    esp,0xc
c00128ca:	c3                   	ret    
c00128cb:	90                   	nop

c00128cc <File::~File()>:
c00128cc:	83 ec 0c             	sub    esp,0xc
c00128cf:	83 ec 0c             	sub    esp,0xc
c00128d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d6:	e8 cd ff ff ff       	call   c00128a8 <File::~File()>
c00128db:	83 c4 10             	add    esp,0x10
c00128de:	83 ec 08             	sub    esp,0x8
c00128e1:	68 14 01 00 00       	push   0x114
c00128e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ea:	e8 70 fc ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c00128ef:	83 c4 10             	add    esp,0x10
c00128f2:	83 c4 0c             	add    esp,0xc
c00128f5:	c3                   	ret    

c00128f6 <Directory::~Directory()>:
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	ba cc 78 02 c0       	mov    edx,0xc00278cc
c00128fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012902:	89 10                	mov    DWORD PTR [eax],edx
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	83 ec 0c             	sub    esp,0xc
c001290b:	50                   	push   eax
c001290c:	e8 dd ea ff ff       	call   c00113ee <UnixFile::~UnixFile()>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	90                   	nop
c0012915:	83 c4 0c             	add    esp,0xc
c0012918:	c3                   	ret    
c0012919:	90                   	nop

c001291a <Directory::~Directory()>:
c001291a:	83 ec 0c             	sub    esp,0xc
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012924:	e8 cd ff ff ff       	call   c00128f6 <Directory::~Directory()>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	68 14 01 00 00       	push   0x114
c0012934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012938:	e8 22 fc ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	83 c4 0c             	add    esp,0xc
c0012943:	c3                   	ret    

c0012944 <Filesystem::Filesystem()>:
c0012944:	ba 4c 78 02 c0       	mov    edx,0xc002784c
c0012949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001294d:	89 10                	mov    DWORD PTR [eax],edx
c001294f:	8b 15 08 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab08
c0012955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012959:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001295c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012960:	a3 08 ab 02 c0       	mov    ds:0xc002ab08,eax
c0012965:	90                   	nop
c0012966:	c3                   	ret    
c0012967:	90                   	nop

c0012968 <Filesystem::~Filesystem()>:
c0012968:	ba 4c 78 02 c0       	mov    edx,0xc002784c
c001296d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012971:	89 10                	mov    DWORD PTR [eax],edx
c0012973:	90                   	nop
c0012974:	c3                   	ret    
c0012975:	90                   	nop

c0012976 <Filesystem::~Filesystem()>:
c0012976:	83 ec 0c             	sub    esp,0xc
c0012979:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001297d:	e8 e6 ff ff ff       	call   c0012968 <Filesystem::~Filesystem()>
c0012982:	83 c4 04             	add    esp,0x4
c0012985:	83 ec 08             	sub    esp,0x8
c0012988:	6a 08                	push   0x8
c001298a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001298e:	e8 cc fb ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	83 c4 0c             	add    esp,0xc
c0012999:	c3                   	ret    

c001299a <initVFS()>:
c001299a:	83 ec 18             	sub    esp,0x18
c001299d:	6a 08                	push   0x8
c001299f:	e8 28 cb ff ff       	call   c000f4cc <malloc>
c00129a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00129a7:	e8 58 c2 00 00       	call   c001ec04 <FAT::FAT()>
c00129ac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129b3:	e8 14 cb ff ff       	call   c000f4cc <malloc>
c00129b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00129bb:	e8 ba d4 00 00       	call   c001fe7a <ISO9660::ISO9660()>
c00129c0:	83 c4 1c             	add    esp,0x1c
c00129c3:	c3                   	ret    

c00129c4 <standardiseFiles(char*, char const*, char const*)>:
c00129c4:	55                   	push   ebp
c00129c5:	57                   	push   edi
c00129c6:	56                   	push   esi
c00129c7:	53                   	push   ebx
c00129c8:	81 ec 10 04 00 00    	sub    esp,0x410
c00129ce:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00129d5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129dc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129e3:	68 00 04 00 00       	push   0x400
c00129e8:	6a 00                	push   0x0
c00129ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129ee:	56                   	push   esi
c00129ef:	e8 89 dc fe ff       	call   c000067d <memset>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129fb:	75 0b                	jne    c0012a08 <standardiseFiles(char*, char const*, char const*)+0x44>
c00129fd:	50                   	push   eax
c00129fe:	50                   	push   eax
c00129ff:	57                   	push   edi
c0012a00:	56                   	push   esi
c0012a01:	e8 16 dd fe ff       	call   c000071c <strcpy>
c0012a06:	eb 41                	jmp    c0012a49 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a08:	8a 07                	mov    al,BYTE PTR [edi]
c0012a0a:	3c 5c                	cmp    al,0x5c
c0012a0c:	74 04                	je     c0012a12 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a0e:	3c 2f                	cmp    al,0x2f
c0012a10:	75 18                	jne    c0012a2a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a15:	3c 60                	cmp    al,0x60
c0012a17:	7e 03                	jle    c0012a1c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a19:	83 e8 20             	sub    eax,0x20
c0012a1c:	88 04 24             	mov    BYTE PTR [esp],al
c0012a1f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a26:	50                   	push   eax
c0012a27:	50                   	push   eax
c0012a28:	eb 18                	jmp    c0012a42 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a2a:	50                   	push   eax
c0012a2b:	50                   	push   eax
c0012a2c:	55                   	push   ebp
c0012a2d:	56                   	push   esi
c0012a2e:	e8 e9 dc fe ff       	call   c000071c <strcpy>
c0012a33:	5a                   	pop    edx
c0012a34:	59                   	pop    ecx
c0012a35:	68 61 8b 02 c0       	push   0xc0028b61
c0012a3a:	56                   	push   esi
c0012a3b:	e8 93 dd fe ff       	call   c00007d3 <strcat>
c0012a40:	5d                   	pop    ebp
c0012a41:	58                   	pop    eax
c0012a42:	57                   	push   edi
c0012a43:	56                   	push   esi
c0012a44:	e8 8a dd fe ff       	call   c00007d3 <strcat>
c0012a49:	83 c4 10             	add    esp,0x10
c0012a4c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a4f:	3c 60                	cmp    al,0x60
c0012a51:	7e 03                	jle    c0012a56 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a53:	83 e8 20             	sub    eax,0x20
c0012a56:	88 04 24             	mov    BYTE PTR [esp],al
c0012a59:	88 03                	mov    BYTE PTR [ebx],al
c0012a5b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a62:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a68:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a6c:	bf 03 00 00 00       	mov    edi,0x3
c0012a71:	b8 03 00 00 00       	mov    eax,0x3
c0012a76:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a79:	84 d2                	test   dl,dl
c0012a7b:	0f 84 91 00 00 00    	je     c0012b12 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a81:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a84:	80 fa 5c             	cmp    dl,0x5c
c0012a87:	74 05                	je     c0012a8e <standardiseFiles(char*, char const*, char const*)+0xca>
c0012a89:	80 fa 2f             	cmp    dl,0x2f
c0012a8c:	75 12                	jne    c0012aa0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a8e:	89 c5                	mov    ebp,eax
c0012a90:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a95:	74 09                	je     c0012aa0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a97:	40                   	inc    eax
c0012a98:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a9c:	89 cf                	mov    edi,ecx
c0012a9e:	eb d6                	jmp    c0012a76 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012aa0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012aa5:	75 5b                	jne    c0012b02 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aa7:	80 fa 2e             	cmp    dl,0x2e
c0012aaa:	75 56                	jne    c0012b02 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aac:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012ab0:	74 19                	je     c0012acb <standardiseFiles(char*, char const*, char const*)+0x107>
c0012ab2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ab7:	74 53                	je     c0012b0c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ab9:	89 f9                	mov    ecx,edi
c0012abb:	41                   	inc    ecx
c0012abc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012abf:	80 fa 2f             	cmp    dl,0x2f
c0012ac2:	74 f7                	je     c0012abb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ac4:	80 fa 5c             	cmp    dl,0x5c
c0012ac7:	74 f2                	je     c0012abb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ac9:	eb d1                	jmp    c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012acb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ad0:	74 3a                	je     c0012b0c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ad2:	83 f8 03             	cmp    eax,0x3
c0012ad5:	74 c5                	je     c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ad7:	41                   	inc    ecx
c0012ad8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012adb:	80 fa 2f             	cmp    dl,0x2f
c0012ade:	74 f7                	je     c0012ad7 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ae0:	80 fa 5c             	cmp    dl,0x5c
c0012ae3:	74 f2                	je     c0012ad7 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ae5:	48                   	dec    eax
c0012ae6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012aea:	75 06                	jne    c0012af2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012aec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012af0:	eb f3                	jmp    c0012ae5 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012af2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012af6:	74 07                	je     c0012aff <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012af8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012afc:	48                   	dec    eax
c0012afd:	eb f3                	jmp    c0012af2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012aff:	40                   	inc    eax
c0012b00:	eb 9a                	jmp    c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b02:	80 fa 2f             	cmp    dl,0x2f
c0012b05:	74 95                	je     c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b07:	80 fa 5c             	cmp    dl,0x5c
c0012b0a:	74 90                	je     c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b0c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b0f:	40                   	inc    eax
c0012b10:	eb 8a                	jmp    c0012a9c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b12:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b16:	83 ec 0c             	sub    esp,0xc
c0012b19:	53                   	push   ebx
c0012b1a:	e8 7b db fe ff       	call   c000069a <strlen>
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b27:	75 26                	jne    c0012b4f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b29:	83 ec 0c             	sub    esp,0xc
c0012b2c:	53                   	push   ebx
c0012b2d:	e8 68 db fe ff       	call   c000069a <strlen>
c0012b32:	83 c4 10             	add    esp,0x10
c0012b35:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b3a:	74 26                	je     c0012b62 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b3c:	83 ec 0c             	sub    esp,0xc
c0012b3f:	53                   	push   ebx
c0012b40:	e8 55 db fe ff       	call   c000069a <strlen>
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b4d:	eb c7                	jmp    c0012b16 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b4f:	83 ec 0c             	sub    esp,0xc
c0012b52:	53                   	push   ebx
c0012b53:	e8 42 db fe ff       	call   c000069a <strlen>
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b60:	74 c7                	je     c0012b29 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012b62:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b68:	5b                   	pop    ebx
c0012b69:	5e                   	pop    esi
c0012b6a:	5f                   	pop    edi
c0012b6b:	5d                   	pop    ebp
c0012b6c:	c3                   	ret    
c0012b6d:	90                   	nop

c0012b6e <File::File(char const*, Process*)>:
c0012b6e:	83 ec 0c             	sub    esp,0xc
c0012b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b75:	83 ec 08             	sub    esp,0x8
c0012b78:	6a 00                	push   0x0
c0012b7a:	50                   	push   eax
c0012b7b:	e8 8c e6 ff ff       	call   c001120c <UnixFile::UnixFile(int)>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	ba b0 78 02 c0       	mov    edx,0xc00278b0
c0012b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b8c:	89 10                	mov    DWORD PTR [eax],edx
c0012b8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b92:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9c:	83 c0 0d             	add    eax,0xd
c0012b9f:	83 ec 04             	sub    esp,0x4
c0012ba2:	52                   	push   edx
c0012ba3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ba7:	50                   	push   eax
c0012ba8:	e8 17 fe ff ff       	call   c00129c4 <standardiseFiles(char*, char const*, char const*)>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bb7:	8d 50 bf             	lea    edx,[eax-0x41]
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012bcc:	90                   	nop
c0012bcd:	83 c4 0c             	add    esp,0xc
c0012bd0:	c3                   	ret    
c0012bd1:	90                   	nop

c0012bd2 <File::open(FileOpenMode)>:
c0012bd2:	53                   	push   ebx
c0012bd3:	b8 0b 00 00 00       	mov    eax,0xb
c0012bd8:	83 ec 08             	sub    esp,0x8
c0012bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bdf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012be6:	80 fa 19             	cmp    dl,0x19
c0012be9:	77 40                	ja     c0012c2b <File::open(FileOpenMode)+0x59>
c0012beb:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c0012bf2:	85 d2                	test   edx,edx
c0012bf4:	74 35                	je     c0012c2b <File::open(FileOpenMode)+0x59>
c0012bf6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bfc:	85 d2                	test   edx,edx
c0012bfe:	74 2b                	je     c0012c2b <File::open(FileOpenMode)+0x59>
c0012c00:	b8 06 00 00 00       	mov    eax,0x6
c0012c05:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c09:	75 20                	jne    c0012c2b <File::open(FileOpenMode)+0x59>
c0012c0b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c0d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c17:	51                   	push   ecx
c0012c18:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c1b:	51                   	push   ecx
c0012c1c:	52                   	push   edx
c0012c1d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c20:	83 c4 10             	add    esp,0x10
c0012c23:	85 c0                	test   eax,eax
c0012c25:	75 04                	jne    c0012c2b <File::open(FileOpenMode)+0x59>
c0012c27:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c2b:	83 c4 08             	add    esp,0x8
c0012c2e:	5b                   	pop    ebx
c0012c2f:	c3                   	ret    

c0012c30 <File::close()>:
c0012c30:	53                   	push   ebx
c0012c31:	b8 0b 00 00 00       	mov    eax,0xb
c0012c36:	83 ec 08             	sub    esp,0x8
c0012c39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c3d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c44:	80 fa 19             	cmp    dl,0x19
c0012c47:	77 41                	ja     c0012c8a <File::close()+0x5a>
c0012c49:	8b 1c 95 a0 af 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5060]
c0012c50:	85 db                	test   ebx,ebx
c0012c52:	74 36                	je     c0012c8a <File::close()+0x5a>
c0012c54:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c5b:	74 2d                	je     c0012c8a <File::close()+0x5a>
c0012c5d:	b8 05 00 00 00       	mov    eax,0x5
c0012c62:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c66:	74 22                	je     c0012c8a <File::close()+0x5a>
c0012c68:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c6c:	8b 04 95 a0 af 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5060]
c0012c73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c79:	53                   	push   ebx
c0012c7a:	53                   	push   ebx
c0012c7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c83:	50                   	push   eax
c0012c84:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	83 c4 08             	add    esp,0x8
c0012c8d:	5b                   	pop    ebx
c0012c8e:	c3                   	ret    
c0012c8f:	90                   	nop

c0012c90 <File::seek(unsigned long long)>:
c0012c90:	56                   	push   esi
c0012c91:	53                   	push   ebx
c0012c92:	b8 0b 00 00 00       	mov    eax,0xb
c0012c97:	51                   	push   ecx
c0012c98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012ca0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cab:	80 fa 19             	cmp    dl,0x19
c0012cae:	77 31                	ja     c0012ce1 <File::seek(unsigned long long)+0x51>
c0012cb0:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c0012cb7:	85 d2                	test   edx,edx
c0012cb9:	74 26                	je     c0012ce1 <File::seek(unsigned long long)+0x51>
c0012cbb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc1:	85 d2                	test   edx,edx
c0012cc3:	74 1c                	je     c0012ce1 <File::seek(unsigned long long)+0x51>
c0012cc5:	b8 05 00 00 00       	mov    eax,0x5
c0012cca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012cce:	74 11                	je     c0012ce1 <File::seek(unsigned long long)+0x51>
c0012cd0:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cd2:	53                   	push   ebx
c0012cd3:	51                   	push   ecx
c0012cd4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012cda:	52                   	push   edx
c0012cdb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	5a                   	pop    edx
c0012ce2:	5b                   	pop    ebx
c0012ce3:	5e                   	pop    esi
c0012ce4:	c3                   	ret    
c0012ce5:	90                   	nop

c0012ce6 <File::tell(unsigned long long*)>:
c0012ce6:	83 ec 0c             	sub    esp,0xc
c0012ce9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cf2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cf9:	80 fa 19             	cmp    dl,0x19
c0012cfc:	77 34                	ja     c0012d32 <File::tell(unsigned long long*)+0x4c>
c0012cfe:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c0012d05:	85 d2                	test   edx,edx
c0012d07:	74 29                	je     c0012d32 <File::tell(unsigned long long*)+0x4c>
c0012d09:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d0f:	85 d2                	test   edx,edx
c0012d11:	74 1f                	je     c0012d32 <File::tell(unsigned long long*)+0x4c>
c0012d13:	b8 05 00 00 00       	mov    eax,0x5
c0012d18:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d1c:	74 14                	je     c0012d32 <File::tell(unsigned long long*)+0x4c>
c0012d1e:	50                   	push   eax
c0012d1f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d25:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d2b:	52                   	push   edx
c0012d2c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	83 c4 0c             	add    esp,0xc
c0012d35:	c3                   	ret    

c0012d36 <File::rewind()>:
c0012d36:	83 ec 10             	sub    esp,0x10
c0012d39:	6a 00                	push   0x0
c0012d3b:	6a 00                	push   0x0
c0012d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d41:	e8 4a ff ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c0012d46:	83 c4 1c             	add    esp,0x1c
c0012d49:	c3                   	ret    

c0012d4a <File::unlink()>:
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d5d:	80 f9 19             	cmp    cl,0x19
c0012d60:	77 2f                	ja     c0012d91 <File::unlink()+0x47>
c0012d62:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0012d69:	85 c9                	test   ecx,ecx
c0012d6b:	74 24                	je     c0012d91 <File::unlink()+0x47>
c0012d6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d73:	85 c9                	test   ecx,ecx
c0012d75:	74 1a                	je     c0012d91 <File::unlink()+0x47>
c0012d77:	b8 06 00 00 00       	mov    eax,0x6
c0012d7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d80:	75 0f                	jne    c0012d91 <File::unlink()+0x47>
c0012d82:	83 c2 0d             	add    edx,0xd
c0012d85:	50                   	push   eax
c0012d86:	50                   	push   eax
c0012d87:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d89:	52                   	push   edx
c0012d8a:	51                   	push   ecx
c0012d8b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d8e:	83 c4 10             	add    esp,0x10
c0012d91:	83 c4 0c             	add    esp,0xc
c0012d94:	c3                   	ret    
c0012d95:	90                   	nop

c0012d96 <File::rename(char const*)>:
c0012d96:	83 ec 0c             	sub    esp,0xc
c0012d99:	b8 0b 00 00 00       	mov    eax,0xb
c0012d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012da9:	80 f9 19             	cmp    cl,0x19
c0012dac:	77 32                	ja     c0012de0 <File::rename(char const*)+0x4a>
c0012dae:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	74 27                	je     c0012de0 <File::rename(char const*)+0x4a>
c0012db9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dbf:	85 c9                	test   ecx,ecx
c0012dc1:	74 1d                	je     c0012de0 <File::rename(char const*)+0x4a>
c0012dc3:	b8 06 00 00 00       	mov    eax,0x6
c0012dc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dcc:	75 12                	jne    c0012de0 <File::rename(char const*)+0x4a>
c0012dce:	83 c2 0d             	add    edx,0xd
c0012dd1:	50                   	push   eax
c0012dd2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dd8:	52                   	push   edx
c0012dd9:	51                   	push   ecx
c0012dda:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	83 c4 0c             	add    esp,0xc
c0012de3:	c3                   	ret    

c0012de4 <File::chfatattr(unsigned char, unsigned char)>:
c0012de4:	57                   	push   edi
c0012de5:	b8 0b 00 00 00       	mov    eax,0xb
c0012dea:	56                   	push   esi
c0012deb:	53                   	push   ebx
c0012dec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012df4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dfb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012dff:	80 f9 19             	cmp    cl,0x19
c0012e02:	77 37                	ja     c0012e3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e04:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0012e0b:	85 c9                	test   ecx,ecx
c0012e0d:	74 2c                	je     c0012e3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e15:	85 c9                	test   ecx,ecx
c0012e17:	74 22                	je     c0012e3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e19:	b8 06 00 00 00       	mov    eax,0x6
c0012e1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e22:	75 17                	jne    c0012e3b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e24:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e26:	89 f0                	mov    eax,esi
c0012e28:	83 c2 0d             	add    edx,0xd
c0012e2b:	0f b6 f0             	movzx  esi,al
c0012e2e:	0f b6 db             	movzx  ebx,bl
c0012e31:	56                   	push   esi
c0012e32:	53                   	push   ebx
c0012e33:	52                   	push   edx
c0012e34:	51                   	push   ecx
c0012e35:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	5b                   	pop    ebx
c0012e3c:	5e                   	pop    esi
c0012e3d:	5f                   	pop    edi
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop

c0012e40 <File::exists()>:
c0012e40:	83 ec 0c             	sub    esp,0xc
c0012e43:	31 c0                	xor    eax,eax
c0012e45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e49:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e50:	80 f9 19             	cmp    cl,0x19
c0012e53:	77 24                	ja     c0012e79 <File::exists()+0x39>
c0012e55:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0012e5c:	85 c9                	test   ecx,ecx
c0012e5e:	74 19                	je     c0012e79 <File::exists()+0x39>
c0012e60:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e66:	85 c9                	test   ecx,ecx
c0012e68:	74 0f                	je     c0012e79 <File::exists()+0x39>
c0012e6a:	83 c2 0d             	add    edx,0xd
c0012e6d:	50                   	push   eax
c0012e6e:	50                   	push   eax
c0012e6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e71:	52                   	push   edx
c0012e72:	51                   	push   ecx
c0012e73:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	83 c4 0c             	add    esp,0xc
c0012e7c:	c3                   	ret    
c0012e7d:	90                   	nop

c0012e7e <File::stat(unsigned long long*, bool*)>:
c0012e7e:	56                   	push   esi
c0012e7f:	53                   	push   ebx
c0012e80:	50                   	push   eax
c0012e81:	b8 0b 00 00 00       	mov    eax,0xb
c0012e86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e99:	80 f9 19             	cmp    cl,0x19
c0012e9c:	77 3d                	ja     c0012edb <File::stat(unsigned long long*, bool*)+0x5d>
c0012e9e:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 32                	je     c0012edb <File::stat(unsigned long long*, bool*)+0x5d>
c0012ea9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eaf:	85 c9                	test   ecx,ecx
c0012eb1:	74 28                	je     c0012edb <File::stat(unsigned long long*, bool*)+0x5d>
c0012eb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb9:	74 13                	je     c0012ece <File::stat(unsigned long long*, bool*)+0x50>
c0012ebb:	83 ec 04             	sub    esp,0x4
c0012ebe:	56                   	push   esi
c0012ebf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ec5:	51                   	push   ecx
c0012ec6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ec9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ecc:	eb 0a                	jmp    c0012ed8 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ece:	53                   	push   ebx
c0012ecf:	83 c2 0d             	add    edx,0xd
c0012ed2:	56                   	push   esi
c0012ed3:	52                   	push   edx
c0012ed4:	51                   	push   ecx
c0012ed5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	5a                   	pop    edx
c0012edc:	5b                   	pop    ebx
c0012edd:	5e                   	pop    esi
c0012ede:	c3                   	ret    

c0012edf <getcwd(Process*, char*, int)>:
c0012edf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee3:	31 c0                	xor    eax,eax
c0012ee5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ee8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012eec:	7d 15                	jge    c0012f03 <getcwd(Process*, char*, int)+0x24>
c0012eee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef2:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ef9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012efc:	84 c9                	test   cl,cl
c0012efe:	74 06                	je     c0012f06 <getcwd(Process*, char*, int)+0x27>
c0012f00:	40                   	inc    eax
c0012f01:	eb e2                	jmp    c0012ee5 <getcwd(Process*, char*, int)+0x6>
c0012f03:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f06:	31 c0                	xor    eax,eax
c0012f08:	c3                   	ret    

c0012f09 <setcwd(Process*, char*)>:
c0012f09:	55                   	push   ebp
c0012f0a:	57                   	push   edi
c0012f0b:	56                   	push   esi
c0012f0c:	53                   	push   ebx
c0012f0d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f13:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f1a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f20:	57                   	push   edi
c0012f21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f28:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f2c:	56                   	push   esi
c0012f2d:	e8 92 fa ff ff       	call   c00129c4 <standardiseFiles(char*, char const*, char const*)>
c0012f32:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f35:	e8 60 d7 fe ff       	call   c000069a <strlen>
c0012f3a:	83 c4 10             	add    esp,0x10
c0012f3d:	83 f8 02             	cmp    eax,0x2
c0012f40:	77 17                	ja     c0012f59 <setcwd(Process*, char*)+0x50>
c0012f42:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f47:	83 e8 41             	sub    eax,0x41
c0012f4a:	83 f8 19             	cmp    eax,0x19
c0012f4d:	76 24                	jbe    c0012f73 <setcwd(Process*, char*)+0x6a>
c0012f4f:	b8 03 00 00 00       	mov    eax,0x3
c0012f54:	e9 e0 00 00 00       	jmp    c0013039 <setcwd(Process*, char*)+0x130>
c0012f59:	83 ec 0c             	sub    esp,0xc
c0012f5c:	56                   	push   esi
c0012f5d:	e8 38 d7 fe ff       	call   c000069a <strlen>
c0012f62:	83 c4 10             	add    esp,0x10
c0012f65:	83 f8 03             	cmp    eax,0x3
c0012f68:	75 34                	jne    c0012f9e <setcwd(Process*, char*)+0x95>
c0012f6a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f6f:	75 2d                	jne    c0012f9e <setcwd(Process*, char*)+0x95>
c0012f71:	eb cf                	jmp    c0012f42 <setcwd(Process*, char*)+0x39>
c0012f73:	8b 14 85 a0 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5060]
c0012f7a:	b8 05 00 00 00       	mov    eax,0x5
c0012f7f:	85 d2                	test   edx,edx
c0012f81:	0f 84 b2 00 00 00    	je     c0013039 <setcwd(Process*, char*)+0x130>
c0012f87:	b8 06 00 00 00       	mov    eax,0x6
c0012f8c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f93:	0f 85 92 00 00 00    	jne    c001302b <setcwd(Process*, char*)+0x122>
c0012f99:	e9 9b 00 00 00       	jmp    c0013039 <setcwd(Process*, char*)+0x130>
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	68 14 01 00 00       	push   0x114
c0012fa6:	e8 21 c5 ff ff       	call   c000f4cc <malloc>
c0012fab:	83 c4 0c             	add    esp,0xc
c0012fae:	89 c3                	mov    ebx,eax
c0012fb0:	55                   	push   ebp
c0012fb1:	56                   	push   esi
c0012fb2:	50                   	push   eax
c0012fb3:	e8 b6 fb ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c0012fb8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012fc4:	50                   	push   eax
c0012fc5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fc9:	50                   	push   eax
c0012fca:	53                   	push   ebx
c0012fcb:	e8 ae fe ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c0012fd0:	83 c4 10             	add    esp,0x10
c0012fd3:	83 f8 02             	cmp    eax,0x2
c0012fd6:	74 04                	je     c0012fdc <setcwd(Process*, char*)+0xd3>
c0012fd8:	85 c0                	test   eax,eax
c0012fda:	74 1c                	je     c0012ff8 <setcwd(Process*, char*)+0xef>
c0012fdc:	b8 01 00 00 00       	mov    eax,0x1
c0012fe1:	85 db                	test   ebx,ebx
c0012fe3:	74 54                	je     c0013039 <setcwd(Process*, char*)+0x130>
c0012fe5:	83 ec 0c             	sub    esp,0xc
c0012fe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fea:	53                   	push   ebx
c0012feb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	b8 01 00 00 00       	mov    eax,0x1
c0012ff6:	eb 41                	jmp    c0013039 <setcwd(Process*, char*)+0x130>
c0012ff8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ffd:	75 1c                	jne    c001301b <setcwd(Process*, char*)+0x112>
c0012fff:	b8 02 00 00 00       	mov    eax,0x2
c0013004:	85 db                	test   ebx,ebx
c0013006:	74 31                	je     c0013039 <setcwd(Process*, char*)+0x130>
c0013008:	83 ec 0c             	sub    esp,0xc
c001300b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001300d:	53                   	push   ebx
c001300e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013011:	83 c4 10             	add    esp,0x10
c0013014:	b8 02 00 00 00       	mov    eax,0x2
c0013019:	eb 1e                	jmp    c0013039 <setcwd(Process*, char*)+0x130>
c001301b:	85 db                	test   ebx,ebx
c001301d:	74 0c                	je     c001302b <setcwd(Process*, char*)+0x122>
c001301f:	83 ec 0c             	sub    esp,0xc
c0013022:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013024:	53                   	push   ebx
c0013025:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	50                   	push   eax
c001302c:	50                   	push   eax
c001302d:	56                   	push   esi
c001302e:	57                   	push   edi
c001302f:	e8 e8 d6 fe ff       	call   c000071c <strcpy>
c0013034:	83 c4 10             	add    esp,0x10
c0013037:	31 c0                	xor    eax,eax
c0013039:	81 c4 1c 02 00 00    	add    esp,0x21c
c001303f:	5b                   	pop    ebx
c0013040:	5e                   	pop    esi
c0013041:	5f                   	pop    edi
c0013042:	5d                   	pop    ebp
c0013043:	c3                   	ret    

c0013044 <Directory::Directory(char const*, Process*)>:
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304b:	83 ec 08             	sub    esp,0x8
c001304e:	6a 00                	push   0x0
c0013050:	50                   	push   eax
c0013051:	e8 b6 e1 ff ff       	call   c001120c <UnixFile::UnixFile(int)>
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	ba cc 78 02 c0       	mov    edx,0xc00278cc
c001305e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013062:	89 10                	mov    DWORD PTR [eax],edx
c0013064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013068:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013072:	83 c0 0d             	add    eax,0xd
c0013075:	83 ec 04             	sub    esp,0x4
c0013078:	52                   	push   edx
c0013079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307d:	50                   	push   eax
c001307e:	e8 41 f9 ff ff       	call   c00129c4 <standardiseFiles(char*, char const*, char const*)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001308d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013094:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001309a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130a2:	90                   	nop
c00130a3:	83 c4 0c             	add    esp,0xc
c00130a6:	c3                   	ret    
c00130a7:	90                   	nop

c00130a8 <Directory::open()>:
c00130a8:	53                   	push   ebx
c00130a9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ae:	83 ec 08             	sub    esp,0x8
c00130b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130bc:	80 fa 19             	cmp    dl,0x19
c00130bf:	77 3d                	ja     c00130fe <Directory::open()+0x56>
c00130c1:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c00130c8:	85 d2                	test   edx,edx
c00130ca:	74 32                	je     c00130fe <Directory::open()+0x56>
c00130cc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130d2:	85 d2                	test   edx,edx
c00130d4:	74 28                	je     c00130fe <Directory::open()+0x56>
c00130d6:	b8 06 00 00 00       	mov    eax,0x6
c00130db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130df:	75 1d                	jne    c00130fe <Directory::open()+0x56>
c00130e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130e7:	50                   	push   eax
c00130e8:	8b 02                	mov    eax,DWORD PTR [edx]
c00130ea:	51                   	push   ecx
c00130eb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130ee:	51                   	push   ecx
c00130ef:	52                   	push   edx
c00130f0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	85 c0                	test   eax,eax
c00130f8:	75 04                	jne    c00130fe <Directory::open()+0x56>
c00130fa:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00130fe:	83 c4 08             	add    esp,0x8
c0013101:	5b                   	pop    ebx
c0013102:	c3                   	ret    
c0013103:	90                   	nop

c0013104 <Directory::close()>:
c0013104:	53                   	push   ebx
c0013105:	b8 0b 00 00 00       	mov    eax,0xb
c001310a:	83 ec 08             	sub    esp,0x8
c001310d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013111:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013118:	80 fa 19             	cmp    dl,0x19
c001311b:	77 41                	ja     c001315e <Directory::close()+0x5a>
c001311d:	8b 1c 95 a0 af 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5060]
c0013124:	85 db                	test   ebx,ebx
c0013126:	74 36                	je     c001315e <Directory::close()+0x5a>
c0013128:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001312f:	74 2d                	je     c001315e <Directory::close()+0x5a>
c0013131:	b8 05 00 00 00       	mov    eax,0x5
c0013136:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001313a:	74 22                	je     c001315e <Directory::close()+0x5a>
c001313c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013140:	8b 04 95 a0 af 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5060]
c0013147:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001314d:	53                   	push   ebx
c001314e:	53                   	push   ebx
c001314f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013151:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013157:	50                   	push   eax
c0013158:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	83 c4 08             	add    esp,0x8
c0013161:	5b                   	pop    ebx
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <Directory::unlink()>:
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	b8 0b 00 00 00       	mov    eax,0xb
c001316c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013170:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013177:	80 f9 19             	cmp    cl,0x19
c001317a:	77 2f                	ja     c00131ab <Directory::unlink()+0x47>
c001317c:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 24                	je     c00131ab <Directory::unlink()+0x47>
c0013187:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318d:	85 c9                	test   ecx,ecx
c001318f:	74 1a                	je     c00131ab <Directory::unlink()+0x47>
c0013191:	b8 06 00 00 00       	mov    eax,0x6
c0013196:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001319a:	75 0f                	jne    c00131ab <Directory::unlink()+0x47>
c001319c:	83 c2 0d             	add    edx,0xd
c001319f:	50                   	push   eax
c00131a0:	50                   	push   eax
c00131a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a3:	52                   	push   edx
c00131a4:	51                   	push   ecx
c00131a5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	83 c4 0c             	add    esp,0xc
c00131ae:	c3                   	ret    
c00131af:	90                   	nop

c00131b0 <Directory::rename(char const*)>:
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	b8 0b 00 00 00       	mov    eax,0xb
c00131b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131c3:	80 f9 19             	cmp    cl,0x19
c00131c6:	77 32                	ja     c00131fa <Directory::rename(char const*)+0x4a>
c00131c8:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c00131cf:	85 c9                	test   ecx,ecx
c00131d1:	74 27                	je     c00131fa <Directory::rename(char const*)+0x4a>
c00131d3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131d9:	85 c9                	test   ecx,ecx
c00131db:	74 1d                	je     c00131fa <Directory::rename(char const*)+0x4a>
c00131dd:	b8 06 00 00 00       	mov    eax,0x6
c00131e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e6:	75 12                	jne    c00131fa <Directory::rename(char const*)+0x4a>
c00131e8:	83 c2 0d             	add    edx,0xd
c00131eb:	50                   	push   eax
c00131ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131f2:	52                   	push   edx
c00131f3:	51                   	push   ecx
c00131f4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131f7:	83 c4 10             	add    esp,0x10
c00131fa:	83 c4 0c             	add    esp,0xc
c00131fd:	c3                   	ret    

c00131fe <Directory::exists()>:
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	31 c0                	xor    eax,eax
c0013203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013207:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001320e:	80 f9 19             	cmp    cl,0x19
c0013211:	77 24                	ja     c0013237 <Directory::exists()+0x39>
c0013213:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c001321a:	85 c9                	test   ecx,ecx
c001321c:	74 19                	je     c0013237 <Directory::exists()+0x39>
c001321e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013224:	85 c9                	test   ecx,ecx
c0013226:	74 0f                	je     c0013237 <Directory::exists()+0x39>
c0013228:	83 c2 0d             	add    edx,0xd
c001322b:	50                   	push   eax
c001322c:	50                   	push   eax
c001322d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001322f:	52                   	push   edx
c0013230:	51                   	push   ecx
c0013231:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	83 c4 0c             	add    esp,0xc
c001323a:	c3                   	ret    
c001323b:	90                   	nop

c001323c <Directory::read(dirent*)>:
c001323c:	83 ec 1c             	sub    esp,0x1c
c001323f:	b8 0b 00 00 00       	mov    eax,0xb
c0013244:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013248:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001324f:	80 fa 19             	cmp    dl,0x19
c0013252:	77 30                	ja     c0013284 <Directory::read(dirent*)+0x48>
c0013254:	8b 14 95 a0 af 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5060]
c001325b:	85 d2                	test   edx,edx
c001325d:	74 25                	je     c0013284 <Directory::read(dirent*)+0x48>
c001325f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013266:	74 1c                	je     c0013284 <Directory::read(dirent*)+0x48>
c0013268:	83 ec 0c             	sub    esp,0xc
c001326b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001326d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013271:	52                   	push   edx
c0013272:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013276:	6a 00                	push   0x0
c0013278:	68 10 01 00 00       	push   0x110
c001327d:	51                   	push   ecx
c001327e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013281:	83 c4 20             	add    esp,0x20
c0013284:	83 c4 1c             	add    esp,0x1c
c0013287:	c3                   	ret    

c0013288 <Directory::create()>:
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	b8 0b 00 00 00       	mov    eax,0xb
c0013290:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013294:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001329b:	80 f9 19             	cmp    cl,0x19
c001329e:	77 2f                	ja     c00132cf <Directory::create()+0x47>
c00132a0:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c00132a7:	85 c9                	test   ecx,ecx
c00132a9:	74 24                	je     c00132cf <Directory::create()+0x47>
c00132ab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b1:	85 c9                	test   ecx,ecx
c00132b3:	74 1a                	je     c00132cf <Directory::create()+0x47>
c00132b5:	b8 06 00 00 00       	mov    eax,0x6
c00132ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132be:	75 0f                	jne    c00132cf <Directory::create()+0x47>
c00132c0:	83 c2 0d             	add    edx,0xd
c00132c3:	50                   	push   eax
c00132c4:	50                   	push   eax
c00132c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c7:	52                   	push   edx
c00132c8:	51                   	push   ecx
c00132c9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00132cc:	83 c4 10             	add    esp,0x10
c00132cf:	83 c4 0c             	add    esp,0xc
c00132d2:	c3                   	ret    
c00132d3:	90                   	nop

c00132d4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00132d4:	b8 0a 00 00 00       	mov    eax,0xa
c00132d9:	c3                   	ret    

c00132da <Bus::Bus(char const*)>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e1:	83 ec 08             	sub    esp,0x8
c00132e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e8:	50                   	push   eax
c00132e9:	e8 30 09 00 00       	call   c0013c1e <Device::Device(char const*)>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	ba e8 78 02 c0       	mov    edx,0xc00278e8
c00132f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fa:	89 10                	mov    DWORD PTR [eax],edx
c00132fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013300:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001330a:	90                   	nop
c001330b:	83 c4 0c             	add    esp,0xc
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Bus::~Bus()>:
c0013310:	83 ec 0c             	sub    esp,0xc
c0013313:	ba e8 78 02 c0       	mov    edx,0xc00278e8
c0013318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331c:	89 10                	mov    DWORD PTR [eax],edx
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	50                   	push   eax
c0013326:	e8 d5 05 00 00       	call   c0013900 <Device::~Device()>
c001332b:	83 c4 10             	add    esp,0x10
c001332e:	90                   	nop
c001332f:	83 c4 0c             	add    esp,0xc
c0013332:	c3                   	ret    
c0013333:	90                   	nop

c0013334 <Bus::~Bus()>:
c0013334:	83 ec 0c             	sub    esp,0xc
c0013337:	83 ec 0c             	sub    esp,0xc
c001333a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333e:	e8 cd ff ff ff       	call   c0013310 <Bus::~Bus()>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	83 ec 08             	sub    esp,0x8
c0013349:	68 58 01 00 00       	push   0x158
c001334e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013352:	e8 08 f2 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	83 c4 0c             	add    esp,0xc
c001335d:	c3                   	ret    

c001335e <Buzzer::Buzzer(char const*)>:
c001335e:	83 ec 0c             	sub    esp,0xc
c0013361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013365:	83 ec 08             	sub    esp,0x8
c0013368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001336c:	50                   	push   eax
c001336d:	e8 ac 08 00 00       	call   c0013c1e <Device::Device(char const*)>
c0013372:	83 c4 10             	add    esp,0x10
c0013375:	ba 14 79 02 c0       	mov    edx,0xc0027914
c001337a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337e:	89 10                	mov    DWORD PTR [eax],edx
c0013380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013384:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001338e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013392:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001339c:	90                   	nop
c001339d:	83 c4 0c             	add    esp,0xc
c00133a0:	c3                   	ret    
c00133a1:	90                   	nop

c00133a2 <Buzzer::~Buzzer()>:
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	ba 14 79 02 c0       	mov    edx,0xc0027914
c00133aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ae:	89 10                	mov    DWORD PTR [eax],edx
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	50                   	push   eax
c00133b8:	e8 43 05 00 00       	call   c0013900 <Device::~Device()>
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	90                   	nop
c00133c1:	83 c4 0c             	add    esp,0xc
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop

c00133c6 <Buzzer::~Buzzer()>:
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	83 ec 0c             	sub    esp,0xc
c00133cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d0:	e8 cd ff ff ff       	call   c00133a2 <Buzzer::~Buzzer()>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	83 ec 08             	sub    esp,0x8
c00133db:	68 5c 01 00 00       	push   0x15c
c00133e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e4:	e8 76 f1 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	83 c4 0c             	add    esp,0xc
c00133ef:	c3                   	ret    

c00133f0 <Buzzer::stop()>:
c00133f0:	83 ec 14             	sub    esp,0x14
c00133f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00133f9:	6a 00                	push   0x0
c00133fb:	50                   	push   eax
c00133fc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00133ff:	83 c4 1c             	add    esp,0x1c
c0013402:	c3                   	ret    

c0013403 <beepThread(void*)>:
c0013403:	53                   	push   ebx
c0013404:	83 ec 08             	sub    esp,0x8
c0013407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001340b:	e8 01 8a 00 00       	call   c001be11 <unlockScheduler()>
c0013410:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013415:	52                   	push   edx
c0013416:	52                   	push   edx
c0013417:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001341d:	52                   	push   edx
c001341e:	50                   	push   eax
c001341f:	e8 3a 8f 00 00       	call   c001c35e <nanoSleep(unsigned long long)>
c0013424:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013427:	e8 c4 ff ff ff       	call   c00133f0 <Buzzer::stop()>
c001342c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013434:	83 c4 18             	add    esp,0x18
c0013437:	5b                   	pop    ebx
c0013438:	e9 67 8e 00 00       	jmp    c001c2a4 <blockTask(TaskState)>
c001343d:	90                   	nop

c001343e <Buzzer::beep(int, int, bool)>:
c001343e:	57                   	push   edi
c001343f:	56                   	push   esi
c0013440:	53                   	push   ebx
c0013441:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013445:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001344d:	52                   	push   edx
c001344e:	52                   	push   edx
c001344f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013455:	56                   	push   esi
c0013456:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	89 f8                	mov    eax,edi
c001345e:	84 c0                	test   al,al
c0013460:	74 1f                	je     c0013481 <Buzzer::beep(int, int, bool)+0x43>
c0013462:	50                   	push   eax
c0013463:	50                   	push   eax
c0013464:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001346a:	99                   	cdq    
c001346b:	52                   	push   edx
c001346c:	50                   	push   eax
c001346d:	e8 ec 8e 00 00       	call   c001c35e <nanoSleep(unsigned long long)>
c0013472:	83 c4 10             	add    esp,0x10
c0013475:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013479:	5b                   	pop    ebx
c001347a:	5e                   	pop    esi
c001347b:	5f                   	pop    edi
c001347c:	e9 6f ff ff ff       	jmp    c00133f0 <Buzzer::stop()>
c0013481:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013487:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001348c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013494:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013498:	c7 44 24 14 03 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013403
c00134a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134a4:	5b                   	pop    ebx
c00134a5:	5e                   	pop    esi
c00134a6:	5f                   	pop    edi
c00134a7:	e9 94 8a 00 00       	jmp    c001bf40 <Process::createThread(void (*)(void*), void*, int)>

c00134ac <loadClockSettings()>:
c00134ac:	c7 05 14 ab 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002ab14,0xa
c00134b6:	c6 05 11 ab 02 c0 00 	mov    BYTE PTR ds:0xc002ab11,0x0
c00134bd:	c6 05 10 ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab10,0x1
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <Clock::Clock(char const*)>:
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cd:	83 ec 08             	sub    esp,0x8
c00134d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d4:	50                   	push   eax
c00134d5:	e8 44 07 00 00       	call   c0013c1e <Device::Device(char const*)>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	ba 44 79 02 c0       	mov    edx,0xc0027944
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	89 10                	mov    DWORD PTR [eax],edx
c00134e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134f6:	90                   	nop
c00134f7:	83 c4 0c             	add    esp,0xc
c00134fa:	c3                   	ret    
c00134fb:	90                   	nop

c00134fc <Clock::~Clock()>:
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	ba 44 79 02 c0       	mov    edx,0xc0027944
c0013504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013508:	89 10                	mov    DWORD PTR [eax],edx
c001350a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	50                   	push   eax
c0013512:	e8 e9 03 00 00       	call   c0013900 <Device::~Device()>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	90                   	nop
c001351b:	83 c4 0c             	add    esp,0xc
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <Clock::~Clock()>:
c0013520:	83 ec 0c             	sub    esp,0xc
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352a:	e8 cd ff ff ff       	call   c00134fc <Clock::~Clock()>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	83 ec 08             	sub    esp,0x8
c0013535:	68 58 01 00 00       	push   0x158
c001353a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353e:	e8 1c f0 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	83 c4 0c             	add    esp,0xc
c0013549:	c3                   	ret    

c001354a <Clock::timeInSecondsLocal()>:
c001354a:	53                   	push   ebx
c001354b:	83 ec 14             	sub    esp,0x14
c001354e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013552:	8b 10                	mov    edx,DWORD PTR [eax]
c0013554:	50                   	push   eax
c0013555:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013558:	0f b6 0d 10 ab 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ab10
c001355f:	03 0d 14 ab 02 c0    	add    ecx,DWORD PTR ds:0xc002ab14
c0013565:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001356b:	89 cb                	mov    ebx,ecx
c001356d:	c1 fb 1f             	sar    ebx,0x1f
c0013570:	01 c8                	add    eax,ecx
c0013572:	11 da                	adc    edx,ebx
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	31 c9                	xor    ecx,ecx
c0013579:	80 3d 11 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab11,0x0
c0013580:	74 05                	je     c0013587 <Clock::timeInSecondsLocal()+0x3d>
c0013582:	b9 08 07 00 00       	mov    ecx,0x708
c0013587:	31 db                	xor    ebx,ebx
c0013589:	01 c8                	add    eax,ecx
c001358b:	11 da                	adc    edx,ebx
c001358d:	83 c4 08             	add    esp,0x8
c0013590:	5b                   	pop    ebx
c0013591:	c3                   	ret    

c0013592 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013592:	57                   	push   edi
c0013593:	56                   	push   esi
c0013594:	53                   	push   ebx
c0013595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013599:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001359d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001359f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135a3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135a6:	0f b6 05 10 ab 02 c0 	movzx  eax,BYTE PTR ds:0xc002ab10
c00135ad:	03 05 14 ab 02 c0    	add    eax,DWORD PTR ds:0xc002ab14
c00135b3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135b9:	99                   	cdq    
c00135ba:	29 c6                	sub    esi,eax
c00135bc:	19 d7                	sbb    edi,edx
c00135be:	89 f0                	mov    eax,esi
c00135c0:	89 fa                	mov    edx,edi
c00135c2:	31 f6                	xor    esi,esi
c00135c4:	80 3d 11 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab11,0x0
c00135cb:	74 05                	je     c00135d2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135cd:	be 08 07 00 00       	mov    esi,0x708
c00135d2:	31 ff                	xor    edi,edi
c00135d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135d8:	29 f0                	sub    eax,esi
c00135da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135de:	19 fa                	sbb    edx,edi
c00135e0:	89 d8                	mov    eax,ebx
c00135e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135e6:	5b                   	pop    ebx
c00135e7:	5e                   	pop    esi
c00135e8:	5f                   	pop    edi
c00135e9:	ff e0                	jmp    eax

c00135eb <datetimeToSeconds(datetime_t)>:
c00135eb:	55                   	push   ebp
c00135ec:	57                   	push   edi
c00135ed:	56                   	push   esi
c00135ee:	53                   	push   ebx
c00135ef:	83 ec 14             	sub    esp,0x14
c00135f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135f6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135fa:	89 d3                	mov    ebx,edx
c00135fc:	0f b6 c6             	movzx  eax,dh
c00135ff:	c1 eb 10             	shr    ebx,0x10
c0013602:	48                   	dec    eax
c0013603:	66 81 eb 6c 07       	sub    bx,0x76c
c0013608:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001360c:	0f b6 f5             	movzx  esi,ch
c001360f:	89 cf                	mov    edi,ecx
c0013611:	6b f6 3c             	imul   esi,esi,0x3c
c0013614:	c1 ef 10             	shr    edi,0x10
c0013617:	0f b6 c9             	movzx  ecx,cl
c001361a:	89 f8                	mov    eax,edi
c001361c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013622:	0f b6 f8             	movzx  edi,al
c0013625:	0f b6 d2             	movzx  edx,dl
c0013628:	01 fe                	add    esi,edi
c001362a:	01 f1                	add    ecx,esi
c001362c:	0f b7 f3             	movzx  esi,bx
c001362f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013633:	c1 f9 1f             	sar    ecx,0x1f
c0013636:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001363b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001363f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013644:	8b 0c 8d 80 79 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8680]
c001364b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001364f:	76 29                	jbe    c001367a <datetimeToSeconds(datetime_t)+0x8f>
c0013651:	f6 c3 03             	test   bl,0x3
c0013654:	75 24                	jne    c001367a <datetimeToSeconds(datetime_t)+0x8f>
c0013656:	31 d2                	xor    edx,edx
c0013658:	bf 64 00 00 00       	mov    edi,0x64
c001365d:	89 d8                	mov    eax,ebx
c001365f:	66 f7 f7             	div    di
c0013662:	66 85 d2             	test   dx,dx
c0013665:	75 12                	jne    c0013679 <datetimeToSeconds(datetime_t)+0x8e>
c0013667:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001366d:	bf 90 01 00 00       	mov    edi,0x190
c0013672:	99                   	cdq    
c0013673:	f7 ff                	idiv   edi
c0013675:	85 d2                	test   edx,edx
c0013677:	75 01                	jne    c001367a <datetimeToSeconds(datetime_t)+0x8f>
c0013679:	41                   	inc    ecx
c001367a:	66 83 fb 46          	cmp    bx,0x46
c001367e:	76 45                	jbe    c00136c5 <datetimeToSeconds(datetime_t)+0xda>
c0013680:	bb 46 00 00 00       	mov    ebx,0x46
c0013685:	bf 64 00 00 00       	mov    edi,0x64
c001368a:	bd 90 01 00 00       	mov    ebp,0x190
c001368f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013694:	f6 c3 03             	test   bl,0x3
c0013697:	75 23                	jne    c00136bc <datetimeToSeconds(datetime_t)+0xd1>
c0013699:	89 d8                	mov    eax,ebx
c001369b:	99                   	cdq    
c001369c:	f7 ff                	idiv   edi
c001369e:	b8 6e 01 00 00       	mov    eax,0x16e
c00136a3:	85 d2                	test   edx,edx
c00136a5:	75 15                	jne    c00136bc <datetimeToSeconds(datetime_t)+0xd1>
c00136a7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136ad:	99                   	cdq    
c00136ae:	f7 fd                	idiv   ebp
c00136b0:	83 fa 01             	cmp    edx,0x1
c00136b3:	19 c0                	sbb    eax,eax
c00136b5:	f7 d0                	not    eax
c00136b7:	05 6e 01 00 00       	add    eax,0x16e
c00136bc:	01 c1                	add    ecx,eax
c00136be:	43                   	inc    ebx
c00136bf:	39 f3                	cmp    ebx,esi
c00136c1:	7c cc                	jl     c001368f <datetimeToSeconds(datetime_t)+0xa4>
c00136c3:	eb 35                	jmp    c00136fa <datetimeToSeconds(datetime_t)+0x10f>
c00136c5:	74 33                	je     c00136fa <datetimeToSeconds(datetime_t)+0x10f>
c00136c7:	b8 45 00 00 00       	mov    eax,0x45
c00136cc:	89 c2                	mov    edx,eax
c00136ce:	83 e2 03             	and    edx,0x3
c00136d1:	39 f0                	cmp    eax,esi
c00136d3:	7e 0f                	jle    c00136e4 <datetimeToSeconds(datetime_t)+0xf9>
c00136d5:	83 fa 01             	cmp    edx,0x1
c00136d8:	19 d2                	sbb    edx,edx
c00136da:	48                   	dec    eax
c00136db:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136e2:	eb e8                	jmp    c00136cc <datetimeToSeconds(datetime_t)+0xe1>
c00136e4:	b8 6d 01 00 00       	mov    eax,0x16d
c00136e9:	85 d2                	test   edx,edx
c00136eb:	75 0b                	jne    c00136f8 <datetimeToSeconds(datetime_t)+0x10d>
c00136ed:	66 83 fb 01          	cmp    bx,0x1
c00136f1:	19 c0                	sbb    eax,eax
c00136f3:	05 6e 01 00 00       	add    eax,0x16e
c00136f8:	29 c1                	sub    ecx,eax
c00136fa:	b8 80 51 01 00       	mov    eax,0x15180
c00136ff:	f7 e9                	imul   ecx
c0013701:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013705:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013709:	83 c4 14             	add    esp,0x14
c001370c:	5b                   	pop    ebx
c001370d:	5e                   	pop    esi
c001370e:	5f                   	pop    edi
c001370f:	5d                   	pop    ebp
c0013710:	c3                   	ret    
c0013711:	90                   	nop

c0013712 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013712:	57                   	push   edi
c0013713:	56                   	push   esi
c0013714:	53                   	push   ebx
c0013715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013719:	8b 06                	mov    eax,DWORD PTR [esi]
c001371b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001371e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013722:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013726:	e8 c0 fe ff ff       	call   c00135eb <datetimeToSeconds(datetime_t)>
c001372b:	59                   	pop    ecx
c001372c:	0f b6 0d 10 ab 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ab10
c0013733:	5b                   	pop    ebx
c0013734:	03 0d 14 ab 02 c0    	add    ecx,DWORD PTR ds:0xc002ab14
c001373a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013740:	89 cb                	mov    ebx,ecx
c0013742:	c1 fb 1f             	sar    ebx,0x1f
c0013745:	29 c8                	sub    eax,ecx
c0013747:	19 da                	sbb    edx,ebx
c0013749:	31 c9                	xor    ecx,ecx
c001374b:	80 3d 11 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab11,0x0
c0013752:	74 05                	je     c0013759 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013754:	b9 08 07 00 00       	mov    ecx,0x708
c0013759:	31 db                	xor    ebx,ebx
c001375b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001375f:	29 c8                	sub    eax,ecx
c0013761:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013765:	19 da                	sbb    edx,ebx
c0013767:	89 f8                	mov    eax,edi
c0013769:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001376d:	5b                   	pop    ebx
c001376e:	5e                   	pop    esi
c001376f:	5f                   	pop    edi
c0013770:	ff e0                	jmp    eax

c0013772 <secondsToDatetime(unsigned long long)>:
c0013772:	55                   	push   ebp
c0013773:	57                   	push   edi
c0013774:	56                   	push   esi
c0013775:	53                   	push   ebx
c0013776:	83 ec 1c             	sub    esp,0x1c
c0013779:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001377d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013781:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013785:	6a 00                	push   0x0
c0013787:	68 80 51 01 00       	push   0x15180
c001378c:	55                   	push   ebp
c001378d:	57                   	push   edi
c001378e:	e8 e9 01 01 00       	call   c002397c <__udivdi3>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001379c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137a0:	6a 00                	push   0x0
c00137a2:	68 80 51 01 00       	push   0x15180
c00137a7:	55                   	push   ebp
c00137a8:	57                   	push   edi
c00137a9:	bf 10 0e 00 00       	mov    edi,0xe10
c00137ae:	e8 c9 02 01 00       	call   c0023a7c <__umoddi3>
c00137b3:	83 c4 10             	add    esp,0x10
c00137b6:	99                   	cdq    
c00137b7:	f7 ff                	idiv   edi
c00137b9:	bf 3c 00 00 00       	mov    edi,0x3c
c00137be:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137c1:	89 d0                	mov    eax,edx
c00137c3:	99                   	cdq    
c00137c4:	f7 ff                	idiv   edi
c00137c6:	85 db                	test   ebx,ebx
c00137c8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137cb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137ce:	79 11                	jns    c00137e1 <secondsToDatetime(unsigned long long)+0x6f>
c00137d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137d4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137da:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137df:	eb 07                	jmp    c00137e8 <secondsToDatetime(unsigned long long)+0x76>
c00137e1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137e6:	89 d8                	mov    eax,ebx
c00137e8:	bf b4 05 00 00       	mov    edi,0x5b4
c00137ed:	99                   	cdq    
c00137ee:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137f3:	f7 f9                	idiv   ecx
c00137f5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137fe:	31 d2                	xor    edx,edx
c0013800:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013808:	01 c3                	add    ebx,eax
c001380a:	89 d8                	mov    eax,ebx
c001380c:	f7 f1                	div    ecx
c001380e:	31 d2                	xor    edx,edx
c0013810:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013813:	89 d8                	mov    eax,ebx
c0013815:	f7 f7                	div    edi
c0013817:	31 d2                	xor    edx,edx
c0013819:	29 c1                	sub    ecx,eax
c001381b:	89 d8                	mov    eax,ebx
c001381d:	f7 f5                	div    ebp
c001381f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013824:	29 c1                	sub    ecx,eax
c0013826:	31 d2                	xor    edx,edx
c0013828:	89 c8                	mov    eax,ecx
c001382a:	f7 f5                	div    ebp
c001382c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013831:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013835:	31 d2                	xor    edx,edx
c0013837:	89 c8                	mov    eax,ecx
c0013839:	f7 f5                	div    ebp
c001383b:	31 d2                	xor    edx,edx
c001383d:	01 c3                	add    ebx,eax
c001383f:	89 c8                	mov    eax,ecx
c0013841:	f7 f7                	div    edi
c0013843:	bf 99 00 00 00       	mov    edi,0x99
c0013848:	29 c3                	sub    ebx,eax
c001384a:	31 d2                	xor    edx,edx
c001384c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013854:	29 c3                	sub    ebx,eax
c0013856:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013859:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001385c:	bb 05 00 00 00       	mov    ebx,0x5
c0013861:	83 c1 02             	add    ecx,0x2
c0013864:	89 c8                	mov    eax,ecx
c0013866:	f7 f7                	div    edi
c0013868:	31 d2                	xor    edx,edx
c001386a:	89 c7                	mov    edi,eax
c001386c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013872:	83 c0 02             	add    eax,0x2
c0013875:	f7 f3                	div    ebx
c0013877:	89 eb                	mov    ebx,ebp
c0013879:	29 c3                	sub    ebx,eax
c001387b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013881:	88 1e                	mov    BYTE PTR [esi],bl
c0013883:	19 c0                	sbb    eax,eax
c0013885:	31 d2                	xor    edx,edx
c0013887:	83 e0 0c             	and    eax,0xc
c001388a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001388e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013896:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001389a:	83 f9 01             	cmp    ecx,0x1
c001389d:	0f 96 c2             	setbe  dl
c00138a0:	41                   	inc    ecx
c00138a1:	01 d0                	add    eax,edx
c00138a3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138a6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138aa:	83 c4 1c             	add    esp,0x1c
c00138ad:	89 f0                	mov    eax,esi
c00138af:	5b                   	pop    ebx
c00138b0:	5e                   	pop    esi
c00138b1:	5f                   	pop    edi
c00138b2:	5d                   	pop    ebp
c00138b3:	c2 04 00             	ret    0x4

c00138b6 <Clock::timeInDatetimeLocal()>:
c00138b6:	53                   	push   ebx
c00138b7:	83 ec 14             	sub    esp,0x14
c00138ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138c2:	e8 83 fc ff ff       	call   c001354a <Clock::timeInSecondsLocal()>
c00138c7:	83 c4 0c             	add    esp,0xc
c00138ca:	52                   	push   edx
c00138cb:	50                   	push   eax
c00138cc:	53                   	push   ebx
c00138cd:	e8 a0 fe ff ff       	call   c0013772 <secondsToDatetime(unsigned long long)>
c00138d2:	89 d8                	mov    eax,ebx
c00138d4:	83 c4 14             	add    esp,0x14
c00138d7:	5b                   	pop    ebx
c00138d8:	c2 04 00             	ret    0x4
c00138db:	90                   	nop

c00138dc <Device::hibernate()>:
c00138dc:	c3                   	ret    
c00138dd:	90                   	nop

c00138de <Device::wake()>:
c00138de:	c3                   	ret    
c00138df:	90                   	nop

c00138e0 <Device::detect()>:
c00138e0:	c3                   	ret    
c00138e1:	90                   	nop

c00138e2 <Device::disableLegacy()>:
c00138e2:	c3                   	ret    
c00138e3:	90                   	nop

c00138e4 <Device::powerSaving(PowerSavingLevel)>:
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <DriverlessDevice::close(int, int, void*)>:
c00138e6:	31 c0                	xor    eax,eax
c00138e8:	c3                   	ret    
c00138e9:	90                   	nop

c00138ea <DriverlessDevice::detect()>:
c00138ea:	c3                   	ret    
c00138eb:	90                   	nop

c00138ec <DriverlessDevice::open(int, int, void*)>:
c00138ec:	83 ec 18             	sub    esp,0x18
c00138ef:	68 b0 79 02 c0       	push   0xc00279b0
c00138f4:	e8 0a 55 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00138f9:	83 c8 ff             	or     eax,0xffffffff
c00138fc:	83 c4 1c             	add    esp,0x1c
c00138ff:	c3                   	ret    

c0013900 <Device::~Device()>:
c0013900:	ba d8 79 02 c0       	mov    edx,0xc00279d8
c0013905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013909:	89 10                	mov    DWORD PTR [eax],edx
c001390b:	90                   	nop
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <Device::~Device()>:
c001390e:	83 ec 0c             	sub    esp,0xc
c0013911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013915:	e8 e6 ff ff ff       	call   c0013900 <Device::~Device()>
c001391a:	83 c4 04             	add    esp,0x4
c001391d:	83 ec 08             	sub    esp,0x8
c0013920:	68 58 01 00 00       	push   0x158
c0013925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013929:	e8 31 ec ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	83 c4 0c             	add    esp,0xc
c0013934:	c3                   	ret    
c0013935:	90                   	nop

c0013936 <Device::findAndLoadDriver()>:
c0013936:	c3                   	ret    
c0013937:	90                   	nop

c0013938 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013938:	57                   	push   edi
c0013939:	b9 09 00 00 00       	mov    ecx,0x9
c001393e:	56                   	push   esi
c001393f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013943:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013947:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013951:	81 c7 18 01 00 00    	add    edi,0x118
c0013957:	fc                   	cld    
c0013958:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001395a:	5e                   	pop    esi
c001395b:	5f                   	pop    edi
c001395c:	c3                   	ret    
c001395d:	90                   	nop

c001395e <Device::preOpenACPI(void*, char*, char*)>:
c001395e:	56                   	push   esi
c001395f:	53                   	push   ebx
c0013960:	83 ec 08             	sub    esp,0x8
c0013963:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013967:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001396b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013975:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013979:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001397f:	6a 1e                	push   0x1e
c0013981:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013987:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001398b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013991:	50                   	push   eax
c0013992:	e8 b0 cc fe ff       	call   c0000647 <memcpy>
c0013997:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001399b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001399f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139a7:	83 c4 14             	add    esp,0x14
c00139aa:	5b                   	pop    ebx
c00139ab:	5e                   	pop    esi
c00139ac:	e9 96 cc fe ff       	jmp    c0000647 <memcpy>
c00139b1:	90                   	nop

c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139c2:	75 0b                	jne    c00139cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00139c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00139c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139cd:	eb 1e                	jmp    c00139ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139cf:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00139d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139ed:	ff e0                	jmp    eax
c00139ef:	90                   	nop

c00139f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139f9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a00:	75 0b                	jne    c0013a0d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a08:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a0b:	eb 1e                	jmp    c0013a2b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a0d:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0013a12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a18:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a1e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a28:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a2b:	ff e0                	jmp    eax
c0013a2d:	90                   	nop

c0013a2e <Device::addChild(Device*)>:
c0013a2e:	53                   	push   ebx
c0013a2f:	83 ec 08             	sub    esp,0x8
c0013a32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a3a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a40:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a46:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a48:	85 d2                	test   edx,edx
c0013a4a:	74 04                	je     c0013a50 <Device::addChild(Device*)+0x22>
c0013a4c:	89 d3                	mov    ebx,edx
c0013a4e:	eb f6                	jmp    c0013a46 <Device::addChild(Device*)+0x18>
c0013a50:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a53:	83 ec 0c             	sub    esp,0xc
c0013a56:	6a 08                	push   0x8
c0013a58:	e8 6f ba ff ff       	call   c000f4cc <malloc>
c0013a5d:	89 03                	mov    DWORD PTR [ebx],eax
c0013a5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a6c:	83 c4 18             	add    esp,0x18
c0013a6f:	5b                   	pop    ebx
c0013a70:	c3                   	ret    
c0013a71:	90                   	nop

c0013a72 <Device::removeAllChildren()>:
c0013a72:	56                   	push   esi
c0013a73:	53                   	push   ebx
c0013a74:	52                   	push   edx
c0013a75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a79:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a82:	74 17                	je     c0013a9b <Device::removeAllChildren()+0x29>
c0013a84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a87:	85 c0                	test   eax,eax
c0013a89:	74 0c                	je     c0013a97 <Device::removeAllChildren()+0x25>
c0013a8b:	83 ec 0c             	sub    esp,0xc
c0013a8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a90:	50                   	push   eax
c0013a91:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a99:	eb e4                	jmp    c0013a7f <Device::removeAllChildren()+0xd>
c0013a9b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aa1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aa7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ab4:	58                   	pop    eax
c0013ab5:	5b                   	pop    ebx
c0013ab6:	5e                   	pop    esi
c0013ab7:	c3                   	ret    

c0013ab8 <Device::hibernateAll()>:
c0013ab8:	53                   	push   ebx
c0013ab9:	83 ec 14             	sub    esp,0x14
c0013abc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ac0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ac2:	53                   	push   ebx
c0013ac3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013ac6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013acc:	83 c4 10             	add    esp,0x10
c0013acf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad2:	74 0f                	je     c0013ae3 <Device::hibernateAll()+0x2b>
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ada:	e8 d9 ff ff ff       	call   c0013ab8 <Device::hibernateAll()>
c0013adf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae1:	eb e9                	jmp    c0013acc <Device::hibernateAll()+0x14>
c0013ae3:	83 c4 08             	add    esp,0x8
c0013ae6:	5b                   	pop    ebx
c0013ae7:	c3                   	ret    

c0013ae8 <Device::wakeAll()>:
c0013ae8:	53                   	push   ebx
c0013ae9:	83 ec 14             	sub    esp,0x14
c0013aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af2:	53                   	push   ebx
c0013af3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013af6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b02:	74 0f                	je     c0013b13 <Device::wakeAll()+0x2b>
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b0a:	e8 d9 ff ff ff       	call   c0013ae8 <Device::wakeAll()>
c0013b0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b11:	eb e9                	jmp    c0013afc <Device::wakeAll()+0x14>
c0013b13:	83 c4 08             	add    esp,0x8
c0013b16:	5b                   	pop    ebx
c0013b17:	c3                   	ret    

c0013b18 <Device::detectAll()>:
c0013b18:	53                   	push   ebx
c0013b19:	83 ec 14             	sub    esp,0x14
c0013b1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b22:	53                   	push   ebx
c0013b23:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b32:	74 0f                	je     c0013b43 <Device::detectAll()+0x2b>
c0013b34:	83 ec 0c             	sub    esp,0xc
c0013b37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b3a:	e8 d9 ff ff ff       	call   c0013b18 <Device::detectAll()>
c0013b3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b41:	eb e9                	jmp    c0013b2c <Device::detectAll()+0x14>
c0013b43:	83 c4 08             	add    esp,0x8
c0013b46:	5b                   	pop    ebx
c0013b47:	c3                   	ret    

c0013b48 <Device::disableLegacyAll()>:
c0013b48:	53                   	push   ebx
c0013b49:	83 ec 14             	sub    esp,0x14
c0013b4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b52:	53                   	push   ebx
c0013b53:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b56:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b5c:	83 c4 10             	add    esp,0x10
c0013b5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b62:	74 0f                	je     c0013b73 <Device::disableLegacyAll()+0x2b>
c0013b64:	83 ec 0c             	sub    esp,0xc
c0013b67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b6a:	e8 d9 ff ff ff       	call   c0013b48 <Device::disableLegacyAll()>
c0013b6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b71:	eb e9                	jmp    c0013b5c <Device::disableLegacyAll()+0x14>
c0013b73:	83 c4 08             	add    esp,0x8
c0013b76:	5b                   	pop    ebx
c0013b77:	c3                   	ret    

c0013b78 <Device::loadDriversForAll()>:
c0013b78:	53                   	push   ebx
c0013b79:	83 ec 08             	sub    esp,0x8
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013b86:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013b88:	85 db                	test   ebx,ebx
c0013b8a:	74 12                	je     c0013b9e <Device::loadDriversForAll()+0x26>
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013b92:	e8 e1 ff ff ff       	call   c0013b78 <Device::loadDriversForAll()>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	89 d8                	mov    eax,ebx
c0013b9c:	eb e8                	jmp    c0013b86 <Device::loadDriversForAll()+0xe>
c0013b9e:	83 c4 08             	add    esp,0x8
c0013ba1:	5b                   	pop    ebx
c0013ba2:	c3                   	ret    
c0013ba3:	90                   	nop

c0013ba4 <Device::closeAll()>:
c0013ba4:	53                   	push   ebx
c0013ba5:	83 ec 08             	sub    esp,0x8
c0013ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bae:	6a 00                	push   0x0
c0013bb0:	6a 00                	push   0x0
c0013bb2:	6a 00                	push   0x0
c0013bb4:	53                   	push   ebx
c0013bb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc4:	74 0f                	je     c0013bd5 <Device::closeAll()+0x31>
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bcc:	e8 d3 ff ff ff       	call   c0013ba4 <Device::closeAll()>
c0013bd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd3:	eb e9                	jmp    c0013bbe <Device::closeAll()+0x1a>
c0013bd5:	83 c4 08             	add    esp,0x8
c0013bd8:	5b                   	pop    ebx
c0013bd9:	c3                   	ret    

c0013bda <Device::powerSavingAll(PowerSavingLevel)>:
c0013bda:	56                   	push   esi
c0013bdb:	53                   	push   ebx
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013be3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013be7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be9:	56                   	push   esi
c0013bea:	53                   	push   ebx
c0013beb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013bee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bf4:	83 c4 10             	add    esp,0x10
c0013bf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bfa:	74 0f                	je     c0013c0b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bfc:	52                   	push   edx
c0013bfd:	52                   	push   edx
c0013bfe:	56                   	push   esi
c0013bff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c02:	e8 d3 ff ff ff       	call   c0013bda <Device::powerSavingAll(PowerSavingLevel)>
c0013c07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c09:	eb e9                	jmp    c0013bf4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c0b:	58                   	pop    eax
c0013c0c:	5b                   	pop    ebx
c0013c0d:	5e                   	pop    esi
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <Device::setName(char const*)>:
c0013c10:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c18:	e9 ff ca fe ff       	jmp    c000071c <strcpy>
c0013c1d:	90                   	nop

c0013c1e <Device::Device(char const*)>:
c0013c1e:	83 ec 1c             	sub    esp,0x1c
c0013c21:	ba d8 79 02 c0       	mov    edx,0xc00279d8
c0013c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c2a:	89 10                	mov    DWORD PTR [eax],edx
c0013c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c30:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c4c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c5a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c64:	83 ec 08             	sub    esp,0x8
c0013c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c6f:	e8 9c ff ff ff       	call   c0013c10 <Device::setName(char const*)>
c0013c74:	83 c4 10             	add    esp,0x10
c0013c77:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c7f:	83 ec 0c             	sub    esp,0xc
c0013c82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c86:	e8 41 b8 ff ff       	call   c000f4cc <malloc>
c0013c8b:	83 c4 10             	add    esp,0x10
c0013c8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c9f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013caf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cca:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d14:	90                   	nop
c0013d15:	83 c4 1c             	add    esp,0x1c
c0013d18:	c3                   	ret    
c0013d19:	90                   	nop

c0013d1a <Device::getName()>:
c0013d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d1e:	05 d0 00 00 00       	add    eax,0xd0
c0013d23:	c3                   	ret    

c0013d24 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2b:	83 ec 08             	sub    esp,0x8
c0013d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d32:	50                   	push   eax
c0013d33:	e8 e6 fe ff ff       	call   c0013c1e <Device::Device(char const*)>
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	ba 04 7a 02 c0       	mov    edx,0xc0027a04
c0013d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d44:	89 10                	mov    DWORD PTR [eax],edx
c0013d46:	90                   	nop
c0013d47:	83 c4 0c             	add    esp,0xc
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d4c:	57                   	push   edi
c0013d4d:	56                   	push   esi
c0013d4e:	53                   	push   ebx
c0013d4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d5b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d61:	75 0c                	jne    c0013d6f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d63:	52                   	push   edx
c0013d64:	52                   	push   edx
c0013d65:	53                   	push   ebx
c0013d66:	56                   	push   esi
c0013d67:	e8 4e 1b 01 00       	call   c00258ba <LinkedList<Device>::addElement(Device*)>
c0013d6c:	83 c4 10             	add    esp,0x10
c0013d6f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d78:	74 12                	je     c0013d8c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d7a:	50                   	push   eax
c0013d7b:	57                   	push   edi
c0013d7c:	56                   	push   esi
c0013d7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d80:	e8 c7 ff ff ff       	call   c0013d4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d87:	83 c4 10             	add    esp,0x10
c0013d8a:	eb e9                	jmp    c0013d75 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d8c:	5b                   	pop    ebx
c0013d8d:	5e                   	pop    esi
c0013d8e:	5f                   	pop    edi
c0013d8f:	c3                   	ret    

c0013d90 <getDevicesOfType(DeviceType)>:
c0013d90:	53                   	push   ebx
c0013d91:	83 ec 14             	sub    esp,0x14
c0013d94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d98:	53                   	push   ebx
c0013d99:	e8 f8 1b 01 00       	call   c0025996 <LinkedList<Device>::LinkedList()>
c0013d9e:	83 c4 0c             	add    esp,0xc
c0013da1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013da5:	53                   	push   ebx
c0013da6:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c0013dac:	e8 9b ff ff ff       	call   c0013d4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013db1:	89 d8                	mov    eax,ebx
c0013db3:	83 c4 18             	add    esp,0x18
c0013db6:	5b                   	pop    ebx
c0013db7:	c2 04 00             	ret    0x4

c0013dba <HardDiskController::HardDiskController(char const*)>:
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc1:	83 ec 08             	sub    esp,0x8
c0013dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc8:	50                   	push   eax
c0013dc9:	e8 50 fe ff ff       	call   c0013c1e <Device::Device(char const*)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	ba 30 7a 02 c0       	mov    edx,0xc0027a30
c0013dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dda:	89 10                	mov    DWORD PTR [eax],edx
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013dea:	90                   	nop
c0013deb:	83 c4 0c             	add    esp,0xc
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <HardDiskController::~HardDiskController()>:
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ba 30 7a 02 c0       	mov    edx,0xc0027a30
c0013df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfc:	89 10                	mov    DWORD PTR [eax],edx
c0013dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	50                   	push   eax
c0013e06:	e8 f5 fa ff ff       	call   c0013900 <Device::~Device()>
c0013e0b:	83 c4 10             	add    esp,0x10
c0013e0e:	90                   	nop
c0013e0f:	83 c4 0c             	add    esp,0xc
c0013e12:	c3                   	ret    
c0013e13:	90                   	nop

c0013e14 <HardDiskController::~HardDiskController()>:
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	83 ec 0c             	sub    esp,0xc
c0013e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e1e:	e8 cd ff ff ff       	call   c0013df0 <HardDiskController::~HardDiskController()>
c0013e23:	83 c4 10             	add    esp,0x10
c0013e26:	83 ec 08             	sub    esp,0x8
c0013e29:	68 58 01 00 00       	push   0x158
c0013e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e32:	e8 28 e7 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0013e37:	83 c4 10             	add    esp,0x10
c0013e3a:	83 c4 0c             	add    esp,0xc
c0013e3d:	c3                   	ret    

c0013e3e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e45:	83 ec 08             	sub    esp,0x8
c0013e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4c:	50                   	push   eax
c0013e4d:	e8 cc fd ff ff       	call   c0013c1e <Device::Device(char const*)>
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	ba 5c 7a 02 c0       	mov    edx,0xc0027a5c
c0013e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5e:	89 10                	mov    DWORD PTR [eax],edx
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ea0:	90                   	nop
c0013ea1:	83 c4 0c             	add    esp,0xc
c0013ea4:	c3                   	ret    
c0013ea5:	90                   	nop

c0013ea6 <PhysicalDisk::startCache()>:
c0013ea6:	56                   	push   esi
c0013ea7:	53                   	push   ebx
c0013ea8:	83 ec 10             	sub    esp,0x10
c0013eab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eaf:	6a 30                	push   0x30
c0013eb1:	e8 16 b6 ff ff       	call   c000f4cc <malloc>
c0013eb6:	89 c6                	mov    esi,eax
c0013eb8:	58                   	pop    eax
c0013eb9:	5a                   	pop    edx
c0013eba:	53                   	push   ebx
c0013ebb:	56                   	push   esi
c0013ebc:	e8 df 24 00 00       	call   c00163a0 <VCache::VCache(PhysicalDisk*)>
c0013ec1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ec7:	83 c4 14             	add    esp,0x14
c0013eca:	5b                   	pop    ebx
c0013ecb:	5e                   	pop    esi
c0013ecc:	c3                   	ret    
c0013ecd:	90                   	nop

c0013ece <PhysicalDisk::~PhysicalDisk()>:
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	ba 5c 7a 02 c0       	mov    edx,0xc0027a5c
c0013ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eda:	89 10                	mov    DWORD PTR [eax],edx
c0013edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee0:	83 ec 0c             	sub    esp,0xc
c0013ee3:	50                   	push   eax
c0013ee4:	e8 17 fa ff ff       	call   c0013900 <Device::~Device()>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	90                   	nop
c0013eed:	83 c4 0c             	add    esp,0xc
c0013ef0:	c3                   	ret    
c0013ef1:	90                   	nop

c0013ef2 <PhysicalDisk::~PhysicalDisk()>:
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	83 ec 0c             	sub    esp,0xc
c0013ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013efc:	e8 cd ff ff ff       	call   c0013ece <PhysicalDisk::~PhysicalDisk()>
c0013f01:	83 c4 10             	add    esp,0x10
c0013f04:	83 ec 08             	sub    esp,0x8
c0013f07:	68 6c 01 00 00       	push   0x16c
c0013f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f10:	e8 4a e6 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0013f15:	83 c4 10             	add    esp,0x10
c0013f18:	83 c4 0c             	add    esp,0xc
c0013f1b:	c3                   	ret    

c0013f1c <FPU::FPU(char const*)>:
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f23:	83 ec 08             	sub    esp,0x8
c0013f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2a:	50                   	push   eax
c0013f2b:	e8 ee fc ff ff       	call   c0013c1e <Device::Device(char const*)>
c0013f30:	83 c4 10             	add    esp,0x10
c0013f33:	ba 9c 7a 02 c0       	mov    edx,0xc0027a9c
c0013f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3c:	89 10                	mov    DWORD PTR [eax],edx
c0013f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f42:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f4c:	90                   	nop
c0013f4d:	83 c4 0c             	add    esp,0xc
c0013f50:	c3                   	ret    
c0013f51:	90                   	nop

c0013f52 <FPU::~FPU()>:
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	ba 9c 7a 02 c0       	mov    edx,0xc0027a9c
c0013f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5e:	89 10                	mov    DWORD PTR [eax],edx
c0013f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	50                   	push   eax
c0013f68:	e8 93 f9 ff ff       	call   c0013900 <Device::~Device()>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	90                   	nop
c0013f71:	83 c4 0c             	add    esp,0xc
c0013f74:	c3                   	ret    
c0013f75:	90                   	nop

c0013f76 <FPU::~FPU()>:
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f80:	e8 cd ff ff ff       	call   c0013f52 <FPU::~FPU()>
c0013f85:	83 c4 10             	add    esp,0x10
c0013f88:	83 ec 08             	sub    esp,0x8
c0013f8b:	68 58 01 00 00       	push   0x158
c0013f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f94:	e8 c6 e5 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	83 c4 0c             	add    esp,0xc
c0013f9f:	c3                   	ret    

c0013fa0 <setupFPU()>:
c0013fa0:	53                   	push   ebx
c0013fa1:	83 ec 08             	sub    esp,0x8
c0013fa4:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c0013faa:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fb1:	74 19                	je     c0013fcc <setupFPU()+0x2c>
c0013fb3:	83 ec 0c             	sub    esp,0xc
c0013fb6:	68 58 01 00 00       	push   0x158
c0013fbb:	e8 0c b5 ff ff       	call   c000f4cc <malloc>
c0013fc0:	89 c3                	mov    ebx,eax
c0013fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fc5:	e8 48 e5 00 00       	call   c0022512 <AVX::AVX()>
c0013fca:	eb 5b                	jmp    c0014027 <setupFPU()+0x87>
c0013fcc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fd2:	84 c0                	test   al,al
c0013fd4:	79 19                	jns    c0013fef <setupFPU()+0x4f>
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	68 58 01 00 00       	push   0x158
c0013fde:	e8 e9 b4 ff ff       	call   c000f4cc <malloc>
c0013fe3:	89 c3                	mov    ebx,eax
c0013fe5:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fe8:	e8 4b e6 00 00       	call   c0022638 <SSE::SSE()>
c0013fed:	eb 38                	jmp    c0014027 <setupFPU()+0x87>
c0013fef:	a8 20                	test   al,0x20
c0013ff1:	74 19                	je     c001400c <setupFPU()+0x6c>
c0013ff3:	83 ec 0c             	sub    esp,0xc
c0013ff6:	68 58 01 00 00       	push   0x158
c0013ffb:	e8 cc b4 ff ff       	call   c000f4cc <malloc>
c0014000:	89 c3                	mov    ebx,eax
c0014002:	89 04 24             	mov    DWORD PTR [esp],eax
c0014005:	e8 98 e5 00 00       	call   c00225a2 <MMX::MMX()>
c001400a:	eb 1b                	jmp    c0014027 <setupFPU()+0x87>
c001400c:	a8 10                	test   al,0x10
c001400e:	74 1c                	je     c001402c <setupFPU()+0x8c>
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	68 58 01 00 00       	push   0x158
c0014018:	e8 af b4 ff ff       	call   c000f4cc <malloc>
c001401d:	89 c3                	mov    ebx,eax
c001401f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014022:	e8 9f e6 00 00       	call   c00226c6 <x87::x87()>
c0014027:	83 c4 10             	add    esp,0x10
c001402a:	eb 24                	jmp    c0014050 <setupFPU()+0xb0>
c001402c:	83 e0 ef             	and    eax,0xffffffef
c001402f:	83 ec 0c             	sub    esp,0xc
c0014032:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014038:	68 88 7a 02 c0       	push   0xc0027a88
c001403d:	e8 fd e5 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014042:	0f 20 c0             	mov    eax,cr0
c0014045:	83 c8 04             	or     eax,0x4
c0014048:	0f 22 c0             	mov    cr0,eax
c001404b:	31 db                	xor    ebx,ebx
c001404d:	83 c4 10             	add    esp,0x10
c0014050:	89 d8                	mov    eax,ebx
c0014052:	83 c4 08             	add    esp,0x8
c0014055:	5b                   	pop    ebx
c0014056:	c3                   	ret    
c0014057:	90                   	nop

c0014058 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001405c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014060:	c1 e0 04             	shl    eax,0x4
c0014063:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014067:	8d 50 10             	lea    edx,[eax+0x10]
c001406a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014070:	74 08                	je     c001407a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014072:	83 c0 04             	add    eax,0x4
c0014075:	39 d0                	cmp    eax,edx
c0014077:	75 f1                	jne    c001406a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014079:	c3                   	ret    
c001407a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014084:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001408e:	eb e2                	jmp    c0014072 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014090 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014090:	57                   	push   edi
c0014091:	31 c0                	xor    eax,eax
c0014093:	56                   	push   esi
c0014094:	53                   	push   ebx
c0014095:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014099:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001409d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140a1:	89 da                	mov    edx,ebx
c00140a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140a7:	c1 e2 04             	shl    edx,0x4
c00140aa:	01 ca                	add    edx,ecx
c00140ac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140b4:	74 16                	je     c00140cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140b6:	40                   	inc    eax
c00140b7:	83 f8 04             	cmp    eax,0x4
c00140ba:	75 f0                	jne    c00140ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140bc:	c7 44 24 10 cc 7a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027acc
c00140c4:	5b                   	pop    ebx
c00140c5:	5e                   	pop    esi
c00140c6:	5f                   	pop    edi
c00140c7:	e9 37 4d 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>
c00140cc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140cf:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140d2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140d8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140de:	5b                   	pop    ebx
c00140df:	5e                   	pop    esi
c00140e0:	5f                   	pop    edi
c00140e1:	c3                   	ret    

c00140e2 <doubleFault(regs*, void*)>:
c00140e2:	55                   	push   ebp
c00140e3:	89 e5                	mov    ebp,esp
c00140e5:	83 ec 08             	sub    esp,0x8
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 07 7b 02 c0       	push   0xc0027b07
c00140f0:	e8 0e 4d 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	90                   	nop
c00140f9:	c9                   	leave  
c00140fa:	c3                   	ret    
c00140fb:	90                   	nop

c00140fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140fc:	56                   	push   esi
c00140fd:	53                   	push   ebx
c00140fe:	50                   	push   eax
c00140ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014103:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014107:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001410c:	75 35                	jne    c0014143 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001410e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014111:	31 d2                	xor    edx,edx
c0014113:	89 c1                	mov    ecx,eax
c0014115:	c1 e1 04             	shl    ecx,0x4
c0014118:	01 f1                	add    ecx,esi
c001411a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014122:	74 3e                	je     c0014162 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014124:	42                   	inc    edx
c0014125:	83 fa 04             	cmp    edx,0x4
c0014128:	75 f0                	jne    c001411a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	68 4c 7b 02 c0       	push   0xc0027b4c
c0014132:	e8 cc 4c 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001413f:	5a                   	pop    edx
c0014140:	5b                   	pop    ebx
c0014141:	5e                   	pop    esi
c0014142:	c3                   	ret    
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	56                   	push   esi
c0014147:	e8 ce fb ff ff       	call   c0013d1a <Device::getName()>
c001414c:	83 c4 10             	add    esp,0x10
c001414f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014152:	75 ba                	jne    c001410e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014154:	83 fb 0f             	cmp    ebx,0xf
c0014157:	7f 29                	jg     c0014182 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014159:	0f b6 9b 80 9c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6380]
c0014160:	eb ac                	jmp    c001410e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014162:	8d 04 82             	lea    eax,[edx+eax*4]
c0014165:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014169:	8d 04 86             	lea    eax,[esi+eax*4]
c001416c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014172:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014176:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001417c:	89 d8                	mov    eax,ebx
c001417e:	5a                   	pop    edx
c001417f:	5b                   	pop    ebx
c0014180:	5e                   	pop    esi
c0014181:	c3                   	ret    
c0014182:	83 ec 0c             	sub    esp,0xc
c0014185:	68 14 7b 02 c0       	push   0xc0027b14
c001418a:	e8 74 4c 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	e9 77 ff ff ff       	jmp    c001410e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014197:	90                   	nop

c0014198 <InterruptController::clearAllHandlers(int, bool)>:
c0014198:	56                   	push   esi
c0014199:	53                   	push   ebx
c001419a:	52                   	push   edx
c001419b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001419f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141a8:	75 61                	jne    c001420b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141aa:	8d 46 20             	lea    eax,[esi+0x20]
c00141ad:	c1 e6 04             	shl    esi,0x4
c00141b0:	c1 e0 04             	shl    eax,0x4
c00141b3:	01 de                	add    esi,ebx
c00141b5:	01 d8                	add    eax,ebx
c00141b7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141c1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141d5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141df:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141e9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141f3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141fd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014207:	58                   	pop    eax
c0014208:	5b                   	pop    ebx
c0014209:	5e                   	pop    esi
c001420a:	c3                   	ret    
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	53                   	push   ebx
c001420f:	e8 06 fb ff ff       	call   c0013d1a <Device::getName()>
c0014214:	83 c4 10             	add    esp,0x10
c0014217:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001421a:	75 8e                	jne    c00141aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001421c:	83 fe 0f             	cmp    esi,0xf
c001421f:	7f 09                	jg     c001422a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014221:	0f b6 b6 80 9c 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6380]
c0014228:	eb 80                	jmp    c00141aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	68 88 7b 02 c0       	push   0xc0027b88
c0014232:	e8 cc 4b 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	e9 6b ff ff ff       	jmp    c00141aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c001423f:	90                   	nop

c0014240 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014240:	56                   	push   esi
c0014241:	53                   	push   ebx
c0014242:	52                   	push   edx
c0014243:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014247:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001424b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014250:	75 3a                	jne    c001428c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014256:	8d 50 20             	lea    edx,[eax+0x20]
c0014259:	c1 e2 04             	shl    edx,0x4
c001425c:	8d 04 16             	lea    eax,[esi+edx*1]
c001425f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014263:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014269:	74 0b                	je     c0014276 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001426b:	83 c0 04             	add    eax,0x4
c001426e:	39 d0                	cmp    eax,edx
c0014270:	75 f1                	jne    c0014263 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014272:	58                   	pop    eax
c0014273:	5b                   	pop    ebx
c0014274:	5e                   	pop    esi
c0014275:	c3                   	ret    
c0014276:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014280:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001428a:	eb df                	jmp    c001426b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	56                   	push   esi
c0014290:	e8 85 fa ff ff       	call   c0013d1a <Device::getName()>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001429b:	75 b5                	jne    c0014252 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001429d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142a2:	7f 11                	jg     c00142b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a8:	0f b6 80 80 9c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6380]
c00142af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142b3:	eb 9d                	jmp    c0014252 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142b5:	83 ec 0c             	sub    esp,0xc
c00142b8:	68 88 7b 02 c0       	push   0xc0027b88
c00142bd:	e8 41 4b 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00142c2:	83 c4 10             	add    esp,0x10
c00142c5:	eb 8b                	jmp    c0014252 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142c7 <nmiHandler(regs*, void*)>:
c00142c7:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00142cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142d0:	e9 43 a9 ff ff       	jmp    c000ec18 <Computer::handleNMI()>

c00142d5 <int_handler>:
c00142d5:	55                   	push   ebp
c00142d6:	57                   	push   edi
c00142d7:	56                   	push   esi
c00142d8:	53                   	push   ebx
c00142d9:	83 ec 0c             	sub    esp,0xc
c00142dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142e0:	80 3d b4 b4 02 c0 00 	cmp    BYTE PTR ds:0xc002b4b4,0x0
c00142e7:	74 0b                	je     c00142f4 <int_handler+0x1f>
c00142e9:	fa                   	cli    
c00142ea:	f4                   	hlt    
c00142eb:	80 3d b4 b4 02 c0 00 	cmp    BYTE PTR ds:0xc002b4b4,0x0
c00142f2:	75 f5                	jne    c00142e9 <int_handler+0x14>
c00142f4:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00142f9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014302:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014308:	8d 43 e0             	lea    eax,[ebx-0x20]
c001430b:	83 f8 17             	cmp    eax,0x17
c001430e:	77 13                	ja     c0014323 <int_handler+0x4e>
c0014310:	83 ec 08             	sub    esp,0x8
c0014313:	8b 17                	mov    edx,DWORD PTR [edi]
c0014315:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014318:	0f b6 c0             	movzx  eax,al
c001431b:	50                   	push   eax
c001431c:	57                   	push   edi
c001431d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	83 c3 15             	add    ebx,0x15
c0014326:	c1 e3 04             	shl    ebx,0x4
c0014329:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001432d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014334:	31 db                	xor    ebx,ebx
c0014336:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001433a:	85 c0                	test   eax,eax
c001433c:	74 13                	je     c0014351 <int_handler+0x7c>
c001433e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014341:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014345:	74 1c                	je     c0014363 <int_handler+0x8e>
c0014347:	83 ec 08             	sub    esp,0x8
c001434a:	52                   	push   edx
c001434b:	56                   	push   esi
c001434c:	ff d0                	call   eax
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	43                   	inc    ebx
c0014352:	83 fb 04             	cmp    ebx,0x4
c0014355:	75 df                	jne    c0014336 <int_handler+0x61>
c0014357:	83 c4 0c             	add    esp,0xc
c001435a:	31 c0                	xor    eax,eax
c001435c:	5b                   	pop    ebx
c001435d:	31 d2                	xor    edx,edx
c001435f:	5e                   	pop    esi
c0014360:	5f                   	pop    edi
c0014361:	5d                   	pop    ebp
c0014362:	c3                   	ret    
c0014363:	83 ec 08             	sub    esp,0x8
c0014366:	52                   	push   edx
c0014367:	56                   	push   esi
c0014368:	ff d0                	call   eax
c001436a:	83 c4 10             	add    esp,0x10
c001436d:	83 c4 0c             	add    esp,0xc
c0014370:	5b                   	pop    ebx
c0014371:	5e                   	pop    esi
c0014372:	5f                   	pop    edi
c0014373:	5d                   	pop    ebp
c0014374:	c3                   	ret    
c0014375:	90                   	nop

c0014376 <InterruptController::InterruptController(char const*)>:
c0014376:	83 ec 1c             	sub    esp,0x1c
c0014379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001437d:	83 ec 08             	sub    esp,0x8
c0014380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014384:	50                   	push   eax
c0014385:	e8 94 f8 ff ff       	call   c0013c1e <Device::Device(char const*)>
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	ba bc 7d 02 c0       	mov    edx,0xc0027dbc
c0014392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014396:	89 10                	mov    DWORD PTR [eax],edx
c0014398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143ae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143b6:	7f 5e                	jg     c0014416 <InterruptController::InterruptController(char const*)+0xa0>
c00143b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143c0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143c5:	7f 49                	jg     c0014410 <InterruptController::InterruptController(char const*)+0x9a>
c00143c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143da:	01 ca                	add    edx,ecx
c00143dc:	83 c2 54             	add    edx,0x54
c00143df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143fa:	01 ca                	add    edx,ecx
c00143fc:	81 c2 54 04 00 00    	add    edx,0x454
c0014402:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001440a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001440e:	eb b0                	jmp    c00143c0 <InterruptController::InterruptController(char const*)+0x4a>
c0014410:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014414:	eb 98                	jmp    c00143ae <InterruptController::InterruptController(char const*)+0x38>
c0014416:	90                   	nop
c0014417:	83 c4 1c             	add    esp,0x1c
c001441a:	c3                   	ret    
c001441b:	90                   	nop

c001441c <InterruptController::~InterruptController()>:
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	ba bc 7d 02 c0       	mov    edx,0xc0027dbc
c0014424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014428:	89 10                	mov    DWORD PTR [eax],edx
c001442a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001442e:	83 ec 0c             	sub    esp,0xc
c0014431:	50                   	push   eax
c0014432:	e8 c9 f4 ff ff       	call   c0013900 <Device::~Device()>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	90                   	nop
c001443b:	83 c4 0c             	add    esp,0xc
c001443e:	c3                   	ret    
c001443f:	90                   	nop

c0014440 <InterruptController::~InterruptController()>:
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001444a:	e8 cd ff ff ff       	call   c001441c <InterruptController::~InterruptController()>
c001444f:	83 c4 10             	add    esp,0x10
c0014452:	83 ec 08             	sub    esp,0x8
c0014455:	68 58 21 00 00       	push   0x2158
c001445a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001445e:	e8 fc e0 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	83 c4 0c             	add    esp,0xc
c0014469:	c3                   	ret    

c001446a <displayDebugInfo(regs*)>:
c001446a:	55                   	push   ebp
c001446b:	57                   	push   edi
c001446c:	56                   	push   esi
c001446d:	53                   	push   ebx
c001446e:	83 ec 24             	sub    esp,0x24
c0014471:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014475:	0f 20 c2             	mov    edx,cr0
c0014478:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001447c:	0f 20 d7             	mov    edi,cr2
c001447f:	0f 20 de             	mov    esi,cr3
c0014482:	0f 20 e5             	mov    ebp,cr4
c0014485:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014488:	68 c2 7b 02 c0       	push   0xc0027bc2
c001448d:	e8 ad e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014492:	58                   	pop    eax
c0014493:	5a                   	pop    edx
c0014494:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014497:	68 cd 7b 02 c0       	push   0xc0027bcd
c001449c:	e8 9e e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144a1:	59                   	pop    ecx
c00144a2:	58                   	pop    eax
c00144a3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144a6:	68 d8 7b 02 c0       	push   0xc0027bd8
c00144ab:	e8 8f e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144b0:	58                   	pop    eax
c00144b1:	5a                   	pop    edx
c00144b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144b5:	68 e3 7b 02 c0       	push   0xc0027be3
c00144ba:	e8 80 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144bf:	59                   	pop    ecx
c00144c0:	58                   	pop    eax
c00144c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144c4:	68 ee 7b 02 c0       	push   0xc0027bee
c00144c9:	e8 71 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144ce:	58                   	pop    eax
c00144cf:	5a                   	pop    edx
c00144d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144d3:	68 f9 7b 02 c0       	push   0xc0027bf9
c00144d8:	e8 62 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144dd:	59                   	pop    ecx
c00144de:	58                   	pop    eax
c00144df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144e2:	68 04 7c 02 c0       	push   0xc0027c04
c00144e7:	e8 53 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144ec:	58                   	pop    eax
c00144ed:	5a                   	pop    edx
c00144ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144f1:	68 0f 7c 02 c0       	push   0xc0027c0f
c00144f6:	e8 44 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00144fb:	59                   	pop    ecx
c00144fc:	58                   	pop    eax
c00144fd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014500:	68 1a 7c 02 c0       	push   0xc0027c1a
c0014505:	e8 35 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001450a:	58                   	pop    eax
c001450b:	5a                   	pop    edx
c001450c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001450f:	68 29 7c 02 c0       	push   0xc0027c29
c0014514:	e8 26 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014519:	59                   	pop    ecx
c001451a:	58                   	pop    eax
c001451b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001451e:	68 34 7c 02 c0       	push   0xc0027c34
c0014523:	e8 17 e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014528:	58                   	pop    eax
c0014529:	5a                   	pop    edx
c001452a:	57                   	push   edi
c001452b:	68 3f 7c 02 c0       	push   0xc0027c3f
c0014530:	e8 0a e1 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014535:	59                   	pop    ecx
c0014536:	58                   	pop    eax
c0014537:	56                   	push   esi
c0014538:	68 4a 7c 02 c0       	push   0xc0027c4a
c001453d:	e8 fd e0 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014542:	58                   	pop    eax
c0014543:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014548:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454e:	e8 ae c2 ff ff       	call   c0010801 <setActiveTerminal(VgaText*)>
c0014553:	58                   	pop    eax
c0014554:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014557:	5a                   	pop    edx
c0014558:	c1 e0 05             	shl    eax,0x5
c001455b:	05 e0 99 02 c0       	add    eax,0xc00299e0
c0014560:	50                   	push   eax
c0014561:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014566:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001456c:	e8 af c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014571:	59                   	pop    ecx
c0014572:	58                   	pop    eax
c0014573:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014578:	68 55 7c 02 c0       	push   0xc0027c55
c001457d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014583:	e8 98 c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014588:	58                   	pop    eax
c0014589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001458e:	5a                   	pop    edx
c001458f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014592:	83 c0 0c             	add    eax,0xc
c0014595:	50                   	push   eax
c0014596:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001459b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a1:	e8 7a c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00145a6:	59                   	pop    ecx
c00145a7:	58                   	pop    eax
c00145a8:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00145ad:	68 5e 7c 02 c0       	push   0xc0027c5e
c00145b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b8:	e8 63 c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00145bd:	58                   	pop    eax
c00145be:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00145c3:	5a                   	pop    edx
c00145c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145cd:	e8 74 c6 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00145d2:	59                   	pop    ecx
c00145d3:	58                   	pop    eax
c00145d4:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00145d9:	68 66 7c 02 c0       	push   0xc0027c66
c00145de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e4:	e8 37 c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00145e9:	58                   	pop    eax
c00145ea:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00145ef:	5a                   	pop    edx
c00145f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145f9:	e8 48 c6 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00145fe:	59                   	pop    ecx
c00145ff:	58                   	pop    eax
c0014600:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014605:	68 6e 7c 02 c0       	push   0xc0027c6e
c001460a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014610:	e8 0b c6 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014615:	58                   	pop    eax
c0014616:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001461b:	5a                   	pop    edx
c001461c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001461f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014625:	e8 1c c6 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c001462a:	59                   	pop    ecx
c001462b:	58                   	pop    eax
c001462c:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014631:	68 76 7c 02 c0       	push   0xc0027c76
c0014636:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463c:	e8 df c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014641:	58                   	pop    eax
c0014642:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014647:	5a                   	pop    edx
c0014648:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001464b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014651:	e8 f0 c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014656:	59                   	pop    ecx
c0014657:	58                   	pop    eax
c0014658:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001465d:	68 7e 7c 02 c0       	push   0xc0027c7e
c0014662:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014668:	e8 b3 c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c001466d:	58                   	pop    eax
c001466e:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014673:	5a                   	pop    edx
c0014674:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014677:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467d:	e8 c4 c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014682:	59                   	pop    ecx
c0014683:	58                   	pop    eax
c0014684:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014689:	68 86 7c 02 c0       	push   0xc0027c86
c001468e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014694:	e8 87 c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014699:	58                   	pop    eax
c001469a:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001469f:	5a                   	pop    edx
c00146a0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a9:	e8 98 c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00146ae:	59                   	pop    ecx
c00146af:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00146b4:	5b                   	pop    ebx
c00146b5:	68 8e 7c 02 c0       	push   0xc0027c8e
c00146ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c0:	e8 5b c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00146c5:	58                   	pop    eax
c00146c6:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00146cb:	5a                   	pop    edx
c00146cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146d0:	52                   	push   edx
c00146d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d7:	e8 6a c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00146dc:	59                   	pop    ecx
c00146dd:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00146e2:	5b                   	pop    ebx
c00146e3:	68 97 7c 02 c0       	push   0xc0027c97
c00146e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ee:	e8 2d c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00146f3:	58                   	pop    eax
c00146f4:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00146f9:	5a                   	pop    edx
c00146fa:	57                   	push   edi
c00146fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014701:	e8 40 c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014706:	59                   	pop    ecx
c0014707:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001470c:	5b                   	pop    ebx
c001470d:	68 9f 7c 02 c0       	push   0xc0027c9f
c0014712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014718:	e8 03 c5 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c001471d:	5f                   	pop    edi
c001471e:	58                   	pop    eax
c001471f:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014724:	56                   	push   esi
c0014725:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472b:	e8 16 c5 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014730:	58                   	pop    eax
c0014731:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014736:	5a                   	pop    edx
c0014737:	68 a7 7c 02 c0       	push   0xc0027ca7
c001473c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014742:	e8 d9 c4 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014747:	59                   	pop    ecx
c0014748:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001474d:	5b                   	pop    ebx
c001474e:	55                   	push   ebp
c001474f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014755:	e8 ec c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c001475a:	5e                   	pop    esi
c001475b:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014760:	5f                   	pop    edi
c0014761:	68 af 7c 02 c0       	push   0xc0027caf
c0014766:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476c:	e8 af c4 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014771:	0f 21 c0             	mov    eax,db0
c0014774:	5d                   	pop    ebp
c0014775:	5a                   	pop    edx
c0014776:	50                   	push   eax
c0014777:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001477c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014782:	e8 bf c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014787:	59                   	pop    ecx
c0014788:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001478d:	5b                   	pop    ebx
c001478e:	68 b8 7c 02 c0       	push   0xc0027cb8
c0014793:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014799:	e8 82 c4 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c001479e:	0f 21 c8             	mov    eax,db1
c00147a1:	5e                   	pop    esi
c00147a2:	5f                   	pop    edi
c00147a3:	50                   	push   eax
c00147a4:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00147a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147af:	e8 92 c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00147b4:	5d                   	pop    ebp
c00147b5:	58                   	pop    eax
c00147b6:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00147bb:	68 c0 7c 02 c0       	push   0xc0027cc0
c00147c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c6:	e8 55 c4 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00147cb:	0f 21 d0             	mov    eax,db2
c00147ce:	5a                   	pop    edx
c00147cf:	59                   	pop    ecx
c00147d0:	50                   	push   eax
c00147d1:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00147d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147dc:	e8 65 c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00147e1:	5b                   	pop    ebx
c00147e2:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00147e7:	5e                   	pop    esi
c00147e8:	68 c8 7c 02 c0       	push   0xc0027cc8
c00147ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f3:	e8 28 c4 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00147f8:	0f 21 d8             	mov    eax,db3
c00147fb:	5f                   	pop    edi
c00147fc:	5d                   	pop    ebp
c00147fd:	50                   	push   eax
c00147fe:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014803:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014809:	e8 38 c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c001480e:	58                   	pop    eax
c001480f:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014814:	5a                   	pop    edx
c0014815:	68 d0 7c 02 c0       	push   0xc0027cd0
c001481a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014820:	e8 fb c3 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014825:	0f 21 f0             	mov    eax,db6
c0014828:	59                   	pop    ecx
c0014829:	5b                   	pop    ebx
c001482a:	50                   	push   eax
c001482b:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014830:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014836:	e8 0b c4 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c001483b:	5e                   	pop    esi
c001483c:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0014841:	5f                   	pop    edi
c0014842:	68 d8 7c 02 c0       	push   0xc0027cd8
c0014847:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484d:	e8 ce c3 ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0014852:	0f 21 f8             	mov    eax,db7
c0014855:	5d                   	pop    ebp
c0014856:	5a                   	pop    edx
c0014857:	50                   	push   eax
c0014858:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001485d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014863:	e8 de c3 ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0014868:	fa                   	cli    
c0014869:	f4                   	hlt    
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	eb fe                	jmp    c001486d <displayDebugInfo(regs*)+0x403>

c001486f <x87EmulHandler(regs*, void*)>:
c001486f:	53                   	push   ebx
c0014870:	83 ec 14             	sub    esp,0x14
c0014873:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014877:	53                   	push   ebx
c0014878:	e8 a7 8e 00 00       	call   c001d724 <Vm::x87Handler(regs*)>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	84 c0                	test   al,al
c0014882:	74 05                	je     c0014889 <x87EmulHandler(regs*, void*)+0x1a>
c0014884:	83 c4 08             	add    esp,0x8
c0014887:	5b                   	pop    ebx
c0014888:	c3                   	ret    
c0014889:	83 ec 0c             	sub    esp,0xc
c001488c:	68 e0 7c 02 c0       	push   0xc0027ce0
c0014891:	e8 a9 dd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014899:	e8 cc fb ff ff       	call   c001446a <displayDebugInfo(regs*)>

c001489e <gpFault(regs*, void*)>:
c001489e:	53                   	push   ebx
c001489f:	83 ec 14             	sub    esp,0x14
c00148a2:	c7 05 30 ab 02 c0 98 cc 01 c0 	mov    DWORD PTR ds:0xc002ab30,0xc001cc98
c00148ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148b0:	53                   	push   ebx
c00148b1:	e8 e2 83 00 00       	call   c001cc98 <Vm::faultHandler(regs*)>
c00148b6:	83 c4 10             	add    esp,0x10
c00148b9:	84 c0                	test   al,al
c00148bb:	74 05                	je     c00148c2 <gpFault(regs*, void*)+0x24>
c00148bd:	83 c4 08             	add    esp,0x8
c00148c0:	5b                   	pop    ebx
c00148c1:	c3                   	ret    
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	68 f6 7c 02 c0       	push   0xc0027cf6
c00148ca:	e8 70 dd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00148cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d2:	e8 93 fb ff ff       	call   c001446a <displayDebugInfo(regs*)>

c00148d7 <pgFault(regs*, void*)>:
c00148d7:	83 ec 18             	sub    esp,0x18
c00148da:	68 11 7d 02 c0       	push   0xc0027d11
c00148df:	e8 5b dd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00148e4:	58                   	pop    eax
c00148e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e9:	e8 7c fb ff ff       	call   c001446a <displayDebugInfo(regs*)>

c00148ee <otherISRHandler(regs*, void*)>:
c00148ee:	53                   	push   ebx
c00148ef:	83 ec 0c             	sub    esp,0xc
c00148f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148f6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00148f9:	50                   	push   eax
c00148fa:	50                   	push   eax
c00148fb:	68 1e 7d 02 c0       	push   0xc0027d1e
c0014900:	e8 3a dd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014905:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014908:	e8 5d fb ff ff       	call   c001446a <displayDebugInfo(regs*)>

c001490d <opcodeFault(regs*, void*)>:
c001490d:	55                   	push   ebp
c001490e:	89 e5                	mov    ebp,esp
c0014910:	56                   	push   esi
c0014911:	53                   	push   ebx
c0014912:	83 ec 40             	sub    esp,0x40
c0014915:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001491a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014920:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014926:	84 c0                	test   al,al
c0014928:	74 24                	je     c001494e <opcodeFault(regs*, void*)+0x41>
c001492a:	83 ec 0c             	sub    esp,0xc
c001492d:	68 3c 7d 02 c0       	push   0xc0027d3c
c0014932:	e8 08 dd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014940:	8d 50 19             	lea    edx,[eax+0x19]
c0014943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014946:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014949:	e9 77 05 00 00       	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x5b8>
c001494e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014951:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014954:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014957:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001495b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001495f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014962:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014965:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014968:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001496b:	8a 00                	mov    al,BYTE PTR [eax]
c001496d:	3c f0                	cmp    al,0xf0
c001496f:	75 17                	jne    c0014988 <opcodeFault(regs*, void*)+0x7b>
c0014971:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014977:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001497a:	8d 50 01             	lea    edx,[eax+0x1]
c001497d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014980:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014983:	e9 da 00 00 00       	jmp    c0014a62 <opcodeFault(regs*, void*)+0x155>
c0014988:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001498b:	8a 00                	mov    al,BYTE PTR [eax]
c001498d:	3c f2                	cmp    al,0xf2
c001498f:	74 09                	je     c001499a <opcodeFault(regs*, void*)+0x8d>
c0014991:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014994:	8a 00                	mov    al,BYTE PTR [eax]
c0014996:	3c f3                	cmp    al,0xf3
c0014998:	75 1b                	jne    c00149b5 <opcodeFault(regs*, void*)+0xa8>
c001499a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001499e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149a7:	8d 50 01             	lea    edx,[eax+0x1]
c00149aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149b0:	e9 ad 00 00 00       	jmp    c0014a62 <opcodeFault(regs*, void*)+0x155>
c00149b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b8:	8a 00                	mov    al,BYTE PTR [eax]
c00149ba:	3c 66                	cmp    al,0x66
c00149bc:	75 1f                	jne    c00149dd <opcodeFault(regs*, void*)+0xd0>
c00149be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149c2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149cf:	8d 50 01             	lea    edx,[eax+0x1]
c00149d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149d8:	e9 85 00 00 00       	jmp    c0014a62 <opcodeFault(regs*, void*)+0x155>
c00149dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e0:	8a 00                	mov    al,BYTE PTR [eax]
c00149e2:	3c 67                	cmp    al,0x67
c00149e4:	75 18                	jne    c00149fe <opcodeFault(regs*, void*)+0xf1>
c00149e6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149ea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f3:	8d 50 01             	lea    edx,[eax+0x1]
c00149f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149fc:	eb 64                	jmp    c0014a62 <opcodeFault(regs*, void*)+0x155>
c00149fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a01:	8a 00                	mov    al,BYTE PTR [eax]
c0014a03:	3c 2e                	cmp    al,0x2e
c0014a05:	74 09                	je     c0014a10 <opcodeFault(regs*, void*)+0x103>
c0014a07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a0c:	3c 3e                	cmp    al,0x3e
c0014a0e:	75 18                	jne    c0014a28 <opcodeFault(regs*, void*)+0x11b>
c0014a10:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a1d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a23:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a26:	eb 3a                	jmp    c0014a62 <opcodeFault(regs*, void*)+0x155>
c0014a28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a2b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2d:	3c 36                	cmp    al,0x36
c0014a2f:	74 1b                	je     c0014a4c <opcodeFault(regs*, void*)+0x13f>
c0014a31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a34:	8a 00                	mov    al,BYTE PTR [eax]
c0014a36:	3c 26                	cmp    al,0x26
c0014a38:	74 12                	je     c0014a4c <opcodeFault(regs*, void*)+0x13f>
c0014a3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3f:	3c 64                	cmp    al,0x64
c0014a41:	74 09                	je     c0014a4c <opcodeFault(regs*, void*)+0x13f>
c0014a43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a46:	8a 00                	mov    al,BYTE PTR [eax]
c0014a48:	3c 65                	cmp    al,0x65
c0014a4a:	75 16                	jne    c0014a62 <opcodeFault(regs*, void*)+0x155>
c0014a4c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a50:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a59:	8d 50 01             	lea    edx,[eax+0x1]
c0014a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a65:	8a 00                	mov    al,BYTE PTR [eax]
c0014a67:	3c 0f                	cmp    al,0xf
c0014a69:	0f 85 ad 00 00 00    	jne    c0014b1c <opcodeFault(regs*, void*)+0x20f>
c0014a6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a72:	40                   	inc    eax
c0014a73:	8a 00                	mov    al,BYTE PTR [eax]
c0014a75:	3c c2                	cmp    al,0xc2
c0014a77:	74 0e                	je     c0014a87 <opcodeFault(regs*, void*)+0x17a>
c0014a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7c:	40                   	inc    eax
c0014a7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7f:	3c c3                	cmp    al,0xc3
c0014a81:	0f 85 95 00 00 00    	jne    c0014b1c <opcodeFault(regs*, void*)+0x20f>
c0014a87:	83 ec 0c             	sub    esp,0xc
c0014a8a:	68 5f 7d 02 c0       	push   0xc0027d5f
c0014a8f:	e8 ab db ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aa6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aac:	8a 00                	mov    al,BYTE PTR [eax]
c0014aae:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ab1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab4:	88 10                	mov    BYTE PTR [eax],dl
c0014ab6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ab9:	50                   	push   eax
c0014aba:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014abd:	50                   	push   eax
c0014abe:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ac1:	50                   	push   eax
c0014ac2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ac5:	e8 3e 41 00 00       	call   c0018c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ad6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ad9:	01 d0                	add    eax,edx
c0014adb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ae7:	48                   	dec    eax
c0014ae8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014af1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af7:	83 ec 04             	sub    esp,0x4
c0014afa:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014afd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b00:	50                   	push   eax
c0014b01:	e8 63 b6 fe ff       	call   c0000169 <voodooXADD>
c0014b06:	83 c4 10             	add    esp,0x10
c0014b09:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b0f:	01 c2                	add    edx,eax
c0014b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b17:	e9 a9 03 00 00       	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x5b8>
c0014b1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b1f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b21:	3c 0f                	cmp    al,0xf
c0014b23:	0f 85 8b 01 00 00    	jne    c0014cb4 <opcodeFault(regs*, void*)+0x3a7>
c0014b29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2c:	40                   	inc    eax
c0014b2d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b2f:	3c c7                	cmp    al,0xc7
c0014b31:	0f 86 7d 01 00 00    	jbe    c0014cb4 <opcodeFault(regs*, void*)+0x3a7>
c0014b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3a:	40                   	inc    eax
c0014b3b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3d:	3c cf                	cmp    al,0xcf
c0014b3f:	0f 87 6f 01 00 00    	ja     c0014cb4 <opcodeFault(regs*, void*)+0x3a7>
c0014b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b48:	40                   	inc    eax
c0014b49:	8a 00                	mov    al,BYTE PTR [eax]
c0014b4b:	83 c0 38             	add    eax,0x38
c0014b4e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b51:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b55:	75 0b                	jne    c0014b62 <opcodeFault(regs*, void*)+0x255>
c0014b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b60:	eb 75                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014b62:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b66:	75 0b                	jne    c0014b73 <opcodeFault(regs*, void*)+0x266>
c0014b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b6e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b71:	eb 64                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014b73:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b77:	75 0b                	jne    c0014b84 <opcodeFault(regs*, void*)+0x277>
c0014b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014b7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b82:	eb 53                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014b84:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014b88:	75 0b                	jne    c0014b95 <opcodeFault(regs*, void*)+0x288>
c0014b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b93:	eb 42                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014b95:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014b99:	75 0b                	jne    c0014ba6 <opcodeFault(regs*, void*)+0x299>
c0014b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ba1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba4:	eb 31                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014ba6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014baa:	75 0b                	jne    c0014bb7 <opcodeFault(regs*, void*)+0x2aa>
c0014bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014baf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bb2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb5:	eb 20                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014bb7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bbb:	75 0b                	jne    c0014bc8 <opcodeFault(regs*, void*)+0x2bb>
c0014bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bc6:	eb 0f                	jmp    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014bc8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bcc:	75 09                	jne    c0014bd7 <opcodeFault(regs*, void*)+0x2ca>
c0014bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bd4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd7:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014bdb:	74 10                	je     c0014bed <opcodeFault(regs*, void*)+0x2e0>
c0014bdd:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014be4:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014beb:	eb 2d                	jmp    c0014c1a <opcodeFault(regs*, void*)+0x30d>
c0014bed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bf0:	c1 e0 18             	shl    eax,0x18
c0014bf3:	89 c2                	mov    edx,eax
c0014bf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bf8:	c1 e0 08             	shl    eax,0x8
c0014bfb:	25 00 00 ff 00       	and    eax,0xff0000
c0014c00:	09 c2                	or     edx,eax
c0014c02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c05:	c1 e8 08             	shr    eax,0x8
c0014c08:	25 00 ff 00 00       	and    eax,0xff00
c0014c0d:	09 c2                	or     edx,eax
c0014c0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c12:	c1 e8 18             	shr    eax,0x18
c0014c15:	09 d0                	or     eax,edx
c0014c17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c1a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c1e:	75 0b                	jne    c0014c2b <opcodeFault(regs*, void*)+0x31e>
c0014c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c23:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c26:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c29:	eb 75                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c2b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c2f:	75 0b                	jne    c0014c3c <opcodeFault(regs*, void*)+0x32f>
c0014c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c34:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c37:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c3a:	eb 64                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c3c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c40:	75 0b                	jne    c0014c4d <opcodeFault(regs*, void*)+0x340>
c0014c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c45:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c48:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c4b:	eb 53                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c4d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c51:	75 0b                	jne    c0014c5e <opcodeFault(regs*, void*)+0x351>
c0014c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c56:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c59:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c5c:	eb 42                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c5e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c62:	75 0b                	jne    c0014c6f <opcodeFault(regs*, void*)+0x362>
c0014c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c67:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c6a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c6d:	eb 31                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c6f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c73:	75 0b                	jne    c0014c80 <opcodeFault(regs*, void*)+0x373>
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c7b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c7e:	eb 20                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c80:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c84:	75 0b                	jne    c0014c91 <opcodeFault(regs*, void*)+0x384>
c0014c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c8c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014c8f:	eb 0f                	jmp    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c91:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c95:	75 09                	jne    c0014ca0 <opcodeFault(regs*, void*)+0x393>
c0014c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c9d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca6:	8d 50 02             	lea    edx,[eax+0x2]
c0014ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014caf:	e9 11 02 00 00       	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x5b8>
c0014cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb9:	3c 0f                	cmp    al,0xf
c0014cbb:	0f 85 76 01 00 00    	jne    c0014e37 <opcodeFault(regs*, void*)+0x52a>
c0014cc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc4:	40                   	inc    eax
c0014cc5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc7:	3c c7                	cmp    al,0xc7
c0014cc9:	0f 85 68 01 00 00    	jne    c0014e37 <opcodeFault(regs*, void*)+0x52a>
c0014ccf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd8:	8d 50 01             	lea    edx,[eax+0x1]
c0014cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce1:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ce4:	50                   	push   eax
c0014ce5:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ce8:	50                   	push   eax
c0014ce9:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014cec:	50                   	push   eax
c0014ced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cf0:	e8 13 3f 00 00       	call   c0018c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014cfb:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014cfe:	83 f0 01             	xor    eax,0x1
c0014d01:	84 c0                	test   al,al
c0014d03:	0f 84 2e 01 00 00    	je     c0014e37 <opcodeFault(regs*, void*)+0x52a>
c0014d09:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d0c:	3c 01                	cmp    al,0x1
c0014d0e:	0f 85 23 01 00 00    	jne    c0014e37 <opcodeFault(regs*, void*)+0x52a>
c0014d14:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d17:	83 f0 01             	xor    eax,0x1
c0014d1a:	84 c0                	test   al,al
c0014d1c:	0f 84 15 01 00 00    	je     c0014e37 <opcodeFault(regs*, void*)+0x52a>
c0014d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d25:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d28:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d2b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d32:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d35:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d38:	89 c2                	mov    edx,eax
c0014d3a:	b8 00 00 00 00       	mov    eax,0x0
c0014d3f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d42:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d48:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d4b:	ba 00 00 00 00       	mov    edx,0x0
c0014d50:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d53:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d5c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d5f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d66:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d69:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d6c:	89 c2                	mov    edx,eax
c0014d6e:	b8 00 00 00 00       	mov    eax,0x0
c0014d73:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d76:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d7f:	ba 00 00 00 00       	mov    edx,0x0
c0014d84:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014d87:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014d8a:	e8 80 70 00 00       	call   c001be0f <lockScheduler()>
c0014d8f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014d92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d97:	89 c1                	mov    ecx,eax
c0014d99:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014d9c:	89 cb                	mov    ebx,ecx
c0014d9e:	89 d0                	mov    eax,edx
c0014da0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014da3:	89 c6                	mov    esi,eax
c0014da5:	89 f0                	mov    eax,esi
c0014da7:	09 d8                	or     eax,ebx
c0014da9:	85 c0                	test   eax,eax
c0014dab:	75 21                	jne    c0014dce <opcodeFault(regs*, void*)+0x4c1>
c0014dad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014db0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014db3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014db6:	89 01                	mov    DWORD PTR [ecx],eax
c0014db8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dc1:	83 c8 40             	or     eax,0x40
c0014dc4:	89 c2                	mov    edx,eax
c0014dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014dcc:	eb 3e                	jmp    c0014e0c <opcodeFault(regs*, void*)+0x4ff>
c0014dce:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dd1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014dd9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ddc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014de5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014de8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014deb:	89 d0                	mov    eax,edx
c0014ded:	31 d2                	xor    edx,edx
c0014def:	89 c3                	mov    ebx,eax
c0014df1:	89 d6                	mov    esi,edx
c0014df3:	89 da                	mov    edx,ebx
c0014df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e01:	83 e0 bf             	and    eax,0xffffffbf
c0014e04:	89 c2                	mov    edx,eax
c0014e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e09:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e0c:	e8 00 70 00 00       	call   c001be11 <unlockScheduler()>
c0014e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e17:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e1a:	01 c2                	add    edx,eax
c0014e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e22:	83 ec 0c             	sub    esp,0xc
c0014e25:	68 6e 7d 02 c0       	push   0xc0027d6e
c0014e2a:	e8 10 d8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	e9 8e 00 00 00       	jmp    c0014ec5 <opcodeFault(regs*, void*)+0x5b8>
c0014e37:	83 ec 0c             	sub    esp,0xc
c0014e3a:	68 81 7d 02 c0       	push   0xc0027d81
c0014e3f:	e8 fb d7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e53:	c1 e0 04             	shl    eax,0x4
c0014e56:	01 d0                	add    eax,edx
c0014e58:	83 c0 03             	add    eax,0x3
c0014e5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e5d:	0f b6 d8             	movzx  ebx,al
c0014e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e63:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e6c:	c1 e0 04             	shl    eax,0x4
c0014e6f:	01 d0                	add    eax,edx
c0014e71:	83 c0 02             	add    eax,0x2
c0014e74:	8a 00                	mov    al,BYTE PTR [eax]
c0014e76:	0f b6 c8             	movzx  ecx,al
c0014e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e85:	c1 e0 04             	shl    eax,0x4
c0014e88:	01 d0                	add    eax,edx
c0014e8a:	40                   	inc    eax
c0014e8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8d:	0f b6 d0             	movzx  edx,al
c0014e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e93:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e9c:	c1 e0 04             	shl    eax,0x4
c0014e9f:	01 f0                	add    eax,esi
c0014ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea3:	0f b6 c0             	movzx  eax,al
c0014ea6:	83 ec 0c             	sub    esp,0xc
c0014ea9:	53                   	push   ebx
c0014eaa:	51                   	push   ecx
c0014eab:	52                   	push   edx
c0014eac:	50                   	push   eax
c0014ead:	68 94 7d 02 c0       	push   0xc0027d94
c0014eb2:	e8 88 d7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0014eb7:	83 c4 20             	add    esp,0x20
c0014eba:	83 ec 0c             	sub    esp,0xc
c0014ebd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ec0:	e8 a5 f5 ff ff       	call   c001446a <displayDebugInfo(regs*)>
c0014ec5:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ec8:	5b                   	pop    ebx
c0014ec9:	5e                   	pop    esi
c0014eca:	5d                   	pop    ebp
c0014ecb:	c3                   	ret    

c0014ecc <displayProgramFault(char const*)>:
c0014ecc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ed1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014eda:	85 c0                	test   eax,eax
c0014edc:	74 15                	je     c0014ef3 <displayProgramFault(char const*)+0x27>
c0014ede:	83 ec 0c             	sub    esp,0xc
c0014ee1:	6a 04                	push   0x4
c0014ee3:	6a 0f                	push   0xf
c0014ee5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ee9:	50                   	push   eax
c0014eea:	e8 f3 b9 ff ff       	call   c00108e2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014eef:	83 c4 1c             	add    esp,0x1c
c0014ef2:	c3                   	ret    
c0014ef3:	c3                   	ret    

c0014ef4 <setupInterruptController()>:
c0014ef4:	55                   	push   ebp
c0014ef5:	89 e5                	mov    ebp,esp
c0014ef7:	53                   	push   ebx
c0014ef8:	83 ec 24             	sub    esp,0x24
c0014efb:	b8 00 00 00 00       	mov    eax,0x0
c0014f00:	85 c0                	test   eax,eax
c0014f02:	0f 95 c0             	setne  al
c0014f05:	84 c0                	test   al,al
c0014f07:	74 5b                	je     c0014f64 <setupInterruptController()+0x70>
c0014f09:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f16:	e8 b1 a5 ff ff       	call   c000f4cc <malloc>
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	89 c3                	mov    ebx,eax
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	53                   	push   ebx
c0014f24:	e8 db d9 00 00       	call   c0022904 <APIC::APIC()>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f2f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f37:	83 c0 08             	add    eax,0x8
c0014f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f3c:	6a 00                	push   0x0
c0014f3e:	6a 00                	push   0x0
c0014f40:	6a 00                	push   0x0
c0014f42:	52                   	push   edx
c0014f43:	ff d0                	call   eax
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0014f4d:	83 ec 08             	sub    esp,0x8
c0014f50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f53:	50                   	push   eax
c0014f54:	e8 d5 ea ff ff       	call   c0013a2e <Device::addChild(Device*)>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f5f:	e9 52 03 00 00       	jmp    c00152b6 <setupInterruptController()+0x3c2>
c0014f64:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0014f69:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014f6f:	83 e0 01             	and    eax,0x1
c0014f72:	84 c0                	test   al,al
c0014f74:	0f 95 c0             	setne  al
c0014f77:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014f7a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014f81:	83 ec 0c             	sub    esp,0xc
c0014f84:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f87:	e8 40 a5 ff ff       	call   c000f4cc <malloc>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	89 c3                	mov    ebx,eax
c0014f91:	83 ec 0c             	sub    esp,0xc
c0014f94:	53                   	push   ebx
c0014f95:	e8 c2 de 00 00       	call   c0022e5c <PIC::PIC()>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fa0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa8:	83 c0 08             	add    eax,0x8
c0014fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fad:	6a 00                	push   0x0
c0014faf:	6a 00                	push   0x0
c0014fb1:	6a 00                	push   0x0
c0014fb3:	52                   	push   edx
c0014fb4:	ff d0                	call   eax
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014fbd:	74 73                	je     c0015032 <setupInterruptController()+0x13e>
c0014fbf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc7:	83 c0 0c             	add    eax,0xc
c0014fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fcc:	6a 00                	push   0x0
c0014fce:	6a 00                	push   0x0
c0014fd0:	6a 00                	push   0x0
c0014fd2:	52                   	push   edx
c0014fd3:	ff d0                	call   eax
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fdc:	74 15                	je     c0014ff3 <setupInterruptController()+0xff>
c0014fde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fe3:	83 c0 04             	add    eax,0x4
c0014fe6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fe8:	83 ec 0c             	sub    esp,0xc
c0014feb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014fee:	ff d0                	call   eax
c0014ff0:	83 c4 10             	add    esp,0x10
c0014ff3:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015000:	e8 c7 a4 ff ff       	call   c000f4cc <malloc>
c0015005:	83 c4 10             	add    esp,0x10
c0015008:	89 c3                	mov    ebx,eax
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	53                   	push   ebx
c001500e:	e8 f1 d8 00 00       	call   c0022904 <APIC::APIC()>
c0015013:	83 c4 10             	add    esp,0x10
c0015016:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015019:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001501c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015021:	83 c0 08             	add    eax,0x8
c0015024:	8b 00                	mov    eax,DWORD PTR [eax]
c0015026:	6a 00                	push   0x0
c0015028:	6a 00                	push   0x0
c001502a:	6a 00                	push   0x0
c001502c:	52                   	push   edx
c001502d:	ff d0                	call   eax
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0015037:	83 ec 08             	sub    esp,0x8
c001503a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001503d:	50                   	push   eax
c001503e:	e8 eb e9 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c0015043:	83 c4 10             	add    esp,0x10
c0015046:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015049:	8b 00                	mov    eax,DWORD PTR [eax]
c001504b:	83 c0 24             	add    eax,0x24
c001504e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015050:	6a 00                	push   0x0
c0015052:	68 ee 48 01 c0       	push   0xc00148ee
c0015057:	6a 00                	push   0x0
c0015059:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001505c:	ff d0                	call   eax
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015064:	8b 00                	mov    eax,DWORD PTR [eax]
c0015066:	83 c0 24             	add    eax,0x24
c0015069:	8b 00                	mov    eax,DWORD PTR [eax]
c001506b:	6a 00                	push   0x0
c001506d:	68 ee 48 01 c0       	push   0xc00148ee
c0015072:	6a 01                	push   0x1
c0015074:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015077:	ff d0                	call   eax
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015081:	83 c0 24             	add    eax,0x24
c0015084:	8b 00                	mov    eax,DWORD PTR [eax]
c0015086:	6a 00                	push   0x0
c0015088:	68 c7 42 01 c0       	push   0xc00142c7
c001508d:	6a 02                	push   0x2
c001508f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015092:	ff d0                	call   eax
c0015094:	83 c4 10             	add    esp,0x10
c0015097:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001509a:	8b 00                	mov    eax,DWORD PTR [eax]
c001509c:	83 c0 24             	add    eax,0x24
c001509f:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a1:	6a 00                	push   0x0
c00150a3:	68 ee 48 01 c0       	push   0xc00148ee
c00150a8:	6a 03                	push   0x3
c00150aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150ad:	ff d0                	call   eax
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b7:	83 c0 24             	add    eax,0x24
c00150ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00150bc:	6a 00                	push   0x0
c00150be:	68 ee 48 01 c0       	push   0xc00148ee
c00150c3:	6a 04                	push   0x4
c00150c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150c8:	ff d0                	call   eax
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d2:	83 c0 24             	add    eax,0x24
c00150d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d7:	6a 00                	push   0x0
c00150d9:	68 ee 48 01 c0       	push   0xc00148ee
c00150de:	6a 05                	push   0x5
c00150e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150e3:	ff d0                	call   eax
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ed:	83 c0 24             	add    eax,0x24
c00150f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f2:	6a 00                	push   0x0
c00150f4:	68 0d 49 01 c0       	push   0xc001490d
c00150f9:	6a 06                	push   0x6
c00150fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150fe:	ff d0                	call   eax
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015106:	8b 00                	mov    eax,DWORD PTR [eax]
c0015108:	83 c0 24             	add    eax,0x24
c001510b:	8b 00                	mov    eax,DWORD PTR [eax]
c001510d:	6a 00                	push   0x0
c001510f:	68 6f 48 01 c0       	push   0xc001486f
c0015114:	6a 07                	push   0x7
c0015116:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015119:	ff d0                	call   eax
c001511b:	83 c4 10             	add    esp,0x10
c001511e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015121:	8b 00                	mov    eax,DWORD PTR [eax]
c0015123:	83 c0 24             	add    eax,0x24
c0015126:	8b 00                	mov    eax,DWORD PTR [eax]
c0015128:	6a 00                	push   0x0
c001512a:	68 e2 40 01 c0       	push   0xc00140e2
c001512f:	6a 08                	push   0x8
c0015131:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015134:	ff d0                	call   eax
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001513c:	8b 00                	mov    eax,DWORD PTR [eax]
c001513e:	83 c0 24             	add    eax,0x24
c0015141:	8b 00                	mov    eax,DWORD PTR [eax]
c0015143:	6a 00                	push   0x0
c0015145:	68 ee 48 01 c0       	push   0xc00148ee
c001514a:	6a 09                	push   0x9
c001514c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001514f:	ff d0                	call   eax
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015157:	8b 00                	mov    eax,DWORD PTR [eax]
c0015159:	83 c0 24             	add    eax,0x24
c001515c:	8b 00                	mov    eax,DWORD PTR [eax]
c001515e:	6a 00                	push   0x0
c0015160:	68 ee 48 01 c0       	push   0xc00148ee
c0015165:	6a 0a                	push   0xa
c0015167:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001516a:	ff d0                	call   eax
c001516c:	83 c4 10             	add    esp,0x10
c001516f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015172:	8b 00                	mov    eax,DWORD PTR [eax]
c0015174:	83 c0 24             	add    eax,0x24
c0015177:	8b 00                	mov    eax,DWORD PTR [eax]
c0015179:	6a 00                	push   0x0
c001517b:	68 ee 48 01 c0       	push   0xc00148ee
c0015180:	6a 0b                	push   0xb
c0015182:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015185:	ff d0                	call   eax
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518d:	8b 00                	mov    eax,DWORD PTR [eax]
c001518f:	83 c0 24             	add    eax,0x24
c0015192:	8b 00                	mov    eax,DWORD PTR [eax]
c0015194:	6a 00                	push   0x0
c0015196:	68 ee 48 01 c0       	push   0xc00148ee
c001519b:	6a 0c                	push   0xc
c001519d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a0:	ff d0                	call   eax
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151aa:	83 c0 24             	add    eax,0x24
c00151ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00151af:	6a 00                	push   0x0
c00151b1:	68 9e 48 01 c0       	push   0xc001489e
c00151b6:	6a 0d                	push   0xd
c00151b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151bb:	ff d0                	call   eax
c00151bd:	83 c4 10             	add    esp,0x10
c00151c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c5:	83 c0 24             	add    eax,0x24
c00151c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ca:	6a 00                	push   0x0
c00151cc:	68 d7 48 01 c0       	push   0xc00148d7
c00151d1:	6a 0e                	push   0xe
c00151d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d6:	ff d0                	call   eax
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151de:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e0:	83 c0 24             	add    eax,0x24
c00151e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e5:	6a 00                	push   0x0
c00151e7:	68 ee 48 01 c0       	push   0xc00148ee
c00151ec:	6a 0f                	push   0xf
c00151ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f1:	ff d0                	call   eax
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fb:	83 c0 24             	add    eax,0x24
c00151fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015200:	6a 00                	push   0x0
c0015202:	68 ee 48 01 c0       	push   0xc00148ee
c0015207:	6a 10                	push   0x10
c0015209:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001520c:	ff d0                	call   eax
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015214:	8b 00                	mov    eax,DWORD PTR [eax]
c0015216:	83 c0 24             	add    eax,0x24
c0015219:	8b 00                	mov    eax,DWORD PTR [eax]
c001521b:	6a 00                	push   0x0
c001521d:	68 ee 48 01 c0       	push   0xc00148ee
c0015222:	6a 11                	push   0x11
c0015224:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015227:	ff d0                	call   eax
c0015229:	83 c4 10             	add    esp,0x10
c001522c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015231:	83 c0 24             	add    eax,0x24
c0015234:	8b 00                	mov    eax,DWORD PTR [eax]
c0015236:	6a 00                	push   0x0
c0015238:	68 ee 48 01 c0       	push   0xc00148ee
c001523d:	6a 12                	push   0x12
c001523f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015242:	ff d0                	call   eax
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001524a:	8b 00                	mov    eax,DWORD PTR [eax]
c001524c:	83 c0 24             	add    eax,0x24
c001524f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015251:	6a 00                	push   0x0
c0015253:	68 ee 48 01 c0       	push   0xc00148ee
c0015258:	6a 13                	push   0x13
c001525a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525d:	ff d0                	call   eax
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015265:	8b 00                	mov    eax,DWORD PTR [eax]
c0015267:	83 c0 24             	add    eax,0x24
c001526a:	8b 00                	mov    eax,DWORD PTR [eax]
c001526c:	6a 00                	push   0x0
c001526e:	68 ee 48 01 c0       	push   0xc00148ee
c0015273:	6a 14                	push   0x14
c0015275:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015278:	ff d0                	call   eax
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015280:	8b 00                	mov    eax,DWORD PTR [eax]
c0015282:	83 c0 24             	add    eax,0x24
c0015285:	8b 00                	mov    eax,DWORD PTR [eax]
c0015287:	6a 00                	push   0x0
c0015289:	68 ee 48 01 c0       	push   0xc00148ee
c001528e:	6a 1e                	push   0x1e
c0015290:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015293:	ff d0                	call   eax
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529b:	8b 00                	mov    eax,DWORD PTR [eax]
c001529d:	83 c0 24             	add    eax,0x24
c00152a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a2:	6a 00                	push   0x0
c00152a4:	68 db a7 01 c0       	push   0xc001a7db
c00152a9:	6a 60                	push   0x60
c00152ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ae:	ff d0                	call   eax
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00152b9:	c9                   	leave  
c00152ba:	c3                   	ret    
c00152bb:	90                   	nop

c00152bc <InterruptController::convertLegacyIRQNumber(int)>:
c00152bc:	55                   	push   ebp
c00152bd:	89 e5                	mov    ebp,esp
c00152bf:	83 ec 08             	sub    esp,0x8
c00152c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c5:	83 ec 0c             	sub    esp,0xc
c00152c8:	50                   	push   eax
c00152c9:	e8 4c ea ff ff       	call   c0013d1a <Device::getName()>
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	8a 00                	mov    al,BYTE PTR [eax]
c00152d3:	3c 41                	cmp    al,0x41
c00152d5:	0f 94 c0             	sete   al
c00152d8:	84 c0                	test   al,al
c00152da:	74 28                	je     c0015304 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152dc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00152e0:	7f 12                	jg     c00152f4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00152e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152e5:	05 80 9c 02 c0       	add    eax,0xc0029c80
c00152ea:	8a 00                	mov    al,BYTE PTR [eax]
c00152ec:	0f b6 c0             	movzx  eax,al
c00152ef:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00152f2:	eb 10                	jmp    c0015304 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	68 14 7b 02 c0       	push   0xc0027b14
c00152fc:	e8 02 3b 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015307:	c9                   	leave  
c0015308:	c3                   	ret    
c0015309:	90                   	nop

c001530a <startGUI(void*)>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	53                   	push   ebx
c001530e:	83 ec 04             	sub    esp,0x4
c0015311:	e8 fb 6a 00 00       	call   c001be11 <unlockScheduler()>
c0015316:	e8 df 6a 00 00       	call   c001bdfa <getIRQNestingLevel()>
c001531b:	83 ec 08             	sub    esp,0x8
c001531e:	50                   	push   eax
c001531f:	68 fc 7d 02 c0       	push   0xc0027dfc
c0015324:	e8 16 d3 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0015329:	83 c4 10             	add    esp,0x10
c001532c:	8b 1d a8 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9a8
c0015332:	83 ec 08             	sub    esp,0x8
c0015335:	6a 01                	push   0x1
c0015337:	68 16 7e 02 c0       	push   0xc0027e16
c001533c:	e8 91 64 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c0015341:	83 c4 10             	add    esp,0x10
c0015344:	83 ec 08             	sub    esp,0x8
c0015347:	53                   	push   ebx
c0015348:	50                   	push   eax
c0015349:	e8 93 66 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	8b 1d a8 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9a8
c0015357:	83 ec 08             	sub    esp,0x8
c001535a:	6a 01                	push   0x1
c001535c:	68 30 7e 02 c0       	push   0xc0027e30
c0015361:	e8 6c 64 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c0015366:	83 c4 10             	add    esp,0x10
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	53                   	push   ebx
c001536d:	50                   	push   eax
c001536e:	e8 6e 66 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	90                   	nop
c0015377:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001537a:	c9                   	leave  
c001537b:	c3                   	ret    

c001537c <sendKeyToTerminal(unsigned char)>:
c001537c:	55                   	push   ebp
c001537d:	89 e5                	mov    ebp,esp
c001537f:	83 ec 28             	sub    esp,0x28
c0015382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015385:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015388:	a1 64 aa 02 c0       	mov    eax,ds:0xc002aa64
c001538d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015391:	83 ec 08             	sub    esp,0x8
c0015394:	52                   	push   edx
c0015395:	50                   	push   eax
c0015396:	e8 83 ba ff ff       	call   c0010e1e <VgaText::receiveKey(unsigned char)>
c001539b:	83 c4 10             	add    esp,0x10
c001539e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00153a2:	75 41                	jne    c00153e5 <sendKeyToTerminal(unsigned char)+0x69>
c00153a4:	e8 8d 6a 00 00       	call   c001be36 <lockStuff()>
c00153a9:	a1 40 ab 02 c0       	mov    eax,ds:0xc002ab40
c00153ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153b1:	c7 05 40 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ab40,0x0
c00153bb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153bf:	74 1f                	je     c00153e0 <sendKeyToTerminal(unsigned char)+0x64>
c00153c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00153c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153d0:	83 ec 0c             	sub    esp,0xc
c00153d3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153d6:	e8 4b 70 00 00       	call   c001c426 <unblockTask(ThreadControlBlock*)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	eb db                	jmp    c00153bb <sendKeyToTerminal(unsigned char)+0x3f>
c00153e0:	e8 ea 6d 00 00       	call   c001c1cf <unlockStuff()>
c00153e5:	90                   	nop
c00153e6:	c9                   	leave  
c00153e7:	c3                   	ret    

c00153e8 <sendKeyboardToken(KeyboardToken)>:
c00153e8:	55                   	push   ebp
c00153e9:	89 e5                	mov    ebp,esp
c00153eb:	83 ec 18             	sub    esp,0x18
c00153ee:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00153f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f4:	0f b7 c0             	movzx  eax,ax
c00153f7:	83 f2 01             	xor    edx,0x1
c00153fa:	88 90 60 ab 02 c0    	mov    BYTE PTR [eax-0x3ffd54a0],dl
c0015400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015403:	66 3d 03 02          	cmp    ax,0x203
c0015407:	75 07                	jne    c0015410 <sendKeyboardToken(KeyboardToken)+0x28>
c0015409:	a0 60 ac 02 c0       	mov    al,ds:0xc002ac60
c001540e:	84 c0                	test   al,al
c0015410:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015414:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015417:	a0 68 af 02 c0       	mov    al,ds:0xc002af68
c001541c:	38 c2                	cmp    dl,al
c001541e:	74 1c                	je     c001543c <sendKeyboardToken(KeyboardToken)+0x54>
c0015420:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015423:	a2 68 af 02 c0       	mov    ds:0xc002af68,al
c0015428:	a0 68 af 02 c0       	mov    al,ds:0xc002af68
c001542d:	0f b6 c0             	movzx  eax,al
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	50                   	push   eax
c0015434:	e8 53 ac ff ff       	call   c001008c <setTerminalScrollLock(bool)>
c0015439:	83 c4 10             	add    esp,0x10
c001543c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001543f:	84 c0                	test   al,al
c0015441:	0f 84 ae 00 00 00    	je     c00154f5 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544a:	66 3d 10 03          	cmp    ax,0x310
c001544e:	75 06                	jne    c0015456 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015450:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015459:	66 3d 11 03          	cmp    ax,0x311
c001545d:	75 06                	jne    c0015465 <sendKeyboardToken(KeyboardToken)+0x7d>
c001545f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015468:	66 3d 12 03          	cmp    ax,0x312
c001546c:	75 06                	jne    c0015474 <sendKeyboardToken(KeyboardToken)+0x8c>
c001546e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	66 3d 13 03          	cmp    ax,0x313
c001547b:	75 06                	jne    c0015483 <sendKeyboardToken(KeyboardToken)+0x9b>
c001547d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015486:	66 3d 14 03          	cmp    ax,0x314
c001548a:	75 06                	jne    c0015492 <sendKeyboardToken(KeyboardToken)+0xaa>
c001548c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	66 3d 15 03          	cmp    ax,0x315
c0015499:	75 06                	jne    c00154a1 <sendKeyboardToken(KeyboardToken)+0xb9>
c001549b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00154a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a4:	66 3d 16 03          	cmp    ax,0x316
c00154a8:	75 06                	jne    c00154b0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00154aa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b3:	66 3d 17 03          	cmp    ax,0x317
c00154b7:	75 06                	jne    c00154bf <sendKeyboardToken(KeyboardToken)+0xd7>
c00154b9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00154bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c2:	66 3d 18 03          	cmp    ax,0x318
c00154c6:	75 06                	jne    c00154ce <sendKeyboardToken(KeyboardToken)+0xe6>
c00154c8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00154ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d1:	66 3d 19 03          	cmp    ax,0x319
c00154d5:	75 06                	jne    c00154dd <sendKeyboardToken(KeyboardToken)+0xf5>
c00154d7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00154dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e0:	66 3d 1a 03          	cmp    ax,0x31a
c00154e4:	0f 85 c9 00 00 00    	jne    c00155b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154ea:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00154f0:	e9 be 00 00 00       	jmp    c00155b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	66 3d 10 03          	cmp    ax,0x310
c00154fc:	75 0a                	jne    c0015508 <sendKeyboardToken(KeyboardToken)+0x120>
c00154fe:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015504:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	66 3d 11 03          	cmp    ax,0x311
c001550f:	75 0a                	jne    c001551b <sendKeyboardToken(KeyboardToken)+0x133>
c0015511:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015517:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001551b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551e:	66 3d 12 03          	cmp    ax,0x312
c0015522:	75 0a                	jne    c001552e <sendKeyboardToken(KeyboardToken)+0x146>
c0015524:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001552a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	66 3d 13 03          	cmp    ax,0x313
c0015535:	75 0a                	jne    c0015541 <sendKeyboardToken(KeyboardToken)+0x159>
c0015537:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001553d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015544:	66 3d 14 03          	cmp    ax,0x314
c0015548:	75 0a                	jne    c0015554 <sendKeyboardToken(KeyboardToken)+0x16c>
c001554a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015550:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015557:	66 3d 15 03          	cmp    ax,0x315
c001555b:	75 0a                	jne    c0015567 <sendKeyboardToken(KeyboardToken)+0x17f>
c001555d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015563:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556a:	66 3d 16 03          	cmp    ax,0x316
c001556e:	75 0a                	jne    c001557a <sendKeyboardToken(KeyboardToken)+0x192>
c0015570:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015576:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	66 3d 17 03          	cmp    ax,0x317
c0015581:	75 0a                	jne    c001558d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015583:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015589:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	66 3d 18 03          	cmp    ax,0x318
c0015594:	75 0a                	jne    c00155a0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015596:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001559c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	66 3d 19 03          	cmp    ax,0x319
c00155a7:	75 0a                	jne    c00155b3 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155a9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b6:	66 3d 00 02          	cmp    ax,0x200
c00155ba:	75 2a                	jne    c00155e6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155bc:	a0 60 af 02 c0       	mov    al,ds:0xc002af60
c00155c1:	83 f0 01             	xor    eax,0x1
c00155c4:	84 c0                	test   al,al
c00155c6:	74 1e                	je     c00155e6 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155c8:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00155cd:	6a 01                	push   0x1
c00155cf:	6a 00                	push   0x0
c00155d1:	68 0a 53 01 c0       	push   0xc001530a
c00155d6:	50                   	push   eax
c00155d7:	e8 64 69 00 00       	call   c001bf40 <Process::createThread(void (*)(void*), void*, int)>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	c6 05 60 af 02 c0 01 	mov    BYTE PTR ds:0xc002af60,0x1
c00155e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e9:	66 3d 1d 03          	cmp    ax,0x31d
c00155ed:	75 06                	jne    c00155f5 <sendKeyboardToken(KeyboardToken)+0x20d>
c00155ef:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	66 3d 1c 03          	cmp    ax,0x31c
c00155fc:	75 06                	jne    c0015604 <sendKeyboardToken(KeyboardToken)+0x21c>
c00155fe:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015607:	66 3d 1b 03          	cmp    ax,0x31b
c001560b:	75 06                	jne    c0015613 <sendKeyboardToken(KeyboardToken)+0x22b>
c001560d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015616:	66 3d 1e 03          	cmp    ax,0x31e
c001561a:	75 06                	jne    c0015622 <sendKeyboardToken(KeyboardToken)+0x23a>
c001561c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015625:	66 3d 1f 03          	cmp    ax,0x31f
c0015629:	75 06                	jne    c0015631 <sendKeyboardToken(KeyboardToken)+0x249>
c001562b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015634:	66 3d 1a 03          	cmp    ax,0x31a
c0015638:	75 06                	jne    c0015640 <sendKeyboardToken(KeyboardToken)+0x258>
c001563a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015640:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015644:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015647:	83 f0 01             	xor    eax,0x1
c001564a:	84 c0                	test   al,al
c001564c:	74 77                	je     c00156c5 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001564e:	a0 61 ac 02 c0       	mov    al,ds:0xc002ac61
c0015653:	84 c0                	test   al,al
c0015655:	74 41                	je     c0015698 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0015657:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001565b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001565f:	74 2b                	je     c001568c <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015661:	8b 15 64 af 02 c0    	mov    edx,DWORD PTR ds:0xc002af64
c0015667:	89 d0                	mov    eax,edx
c0015669:	c1 e0 02             	shl    eax,0x2
c001566c:	01 d0                	add    eax,edx
c001566e:	01 c0                	add    eax,eax
c0015670:	a3 64 af 02 c0       	mov    ds:0xc002af64,eax
c0015675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015678:	0f b7 c0             	movzx  eax,ax
c001567b:	8d 50 d0             	lea    edx,[eax-0x30]
c001567e:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c0015683:	01 d0                	add    eax,edx
c0015685:	a3 64 af 02 c0       	mov    ds:0xc002af64,eax
c001568a:	eb 6d                	jmp    c00156f9 <sendKeyboardToken(KeyboardToken)+0x311>
c001568c:	c7 05 64 af 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002af64,0x0
c0015696:	eb 61                	jmp    c00156f9 <sendKeyboardToken(KeyboardToken)+0x311>
c0015698:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c001569d:	85 c0                	test   eax,eax
c001569f:	74 18                	je     c00156b9 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00156a1:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c00156a6:	0f b6 c0             	movzx  eax,al
c00156a9:	83 ec 0c             	sub    esp,0xc
c00156ac:	50                   	push   eax
c00156ad:	e8 ca fc ff ff       	call   c001537c <sendKeyToTerminal(unsigned char)>
c00156b2:	83 c4 10             	add    esp,0x10
c00156b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156b9:	c7 05 64 af 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002af64,0x0
c00156c3:	eb 34                	jmp    c00156f9 <sendKeyboardToken(KeyboardToken)+0x311>
c00156c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c8:	66 3d 01 01          	cmp    ax,0x101
c00156cc:	75 2b                	jne    c00156f9 <sendKeyboardToken(KeyboardToken)+0x311>
c00156ce:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c00156d3:	85 c0                	test   eax,eax
c00156d5:	74 18                	je     c00156ef <sendKeyboardToken(KeyboardToken)+0x307>
c00156d7:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c00156dc:	0f b6 c0             	movzx  eax,al
c00156df:	83 ec 0c             	sub    esp,0xc
c00156e2:	50                   	push   eax
c00156e3:	e8 94 fc ff ff       	call   c001537c <sendKeyToTerminal(unsigned char)>
c00156e8:	83 c4 10             	add    esp,0x10
c00156eb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156ef:	c7 05 64 af 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002af64,0x0
c00156f9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00156fc:	83 f0 01             	xor    eax,0x1
c00156ff:	84 c0                	test   al,al
c0015701:	74 4c                	je     c001574f <sendKeyboardToken(KeyboardToken)+0x367>
c0015703:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015706:	83 f0 01             	xor    eax,0x1
c0015709:	84 c0                	test   al,al
c001570b:	74 42                	je     c001574f <sendKeyboardToken(KeyboardToken)+0x367>
c001570d:	a0 60 ac 02 c0       	mov    al,ds:0xc002ac60
c0015712:	83 f0 01             	xor    eax,0x1
c0015715:	84 c0                	test   al,al
c0015717:	74 36                	je     c001574f <sendKeyboardToken(KeyboardToken)+0x367>
c0015719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571c:	66 83 f8 1f          	cmp    ax,0x1f
c0015720:	76 09                	jbe    c001572b <sendKeyboardToken(KeyboardToken)+0x343>
c0015722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015725:	66 83 f8 7e          	cmp    ax,0x7e
c0015729:	76 12                	jbe    c001573d <sendKeyboardToken(KeyboardToken)+0x355>
c001572b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572e:	66 83 f8 0a          	cmp    ax,0xa
c0015732:	74 09                	je     c001573d <sendKeyboardToken(KeyboardToken)+0x355>
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	66 83 f8 08          	cmp    ax,0x8
c001573b:	75 12                	jne    c001574f <sendKeyboardToken(KeyboardToken)+0x367>
c001573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015740:	0f b6 c0             	movzx  eax,al
c0015743:	83 ec 0c             	sub    esp,0xc
c0015746:	50                   	push   eax
c0015747:	e8 30 fc ff ff       	call   c001537c <sendKeyToTerminal(unsigned char)>
c001574c:	83 c4 10             	add    esp,0x10
c001574f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015752:	83 f0 01             	xor    eax,0x1
c0015755:	84 c0                	test   al,al
c0015757:	74 4f                	je     c00157a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015759:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001575c:	83 f0 01             	xor    eax,0x1
c001575f:	84 c0                	test   al,al
c0015761:	74 45                	je     c00157a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015763:	a0 60 ac 02 c0       	mov    al,ds:0xc002ac60
c0015768:	84 c0                	test   al,al
c001576a:	74 3c                	je     c00157a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001576c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576f:	66 83 f8 3f          	cmp    ax,0x3f
c0015773:	76 33                	jbe    c00157a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015778:	66 83 f8 7f          	cmp    ax,0x7f
c001577c:	77 2a                	ja     c00157a8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	88 c2                	mov    dl,al
c0015783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015786:	66 83 f8 5f          	cmp    ax,0x5f
c001578a:	76 04                	jbe    c0015790 <sendKeyboardToken(KeyboardToken)+0x3a8>
c001578c:	b0 20                	mov    al,0x20
c001578e:	eb 02                	jmp    c0015792 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015790:	b0 00                	mov    al,0x0
c0015792:	29 c2                	sub    edx,eax
c0015794:	88 d0                	mov    al,dl
c0015796:	83 e8 40             	sub    eax,0x40
c0015799:	0f b6 c0             	movzx  eax,al
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	50                   	push   eax
c00157a0:	e8 d7 fb ff ff       	call   c001537c <sendKeyToTerminal(unsigned char)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	66 3d 00 03          	cmp    ax,0x300
c00157af:	75 0f                	jne    c00157c0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157b4:	83 f0 01             	xor    eax,0x1
c00157b7:	84 c0                	test   al,al
c00157b9:	74 05                	je     c00157c0 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157bb:	e8 f3 b0 ff ff       	call   c00108b3 <doTerminalCycle()>
c00157c0:	90                   	nop
c00157c1:	c9                   	leave  
c00157c2:	c3                   	ret    

c00157c3 <clearInternalKeybuffer(VgaText*)>:
c00157c3:	55                   	push   ebp
c00157c4:	89 e5                	mov    ebp,esp
c00157c6:	83 ec 08             	sub    esp,0x8
c00157c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cc:	05 34 11 00 00       	add    eax,0x1134
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	50                   	push   eax
c00157d5:	e8 c0 ae fe ff       	call   c000069a <strlen>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00157e0:	81 c2 34 11 00 00    	add    edx,0x1134
c00157e6:	83 ec 04             	sub    esp,0x4
c00157e9:	50                   	push   eax
c00157ea:	6a 00                	push   0x0
c00157ec:	52                   	push   edx
c00157ed:	e8 8b ae fe ff       	call   c000067d <memset>
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	90                   	nop
c00157f6:	c9                   	leave  
c00157f7:	c3                   	ret    

c00157f8 <readKeyboard(VgaText*, char*, unsigned long)>:
c00157f8:	55                   	push   ebp
c00157f9:	89 e5                	mov    ebp,esp
c00157fb:	83 ec 18             	sub    esp,0x18
c00157fe:	fb                   	sti    
c00157ff:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015806:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001580a:	0f 84 8a 00 00 00    	je     c001589a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015819:	84 c0                	test   al,al
c001581b:	75 11                	jne    c001582e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001581d:	e8 ed 65 00 00       	call   c001be0f <lockScheduler()>
c0015822:	e8 23 69 00 00       	call   c001c14a <schedule()>
c0015827:	e8 e5 65 00 00       	call   c001be11 <unlockScheduler()>
c001582c:	eb e2                	jmp    c0015810 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001582e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015831:	8d 50 01             	lea    edx,[eax+0x1]
c0015834:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015837:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001583a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015840:	88 10                	mov    BYTE PTR [eax],dl
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001584b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	05 34 11 00 00       	add    eax,0x1134
c0015856:	83 ec 0c             	sub    esp,0xc
c0015859:	50                   	push   eax
c001585a:	e8 3b ae fe ff       	call   c000069a <strlen>
c001585f:	83 c4 10             	add    esp,0x10
c0015862:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015865:	81 c2 34 11 00 00    	add    edx,0x1134
c001586b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001586e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015871:	81 c2 34 11 00 00    	add    edx,0x1134
c0015877:	83 ec 04             	sub    esp,0x4
c001587a:	50                   	push   eax
c001587b:	51                   	push   ecx
c001587c:	52                   	push   edx
c001587d:	e8 8d ad fe ff       	call   c000060f <memmove>
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015888:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001588b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001588f:	0f 85 71 ff ff ff    	jne    c0015806 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015895:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015898:	eb 03                	jmp    c001589d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001589a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589d:	c9                   	leave  
c001589e:	c3                   	ret    
c001589f:	90                   	nop

c00158a0 <Keyboard::Keyboard(char const*)>:
c00158a0:	83 ec 0c             	sub    esp,0xc
c00158a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158a7:	83 ec 08             	sub    esp,0x8
c00158aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158ae:	50                   	push   eax
c00158af:	e8 6a e3 ff ff       	call   c0013c1e <Device::Device(char const*)>
c00158b4:	83 c4 10             	add    esp,0x10
c00158b7:	ba 54 7e 02 c0       	mov    edx,0xc0027e54
c00158bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c0:	89 10                	mov    DWORD PTR [eax],edx
c00158c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00158d0:	c6 05 44 ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab44,0x1
c00158d7:	90                   	nop
c00158d8:	83 c4 0c             	add    esp,0xc
c00158db:	c3                   	ret    

c00158dc <Keyboard::~Keyboard()>:
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	ba 54 7e 02 c0       	mov    edx,0xc0027e54
c00158e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e8:	89 10                	mov    DWORD PTR [eax],edx
c00158ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	50                   	push   eax
c00158f2:	e8 09 e0 ff ff       	call   c0013900 <Device::~Device()>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	90                   	nop
c00158fb:	83 c4 0c             	add    esp,0xc
c00158fe:	c3                   	ret    
c00158ff:	90                   	nop

c0015900 <Keyboard::~Keyboard()>:
c0015900:	83 ec 0c             	sub    esp,0xc
c0015903:	83 ec 0c             	sub    esp,0xc
c0015906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001590a:	e8 cd ff ff ff       	call   c00158dc <Keyboard::~Keyboard()>
c001590f:	83 c4 10             	add    esp,0x10
c0015912:	83 ec 08             	sub    esp,0x8
c0015915:	68 5c 01 00 00       	push   0x15c
c001591a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001591e:	e8 3c cc ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0015923:	83 c4 10             	add    esp,0x10
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	c3                   	ret    

c001592a <LogicalDisk::close(int, int, void*)>:
c001592a:	83 c8 ff             	or     eax,0xffffffff
c001592d:	c3                   	ret    

c001592e <LogicalDisk::~LogicalDisk()>:
c001592e:	83 ec 0c             	sub    esp,0xc
c0015931:	ba 04 7f 02 c0       	mov    edx,0xc0027f04
c0015936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593a:	89 10                	mov    DWORD PTR [eax],edx
c001593c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	50                   	push   eax
c0015944:	e8 b7 df ff ff       	call   c0013900 <Device::~Device()>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	90                   	nop
c001594d:	83 c4 0c             	add    esp,0xc
c0015950:	c3                   	ret    
c0015951:	90                   	nop

c0015952 <LogicalDisk::~LogicalDisk()>:
c0015952:	83 ec 0c             	sub    esp,0xc
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001595c:	e8 cd ff ff ff       	call   c001592e <LogicalDisk::~LogicalDisk()>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	83 ec 08             	sub    esp,0x8
c0015967:	68 74 01 00 00       	push   0x174
c001596c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015970:	e8 ea cb ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0015975:	83 c4 10             	add    esp,0x10
c0015978:	83 c4 0c             	add    esp,0xc
c001597b:	c3                   	ret    

c001597c <LogicalDisk::open(int, int, void*)>:
c001597c:	83 ec 18             	sub    esp,0x18
c001597f:	68 80 7e 02 c0       	push   0xc0027e80
c0015984:	e8 7a 34 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0015989:	83 c8 ff             	or     eax,0xffffffff
c001598c:	83 c4 1c             	add    esp,0x1c
c001598f:	c3                   	ret    

c0015990 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015990:	53                   	push   ebx
c0015991:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015999:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001599d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00159a3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00159a9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159af:	77 10                	ja     c00159c1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159b1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00159b7:	89 d3                	mov    ebx,edx
c00159b9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00159bf:	72 05                	jb     c00159c6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00159c1:	83 c8 ff             	or     eax,0xffffffff
c00159c4:	89 c2                	mov    edx,eax
c00159c6:	5b                   	pop    ebx
c00159c7:	c3                   	ret    

c00159c8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00159c8:	56                   	push   esi
c00159c9:	83 c8 ff             	or     eax,0xffffffff
c00159cc:	53                   	push   ebx
c00159cd:	89 c2                	mov    edx,eax
c00159cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00159d3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00159d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00159db:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00159e1:	77 27                	ja     c0015a0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159e3:	89 d8                	mov    eax,ebx
c00159e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00159eb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00159f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159f6:	89 c2                	mov    edx,eax
c00159f8:	73 10                	jae    c0015a0a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159fa:	89 c8                	mov    eax,ecx
c00159fc:	89 da                	mov    edx,ebx
c00159fe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015a04:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015a0a:	5b                   	pop    ebx
c0015a0b:	5e                   	pop    esi
c0015a0c:	c3                   	ret    
c0015a0d:	90                   	nop

c0015a0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a0e:	83 ec 1c             	sub    esp,0x1c
c0015a11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a25:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a34:	83 ec 08             	sub    esp,0x8
c0015a37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a3b:	50                   	push   eax
c0015a3c:	e8 dd e1 ff ff       	call   c0013c1e <Device::Device(char const*)>
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	ba 04 7f 02 c0       	mov    edx,0xc0027f04
c0015a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a4d:	89 10                	mov    DWORD PTR [eax],edx
c0015a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a53:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a5e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a69:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015a73:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a7f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015a85:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015a8b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015a92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a96:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015a9c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015aaa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015abe:	90                   	nop
c0015abf:	83 c4 1c             	add    esp,0x1c
c0015ac2:	c3                   	ret    
c0015ac3:	90                   	nop

c0015ac4 <LogicalDisk::assignDriveLetter()>:
c0015ac4:	55                   	push   ebp
c0015ac5:	57                   	push   edi
c0015ac6:	56                   	push   esi
c0015ac7:	53                   	push   ebx
c0015ac8:	83 ec 14             	sub    esp,0x14
c0015acb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015acf:	8b 3d 80 af 02 c0    	mov    edi,DWORD PTR ds:0xc002af80
c0015ad5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015adb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015adf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ae5:	8b 3d 84 af 02 c0    	mov    edi,DWORD PTR ds:0xc002af84
c0015aeb:	3c 01                	cmp    al,0x1
c0015aed:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015af1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015af5:	19 c0                	sbb    eax,eax
c0015af7:	83 e0 02             	and    eax,0x2
c0015afa:	83 c0 41             	add    eax,0x41
c0015afd:	0f be e8             	movsx  ebp,al
c0015b00:	3c 43                	cmp    al,0x43
c0015b02:	75 10                	jne    c0015b14 <LogicalDisk::assignDriveLetter()+0x50>
c0015b04:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015b0b:	75 5d                	jne    c0015b6a <LogicalDisk::assignDriveLetter()+0xa6>
c0015b0d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b12:	75 56                	jne    c0015b6a <LogicalDisk::assignDriveLetter()+0xa6>
c0015b14:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b17:	ba 01 00 00 00       	mov    edx,0x1
c0015b1c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b20:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b24:	d3 e2                	shl    edx,cl
c0015b26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b2a:	89 d7                	mov    edi,edx
c0015b2c:	89 d6                	mov    esi,edx
c0015b2e:	c1 ff 1f             	sar    edi,0x1f
c0015b31:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b35:	21 f9                	and    ecx,edi
c0015b37:	09 d1                	or     ecx,edx
c0015b39:	75 2f                	jne    c0015b6a <LogicalDisk::assignDriveLetter()+0xa6>
c0015b3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b43:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b49:	09 f2                	or     edx,esi
c0015b4b:	89 15 80 af 02 c0    	mov    DWORD PTR ds:0xc002af80,edx
c0015b51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b55:	09 fa                	or     edx,edi
c0015b57:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015b5b:	89 15 84 af 02 c0    	mov    DWORD PTR ds:0xc002af84,edx
c0015b61:	89 1c bd a0 af 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5060],ebx
c0015b68:	eb 08                	jmp    c0015b72 <LogicalDisk::assignDriveLetter()+0xae>
c0015b6a:	45                   	inc    ebp
c0015b6b:	40                   	inc    eax
c0015b6c:	3c 5b                	cmp    al,0x5b
c0015b6e:	75 90                	jne    c0015b00 <LogicalDisk::assignDriveLetter()+0x3c>
c0015b70:	31 c0                	xor    eax,eax
c0015b72:	83 c4 14             	add    esp,0x14
c0015b75:	5b                   	pop    ebx
c0015b76:	5e                   	pop    esi
c0015b77:	5f                   	pop    edi
c0015b78:	5d                   	pop    ebp
c0015b79:	c3                   	ret    

c0015b7a <LogicalDisk::mount()>:
c0015b7a:	56                   	push   esi
c0015b7b:	53                   	push   ebx
c0015b7c:	51                   	push   ecx
c0015b7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b81:	8b 1d 08 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab08
c0015b87:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015b91:	85 db                	test   ebx,ebx
c0015b93:	74 50                	je     c0015be5 <LogicalDisk::mount()+0x6b>
c0015b95:	e8 60 62 00 00       	call   c001bdfa <getIRQNestingLevel()>
c0015b9a:	52                   	push   edx
c0015b9b:	52                   	push   edx
c0015b9c:	50                   	push   eax
c0015b9d:	68 a4 7e 02 c0       	push   0xc0027ea4
c0015ba2:	e8 98 ca ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0015ba7:	83 c4 0c             	add    esp,0xc
c0015baa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015bb1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015bb3:	83 e8 41             	sub    eax,0x41
c0015bb6:	50                   	push   eax
c0015bb7:	56                   	push   esi
c0015bb8:	53                   	push   ebx
c0015bb9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	84 c0                	test   al,al
c0015bc1:	74 08                	je     c0015bcb <LogicalDisk::mount()+0x51>
c0015bc3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015bc9:	eb 1c                	jmp    c0015be7 <LogicalDisk::mount()+0x6d>
c0015bcb:	e8 2a 62 00 00       	call   c001bdfa <getIRQNestingLevel()>
c0015bd0:	51                   	push   ecx
c0015bd1:	51                   	push   ecx
c0015bd2:	50                   	push   eax
c0015bd3:	68 bf 7e 02 c0       	push   0xc0027ebf
c0015bd8:	e8 62 ca ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0015bdd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	eb ac                	jmp    c0015b91 <LogicalDisk::mount()+0x17>
c0015be5:	31 c0                	xor    eax,eax
c0015be7:	5a                   	pop    edx
c0015be8:	5b                   	pop    ebx
c0015be9:	5e                   	pop    esi
c0015bea:	c3                   	ret    
c0015beb:	90                   	nop

c0015bec <LogicalDisk::unmount()>:
c0015bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015bfa:	c3                   	ret    
c0015bfb:	90                   	nop

c0015bfc <LogicalDisk::unassignDriveLetter()>:
c0015bfc:	57                   	push   edi
c0015bfd:	56                   	push   esi
c0015bfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c02:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015c09:	84 c9                	test   cl,cl
c0015c0b:	75 0f                	jne    c0015c1c <LogicalDisk::unassignDriveLetter()+0x20>
c0015c0d:	c7 44 24 0c da 7e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027eda
c0015c15:	5e                   	pop    esi
c0015c16:	5f                   	pop    edi
c0015c17:	e9 e7 31 00 00       	jmp    c0018e03 <Krnl::panic(char const*)>
c0015c1c:	83 e9 41             	sub    ecx,0x41
c0015c1f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c26:	b8 01 00 00 00       	mov    eax,0x1
c0015c2b:	c7 04 8d a0 af 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5060],0x0
c0015c36:	d3 e0                	shl    eax,cl
c0015c38:	89 c7                	mov    edi,eax
c0015c3a:	f7 d0                	not    eax
c0015c3c:	c1 ff 1f             	sar    edi,0x1f
c0015c3f:	21 05 80 af 02 c0    	and    DWORD PTR ds:0xc002af80,eax
c0015c45:	89 fe                	mov    esi,edi
c0015c47:	f7 d6                	not    esi
c0015c49:	21 35 84 af 02 c0    	and    DWORD PTR ds:0xc002af84,esi
c0015c4f:	5e                   	pop    esi
c0015c50:	5f                   	pop    edi
c0015c51:	c3                   	ret    

c0015c52 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015c52:	57                   	push   edi
c0015c53:	56                   	push   esi
c0015c54:	53                   	push   ebx
c0015c55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015c59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c5d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c65:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c6b:	77 41                	ja     c0015cae <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015c6d:	99                   	cdq    
c0015c6e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015c74:	01 c8                	add    eax,ecx
c0015c76:	11 da                	adc    edx,ebx
c0015c78:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015c7e:	19 d7                	sbb    edi,edx
c0015c80:	72 33                	jb     c0015cb5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015c82:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015c88:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015c8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015c92:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015c96:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015c9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ca6:	5b                   	pop    ebx
c0015ca7:	5e                   	pop    esi
c0015ca8:	5f                   	pop    edi
c0015ca9:	e9 74 09 00 00       	jmp    c0016622 <VCache::read(unsigned long long, int, void*)>
c0015cae:	b8 05 00 00 00       	mov    eax,0x5
c0015cb3:	eb 05                	jmp    c0015cba <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015cb5:	b8 07 00 00 00       	mov    eax,0x7
c0015cba:	5b                   	pop    ebx
c0015cbb:	5e                   	pop    esi
c0015cbc:	5f                   	pop    edi
c0015cbd:	c3                   	ret    

c0015cbe <LogicalDisk::write(unsigned long long, int, void*)>:
c0015cbe:	57                   	push   edi
c0015cbf:	56                   	push   esi
c0015cc0:	53                   	push   ebx
c0015cc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015cc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cc9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ccd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cd1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cd7:	77 41                	ja     c0015d1a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015cd9:	99                   	cdq    
c0015cda:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ce0:	01 c8                	add    eax,ecx
c0015ce2:	11 da                	adc    edx,ebx
c0015ce4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015cea:	19 d7                	sbb    edi,edx
c0015cec:	72 33                	jb     c0015d21 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015cee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015cf4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015cfa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015cfe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d02:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d12:	5b                   	pop    ebx
c0015d13:	5e                   	pop    esi
c0015d14:	5f                   	pop    edi
c0015d15:	e9 24 08 00 00       	jmp    c001653e <VCache::write(unsigned long long, int, void*)>
c0015d1a:	b8 05 00 00 00       	mov    eax,0x5
c0015d1f:	eb 05                	jmp    c0015d26 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d21:	b8 07 00 00 00       	mov    eax,0x7
c0015d26:	5b                   	pop    ebx
c0015d27:	5e                   	pop    esi
c0015d28:	5f                   	pop    edi
c0015d29:	c3                   	ret    

c0015d2a <Mouse::Mouse(char const*)>:
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d31:	83 ec 08             	sub    esp,0x8
c0015d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d38:	50                   	push   eax
c0015d39:	e8 e0 de ff ff       	call   c0013c1e <Device::Device(char const*)>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	ba 30 7f 02 c0       	mov    edx,0xc0027f30
c0015d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4a:	89 10                	mov    DWORD PTR [eax],edx
c0015d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d50:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015d5a:	90                   	nop
c0015d5b:	83 c4 0c             	add    esp,0xc
c0015d5e:	c3                   	ret    
c0015d5f:	90                   	nop

c0015d60 <Mouse::~Mouse()>:
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	ba 30 7f 02 c0       	mov    edx,0xc0027f30
c0015d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d6c:	89 10                	mov    DWORD PTR [eax],edx
c0015d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	50                   	push   eax
c0015d76:	e8 85 db ff ff       	call   c0013900 <Device::~Device()>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	90                   	nop
c0015d7f:	83 c4 0c             	add    esp,0xc
c0015d82:	c3                   	ret    
c0015d83:	90                   	nop

c0015d84 <Mouse::~Mouse()>:
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	83 ec 0c             	sub    esp,0xc
c0015d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d8e:	e8 cd ff ff ff       	call   c0015d60 <Mouse::~Mouse()>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	83 ec 08             	sub    esp,0x8
c0015d99:	68 58 01 00 00       	push   0x158
c0015d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da2:	e8 b8 c7 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	83 c4 0c             	add    esp,0xc
c0015dad:	c3                   	ret    

c0015dae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dae:	55                   	push   ebp
c0015daf:	57                   	push   edi
c0015db0:	56                   	push   esi
c0015db1:	53                   	push   ebx
c0015db2:	81 ec 28 01 00 00    	sub    esp,0x128
c0015db8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015dbf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015dc6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015dcd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015dd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dd8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015ddc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015de3:	e8 32 df ff ff       	call   c0013d1a <Device::getName()>
c0015de8:	5a                   	pop    edx
c0015de9:	59                   	pop    ecx
c0015dea:	50                   	push   eax
c0015deb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015def:	55                   	push   ebp
c0015df0:	e8 27 a9 fe ff       	call   c000071c <strcpy>
c0015df5:	5b                   	pop    ebx
c0015df6:	58                   	pop    eax
c0015df7:	68 54 7f 02 c0       	push   0xc0027f54
c0015dfc:	55                   	push   ebp
c0015dfd:	e8 d1 a9 fe ff       	call   c00007d3 <strcat>
c0015e02:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015e09:	e8 be 96 ff ff       	call   c000f4cc <malloc>
c0015e0e:	83 c4 0c             	add    esp,0xc
c0015e11:	89 c3                	mov    ebx,eax
c0015e13:	57                   	push   edi
c0015e14:	56                   	push   esi
c0015e15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e24:	55                   	push   ebp
c0015e25:	50                   	push   eax
c0015e26:	e8 e3 fb ff ff       	call   c0015a0e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e2b:	83 c4 14             	add    esp,0x14
c0015e2e:	53                   	push   ebx
c0015e2f:	e8 90 fc ff ff       	call   c0015ac4 <LogicalDisk::assignDriveLetter()>
c0015e34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e37:	e8 3e fd ff ff       	call   c0015b7a <LogicalDisk::mount()>
c0015e3c:	58                   	pop    eax
c0015e3d:	5a                   	pop    edx
c0015e3e:	53                   	push   ebx
c0015e3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e46:	e8 e3 db ff ff       	call   c0013a2e <Device::addChild(Device*)>
c0015e4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e51:	5b                   	pop    ebx
c0015e52:	5e                   	pop    esi
c0015e53:	5f                   	pop    edi
c0015e54:	5d                   	pop    ebp
c0015e55:	c3                   	ret    

c0015e56 <createPartitionsForDisk(PhysicalDisk*)>:
c0015e56:	55                   	push   ebp
c0015e57:	57                   	push   edi
c0015e58:	56                   	push   esi
c0015e59:	53                   	push   ebx
c0015e5a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015e60:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015e67:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015e6d:	3d 00 02 00 00       	cmp    eax,0x200
c0015e72:	74 27                	je     c0015e9b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015e74:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015e7a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015e80:	83 ec 10             	sub    esp,0x10
c0015e83:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015e87:	99                   	cdq    
c0015e88:	c1 e6 0a             	shl    esi,0xa
c0015e8b:	52                   	push   edx
c0015e8c:	89 fd                	mov    ebp,edi
c0015e8e:	50                   	push   eax
c0015e8f:	55                   	push   ebp
c0015e90:	56                   	push   esi
c0015e91:	e8 e6 da 00 00       	call   c002397c <__udivdi3>
c0015e96:	e9 b1 00 00 00       	jmp    c0015f4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015e9b:	83 ec 0c             	sub    esp,0xc
c0015e9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ea4:	56                   	push   esi
c0015ea5:	6a 01                	push   0x1
c0015ea7:	6a 00                	push   0x0
c0015ea9:	6a 00                	push   0x0
c0015eab:	53                   	push   ebx
c0015eac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015eaf:	83 c4 20             	add    esp,0x20
c0015eb2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015eba:	75 0a                	jne    c0015ec6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015ebc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015ec4:	74 2c                	je     c0015ef2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ec6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ecc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ed2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ed8:	83 ec 10             	sub    esp,0x10
c0015edb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015edf:	89 f7                	mov    edi,esi
c0015ee1:	c1 e0 0a             	shl    eax,0xa
c0015ee4:	c1 ff 1f             	sar    edi,0x1f
c0015ee7:	57                   	push   edi
c0015ee8:	56                   	push   esi
c0015ee9:	52                   	push   edx
c0015eea:	50                   	push   eax
c0015eeb:	e8 8c da 00 00       	call   c002397c <__udivdi3>
c0015ef0:	eb 5a                	jmp    c0015f4c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ef2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015ef9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015f00:	83 e1 7f             	and    ecx,0x7f
c0015f03:	83 e0 7f             	and    eax,0x7f
c0015f06:	01 c1                	add    ecx,eax
c0015f08:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f0f:	83 e0 7f             	and    eax,0x7f
c0015f12:	01 c1                	add    ecx,eax
c0015f14:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f1b:	83 e0 7f             	and    eax,0x7f
c0015f1e:	00 c1                	add    cl,al
c0015f20:	74 41                	je     c0015f63 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f34:	83 ec 10             	sub    esp,0x10
c0015f37:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f3b:	89 f7                	mov    edi,esi
c0015f3d:	c1 e0 0a             	shl    eax,0xa
c0015f40:	c1 ff 1f             	sar    edi,0x1f
c0015f43:	57                   	push   edi
c0015f44:	56                   	push   esi
c0015f45:	52                   	push   edx
c0015f46:	50                   	push   eax
c0015f47:	e8 30 da 00 00       	call   c002397c <__udivdi3>
c0015f4c:	83 c4 14             	add    esp,0x14
c0015f4f:	52                   	push   edx
c0015f50:	50                   	push   eax
c0015f51:	6a 00                	push   0x0
c0015f53:	6a 00                	push   0x0
c0015f55:	53                   	push   ebx
c0015f56:	e8 53 fe ff ff       	call   c0015dae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f5b:	83 c4 20             	add    esp,0x20
c0015f5e:	e9 79 01 00 00       	jmp    c00160dc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015f63:	89 f0                	mov    eax,esi
c0015f65:	31 f6                	xor    esi,esi
c0015f67:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015f6e:	75 02                	jne    c0015f72 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015f70:	89 f1                	mov    ecx,esi
c0015f72:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015f79:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015f80:	c1 e2 08             	shl    edx,0x8
c0015f83:	c1 e7 10             	shl    edi,0x10
c0015f86:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015f8e:	09 fa                	or     edx,edi
c0015f90:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015f98:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015f9f:	83 c0 10             	add    eax,0x10
c0015fa2:	09 fa                	or     edx,edi
c0015fa4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015fab:	c1 e7 18             	shl    edi,0x18
c0015fae:	09 fa                	or     edx,edi
c0015fb0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015fb7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015fbb:	c1 e7 10             	shl    edi,0x10
c0015fbe:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015fc5:	c1 e2 08             	shl    edx,0x8
c0015fc8:	09 fa                	or     edx,edi
c0015fca:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015fd1:	09 fa                	or     edx,edi
c0015fd3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015fda:	c1 e7 18             	shl    edi,0x18
c0015fdd:	09 fa                	or     edx,edi
c0015fdf:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015fe3:	46                   	inc    esi
c0015fe4:	83 fe 04             	cmp    esi,0x4
c0015fe7:	0f 85 7a ff ff ff    	jne    c0015f67 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff1:	83 f0 01             	xor    eax,0x1
c0015ff4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015ff8:	75 57                	jne    c0016051 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015ffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ffe:	83 f0 01             	xor    eax,0x1
c0016001:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016005:	75 4a                	jne    c0016051 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016007:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001600b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016013:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001601b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016021:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016027:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001602d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016031:	89 f7                	mov    edi,esi
c0016033:	c1 e0 0a             	shl    eax,0xa
c0016036:	c1 ff 1f             	sar    edi,0x1f
c0016039:	57                   	push   edi
c001603a:	56                   	push   esi
c001603b:	52                   	push   edx
c001603c:	50                   	push   eax
c001603d:	e8 3a d9 00 00       	call   c002397c <__udivdi3>
c0016042:	83 c4 10             	add    esp,0x10
c0016045:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016049:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001604d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016051:	84 c9                	test   cl,cl
c0016053:	74 53                	je     c00160a8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016055:	0f b6 c9             	movzx  ecx,cl
c0016058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016060:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016064:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001606c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016070:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016074:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016078:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001607c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016088:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001608c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016090:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016094:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016098:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001609c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00160a0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00160a4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00160a8:	31 ed                	xor    ebp,ebp
c00160aa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160ae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00160b2:	89 f8                	mov    eax,edi
c00160b4:	09 f0                	or     eax,esi
c00160b6:	74 1e                	je     c00160d6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160b8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00160bc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00160c0:	89 d1                	mov    ecx,edx
c00160c2:	09 c1                	or     ecx,eax
c00160c4:	74 10                	je     c00160d6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160c6:	83 ec 0c             	sub    esp,0xc
c00160c9:	57                   	push   edi
c00160ca:	56                   	push   esi
c00160cb:	52                   	push   edx
c00160cc:	50                   	push   eax
c00160cd:	53                   	push   ebx
c00160ce:	e8 db fc ff ff       	call   c0015dae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00160d3:	83 c4 20             	add    esp,0x20
c00160d6:	45                   	inc    ebp
c00160d7:	83 fd 04             	cmp    ebp,0x4
c00160da:	75 ce                	jne    c00160aa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00160dc:	81 c4 5c 02 00 00    	add    esp,0x25c
c00160e2:	5b                   	pop    ebx
c00160e3:	5e                   	pop    esi
c00160e4:	5f                   	pop    edi
c00160e5:	5d                   	pop    ebp
c00160e6:	c3                   	ret    
c00160e7:	90                   	nop

c00160e8 <Timer::Timer(char const*)>:
c00160e8:	83 ec 0c             	sub    esp,0xc
c00160eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ef:	83 ec 08             	sub    esp,0x8
c00160f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160f6:	50                   	push   eax
c00160f7:	e8 22 db ff ff       	call   c0013c1e <Device::Device(char const*)>
c00160fc:	83 c4 10             	add    esp,0x10
c00160ff:	ba 68 7f 02 c0       	mov    edx,0xc0027f68
c0016104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016108:	89 10                	mov    DWORD PTR [eax],edx
c001610a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016118:	90                   	nop
c0016119:	83 c4 0c             	add    esp,0xc
c001611c:	c3                   	ret    
c001611d:	90                   	nop

c001611e <Timer::~Timer()>:
c001611e:	83 ec 0c             	sub    esp,0xc
c0016121:	ba 68 7f 02 c0       	mov    edx,0xc0027f68
c0016126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001612a:	89 10                	mov    DWORD PTR [eax],edx
c001612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016130:	83 ec 0c             	sub    esp,0xc
c0016133:	50                   	push   eax
c0016134:	e8 c7 d7 ff ff       	call   c0013900 <Device::~Device()>
c0016139:	83 c4 10             	add    esp,0x10
c001613c:	90                   	nop
c001613d:	83 c4 0c             	add    esp,0xc
c0016140:	c3                   	ret    
c0016141:	90                   	nop

c0016142 <Timer::~Timer()>:
c0016142:	83 ec 0c             	sub    esp,0xc
c0016145:	83 ec 0c             	sub    esp,0xc
c0016148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001614c:	e8 cd ff ff ff       	call   c001611e <Timer::~Timer()>
c0016151:	83 c4 10             	add    esp,0x10
c0016154:	83 ec 08             	sub    esp,0x8
c0016157:	68 5c 01 00 00       	push   0x15c
c001615c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016160:	e8 fa c3 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	83 c4 0c             	add    esp,0xc
c001616b:	c3                   	ret    

c001616c <Timer::read()>:
c001616c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016170:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016176:	c3                   	ret    

c0016177 <timerHandler(unsigned long long)>:
c0016177:	55                   	push   ebp
c0016178:	57                   	push   edi
c0016179:	56                   	push   esi
c001617a:	53                   	push   ebx
c001617b:	83 ec 0c             	sub    esp,0xc
c001617e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016182:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016186:	01 35 10 b0 02 c0    	add    DWORD PTR ds:0xc002b010,esi
c001618c:	11 3d 14 b0 02 c0    	adc    DWORD PTR ds:0xc002b014,edi
c0016192:	80 3d ad a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a9ad,0x0
c0016199:	0f 84 07 01 00 00    	je     c00162a6 <timerHandler(unsigned long long)+0x12f>
c001619f:	e8 92 5c 00 00       	call   c001be36 <lockStuff()>
c00161a4:	83 ec 0c             	sub    esp,0xc
c00161a7:	68 9c be 02 c0       	push   0xc002be9c
c00161ac:	e8 3d f8 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161b1:	c7 04 24 9c be 02 c0 	mov    DWORD PTR [esp],0xc002be9c
c00161b8:	89 c3                	mov    ebx,eax
c00161ba:	e8 37 f8 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161bf:	83 c4 10             	add    esp,0x10
c00161c2:	84 c0                	test   al,al
c00161c4:	74 60                	je     c0016226 <timerHandler(unsigned long long)+0xaf>
c00161c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161cc:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00161cf:	85 c0                	test   eax,eax
c00161d1:	0f 85 91 00 00 00    	jne    c0016268 <timerHandler(unsigned long long)+0xf1>
c00161d7:	e9 be 00 00 00       	jmp    c001629a <timerHandler(unsigned long long)+0x123>
c00161dc:	83 ec 0c             	sub    esp,0xc
c00161df:	55                   	push   ebp
c00161e0:	e8 41 62 00 00       	call   c001c426 <unblockTask(ThreadControlBlock*)>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	39 eb                	cmp    ebx,ebp
c00161ea:	75 12                	jne    c00161fe <timerHandler(unsigned long long)+0x87>
c00161ec:	83 ec 0c             	sub    esp,0xc
c00161ef:	68 9c be 02 c0       	push   0xc002be9c
c00161f4:	e8 f5 f7 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f9:	89 c3                	mov    ebx,eax
c00161fb:	83 c4 10             	add    esp,0x10
c00161fe:	83 ec 0c             	sub    esp,0xc
c0016201:	68 9c be 02 c0       	push   0xc002be9c
c0016206:	e8 eb f7 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001620b:	83 c4 10             	add    esp,0x10
c001620e:	84 c0                	test   al,al
c0016210:	75 b4                	jne    c00161c6 <timerHandler(unsigned long long)+0x4f>
c0016212:	83 ec 0c             	sub    esp,0xc
c0016215:	68 9c be 02 c0       	push   0xc002be9c
c001621a:	e8 cf f7 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	39 d8                	cmp    eax,ebx
c0016224:	74 a0                	je     c00161c6 <timerHandler(unsigned long long)+0x4f>
c0016226:	83 ec 0c             	sub    esp,0xc
c0016229:	68 9c be 02 c0       	push   0xc002be9c
c001622e:	e8 bb f7 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016233:	c7 04 24 9c be 02 c0 	mov    DWORD PTR [esp],0xc002be9c
c001623a:	89 c5                	mov    ebp,eax
c001623c:	e8 d1 f7 00 00       	call   c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016241:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001624a:	39 15 10 b0 02 c0    	cmp    DWORD PTR ds:0xc002b010,edx
c0016250:	a1 14 b0 02 c0       	mov    eax,ds:0xc002b014
c0016255:	19 c8                	sbb    eax,ecx
c0016257:	73 83                	jae    c00161dc <timerHandler(unsigned long long)+0x65>
c0016259:	50                   	push   eax
c001625a:	50                   	push   eax
c001625b:	55                   	push   ebp
c001625c:	68 9c be 02 c0       	push   0xc002be9c
c0016261:	e8 5a f8 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016266:	eb 93                	jmp    c00161fb <timerHandler(unsigned long long)+0x84>
c0016268:	80 3d ac a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a9ac,0x0
c001626f:	74 29                	je     c001629a <timerHandler(unsigned long long)+0x123>
c0016271:	39 c6                	cmp    esi,eax
c0016273:	bb 00 00 00 00       	mov    ebx,0x0
c0016278:	19 df                	sbb    edi,ebx
c001627a:	72 19                	jb     c0016295 <timerHandler(unsigned long long)+0x11e>
c001627c:	e8 8e 5b 00 00       	call   c001be0f <lockScheduler()>
c0016281:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016286:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016289:	e8 bc 5e 00 00       	call   c001c14a <schedule()>
c001628e:	e8 7e 5b 00 00       	call   c001be11 <unlockScheduler()>
c0016293:	eb 05                	jmp    c001629a <timerHandler(unsigned long long)+0x123>
c0016295:	29 f0                	sub    eax,esi
c0016297:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001629a:	83 c4 0c             	add    esp,0xc
c001629d:	5b                   	pop    ebx
c001629e:	5e                   	pop    esi
c001629f:	5f                   	pop    edi
c00162a0:	5d                   	pop    ebp
c00162a1:	e9 29 5f 00 00       	jmp    c001c1cf <unlockStuff()>
c00162a6:	83 c4 0c             	add    esp,0xc
c00162a9:	5b                   	pop    ebx
c00162aa:	5e                   	pop    esi
c00162ab:	5f                   	pop    edi
c00162ac:	5d                   	pop    ebp
c00162ad:	c3                   	ret    

c00162ae <setupTimer(int)>:
c00162ae:	57                   	push   edi
c00162af:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00162b4:	56                   	push   esi
c00162b5:	53                   	push   ebx
c00162b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00162c9:	e8 4c da ff ff       	call   c0013d1a <Device::getName()>
c00162ce:	83 c4 10             	add    esp,0x10
c00162d1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00162d4:	0f 85 8d 00 00 00    	jne    c0016367 <setupTimer(int)+0xb9>
c00162da:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00162df:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00162e6:	74 7f                	je     c0016367 <setupTimer(int)+0xb9>
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	68 5c 01 00 00       	push   0x15c
c00162f0:	e8 d7 91 ff ff       	call   c000f4cc <malloc>
c00162f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00162f8:	89 c3                	mov    ebx,eax
c00162fa:	e8 67 d2 00 00       	call   c0023566 <PIT::PIT()>
c00162ff:	59                   	pop    ecx
c0016300:	5f                   	pop    edi
c0016301:	53                   	push   ebx
c0016302:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c0016308:	e8 21 d7 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c001630d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001630f:	6a 00                	push   0x0
c0016311:	6a 00                	push   0x0
c0016313:	56                   	push   esi
c0016314:	53                   	push   ebx
c0016315:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016318:	83 c4 14             	add    esp,0x14
c001631b:	68 60 01 00 00       	push   0x160
c0016320:	e8 a7 91 ff ff       	call   c000f4cc <malloc>
c0016325:	89 04 24             	mov    DWORD PTR [esp],eax
c0016328:	89 c7                	mov    edi,eax
c001632a:	e8 e7 d0 00 00       	call   c0023416 <APICTimer::APICTimer()>
c001632f:	6a 00                	push   0x0
c0016331:	6a 00                	push   0x0
c0016333:	56                   	push   esi
c0016334:	57                   	push   edi
c0016335:	e8 de cf 00 00       	call   c0023318 <APICTimer::open(int, int, void*)>
c001633a:	83 c4 20             	add    esp,0x20
c001633d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001633f:	6a 00                	push   0x0
c0016341:	6a 00                	push   0x0
c0016343:	6a 00                	push   0x0
c0016345:	53                   	push   ebx
c0016346:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016349:	58                   	pop    eax
c001634a:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001634f:	5a                   	pop    edx
c0016350:	57                   	push   edi
c0016351:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016357:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001635d:	e8 cc d6 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c0016362:	83 c4 10             	add    esp,0x10
c0016365:	eb 33                	jmp    c001639a <setupTimer(int)+0xec>
c0016367:	83 ec 0c             	sub    esp,0xc
c001636a:	68 5c 01 00 00       	push   0x15c
c001636f:	e8 58 91 ff ff       	call   c000f4cc <malloc>
c0016374:	89 04 24             	mov    DWORD PTR [esp],eax
c0016377:	89 c3                	mov    ebx,eax
c0016379:	e8 e8 d1 00 00       	call   c0023566 <PIT::PIT()>
c001637e:	58                   	pop    eax
c001637f:	5a                   	pop    edx
c0016380:	53                   	push   ebx
c0016381:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c0016387:	e8 a2 d6 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c001638c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001638e:	6a 00                	push   0x0
c0016390:	6a 00                	push   0x0
c0016392:	56                   	push   esi
c0016393:	53                   	push   ebx
c0016394:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016397:	83 c4 20             	add    esp,0x20
c001639a:	89 d8                	mov    eax,ebx
c001639c:	5b                   	pop    ebx
c001639d:	5e                   	pop    esi
c001639e:	5f                   	pop    edi
c001639f:	c3                   	ret    

c00163a0 <VCache::VCache(PhysicalDisk*)>:
c00163a0:	53                   	push   ebx
c00163a1:	83 ec 18             	sub    esp,0x18
c00163a4:	ba 98 7f 02 c0       	mov    edx,0xc0027f98
c00163a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ad:	89 10                	mov    DWORD PTR [eax],edx
c00163af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00163ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163be:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00163c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00163d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00163d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00163e2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00163f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00163fc:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001640b:	e8 bc 90 ff ff       	call   c000f4cc <malloc>
c0016410:	83 c4 10             	add    esp,0x10
c0016413:	89 c3                	mov    ebx,eax
c0016415:	83 ec 0c             	sub    esp,0xc
c0016418:	53                   	push   ebx
c0016419:	e8 10 5b 00 00       	call   c001bf2e <Mutex::Mutex()>
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016425:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016430:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016437:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001643e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016442:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001644c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001644f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016453:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016459:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001645f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016463:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016466:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001646d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016471:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016475:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001647b:	c1 e0 06             	shl    eax,0x6
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	50                   	push   eax
c0016482:	e8 45 90 ff ff       	call   c000f4cc <malloc>
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	89 c2                	mov    edx,eax
c001648c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016490:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016493:	90                   	nop
c0016494:	83 c4 18             	add    esp,0x18
c0016497:	5b                   	pop    ebx
c0016498:	c3                   	ret    
c0016499:	90                   	nop

c001649a <VCache::writeWriteBuffer()>:
c001649a:	53                   	push   ebx
c001649b:	83 ec 14             	sub    esp,0x14
c001649e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00164a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00164a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00164a7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00164aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164b0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00164b3:	50                   	push   eax
c00164b4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00164b7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00164be:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00164c5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00164c9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00164d0:	83 c4 28             	add    esp,0x28
c00164d3:	5b                   	pop    ebx
c00164d4:	c3                   	ret    
c00164d5:	90                   	nop

c00164d6 <VCache::~VCache()>:
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	ba 98 7f 02 c0       	mov    edx,0xc0027f98
c00164de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e2:	89 10                	mov    DWORD PTR [eax],edx
c00164e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00164eb:	84 c0                	test   al,al
c00164ed:	74 0f                	je     c00164fe <VCache::~VCache()+0x28>
c00164ef:	83 ec 0c             	sub    esp,0xc
c00164f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f6:	e8 9f ff ff ff       	call   c001649a <VCache::writeWriteBuffer()>
c00164fb:	83 c4 10             	add    esp,0x10
c00164fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016502:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016505:	83 ec 0c             	sub    esp,0xc
c0016508:	50                   	push   eax
c0016509:	e8 ce 8f ff ff       	call   c000f4dc <free>
c001650e:	83 c4 10             	add    esp,0x10
c0016511:	90                   	nop
c0016512:	83 c4 0c             	add    esp,0xc
c0016515:	c3                   	ret    

c0016516 <VCache::~VCache()>:
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	83 ec 0c             	sub    esp,0xc
c001651c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016520:	e8 b1 ff ff ff       	call   c00164d6 <VCache::~VCache()>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	83 ec 08             	sub    esp,0x8
c001652b:	6a 30                	push   0x30
c001652d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016531:	e8 29 c0 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0016536:	83 c4 10             	add    esp,0x10
c0016539:	83 c4 0c             	add    esp,0xc
c001653c:	c3                   	ret    
c001653d:	90                   	nop

c001653e <VCache::write(unsigned long long, int, void*)>:
c001653e:	55                   	push   ebp
c001653f:	57                   	push   edi
c0016540:	56                   	push   esi
c0016541:	53                   	push   ebx
c0016542:	83 ec 28             	sub    esp,0x28
c0016545:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016549:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001654d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016551:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016555:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016558:	e8 33 5e 00 00       	call   c001c390 <Semaphore::acquire()>
c001655d:	83 c4 10             	add    esp,0x10
c0016560:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016564:	74 66                	je     c00165cc <VCache::write(unsigned long long, int, void*)+0x8e>
c0016566:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016569:	99                   	cdq    
c001656a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001656e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016571:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016574:	89 c1                	mov    ecx,eax
c0016576:	89 d0                	mov    eax,edx
c0016578:	31 f1                	xor    ecx,esi
c001657a:	31 f8                	xor    eax,edi
c001657c:	89 ca                	mov    edx,ecx
c001657e:	09 c2                	or     edx,eax
c0016580:	75 3e                	jne    c00165c0 <VCache::write(unsigned long long, int, void*)+0x82>
c0016582:	83 fd 01             	cmp    ebp,0x1
c0016585:	75 39                	jne    c00165c0 <VCache::write(unsigned long long, int, void*)+0x82>
c0016587:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001658a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016590:	51                   	push   ecx
c0016591:	50                   	push   eax
c0016592:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016596:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001659a:	0f af c8             	imul   ecx,eax
c001659d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00165a0:	51                   	push   ecx
c00165a1:	e8 a1 a0 fe ff       	call   c0000647 <memcpy>
c00165a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	40                   	inc    eax
c00165ad:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00165b0:	83 f8 40             	cmp    eax,0x40
c00165b3:	75 57                	jne    c001660c <VCache::write(unsigned long long, int, void*)+0xce>
c00165b5:	83 ec 0c             	sub    esp,0xc
c00165b8:	53                   	push   ebx
c00165b9:	e8 dc fe ff ff       	call   c001649a <VCache::writeWriteBuffer()>
c00165be:	eb 34                	jmp    c00165f4 <VCache::write(unsigned long long, int, void*)+0xb6>
c00165c0:	83 ec 0c             	sub    esp,0xc
c00165c3:	53                   	push   ebx
c00165c4:	e8 d1 fe ff ff       	call   c001649a <VCache::writeWriteBuffer()>
c00165c9:	83 c4 10             	add    esp,0x10
c00165cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165cf:	83 fd 3f             	cmp    ebp,0x3f
c00165d2:	7f 25                	jg     c00165f9 <VCache::write(unsigned long long, int, void*)+0xbb>
c00165d4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00165d7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00165da:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00165dd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00165e1:	52                   	push   edx
c00165e2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00165e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00165ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165ef:	e8 53 a0 fe ff       	call   c0000647 <memcpy>
c00165f4:	83 c4 10             	add    esp,0x10
c00165f7:	eb 13                	jmp    c001660c <VCache::write(unsigned long long, int, void*)+0xce>
c00165f9:	83 ec 0c             	sub    esp,0xc
c00165fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00165fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016602:	55                   	push   ebp
c0016603:	57                   	push   edi
c0016604:	56                   	push   esi
c0016605:	50                   	push   eax
c0016606:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016609:	83 c4 20             	add    esp,0x20
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016612:	e8 01 63 00 00       	call   c001c918 <Semaphore::release()>
c0016617:	83 c4 2c             	add    esp,0x2c
c001661a:	31 c0                	xor    eax,eax
c001661c:	5b                   	pop    ebx
c001661d:	5e                   	pop    esi
c001661e:	5f                   	pop    edi
c001661f:	5d                   	pop    ebp
c0016620:	c3                   	ret    
c0016621:	90                   	nop

c0016622 <VCache::read(unsigned long long, int, void*)>:
c0016622:	57                   	push   edi
c0016623:	56                   	push   esi
c0016624:	53                   	push   ebx
c0016625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016629:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001662d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016631:	83 ec 0c             	sub    esp,0xc
c0016634:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016637:	e8 54 5d 00 00       	call   c001c390 <Semaphore::acquire()>
c001663c:	83 c4 10             	add    esp,0x10
c001663f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016643:	74 0c                	je     c0016651 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016645:	83 ec 0c             	sub    esp,0xc
c0016648:	53                   	push   ebx
c0016649:	e8 4c fe ff ff       	call   c001649a <VCache::writeWriteBuffer()>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	8b 10                	mov    edx,DWORD PTR [eax]
c0016659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001665d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016661:	57                   	push   edi
c0016662:	56                   	push   esi
c0016663:	50                   	push   eax
c0016664:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016667:	83 c4 14             	add    esp,0x14
c001666a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001666d:	e8 a6 62 00 00       	call   c001c918 <Semaphore::release()>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	31 c0                	xor    eax,eax
c0016677:	5b                   	pop    ebx
c0016678:	5e                   	pop    esi
c0016679:	5f                   	pop    edi
c001667a:	c3                   	ret    
c001667b:	90                   	nop

c001667c <Video::putrect(int, int, int, int, unsigned int)>:
c001667c:	55                   	push   ebp
c001667d:	57                   	push   edi
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	83 ec 1c             	sub    esp,0x1c
c0016683:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016687:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001668b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001668f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016693:	01 e8                	add    eax,ebp
c0016695:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001669d:	01 df                	add    edi,ebx
c001669f:	39 fb                	cmp    ebx,edi
c00166a1:	7d 1b                	jge    c00166be <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00166a3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00166a7:	7d 12                	jge    c00166bb <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00166a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00166ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00166af:	53                   	push   ebx
c00166b0:	55                   	push   ebp
c00166b1:	45                   	inc    ebp
c00166b2:	56                   	push   esi
c00166b3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	eb e8                	jmp    c00166a3 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00166bb:	43                   	inc    ebx
c00166bc:	eb e1                	jmp    c001669f <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00166be:	83 c4 1c             	add    esp,0x1c
c00166c1:	5b                   	pop    ebx
c00166c2:	5e                   	pop    esi
c00166c3:	5f                   	pop    edi
c00166c4:	5d                   	pop    ebp
c00166c5:	c3                   	ret    

c00166c6 <Video::blit(unsigned int*, int, int, int, int)>:
c00166c6:	55                   	push   ebp
c00166c7:	57                   	push   edi
c00166c8:	56                   	push   esi
c00166c9:	53                   	push   ebx
c00166ca:	83 ec 1c             	sub    esp,0x1c
c00166cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00166d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166d5:	85 c0                	test   eax,eax
c00166d7:	79 02                	jns    c00166db <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00166d9:	31 c0                	xor    eax,eax
c00166db:	c1 e0 02             	shl    eax,0x2
c00166de:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166ea:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00166ee:	39 d8                	cmp    eax,ebx
c00166f0:	7e 49                	jle    c001673b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166f2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00166f8:	7c 41                	jl     c001673b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166fa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00166fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016702:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016706:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001670a:	39 f9                	cmp    ecx,edi
c001670c:	7e 22                	jle    c0016730 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001670e:	83 c5 04             	add    ebp,0x4
c0016711:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016717:	7c 14                	jl     c001672d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016719:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001671b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001671e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016722:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016726:	56                   	push   esi
c0016727:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	47                   	inc    edi
c001672e:	eb d2                	jmp    c0016702 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016734:	43                   	inc    ebx
c0016735:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016739:	eb ab                	jmp    c00166e6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001673b:	83 c4 1c             	add    esp,0x1c
c001673e:	5b                   	pop    ebx
c001673f:	5e                   	pop    esi
c0016740:	5f                   	pop    edi
c0016741:	5d                   	pop    ebp
c0016742:	c3                   	ret    
c0016743:	90                   	nop

c0016744 <Video::clearScreen(unsigned int)>:
c0016744:	57                   	push   edi
c0016745:	56                   	push   esi
c0016746:	53                   	push   ebx
c0016747:	31 db                	xor    ebx,ebx
c0016749:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001674d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016753:	7e 1f                	jle    c0016774 <Video::clearScreen(unsigned int)+0x30>
c0016755:	31 ff                	xor    edi,edi
c0016757:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001675d:	7e 12                	jle    c0016771 <Video::clearScreen(unsigned int)+0x2d>
c001675f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016765:	53                   	push   ebx
c0016766:	57                   	push   edi
c0016767:	47                   	inc    edi
c0016768:	56                   	push   esi
c0016769:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	eb e6                	jmp    c0016757 <Video::clearScreen(unsigned int)+0x13>
c0016771:	43                   	inc    ebx
c0016772:	eb d9                	jmp    c001674d <Video::clearScreen(unsigned int)+0x9>
c0016774:	5b                   	pop    ebx
c0016775:	5e                   	pop    esi
c0016776:	5f                   	pop    edi
c0016777:	c3                   	ret    

c0016778 <Video::putpixel(int, int, unsigned int)>:
c0016778:	c7 44 24 04 a0 7f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027fa0
c0016780:	e9 ba be ff ff       	jmp    c001263f <Dbg::kprintf(char const*, ...)>
c0016785:	90                   	nop

c0016786 <Video::Video(char const*)>:
c0016786:	83 ec 0c             	sub    esp,0xc
c0016789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678d:	83 ec 08             	sub    esp,0x8
c0016790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016794:	50                   	push   eax
c0016795:	e8 84 d4 ff ff       	call   c0013c1e <Device::Device(char const*)>
c001679a:	83 c4 10             	add    esp,0x10
c001679d:	ba b8 7f 02 c0       	mov    edx,0xc0027fb8
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	89 10                	mov    DWORD PTR [eax],edx
c00167a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00167b6:	90                   	nop
c00167b7:	83 c4 0c             	add    esp,0xc
c00167ba:	c3                   	ret    
c00167bb:	90                   	nop

c00167bc <Video::~Video()>:
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	ba b8 7f 02 c0       	mov    edx,0xc0027fb8
c00167c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c8:	89 10                	mov    DWORD PTR [eax],edx
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	50                   	push   eax
c00167d2:	e8 29 d1 ff ff       	call   c0013900 <Device::~Device()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	90                   	nop
c00167db:	83 c4 0c             	add    esp,0xc
c00167de:	c3                   	ret    
c00167df:	90                   	nop

c00167e0 <Video::~Video()>:
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ea:	e8 cd ff ff ff       	call   c00167bc <Video::~Video()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	83 ec 08             	sub    esp,0x8
c00167f5:	68 64 01 00 00       	push   0x164
c00167fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167fe:	e8 5c bd ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	83 c4 0c             	add    esp,0xc
c0016809:	c3                   	ret    

c001680a <Video::isMonochrome()>:
c001680a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001680e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016814:	c3                   	ret    
c0016815:	90                   	nop

c0016816 <Video::getWidth()>:
c0016816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001681a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016820:	c3                   	ret    
c0016821:	90                   	nop

c0016822 <Video::getHeight()>:
c0016822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016826:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001682c:	c3                   	ret    
c001682d:	90                   	nop

c001682e <Video::drawCursor(int, int, unsigned char*, int)>:
c001682e:	55                   	push   ebp
c001682f:	57                   	push   edi
c0016830:	56                   	push   esi
c0016831:	53                   	push   ebx
c0016832:	83 ec 2c             	sub    esp,0x2c
c0016835:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016839:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001683d:	83 f8 01             	cmp    eax,0x1
c0016840:	19 c9                	sbb    ecx,ecx
c0016842:	31 db                	xor    ebx,ebx
c0016844:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016848:	89 cd                	mov    ebp,ecx
c001684a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016852:	f7 d5                	not    ebp
c0016854:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001685a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001685e:	01 d8                	add    eax,ebx
c0016860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016864:	56                   	push   esi
c0016865:	e8 b8 ff ff ff       	call   c0016822 <Video::getHeight()>
c001686a:	59                   	pop    ecx
c001686b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001686f:	7e 70                	jle    c00168e1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016871:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016875:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016879:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001687c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016880:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016884:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001688b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001688f:	89 f8                	mov    eax,edi
c0016891:	83 c0 20             	add    eax,0x20
c0016894:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016898:	56                   	push   esi
c0016899:	e8 78 ff ff ff       	call   c0016816 <Video::getWidth()>
c001689e:	5a                   	pop    edx
c001689f:	39 c7                	cmp    edi,eax
c00168a1:	7d 34                	jge    c00168d7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00168a3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00168a8:	74 05                	je     c00168af <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00168aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00168ac:	55                   	push   ebp
c00168ad:	eb 0d                	jmp    c00168bc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00168af:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00168b4:	74 12                	je     c00168c8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00168b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00168b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c0:	57                   	push   edi
c00168c1:	56                   	push   esi
c00168c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168c5:	83 c4 10             	add    esp,0x10
c00168c8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00168cc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00168d0:	47                   	inc    edi
c00168d1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00168d5:	75 c1                	jne    c0016898 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00168d7:	43                   	inc    ebx
c00168d8:	83 fb 20             	cmp    ebx,0x20
c00168db:	0f 85 79 ff ff ff    	jne    c001685a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00168e1:	83 c4 2c             	add    esp,0x2c
c00168e4:	5b                   	pop    ebx
c00168e5:	5e                   	pop    esi
c00168e6:	5f                   	pop    edi
c00168e7:	5d                   	pop    ebp
c00168e8:	c3                   	ret    
c00168e9:	90                   	nop

c00168ea <ACPI::close(int, int, void*)>:
c00168ea:	83 ec 1c             	sub    esp,0x1c
c00168ed:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00168f5:	74 0a                	je     c0016901 <ACPI::close(int, int, void*)+0x17>
c00168f7:	b8 00 00 00 00       	mov    eax,0x0
c00168fc:	e9 9a 00 00 00       	jmp    c001699b <ACPI::close(int, int, void*)+0xb1>
c0016901:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016906:	75 37                	jne    c001693f <ACPI::close(int, int, void*)+0x55>
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	68 f0 7f 02 c0       	push   0xc0027ff0
c0016910:	e8 2a bd ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	a1 28 b0 02 c0       	mov    eax,ds:0xc002b028
c001691d:	85 c0                	test   eax,eax
c001691f:	74 07                	je     c0016928 <ACPI::close(int, int, void*)+0x3e>
c0016921:	a1 28 b0 02 c0       	mov    eax,ds:0xc002b028
c0016926:	ff d0                	call   eax
c0016928:	83 ec 0c             	sub    esp,0xc
c001692b:	68 a4 80 02 c0       	push   0xc00280a4
c0016930:	e8 ce 24 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0016935:	83 c4 10             	add    esp,0x10
c0016938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001693d:	eb 5c                	jmp    c001699b <ACPI::close(int, int, void*)+0xb1>
c001693f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016944:	75 50                	jne    c0016996 <ACPI::close(int, int, void*)+0xac>
c0016946:	a1 24 b0 02 c0       	mov    eax,ds:0xc002b024
c001694b:	85 c0                	test   eax,eax
c001694d:	74 07                	je     c0016956 <ACPI::close(int, int, void*)+0x6c>
c001694f:	a1 24 b0 02 c0       	mov    eax,ds:0xc002b024
c0016954:	ff d0                	call   eax
c0016956:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001695b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016960:	83 e0 02             	and    eax,0x2
c0016963:	74 1c                	je     c0016981 <ACPI::close(int, int, void*)+0x97>
c0016965:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001696c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016970:	89 c2                	mov    edx,eax
c0016972:	ec                   	in     al,dx
c0016973:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016977:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001697b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001697f:	eb da                	jmp    c001695b <ACPI::close(int, int, void*)+0x71>
c0016981:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016988:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001698d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016991:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016995:	ee                   	out    dx,al
c0016996:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001699b:	83 c4 1c             	add    esp,0x1c
c001699e:	c3                   	ret    

c001699f <findRSDP()>:
c001699f:	83 ec 1c             	sub    esp,0x1c
c00169a2:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00169a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169ad:	83 e0 04             	and    eax,0x4
c00169b0:	84 c0                	test   al,al
c00169b2:	75 07                	jne    c00169bb <findRSDP()+0x1c>
c00169b4:	b8 00 00 00 00       	mov    eax,0x0
c00169b9:	eb 6a                	jmp    c0016a25 <findRSDP()+0x86>
c00169bb:	a1 f0 a9 02 c0       	mov    eax,ds:0xc002a9f0
c00169c0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00169c5:	7f 1b                	jg     c00169e2 <findRSDP()+0x43>
c00169c7:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00169cc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00169d2:	83 e2 fb             	and    edx,0xfffffffb
c00169d5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00169db:	b8 00 00 00 00       	mov    eax,0x0
c00169e0:	eb 43                	jmp    c0016a25 <findRSDP()+0x86>
c00169e2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00169ea:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00169f2:	77 2c                	ja     c0016a20 <findRSDP()+0x81>
c00169f4:	83 ec 04             	sub    esp,0x4
c00169f7:	6a 08                	push   0x8
c00169f9:	68 fd 7f 02 c0       	push   0xc0027ffd
c00169fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a02:	e8 dd 9b fe ff       	call   c00005e4 <memcmp>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	85 c0                	test   eax,eax
c0016a0c:	0f 94 c0             	sete   al
c0016a0f:	84 c0                	test   al,al
c0016a11:	74 06                	je     c0016a19 <findRSDP()+0x7a>
c0016a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a17:	eb 0c                	jmp    c0016a25 <findRSDP()+0x86>
c0016a19:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016a1e:	eb ca                	jmp    c00169ea <findRSDP()+0x4b>
c0016a20:	b8 00 00 00 00       	mov    eax,0x0
c0016a25:	83 c4 1c             	add    esp,0x1c
c0016a28:	c3                   	ret    

c0016a29 <loadACPITables(unsigned char*)>:
c0016a29:	56                   	push   esi
c0016a2a:	53                   	push   ebx
c0016a2b:	83 ec 44             	sub    esp,0x44
c0016a2e:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016a33:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a39:	83 e0 04             	and    eax,0x4
c0016a3c:	84 c0                	test   al,al
c0016a3e:	0f 84 05 02 00 00    	je     c0016c49 <loadACPITables(unsigned char*)+0x220>
c0016a44:	a0 40 b2 02 c0       	mov    al,ds:0xc002b240
c0016a49:	84 c0                	test   al,al
c0016a4b:	74 75                	je     c0016ac2 <loadACPITables(unsigned char*)+0x99>
c0016a4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016a5c:	83 e8 24             	sub    eax,0x24
c0016a5f:	c1 e8 03             	shr    eax,0x3
c0016a62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016a66:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016a6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a72:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016a76:	0f 8d b2 00 00 00    	jge    c0016b2e <loadACPITables(unsigned char*)+0x105>
c0016a7c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a80:	83 c0 24             	add    eax,0x24
c0016a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a8b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016a8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a93:	c1 e0 03             	shl    eax,0x3
c0016a96:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016a9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a9e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016aa3:	89 c1                	mov    ecx,eax
c0016aa5:	a1 2c b0 02 c0       	mov    eax,ds:0xc002b02c
c0016aaa:	8d 50 01             	lea    edx,[eax+0x1]
c0016aad:	89 15 2c b0 02 c0    	mov    DWORD PTR ds:0xc002b02c,edx
c0016ab3:	89 ca                	mov    edx,ecx
c0016ab5:	89 14 c5 44 b0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4fbc],edx
c0016abc:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016ac0:	eb ac                	jmp    c0016a6e <loadACPITables(unsigned char*)+0x45>
c0016ac2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ac6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ad1:	83 e8 24             	sub    eax,0x24
c0016ad4:	c1 e8 02             	shr    eax,0x2
c0016ad7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016adb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016ae3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ae7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016aeb:	7d 41                	jge    c0016b2e <loadACPITables(unsigned char*)+0x105>
c0016aed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016af1:	83 c0 24             	add    eax,0x24
c0016af4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016af8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016afc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b04:	c1 e0 02             	shl    eax,0x2
c0016b07:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016b0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b11:	a1 2c b0 02 c0       	mov    eax,ds:0xc002b02c
c0016b16:	8d 50 01             	lea    edx,[eax+0x1]
c0016b19:	89 15 2c b0 02 c0    	mov    DWORD PTR ds:0xc002b02c,edx
c0016b1f:	89 ca                	mov    edx,ecx
c0016b21:	89 14 c5 44 b0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4fbc],edx
c0016b28:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016b2c:	eb b5                	jmp    c0016ae3 <loadACPITables(unsigned char*)+0xba>
c0016b2e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016b36:	a1 2c b0 02 c0       	mov    eax,ds:0xc002b02c
c0016b3b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016b3f:	0f 8d 05 01 00 00    	jge    c0016c4a <loadACPITables(unsigned char*)+0x221>
c0016b45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b49:	8b 04 c5 44 b0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4fbc]
c0016b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b60:	25 ff 0f 00 00       	and    eax,0xfff
c0016b65:	89 c6                	mov    esi,eax
c0016b67:	e8 73 ac ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0016b6c:	89 c3                	mov    ebx,eax
c0016b6e:	83 ec 0c             	sub    esp,0xc
c0016b71:	6a 01                	push   0x1
c0016b73:	e8 d7 aa ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0016b78:	83 c4 10             	add    esp,0x10
c0016b7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b7f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	6a 01                	push   0x1
c0016b8a:	6a 01                	push   0x1
c0016b8c:	50                   	push   eax
c0016b8d:	52                   	push   edx
c0016b8e:	53                   	push   ebx
c0016b8f:	e8 7a b4 ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016b94:	83 c4 20             	add    esp,0x20
c0016b97:	09 f0                	or     eax,esi
c0016b99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ba1:	c1 e0 03             	shl    eax,0x3
c0016ba4:	05 40 b0 02 c0       	add    eax,0xc002b040
c0016ba9:	83 ec 04             	sub    esp,0x4
c0016bac:	6a 04                	push   0x4
c0016bae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bb2:	50                   	push   eax
c0016bb3:	e8 8f 9a fe ff       	call   c0000647 <memcpy>
c0016bb8:	83 c4 10             	add    esp,0x10
c0016bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bca:	05 00 10 00 00       	add    eax,0x1000
c0016bcf:	c1 e8 0c             	shr    eax,0xc
c0016bd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be1:	25 ff 0f 00 00       	and    eax,0xfff
c0016be6:	89 c6                	mov    esi,eax
c0016be8:	e8 f2 ab ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0016bed:	89 c3                	mov    ebx,eax
c0016bef:	83 ec 0c             	sub    esp,0xc
c0016bf2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bf6:	e8 54 aa ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c02:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016c08:	83 ec 0c             	sub    esp,0xc
c0016c0b:	6a 01                	push   0x1
c0016c0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c11:	50                   	push   eax
c0016c12:	52                   	push   edx
c0016c13:	53                   	push   ebx
c0016c14:	e8 f5 b3 ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016c19:	83 c4 20             	add    esp,0x20
c0016c1c:	09 f0                	or     eax,esi
c0016c1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c22:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016c25:	83 ec 0c             	sub    esp,0xc
c0016c28:	50                   	push   eax
c0016c29:	e8 85 ad ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c39:	89 14 c5 44 b0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4fbc],edx
c0016c40:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016c44:	e9 ed fe ff ff       	jmp    c0016b36 <loadACPITables(unsigned char*)+0x10d>
c0016c49:	90                   	nop
c0016c4a:	83 c4 44             	add    esp,0x44
c0016c4d:	5b                   	pop    ebx
c0016c4e:	5e                   	pop    esi
c0016c4f:	c3                   	ret    

c0016c50 <findRSDT(unsigned char*)>:
c0016c50:	56                   	push   esi
c0016c51:	53                   	push   ebx
c0016c52:	83 ec 44             	sub    esp,0x44
c0016c55:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016c5a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016c60:	83 e0 04             	and    eax,0x4
c0016c63:	84 c0                	test   al,al
c0016c65:	75 0a                	jne    c0016c71 <findRSDT(unsigned char*)+0x21>
c0016c67:	b8 00 00 00 00       	mov    eax,0x0
c0016c6c:	e9 f7 00 00 00       	jmp    c0016d68 <findRSDT(unsigned char*)+0x118>
c0016c71:	83 ec 04             	sub    esp,0x4
c0016c74:	6a 24                	push   0x24
c0016c76:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016c7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c7e:	50                   	push   eax
c0016c7f:	e8 c3 99 fe ff       	call   c0000647 <memcpy>
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016c8b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016c8f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016c97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ca7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016caf:	25 ff 0f 00 00       	and    eax,0xfff
c0016cb4:	89 c6                	mov    esi,eax
c0016cb6:	e8 24 ab ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0016cbb:	89 c3                	mov    ebx,eax
c0016cbd:	83 ec 0c             	sub    esp,0xc
c0016cc0:	6a 02                	push   0x2
c0016cc2:	e8 88 a9 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cce:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	6a 01                	push   0x1
c0016cd9:	6a 02                	push   0x2
c0016cdb:	50                   	push   eax
c0016cdc:	52                   	push   edx
c0016cdd:	53                   	push   ebx
c0016cde:	e8 2b b3 ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ce3:	83 c4 20             	add    esp,0x20
c0016ce6:	09 f0                	or     eax,esi
c0016ce8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016cec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cf0:	25 ff 0f 00 00       	and    eax,0xfff
c0016cf5:	89 c6                	mov    esi,eax
c0016cf7:	e8 e3 aa ff ff       	call   c00117df <Virt::getAKernelVAS()>
c0016cfc:	89 c3                	mov    ebx,eax
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	6a 02                	push   0x2
c0016d03:	e8 47 a9 ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c0016d08:	83 c4 10             	add    esp,0x10
c0016d0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d0f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016d15:	83 ec 0c             	sub    esp,0xc
c0016d18:	6a 01                	push   0x1
c0016d1a:	6a 02                	push   0x2
c0016d1c:	50                   	push   eax
c0016d1d:	52                   	push   edx
c0016d1e:	53                   	push   ebx
c0016d1f:	e8 ea b2 ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d24:	83 c4 20             	add    esp,0x20
c0016d27:	09 f0                	or     eax,esi
c0016d29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d2d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016d32:	75 11                	jne    c0016d45 <findRSDT(unsigned char*)+0xf5>
c0016d34:	c6 05 40 b2 02 c0 00 	mov    BYTE PTR ds:0xc002b240,0x0
c0016d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d3f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d43:	eb 1f                	jmp    c0016d64 <findRSDT(unsigned char*)+0x114>
c0016d45:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016d4a:	75 11                	jne    c0016d5d <findRSDT(unsigned char*)+0x10d>
c0016d4c:	c6 05 40 b2 02 c0 01 	mov    BYTE PTR ds:0xc002b240,0x1
c0016d53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d5b:	eb 07                	jmp    c0016d64 <findRSDT(unsigned char*)+0x114>
c0016d5d:	b8 00 00 00 00       	mov    eax,0x0
c0016d62:	eb 04                	jmp    c0016d68 <findRSDT(unsigned char*)+0x118>
c0016d64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d68:	83 c4 44             	add    esp,0x44
c0016d6b:	5b                   	pop    ebx
c0016d6c:	5e                   	pop    esi
c0016d6d:	c3                   	ret    

c0016d6e <findDataTable(unsigned char*, char*)>:
c0016d6e:	83 ec 1c             	sub    esp,0x1c
c0016d71:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016d76:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d7c:	83 e0 04             	and    eax,0x4
c0016d7f:	84 c0                	test   al,al
c0016d81:	75 07                	jne    c0016d8a <findDataTable(unsigned char*, char*)+0x1c>
c0016d83:	b8 00 00 00 00       	mov    eax,0x0
c0016d88:	eb 7c                	jmp    c0016e06 <findDataTable(unsigned char*, char*)+0x98>
c0016d8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d92:	a1 2c b0 02 c0       	mov    eax,ds:0xc002b02c
c0016d97:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016d9b:	7d 3a                	jge    c0016dd7 <findDataTable(unsigned char*, char*)+0x69>
c0016d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da1:	c1 e0 03             	shl    eax,0x3
c0016da4:	05 40 b0 02 c0       	add    eax,0xc002b040
c0016da9:	83 ec 04             	sub    esp,0x4
c0016dac:	6a 04                	push   0x4
c0016dae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016db2:	50                   	push   eax
c0016db3:	e8 2c 98 fe ff       	call   c00005e4 <memcmp>
c0016db8:	83 c4 10             	add    esp,0x10
c0016dbb:	85 c0                	test   eax,eax
c0016dbd:	0f 94 c0             	sete   al
c0016dc0:	84 c0                	test   al,al
c0016dc2:	74 0d                	je     c0016dd1 <findDataTable(unsigned char*, char*)+0x63>
c0016dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dc8:	8b 04 c5 44 b0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4fbc]
c0016dcf:	eb 35                	jmp    c0016e06 <findDataTable(unsigned char*, char*)+0x98>
c0016dd1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016dd5:	eb bb                	jmp    c0016d92 <findDataTable(unsigned char*, char*)+0x24>
c0016dd7:	a0 40 b2 02 c0       	mov    al,ds:0xc002b240
c0016ddc:	84 c0                	test   al,al
c0016dde:	74 07                	je     c0016de7 <findDataTable(unsigned char*, char*)+0x79>
c0016de0:	b8 58 00 00 00       	mov    eax,0x58
c0016de5:	eb 05                	jmp    c0016dec <findDataTable(unsigned char*, char*)+0x7e>
c0016de7:	b8 52 00 00 00       	mov    eax,0x52
c0016dec:	83 ec 04             	sub    esp,0x4
c0016def:	50                   	push   eax
c0016df0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016df4:	68 c8 80 02 c0       	push   0xc00280c8
c0016df9:	e8 41 b8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0016dfe:	83 c4 10             	add    esp,0x10
c0016e01:	b8 00 00 00 00       	mov    eax,0x0
c0016e06:	83 c4 1c             	add    esp,0x1c
c0016e09:	c3                   	ret    

c0016e0a <scanMADT()>:
c0016e0a:	53                   	push   ebx
c0016e0b:	83 ec 38             	sub    esp,0x38
c0016e0e:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016e13:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e19:	83 e0 04             	and    eax,0x4
c0016e1c:	84 c0                	test   al,al
c0016e1e:	0f 84 63 04 00 00    	je     c0017287 <scanMADT()+0x47d>
c0016e24:	e8 76 fb ff ff       	call   c001699f <findRSDP()>
c0016e29:	a3 4c b2 02 c0       	mov    ds:0xc002b24c,eax
c0016e2e:	a1 4c b2 02 c0       	mov    eax,ds:0xc002b24c
c0016e33:	85 c0                	test   eax,eax
c0016e35:	75 19                	jne    c0016e50 <scanMADT()+0x46>
c0016e37:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016e3c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e42:	83 e2 fb             	and    edx,0xfffffffb
c0016e45:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e4b:	e9 3b 04 00 00       	jmp    c001728b <scanMADT()+0x481>
c0016e50:	a1 4c b2 02 c0       	mov    eax,ds:0xc002b24c
c0016e55:	83 ec 0c             	sub    esp,0xc
c0016e58:	50                   	push   eax
c0016e59:	e8 f2 fd ff ff       	call   c0016c50 <findRSDT(unsigned char*)>
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	a3 48 b2 02 c0       	mov    ds:0xc002b248,eax
c0016e66:	a1 48 b2 02 c0       	mov    eax,ds:0xc002b248
c0016e6b:	85 c0                	test   eax,eax
c0016e6d:	75 19                	jne    c0016e88 <scanMADT()+0x7e>
c0016e6f:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016e74:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e7a:	83 e2 fb             	and    edx,0xfffffffb
c0016e7d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e83:	e9 03 04 00 00       	jmp    c001728b <scanMADT()+0x481>
c0016e88:	a1 48 b2 02 c0       	mov    eax,ds:0xc002b248
c0016e8d:	83 ec 0c             	sub    esp,0xc
c0016e90:	50                   	push   eax
c0016e91:	e8 93 fb ff ff       	call   c0016a29 <loadACPITables(unsigned char*)>
c0016e96:	83 c4 10             	add    esp,0x10
c0016e99:	a1 48 b2 02 c0       	mov    eax,ds:0xc002b248
c0016e9e:	83 ec 08             	sub    esp,0x8
c0016ea1:	68 06 80 02 c0       	push   0xc0028006
c0016ea6:	50                   	push   eax
c0016ea7:	e8 c2 fe ff ff       	call   c0016d6e <findDataTable(unsigned char*, char*)>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016eb3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016eb8:	75 19                	jne    c0016ed3 <scanMADT()+0xc9>
c0016eba:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0016ebf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ec5:	83 e2 fe             	and    edx,0xfffffffe
c0016ec8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ece:	e9 b8 03 00 00       	jmp    c001728b <scanMADT()+0x481>
c0016ed3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016edb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016edf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ee2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016ee6:	0f 87 9f 03 00 00    	ja     c001728b <scanMADT()+0x481>
c0016eec:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016ef4:	0f 87 91 03 00 00    	ja     c001728b <scanMADT()+0x481>
c0016efa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016efe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f06:	8d 50 01             	lea    edx,[eax+0x1]
c0016f09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f15:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016f19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f1d:	8d 50 01             	lea    edx,[eax+0x1]
c0016f20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f28:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f2c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016f30:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016f35:	0f 86 4f 03 00 00    	jbe    c001728a <scanMADT()+0x480>
c0016f3b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016f40:	75 57                	jne    c0016f99 <scanMADT()+0x18f>
c0016f42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f46:	8d 50 01             	lea    edx,[eax+0x1]
c0016f49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f4d:	8a 15 40 b4 02 c0    	mov    dl,BYTE PTR ds:0xc002b440
c0016f53:	0f b6 d2             	movzx  edx,dl
c0016f56:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f5a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f5e:	88 82 80 b4 02 c0    	mov    BYTE PTR [edx-0x3ffd4b80],al
c0016f64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f68:	8d 50 01             	lea    edx,[eax+0x1]
c0016f6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f6f:	8a 15 40 b4 02 c0    	mov    dl,BYTE PTR ds:0xc002b440
c0016f75:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016f78:	88 0d 40 b4 02 c0    	mov    BYTE PTR ds:0xc002b440,cl
c0016f7e:	0f b6 d2             	movzx  edx,dl
c0016f81:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f85:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f89:	88 82 60 b4 02 c0    	mov    BYTE PTR [edx-0x3ffd4ba0],al
c0016f8f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016f94:	e9 da 02 00 00       	jmp    c0017273 <scanMADT()+0x469>
c0016f99:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016f9e:	0f 85 14 01 00 00    	jne    c00170b8 <scanMADT()+0x2ae>
c0016fa4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fa8:	8d 50 01             	lea    edx,[eax+0x1]
c0016fab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016faf:	8a 15 00 b3 02 c0    	mov    dl,BYTE PTR ds:0xc002b300
c0016fb5:	0f b6 d2             	movzx  edx,dl
c0016fb8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016fbc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016fc0:	88 82 20 b3 02 c0    	mov    BYTE PTR [edx-0x3ffd4ce0],al
c0016fc6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016fca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016fce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fd2:	01 d0                	add    eax,edx
c0016fd4:	83 c0 2c             	add    eax,0x2c
c0016fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0016fd9:	0f b6 d0             	movzx  edx,al
c0016fdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fe0:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fe3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fe7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016feb:	0f b6 c0             	movzx  eax,al
c0016fee:	c1 e0 08             	shl    eax,0x8
c0016ff1:	89 d1                	mov    ecx,edx
c0016ff3:	09 c1                	or     ecx,eax
c0016ff5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ff9:	8d 50 02             	lea    edx,[eax+0x2]
c0016ffc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017000:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017004:	0f b6 c0             	movzx  eax,al
c0017007:	c1 e0 10             	shl    eax,0x10
c001700a:	09 c1                	or     ecx,eax
c001700c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017010:	8d 50 03             	lea    edx,[eax+0x3]
c0017013:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017017:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001701b:	0f b6 c0             	movzx  eax,al
c001701e:	c1 e0 18             	shl    eax,0x18
c0017021:	09 c1                	or     ecx,eax
c0017023:	89 ca                	mov    edx,ecx
c0017025:	a0 00 b3 02 c0       	mov    al,ds:0xc002b300
c001702a:	0f b6 c0             	movzx  eax,al
c001702d:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0017034:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017039:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001703d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017041:	01 d0                	add    eax,edx
c0017043:	83 c0 2c             	add    eax,0x2c
c0017046:	8a 00                	mov    al,BYTE PTR [eax]
c0017048:	0f b6 d0             	movzx  edx,al
c001704b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001704f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017052:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017056:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001705a:	0f b6 c0             	movzx  eax,al
c001705d:	c1 e0 08             	shl    eax,0x8
c0017060:	89 d1                	mov    ecx,edx
c0017062:	09 c1                	or     ecx,eax
c0017064:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017068:	8d 50 02             	lea    edx,[eax+0x2]
c001706b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001706f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017073:	0f b6 c0             	movzx  eax,al
c0017076:	c1 e0 10             	shl    eax,0x10
c0017079:	09 c1                	or     ecx,eax
c001707b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001707f:	8d 50 03             	lea    edx,[eax+0x3]
c0017082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017086:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001708a:	0f b6 c0             	movzx  eax,al
c001708d:	c1 e0 18             	shl    eax,0x18
c0017090:	09 c1                	or     ecx,eax
c0017092:	89 ca                	mov    edx,ecx
c0017094:	a0 00 b3 02 c0       	mov    al,ds:0xc002b300
c0017099:	0f b6 c0             	movzx  eax,al
c001709c:	89 14 85 c0 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c40],edx
c00170a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00170a8:	a0 00 b3 02 c0       	mov    al,ds:0xc002b300
c00170ad:	40                   	inc    eax
c00170ae:	a2 00 b3 02 c0       	mov    ds:0xc002b300,al
c00170b3:	e9 bb 01 00 00       	jmp    c0017273 <scanMADT()+0x469>
c00170b8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00170bd:	0f 85 e9 00 00 00    	jne    c00171ac <scanMADT()+0x3a2>
c00170c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170c7:	8d 50 01             	lea    edx,[eax+0x1]
c00170ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170d6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00170da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170de:	8d 50 01             	lea    edx,[eax+0x1]
c00170e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170ed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00170f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170f9:	01 d0                	add    eax,edx
c00170fb:	83 c0 2c             	add    eax,0x2c
c00170fe:	8a 00                	mov    al,BYTE PTR [eax]
c0017100:	0f b6 d0             	movzx  edx,al
c0017103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017107:	8d 48 01             	lea    ecx,[eax+0x1]
c001710a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017112:	0f b6 c0             	movzx  eax,al
c0017115:	c1 e0 08             	shl    eax,0x8
c0017118:	89 d1                	mov    ecx,edx
c001711a:	09 c1                	or     ecx,eax
c001711c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017120:	8d 50 02             	lea    edx,[eax+0x2]
c0017123:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017127:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001712b:	0f b6 c0             	movzx  eax,al
c001712e:	c1 e0 10             	shl    eax,0x10
c0017131:	09 c1                	or     ecx,eax
c0017133:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017137:	8d 50 03             	lea    edx,[eax+0x3]
c001713a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001713e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017142:	0f b6 c0             	movzx  eax,al
c0017145:	c1 e0 18             	shl    eax,0x18
c0017148:	09 c8                	or     eax,ecx
c001714a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001714e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017153:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017157:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001715b:	01 d0                	add    eax,edx
c001715d:	83 c0 2c             	add    eax,0x2c
c0017160:	8a 00                	mov    al,BYTE PTR [eax]
c0017162:	0f b6 c0             	movzx  eax,al
c0017165:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017169:	8d 4a 01             	lea    ecx,[edx+0x1]
c001716c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017170:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017174:	0f b6 d2             	movzx  edx,dl
c0017177:	c1 e2 08             	shl    edx,0x8
c001717a:	09 d0                	or     eax,edx
c001717c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017181:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017186:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001718b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001718f:	88 90 80 9c 02 c0    	mov    BYTE PTR [eax-0x3ffd6380],dl
c0017195:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001719a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001719f:	66 89 84 12 e0 b2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4d20],ax
c00171a7:	e9 c7 00 00 00       	jmp    c0017273 <scanMADT()+0x469>
c00171ac:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00171b1:	0f 85 b0 00 00 00    	jne    c0017267 <scanMADT()+0x45d>
c00171b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171bb:	8d 50 01             	lea    edx,[eax+0x1]
c00171be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00171c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00171ca:	0f b6 c0             	movzx  eax,al
c00171cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171d9:	01 d0                	add    eax,edx
c00171db:	83 c0 2c             	add    eax,0x2c
c00171de:	8a 00                	mov    al,BYTE PTR [eax]
c00171e0:	0f b6 d0             	movzx  edx,al
c00171e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00171ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00171f2:	0f b6 c0             	movzx  eax,al
c00171f5:	c1 e0 08             	shl    eax,0x8
c00171f8:	09 d0                	or     eax,edx
c00171fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171fe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017207:	8d 50 01             	lea    edx,[eax+0x1]
c001720a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001720e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017212:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017216:	0f b6 c0             	movzx  eax,al
c0017219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001721d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017221:	c1 e0 08             	shl    eax,0x8
c0017224:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017228:	89 c1                	mov    ecx,eax
c001722a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722e:	c1 e0 18             	shl    eax,0x18
c0017231:	89 c3                	mov    ebx,eax
c0017233:	a1 50 b2 02 c0       	mov    eax,ds:0xc002b250
c0017238:	8d 50 01             	lea    edx,[eax+0x1]
c001723b:	89 15 50 b2 02 c0    	mov    DWORD PTR ds:0xc002b250,edx
c0017241:	09 d9                	or     ecx,ebx
c0017243:	89 ca                	mov    edx,ecx
c0017245:	89 14 85 60 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4da0],edx
c001724c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017258:	68 f8 80 02 c0       	push   0xc00280f8
c001725d:	e8 dd b3 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	eb 0c                	jmp    c0017273 <scanMADT()+0x469>
c0017267:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001726c:	75 05                	jne    c0017273 <scanMADT()+0x469>
c001726e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017273:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017278:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001727c:	01 d0                	add    eax,edx
c001727e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017282:	e9 54 fc ff ff       	jmp    c0016edb <scanMADT()+0xd1>
c0017287:	90                   	nop
c0017288:	eb 01                	jmp    c001728b <scanMADT()+0x481>
c001728a:	90                   	nop
c001728b:	83 c4 38             	add    esp,0x38
c001728e:	5b                   	pop    ebx
c001728f:	c3                   	ret    

c0017290 <ACPI::ACPI()>:
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017297:	83 ec 08             	sub    esp,0x8
c001729a:	68 0b 80 02 c0       	push   0xc002800b
c001729f:	50                   	push   eax
c00172a0:	e8 79 c9 ff ff       	call   c0013c1e <Device::Device(char const*)>
c00172a5:	83 c4 10             	add    esp,0x10
c00172a8:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c00172ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b1:	89 10                	mov    DWORD PTR [eax],edx
c00172b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00172be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172c2:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00172cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172d0:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00172da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172de:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00172e5:	e8 20 fb ff ff       	call   c0016e0a <scanMADT()>
c00172ea:	90                   	nop
c00172eb:	83 c4 0c             	add    esp,0xc
c00172ee:	c3                   	ret    
c00172ef:	90                   	nop

c00172f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00172f0:	83 ec 2c             	sub    esp,0x2c
c00172f3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172fb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00172ff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017303:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017308:	88 d0                	mov    al,dl
c001730a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001730e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017313:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001731b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001731f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017325:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017329:	0f 8d 97 00 00 00    	jge    c00173c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001732f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017337:	83 c2 2a             	add    edx,0x2a
c001733a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001733e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017343:	75 78                	jne    c00173bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017345:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017349:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001734d:	83 c2 2a             	add    edx,0x2a
c0017350:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017354:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017358:	75 63                	jne    c00173bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001735a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001735f:	74 3a                	je     c001739b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017361:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017365:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017369:	83 c2 2a             	add    edx,0x2a
c001736c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017377:	39 c2                	cmp    edx,eax
c0017379:	74 10                	je     c001738b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001737b:	83 ec 0c             	sub    esp,0xc
c001737e:	68 34 81 02 c0       	push   0xc0028134
c0017383:	e8 7b 1a 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	83 ec 0c             	sub    esp,0xc
c001738e:	68 10 80 02 c0       	push   0xc0028010
c0017393:	e8 6b 1a 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001739f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173a7:	83 c2 2a             	add    edx,0x2a
c00173aa:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00173ae:	8b 02                	mov    eax,DWORD PTR [edx]
c00173b0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00173b3:	89 01                	mov    DWORD PTR [ecx],eax
c00173b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00173b8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00173bd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00173c1:	e9 55 ff ff ff       	jmp    c001731b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00173c6:	90                   	nop
c00173c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173cb:	83 c4 2c             	add    esp,0x2c
c00173ce:	c2 04 00             	ret    0x4
c00173d1:	90                   	nop

c00173d2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00173d2:	56                   	push   esi
c00173d3:	53                   	push   ebx
c00173d4:	83 ec 14             	sub    esp,0x14
c00173d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00173df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00173e8:	88 c8                	mov    al,cl
c00173ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00173ee:	88 d0                	mov    al,dl
c00173f0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00173f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00173fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017402:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017408:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001740d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017412:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017417:	83 ec 04             	sub    esp,0x4
c001741a:	56                   	push   esi
c001741b:	53                   	push   ebx
c001741c:	51                   	push   ecx
c001741d:	52                   	push   edx
c001741e:	50                   	push   eax
c001741f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017423:	68 64 81 02 c0       	push   0xc0028164
c0017428:	e8 12 b2 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001742d:	83 c4 20             	add    esp,0x20
c0017430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017434:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001743a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001743e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017441:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017445:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017453:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017457:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001745a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001745e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017467:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001746d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017471:	8d 48 01             	lea    ecx,[eax+0x1]
c0017474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017478:	83 c2 2a             	add    edx,0x2a
c001747b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001747f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017483:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017490:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017494:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00174a2:	8d 50 01             	lea    edx,[eax+0x1]
c00174a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174a9:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00174af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00174b9:	3d 00 08 00 00       	cmp    eax,0x800
c00174be:	75 10                	jne    c00174d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00174c0:	83 ec 0c             	sub    esp,0xc
c00174c3:	68 1f 80 02 c0       	push   0xc002801f
c00174c8:	e8 36 19 00 00       	call   c0018e03 <Krnl::panic(char const*)>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	90                   	nop
c00174d1:	83 c4 14             	add    esp,0x14
c00174d4:	5b                   	pop    ebx
c00174d5:	5e                   	pop    esi
c00174d6:	c3                   	ret    
c00174d7:	90                   	nop

c00174d8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00174d8:	b8 00 00 00 00       	mov    eax,0x0
c00174dd:	c3                   	ret    

c00174de <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00174de:	83 ec 1c             	sub    esp,0x1c
c00174e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174e5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00174e8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174ec:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00174f1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00174f6:	83 ec 08             	sub    esp,0x8
c00174f9:	52                   	push   edx
c00174fa:	50                   	push   eax
c00174fb:	e8 e4 75 ff ff       	call   c000eae4 <Computer::readCMOS(unsigned char)>
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017507:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001750c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017511:	83 ec 04             	sub    esp,0x4
c0017514:	6a 01                	push   0x1
c0017516:	52                   	push   edx
c0017517:	50                   	push   eax
c0017518:	e8 dd 76 ff ff       	call   c000ebfa <Computer::writeCMOS(unsigned char, unsigned char)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	90                   	nop
c0017521:	83 c4 1c             	add    esp,0x1c
c0017524:	c3                   	ret    
c0017525:	90                   	nop

c0017526 <ACPI::open(int, int, void*)>:
c0017526:	53                   	push   ebx
c0017527:	83 ec 28             	sub    esp,0x28
c001752a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001752e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017535:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017539:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001753f:	84 c0                	test   al,al
c0017541:	74 67                	je     c00175aa <ACPI::open(int, int, void*)+0x84>
c0017543:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c001754b:	83 ec 0c             	sub    esp,0xc
c001754e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017552:	e8 75 7f ff ff       	call   c000f4cc <malloc>
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	89 c3                	mov    ebx,eax
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	53                   	push   ebx
c0017560:	e8 4d 90 00 00       	call   c00205b2 <PCI::PCI()>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001756c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017570:	83 ec 08             	sub    esp,0x8
c0017573:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017577:	50                   	push   eax
c0017578:	e8 b1 c4 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017584:	8b 00                	mov    eax,DWORD PTR [eax]
c0017586:	83 c0 08             	add    eax,0x8
c0017589:	8b 00                	mov    eax,DWORD PTR [eax]
c001758b:	6a 00                	push   0x0
c001758d:	6a 00                	push   0x0
c001758f:	6a 00                	push   0x0
c0017591:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017595:	ff d0                	call   eax
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	83 ec 0c             	sub    esp,0xc
c001759d:	68 3c 80 02 c0       	push   0xc002803c
c00175a2:	e8 98 b0 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	83 ec 0c             	sub    esp,0xc
c00175ad:	68 47 80 02 c0       	push   0xc0028047
c00175b2:	e8 5b 37 00 00       	call   c001ad12 <Thr::loadKernelSymbolTable(char const*)>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	8b 1d a8 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9a8
c00175c0:	83 ec 08             	sub    esp,0x8
c00175c3:	6a 01                	push   0x1
c00175c5:	68 65 80 02 c0       	push   0xc0028065
c00175ca:	e8 03 42 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	53                   	push   ebx
c00175d6:	50                   	push   eax
c00175d7:	e8 05 44 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c00175e4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175ea:	83 e0 04             	and    eax,0x4
c00175ed:	84 c0                	test   al,al
c00175ef:	0f 84 d6 00 00 00    	je     c00176cb <ACPI::open(int, int, void*)+0x1a5>
c00175f5:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00175fd:	83 ec 0c             	sub    esp,0xc
c0017600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017604:	e8 c3 7e ff ff       	call   c000f4cc <malloc>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	89 c3                	mov    ebx,eax
c001760e:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0017613:	83 ec 04             	sub    esp,0x4
c0017616:	50                   	push   eax
c0017617:	68 82 80 02 c0       	push   0xc0028082
c001761c:	53                   	push   ebx
c001761d:	e8 4c b5 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017629:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001762e:	74 17                	je     c0017647 <ACPI::open(int, int, void*)+0x121>
c0017630:	83 ec 0c             	sub    esp,0xc
c0017633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017637:	e8 04 b8 ff ff       	call   c0012e40 <File::exists()>
c001763c:	83 c4 10             	add    esp,0x10
c001763f:	84 c0                	test   al,al
c0017641:	74 04                	je     c0017647 <ACPI::open(int, int, void*)+0x121>
c0017643:	b0 01                	mov    al,0x1
c0017645:	eb 02                	jmp    c0017649 <ACPI::open(int, int, void*)+0x123>
c0017647:	b0 00                	mov    al,0x0
c0017649:	84 c0                	test   al,al
c001764b:	74 25                	je     c0017672 <ACPI::open(int, int, void*)+0x14c>
c001764d:	8b 1d a8 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9a8
c0017653:	83 ec 08             	sub    esp,0x8
c0017656:	6a 01                	push   0x1
c0017658:	68 82 80 02 c0       	push   0xc0028082
c001765d:	e8 70 41 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c0017662:	83 c4 10             	add    esp,0x10
c0017665:	83 ec 08             	sub    esp,0x8
c0017668:	53                   	push   ebx
c0017669:	50                   	push   eax
c001766a:	e8 72 43 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c001766f:	83 c4 10             	add    esp,0x10
c0017672:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017677:	74 1e                	je     c0017697 <ACPI::open(int, int, void*)+0x171>
c0017679:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001767e:	74 17                	je     c0017697 <ACPI::open(int, int, void*)+0x171>
c0017680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017684:	8b 00                	mov    eax,DWORD PTR [eax]
c0017686:	83 c0 08             	add    eax,0x8
c0017689:	8b 00                	mov    eax,DWORD PTR [eax]
c001768b:	83 ec 0c             	sub    esp,0xc
c001768e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017692:	ff d0                	call   eax
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	a1 48 b2 02 c0       	mov    eax,ds:0xc002b248
c001769c:	83 ec 08             	sub    esp,0x8
c001769f:	68 9f 80 02 c0       	push   0xc002809f
c00176a4:	50                   	push   eax
c00176a5:	e8 c4 f6 ff ff       	call   c0016d6e <findDataTable(unsigned char*, char*)>
c00176aa:	83 c4 10             	add    esp,0x10
c00176ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00176b6:	74 13                	je     c00176cb <ACPI::open(int, int, void*)+0x1a5>
c00176b8:	83 ec 08             	sub    esp,0x8
c00176bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00176c3:	e8 16 fe ff ff       	call   c00174de <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	b8 00 00 00 00       	mov    eax,0x0
c00176d0:	83 c4 28             	add    esp,0x28
c00176d3:	5b                   	pop    ebx
c00176d4:	c3                   	ret    
c00176d5:	90                   	nop

c00176d6 <ACPI::sleep()>:
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	a1 20 b0 02 c0       	mov    eax,ds:0xc002b020
c00176de:	85 c0                	test   eax,eax
c00176e0:	74 07                	je     c00176e9 <ACPI::sleep()+0x13>
c00176e2:	a1 20 b0 02 c0       	mov    eax,ds:0xc002b020
c00176e7:	ff d0                	call   eax
c00176e9:	90                   	nop
c00176ea:	83 c4 0c             	add    esp,0xc
c00176ed:	c3                   	ret    

c00176ee <CPU::close(int, int, void*)>:
c00176ee:	31 c0                	xor    eax,eax
c00176f0:	c3                   	ret    
c00176f1:	90                   	nop

c00176f2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00176f2:	55                   	push   ebp
c00176f3:	57                   	push   edi
c00176f4:	56                   	push   esi
c00176f5:	53                   	push   ebx
c00176f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00176fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176fe:	89 ce                	mov    esi,ecx
c0017700:	89 d5                	mov    ebp,edx
c0017702:	80 f9 04             	cmp    cl,0x4
c0017705:	75 28                	jne    c001772f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017707:	8d 42 f9             	lea    eax,[edx-0x7]
c001770a:	3c 03                	cmp    al,0x3
c001770c:	0f 86 63 01 00 00    	jbe    c0017875 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017712:	80 fa 03             	cmp    dl,0x3
c0017715:	0f 84 5a 01 00 00    	je     c0017875 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001771b:	8d 7a f2             	lea    edi,[edx-0xe]
c001771e:	b8 50 9e 02 c0       	mov    eax,0xc0029e50
c0017723:	89 fb                	mov    ebx,edi
c0017725:	80 fb 01             	cmp    bl,0x1
c0017728:	77 4e                	ja     c0017778 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001772a:	e9 52 01 00 00       	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001772f:	80 f9 05             	cmp    cl,0x5
c0017732:	75 4d                	jne    c0017781 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017734:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c0017739:	80 fa 03             	cmp    dl,0x3
c001773c:	0f 86 3f 01 00 00    	jbe    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017742:	8d 7a fa             	lea    edi,[edx-0x6]
c0017745:	b8 70 9e 02 c0       	mov    eax,0xc0029e70
c001774a:	89 fb                	mov    ebx,edi
c001774c:	80 fb 01             	cmp    bl,0x1
c001774f:	0f 86 2c 01 00 00    	jbe    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017755:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c001775a:	80 fa 08             	cmp    dl,0x8
c001775d:	0f 84 1e 01 00 00    	je     c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017763:	89 d7                	mov    edi,edx
c0017765:	b8 90 9e 02 c0       	mov    eax,0xc0029e90
c001776a:	83 e7 fb             	and    edi,0xfffffffb
c001776d:	89 fb                	mov    ebx,edi
c001776f:	80 fb 09             	cmp    bl,0x9
c0017772:	0f 84 09 01 00 00    	je     c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017778:	31 c0                	xor    eax,eax
c001777a:	89 eb                	mov    ebx,ebp
c001777c:	0f b6 fb             	movzx  edi,bl
c001777f:	eb 30                	jmp    c00177b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017781:	31 c0                	xor    eax,eax
c0017783:	80 f9 06             	cmp    cl,0x6
c0017786:	75 f2                	jne    c001777a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017788:	80 fa 0a             	cmp    dl,0xa
c001778b:	77 ed                	ja     c001777a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001778d:	bf de 05 00 00       	mov    edi,0x5de
c0017792:	0f a3 d7             	bt     edi,edx
c0017795:	73 e3                	jae    c001777a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017797:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c001779c:	e9 e0 00 00 00       	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177a1:	39 c7                	cmp    edi,eax
c00177a3:	0f 84 d3 00 00 00    	je     c001787c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00177a9:	40                   	inc    eax
c00177aa:	3d d0 00 00 00       	cmp    eax,0xd0
c00177af:	74 09                	je     c00177ba <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00177b1:	89 f3                	mov    ebx,esi
c00177b3:	80 fb 0f             	cmp    bl,0xf
c00177b6:	75 f1                	jne    c00177a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00177b8:	eb e7                	jmp    c00177a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00177ba:	80 f9 10             	cmp    cl,0x10
c00177bd:	75 14                	jne    c00177d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00177bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00177c2:	83 e0 fb             	and    eax,0xfffffffb
c00177c5:	3c 02                	cmp    al,0x2
c00177c7:	76 34                	jbe    c00177fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00177c9:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c00177ce:	80 fa 02             	cmp    dl,0x2
c00177d1:	eb 24                	jmp    c00177f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00177d3:	80 f9 11             	cmp    cl,0x11
c00177d6:	75 13                	jne    c00177eb <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00177d8:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c00177dd:	80 fa 03             	cmp    dl,0x3
c00177e0:	0f 85 9b 00 00 00    	jne    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177e6:	e9 91 00 00 00       	jmp    c001787c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00177eb:	80 f9 12             	cmp    cl,0x12
c00177ee:	75 14                	jne    c0017804 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00177f0:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c00177f5:	fe ca                	dec    dl
c00177f7:	0f 85 84 00 00 00    	jne    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177fd:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c0017802:	eb 7d                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017804:	80 f9 14             	cmp    cl,0x14
c0017807:	75 12                	jne    c001781b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017809:	4a                   	dec    edx
c001780a:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c001780f:	80 fa 01             	cmp    dl,0x1
c0017812:	77 6d                	ja     c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017814:	b8 d0 9e 02 c0       	mov    eax,0xc0029ed0
c0017819:	eb 66                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001781b:	80 f9 15             	cmp    cl,0x15
c001781e:	75 31                	jne    c0017851 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017820:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c0017825:	80 fa 01             	cmp    dl,0x1
c0017828:	74 57                	je     c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001782a:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c001782f:	80 fa 13             	cmp    dl,0x13
c0017832:	76 0c                	jbe    c0017840 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017834:	80 fa 30             	cmp    dl,0x30
c0017837:	75 48                	jne    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017839:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c001783e:	eb 41                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017840:	b9 04 00 09 00       	mov    ecx,0x90004
c0017845:	0f a3 d1             	bt     ecx,edx
c0017848:	73 37                	jae    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001784a:	b8 f0 9e 02 c0       	mov    eax,0xc0029ef0
c001784f:	eb 30                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017851:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017856:	80 f9 16             	cmp    cl,0x16
c0017859:	75 26                	jne    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001785b:	b8 10 9f 02 c0       	mov    eax,0xc0029f10
c0017860:	84 d2                	test   dl,dl
c0017862:	74 1d                	je     c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017864:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017869:	80 fa 30             	cmp    dl,0x30
c001786c:	75 13                	jne    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001786e:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c0017873:	eb 0c                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017875:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c001787a:	eb 05                	jmp    c0017881 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001787c:	b8 b0 9e 02 c0       	mov    eax,0xc0029eb0
c0017881:	5b                   	pop    ebx
c0017882:	5e                   	pop    esi
c0017883:	5f                   	pop    edi
c0017884:	5d                   	pop    ebp
c0017885:	c3                   	ret    

c0017886 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017886:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001788a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001788e:	80 f9 04             	cmp    cl,0x4
c0017891:	75 6b                	jne    c00178fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017893:	b8 a0 9c 02 c0       	mov    eax,0xc0029ca0
c0017898:	80 fa 01             	cmp    dl,0x1
c001789b:	0f 86 92 02 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178a1:	b8 b0 9c 02 c0       	mov    eax,0xc0029cb0
c00178a6:	80 fa 02             	cmp    dl,0x2
c00178a9:	0f 84 84 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178af:	b8 c0 9c 02 c0       	mov    eax,0xc0029cc0
c00178b4:	80 fa 03             	cmp    dl,0x3
c00178b7:	0f 84 76 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178bd:	b8 d0 9c 02 c0       	mov    eax,0xc0029cd0
c00178c2:	80 fa 04             	cmp    dl,0x4
c00178c5:	0f 84 68 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178cb:	b8 e0 9c 02 c0       	mov    eax,0xc0029ce0
c00178d0:	80 fa 05             	cmp    dl,0x5
c00178d3:	0f 84 5a 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178d9:	b8 c0 9c 02 c0       	mov    eax,0xc0029cc0
c00178de:	80 fa 07             	cmp    dl,0x7
c00178e1:	0f 84 4c 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178e7:	83 ea 08             	sub    edx,0x8
c00178ea:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c00178ef:	80 fa 01             	cmp    dl,0x1
c00178f2:	0f 87 3b 02 00 00    	ja     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178f8:	b8 f0 9c 02 c0       	mov    eax,0xc0029cf0
c00178fd:	c3                   	ret    
c00178fe:	80 f9 05             	cmp    cl,0x5
c0017901:	75 45                	jne    c0017948 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017903:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017906:	b8 00 9d 02 c0       	mov    eax,0xc0029d00
c001790b:	80 f9 02             	cmp    cl,0x2
c001790e:	0f 86 1f 02 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017914:	80 fa 04             	cmp    dl,0x4
c0017917:	0f 84 f3 01 00 00    	je     c0017b10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001791d:	80 fa 07             	cmp    dl,0x7
c0017920:	0f 84 0d 02 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017926:	b8 10 9d 02 c0       	mov    eax,0xc0029d10
c001792b:	80 fa 08             	cmp    dl,0x8
c001792e:	0f 84 ff 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017934:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017939:	80 fa 09             	cmp    dl,0x9
c001793c:	0f 85 f1 01 00 00    	jne    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017942:	b8 20 9d 02 c0       	mov    eax,0xc0029d20
c0017947:	c3                   	ret    
c0017948:	80 f9 06             	cmp    cl,0x6
c001794b:	0f 85 85 01 00 00    	jne    c0017ad6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017951:	b8 30 9d 02 c0       	mov    eax,0xc0029d30
c0017956:	80 fa 01             	cmp    dl,0x1
c0017959:	0f 84 d4 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001795f:	8d 42 fb             	lea    eax,[edx-0x5]
c0017962:	3c 01                	cmp    al,0x1
c0017964:	0f 86 ac 01 00 00    	jbe    c0017b16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001796a:	80 fa 03             	cmp    dl,0x3
c001796d:	0f 84 a3 01 00 00    	je     c0017b16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017973:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017976:	b8 50 9d 02 c0       	mov    eax,0xc0029d50
c001797b:	80 f9 01             	cmp    cl,0x1
c001797e:	0f 86 af 01 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017984:	80 fa 09             	cmp    dl,0x9
c0017987:	0f 84 8f 01 00 00    	je     c0017b1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001798d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017990:	80 f9 01             	cmp    cl,0x1
c0017993:	0f 86 9a 01 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017999:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c001799e:	80 fa 0d             	cmp    dl,0xd
c00179a1:	0f 84 8c 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179a7:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c00179ac:	80 fa 0e             	cmp    dl,0xe
c00179af:	0f 84 7e 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179b5:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c00179ba:	80 fa 0f             	cmp    dl,0xf
c00179bd:	0f 84 70 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179c3:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c00179c8:	80 fa 15             	cmp    dl,0x15
c00179cb:	0f 84 62 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179d1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00179d4:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c00179d9:	80 f9 01             	cmp    cl,0x1
c00179dc:	0f 86 51 01 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179e2:	80 fa 1a             	cmp    dl,0x1a
c00179e5:	0f 84 37 01 00 00    	je     c0017b22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00179eb:	80 fa 1c             	cmp    dl,0x1c
c00179ee:	0f 84 34 01 00 00    	je     c0017b28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00179f4:	80 fa 1d             	cmp    dl,0x1d
c00179f7:	0f 84 36 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179fd:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c0017a02:	80 fa 25             	cmp    dl,0x25
c0017a05:	0f 84 28 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a0b:	8d 4a da             	lea    ecx,[edx-0x26]
c0017a0e:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0017a13:	80 f9 01             	cmp    cl,0x1
c0017a16:	0f 86 17 01 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a1c:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0017a21:	80 fa 2a             	cmp    dl,0x2a
c0017a24:	0f 84 09 01 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a2a:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c0017a2f:	80 fa 2c             	cmp    dl,0x2c
c0017a32:	0f 84 fb 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a38:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0017a3d:	80 fa 2d             	cmp    dl,0x2d
c0017a40:	0f 84 ed 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a46:	b8 90 9d 02 c0       	mov    eax,0xc0029d90
c0017a4b:	80 fa 2e             	cmp    dl,0x2e
c0017a4e:	0f 84 df 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a54:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c0017a59:	80 fa 2f             	cmp    dl,0x2f
c0017a5c:	0f 84 d1 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a62:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017a65:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0017a6a:	80 f9 01             	cmp    cl,0x1
c0017a6d:	0f 86 c0 00 00 00    	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a73:	b8 d0 9d 02 c0       	mov    eax,0xc0029dd0
c0017a78:	80 fa 37             	cmp    dl,0x37
c0017a7b:	0f 84 b2 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a81:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c0017a86:	80 fa 3a             	cmp    dl,0x3a
c0017a89:	0f 84 a4 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a8f:	b8 f0 9d 02 c0       	mov    eax,0xc0029df0
c0017a94:	80 fa 3c             	cmp    dl,0x3c
c0017a97:	0f 84 96 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a9d:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c0017aa2:	80 fa 3d             	cmp    dl,0x3d
c0017aa5:	0f 84 88 00 00 00    	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aab:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c0017ab0:	80 fa 3e             	cmp    dl,0x3e
c0017ab3:	74 7e                	je     c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ab5:	8d 42 bb             	lea    eax,[edx-0x45]
c0017ab8:	3c 01                	cmp    al,0x1
c0017aba:	76 72                	jbe    c0017b2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017abc:	80 fa 3f             	cmp    dl,0x3f
c0017abf:	74 6d                	je     c0017b2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ac1:	80 fa 4a             	cmp    dl,0x4a
c0017ac4:	74 0a                	je     c0017ad0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017ac6:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017acb:	80 fa 4d             	cmp    dl,0x4d
c0017ace:	75 63                	jne    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ad0:	b8 d0 9d 02 c0       	mov    eax,0xc0029dd0
c0017ad5:	c3                   	ret    
c0017ad6:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017adb:	80 f9 0b             	cmp    cl,0xb
c0017ade:	75 0a                	jne    c0017aea <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ae0:	fe ca                	dec    dl
c0017ae2:	75 4f                	jne    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ae4:	b8 10 9e 02 c0       	mov    eax,0xc0029e10
c0017ae9:	c3                   	ret    
c0017aea:	80 f9 0f             	cmp    cl,0xf
c0017aed:	75 44                	jne    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aef:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c0017af4:	80 fa 02             	cmp    dl,0x2
c0017af7:	76 3a                	jbe    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017af9:	8d 42 fd             	lea    eax,[edx-0x3]
c0017afc:	3c 01                	cmp    al,0x1
c0017afe:	76 0a                	jbe    c0017b0a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017b00:	b8 e6 84 02 c0       	mov    eax,0xc00284e6
c0017b05:	80 fa 06             	cmp    dl,0x6
c0017b08:	75 29                	jne    c0017b33 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b0a:	b8 30 9e 02 c0       	mov    eax,0xc0029e30
c0017b0f:	c3                   	ret    
c0017b10:	b8 10 9d 02 c0       	mov    eax,0xc0029d10
c0017b15:	c3                   	ret    
c0017b16:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0017b1b:	c3                   	ret    
c0017b1c:	b8 60 9d 02 c0       	mov    eax,0xc0029d60
c0017b21:	c3                   	ret    
c0017b22:	b8 90 9d 02 c0       	mov    eax,0xc0029d90
c0017b27:	c3                   	ret    
c0017b28:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0017b2d:	c3                   	ret    
c0017b2e:	b8 f0 9d 02 c0       	mov    eax,0xc0029df0
c0017b33:	c3                   	ret    

c0017b34 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017b34:	60                   	pusha  
c0017b35:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b41:	9c                   	pushf  
c0017b42:	fa                   	cli    
c0017b43:	0f 09                	wbinvd 
c0017b45:	0f 30                	wrmsr  
c0017b47:	9d                   	popf   
c0017b48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b4c:	89 02                	mov    DWORD PTR [edx],eax
c0017b4e:	61                   	popa   
c0017b4f:	c3                   	ret    

c0017b50 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017b50:	60                   	pusha  
c0017b51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b55:	9c                   	pushf  
c0017b56:	fa                   	cli    
c0017b57:	0f 09                	wbinvd 
c0017b59:	31 c0                	xor    eax,eax
c0017b5b:	31 d2                	xor    edx,edx
c0017b5d:	0f 32                	rdmsr  
c0017b5f:	9d                   	popf   
c0017b60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b64:	89 02                	mov    DWORD PTR [edx],eax
c0017b66:	61                   	popa   
c0017b67:	c3                   	ret    

c0017b68 <CPU::AMD_K6_writeback(int, int, int)>:
c0017b68:	56                   	push   esi
c0017b69:	53                   	push   ebx
c0017b6a:	83 ec 10             	sub    esp,0x10
c0017b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b71:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017b76:	75 5d                	jne    c0017bd5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b78:	83 f8 08             	cmp    eax,0x8
c0017b7b:	75 09                	jne    c0017b86 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017b7d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017b82:	7e 13                	jle    c0017b97 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b84:	eb 30                	jmp    c0017bb6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b86:	83 f8 06             	cmp    eax,0x6
c0017b89:	7c 4a                	jl     c0017bd5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b8b:	83 f8 07             	cmp    eax,0x7
c0017b8e:	7e 07                	jle    c0017b97 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b90:	83 f8 09             	cmp    eax,0x9
c0017b93:	74 21                	je     c0017bb6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b95:	eb 3e                	jmp    c0017bd5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b97:	89 e6                	mov    esi,esp
c0017b99:	8b 1d e4 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9e4
c0017b9f:	56                   	push   esi
c0017ba0:	c1 eb 15             	shr    ebx,0x15
c0017ba3:	68 82 00 00 c0       	push   0xc0000082
c0017ba8:	83 e3 7e             	and    ebx,0x7e
c0017bab:	e8 a0 ff ff ff       	call   c0017b50 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017bb0:	56                   	push   esi
c0017bb1:	6a 00                	push   0x0
c0017bb3:	53                   	push   ebx
c0017bb4:	eb 12                	jmp    c0017bc8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017bb6:	89 e3                	mov    ebx,esp
c0017bb8:	53                   	push   ebx
c0017bb9:	68 82 00 00 c0       	push   0xc0000082
c0017bbe:	e8 8d ff ff ff       	call   c0017b50 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017bc3:	53                   	push   ebx
c0017bc4:	6a 00                	push   0x0
c0017bc6:	6a 00                	push   0x0
c0017bc8:	68 82 00 00 c0       	push   0xc0000082
c0017bcd:	e8 62 ff ff ff       	call   c0017b34 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017bd2:	83 c4 18             	add    esp,0x18
c0017bd5:	83 c4 10             	add    esp,0x10
c0017bd8:	5b                   	pop    ebx
c0017bd9:	5e                   	pop    esi
c0017bda:	c3                   	ret    
c0017bdb:	90                   	nop

c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017bdc:	55                   	push   ebp
c0017bdd:	57                   	push   edi
c0017bde:	56                   	push   esi
c0017bdf:	53                   	push   ebx
c0017be0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017be4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017be8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017bf0:	39 05 40 9f 02 c0    	cmp    DWORD PTR ds:0xc0029f40,eax
c0017bf6:	75 23                	jne    c0017c1b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017bf8:	a1 ac b4 02 c0       	mov    eax,ds:0xc002b4ac
c0017bfd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c01:	89 06                	mov    DWORD PTR [esi],eax
c0017c03:	a1 a8 b4 02 c0       	mov    eax,ds:0xc002b4a8
c0017c08:	89 07                	mov    DWORD PTR [edi],eax
c0017c0a:	a1 a4 b4 02 c0       	mov    eax,ds:0xc002b4a4
c0017c0f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017c12:	a1 a0 b4 02 c0       	mov    eax,ds:0xc002b4a0
c0017c17:	89 02                	mov    DWORD PTR [edx],eax
c0017c19:	eb 3f                	jmp    c0017c5a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017c1b:	31 c9                	xor    ecx,ecx
c0017c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c21:	0f a2                	cpuid  
c0017c23:	89 06                	mov    DWORD PTR [esi],eax
c0017c25:	89 1f                	mov    DWORD PTR [edi],ebx
c0017c27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c2b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017c2e:	89 10                	mov    DWORD PTR [eax],edx
c0017c30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c34:	a3 40 9f 02 c0       	mov    ds:0xc0029f40,eax
c0017c39:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c3b:	a3 ac b4 02 c0       	mov    ds:0xc002b4ac,eax
c0017c40:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c42:	a3 a8 b4 02 c0       	mov    ds:0xc002b4a8,eax
c0017c47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c4a:	a3 a4 b4 02 c0       	mov    ds:0xc002b4a4,eax
c0017c4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c55:	a3 a0 b4 02 c0       	mov    ds:0xc002b4a0,eax
c0017c5a:	5b                   	pop    ebx
c0017c5b:	5e                   	pop    esi
c0017c5c:	5f                   	pop    edi
c0017c5d:	5d                   	pop    ebp
c0017c5e:	c3                   	ret    
c0017c5f:	90                   	nop

c0017c60 <CPU::cpuidCheckEDX(unsigned int)>:
c0017c60:	83 ec 10             	sub    esp,0x10
c0017c63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c67:	50                   	push   eax
c0017c68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c6c:	50                   	push   eax
c0017c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c71:	50                   	push   eax
c0017c72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c76:	50                   	push   eax
c0017c77:	6a 01                	push   0x1
c0017c79:	e8 5e ff ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c82:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017c86:	0f 95 c0             	setne  al
c0017c89:	83 c4 24             	add    esp,0x24
c0017c8c:	c3                   	ret    
c0017c8d:	90                   	nop

c0017c8e <CPU::cpuidCheckECX(unsigned int)>:
c0017c8e:	83 ec 10             	sub    esp,0x10
c0017c91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c95:	50                   	push   eax
c0017c96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c9a:	50                   	push   eax
c0017c9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c9f:	50                   	push   eax
c0017ca0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ca4:	50                   	push   eax
c0017ca5:	6a 01                	push   0x1
c0017ca7:	e8 30 ff ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017cb4:	0f 95 c0             	setne  al
c0017cb7:	83 c4 24             	add    esp,0x24
c0017cba:	c3                   	ret    
c0017cbb:	90                   	nop

c0017cbc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017cbc:	83 ec 10             	sub    esp,0x10
c0017cbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cc3:	50                   	push   eax
c0017cc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cc8:	50                   	push   eax
c0017cc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ccd:	50                   	push   eax
c0017cce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cd2:	50                   	push   eax
c0017cd3:	6a 07                	push   0x7
c0017cd5:	e8 02 ff ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cde:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017ce2:	0f 95 c0             	setne  al
c0017ce5:	83 c4 24             	add    esp,0x24
c0017ce8:	c3                   	ret    
c0017ce9:	90                   	nop

c0017cea <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017cea:	83 ec 10             	sub    esp,0x10
c0017ced:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cf1:	50                   	push   eax
c0017cf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cf6:	50                   	push   eax
c0017cf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cfb:	50                   	push   eax
c0017cfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017d00:	50                   	push   eax
c0017d01:	6a 07                	push   0x7
c0017d03:	e8 d4 fe ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017d10:	0f 95 c0             	setne  al
c0017d13:	83 c4 24             	add    esp,0x24
c0017d16:	c3                   	ret    
c0017d17:	90                   	nop

c0017d18 <CPU::CPU()>:
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d1f:	83 ec 08             	sub    esp,0x8
c0017d22:	68 e6 84 02 c0       	push   0xc00284e6
c0017d27:	50                   	push   eax
c0017d28:	e8 f1 be ff ff       	call   c0013c1e <Device::Device(char const*)>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	ba c0 85 02 c0       	mov    edx,0xc00285c0
c0017d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d39:	89 10                	mov    DWORD PTR [eax],edx
c0017d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d4d:	05 78 01 00 00       	add    eax,0x178
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	50                   	push   eax
c0017d56:	e8 89 6f ff ff       	call   c000ece4 <GDT::GDT()>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d62:	05 7c 09 00 00       	add    eax,0x97c
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	50                   	push   eax
c0017d6b:	e8 d6 71 ff ff       	call   c000ef46 <IDT::IDT()>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d77:	05 7c 11 00 00       	add    eax,0x117c
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	50                   	push   eax
c0017d80:	e8 fb 91 ff ff       	call   c0010f80 <TSS::TSS()>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d97:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017da1:	90                   	nop
c0017da2:	83 c4 0c             	add    esp,0xc
c0017da5:	c3                   	ret    

c0017da6 <CPU::displayFeatures()>:
c0017da6:	53                   	push   ebx
c0017da7:	83 ec 10             	sub    esp,0x10
c0017daa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017dae:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017db4:	68 f4 81 02 c0       	push   0xc00281f4
c0017db9:	e8 81 a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017dbe:	59                   	pop    ecx
c0017dbf:	58                   	pop    eax
c0017dc0:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017dc6:	50                   	push   eax
c0017dc7:	68 05 82 02 c0       	push   0xc0028205
c0017dcc:	e8 6e a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017dd1:	58                   	pop    eax
c0017dd2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017dd8:	5a                   	pop    edx
c0017dd9:	c1 e8 0e             	shr    eax,0xe
c0017ddc:	0f b6 c0             	movzx  eax,al
c0017ddf:	50                   	push   eax
c0017de0:	68 16 82 02 c0       	push   0xc0028216
c0017de5:	e8 55 a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017dea:	59                   	pop    ecx
c0017deb:	58                   	pop    eax
c0017dec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017df2:	66 c1 e8 06          	shr    ax,0x6
c0017df6:	0f b6 c0             	movzx  eax,al
c0017df9:	50                   	push   eax
c0017dfa:	68 27 82 02 c0       	push   0xc0028227
c0017dff:	e8 3b a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e04:	c7 04 24 3a 86 02 c0 	mov    DWORD PTR [esp],0xc002863a
c0017e0b:	e8 2f a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017e18:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017e1f:	74 05                	je     c0017e26 <CPU::displayFeatures()+0x80>
c0017e21:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017e26:	52                   	push   edx
c0017e27:	52                   	push   edx
c0017e28:	50                   	push   eax
c0017e29:	68 38 82 02 c0       	push   0xc0028238
c0017e2e:	e8 0c a8 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017e3b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017e42:	78 05                	js     c0017e49 <CPU::displayFeatures()+0xa3>
c0017e44:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017e49:	51                   	push   ecx
c0017e4a:	51                   	push   ecx
c0017e4b:	50                   	push   eax
c0017e4c:	68 4f 82 02 c0       	push   0xc002824f
c0017e51:	e8 e9 a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017e5e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017e65:	75 05                	jne    c0017e6c <CPU::displayFeatures()+0xc6>
c0017e67:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017e6c:	52                   	push   edx
c0017e6d:	52                   	push   edx
c0017e6e:	50                   	push   eax
c0017e6f:	68 66 82 02 c0       	push   0xc0028266
c0017e74:	e8 c6 a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017e81:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017e88:	75 05                	jne    c0017e8f <CPU::displayFeatures()+0xe9>
c0017e8a:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017e8f:	51                   	push   ecx
c0017e90:	51                   	push   ecx
c0017e91:	50                   	push   eax
c0017e92:	68 7d 82 02 c0       	push   0xc002827d
c0017e97:	e8 a3 a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017ea4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017eab:	75 05                	jne    c0017eb2 <CPU::displayFeatures()+0x10c>
c0017ead:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017eb2:	52                   	push   edx
c0017eb3:	52                   	push   edx
c0017eb4:	50                   	push   eax
c0017eb5:	68 94 82 02 c0       	push   0xc0028294
c0017eba:	e8 80 a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017ec7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017ece:	75 05                	jne    c0017ed5 <CPU::displayFeatures()+0x12f>
c0017ed0:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017ed5:	51                   	push   ecx
c0017ed6:	51                   	push   ecx
c0017ed7:	50                   	push   eax
c0017ed8:	68 ab 82 02 c0       	push   0xc00282ab
c0017edd:	e8 5d a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017ee2:	83 c4 10             	add    esp,0x10
c0017ee5:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017eea:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ef1:	75 05                	jne    c0017ef8 <CPU::displayFeatures()+0x152>
c0017ef3:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017ef8:	52                   	push   edx
c0017ef9:	52                   	push   edx
c0017efa:	50                   	push   eax
c0017efb:	68 c2 82 02 c0       	push   0xc00282c2
c0017f00:	e8 3a a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017f0d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017f14:	75 05                	jne    c0017f1b <CPU::displayFeatures()+0x175>
c0017f16:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017f1b:	51                   	push   ecx
c0017f1c:	51                   	push   ecx
c0017f1d:	50                   	push   eax
c0017f1e:	68 d9 82 02 c0       	push   0xc00282d9
c0017f23:	e8 17 a7 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017f28:	83 c4 10             	add    esp,0x10
c0017f2b:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017f30:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017f37:	75 05                	jne    c0017f3e <CPU::displayFeatures()+0x198>
c0017f39:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017f3e:	52                   	push   edx
c0017f3f:	52                   	push   edx
c0017f40:	50                   	push   eax
c0017f41:	68 f0 82 02 c0       	push   0xc00282f0
c0017f46:	e8 f4 a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017f53:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017f5a:	75 05                	jne    c0017f61 <CPU::displayFeatures()+0x1bb>
c0017f5c:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017f61:	51                   	push   ecx
c0017f62:	51                   	push   ecx
c0017f63:	50                   	push   eax
c0017f64:	68 07 83 02 c0       	push   0xc0028307
c0017f69:	e8 d1 a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017f76:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017f7d:	75 05                	jne    c0017f84 <CPU::displayFeatures()+0x1de>
c0017f7f:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017f84:	52                   	push   edx
c0017f85:	52                   	push   edx
c0017f86:	50                   	push   eax
c0017f87:	68 1e 83 02 c0       	push   0xc002831e
c0017f8c:	e8 ae a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017f91:	83 c4 10             	add    esp,0x10
c0017f94:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017f99:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017fa0:	75 05                	jne    c0017fa7 <CPU::displayFeatures()+0x201>
c0017fa2:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017fa7:	51                   	push   ecx
c0017fa8:	51                   	push   ecx
c0017fa9:	50                   	push   eax
c0017faa:	68 35 83 02 c0       	push   0xc0028335
c0017faf:	e8 8b a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017fbc:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017fc3:	75 05                	jne    c0017fca <CPU::displayFeatures()+0x224>
c0017fc5:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017fca:	52                   	push   edx
c0017fcb:	52                   	push   edx
c0017fcc:	50                   	push   eax
c0017fcd:	68 4c 83 02 c0       	push   0xc002834c
c0017fd2:	e8 68 a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0017fdf:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017fe6:	78 05                	js     c0017fed <CPU::displayFeatures()+0x247>
c0017fe8:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0017fed:	51                   	push   ecx
c0017fee:	51                   	push   ecx
c0017fef:	50                   	push   eax
c0017ff0:	68 63 83 02 c0       	push   0xc0028363
c0017ff5:	e8 45 a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	b8 98 6e 02 c0       	mov    eax,0xc0026e98
c0018002:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018009:	75 05                	jne    c0018010 <CPU::displayFeatures()+0x26a>
c001800b:	b8 9c 6e 02 c0       	mov    eax,0xc0026e9c
c0018010:	52                   	push   edx
c0018011:	52                   	push   edx
c0018012:	50                   	push   eax
c0018013:	68 7a 83 02 c0       	push   0xc002837a
c0018018:	e8 22 a6 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001801d:	83 c4 18             	add    esp,0x18
c0018020:	5b                   	pop    ebx
c0018021:	c3                   	ret    

c0018022 <CPU::detectFeatures()>:
c0018022:	55                   	push   ebp
c0018023:	57                   	push   edi
c0018024:	56                   	push   esi
c0018025:	53                   	push   ebx
c0018026:	83 ec 50             	sub    esp,0x50
c0018029:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001802d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018037:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001803e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018044:	6a 0d                	push   0xd
c0018046:	6a 00                	push   0x0
c0018048:	57                   	push   edi
c0018049:	e8 2f 86 fe ff       	call   c000067d <memset>
c001804e:	83 c4 10             	add    esp,0x10
c0018051:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0018056:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001805d:	0f 84 20 09 00 00    	je     c0018983 <CPU::detectFeatures()+0x961>
c0018063:	83 ec 0c             	sub    esp,0xc
c0018066:	6a 10                	push   0x10
c0018068:	e8 f3 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c001806d:	83 e0 01             	and    eax,0x1
c0018070:	8d 14 00             	lea    edx,[eax+eax*1]
c0018073:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018079:	83 e0 fd             	and    eax,0xfffffffd
c001807c:	09 d0                	or     eax,edx
c001807e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018084:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001808b:	e8 d0 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c0018090:	83 e0 01             	and    eax,0x1
c0018093:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001809a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180a0:	83 e0 fb             	and    eax,0xfffffffb
c00180a3:	09 d0                	or     eax,edx
c00180a5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00180b2:	e8 a9 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c00180b7:	83 e0 01             	and    eax,0x1
c00180ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00180c1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180c7:	83 e0 f7             	and    eax,0xfffffff7
c00180ca:	09 d0                	or     eax,edx
c00180cc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180d2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00180d9:	e8 82 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c00180de:	83 e0 01             	and    eax,0x1
c00180e1:	c1 e0 04             	shl    eax,0x4
c00180e4:	88 c2                	mov    dl,al
c00180e6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180ec:	83 e0 ef             	and    eax,0xffffffef
c00180ef:	09 d0                	or     eax,edx
c00180f1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180f7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00180fe:	e8 5d fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c0018103:	83 e0 01             	and    eax,0x1
c0018106:	c1 e0 05             	shl    eax,0x5
c0018109:	88 c2                	mov    dl,al
c001810b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018111:	83 e0 df             	and    eax,0xffffffdf
c0018114:	09 d0                	or     eax,edx
c0018116:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001811c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018123:	e8 38 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c0018128:	83 e0 01             	and    eax,0x1
c001812b:	8d 14 00             	lea    edx,[eax+eax*1]
c001812e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018134:	83 e0 fd             	and    eax,0xfffffffd
c0018137:	09 d0                	or     eax,edx
c0018139:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001813f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018146:	e8 15 fb ff ff       	call   c0017c60 <CPU::cpuidCheckEDX(unsigned int)>
c001814b:	83 e0 01             	and    eax,0x1
c001814e:	c1 e0 06             	shl    eax,0x6
c0018151:	88 c2                	mov    dl,al
c0018153:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018159:	83 e0 bf             	and    eax,0xffffffbf
c001815c:	09 d0                	or     eax,edx
c001815e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018164:	58                   	pop    eax
c0018165:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018169:	56                   	push   esi
c001816a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001816e:	55                   	push   ebp
c001816f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018173:	50                   	push   eax
c0018174:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018178:	52                   	push   edx
c0018179:	6a 00                	push   0x0
c001817b:	e8 5c fa ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018180:	83 c4 1c             	add    esp,0x1c
c0018183:	6a 04                	push   0x4
c0018185:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018189:	50                   	push   eax
c001818a:	57                   	push   edi
c001818b:	e8 b7 84 fe ff       	call   c0000647 <memcpy>
c0018190:	83 c4 0c             	add    esp,0xc
c0018193:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018199:	6a 04                	push   0x4
c001819b:	56                   	push   esi
c001819c:	50                   	push   eax
c001819d:	e8 a5 84 fe ff       	call   c0000647 <memcpy>
c00181a2:	83 c4 0c             	add    esp,0xc
c00181a5:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00181ab:	6a 04                	push   0x4
c00181ad:	55                   	push   ebp
c00181ae:	50                   	push   eax
c00181af:	e8 93 84 fe ff       	call   c0000647 <memcpy>
c00181b4:	58                   	pop    eax
c00181b5:	5a                   	pop    edx
c00181b6:	68 91 83 02 c0       	push   0xc0028391
c00181bb:	57                   	push   edi
c00181bc:	e8 ac 85 fe ff       	call   c000076d <strcmp>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	85 c0                	test   eax,eax
c00181c6:	75 0f                	jne    c00181d7 <CPU::detectFeatures()+0x1b5>
c00181c8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00181d2:	e9 22 02 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c00181d7:	50                   	push   eax
c00181d8:	50                   	push   eax
c00181d9:	68 9e 83 02 c0       	push   0xc002839e
c00181de:	57                   	push   edi
c00181df:	e8 89 85 fe ff       	call   c000076d <strcmp>
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	85 c0                	test   eax,eax
c00181e9:	74 dd                	je     c00181c8 <CPU::detectFeatures()+0x1a6>
c00181eb:	51                   	push   ecx
c00181ec:	51                   	push   ecx
c00181ed:	68 ab 83 02 c0       	push   0xc00283ab
c00181f2:	57                   	push   edi
c00181f3:	e8 75 85 fe ff       	call   c000076d <strcmp>
c00181f8:	83 c4 10             	add    esp,0x10
c00181fb:	85 c0                	test   eax,eax
c00181fd:	74 2a                	je     c0018229 <CPU::detectFeatures()+0x207>
c00181ff:	52                   	push   edx
c0018200:	52                   	push   edx
c0018201:	68 b8 83 02 c0       	push   0xc00283b8
c0018206:	57                   	push   edi
c0018207:	e8 61 85 fe ff       	call   c000076d <strcmp>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	85 c0                	test   eax,eax
c0018211:	74 16                	je     c0018229 <CPU::detectFeatures()+0x207>
c0018213:	50                   	push   eax
c0018214:	50                   	push   eax
c0018215:	68 c5 83 02 c0       	push   0xc00283c5
c001821a:	57                   	push   edi
c001821b:	e8 4d 85 fe ff       	call   c000076d <strcmp>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	85 c0                	test   eax,eax
c0018225:	74 48                	je     c001826f <CPU::detectFeatures()+0x24d>
c0018227:	eb 0f                	jmp    c0018238 <CPU::detectFeatures()+0x216>
c0018229:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018233:	e9 c1 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c0018238:	50                   	push   eax
c0018239:	50                   	push   eax
c001823a:	68 d2 83 02 c0       	push   0xc00283d2
c001823f:	57                   	push   edi
c0018240:	e8 28 85 fe ff       	call   c000076d <strcmp>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	85 c0                	test   eax,eax
c001824a:	74 23                	je     c001826f <CPU::detectFeatures()+0x24d>
c001824c:	50                   	push   eax
c001824d:	50                   	push   eax
c001824e:	68 df 83 02 c0       	push   0xc00283df
c0018253:	57                   	push   edi
c0018254:	e8 14 85 fe ff       	call   c000076d <strcmp>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	85 c0                	test   eax,eax
c001825e:	75 1e                	jne    c001827e <CPU::detectFeatures()+0x25c>
c0018260:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001826a:	e9 8a 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c001826f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018279:	e9 7b 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c001827e:	50                   	push   eax
c001827f:	50                   	push   eax
c0018280:	68 ec 83 02 c0       	push   0xc00283ec
c0018285:	57                   	push   edi
c0018286:	e8 e2 84 fe ff       	call   c000076d <strcmp>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	85 c0                	test   eax,eax
c0018290:	75 0f                	jne    c00182a1 <CPU::detectFeatures()+0x27f>
c0018292:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001829c:	e9 58 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c00182a1:	50                   	push   eax
c00182a2:	50                   	push   eax
c00182a3:	68 ab 83 02 c0       	push   0xc00283ab
c00182a8:	57                   	push   edi
c00182a9:	e8 bf 84 fe ff       	call   c000076d <strcmp>
c00182ae:	83 c4 10             	add    esp,0x10
c00182b1:	85 c0                	test   eax,eax
c00182b3:	75 0f                	jne    c00182c4 <CPU::detectFeatures()+0x2a2>
c00182b5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00182bf:	e9 35 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c00182c4:	50                   	push   eax
c00182c5:	50                   	push   eax
c00182c6:	68 f9 83 02 c0       	push   0xc00283f9
c00182cb:	57                   	push   edi
c00182cc:	e8 9c 84 fe ff       	call   c000076d <strcmp>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	85 c0                	test   eax,eax
c00182d6:	75 0f                	jne    c00182e7 <CPU::detectFeatures()+0x2c5>
c00182d8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00182e2:	e9 12 01 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c00182e7:	51                   	push   ecx
c00182e8:	51                   	push   ecx
c00182e9:	68 06 84 02 c0       	push   0xc0028406
c00182ee:	57                   	push   edi
c00182ef:	e8 79 84 fe ff       	call   c000076d <strcmp>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	85 c0                	test   eax,eax
c00182f9:	75 0f                	jne    c001830a <CPU::detectFeatures()+0x2e8>
c00182fb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018305:	e9 ef 00 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c001830a:	52                   	push   edx
c001830b:	52                   	push   edx
c001830c:	68 13 84 02 c0       	push   0xc0028413
c0018311:	57                   	push   edi
c0018312:	e8 56 84 fe ff       	call   c000076d <strcmp>
c0018317:	83 c4 10             	add    esp,0x10
c001831a:	85 c0                	test   eax,eax
c001831c:	75 0f                	jne    c001832d <CPU::detectFeatures()+0x30b>
c001831e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018328:	e9 cc 00 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c001832d:	50                   	push   eax
c001832e:	50                   	push   eax
c001832f:	68 20 84 02 c0       	push   0xc0028420
c0018334:	57                   	push   edi
c0018335:	e8 33 84 fe ff       	call   c000076d <strcmp>
c001833a:	83 c4 10             	add    esp,0x10
c001833d:	85 c0                	test   eax,eax
c001833f:	75 0f                	jne    c0018350 <CPU::detectFeatures()+0x32e>
c0018341:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001834b:	e9 a9 00 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c0018350:	50                   	push   eax
c0018351:	50                   	push   eax
c0018352:	68 2d 84 02 c0       	push   0xc002842d
c0018357:	57                   	push   edi
c0018358:	e8 10 84 fe ff       	call   c000076d <strcmp>
c001835d:	83 c4 10             	add    esp,0x10
c0018360:	85 c0                	test   eax,eax
c0018362:	75 0f                	jne    c0018373 <CPU::detectFeatures()+0x351>
c0018364:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001836e:	e9 86 00 00 00       	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c0018373:	50                   	push   eax
c0018374:	50                   	push   eax
c0018375:	68 3a 84 02 c0       	push   0xc002843a
c001837a:	57                   	push   edi
c001837b:	e8 ed 83 fe ff       	call   c000076d <strcmp>
c0018380:	83 c4 10             	add    esp,0x10
c0018383:	85 c0                	test   eax,eax
c0018385:	75 0c                	jne    c0018393 <CPU::detectFeatures()+0x371>
c0018387:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018391:	eb 66                	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c0018393:	50                   	push   eax
c0018394:	50                   	push   eax
c0018395:	68 47 84 02 c0       	push   0xc0028447
c001839a:	57                   	push   edi
c001839b:	e8 cd 83 fe ff       	call   c000076d <strcmp>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	85 c0                	test   eax,eax
c00183a5:	75 0c                	jne    c00183b3 <CPU::detectFeatures()+0x391>
c00183a7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00183b1:	eb 46                	jmp    c00183f9 <CPU::detectFeatures()+0x3d7>
c00183b3:	50                   	push   eax
c00183b4:	50                   	push   eax
c00183b5:	68 54 84 02 c0       	push   0xc0028454
c00183ba:	57                   	push   edi
c00183bb:	e8 ad 83 fe ff       	call   c000076d <strcmp>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	85 c0                	test   eax,eax
c00183c5:	74 e0                	je     c00183a7 <CPU::detectFeatures()+0x385>
c00183c7:	50                   	push   eax
c00183c8:	50                   	push   eax
c00183c9:	68 61 84 02 c0       	push   0xc0028461
c00183ce:	57                   	push   edi
c00183cf:	e8 99 83 fe ff       	call   c000076d <strcmp>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	85 c0                	test   eax,eax
c00183d9:	74 cc                	je     c00183a7 <CPU::detectFeatures()+0x385>
c00183db:	51                   	push   ecx
c00183dc:	51                   	push   ecx
c00183dd:	68 6e 84 02 c0       	push   0xc002846e
c00183e2:	57                   	push   edi
c00183e3:	e8 85 83 fe ff       	call   c000076d <strcmp>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	85 c0                	test   eax,eax
c00183ed:	74 b8                	je     c00183a7 <CPU::detectFeatures()+0x385>
c00183ef:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00183f9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00183fe:	0f 86 be 00 00 00    	jbe    c00184c2 <CPU::detectFeatures()+0x4a0>
c0018404:	83 ec 0c             	sub    esp,0xc
c0018407:	68 80 00 00 00       	push   0x80
c001840c:	e8 ab f8 ff ff       	call   c0017cbc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018411:	83 e0 01             	and    eax,0x1
c0018414:	c1 e0 06             	shl    eax,0x6
c0018417:	88 c2                	mov    dl,al
c0018419:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001841f:	83 e0 bf             	and    eax,0xffffffbf
c0018422:	09 d0                	or     eax,edx
c0018424:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001842a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018431:	e8 86 f8 ff ff       	call   c0017cbc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018436:	83 e0 01             	and    eax,0x1
c0018439:	c1 e0 04             	shl    eax,0x4
c001843c:	88 c2                	mov    dl,al
c001843e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018444:	83 e0 ef             	and    eax,0xffffffef
c0018447:	09 d0                	or     eax,edx
c0018449:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001844f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018456:	e8 61 f8 ff ff       	call   c0017cbc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001845b:	c1 e0 07             	shl    eax,0x7
c001845e:	88 c2                	mov    dl,al
c0018460:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018466:	83 e0 7f             	and    eax,0x7f
c0018469:	09 d0                	or     eax,edx
c001846b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018471:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018478:	e8 6d f8 ff ff       	call   c0017cea <CPU::cpuidCheckExtendedECX(unsigned int)>
c001847d:	83 e0 01             	and    eax,0x1
c0018480:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018487:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001848d:	83 e0 f7             	and    eax,0xfffffff7
c0018490:	09 d0                	or     eax,edx
c0018492:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018498:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001849f:	e8 46 f8 ff ff       	call   c0017cea <CPU::cpuidCheckExtendedECX(unsigned int)>
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	83 e0 01             	and    eax,0x1
c00184aa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00184b1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00184b7:	83 e0 fb             	and    eax,0xfffffffb
c00184ba:	09 d0                	or     eax,edx
c00184bc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00184c2:	83 ec 0c             	sub    esp,0xc
c00184c5:	56                   	push   esi
c00184c6:	55                   	push   ebp
c00184c7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00184cb:	57                   	push   edi
c00184cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184d0:	50                   	push   eax
c00184d1:	6a 01                	push   0x1
c00184d3:	e8 04 f7 ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00184dc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00184e2:	88 ca                	mov    dl,cl
c00184e4:	83 e0 f0             	and    eax,0xfffffff0
c00184e7:	83 e2 0f             	and    edx,0xf
c00184ea:	09 d0                	or     eax,edx
c00184ec:	88 ca                	mov    dl,cl
c00184ee:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00184f4:	c0 ea 04             	shr    dl,0x4
c00184f7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00184fb:	0f b6 c2             	movzx  eax,dl
c00184fe:	83 c4 20             	add    esp,0x20
c0018501:	c1 e0 06             	shl    eax,0x6
c0018504:	89 c5                	mov    ebp,eax
c0018506:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001850c:	66 25 3f c0          	and    ax,0xc03f
c0018510:	09 e8                	or     eax,ebp
c0018512:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018519:	89 c8                	mov    eax,ecx
c001851b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018521:	c1 e8 08             	shr    eax,0x8
c0018524:	83 e2 3f             	and    edx,0x3f
c0018527:	83 e0 0f             	and    eax,0xf
c001852a:	89 c5                	mov    ebp,eax
c001852c:	c1 e5 06             	shl    ebp,0x6
c001852f:	09 d5                	or     ebp,edx
c0018531:	89 ea                	mov    edx,ebp
c0018533:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018539:	88 c2                	mov    dl,al
c001853b:	c0 ea 02             	shr    dl,0x2
c001853e:	89 d5                	mov    ebp,edx
c0018540:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018546:	83 e2 c0             	and    edx,0xffffffc0
c0018549:	09 d5                	or     ebp,edx
c001854b:	89 ea                	mov    edx,ebp
c001854d:	89 cd                	mov    ebp,ecx
c001854f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018555:	c1 ed 0c             	shr    ebp,0xc
c0018558:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001855e:	83 e5 03             	and    ebp,0x3
c0018561:	83 e2 cf             	and    edx,0xffffffcf
c0018564:	c1 e5 04             	shl    ebp,0x4
c0018567:	09 d5                	or     ebp,edx
c0018569:	3c 06                	cmp    al,0x6
c001856b:	89 ea                	mov    edx,ebp
c001856d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018573:	74 04                	je     c0018579 <CPU::detectFeatures()+0x557>
c0018575:	3c 0f                	cmp    al,0xf
c0018577:	75 5c                	jne    c00185d5 <CPU::detectFeatures()+0x5b3>
c0018579:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001857d:	89 cd                	mov    ebp,ecx
c001857f:	c1 ed 10             	shr    ebp,0x10
c0018582:	c1 e5 04             	shl    ebp,0x4
c0018585:	09 ea                	or     edx,ebp
c0018587:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001858d:	0f b6 d2             	movzx  edx,dl
c0018590:	66 81 e5 3f c0       	and    bp,0xc03f
c0018595:	c1 e2 06             	shl    edx,0x6
c0018598:	09 ea                	or     edx,ebp
c001859a:	3c 0f                	cmp    al,0xf
c001859c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00185a3:	75 30                	jne    c00185d5 <CPU::detectFeatures()+0x5b3>
c00185a5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00185ab:	c1 e9 14             	shr    ecx,0x14
c00185ae:	83 e0 3f             	and    eax,0x3f
c00185b1:	83 c1 0f             	add    ecx,0xf
c00185b4:	88 ca                	mov    dl,cl
c00185b6:	c0 e9 02             	shr    cl,0x2
c00185b9:	c1 e2 06             	shl    edx,0x6
c00185bc:	09 d0                	or     eax,edx
c00185be:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00185c4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00185ca:	83 e0 c0             	and    eax,0xffffffc0
c00185cd:	09 c1                	or     ecx,eax
c00185cf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00185d5:	83 ec 0c             	sub    esp,0xc
c00185d8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00185df:	56                   	push   esi
c00185e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00185e4:	50                   	push   eax
c00185e5:	57                   	push   edi
c00185e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00185ea:	55                   	push   ebp
c00185eb:	68 00 00 00 80       	push   0x80000000
c00185f0:	e8 e7 f5 ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185f5:	83 c4 20             	add    esp,0x20
c00185f8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018600:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018604:	76 1e                	jbe    c0018624 <CPU::detectFeatures()+0x602>
c0018606:	83 ec 0c             	sub    esp,0xc
c0018609:	56                   	push   esi
c001860a:	50                   	push   eax
c001860b:	57                   	push   edi
c001860c:	55                   	push   ebp
c001860d:	68 01 00 00 80       	push   0x80000001
c0018612:	e8 c5 f5 ff ff       	call   c0017bdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018617:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018621:	83 c4 20             	add    esp,0x20
c0018624:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001862a:	83 f8 01             	cmp    eax,0x1
c001862d:	75 6f                	jne    c001869e <CPU::detectFeatures()+0x67c>
c001862f:	51                   	push   ecx
c0018630:	51                   	push   ecx
c0018631:	68 7a 84 02 c0       	push   0xc002847a
c0018636:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001863a:	56                   	push   esi
c001863b:	e8 dc 80 fe ff       	call   c000071c <strcpy>
c0018640:	5f                   	pop    edi
c0018641:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018647:	5d                   	pop    ebp
c0018648:	66 c1 e8 06          	shr    ax,0x6
c001864c:	0f b6 c0             	movzx  eax,al
c001864f:	50                   	push   eax
c0018650:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018656:	c1 e8 0e             	shr    eax,0xe
c0018659:	0f b6 c0             	movzx  eax,al
c001865c:	50                   	push   eax
c001865d:	e8 24 f2 ff ff       	call   c0017886 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018662:	5a                   	pop    edx
c0018663:	59                   	pop    ecx
c0018664:	50                   	push   eax
c0018665:	56                   	push   esi
c0018666:	e8 68 81 fe ff       	call   c00007d3 <strcat>
c001866b:	5f                   	pop    edi
c001866c:	5d                   	pop    ebp
c001866d:	56                   	push   esi
c001866e:	53                   	push   ebx
c001866f:	e8 9c b5 ff ff       	call   c0013c10 <Device::setName(char const*)>
c0018674:	58                   	pop    eax
c0018675:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001867b:	5a                   	pop    edx
c001867c:	68 81 84 02 c0       	push   0xc0028481
c0018681:	50                   	push   eax
c0018682:	e8 e6 80 fe ff       	call   c000076d <strcmp>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	85 c0                	test   eax,eax
c001868c:	0f 85 71 03 00 00    	jne    c0018a03 <CPU::detectFeatures()+0x9e1>
c0018692:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018699:	e9 65 03 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x9e1>
c001869e:	83 f8 02             	cmp    eax,0x2
c00186a1:	0f 85 b5 00 00 00    	jne    c001875c <CPU::detectFeatures()+0x73a>
c00186a7:	57                   	push   edi
c00186a8:	57                   	push   edi
c00186a9:	68 93 84 02 c0       	push   0xc0028493
c00186ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00186b2:	56                   	push   esi
c00186b3:	e8 64 80 fe ff       	call   c000071c <strcpy>
c00186b8:	5d                   	pop    ebp
c00186b9:	58                   	pop    eax
c00186ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186c0:	66 c1 e8 06          	shr    ax,0x6
c00186c4:	0f b6 c0             	movzx  eax,al
c00186c7:	50                   	push   eax
c00186c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186ce:	c1 e8 0e             	shr    eax,0xe
c00186d1:	0f b6 c0             	movzx  eax,al
c00186d4:	50                   	push   eax
c00186d5:	e8 18 f0 ff ff       	call   c00176f2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00186da:	5a                   	pop    edx
c00186db:	59                   	pop    ecx
c00186dc:	50                   	push   eax
c00186dd:	56                   	push   esi
c00186de:	e8 f0 80 fe ff       	call   c00007d3 <strcat>
c00186e3:	5f                   	pop    edi
c00186e4:	5d                   	pop    ebp
c00186e5:	56                   	push   esi
c00186e6:	53                   	push   ebx
c00186e7:	e8 24 b5 ff ff       	call   c0013c10 <Device::setName(char const*)>
c00186ec:	58                   	pop    eax
c00186ed:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00186f3:	5a                   	pop    edx
c00186f4:	68 98 84 02 c0       	push   0xc0028498
c00186f9:	50                   	push   eax
c00186fa:	e8 6e 80 fe ff       	call   c000076d <strcmp>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	85 c0                	test   eax,eax
c0018704:	75 20                	jne    c0018726 <CPU::detectFeatures()+0x704>
c0018706:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c001870c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018712:	a8 01                	test   al,0x1
c0018714:	74 10                	je     c0018726 <CPU::detectFeatures()+0x704>
c0018716:	83 e0 fe             	and    eax,0xfffffffe
c0018719:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001871f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018726:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001872c:	c1 e8 0e             	shr    eax,0xe
c001872f:	3c 05                	cmp    al,0x5
c0018731:	0f 85 cc 02 00 00    	jne    c0018a03 <CPU::detectFeatures()+0x9e1>
c0018737:	56                   	push   esi
c0018738:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001873e:	83 e0 0f             	and    eax,0xf
c0018741:	50                   	push   eax
c0018742:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018748:	66 c1 e8 06          	shr    ax,0x6
c001874c:	0f b6 c0             	movzx  eax,al
c001874f:	50                   	push   eax
c0018750:	6a 05                	push   0x5
c0018752:	e8 11 f4 ff ff       	call   c0017b68 <CPU::AMD_K6_writeback(int, int, int)>
c0018757:	e9 1f 02 00 00       	jmp    c001897b <CPU::detectFeatures()+0x959>
c001875c:	8d 50 fd             	lea    edx,[eax-0x3]
c001875f:	83 fa 01             	cmp    edx,0x1
c0018762:	76 09                	jbe    c001876d <CPU::detectFeatures()+0x74b>
c0018764:	83 f8 06             	cmp    eax,0x6
c0018767:	0f 85 91 01 00 00    	jne    c00188fe <CPU::detectFeatures()+0x8dc>
c001876d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018773:	c1 ea 0e             	shr    edx,0xe
c0018776:	80 fa 05             	cmp    dl,0x5
c0018779:	75 7b                	jne    c00187f6 <CPU::detectFeatures()+0x7d4>
c001877b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018781:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018786:	66 81 fa 00 01       	cmp    dx,0x100
c001878b:	75 0c                	jne    c0018799 <CPU::detectFeatures()+0x777>
c001878d:	51                   	push   ecx
c001878e:	51                   	push   ecx
c001878f:	68 9f 84 02 c0       	push   0xc002849f
c0018794:	e9 dc 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018799:	66 81 fa 00 02       	cmp    dx,0x200
c001879e:	75 0c                	jne    c00187ac <CPU::detectFeatures()+0x78a>
c00187a0:	52                   	push   edx
c00187a1:	52                   	push   edx
c00187a2:	68 b2 84 02 c0       	push   0xc00284b2
c00187a7:	e9 c9 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00187ac:	66 81 fa 40 02       	cmp    dx,0x240
c00187b1:	75 0c                	jne    c00187bf <CPU::detectFeatures()+0x79d>
c00187b3:	50                   	push   eax
c00187b4:	50                   	push   eax
c00187b5:	68 c4 84 02 c0       	push   0xc00284c4
c00187ba:	e9 b6 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00187bf:	83 f8 06             	cmp    eax,0x6
c00187c2:	75 0c                	jne    c00187d0 <CPU::detectFeatures()+0x7ae>
c00187c4:	50                   	push   eax
c00187c5:	50                   	push   eax
c00187c6:	68 d6 84 02 c0       	push   0xc00284d6
c00187cb:	e9 a5 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00187d0:	83 f8 04             	cmp    eax,0x4
c00187d3:	75 0c                	jne    c00187e1 <CPU::detectFeatures()+0x7bf>
c00187d5:	50                   	push   eax
c00187d6:	50                   	push   eax
c00187d7:	68 e2 84 02 c0       	push   0xc00284e2
c00187dc:	e9 94 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00187e1:	83 f8 03             	cmp    eax,0x3
c00187e4:	0f 85 19 02 00 00    	jne    c0018a03 <CPU::detectFeatures()+0x9e1>
c00187ea:	50                   	push   eax
c00187eb:	50                   	push   eax
c00187ec:	68 ea 84 02 c0       	push   0xc00284ea
c00187f1:	e9 7f 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00187f6:	80 fa 06             	cmp    dl,0x6
c00187f9:	0f 85 db 00 00 00    	jne    c00188da <CPU::detectFeatures()+0x8b8>
c00187ff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018805:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001880a:	66 81 fa 80 01       	cmp    dx,0x180
c001880f:	75 0c                	jne    c001881d <CPU::detectFeatures()+0x7fb>
c0018811:	50                   	push   eax
c0018812:	50                   	push   eax
c0018813:	68 f5 84 02 c0       	push   0xc00284f5
c0018818:	e9 58 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c001881d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018823:	66 f7 c1 80 ff       	test   cx,0xff80
c0018828:	75 0c                	jne    c0018836 <CPU::detectFeatures()+0x814>
c001882a:	50                   	push   eax
c001882b:	50                   	push   eax
c001882c:	68 05 85 02 c0       	push   0xc0028505
c0018831:	e9 3f 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018836:	66 81 fa 40 02       	cmp    dx,0x240
c001883b:	75 0c                	jne    c0018849 <CPU::detectFeatures()+0x827>
c001883d:	55                   	push   ebp
c001883e:	55                   	push   ebp
c001883f:	68 0c 85 02 c0       	push   0xc002850c
c0018844:	e9 2c 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018849:	66 81 fa 80 02       	cmp    dx,0x280
c001884e:	75 0c                	jne    c001885c <CPU::detectFeatures()+0x83a>
c0018850:	57                   	push   edi
c0018851:	57                   	push   edi
c0018852:	68 15 85 02 c0       	push   0xc0028515
c0018857:	e9 19 01 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c001885c:	66 81 fa 40 03       	cmp    dx,0x340
c0018861:	74 ed                	je     c0018850 <CPU::detectFeatures()+0x82e>
c0018863:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018868:	75 0c                	jne    c0018876 <CPU::detectFeatures()+0x854>
c001886a:	56                   	push   esi
c001886b:	56                   	push   esi
c001886c:	68 1c 85 02 c0       	push   0xc002851c
c0018871:	e9 ff 00 00 00       	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018876:	83 f8 06             	cmp    eax,0x6
c0018879:	0f 84 45 ff ff ff    	je     c00187c4 <CPU::detectFeatures()+0x7a2>
c001887f:	83 f8 04             	cmp    eax,0x4
c0018882:	0f 84 4d ff ff ff    	je     c00187d5 <CPU::detectFeatures()+0x7b3>
c0018888:	83 f8 03             	cmp    eax,0x3
c001888b:	0f 85 72 01 00 00    	jne    c0018a03 <CPU::detectFeatures()+0x9e1>
c0018891:	51                   	push   ecx
c0018892:	51                   	push   ecx
c0018893:	68 25 85 02 c0       	push   0xc0028525
c0018898:	53                   	push   ebx
c0018899:	e8 72 b3 ff ff       	call   c0013c10 <Device::setName(char const*)>
c001889e:	b1 c1                	mov    cl,0xc1
c00188a0:	88 c8                	mov    al,cl
c00188a2:	e6 22                	out    0x22,al
c00188a4:	e4 23                	in     al,0x23
c00188a6:	88 c2                	mov    dl,al
c00188a8:	88 c8                	mov    al,cl
c00188aa:	e6 22                	out    0x22,al
c00188ac:	88 d0                	mov    al,dl
c00188ae:	83 c8 10             	or     eax,0x10
c00188b1:	e6 23                	out    0x23,al
c00188b3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00188ba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00188bd:	89 d0                	mov    eax,edx
c00188bf:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00188c5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00188c9:	40                   	inc    eax
c00188ca:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00188d0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00188d5:	e9 a1 00 00 00       	jmp    c001897b <CPU::detectFeatures()+0x959>
c00188da:	83 f8 06             	cmp    eax,0x6
c00188dd:	0f 84 e1 fe ff ff    	je     c00187c4 <CPU::detectFeatures()+0x7a2>
c00188e3:	83 f8 04             	cmp    eax,0x4
c00188e6:	0f 84 e9 fe ff ff    	je     c00187d5 <CPU::detectFeatures()+0x7b3>
c00188ec:	83 f8 03             	cmp    eax,0x3
c00188ef:	0f 85 0e 01 00 00    	jne    c0018a03 <CPU::detectFeatures()+0x9e1>
c00188f5:	52                   	push   edx
c00188f6:	52                   	push   edx
c00188f7:	68 30 85 02 c0       	push   0xc0028530
c00188fc:	eb 77                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c00188fe:	83 f8 07             	cmp    eax,0x7
c0018901:	75 09                	jne    c001890c <CPU::detectFeatures()+0x8ea>
c0018903:	50                   	push   eax
c0018904:	50                   	push   eax
c0018905:	68 3a 85 02 c0       	push   0xc002853a
c001890a:	eb 69                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c001890c:	83 f8 0a             	cmp    eax,0xa
c001890f:	75 09                	jne    c001891a <CPU::detectFeatures()+0x8f8>
c0018911:	50                   	push   eax
c0018912:	50                   	push   eax
c0018913:	68 45 85 02 c0       	push   0xc0028545
c0018918:	eb 5b                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c001891a:	83 f8 0b             	cmp    eax,0xb
c001891d:	75 09                	jne    c0018928 <CPU::detectFeatures()+0x906>
c001891f:	50                   	push   eax
c0018920:	50                   	push   eax
c0018921:	68 4d 85 02 c0       	push   0xc002854d
c0018926:	eb 4d                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018928:	83 f8 08             	cmp    eax,0x8
c001892b:	75 09                	jne    c0018936 <CPU::detectFeatures()+0x914>
c001892d:	50                   	push   eax
c001892e:	50                   	push   eax
c001892f:	68 56 85 02 c0       	push   0xc0028556
c0018934:	eb 3f                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018936:	83 f8 09             	cmp    eax,0x9
c0018939:	75 09                	jne    c0018944 <CPU::detectFeatures()+0x922>
c001893b:	50                   	push   eax
c001893c:	50                   	push   eax
c001893d:	68 5e 85 02 c0       	push   0xc002855e
c0018942:	eb 31                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018944:	83 f8 05             	cmp    eax,0x5
c0018947:	75 09                	jne    c0018952 <CPU::detectFeatures()+0x930>
c0018949:	50                   	push   eax
c001894a:	50                   	push   eax
c001894b:	68 66 85 02 c0       	push   0xc0028566
c0018950:	eb 23                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018952:	83 f8 0c             	cmp    eax,0xc
c0018955:	75 09                	jne    c0018960 <CPU::detectFeatures()+0x93e>
c0018957:	55                   	push   ebp
c0018958:	55                   	push   ebp
c0018959:	68 74 85 02 c0       	push   0xc0028574
c001895e:	eb 15                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c0018960:	83 f8 0d             	cmp    eax,0xd
c0018963:	75 09                	jne    c001896e <CPU::detectFeatures()+0x94c>
c0018965:	57                   	push   edi
c0018966:	57                   	push   edi
c0018967:	68 7f 85 02 c0       	push   0xc002857f
c001896c:	eb 07                	jmp    c0018975 <CPU::detectFeatures()+0x953>
c001896e:	56                   	push   esi
c001896f:	56                   	push   esi
c0018970:	68 93 85 02 c0       	push   0xc0028593
c0018975:	53                   	push   ebx
c0018976:	e8 95 b2 ff ff       	call   c0013c10 <Device::setName(char const*)>
c001897b:	83 c4 10             	add    esp,0x10
c001897e:	e9 80 00 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x9e1>
c0018983:	51                   	push   ecx
c0018984:	51                   	push   ecx
c0018985:	68 df 83 02 c0       	push   0xc00283df
c001898a:	57                   	push   edi
c001898b:	e8 8c 7d fe ff       	call   c000071c <strcpy>
c0018990:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001899a:	e8 c4 78 fe ff       	call   c0000263 <is486>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	85 c0                	test   eax,eax
c00189a4:	74 2b                	je     c00189d1 <CPU::detectFeatures()+0x9af>
c00189a6:	52                   	push   edx
c00189a7:	52                   	push   edx
c00189a8:	68 9f 85 02 c0       	push   0xc002859f
c00189ad:	53                   	push   ebx
c00189ae:	e8 5d b2 ff ff       	call   c0013c10 <Device::setName(char const*)>
c00189b3:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189ba:	0f 20 c0             	mov    eax,cr0
c00189bd:	83 e0 14             	and    eax,0x14
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	83 f8 04             	cmp    eax,0x4
c00189c6:	75 1f                	jne    c00189e7 <CPU::detectFeatures()+0x9c5>
c00189c8:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00189cf:	eb 32                	jmp    c0018a03 <CPU::detectFeatures()+0x9e1>
c00189d1:	50                   	push   eax
c00189d2:	50                   	push   eax
c00189d3:	68 aa 85 02 c0       	push   0xc00285aa
c00189d8:	53                   	push   ebx
c00189d9:	e8 32 b2 ff ff       	call   c0013c10 <Device::setName(char const*)>
c00189de:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00189e5:	eb d3                	jmp    c00189ba <CPU::detectFeatures()+0x998>
c00189e7:	e8 52 78 fe ff       	call   c000023e <hasLegacyFPU>
c00189ec:	83 e0 01             	and    eax,0x1
c00189ef:	8d 14 00             	lea    edx,[eax+eax*1]
c00189f2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189f8:	83 e0 fd             	and    eax,0xfffffffd
c00189fb:	09 d0                	or     eax,edx
c00189fd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a03:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018a0a:	83 c4 4c             	add    esp,0x4c
c0018a0d:	5b                   	pop    ebx
c0018a0e:	5e                   	pop    esi
c0018a0f:	5f                   	pop    edi
c0018a10:	5d                   	pop    ebp
c0018a11:	c3                   	ret    

c0018a12 <CPU::setupSMEP()>:
c0018a12:	0f 20 e0             	mov    eax,cr4
c0018a15:	0d 00 00 10 00       	or     eax,0x100000
c0018a1a:	0f 22 e0             	mov    cr4,eax
c0018a1d:	c3                   	ret    

c0018a1e <CPU::setupUMIP()>:
c0018a1e:	0f 20 e0             	mov    eax,cr4
c0018a21:	80 cc 08             	or     ah,0x8
c0018a24:	0f 22 e0             	mov    cr4,eax
c0018a27:	c3                   	ret    

c0018a28 <CPU::setupTSC()>:
c0018a28:	0f 20 e0             	mov    eax,cr4
c0018a2b:	83 c8 04             	or     eax,0x4
c0018a2e:	0f 22 e0             	mov    cr4,eax
c0018a31:	c3                   	ret    

c0018a32 <CPU::setupLargePages()>:
c0018a32:	0f 20 e0             	mov    eax,cr4
c0018a35:	83 c8 10             	or     eax,0x10
c0018a38:	0f 22 e0             	mov    cr4,eax
c0018a3b:	c3                   	ret    

c0018a3c <CPU::setupPAT()>:
c0018a3c:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0018a41:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018a48:	74 2c                	je     c0018a76 <CPU::setupPAT()+0x3a>
c0018a4a:	53                   	push   ebx
c0018a4b:	83 ec 10             	sub    esp,0x10
c0018a4e:	68 77 02 00 00       	push   0x277
c0018a53:	50                   	push   eax
c0018a54:	e8 1b 60 ff ff       	call   c000ea74 <Computer::rdmsr(unsigned int)>
c0018a59:	83 e2 f8             	and    edx,0xfffffff8
c0018a5c:	83 ca 01             	or     edx,0x1
c0018a5f:	52                   	push   edx
c0018a60:	50                   	push   eax
c0018a61:	68 77 02 00 00       	push   0x277
c0018a66:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c0018a6c:	e8 2f 60 ff ff       	call   c000eaa0 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018a71:	83 c4 28             	add    esp,0x28
c0018a74:	5b                   	pop    ebx
c0018a75:	c3                   	ret    
c0018a76:	c3                   	ret    
c0018a77:	90                   	nop

c0018a78 <CPU::setupMTRR()>:
c0018a78:	c3                   	ret    
c0018a79:	90                   	nop

c0018a7a <CPU::setupGlobalPages()>:
c0018a7a:	0f 20 e0             	mov    eax,cr4
c0018a7d:	0c 80                	or     al,0x80
c0018a7f:	0f 22 e0             	mov    cr4,eax
c0018a82:	c3                   	ret    
c0018a83:	90                   	nop

c0018a84 <CPU::allowUsermodeDataAccess()>:
c0018a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a88:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018a8f:	74 03                	je     c0018a94 <CPU::allowUsermodeDataAccess()+0x10>
c0018a91:	0f 01 cb             	stac   
c0018a94:	c3                   	ret    
c0018a95:	90                   	nop

c0018a96 <CPU::prohibitUsermodeDataAccess()>:
c0018a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a9a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018aa1:	74 03                	je     c0018aa6 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018aa3:	0f 01 ca             	clac   
c0018aa6:	c3                   	ret    
c0018aa7:	90                   	nop

c0018aa8 <CPU::setupSMAP()>:
c0018aa8:	0f 20 e0             	mov    eax,cr4
c0018aab:	0d 00 00 20 00       	or     eax,0x200000
c0018ab0:	0f 22 e0             	mov    cr4,eax
c0018ab3:	eb e1                	jmp    c0018a96 <CPU::prohibitUsermodeDataAccess()>
c0018ab5:	90                   	nop

c0018ab6 <CPU::setupFeatures()>:
c0018ab6:	83 ec 0c             	sub    esp,0xc
c0018ab9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018abd:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018ac4:	74 07                	je     c0018acd <CPU::setupFeatures()+0x17>
c0018ac6:	52                   	push   edx
c0018ac7:	e8 46 ff ff ff       	call   c0018a12 <CPU::setupSMEP()>
c0018acc:	58                   	pop    eax
c0018acd:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018ad4:	74 07                	je     c0018add <CPU::setupFeatures()+0x27>
c0018ad6:	52                   	push   edx
c0018ad7:	e8 cc ff ff ff       	call   c0018aa8 <CPU::setupSMAP()>
c0018adc:	58                   	pop    eax
c0018add:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018ae4:	74 07                	je     c0018aed <CPU::setupFeatures()+0x37>
c0018ae6:	52                   	push   edx
c0018ae7:	e8 32 ff ff ff       	call   c0018a1e <CPU::setupUMIP()>
c0018aec:	58                   	pop    eax
c0018aed:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018af4:	74 07                	je     c0018afd <CPU::setupFeatures()+0x47>
c0018af6:	52                   	push   edx
c0018af7:	e8 2c ff ff ff       	call   c0018a28 <CPU::setupTSC()>
c0018afc:	58                   	pop    eax
c0018afd:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018b04:	74 07                	je     c0018b0d <CPU::setupFeatures()+0x57>
c0018b06:	52                   	push   edx
c0018b07:	e8 26 ff ff ff       	call   c0018a32 <CPU::setupLargePages()>
c0018b0c:	59                   	pop    ecx
c0018b0d:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018b14:	74 07                	je     c0018b1d <CPU::setupFeatures()+0x67>
c0018b16:	52                   	push   edx
c0018b17:	e8 5e ff ff ff       	call   c0018a7a <CPU::setupGlobalPages()>
c0018b1c:	58                   	pop    eax
c0018b1d:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018b24:	74 0c                	je     c0018b32 <CPU::setupFeatures()+0x7c>
c0018b26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b2a:	83 c4 0c             	add    esp,0xc
c0018b2d:	e9 0a ff ff ff       	jmp    c0018a3c <CPU::setupPAT()>
c0018b32:	83 c4 0c             	add    esp,0xc
c0018b35:	c3                   	ret    

c0018b36 <CPU::open(int, int, void*)>:
c0018b36:	57                   	push   edi
c0018b37:	56                   	push   esi
c0018b38:	53                   	push   ebx
c0018b39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b41:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018b50:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018b56:	50                   	push   eax
c0018b57:	e8 04 62 ff ff       	call   c000ed60 <GDT::setup()>
c0018b5c:	83 c4 0c             	add    esp,0xc
c0018b5f:	6a 00                	push   0x0
c0018b61:	68 ef be ad de       	push   0xdeadbeef
c0018b66:	57                   	push   edi
c0018b67:	e8 54 84 ff ff       	call   c0010fc0 <TSS::setup(unsigned long, unsigned long)>
c0018b6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018b6f:	e8 2c 84 ff ff       	call   c0010fa0 <TSS::flush()>
c0018b74:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018b7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b7d:	e8 3a 64 ff ff       	call   c000efbc <IDT::setup()>
c0018b82:	b8 00 04 00 00       	mov    eax,0x400
c0018b87:	0f 23 f8             	mov    db7,eax
c0018b8a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018b94:	e8 dd 6e ff ff       	call   c000fa76 <Phys::allocatePage()>
c0018b99:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018b9f:	89 30                	mov    DWORD PTR [eax],esi
c0018ba1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018ba7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018baa:	58                   	pop    eax
c0018bab:	5a                   	pop    edx
c0018bac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018bb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bb6:	e8 37 94 ff ff       	call   c0011ff2 <VAS::setCPUSpecific(unsigned long)>
c0018bbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bbe:	e8 5f f4 ff ff       	call   c0018022 <CPU::detectFeatures()>
c0018bc3:	e8 2c c3 ff ff       	call   c0014ef4 <setupInterruptController()>
c0018bc8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018bce:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c0018bd3:	83 e0 10             	and    eax,0x10
c0018bd6:	83 f8 01             	cmp    eax,0x1
c0018bd9:	19 c0                	sbb    eax,eax
c0018bdb:	83 e0 46             	and    eax,0x46
c0018bde:	83 c0 1e             	add    eax,0x1e
c0018be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0018be4:	e8 c5 d6 ff ff       	call   c00162ae <setupTimer(int)>
c0018be9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018bef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bf2:	e8 bf fe ff ff       	call   c0018ab6 <CPU::setupFeatures()>
c0018bf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bfa:	e8 a7 f1 ff ff       	call   c0017da6 <CPU::displayFeatures()>
c0018bff:	83 c4 10             	add    esp,0x10
c0018c02:	31 c0                	xor    eax,eax
c0018c04:	5b                   	pop    ebx
c0018c05:	5e                   	pop    esi
c0018c06:	5f                   	pop    edi
c0018c07:	c3                   	ret    

c0018c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018c08:	57                   	push   edi
c0018c09:	56                   	push   esi
c0018c0a:	53                   	push   ebx
c0018c0b:	51                   	push   ecx
c0018c0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018c10:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018c13:	0f 02 c0             	lar    eax,ax
c0018c16:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018c19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c1d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018c20:	88 ca                	mov    dl,cl
c0018c22:	c0 ea 06             	shr    dl,0x6
c0018c25:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018c29:	89 ca                	mov    edx,ecx
c0018c2b:	66 c1 ea 03          	shr    dx,0x3
c0018c2f:	83 e2 07             	and    edx,0x7
c0018c32:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018c37:	88 17                	mov    BYTE PTR [edi],dl
c0018c39:	0f 84 a6 01 00 00    	je     c0018de5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018c3f:	83 e1 07             	and    ecx,0x7
c0018c42:	80 f9 04             	cmp    cl,0x4
c0018c45:	0f 84 98 00 00 00    	je     c0018ce3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018c4b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018c50:	0f 95 c0             	setne  al
c0018c53:	80 f9 05             	cmp    cl,0x5
c0018c56:	0f 95 c2             	setne  dl
c0018c59:	08 c2                	or     dl,al
c0018c5b:	74 79                	je     c0018cd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018c5d:	84 c9                	test   cl,cl
c0018c5f:	75 05                	jne    c0018c66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018c61:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018c64:	eb 3c                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c66:	80 f9 01             	cmp    cl,0x1
c0018c69:	75 05                	jne    c0018c70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018c6b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018c6e:	eb 32                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c70:	80 f9 02             	cmp    cl,0x2
c0018c73:	75 05                	jne    c0018c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018c75:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018c78:	eb 28                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c7a:	31 c0                	xor    eax,eax
c0018c7c:	80 f9 03             	cmp    cl,0x3
c0018c7f:	75 05                	jne    c0018c86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018c81:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018c84:	eb 1c                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c86:	80 f9 05             	cmp    cl,0x5
c0018c89:	75 05                	jne    c0018c90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018c8b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018c8e:	eb 12                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c90:	80 f9 06             	cmp    cl,0x6
c0018c93:	75 05                	jne    c0018c9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018c95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018c98:	eb 08                	jmp    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c9a:	80 f9 07             	cmp    cl,0x7
c0018c9d:	75 03                	jne    c0018ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c9f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018ca2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018ca7:	75 10                	jne    c0018cb9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018ca9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018cad:	b9 03 00 00 00       	mov    ecx,0x3
c0018cb2:	01 d0                	add    eax,edx
c0018cb4:	e9 37 01 00 00       	jmp    c0018df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cb9:	b9 02 00 00 00       	mov    ecx,0x2
c0018cbe:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018cc3:	0f 85 27 01 00 00    	jne    c0018df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cc9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018ccc:	b9 06 00 00 00       	mov    ecx,0x6
c0018cd1:	e9 1a 01 00 00       	jmp    c0018df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cd6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018cd9:	b9 06 00 00 00       	mov    ecx,0x6
c0018cde:	e9 0f 01 00 00       	jmp    c0018df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ce3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0018ce6:	88 ca                	mov    dl,cl
c0018ce8:	c0 ea 06             	shr    dl,0x6
c0018ceb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0018cef:	89 ca                	mov    edx,ecx
c0018cf1:	66 c1 ea 03          	shr    dx,0x3
c0018cf5:	83 e2 07             	and    edx,0x7
c0018cf8:	80 e1 07             	and    cl,0x7
c0018cfb:	75 05                	jne    c0018d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018cfd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018d00:	eb 4c                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d02:	80 f9 01             	cmp    cl,0x1
c0018d05:	75 05                	jne    c0018d0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018d07:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018d0a:	eb 42                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d0c:	80 f9 02             	cmp    cl,0x2
c0018d0f:	75 05                	jne    c0018d16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018d11:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018d14:	eb 38                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d16:	80 f9 03             	cmp    cl,0x3
c0018d19:	75 05                	jne    c0018d20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018d1b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018d1e:	eb 2e                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d20:	80 f9 04             	cmp    cl,0x4
c0018d23:	75 12                	jne    c0018d37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018d25:	f6 c4 60             	test   ah,0x60
c0018d28:	75 08                	jne    c0018d32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018d2a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018d2d:	8d 78 14             	lea    edi,[eax+0x14]
c0018d30:	eb 1c                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d32:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018d35:	eb 17                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d37:	80 f9 05             	cmp    cl,0x5
c0018d3a:	75 05                	jne    c0018d41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018d3c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018d3f:	eb 0d                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d41:	80 f9 06             	cmp    cl,0x6
c0018d44:	75 05                	jne    c0018d4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018d46:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018d49:	eb 03                	jmp    c0018d4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d4b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018d4e:	84 d2                	test   dl,dl
c0018d50:	75 05                	jne    c0018d57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018d52:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018d55:	eb 3c                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d57:	80 fa 01             	cmp    dl,0x1
c0018d5a:	75 05                	jne    c0018d61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018d5c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018d5f:	eb 32                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d61:	80 fa 02             	cmp    dl,0x2
c0018d64:	75 05                	jne    c0018d6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018d66:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018d69:	eb 28                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d6b:	80 fa 03             	cmp    dl,0x3
c0018d6e:	75 05                	jne    c0018d75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018d70:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018d73:	eb 1e                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d75:	31 c0                	xor    eax,eax
c0018d77:	80 fa 04             	cmp    dl,0x4
c0018d7a:	74 17                	je     c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d7c:	80 fa 05             	cmp    dl,0x5
c0018d7f:	75 05                	jne    c0018d86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018d81:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018d84:	eb 0d                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d86:	80 fa 06             	cmp    dl,0x6
c0018d89:	75 05                	jne    c0018d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018d8b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018d8e:	eb 03                	jmp    c0018d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d90:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018d93:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018d98:	0f 94 c2             	sete   dl
c0018d9b:	80 f9 05             	cmp    cl,0x5
c0018d9e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018da2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018da7:	d3 e0                	shl    eax,cl
c0018da9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018dad:	74 0a                	je     c0018db9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018daf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018db2:	b9 07 00 00 00       	mov    ecx,0x7
c0018db7:	eb 37                	jmp    c0018df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018db9:	01 f8                	add    eax,edi
c0018dbb:	b9 03 00 00 00       	mov    ecx,0x3
c0018dc0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018dc5:	74 2b                	je     c0018df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018dc7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018dcc:	75 0d                	jne    c0018ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018dce:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018dd2:	01 c8                	add    eax,ecx
c0018dd4:	b9 04 00 00 00       	mov    ecx,0x4
c0018dd9:	eb 17                	jmp    c0018df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ddb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018dde:	b9 07 00 00 00       	mov    ecx,0x7
c0018de3:	eb 0d                	jmp    c0018df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018de5:	b9 02 00 00 00       	mov    ecx,0x2
c0018dea:	b2 01                	mov    dl,0x1
c0018dec:	31 c0                	xor    eax,eax
c0018dee:	eb 02                	jmp    c0018df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018df0:	31 d2                	xor    edx,edx
c0018df2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018df8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018dfc:	88 11                	mov    BYTE PTR [ecx],dl
c0018dfe:	5a                   	pop    edx
c0018dff:	5b                   	pop    ebx
c0018e00:	5e                   	pop    esi
c0018e01:	5f                   	pop    edi
c0018e02:	c3                   	ret    

c0018e03 <Krnl::panic(char const*)>:
c0018e03:	55                   	push   ebp
c0018e04:	89 e5                	mov    ebp,esp
c0018e06:	53                   	push   ebx
c0018e07:	50                   	push   eax
c0018e08:	a1 b0 b4 02 c0       	mov    eax,ds:0xc002b4b0
c0018e0d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018e10:	85 c0                	test   eax,eax
c0018e12:	74 02                	je     c0018e16 <Krnl::panic(char const*)+0x13>
c0018e14:	ff d0                	call   eax
c0018e16:	fa                   	cli    
c0018e17:	c6 05 b4 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b4b4,0x1
c0018e1e:	83 ec 08             	sub    esp,0x8
c0018e21:	c6 05 60 99 02 c0 00 	mov    BYTE PTR ds:0xc0029960,0x0
c0018e28:	53                   	push   ebx
c0018e29:	68 e4 85 02 c0       	push   0xc00285e4
c0018e2e:	e8 0c 98 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0018e33:	58                   	pop    eax
c0018e34:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018e39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e3f:	e8 bd 79 ff ff       	call   c0010801 <setActiveTerminal(VgaText*)>
c0018e44:	83 c4 0c             	add    esp,0xc
c0018e47:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018e4c:	6a 01                	push   0x1
c0018e4e:	6a 0f                	push   0xf
c0018e50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e56:	e8 e5 73 ff ff       	call   c0010240 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018e5b:	5a                   	pop    edx
c0018e5c:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018e61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e67:	e8 36 7c ff ff       	call   c0010aa2 <VgaText::clearScreen()>
c0018e6c:	59                   	pop    ecx
c0018e6d:	58                   	pop    eax
c0018e6e:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018e73:	68 fd 85 02 c0       	push   0xc00285fd
c0018e78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e7e:	e8 9d 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018e83:	58                   	pop    eax
c0018e84:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018e89:	5a                   	pop    edx
c0018e8a:	68 a4 86 02 c0       	push   0xc00286a4
c0018e8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e95:	e8 86 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018e9a:	59                   	pop    ecx
c0018e9b:	58                   	pop    eax
c0018e9c:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018ea1:	68 19 86 02 c0       	push   0xc0028619
c0018ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018eac:	e8 6f 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018eb1:	58                   	pop    eax
c0018eb2:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018eb7:	5a                   	pop    edx
c0018eb8:	53                   	push   ebx
c0018eb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ebf:	e8 5c 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018ec4:	59                   	pop    ecx
c0018ec5:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018eca:	5b                   	pop    ebx
c0018ecb:	68 39 86 02 c0       	push   0xc0028639
c0018ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ed6:	e8 45 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018edb:	58                   	pop    eax
c0018edc:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018ee1:	5a                   	pop    edx
c0018ee2:	68 e0 86 02 c0       	push   0xc00286e0
c0018ee7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018eed:	e8 2e 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018ef2:	59                   	pop    ecx
c0018ef3:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018ef8:	5b                   	pop    ebx
c0018ef9:	68 19 86 02 c0       	push   0xc0028619
c0018efe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f04:	e8 17 7d ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f09:	58                   	pop    eax
c0018f0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0f:	5a                   	pop    edx
c0018f10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f13:	83 c0 0c             	add    eax,0xc
c0018f16:	50                   	push   eax
c0018f17:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018f1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f22:	e8 f9 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f27:	59                   	pop    ecx
c0018f28:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018f2d:	5b                   	pop    ebx
c0018f2e:	68 38 86 02 c0       	push   0xc0028638
c0018f33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f39:	e8 e2 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f3e:	58                   	pop    eax
c0018f3f:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018f44:	5a                   	pop    edx
c0018f45:	68 0c 87 02 c0       	push   0xc002870c
c0018f4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f50:	e8 cb 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f55:	59                   	pop    ecx
c0018f56:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018f5b:	5b                   	pop    ebx
c0018f5c:	68 4c 87 02 c0       	push   0xc002874c
c0018f61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f67:	e8 b4 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f6c:	58                   	pop    eax
c0018f6d:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018f72:	5a                   	pop    edx
c0018f73:	68 24 86 02 c0       	push   0xc0028624
c0018f78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f7e:	e8 9d 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018f83:	59                   	pop    ecx
c0018f84:	5b                   	pop    ebx
c0018f85:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018f88:	68 3c 86 02 c0       	push   0xc002863c
c0018f8d:	e8 ad 96 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0018f92:	58                   	pop    eax
c0018f93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f96:	5a                   	pop    edx
c0018f97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018f9a:	68 45 86 02 c0       	push   0xc0028645
c0018f9f:	e8 9b 96 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0018fa4:	59                   	pop    ecx
c0018fa5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fa8:	5b                   	pop    ebx
c0018fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018fae:	68 4e 86 02 c0       	push   0xc002864e
c0018fb3:	e8 87 96 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0018fb8:	58                   	pop    eax
c0018fb9:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018fbe:	5a                   	pop    edx
c0018fbf:	68 90 87 02 c0       	push   0xc0028790
c0018fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fca:	e8 51 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018fcf:	59                   	pop    ecx
c0018fd0:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018fd5:	5b                   	pop    ebx
c0018fd6:	68 57 86 02 c0       	push   0xc0028657
c0018fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fe1:	e8 3a 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0018fe6:	0f 20 c0             	mov    eax,cr0
c0018fe9:	5a                   	pop    edx
c0018fea:	59                   	pop    ecx
c0018feb:	50                   	push   eax
c0018fec:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0018ff1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ff7:	e8 4a 7c ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0018ffc:	5b                   	pop    ebx
c0018ffd:	58                   	pop    eax
c0018ffe:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0019003:	68 61 86 02 c0       	push   0xc0028661
c0019008:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001900e:	e8 0d 7c ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0019013:	0f 20 d0             	mov    eax,cr2
c0019016:	5a                   	pop    edx
c0019017:	59                   	pop    ecx
c0019018:	50                   	push   eax
c0019019:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001901e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019024:	e8 1d 7c ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0019029:	5b                   	pop    ebx
c001902a:	58                   	pop    eax
c001902b:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0019030:	68 6b 86 02 c0       	push   0xc002866b
c0019035:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001903b:	e8 e0 7b ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c0019040:	0f 20 d8             	mov    eax,cr3
c0019043:	5a                   	pop    edx
c0019044:	59                   	pop    ecx
c0019045:	50                   	push   eax
c0019046:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001904b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019051:	e8 f0 7b ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0019056:	5b                   	pop    ebx
c0019057:	58                   	pop    eax
c0019058:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001905d:	68 7e 86 02 c0       	push   0xc002867e
c0019062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019068:	e8 b3 7b ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c001906d:	0f 20 e0             	mov    eax,cr4
c0019070:	5a                   	pop    edx
c0019071:	59                   	pop    ecx
c0019072:	50                   	push   eax
c0019073:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0019078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001907e:	e8 c3 7b ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0019083:	5b                   	pop    ebx
c0019084:	58                   	pop    eax
c0019085:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c001908a:	68 88 86 02 c0       	push   0xc0028688
c001908f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019095:	e8 86 7b ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c001909a:	5a                   	pop    edx
c001909b:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00190a0:	59                   	pop    ecx
c00190a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190aa:	50                   	push   eax
c00190ab:	e8 96 7b ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00190b0:	5b                   	pop    ebx
c00190b1:	58                   	pop    eax
c00190b2:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00190b7:	68 9f 86 02 c0       	push   0xc002869f
c00190bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190c2:	e8 59 7b ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00190c7:	5a                   	pop    edx
c00190c8:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00190cd:	59                   	pop    ecx
c00190ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190d4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190d7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00190da:	50                   	push   eax
c00190db:	e8 66 7b ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c00190e0:	5b                   	pop    ebx
c00190e1:	58                   	pop    eax
c00190e2:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00190e7:	68 9f 86 02 c0       	push   0xc002869f
c00190ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190f2:	e8 29 7b ff ff       	call   c0010c20 <VgaText::puts(char const*)>
c00190f7:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c00190fc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190ff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019105:	8b 12                	mov    edx,DWORD PTR [edx]
c0019107:	59                   	pop    ecx
c0019108:	5b                   	pop    ebx
c0019109:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001910c:	50                   	push   eax
c001910d:	e8 34 7b ff ff       	call   c0010c46 <VgaText::putx(unsigned int)>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	b2 fe                	mov    dl,0xfe
c0019117:	e4 60                	in     al,0x60
c0019119:	3c 1c                	cmp    al,0x1c
c001911b:	74 04                	je     c0019121 <Krnl::panic(char const*)+0x31e>
c001911d:	3c 5a                	cmp    al,0x5a
c001911f:	75 f6                	jne    c0019117 <Krnl::panic(char const*)+0x314>
c0019121:	e4 64                	in     al,0x64
c0019123:	a8 02                	test   al,0x2
c0019125:	75 fa                	jne    c0019121 <Krnl::panic(char const*)+0x31e>
c0019127:	88 d0                	mov    al,dl
c0019129:	e6 64                	out    0x64,al
c001912b:	fa                   	cli    
c001912c:	f4                   	hlt    
c001912d:	eb e8                	jmp    c0019117 <Krnl::panic(char const*)+0x314>

c001912f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001912f:	55                   	push   ebp
c0019130:	57                   	push   edi
c0019131:	56                   	push   esi
c0019132:	53                   	push   ebx
c0019133:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019139:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019140:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019142:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019145:	80 fb 40             	cmp    bl,0x40
c0019148:	75 1b                	jne    c0019165 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001914a:	8a 16                	mov    dl,BYTE PTR [esi]
c001914c:	84 d2                	test   dl,dl
c001914e:	0f 84 f1 00 00 00    	je     c0019245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019154:	8d 46 01             	lea    eax,[esi+0x1]
c0019157:	80 fa 3a             	cmp    dl,0x3a
c001915a:	74 04                	je     c0019160 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001915c:	89 c6                	mov    esi,eax
c001915e:	eb ea                	jmp    c001914a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019160:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019163:	89 c6                	mov    esi,eax
c0019165:	50                   	push   eax
c0019166:	6a 40                	push   0x40
c0019168:	6a 00                	push   0x0
c001916a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001916e:	50                   	push   eax
c001916f:	e8 09 75 fe ff       	call   c000067d <memset>
c0019174:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001917b:	31 c0                	xor    eax,eax
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019182:	84 c9                	test   cl,cl
c0019184:	0f 84 bb 00 00 00    	je     c0019245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001918a:	3d c7 00 00 00       	cmp    eax,0xc7
c001918f:	0f 8f b0 00 00 00    	jg     c0019245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019195:	80 f9 0a             	cmp    cl,0xa
c0019198:	0f 85 98 00 00 00    	jne    c0019236 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001919e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00191a3:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00191a7:	a8 df                	test   al,0xdf
c00191a9:	0f 94 c1             	sete   cl
c00191ac:	3c 23                	cmp    al,0x23
c00191ae:	0f 94 c2             	sete   dl
c00191b1:	08 d1                	or     cl,dl
c00191b3:	75 4a                	jne    c00191ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191b5:	8d 50 f7             	lea    edx,[eax-0x9]
c00191b8:	80 fa 01             	cmp    dl,0x1
c00191bb:	76 42                	jbe    c00191ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191bd:	3c 5b                	cmp    al,0x5b
c00191bf:	75 42                	jne    c0019203 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00191c1:	80 fb 40             	cmp    bl,0x40
c00191c4:	75 39                	jne    c00191ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191c6:	83 ec 0c             	sub    esp,0xc
c00191c9:	8d 54 24 65          	lea    edx,[esp+0x65]
c00191cd:	52                   	push   edx
c00191ce:	e8 c7 74 fe ff       	call   c000069a <strlen>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	83 f8 3f             	cmp    eax,0x3f
c00191d9:	77 6a                	ja     c0019245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00191db:	50                   	push   eax
c00191dc:	50                   	push   eax
c00191dd:	8d 54 24 61          	lea    edx,[esp+0x61]
c00191e1:	52                   	push   edx
c00191e2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191e6:	52                   	push   edx
c00191e7:	e8 30 75 fe ff       	call   c000071c <strcpy>
c00191ec:	58                   	pop    eax
c00191ed:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191f1:	52                   	push   edx
c00191f2:	e8 a3 74 fe ff       	call   c000069a <strlen>
c00191f7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00191fc:	83 c4 10             	add    esp,0x10
c00191ff:	31 d2                	xor    edx,edx
c0019201:	eb 3a                	jmp    c001923d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019203:	80 fb 40             	cmp    bl,0x40
c0019206:	74 06                	je     c001920e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019208:	8d 44 24 58          	lea    eax,[esp+0x58]
c001920c:	eb 20                	jmp    c001922e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001920e:	50                   	push   eax
c001920f:	50                   	push   eax
c0019210:	55                   	push   ebp
c0019211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019215:	50                   	push   eax
c0019216:	e8 52 75 fe ff       	call   c000076d <strcmp>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	85 c0                	test   eax,eax
c0019220:	75 dd                	jne    c00191ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019222:	eb e4                	jmp    c0019208 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019224:	8d 50 01             	lea    edx,[eax+0x1]
c0019227:	80 f9 3d             	cmp    cl,0x3d
c001922a:	74 1d                	je     c0019249 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001922c:	89 d0                	mov    eax,edx
c001922e:	8a 08                	mov    cl,BYTE PTR [eax]
c0019230:	84 c9                	test   cl,cl
c0019232:	75 f0                	jne    c0019224 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019234:	eb 0f                	jmp    c0019245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019236:	8d 50 01             	lea    edx,[eax+0x1]
c0019239:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001923d:	47                   	inc    edi
c001923e:	89 d0                	mov    eax,edx
c0019240:	e9 3b ff ff ff       	jmp    c0019180 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019245:	31 c0                	xor    eax,eax
c0019247:	eb 33                	jmp    c001927c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019249:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001924d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019250:	50                   	push   eax
c0019251:	50                   	push   eax
c0019252:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019256:	50                   	push   eax
c0019257:	56                   	push   esi
c0019258:	e8 10 75 fe ff       	call   c000076d <strcmp>
c001925d:	83 c4 10             	add    esp,0x10
c0019260:	85 c0                	test   eax,eax
c0019262:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019266:	75 97                	jne    c00191ff <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019268:	51                   	push   ecx
c0019269:	51                   	push   ecx
c001926a:	52                   	push   edx
c001926b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019272:	e8 a5 74 fe ff       	call   c000071c <strcpy>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	b0 01                	mov    al,0x1
c001927c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019282:	5b                   	pop    ebx
c0019283:	5e                   	pop    esi
c0019284:	5f                   	pop    edi
c0019285:	5d                   	pop    ebp
c0019286:	c3                   	ret    

c0019287 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019287:	57                   	push   edi
c0019288:	56                   	push   esi
c0019289:	53                   	push   ebx
c001928a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019290:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0019297:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001929e:	53                   	push   ebx
c001929f:	e8 f6 73 fe ff       	call   c000069a <strlen>
c00192a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00192a7:	89 c7                	mov    edi,eax
c00192a9:	e8 ec 73 fe ff       	call   c000069a <strlen>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00192b5:	3d ff 00 00 00       	cmp    eax,0xff
c00192ba:	0f 87 d3 00 00 00    	ja     c0019393 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00192c0:	57                   	push   edi
c00192c1:	57                   	push   edi
c00192c2:	56                   	push   esi
c00192c3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192c7:	56                   	push   esi
c00192c8:	e8 4f 74 fe ff       	call   c000071c <strcpy>
c00192cd:	58                   	pop    eax
c00192ce:	5a                   	pop    edx
c00192cf:	68 61 8b 02 c0       	push   0xc0028b61
c00192d4:	56                   	push   esi
c00192d5:	e8 f9 74 fe ff       	call   c00007d3 <strcat>
c00192da:	59                   	pop    ecx
c00192db:	5f                   	pop    edi
c00192dc:	53                   	push   ebx
c00192dd:	56                   	push   esi
c00192de:	e8 f0 74 fe ff       	call   c00007d3 <strcat>
c00192e3:	58                   	pop    eax
c00192e4:	5a                   	pop    edx
c00192e5:	68 b6 87 02 c0       	push   0xc00287b6
c00192ea:	56                   	push   esi
c00192eb:	e8 e3 74 fe ff       	call   c00007d3 <strcat>
c00192f0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00192f7:	e8 d0 61 ff ff       	call   c000f4cc <malloc>
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	89 c3                	mov    ebx,eax
c0019301:	ff 35 b4 be 02 c0    	push   DWORD PTR ds:0xc002beb4
c0019307:	56                   	push   esi
c0019308:	50                   	push   eax
c0019309:	e8 60 98 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	85 db                	test   ebx,ebx
c0019313:	74 7e                	je     c0019393 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019315:	51                   	push   ecx
c0019316:	51                   	push   ecx
c0019317:	6a 01                	push   0x1
c0019319:	53                   	push   ebx
c001931a:	e8 b3 98 ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001931f:	83 c4 10             	add    esp,0x10
c0019322:	85 c0                	test   eax,eax
c0019324:	74 08                	je     c001932e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0019326:	83 ec 0c             	sub    esp,0xc
c0019329:	8b 03                	mov    eax,DWORD PTR [ebx]
c001932b:	53                   	push   ebx
c001932c:	eb 5f                	jmp    c001938d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001932e:	52                   	push   edx
c001932f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019333:	50                   	push   eax
c0019334:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019338:	50                   	push   eax
c0019339:	53                   	push   ebx
c001933a:	e8 3f 9b ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c001933f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	89 c1                	mov    ecx,eax
c0019348:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001934c:	74 31                	je     c001937f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001934e:	83 ec 0c             	sub    esp,0xc
c0019351:	50                   	push   eax
c0019352:	e8 75 61 ff ff       	call   c000f4cc <malloc>
c0019357:	89 c6                	mov    esi,eax
c0019359:	58                   	pop    eax
c001935a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001935c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019360:	52                   	push   edx
c0019361:	56                   	push   esi
c0019362:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019366:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001936a:	53                   	push   ebx
c001936b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001936e:	83 c4 20             	add    esp,0x20
c0019371:	85 c0                	test   eax,eax
c0019373:	75 0a                	jne    c001937f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019375:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019379:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001937d:	74 18                	je     c0019397 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001937f:	83 ec 0c             	sub    esp,0xc
c0019382:	53                   	push   ebx
c0019383:	e8 a8 98 ff ff       	call   c0012c30 <File::close()>
c0019388:	8b 03                	mov    eax,DWORD PTR [ebx]
c001938a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001938d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019390:	83 c4 10             	add    esp,0x10
c0019393:	31 c0                	xor    eax,eax
c0019395:	eb 3b                	jmp    c00193d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0019397:	83 ec 0c             	sub    esp,0xc
c001939a:	53                   	push   ebx
c001939b:	e8 90 98 ff ff       	call   c0012c30 <File::close()>
c00193a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00193a8:	83 c4 0c             	add    esp,0xc
c00193ab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193b2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193b9:	56                   	push   esi
c00193ba:	e8 70 fd ff ff       	call   c001912f <Reg::findLineFromLoadedData(char*, char*, char*)>
c00193bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00193c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00193c6:	e8 11 61 ff ff       	call   c000f4dc <free>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193d2:	81 c4 20 01 00 00    	add    esp,0x120
c00193d8:	5b                   	pop    ebx
c00193d9:	5e                   	pop    esi
c00193da:	5f                   	pop    edi
c00193db:	c3                   	ret    

c00193dc <Reg::getLine(char*, char*, char*)>:
c00193dc:	57                   	push   edi
c00193dd:	56                   	push   esi
c00193de:	53                   	push   ebx
c00193df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00193eb:	57                   	push   edi
c00193ec:	56                   	push   esi
c00193ed:	53                   	push   ebx
c00193ee:	68 bb 87 02 c0       	push   0xc00287bb
c00193f3:	e8 8f fe ff ff       	call   c0019287 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00193f8:	83 c4 10             	add    esp,0x10
c00193fb:	84 c0                	test   al,al
c00193fd:	75 10                	jne    c001940f <Reg::getLine(char*, char*, char*)+0x33>
c00193ff:	57                   	push   edi
c0019400:	56                   	push   esi
c0019401:	53                   	push   ebx
c0019402:	68 e0 87 02 c0       	push   0xc00287e0
c0019407:	e8 7b fe ff ff       	call   c0019287 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	5b                   	pop    ebx
c0019410:	5e                   	pop    esi
c0019411:	5f                   	pop    edi
c0019412:	c3                   	ret    

c0019413 <Reg::readInt(char*, char*, int*)>:
c0019413:	55                   	push   ebp
c0019414:	57                   	push   edi
c0019415:	56                   	push   esi
c0019416:	53                   	push   ebx
c0019417:	81 ec f0 00 00 00    	sub    esp,0xf0
c001941d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019421:	57                   	push   edi
c0019422:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019429:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019430:	e8 a7 ff ff ff       	call   c00193dc <Reg::getLine(char*, char*, char*)>
c0019435:	83 c4 10             	add    esp,0x10
c0019438:	84 c0                	test   al,al
c001943a:	0f 84 b3 00 00 00    	je     c00194f3 <Reg::readInt(char*, char*, int*)+0xe0>
c0019440:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019444:	80 fa 2b             	cmp    dl,0x2b
c0019447:	74 0c                	je     c0019455 <Reg::readInt(char*, char*, int*)+0x42>
c0019449:	80 fa 2d             	cmp    dl,0x2d
c001944c:	75 0e                	jne    c001945c <Reg::readInt(char*, char*, int*)+0x49>
c001944e:	ba 01 00 00 00       	mov    edx,0x1
c0019453:	eb 0b                	jmp    c0019460 <Reg::readInt(char*, char*, int*)+0x4d>
c0019455:	ba 01 00 00 00       	mov    edx,0x1
c001945a:	eb 02                	jmp    c001945e <Reg::readInt(char*, char*, int*)+0x4b>
c001945c:	31 d2                	xor    edx,edx
c001945e:	31 c0                	xor    eax,eax
c0019460:	be 0a 00 00 00       	mov    esi,0xa
c0019465:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001946a:	75 20                	jne    c001948c <Reg::readInt(char*, char*, int*)+0x79>
c001946c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019470:	80 f9 78             	cmp    cl,0x78
c0019473:	75 0a                	jne    c001947f <Reg::readInt(char*, char*, int*)+0x6c>
c0019475:	83 c2 02             	add    edx,0x2
c0019478:	be 10 00 00 00       	mov    esi,0x10
c001947d:	eb 0d                	jmp    c001948c <Reg::readInt(char*, char*, int*)+0x79>
c001947f:	80 f9 62             	cmp    cl,0x62
c0019482:	75 08                	jne    c001948c <Reg::readInt(char*, char*, int*)+0x79>
c0019484:	83 c2 02             	add    edx,0x2
c0019487:	be 02 00 00 00       	mov    esi,0x2
c001948c:	01 d7                	add    edi,edx
c001948e:	31 d2                	xor    edx,edx
c0019490:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019492:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019496:	80 fb 0d             	cmp    bl,0xd
c0019499:	0f 94 c3             	sete   bl
c001949c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00194a1:	0f 94 c1             	sete   cl
c00194a4:	08 cb                	or     bl,cl
c00194a6:	75 3a                	jne    c00194e2 <Reg::readInt(char*, char*, int*)+0xcf>
c00194a8:	0f af d6             	imul   edx,esi
c00194ab:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00194b0:	83 fe 10             	cmp    esi,0x10
c00194b3:	75 26                	jne    c00194db <Reg::readInt(char*, char*, int*)+0xc8>
c00194b5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194b9:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00194bc:	89 e9                	mov    ecx,ebp
c00194be:	80 f9 05             	cmp    cl,0x5
c00194c1:	77 06                	ja     c00194c9 <Reg::readInt(char*, char*, int*)+0xb6>
c00194c3:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00194c7:	eb 16                	jmp    c00194df <Reg::readInt(char*, char*, int*)+0xcc>
c00194c9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194cd:	83 e9 61             	sub    ecx,0x61
c00194d0:	80 f9 05             	cmp    cl,0x5
c00194d3:	77 06                	ja     c00194db <Reg::readInt(char*, char*, int*)+0xc8>
c00194d5:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00194d9:	eb 04                	jmp    c00194df <Reg::readInt(char*, char*, int*)+0xcc>
c00194db:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00194df:	47                   	inc    edi
c00194e0:	eb ae                	jmp    c0019490 <Reg::readInt(char*, char*, int*)+0x7d>
c00194e2:	84 c0                	test   al,al
c00194e4:	74 02                	je     c00194e8 <Reg::readInt(char*, char*, int*)+0xd5>
c00194e6:	f7 da                	neg    edx
c00194e8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00194ef:	89 10                	mov    DWORD PTR [eax],edx
c00194f1:	88 d8                	mov    al,bl
c00194f3:	81 c4 ec 00 00 00    	add    esp,0xec
c00194f9:	5b                   	pop    ebx
c00194fa:	5e                   	pop    esi
c00194fb:	5f                   	pop    edi
c00194fc:	5d                   	pop    ebp
c00194fd:	c3                   	ret    

c00194fe <Reg::readString(char*, char*, char*, int)>:
c00194fe:	57                   	push   edi
c00194ff:	56                   	push   esi
c0019500:	53                   	push   ebx
c0019501:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019507:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001950e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019512:	57                   	push   edi
c0019513:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001951a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019521:	e8 b6 fe ff ff       	call   c00193dc <Reg::getLine(char*, char*, char*)>
c0019526:	83 c4 10             	add    esp,0x10
c0019529:	89 c6                	mov    esi,eax
c001952b:	84 c0                	test   al,al
c001952d:	74 44                	je     c0019573 <Reg::readString(char*, char*, char*, int)+0x75>
c001952f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019536:	31 c0                	xor    eax,eax
c0019538:	4a                   	dec    edx
c0019539:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001953c:	84 c9                	test   cl,cl
c001953e:	74 0f                	je     c001954f <Reg::readString(char*, char*, char*, int)+0x51>
c0019540:	39 c2                	cmp    edx,eax
c0019542:	7e 0b                	jle    c001954f <Reg::readString(char*, char*, char*, int)+0x51>
c0019544:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019547:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001954c:	40                   	inc    eax
c001954d:	eb ea                	jmp    c0019539 <Reg::readString(char*, char*, char*, int)+0x3b>
c001954f:	83 ec 0c             	sub    esp,0xc
c0019552:	53                   	push   ebx
c0019553:	e8 42 71 fe ff       	call   c000069a <strlen>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019560:	75 11                	jne    c0019573 <Reg::readString(char*, char*, char*, int)+0x75>
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	53                   	push   ebx
c0019566:	e8 2f 71 fe ff       	call   c000069a <strlen>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019573:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019579:	89 f0                	mov    eax,esi
c001957b:	5b                   	pop    ebx
c001957c:	5e                   	pop    esi
c001957d:	5f                   	pop    edi
c001957e:	c3                   	ret    

c001957f <Reg::readBool(char*, char*, bool*)>:
c001957f:	83 ec 20             	sub    esp,0x20
c0019582:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019586:	50                   	push   eax
c0019587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001958b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001958f:	e8 7f fe ff ff       	call   c0019413 <Reg::readInt(char*, char*, int*)>
c0019594:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019599:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001959d:	0f 95 02             	setne  BYTE PTR [edx]
c00195a0:	83 c4 2c             	add    esp,0x2c
c00195a3:	c3                   	ret    

c00195a4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00195a4:	53                   	push   ebx
c00195a5:	83 ec 1c             	sub    esp,0x1c
c00195a8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00195ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195b0:	50                   	push   eax
c00195b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195b9:	e8 c1 ff ff ff       	call   c001957f <Reg::readBool(char*, char*, bool*)>
c00195be:	83 c4 10             	add    esp,0x10
c00195c1:	84 c0                	test   al,al
c00195c3:	74 04                	je     c00195c9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00195c5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00195c9:	88 d8                	mov    al,bl
c00195cb:	83 c4 18             	add    esp,0x18
c00195ce:	5b                   	pop    ebx
c00195cf:	c3                   	ret    

c00195d0 <Reg::readIntWithDefault(char*, char*, int)>:
c00195d0:	53                   	push   ebx
c00195d1:	83 ec 1c             	sub    esp,0x1c
c00195d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195dc:	50                   	push   eax
c00195dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195e5:	e8 29 fe ff ff       	call   c0019413 <Reg::readInt(char*, char*, int*)>
c00195ea:	83 c4 10             	add    esp,0x10
c00195ed:	84 c0                	test   al,al
c00195ef:	74 04                	je     c00195f5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00195f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00195f5:	89 d8                	mov    eax,ebx
c00195f7:	83 c4 18             	add    esp,0x18
c00195fa:	5b                   	pop    ebx
c00195fb:	c3                   	ret    

c00195fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00195fc:	56                   	push   esi
c00195fd:	53                   	push   ebx
c00195fe:	51                   	push   ecx
c00195ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019603:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001960b:	56                   	push   esi
c001960c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019614:	e8 e5 fe ff ff       	call   c00194fe <Reg::readString(char*, char*, char*, int)>
c0019619:	83 c4 10             	add    esp,0x10
c001961c:	84 c0                	test   al,al
c001961e:	74 02                	je     c0019622 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019620:	89 f3                	mov    ebx,esi
c0019622:	89 d8                	mov    eax,ebx
c0019624:	5a                   	pop    edx
c0019625:	5b                   	pop    ebx
c0019626:	5e                   	pop    esi
c0019627:	c3                   	ret    

c0019628 <Sys::exit(regs*)>:
c0019628:	83 ec 18             	sub    esp,0x18
c001962b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001962f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019632:	e8 f5 31 00 00       	call   c001c82c <terminateTask(int)>
c0019637:	83 c8 ff             	or     eax,0xffffffff
c001963a:	83 c4 1c             	add    esp,0x1c
c001963d:	89 c2                	mov    edx,eax
c001963f:	c3                   	ret    

c0019640 <Sys::loadDLL(regs*)>:
c0019640:	56                   	push   esi
c0019641:	53                   	push   ebx
c0019642:	31 d2                	xor    edx,edx
c0019644:	51                   	push   ecx
c0019645:	b8 01 00 00 00       	mov    eax,0x1
c001964a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001964e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019652:	0f 84 8c 00 00 00    	je     c00196e4 <Sys::loadDLL(regs*)+0xa4>
c0019658:	83 ec 0c             	sub    esp,0xc
c001965b:	68 14 01 00 00       	push   0x114
c0019660:	e8 67 5e ff ff       	call   c000f4cc <malloc>
c0019665:	83 c4 0c             	add    esp,0xc
c0019668:	89 c3                	mov    ebx,eax
c001966a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001966f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019672:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019675:	53                   	push   ebx
c0019676:	e8 f3 94 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	31 d2                	xor    edx,edx
c0019680:	b8 02 00 00 00       	mov    eax,0x2
c0019685:	85 db                	test   ebx,ebx
c0019687:	74 5b                	je     c00196e4 <Sys::loadDLL(regs*)+0xa4>
c0019689:	83 ec 0c             	sub    esp,0xc
c001968c:	53                   	push   ebx
c001968d:	e8 ae 97 ff ff       	call   c0012e40 <File::exists()>
c0019692:	83 c4 10             	add    esp,0x10
c0019695:	84 c0                	test   al,al
c0019697:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019699:	75 11                	jne    c00196ac <Sys::loadDLL(regs*)+0x6c>
c001969b:	83 ec 0c             	sub    esp,0xc
c001969e:	53                   	push   ebx
c001969f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196a2:	83 c4 10             	add    esp,0x10
c00196a5:	b8 03 00 00 00       	mov    eax,0x3
c00196aa:	eb 36                	jmp    c00196e2 <Sys::loadDLL(regs*)+0xa2>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	53                   	push   ebx
c00196b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196b3:	58                   	pop    eax
c00196b4:	5a                   	pop    edx
c00196b5:	6a 00                	push   0x0
c00196b7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00196ba:	e8 13 21 00 00       	call   c001b7d2 <Thr::loadDLL(char const*, bool)>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	89 c1                	mov    ecx,eax
c00196c4:	31 d2                	xor    edx,edx
c00196c6:	b8 04 00 00 00       	mov    eax,0x4
c00196cb:	85 c9                	test   ecx,ecx
c00196cd:	74 15                	je     c00196e4 <Sys::loadDLL(regs*)+0xa4>
c00196cf:	53                   	push   ebx
c00196d0:	53                   	push   ebx
c00196d1:	ff 35 a8 a9 02 c0    	push   DWORD PTR ds:0xc002a9a8
c00196d7:	51                   	push   ecx
c00196d8:	e8 04 23 00 00       	call   c001b9e1 <Thr::executeDLL(unsigned long, void*)>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	31 c0                	xor    eax,eax
c00196e2:	31 d2                	xor    edx,edx
c00196e4:	59                   	pop    ecx
c00196e5:	5b                   	pop    ebx
c00196e6:	5e                   	pop    esi
c00196e7:	c3                   	ret    

c00196e8 <Sys::read(regs*)>:
c00196e8:	57                   	push   edi
c00196e9:	56                   	push   esi
c00196ea:	53                   	push   ebx
c00196eb:	83 ec 10             	sub    esp,0x10
c00196ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00196f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00196f5:	83 f8 02             	cmp    eax,0x2
c00196f8:	77 10                	ja     c001970a <Sys::read(regs*)+0x22>
c00196fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019702:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019708:	eb 0e                	jmp    c0019718 <Sys::read(regs*)+0x30>
c001970a:	83 ec 0c             	sub    esp,0xc
c001970d:	50                   	push   eax
c001970e:	e8 e6 7d ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019713:	83 c4 10             	add    esp,0x10
c0019716:	89 c1                	mov    ecx,eax
c0019718:	83 c8 ff             	or     eax,0xffffffff
c001971b:	85 c9                	test   ecx,ecx
c001971d:	89 c2                	mov    edx,eax
c001971f:	74 28                	je     c0019749 <Sys::read(regs*)+0x61>
c0019721:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019729:	31 ff                	xor    edi,edi
c001972b:	83 ec 0c             	sub    esp,0xc
c001972e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019730:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019734:	52                   	push   edx
c0019735:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019738:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001973b:	57                   	push   edi
c001973c:	56                   	push   esi
c001973d:	51                   	push   ecx
c001973e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019741:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019745:	83 c4 20             	add    esp,0x20
c0019748:	99                   	cdq    
c0019749:	83 c4 10             	add    esp,0x10
c001974c:	5b                   	pop    ebx
c001974d:	5e                   	pop    esi
c001974e:	5f                   	pop    edi
c001974f:	c3                   	ret    

c0019750 <Sys::sbrk(regs*)>:
c0019750:	56                   	push   esi
c0019751:	53                   	push   ebx
c0019752:	50                   	push   eax
c0019753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019758:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001975c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001975f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019762:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019768:	85 db                	test   ebx,ebx
c001976a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001976d:	74 02                	je     c0019771 <Sys::sbrk(regs*)+0x21>
c001976f:	79 06                	jns    c0019777 <Sys::sbrk(regs*)+0x27>
c0019771:	89 f0                	mov    eax,esi
c0019773:	31 d2                	xor    edx,edx
c0019775:	eb 2a                	jmp    c00197a1 <Sys::sbrk(regs*)+0x51>
c0019777:	83 c8 ff             	or     eax,0xffffffff
c001977a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019780:	89 c2                	mov    edx,eax
c0019782:	77 1d                	ja     c00197a1 <Sys::sbrk(regs*)+0x51>
c0019784:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001978a:	50                   	push   eax
c001978b:	c1 ea 0c             	shr    edx,0xc
c001978e:	68 07 04 00 00       	push   0x407
c0019793:	52                   	push   edx
c0019794:	51                   	push   ecx
c0019795:	e8 80 86 ff ff       	call   c0011e1a <VAS::allocatePages(int, int)>
c001979a:	89 f0                	mov    eax,esi
c001979c:	31 d2                	xor    edx,edx
c001979e:	83 c4 10             	add    esp,0x10
c00197a1:	59                   	pop    ecx
c00197a2:	5b                   	pop    ebx
c00197a3:	5e                   	pop    esi
c00197a4:	c3                   	ret    

c00197a5 <Sys::write(regs*)>:
c00197a5:	57                   	push   edi
c00197a6:	56                   	push   esi
c00197a7:	53                   	push   ebx
c00197a8:	83 ec 10             	sub    esp,0x10
c00197ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00197b2:	83 f8 02             	cmp    eax,0x2
c00197b5:	77 10                	ja     c00197c7 <Sys::write(regs*)+0x22>
c00197b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197bf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00197c5:	eb 0e                	jmp    c00197d5 <Sys::write(regs*)+0x30>
c00197c7:	83 ec 0c             	sub    esp,0xc
c00197ca:	50                   	push   eax
c00197cb:	e8 29 7d ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c00197d0:	83 c4 10             	add    esp,0x10
c00197d3:	89 c1                	mov    ecx,eax
c00197d5:	83 c8 ff             	or     eax,0xffffffff
c00197d8:	85 c9                	test   ecx,ecx
c00197da:	89 c2                	mov    edx,eax
c00197dc:	74 28                	je     c0019806 <Sys::write(regs*)+0x61>
c00197de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197e6:	31 ff                	xor    edi,edi
c00197e8:	83 ec 0c             	sub    esp,0xc
c00197eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00197ed:	8d 54 24 18          	lea    edx,[esp+0x18]
c00197f1:	52                   	push   edx
c00197f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00197f5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00197f8:	57                   	push   edi
c00197f9:	56                   	push   esi
c00197fa:	51                   	push   ecx
c00197fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00197fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019802:	83 c4 20             	add    esp,0x20
c0019805:	99                   	cdq    
c0019806:	83 c4 10             	add    esp,0x10
c0019809:	5b                   	pop    ebx
c001980a:	5e                   	pop    esi
c001980b:	5f                   	pop    edi
c001980c:	c3                   	ret    

c001980d <Sys::yield(regs*)>:
c001980d:	83 ec 0c             	sub    esp,0xc
c0019810:	e8 fa 25 00 00       	call   c001be0f <lockScheduler()>
c0019815:	e8 30 29 00 00       	call   c001c14a <schedule()>
c001981a:	e8 f2 25 00 00       	call   c001be11 <unlockScheduler()>
c001981f:	31 c0                	xor    eax,eax
c0019821:	31 d2                	xor    edx,edx
c0019823:	83 c4 0c             	add    esp,0xc
c0019826:	c3                   	ret    

c0019827 <sysCallGetPID(regs*)>:
c0019827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001982c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001982f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019831:	99                   	cdq    
c0019832:	c3                   	ret    

c0019833 <sysCallSeekDir(regs*)>:
c0019833:	31 c0                	xor    eax,eax
c0019835:	31 d2                	xor    edx,edx
c0019837:	c3                   	ret    

c0019838 <sysCallTellDir(regs*)>:
c0019838:	31 c0                	xor    eax,eax
c001983a:	31 d2                	xor    edx,edx
c001983c:	c3                   	ret    

c001983d <sysCallVerify(regs*)>:
c001983d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019841:	31 d2                	xor    edx,edx
c0019843:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019846:	c3                   	ret    

c0019847 <sysCallGetArgc(regs*)>:
c0019847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001984c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001984f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019855:	99                   	cdq    
c0019856:	c3                   	ret    

c0019857 <sysFormatDisk(regs*)>:
c0019857:	56                   	push   esi
c0019858:	53                   	push   ebx
c0019859:	53                   	push   ebx
c001985a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001985e:	8b 1d 08 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002ab08
c0019864:	eb 25                	jmp    c001988b <sysFormatDisk(regs*)+0x34>
c0019866:	83 ec 0c             	sub    esp,0xc
c0019869:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001986c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001986e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019871:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019874:	50                   	push   eax
c0019875:	ff 34 85 a0 af 02 c0 	push   DWORD PTR [eax*4-0x3ffd5060]
c001987c:	53                   	push   ebx
c001987d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019880:	83 c4 20             	add    esp,0x20
c0019883:	83 f8 08             	cmp    eax,0x8
c0019886:	75 12                	jne    c001989a <sysFormatDisk(regs*)+0x43>
c0019888:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001988b:	85 db                	test   ebx,ebx
c001988d:	75 d7                	jne    c0019866 <sysFormatDisk(regs*)+0xf>
c001988f:	59                   	pop    ecx
c0019890:	b8 03 00 00 00       	mov    eax,0x3
c0019895:	31 d2                	xor    edx,edx
c0019897:	5b                   	pop    ebx
c0019898:	5e                   	pop    esi
c0019899:	c3                   	ret    
c001989a:	85 c0                	test   eax,eax
c001989c:	74 1b                	je     c00198b9 <sysFormatDisk(regs*)+0x62>
c001989e:	83 f8 09             	cmp    eax,0x9
c00198a1:	74 0b                	je     c00198ae <sysFormatDisk(regs*)+0x57>
c00198a3:	59                   	pop    ecx
c00198a4:	b8 02 00 00 00       	mov    eax,0x2
c00198a9:	31 d2                	xor    edx,edx
c00198ab:	5b                   	pop    ebx
c00198ac:	5e                   	pop    esi
c00198ad:	c3                   	ret    
c00198ae:	59                   	pop    ecx
c00198af:	b8 01 00 00 00       	mov    eax,0x1
c00198b4:	31 d2                	xor    edx,edx
c00198b6:	5b                   	pop    ebx
c00198b7:	5e                   	pop    esi
c00198b8:	c3                   	ret    
c00198b9:	59                   	pop    ecx
c00198ba:	31 c0                	xor    eax,eax
c00198bc:	31 d2                	xor    edx,edx
c00198be:	5b                   	pop    ebx
c00198bf:	5e                   	pop    esi
c00198c0:	c3                   	ret    

c00198c1 <sysSetDiskVolumeLabel(regs*)>:
c00198c1:	56                   	push   esi
c00198c2:	53                   	push   ebx
c00198c3:	53                   	push   ebx
c00198c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198c8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00198cb:	83 f8 19             	cmp    eax,0x19
c00198ce:	77 29                	ja     c00198f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c00198d0:	8b 0c 85 a0 af 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5060]
c00198d7:	85 c9                	test   ecx,ecx
c00198d9:	74 1e                	je     c00198f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c00198db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00198de:	85 d2                	test   edx,edx
c00198e0:	74 17                	je     c00198f9 <sysSetDiskVolumeLabel(regs*)+0x38>
c00198e2:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00198e8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00198ea:	52                   	push   edx
c00198eb:	50                   	push   eax
c00198ec:	51                   	push   ecx
c00198ed:	53                   	push   ebx
c00198ee:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00198f1:	83 c4 10             	add    esp,0x10
c00198f4:	99                   	cdq    
c00198f5:	59                   	pop    ecx
c00198f6:	5b                   	pop    ebx
c00198f7:	5e                   	pop    esi
c00198f8:	c3                   	ret    
c00198f9:	59                   	pop    ecx
c00198fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00198ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019904:	5b                   	pop    ebx
c0019905:	5e                   	pop    esi
c0019906:	c3                   	ret    

c0019907 <sysGetDiskVolumeLabel(regs*)>:
c0019907:	57                   	push   edi
c0019908:	56                   	push   esi
c0019909:	53                   	push   ebx
c001990a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001990e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019911:	83 fa 19             	cmp    edx,0x19
c0019914:	77 34                	ja     c001994a <sysGetDiskVolumeLabel(regs*)+0x43>
c0019916:	8b 0c 95 a0 af 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5060]
c001991d:	85 c9                	test   ecx,ecx
c001991f:	74 29                	je     c001994a <sysGetDiskVolumeLabel(regs*)+0x43>
c0019921:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019924:	85 db                	test   ebx,ebx
c0019926:	74 22                	je     c001994a <sysGetDiskVolumeLabel(regs*)+0x43>
c0019928:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001992b:	85 c0                	test   eax,eax
c001992d:	74 1b                	je     c001994a <sysGetDiskVolumeLabel(regs*)+0x43>
c001992f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019935:	83 ec 0c             	sub    esp,0xc
c0019938:	8b 3e                	mov    edi,DWORD PTR [esi]
c001993a:	50                   	push   eax
c001993b:	53                   	push   ebx
c001993c:	52                   	push   edx
c001993d:	51                   	push   ecx
c001993e:	56                   	push   esi
c001993f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019942:	83 c4 20             	add    esp,0x20
c0019945:	99                   	cdq    
c0019946:	5b                   	pop    ebx
c0019947:	5e                   	pop    esi
c0019948:	5f                   	pop    edi
c0019949:	c3                   	ret    
c001994a:	5b                   	pop    ebx
c001994b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019950:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019955:	5e                   	pop    esi
c0019956:	5f                   	pop    edi
c0019957:	c3                   	ret    

c0019958 <sysShutdown(regs*)>:
c0019958:	83 ec 0c             	sub    esp,0xc
c001995b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001995f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019962:	85 c0                	test   eax,eax
c0019964:	74 18                	je     c001997e <sysShutdown(regs*)+0x26>
c0019966:	83 f8 01             	cmp    eax,0x1
c0019969:	74 38                	je     c00199a3 <sysShutdown(regs*)+0x4b>
c001996b:	83 f8 02             	cmp    eax,0x2
c001996e:	74 24                	je     c0019994 <sysShutdown(regs*)+0x3c>
c0019970:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019975:	ba ff ff ff ff       	mov    edx,0xffffffff
c001997a:	83 c4 0c             	add    esp,0xc
c001997d:	c3                   	ret    
c001997e:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0019983:	8b 10                	mov    edx,DWORD PTR [eax]
c0019985:	6a 00                	push   0x0
c0019987:	6a 00                	push   0x0
c0019989:	6a 00                	push   0x0
c001998b:	50                   	push   eax
c001998c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001998f:	83 c4 10             	add    esp,0x10
c0019992:	eb dc                	jmp    c0019970 <sysShutdown(regs*)+0x18>
c0019994:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0019999:	8b 10                	mov    edx,DWORD PTR [eax]
c001999b:	6a 00                	push   0x0
c001999d:	6a 00                	push   0x0
c001999f:	6a 01                	push   0x1
c00199a1:	eb e8                	jmp    c001998b <sysShutdown(regs*)+0x33>
c00199a3:	a1 20 b0 02 c0       	mov    eax,ds:0xc002b020
c00199a8:	85 c0                	test   eax,eax
c00199aa:	74 02                	je     c00199ae <sysShutdown(regs*)+0x56>
c00199ac:	ff d0                	call   eax
c00199ae:	31 c0                	xor    eax,eax
c00199b0:	31 d2                	xor    edx,edx
c00199b2:	83 c4 0c             	add    esp,0xc
c00199b5:	c3                   	ret    

c00199b6 <sysCallGetCwd(regs*)>:
c00199b6:	83 ec 10             	sub    esp,0x10
c00199b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199bd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00199c0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199cb:	e8 0f 95 ff ff       	call   c0012edf <getcwd(Process*, char*, int)>
c00199d0:	83 c4 1c             	add    esp,0x1c
c00199d3:	99                   	cdq    
c00199d4:	c3                   	ret    

c00199d5 <sysCallSetCwd(regs*)>:
c00199d5:	83 ec 14             	sub    esp,0x14
c00199d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199dc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199e7:	e8 1d 95 ff ff       	call   c0012f09 <setcwd(Process*, char*)>
c00199ec:	83 c4 1c             	add    esp,0x1c
c00199ef:	99                   	cdq    
c00199f0:	c3                   	ret    

c00199f1 <sysCallRealpath(regs*)>:
c00199f1:	83 ec 0c             	sub    esp,0xc
c00199f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00199fb:	85 d2                	test   edx,edx
c00199fd:	74 07                	je     c0019a06 <sysCallRealpath(regs*)+0x15>
c00199ff:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019a02:	85 c0                	test   eax,eax
c0019a04:	75 0b                	jne    c0019a11 <sysCallRealpath(regs*)+0x20>
c0019a06:	b8 01 00 00 00       	mov    eax,0x1
c0019a0b:	31 d2                	xor    edx,edx
c0019a0d:	83 c4 0c             	add    esp,0xc
c0019a10:	c3                   	ret    
c0019a11:	51                   	push   ecx
c0019a12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a18:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019a1b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019a21:	51                   	push   ecx
c0019a22:	52                   	push   edx
c0019a23:	50                   	push   eax
c0019a24:	e8 9b 8f ff ff       	call   c00129c4 <standardiseFiles(char*, char const*, char const*)>
c0019a29:	83 c4 10             	add    esp,0x10
c0019a2c:	31 c0                	xor    eax,eax
c0019a2e:	31 d2                	xor    edx,edx
c0019a30:	83 c4 0c             	add    esp,0xc
c0019a33:	c3                   	ret    

c0019a34 <sysCallReadDir(regs*)>:
c0019a34:	53                   	push   ebx
c0019a35:	83 ec 18             	sub    esp,0x18
c0019a38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a3c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019a3f:	83 f8 02             	cmp    eax,0x2
c0019a42:	76 53                	jbe    c0019a97 <sysCallReadDir(regs*)+0x63>
c0019a44:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a47:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019a4d:	77 4f                	ja     c0019a9e <sysCallReadDir(regs*)+0x6a>
c0019a4f:	83 ec 0c             	sub    esp,0xc
c0019a52:	50                   	push   eax
c0019a53:	e8 a1 7a ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	85 c0                	test   eax,eax
c0019a5d:	74 50                	je     c0019aaf <sysCallReadDir(regs*)+0x7b>
c0019a5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a6c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019a70:	51                   	push   ecx
c0019a71:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019a74:	6a 00                	push   0x0
c0019a76:	68 10 01 00 00       	push   0x110
c0019a7b:	50                   	push   eax
c0019a7c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019a7f:	83 c4 20             	add    esp,0x20
c0019a82:	85 c0                	test   eax,eax
c0019a84:	74 38                	je     c0019abe <sysCallReadDir(regs*)+0x8a>
c0019a86:	83 f8 07             	cmp    eax,0x7
c0019a89:	74 0c                	je     c0019a97 <sysCallReadDir(regs*)+0x63>
c0019a8b:	b8 02 00 00 00       	mov    eax,0x2
c0019a90:	31 d2                	xor    edx,edx
c0019a92:	83 c4 18             	add    esp,0x18
c0019a95:	5b                   	pop    ebx
c0019a96:	c3                   	ret    
c0019a97:	b8 01 00 00 00       	mov    eax,0x1
c0019a9c:	eb f2                	jmp    c0019a90 <sysCallReadDir(regs*)+0x5c>
c0019a9e:	83 ec 08             	sub    esp,0x8
c0019aa1:	52                   	push   edx
c0019aa2:	68 fc 87 02 c0       	push   0xc00287fc
c0019aa7:	e8 93 8b ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ab4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ab9:	83 c4 18             	add    esp,0x18
c0019abc:	5b                   	pop    ebx
c0019abd:	c3                   	ret    
c0019abe:	31 c0                	xor    eax,eax
c0019ac0:	eb ce                	jmp    c0019a90 <sysCallReadDir(regs*)+0x5c>

c0019ac2 <sysCallIsATTY(regs*)>:
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019acc:	83 f8 02             	cmp    eax,0x2
c0019acf:	76 07                	jbe    c0019ad8 <sysCallIsATTY(regs*)+0x16>
c0019ad1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019ad6:	75 26                	jne    c0019afe <sysCallIsATTY(regs*)+0x3c>
c0019ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019add:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ae0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ae6:	85 c0                	test   eax,eax
c0019ae8:	74 24                	je     c0019b0e <sysCallIsATTY(regs*)+0x4c>
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	8b 10                	mov    edx,DWORD PTR [eax]
c0019aef:	50                   	push   eax
c0019af0:	ff 12                	call   DWORD PTR [edx]
c0019af2:	31 d2                	xor    edx,edx
c0019af4:	0f b6 c0             	movzx  eax,al
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	83 c4 0c             	add    esp,0xc
c0019afd:	c3                   	ret    
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	50                   	push   eax
c0019b02:	e8 f2 79 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019b07:	83 c4 10             	add    esp,0x10
c0019b0a:	85 c0                	test   eax,eax
c0019b0c:	75 dc                	jne    c0019aea <sysCallIsATTY(regs*)+0x28>
c0019b0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b18:	83 c4 0c             	add    esp,0xc
c0019b1b:	c3                   	ret    

c0019b1c <sysCallSeek(regs*)>:
c0019b1c:	53                   	push   ebx
c0019b1d:	83 ec 08             	sub    esp,0x8
c0019b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b27:	83 f8 02             	cmp    eax,0x2
c0019b2a:	76 4a                	jbe    c0019b76 <sysCallSeek(regs*)+0x5a>
c0019b2c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b31:	77 32                	ja     c0019b65 <sysCallSeek(regs*)+0x49>
c0019b33:	83 ec 0c             	sub    esp,0xc
c0019b36:	50                   	push   eax
c0019b37:	e8 bd 79 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019b3c:	83 c4 0c             	add    esp,0xc
c0019b3f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019b42:	31 db                	xor    ebx,ebx
c0019b44:	53                   	push   ebx
c0019b45:	51                   	push   ecx
c0019b46:	50                   	push   eax
c0019b47:	e8 44 91 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	85 c0                	test   eax,eax
c0019b51:	0f 95 c0             	setne  al
c0019b54:	31 d2                	xor    edx,edx
c0019b56:	0f b6 c0             	movzx  eax,al
c0019b59:	f7 d8                	neg    eax
c0019b5b:	83 d2 00             	adc    edx,0x0
c0019b5e:	83 c4 08             	add    esp,0x8
c0019b61:	f7 da                	neg    edx
c0019b63:	5b                   	pop    ebx
c0019b64:	c3                   	ret    
c0019b65:	83 ec 08             	sub    esp,0x8
c0019b68:	50                   	push   eax
c0019b69:	68 b8 88 02 c0       	push   0xc00288b8
c0019b6e:	e8 cc 8a ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b80:	83 c4 08             	add    esp,0x8
c0019b83:	5b                   	pop    ebx
c0019b84:	c3                   	ret    

c0019b85 <sysCallTell(regs*)>:
c0019b85:	53                   	push   ebx
c0019b86:	83 ec 08             	sub    esp,0x8
c0019b89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b90:	83 f8 02             	cmp    eax,0x2
c0019b93:	76 5e                	jbe    c0019bf3 <sysCallTell(regs*)+0x6e>
c0019b95:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b9a:	77 2d                	ja     c0019bc9 <sysCallTell(regs*)+0x44>
c0019b9c:	83 ec 0c             	sub    esp,0xc
c0019b9f:	50                   	push   eax
c0019ba0:	e8 54 79 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019ba5:	5a                   	pop    edx
c0019ba6:	59                   	pop    ecx
c0019ba7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019baa:	50                   	push   eax
c0019bab:	e8 36 91 ff ff       	call   c0012ce6 <File::tell(unsigned long long*)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	85 c0                	test   eax,eax
c0019bb5:	0f 95 c0             	setne  al
c0019bb8:	31 d2                	xor    edx,edx
c0019bba:	0f b6 c0             	movzx  eax,al
c0019bbd:	f7 d8                	neg    eax
c0019bbf:	83 d2 00             	adc    edx,0x0
c0019bc2:	83 c4 08             	add    esp,0x8
c0019bc5:	f7 da                	neg    edx
c0019bc7:	5b                   	pop    ebx
c0019bc8:	c3                   	ret    
c0019bc9:	83 ec 08             	sub    esp,0x8
c0019bcc:	50                   	push   eax
c0019bcd:	68 d2 88 02 c0       	push   0xc00288d2
c0019bd2:	e8 68 8a ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019bd7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019bda:	83 c4 10             	add    esp,0x10
c0019bdd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019be3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bea:	31 d2                	xor    edx,edx
c0019bec:	31 c0                	xor    eax,eax
c0019bee:	83 c4 08             	add    esp,0x8
c0019bf1:	5b                   	pop    ebx
c0019bf2:	c3                   	ret    
c0019bf3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019bf8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019bfd:	83 c4 08             	add    esp,0x8
c0019c00:	5b                   	pop    ebx
c0019c01:	c3                   	ret    

c0019c02 <sysCallSize(regs*)>:
c0019c02:	53                   	push   ebx
c0019c03:	83 ec 18             	sub    esp,0x18
c0019c06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c0a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019c0d:	83 f8 02             	cmp    eax,0x2
c0019c10:	76 64                	jbe    c0019c76 <sysCallSize(regs*)+0x74>
c0019c12:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019c17:	77 33                	ja     c0019c4c <sysCallSize(regs*)+0x4a>
c0019c19:	83 ec 0c             	sub    esp,0xc
c0019c1c:	50                   	push   eax
c0019c1d:	e8 d7 78 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019c22:	83 c4 0c             	add    esp,0xc
c0019c25:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019c29:	52                   	push   edx
c0019c2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019c2d:	50                   	push   eax
c0019c2e:	e8 4b 92 ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	85 c0                	test   eax,eax
c0019c38:	0f 95 c0             	setne  al
c0019c3b:	31 d2                	xor    edx,edx
c0019c3d:	0f b6 c0             	movzx  eax,al
c0019c40:	f7 d8                	neg    eax
c0019c42:	83 d2 00             	adc    edx,0x0
c0019c45:	83 c4 18             	add    esp,0x18
c0019c48:	f7 da                	neg    edx
c0019c4a:	5b                   	pop    ebx
c0019c4b:	c3                   	ret    
c0019c4c:	83 ec 08             	sub    esp,0x8
c0019c4f:	50                   	push   eax
c0019c50:	68 ec 88 02 c0       	push   0xc00288ec
c0019c55:	e8 e5 89 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019c5a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019c5d:	83 c4 10             	add    esp,0x10
c0019c60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c6d:	31 d2                	xor    edx,edx
c0019c6f:	31 c0                	xor    eax,eax
c0019c71:	83 c4 18             	add    esp,0x18
c0019c74:	5b                   	pop    ebx
c0019c75:	c3                   	ret    
c0019c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019c7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c80:	83 c4 18             	add    esp,0x18
c0019c83:	5b                   	pop    ebx
c0019c84:	c3                   	ret    

c0019c85 <sysCallSizeFromFilename(regs*)>:
c0019c85:	57                   	push   edi
c0019c86:	56                   	push   esi
c0019c87:	53                   	push   ebx
c0019c88:	83 ec 20             	sub    esp,0x20
c0019c8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c8f:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c0019c92:	83 fb 02             	cmp    ebx,0x2
c0019c95:	0f 86 99 00 00 00    	jbe    c0019d34 <sysCallSizeFromFilename(regs*)+0xaf>
c0019c9b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019ca1:	77 65                	ja     c0019d08 <sysCallSizeFromFilename(regs*)+0x83>
c0019ca3:	83 ec 0c             	sub    esp,0xc
c0019ca6:	68 14 01 00 00       	push   0x114
c0019cab:	e8 1c 58 ff ff       	call   c000f4cc <malloc>
c0019cb0:	83 c4 0c             	add    esp,0xc
c0019cb3:	89 c6                	mov    esi,eax
c0019cb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019cbd:	53                   	push   ebx
c0019cbe:	56                   	push   esi
c0019cbf:	e8 aa 8e ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c0019cc4:	83 c4 0c             	add    esp,0xc
c0019cc7:	8d 44 24 23          	lea    eax,[esp+0x23]
c0019ccb:	50                   	push   eax
c0019ccc:	ff 77 28             	push   DWORD PTR [edi+0x28]
c0019ccf:	56                   	push   esi
c0019cd0:	e8 a9 91 ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	85 f6                	test   esi,esi
c0019cda:	74 14                	je     c0019cf0 <sysCallSizeFromFilename(regs*)+0x6b>
c0019cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ce0:	8b 16                	mov    edx,DWORD PTR [esi]
c0019ce2:	83 ec 0c             	sub    esp,0xc
c0019ce5:	56                   	push   esi
c0019ce6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019ce9:	83 c4 10             	add    esp,0x10
c0019cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cf0:	85 c0                	test   eax,eax
c0019cf2:	0f 95 c0             	setne  al
c0019cf5:	31 d2                	xor    edx,edx
c0019cf7:	0f b6 c0             	movzx  eax,al
c0019cfa:	f7 d8                	neg    eax
c0019cfc:	83 d2 00             	adc    edx,0x0
c0019cff:	83 c4 20             	add    esp,0x20
c0019d02:	f7 da                	neg    edx
c0019d04:	5b                   	pop    ebx
c0019d05:	5e                   	pop    esi
c0019d06:	5f                   	pop    edi
c0019d07:	c3                   	ret    
c0019d08:	83 ec 08             	sub    esp,0x8
c0019d0b:	53                   	push   ebx
c0019d0c:	68 ec 88 02 c0       	push   0xc00288ec
c0019d11:	e8 29 89 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019d16:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0019d19:	83 c4 10             	add    esp,0x10
c0019d1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d29:	31 d2                	xor    edx,edx
c0019d2b:	83 c4 20             	add    esp,0x20
c0019d2e:	31 c0                	xor    eax,eax
c0019d30:	5b                   	pop    ebx
c0019d31:	5e                   	pop    esi
c0019d32:	5f                   	pop    edi
c0019d33:	c3                   	ret    
c0019d34:	83 c4 20             	add    esp,0x20
c0019d37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d3c:	5b                   	pop    ebx
c0019d3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d42:	5e                   	pop    esi
c0019d43:	5f                   	pop    edi
c0019d44:	c3                   	ret    

c0019d45 <sysCallClose(regs*)>:
c0019d45:	53                   	push   ebx
c0019d46:	83 ec 08             	sub    esp,0x8
c0019d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d50:	83 f8 02             	cmp    eax,0x2
c0019d53:	76 50                	jbe    c0019da5 <sysCallClose(regs*)+0x60>
c0019d55:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d5a:	74 58                	je     c0019db4 <sysCallClose(regs*)+0x6f>
c0019d5c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019d61:	74 60                	je     c0019dc3 <sysCallClose(regs*)+0x7e>
c0019d63:	77 2f                	ja     c0019d94 <sysCallClose(regs*)+0x4f>
c0019d65:	83 ec 0c             	sub    esp,0xc
c0019d68:	50                   	push   eax
c0019d69:	e8 8b 77 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019d6e:	89 c3                	mov    ebx,eax
c0019d70:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d73:	e8 b8 8e ff ff       	call   c0012c30 <File::close()>
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	85 db                	test   ebx,ebx
c0019d7d:	74 0c                	je     c0019d8b <sysCallClose(regs*)+0x46>
c0019d7f:	83 ec 0c             	sub    esp,0xc
c0019d82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d84:	53                   	push   ebx
c0019d85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d88:	83 c4 10             	add    esp,0x10
c0019d8b:	31 c0                	xor    eax,eax
c0019d8d:	31 d2                	xor    edx,edx
c0019d8f:	83 c4 08             	add    esp,0x8
c0019d92:	5b                   	pop    ebx
c0019d93:	c3                   	ret    
c0019d94:	83 ec 08             	sub    esp,0x8
c0019d97:	50                   	push   eax
c0019d98:	68 20 88 02 c0       	push   0xc0028820
c0019d9d:	e8 9d 88 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019da2:	83 c4 10             	add    esp,0x10
c0019da5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019daa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019daf:	83 c4 08             	add    esp,0x8
c0019db2:	5b                   	pop    ebx
c0019db3:	c3                   	ret    
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	68 07 89 02 c0       	push   0xc0028907
c0019dbc:	e8 7e 88 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019dc1:	eb c5                	jmp    c0019d88 <sysCallClose(regs*)+0x43>
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	68 15 89 02 c0       	push   0xc0028915
c0019dcb:	eb ef                	jmp    c0019dbc <sysCallClose(regs*)+0x77>

c0019dcd <sysCallOpenDir(regs*)>:
c0019dcd:	56                   	push   esi
c0019dce:	53                   	push   ebx
c0019dcf:	53                   	push   ebx
c0019dd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dd4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019dd7:	85 f6                	test   esi,esi
c0019dd9:	74 59                	je     c0019e34 <sysCallOpenDir(regs*)+0x67>
c0019ddb:	83 ec 0c             	sub    esp,0xc
c0019dde:	68 14 01 00 00       	push   0x114
c0019de3:	e8 e4 56 ff ff       	call   c000f4cc <malloc>
c0019de8:	83 c4 0c             	add    esp,0xc
c0019deb:	89 c6                	mov    esi,eax
c0019ded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019df2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019df5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019df8:	56                   	push   esi
c0019df9:	e8 46 92 ff ff       	call   c0013044 <Directory::Directory(char const*, Process*)>
c0019dfe:	83 c4 10             	add    esp,0x10
c0019e01:	85 f6                	test   esi,esi
c0019e03:	74 2f                	je     c0019e34 <sysCallOpenDir(regs*)+0x67>
c0019e05:	83 ec 0c             	sub    esp,0xc
c0019e08:	56                   	push   esi
c0019e09:	e8 9a 92 ff ff       	call   c00130a8 <Directory::open()>
c0019e0e:	83 c4 10             	add    esp,0x10
c0019e11:	85 c0                	test   eax,eax
c0019e13:	75 1f                	jne    c0019e34 <sysCallOpenDir(regs*)+0x67>
c0019e15:	83 ec 0c             	sub    esp,0xc
c0019e18:	56                   	push   esi
c0019e19:	e8 e6 73 ff ff       	call   c0011204 <UnixFile::getFileDescriptor()>
c0019e1e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019e21:	83 c4 10             	add    esp,0x10
c0019e24:	89 02                	mov    DWORD PTR [edx],eax
c0019e26:	c1 f8 1f             	sar    eax,0x1f
c0019e29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019e2c:	31 c0                	xor    eax,eax
c0019e2e:	59                   	pop    ecx
c0019e2f:	31 d2                	xor    edx,edx
c0019e31:	5b                   	pop    ebx
c0019e32:	5e                   	pop    esi
c0019e33:	c3                   	ret    
c0019e34:	59                   	pop    ecx
c0019e35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e3f:	5b                   	pop    ebx
c0019e40:	5e                   	pop    esi
c0019e41:	c3                   	ret    

c0019e42 <sysCallCloseDir(regs*)>:
c0019e42:	53                   	push   ebx
c0019e43:	83 ec 08             	sub    esp,0x8
c0019e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019e4d:	83 f8 02             	cmp    eax,0x2
c0019e50:	76 47                	jbe    c0019e99 <sysCallCloseDir(regs*)+0x57>
c0019e52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019e57:	77 2f                	ja     c0019e88 <sysCallCloseDir(regs*)+0x46>
c0019e59:	83 ec 0c             	sub    esp,0xc
c0019e5c:	50                   	push   eax
c0019e5d:	e8 97 76 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c0019e62:	89 c3                	mov    ebx,eax
c0019e64:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e67:	e8 98 92 ff ff       	call   c0013104 <Directory::close()>
c0019e6c:	83 c4 10             	add    esp,0x10
c0019e6f:	85 db                	test   ebx,ebx
c0019e71:	74 0c                	je     c0019e7f <sysCallCloseDir(regs*)+0x3d>
c0019e73:	83 ec 0c             	sub    esp,0xc
c0019e76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e78:	53                   	push   ebx
c0019e79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e7c:	83 c4 10             	add    esp,0x10
c0019e7f:	31 c0                	xor    eax,eax
c0019e81:	31 d2                	xor    edx,edx
c0019e83:	83 c4 08             	add    esp,0x8
c0019e86:	5b                   	pop    ebx
c0019e87:	c3                   	ret    
c0019e88:	83 ec 08             	sub    esp,0x8
c0019e8b:	50                   	push   eax
c0019e8c:	68 48 88 02 c0       	push   0xc0028848
c0019e91:	e8 a9 87 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0019e96:	83 c4 10             	add    esp,0x10
c0019e99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ea3:	83 c4 08             	add    esp,0x8
c0019ea6:	5b                   	pop    ebx
c0019ea7:	c3                   	ret    

c0019ea8 <sysCallMakeDir(regs*)>:
c0019ea8:	56                   	push   esi
c0019ea9:	53                   	push   ebx
c0019eaa:	83 ec 10             	sub    esp,0x10
c0019ead:	68 14 01 00 00       	push   0x114
c0019eb2:	e8 15 56 ff ff       	call   c000f4cc <malloc>
c0019eb7:	83 c4 0c             	add    esp,0xc
c0019eba:	89 c3                	mov    ebx,eax
c0019ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ec1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ec8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ecb:	53                   	push   ebx
c0019ecc:	e8 73 91 ff ff       	call   c0013044 <Directory::Directory(char const*, Process*)>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	85 db                	test   ebx,ebx
c0019ed6:	74 32                	je     c0019f0a <sysCallMakeDir(regs*)+0x62>
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	53                   	push   ebx
c0019edc:	e8 a7 93 ff ff       	call   c0013288 <Directory::create()>
c0019ee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ee4:	89 c6                	mov    esi,eax
c0019ee6:	e8 19 92 ff ff       	call   c0013104 <Directory::close()>
c0019eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	31 c0                	xor    eax,eax
c0019ef8:	59                   	pop    ecx
c0019ef9:	85 f6                	test   esi,esi
c0019efb:	5b                   	pop    ebx
c0019efc:	0f 95 c0             	setne  al
c0019eff:	5e                   	pop    esi
c0019f00:	31 d2                	xor    edx,edx
c0019f02:	f7 d8                	neg    eax
c0019f04:	83 d2 00             	adc    edx,0x0
c0019f07:	f7 da                	neg    edx
c0019f09:	c3                   	ret    
c0019f0a:	59                   	pop    ecx
c0019f0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f15:	5b                   	pop    ebx
c0019f16:	5e                   	pop    esi
c0019f17:	c3                   	ret    

c0019f18 <sysCallWait(regs*)>:
c0019f18:	83 ec 10             	sub    esp,0x10
c0019f1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f1f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019f22:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f25:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019f28:	e8 98 23 00 00       	call   c001c2c5 <waitTask(int, int*, int)>
c0019f2d:	83 c4 1c             	add    esp,0x1c
c0019f30:	99                   	cdq    
c0019f31:	c3                   	ret    

c0019f32 <sysCallNotImpl(regs*)>:
c0019f32:	83 ec 18             	sub    esp,0x18
c0019f35:	68 23 89 02 c0       	push   0xc0028923
c0019f3a:	e8 c4 ee ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0019f3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f49:	83 c4 1c             	add    esp,0x1c
c0019f4c:	c3                   	ret    

c0019f4d <sysPanic(regs*)>:
c0019f4d:	83 ec 18             	sub    esp,0x18
c0019f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f54:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f57:	e8 a7 ee ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0019f5c:	c7 04 24 3d 89 02 c0 	mov    DWORD PTR [esp],0xc002893d
c0019f63:	e8 9b ee ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0019f68:	b8 01 00 00 00       	mov    eax,0x1
c0019f6d:	31 d2                	xor    edx,edx
c0019f6f:	83 c4 1c             	add    esp,0x1c
c0019f72:	c3                   	ret    

c0019f73 <sysCallRmdir(regs*)>:
c0019f73:	56                   	push   esi
c0019f74:	53                   	push   ebx
c0019f75:	83 ec 20             	sub    esp,0x20
c0019f78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f7c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019f7f:	68 14 01 00 00       	push   0x114
c0019f84:	e8 43 55 ff ff       	call   c000f4cc <malloc>
c0019f89:	83 c4 0c             	add    esp,0xc
c0019f8c:	89 c3                	mov    ebx,eax
c0019f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f96:	56                   	push   esi
c0019f97:	53                   	push   ebx
c0019f98:	e8 d1 8b ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c0019f9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fa0:	e8 a5 8d ff ff       	call   c0012d4a <File::unlink()>
c0019fa5:	83 c4 10             	add    esp,0x10
c0019fa8:	85 db                	test   ebx,ebx
c0019faa:	74 14                	je     c0019fc0 <sysCallRmdir(regs*)+0x4d>
c0019fac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fb2:	83 ec 0c             	sub    esp,0xc
c0019fb5:	53                   	push   ebx
c0019fb6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fc0:	85 c0                	test   eax,eax
c0019fc2:	0f 95 c0             	setne  al
c0019fc5:	31 d2                	xor    edx,edx
c0019fc7:	0f b6 c0             	movzx  eax,al
c0019fca:	f7 d8                	neg    eax
c0019fcc:	83 d2 00             	adc    edx,0x0
c0019fcf:	83 c4 14             	add    esp,0x14
c0019fd2:	f7 da                	neg    edx
c0019fd4:	5b                   	pop    ebx
c0019fd5:	5e                   	pop    esi
c0019fd6:	c3                   	ret    

c0019fd7 <sysCallUnlink(regs*)>:
c0019fd7:	56                   	push   esi
c0019fd8:	53                   	push   ebx
c0019fd9:	83 ec 20             	sub    esp,0x20
c0019fdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019fe0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019fe3:	68 14 01 00 00       	push   0x114
c0019fe8:	e8 df 54 ff ff       	call   c000f4cc <malloc>
c0019fed:	83 c4 0c             	add    esp,0xc
c0019ff0:	89 c3                	mov    ebx,eax
c0019ff2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ff7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ffa:	56                   	push   esi
c0019ffb:	53                   	push   ebx
c0019ffc:	e8 6d 8b ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001a001:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a004:	e8 41 8d ff ff       	call   c0012d4a <File::unlink()>
c001a009:	83 c4 10             	add    esp,0x10
c001a00c:	85 db                	test   ebx,ebx
c001a00e:	74 14                	je     c001a024 <sysCallUnlink(regs*)+0x4d>
c001a010:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a014:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a016:	83 ec 0c             	sub    esp,0xc
c001a019:	53                   	push   ebx
c001a01a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a01d:	83 c4 10             	add    esp,0x10
c001a020:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a024:	85 c0                	test   eax,eax
c001a026:	0f 95 c0             	setne  al
c001a029:	31 d2                	xor    edx,edx
c001a02b:	0f b6 c0             	movzx  eax,al
c001a02e:	f7 d8                	neg    eax
c001a030:	83 d2 00             	adc    edx,0x0
c001a033:	83 c4 14             	add    esp,0x14
c001a036:	f7 da                	neg    edx
c001a038:	5b                   	pop    ebx
c001a039:	5e                   	pop    esi
c001a03a:	c3                   	ret    

c001a03b <sysCallGetArgv(regs*)>:
c001a03b:	83 ec 0c             	sub    esp,0xc
c001a03e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a042:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a045:	85 c0                	test   eax,eax
c001a047:	78 2b                	js     c001a074 <sysCallGetArgv(regs*)+0x39>
c001a049:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a04f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a052:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a058:	7d 1a                	jge    c001a074 <sysCallGetArgv(regs*)+0x39>
c001a05a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a061:	85 c0                	test   eax,eax
c001a063:	74 17                	je     c001a07c <sysCallGetArgv(regs*)+0x41>
c001a065:	83 ec 08             	sub    esp,0x8
c001a068:	50                   	push   eax
c001a069:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a06c:	e8 ab 66 fe ff       	call   c000071c <strcpy>
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	31 c0                	xor    eax,eax
c001a076:	31 d2                	xor    edx,edx
c001a078:	83 c4 0c             	add    esp,0xc
c001a07b:	c3                   	ret    
c001a07c:	b8 01 00 00 00       	mov    eax,0x1
c001a081:	31 d2                	xor    edx,edx
c001a083:	83 c4 0c             	add    esp,0xc
c001a086:	c3                   	ret    

c001a087 <sysCallTTYName(regs*)>:
c001a087:	56                   	push   esi
c001a088:	53                   	push   ebx
c001a089:	53                   	push   ebx
c001a08a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a08e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a091:	85 c0                	test   eax,eax
c001a093:	74 5f                	je     c001a0f4 <sysCallTTYName(regs*)+0x6d>
c001a095:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a098:	83 f8 02             	cmp    eax,0x2
c001a09b:	77 3e                	ja     c001a0db <sysCallTTYName(regs*)+0x54>
c001a09d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0a5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a0ab:	85 db                	test   ebx,ebx
c001a0ad:	74 45                	je     c001a0f4 <sysCallTTYName(regs*)+0x6d>
c001a0af:	83 ec 0c             	sub    esp,0xc
c001a0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b4:	53                   	push   ebx
c001a0b5:	ff 10                	call   DWORD PTR [eax]
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	84 c0                	test   al,al
c001a0bc:	74 41                	je     c001a0ff <sysCallTTYName(regs*)+0x78>
c001a0be:	83 ec 08             	sub    esp,0x8
c001a0c1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a0c7:	53                   	push   ebx
c001a0c8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a0cb:	e8 4c 66 fe ff       	call   c000071c <strcpy>
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	31 c0                	xor    eax,eax
c001a0d5:	59                   	pop    ecx
c001a0d6:	31 d2                	xor    edx,edx
c001a0d8:	5b                   	pop    ebx
c001a0d9:	5e                   	pop    esi
c001a0da:	c3                   	ret    
c001a0db:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a0e0:	74 bb                	je     c001a09d <sysCallTTYName(regs*)+0x16>
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	50                   	push   eax
c001a0e6:	e8 0e 74 ff ff       	call   c00114f9 <getFromFileDescriptor(int)>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	89 c3                	mov    ebx,eax
c001a0f0:	85 db                	test   ebx,ebx
c001a0f2:	75 bb                	jne    c001a0af <sysCallTTYName(regs*)+0x28>
c001a0f4:	59                   	pop    ecx
c001a0f5:	b8 01 00 00 00       	mov    eax,0x1
c001a0fa:	31 d2                	xor    edx,edx
c001a0fc:	5b                   	pop    ebx
c001a0fd:	5e                   	pop    esi
c001a0fe:	c3                   	ret    
c001a0ff:	59                   	pop    ecx
c001a100:	b8 02 00 00 00       	mov    eax,0x2
c001a105:	31 d2                	xor    edx,edx
c001a107:	5b                   	pop    ebx
c001a108:	5e                   	pop    esi
c001a109:	c3                   	ret    

c001a10a <sysCallGetEnv(regs*)>:
c001a10a:	83 ec 0c             	sub    esp,0xc
c001a10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a111:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a114:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a117:	85 c9                	test   ecx,ecx
c001a119:	75 22                	jne    c001a13d <sysCallGetEnv(regs*)+0x33>
c001a11b:	85 d2                	test   edx,edx
c001a11d:	74 08                	je     c001a127 <sysCallGetEnv(regs*)+0x1d>
c001a11f:	31 c0                	xor    eax,eax
c001a121:	31 d2                	xor    edx,edx
c001a123:	83 c4 0c             	add    esp,0xc
c001a126:	c3                   	ret    
c001a127:	83 ec 0c             	sub    esp,0xc
c001a12a:	68 6c 88 02 c0       	push   0xc002886c
c001a12f:	e8 66 65 fe ff       	call   c000069a <strlen>
c001a134:	83 c4 10             	add    esp,0x10
c001a137:	31 d2                	xor    edx,edx
c001a139:	83 c4 0c             	add    esp,0xc
c001a13c:	c3                   	ret    
c001a13d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a140:	85 d2                	test   edx,edx
c001a142:	74 05                	je     c001a149 <sysCallGetEnv(regs*)+0x3f>
c001a144:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a147:	eb d6                	jmp    c001a11f <sysCallGetEnv(regs*)+0x15>
c001a149:	83 ec 08             	sub    esp,0x8
c001a14c:	68 6c 88 02 c0       	push   0xc002886c
c001a151:	50                   	push   eax
c001a152:	e8 c5 65 fe ff       	call   c000071c <strcpy>
c001a157:	83 c4 10             	add    esp,0x10
c001a15a:	eb c3                	jmp    c001a11f <sysCallGetEnv(regs*)+0x15>

c001a15c <sysCallUSleep(regs*)>:
c001a15c:	83 ec 14             	sub    esp,0x14
c001a15f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a164:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a168:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a16f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a172:	01 ca                	add    edx,ecx
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	e8 e3 21 00 00       	call   c001c35e <nanoSleep(unsigned long long)>
c001a17b:	31 c0                	xor    eax,eax
c001a17d:	31 d2                	xor    edx,edx
c001a17f:	83 c4 1c             	add    esp,0x1c
c001a182:	c3                   	ret    

c001a183 <sysCallSpawn(regs*)>:
c001a183:	56                   	push   esi
c001a184:	53                   	push   ebx
c001a185:	53                   	push   ebx
c001a186:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a18a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a18d:	85 f6                	test   esi,esi
c001a18f:	75 08                	jne    c001a199 <sysCallSpawn(regs*)+0x16>
c001a191:	59                   	pop    ecx
c001a192:	31 c0                	xor    eax,eax
c001a194:	31 d2                	xor    edx,edx
c001a196:	5b                   	pop    ebx
c001a197:	5e                   	pop    esi
c001a198:	c3                   	ret    
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	68 3b 07 00 00       	push   0x73b
c001a1a1:	e8 26 53 ff ff       	call   c000f4cc <malloc>
c001a1a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a1a9:	89 c6                	mov    esi,eax
c001a1ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a1b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1b6:	56                   	push   esi
c001a1b7:	e8 da 18 00 00       	call   c001ba96 <Process::Process(char const*, Process*, char**)>
c001a1bc:	83 c4 20             	add    esp,0x20
c001a1bf:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a1c6:	75 c9                	jne    c001a191 <sysCallSpawn(regs*)+0xe>
c001a1c8:	83 ec 0c             	sub    esp,0xc
c001a1cb:	56                   	push   esi
c001a1cc:	e8 53 1e 00 00       	call   c001c024 <Process::createUserThread()>
c001a1d1:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1d3:	83 c4 10             	add    esp,0x10
c001a1d6:	99                   	cdq    
c001a1d7:	59                   	pop    ecx
c001a1d8:	5b                   	pop    ebx
c001a1d9:	5e                   	pop    esi
c001a1da:	c3                   	ret    

c001a1db <sysAppSettings(regs*)>:
c001a1db:	53                   	push   ebx
c001a1dc:	83 ec 08             	sub    esp,0x8
c001a1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1e3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a1e6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a1ec:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a1f1:	66 3d c0 09          	cmp    ax,0x9c0
c001a1f5:	75 2f                	jne    c001a226 <sysAppSettings(regs*)+0x4b>
c001a1f7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a1fd:	83 e0 1f             	and    eax,0x1f
c001a200:	3c 01                	cmp    al,0x1
c001a202:	74 2e                	je     c001a232 <sysAppSettings(regs*)+0x57>
c001a204:	3c 07                	cmp    al,0x7
c001a206:	0f 84 bd 00 00 00    	je     c001a2c9 <sysAppSettings(regs*)+0xee>
c001a20c:	84 c0                	test   al,al
c001a20e:	0f 84 dc 00 00 00    	je     c001a2f0 <sysAppSettings(regs*)+0x115>
c001a214:	3c 08                	cmp    al,0x8
c001a216:	74 6d                	je     c001a285 <sysAppSettings(regs*)+0xaa>
c001a218:	0f b6 c0             	movzx  eax,al
c001a21b:	83 c4 08             	add    esp,0x8
c001a21e:	05 e8 03 00 00       	add    eax,0x3e8
c001a223:	5b                   	pop    ebx
c001a224:	99                   	cdq    
c001a225:	c3                   	ret    
c001a226:	b8 01 00 00 00       	mov    eax,0x1
c001a22b:	31 d2                	xor    edx,edx
c001a22d:	83 c4 08             	add    esp,0x8
c001a230:	5b                   	pop    ebx
c001a231:	c3                   	ret    
c001a232:	51                   	push   ecx
c001a233:	68 00 01 00 00       	push   0x100
c001a238:	6a 00                	push   0x0
c001a23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a23f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a242:	83 c0 0c             	add    eax,0xc
c001a245:	50                   	push   eax
c001a246:	e8 32 64 fe ff       	call   c000067d <memset>
c001a24b:	83 c4 0c             	add    esp,0xc
c001a24e:	68 ff 00 00 00       	push   0xff
c001a253:	53                   	push   ebx
c001a254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a25c:	83 c0 0c             	add    eax,0xc
c001a25f:	50                   	push   eax
c001a260:	e8 e2 63 fe ff       	call   c0000647 <memcpy>
c001a265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a26a:	5b                   	pop    ebx
c001a26b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a26e:	5a                   	pop    edx
c001a26f:	8d 50 0c             	lea    edx,[eax+0xc]
c001a272:	52                   	push   edx
c001a273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a279:	e8 f6 63 ff ff       	call   c0010674 <VgaText::setTitle(char*)>
c001a27e:	83 c4 10             	add    esp,0x10
c001a281:	31 c0                	xor    eax,eax
c001a283:	eb a6                	jmp    c001a22b <sysAppSettings(regs*)+0x50>
c001a285:	83 ec 08             	sub    esp,0x8
c001a288:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a28e:	83 e0 0f             	and    eax,0xf
c001a291:	50                   	push   eax
c001a292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a297:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a29a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a0:	e8 bf 63 ff ff       	call   c0010664 <VgaText::setTitleColour(VgaColour)>
c001a2a5:	58                   	pop    eax
c001a2a6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a2ac:	5a                   	pop    edx
c001a2ad:	c1 e8 04             	shr    eax,0x4
c001a2b0:	83 e0 0f             	and    eax,0xf
c001a2b3:	50                   	push   eax
c001a2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c2:	e8 8d 63 ff ff       	call   c0010654 <VgaText::setTitleTextColour(VgaColour)>
c001a2c7:	eb b5                	jmp    c001a27e <sysAppSettings(regs*)+0xa3>
c001a2c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2d1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a2d7:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a2dd:	c0 e8 06             	shr    al,0x6
c001a2e0:	83 e0 01             	and    eax,0x1
c001a2e3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a2e9:	31 c0                	xor    eax,eax
c001a2eb:	e9 3b ff ff ff       	jmp    c001a22b <sysAppSettings(regs*)+0x50>
c001a2f0:	b8 02 00 00 00       	mov    eax,0x2
c001a2f5:	e9 31 ff ff ff       	jmp    c001a22b <sysAppSettings(regs*)+0x50>

c001a2fa <sysSetFatAttrib(regs*)>:
c001a2fa:	57                   	push   edi
c001a2fb:	56                   	push   esi
c001a2fc:	53                   	push   ebx
c001a2fd:	83 ec 1c             	sub    esp,0x1c
c001a300:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a304:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a307:	68 14 01 00 00       	push   0x114
c001a30c:	e8 bb 51 ff ff       	call   c000f4cc <malloc>
c001a311:	83 c4 0c             	add    esp,0xc
c001a314:	89 c3                	mov    ebx,eax
c001a316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a31b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a31e:	57                   	push   edi
c001a31f:	53                   	push   ebx
c001a320:	e8 49 88 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001a325:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a328:	83 c4 0c             	add    esp,0xc
c001a32b:	0f b6 d4             	movzx  edx,ah
c001a32e:	0f b6 c0             	movzx  eax,al
c001a331:	52                   	push   edx
c001a332:	50                   	push   eax
c001a333:	53                   	push   ebx
c001a334:	e8 ab 8a ff ff       	call   c0012de4 <File::chfatattr(unsigned char, unsigned char)>
c001a339:	83 c4 10             	add    esp,0x10
c001a33c:	85 db                	test   ebx,ebx
c001a33e:	74 14                	je     c001a354 <sysSetFatAttrib(regs*)+0x5a>
c001a340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a344:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a346:	83 ec 0c             	sub    esp,0xc
c001a349:	53                   	push   ebx
c001a34a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a34d:	83 c4 10             	add    esp,0x10
c001a350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a354:	85 c0                	test   eax,eax
c001a356:	0f 95 c0             	setne  al
c001a359:	31 d2                	xor    edx,edx
c001a35b:	0f b6 c0             	movzx  eax,al
c001a35e:	f7 d8                	neg    eax
c001a360:	83 d2 00             	adc    edx,0x0
c001a363:	83 c4 10             	add    esp,0x10
c001a366:	f7 da                	neg    edx
c001a368:	5b                   	pop    ebx
c001a369:	5e                   	pop    esi
c001a36a:	5f                   	pop    edi
c001a36b:	c3                   	ret    

c001a36c <sysPipe(regs*)>:
c001a36c:	57                   	push   edi
c001a36d:	56                   	push   esi
c001a36e:	53                   	push   ebx
c001a36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a379:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a37c:	6a 20                	push   0x20
c001a37e:	e8 49 51 ff ff       	call   c000f4cc <malloc>
c001a383:	89 c3                	mov    ebx,eax
c001a385:	58                   	pop    eax
c001a386:	5a                   	pop    edx
c001a387:	68 00 50 00 00       	push   0x5000
c001a38c:	53                   	push   ebx
c001a38d:	e8 20 5c ff ff       	call   c000ffb2 <Pipe::Pipe(int)>
c001a392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a395:	e8 6a 6e ff ff       	call   c0011204 <UnixFile::getFileDescriptor()>
c001a39a:	89 07                	mov    DWORD PTR [edi],eax
c001a39c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a39f:	e8 60 6e ff ff       	call   c0011204 <UnixFile::getFileDescriptor()>
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	89 06                	mov    DWORD PTR [esi],eax
c001a3a9:	31 d2                	xor    edx,edx
c001a3ab:	5b                   	pop    ebx
c001a3ac:	31 c0                	xor    eax,eax
c001a3ae:	5e                   	pop    esi
c001a3af:	5f                   	pop    edi
c001a3b0:	c3                   	ret    

c001a3b1 <sysGetUnixTime(regs*)>:
c001a3b1:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001a3b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a3bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3c0:	e9 85 91 ff ff       	jmp    c001354a <Clock::timeInSecondsLocal()>

c001a3c5 <string_ends_with(char const*, char const*)>:
c001a3c5:	57                   	push   edi
c001a3c6:	56                   	push   esi
c001a3c7:	53                   	push   ebx
c001a3c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3cc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3d0:	83 ec 0c             	sub    esp,0xc
c001a3d3:	53                   	push   ebx
c001a3d4:	e8 c1 62 fe ff       	call   c000069a <strlen>
c001a3d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a3dc:	89 c6                	mov    esi,eax
c001a3de:	e8 b7 62 fe ff       	call   c000069a <strlen>
c001a3e3:	83 c4 10             	add    esp,0x10
c001a3e6:	39 c6                	cmp    esi,eax
c001a3e8:	7d 06                	jge    c001a3f0 <string_ends_with(char const*, char const*)+0x2b>
c001a3ea:	5b                   	pop    ebx
c001a3eb:	31 c0                	xor    eax,eax
c001a3ed:	5e                   	pop    esi
c001a3ee:	5f                   	pop    edi
c001a3ef:	c3                   	ret    
c001a3f0:	83 ec 08             	sub    esp,0x8
c001a3f3:	29 c6                	sub    esi,eax
c001a3f5:	57                   	push   edi
c001a3f6:	01 f3                	add    ebx,esi
c001a3f8:	53                   	push   ebx
c001a3f9:	e8 6f 63 fe ff       	call   c000076d <strcmp>
c001a3fe:	83 c4 10             	add    esp,0x10
c001a401:	85 c0                	test   eax,eax
c001a403:	5b                   	pop    ebx
c001a404:	0f 94 c0             	sete   al
c001a407:	5e                   	pop    esi
c001a408:	0f b6 c0             	movzx  eax,al
c001a40b:	5f                   	pop    edi
c001a40c:	c3                   	ret    

c001a40d <sysCallOpen(regs*)>:
c001a40d:	56                   	push   esi
c001a40e:	53                   	push   ebx
c001a40f:	81 ec 04 01 00 00    	sub    esp,0x104
c001a415:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a41c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a41f:	85 c9                	test   ecx,ecx
c001a421:	0f 84 b3 00 00 00    	je     c001a4da <sysCallOpen(regs*)+0xcd>
c001a427:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a42a:	85 c0                	test   eax,eax
c001a42c:	0f 84 a8 00 00 00    	je     c001a4da <sysCallOpen(regs*)+0xcd>
c001a432:	52                   	push   edx
c001a433:	68 4c 89 02 c0       	push   0xc002894c
c001a438:	50                   	push   eax
c001a439:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a43d:	56                   	push   esi
c001a43e:	e8 81 85 ff ff       	call   c00129c4 <standardiseFiles(char*, char const*, char const*)>
c001a443:	89 34 24             	mov    DWORD PTR [esp],esi
c001a446:	e8 4f 62 fe ff       	call   c000069a <strlen>
c001a44b:	83 c4 10             	add    esp,0x10
c001a44e:	48                   	dec    eax
c001a44f:	74 1d                	je     c001a46e <sysCallOpen(regs*)+0x61>
c001a451:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a454:	eb 0f                	jmp    c001a465 <sysCallOpen(regs*)+0x58>
c001a456:	80 fa 3a             	cmp    dl,0x3a
c001a459:	74 0f                	je     c001a46a <sysCallOpen(regs*)+0x5d>
c001a45b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a45f:	48                   	dec    eax
c001a460:	74 0c                	je     c001a46e <sysCallOpen(regs*)+0x61>
c001a462:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a465:	80 fa 2e             	cmp    dl,0x2e
c001a468:	75 ec                	jne    c001a456 <sysCallOpen(regs*)+0x49>
c001a46a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a46e:	83 ec 08             	sub    esp,0x8
c001a471:	68 50 89 02 c0       	push   0xc0028950
c001a476:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a479:	e8 47 ff ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	85 c0                	test   eax,eax
c001a483:	75 17                	jne    c001a49c <sysCallOpen(regs*)+0x8f>
c001a485:	83 ec 08             	sub    esp,0x8
c001a488:	68 71 89 02 c0       	push   0xc0028971
c001a48d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a490:	e8 30 ff ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	85 c0                	test   eax,eax
c001a49a:	74 51                	je     c001a4ed <sysCallOpen(regs*)+0xe0>
c001a49c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a49f:	83 ec 08             	sub    esp,0x8
c001a4a2:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a4a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a4af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a4b2:	ff 30                	push   DWORD PTR [eax]
c001a4b4:	68 55 89 02 c0       	push   0xc0028955
c001a4b9:	e8 81 81 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001a4be:	c7 04 24 64 89 02 c0 	mov    DWORD PTR [esp],0xc0028964
c001a4c5:	e8 75 81 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001a4ca:	83 c4 10             	add    esp,0x10
c001a4cd:	81 c4 04 01 00 00    	add    esp,0x104
c001a4d3:	31 c0                	xor    eax,eax
c001a4d5:	31 d2                	xor    edx,edx
c001a4d7:	5b                   	pop    ebx
c001a4d8:	5e                   	pop    esi
c001a4d9:	c3                   	ret    
c001a4da:	81 c4 04 01 00 00    	add    esp,0x104
c001a4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a4e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a4ea:	5b                   	pop    ebx
c001a4eb:	5e                   	pop    esi
c001a4ec:	c3                   	ret    
c001a4ed:	83 ec 08             	sub    esp,0x8
c001a4f0:	68 51 89 02 c0       	push   0xc0028951
c001a4f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a4f8:	e8 70 62 fe ff       	call   c000076d <strcmp>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	85 c0                	test   eax,eax
c001a502:	74 98                	je     c001a49c <sysCallOpen(regs*)+0x8f>
c001a504:	83 ec 08             	sub    esp,0x8
c001a507:	68 50 89 02 c0       	push   0xc0028950
c001a50c:	56                   	push   esi
c001a50d:	e8 b3 fe ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a512:	83 c4 10             	add    esp,0x10
c001a515:	85 c0                	test   eax,eax
c001a517:	75 83                	jne    c001a49c <sysCallOpen(regs*)+0x8f>
c001a519:	83 ec 08             	sub    esp,0x8
c001a51c:	68 76 89 02 c0       	push   0xc0028976
c001a521:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a524:	e8 9c fe ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	85 c0                	test   eax,eax
c001a52e:	0f 85 d9 00 00 00    	jne    c001a60d <sysCallOpen(regs*)+0x200>
c001a534:	83 ec 08             	sub    esp,0x8
c001a537:	68 7b 89 02 c0       	push   0xc002897b
c001a53c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a53f:	e8 81 fe ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	85 c0                	test   eax,eax
c001a549:	0f 85 be 00 00 00    	jne    c001a60d <sysCallOpen(regs*)+0x200>
c001a54f:	83 ec 08             	sub    esp,0x8
c001a552:	68 77 89 02 c0       	push   0xc0028977
c001a557:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a55a:	e8 0e 62 fe ff       	call   c000076d <strcmp>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	85 c0                	test   eax,eax
c001a564:	0f 84 a3 00 00 00    	je     c001a60d <sysCallOpen(regs*)+0x200>
c001a56a:	83 ec 08             	sub    esp,0x8
c001a56d:	68 76 89 02 c0       	push   0xc0028976
c001a572:	56                   	push   esi
c001a573:	e8 4d fe ff ff       	call   c001a3c5 <string_ends_with(char const*, char const*)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	85 c0                	test   eax,eax
c001a57d:	0f 85 8a 00 00 00    	jne    c001a60d <sysCallOpen(regs*)+0x200>
c001a583:	83 ec 0c             	sub    esp,0xc
c001a586:	68 14 01 00 00       	push   0x114
c001a58b:	e8 3c 4f ff ff       	call   c000f4cc <malloc>
c001a590:	83 c4 0c             	add    esp,0xc
c001a593:	89 c6                	mov    esi,eax
c001a595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a59d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5a0:	56                   	push   esi
c001a5a1:	e8 c8 85 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001a5a6:	83 c4 10             	add    esp,0x10
c001a5a9:	85 f6                	test   esi,esi
c001a5ab:	0f 84 29 ff ff ff    	je     c001a4da <sysCallOpen(regs*)+0xcd>
c001a5b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a5b4:	0f b6 c2             	movzx  eax,dl
c001a5b7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a5ba:	89 d0                	mov    eax,edx
c001a5bc:	83 e0 01             	and    eax,0x1
c001a5bf:	f6 c2 02             	test   dl,0x2
c001a5c2:	74 03                	je     c001a5c7 <sysCallOpen(regs*)+0x1ba>
c001a5c4:	83 c8 02             	or     eax,0x2
c001a5c7:	f6 c2 04             	test   dl,0x4
c001a5ca:	74 03                	je     c001a5cf <sysCallOpen(regs*)+0x1c2>
c001a5cc:	83 c8 04             	or     eax,0x4
c001a5cf:	f6 c2 08             	test   dl,0x8
c001a5d2:	74 03                	je     c001a5d7 <sysCallOpen(regs*)+0x1ca>
c001a5d4:	83 c8 0a             	or     eax,0xa
c001a5d7:	83 e2 10             	and    edx,0x10
c001a5da:	74 03                	je     c001a5df <sysCallOpen(regs*)+0x1d2>
c001a5dc:	83 c8 12             	or     eax,0x12
c001a5df:	83 ec 08             	sub    esp,0x8
c001a5e2:	50                   	push   eax
c001a5e3:	56                   	push   esi
c001a5e4:	e8 e9 85 ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001a5e9:	83 c4 10             	add    esp,0x10
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	0f 85 e6 fe ff ff    	jne    c001a4da <sysCallOpen(regs*)+0xcd>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	56                   	push   esi
c001a5f8:	e8 07 6c ff ff       	call   c0011204 <UnixFile::getFileDescriptor()>
c001a5fd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a600:	89 02                	mov    DWORD PTR [edx],eax
c001a602:	c1 f8 1f             	sar    eax,0x1f
c001a605:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a608:	e9 bd fe ff ff       	jmp    c001a4ca <sysCallOpen(regs*)+0xbd>
c001a60d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a610:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a616:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a61d:	e9 ab fe ff ff       	jmp    c001a4cd <sysCallOpen(regs*)+0xc0>

c001a622 <setupSystemCalls()>:
c001a622:	c7 05 c0 b4 02 c0 0d 98 01 c0 	mov    DWORD PTR ds:0xc002b4c0,0xc001980d
c001a62c:	c7 05 c4 b4 02 c0 28 96 01 c0 	mov    DWORD PTR ds:0xc002b4c4,0xc0019628
c001a636:	c7 05 c8 b4 02 c0 50 97 01 c0 	mov    DWORD PTR ds:0xc002b4c8,0xc0019750
c001a640:	c7 05 cc b4 02 c0 a5 97 01 c0 	mov    DWORD PTR ds:0xc002b4cc,0xc00197a5
c001a64a:	c7 05 d0 b4 02 c0 e8 96 01 c0 	mov    DWORD PTR ds:0xc002b4d0,0xc00196e8
c001a654:	c7 05 d4 b4 02 c0 27 98 01 c0 	mov    DWORD PTR ds:0xc002b4d4,0xc0019827
c001a65e:	c7 05 d8 b4 02 c0 b6 99 01 c0 	mov    DWORD PTR ds:0xc002b4d8,0xc00199b6
c001a668:	c7 05 dc b4 02 c0 d5 99 01 c0 	mov    DWORD PTR ds:0xc002b4dc,0xc00199d5
c001a672:	c7 05 e4 b4 02 c0 45 9d 01 c0 	mov    DWORD PTR ds:0xc002b4e4,0xc0019d45
c001a67c:	c7 05 e0 b4 02 c0 0d a4 01 c0 	mov    DWORD PTR ds:0xc002b4e0,0xc001a40d
c001a686:	c7 05 e8 b4 02 c0 cd 9d 01 c0 	mov    DWORD PTR ds:0xc002b4e8,0xc0019dcd
c001a690:	c7 05 ec b4 02 c0 34 9a 01 c0 	mov    DWORD PTR ds:0xc002b4ec,0xc0019a34
c001a69a:	c7 05 f0 b4 02 c0 33 98 01 c0 	mov    DWORD PTR ds:0xc002b4f0,0xc0019833
c001a6a4:	c7 05 f4 b4 02 c0 38 98 01 c0 	mov    DWORD PTR ds:0xc002b4f4,0xc0019838
c001a6ae:	c7 05 f8 b4 02 c0 a8 9e 01 c0 	mov    DWORD PTR ds:0xc002b4f8,0xc0019ea8
c001a6b8:	c7 05 fc b4 02 c0 42 9e 01 c0 	mov    DWORD PTR ds:0xc002b4fc,0xc0019e42
c001a6c2:	c7 05 00 b5 02 c0 1c 9b 01 c0 	mov    DWORD PTR ds:0xc002b500,0xc0019b1c
c001a6cc:	c7 05 04 b5 02 c0 85 9b 01 c0 	mov    DWORD PTR ds:0xc002b504,0xc0019b85
c001a6d6:	c7 05 08 b5 02 c0 02 9c 01 c0 	mov    DWORD PTR ds:0xc002b508,0xc0019c02
c001a6e0:	c7 05 0c b5 02 c0 3d 98 01 c0 	mov    DWORD PTR ds:0xc002b50c,0xc001983d
c001a6ea:	c7 05 10 b5 02 c0 18 9f 01 c0 	mov    DWORD PTR ds:0xc002b510,0xc0019f18
c001a6f4:	c7 05 14 b5 02 c0 32 9f 01 c0 	mov    DWORD PTR ds:0xc002b514,0xc0019f32
c001a6fe:	c7 05 18 b5 02 c0 32 9f 01 c0 	mov    DWORD PTR ds:0xc002b518,0xc0019f32
c001a708:	c7 05 1c b5 02 c0 73 9f 01 c0 	mov    DWORD PTR ds:0xc002b51c,0xc0019f73
c001a712:	c7 05 20 b5 02 c0 d7 9f 01 c0 	mov    DWORD PTR ds:0xc002b520,0xc0019fd7
c001a71c:	c7 05 24 b5 02 c0 47 98 01 c0 	mov    DWORD PTR ds:0xc002b524,0xc0019847
c001a726:	c7 05 28 b5 02 c0 3b a0 01 c0 	mov    DWORD PTR ds:0xc002b528,0xc001a03b
c001a730:	c7 05 2c b5 02 c0 f1 99 01 c0 	mov    DWORD PTR ds:0xc002b52c,0xc00199f1
c001a73a:	c7 05 30 b5 02 c0 87 a0 01 c0 	mov    DWORD PTR ds:0xc002b530,0xc001a087
c001a744:	c7 05 34 b5 02 c0 c2 9a 01 c0 	mov    DWORD PTR ds:0xc002b534,0xc0019ac2
c001a74e:	c7 05 38 b5 02 c0 5c a1 01 c0 	mov    DWORD PTR ds:0xc002b538,0xc001a15c
c001a758:	c7 05 3c b5 02 c0 85 9c 01 c0 	mov    DWORD PTR ds:0xc002b53c,0xc0019c85
c001a762:	c7 05 40 b5 02 c0 83 a1 01 c0 	mov    DWORD PTR ds:0xc002b540,0xc001a183
c001a76c:	c7 05 44 b5 02 c0 0a a1 01 c0 	mov    DWORD PTR ds:0xc002b544,0xc001a10a
c001a776:	c7 05 48 b5 02 c0 db a1 01 c0 	mov    DWORD PTR ds:0xc002b548,0xc001a1db
c001a780:	c7 05 4c b5 02 c0 57 98 01 c0 	mov    DWORD PTR ds:0xc002b54c,0xc0019857
c001a78a:	c7 05 50 b5 02 c0 c1 98 01 c0 	mov    DWORD PTR ds:0xc002b550,0xc00198c1
c001a794:	c7 05 54 b5 02 c0 07 99 01 c0 	mov    DWORD PTR ds:0xc002b554,0xc0019907
c001a79e:	c7 05 58 b5 02 c0 fa a2 01 c0 	mov    DWORD PTR ds:0xc002b558,0xc001a2fa
c001a7a8:	c7 05 5c b5 02 c0 4d 9f 01 c0 	mov    DWORD PTR ds:0xc002b55c,0xc0019f4d
c001a7b2:	c7 05 60 b5 02 c0 58 99 01 c0 	mov    DWORD PTR ds:0xc002b560,0xc0019958
c001a7bc:	c7 05 64 b5 02 c0 6c a3 01 c0 	mov    DWORD PTR ds:0xc002b564,0xc001a36c
c001a7c6:	c7 05 68 b5 02 c0 b1 a3 01 c0 	mov    DWORD PTR ds:0xc002b568,0xc001a3b1
c001a7d0:	c7 05 6c b5 02 c0 40 96 01 c0 	mov    DWORD PTR ds:0xc002b56c,0xc0019640
c001a7da:	c3                   	ret    

c001a7db <systemCall(regs*, void*)>:
c001a7db:	53                   	push   ebx
c001a7dc:	83 ec 08             	sub    esp,0x8
c001a7df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a7e6:	83 f8 7f             	cmp    eax,0x7f
c001a7e9:	77 16                	ja     c001a801 <systemCall(regs*, void*)+0x26>
c001a7eb:	8b 14 85 c0 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4b40]
c001a7f2:	85 d2                	test   edx,edx
c001a7f4:	74 0b                	je     c001a801 <systemCall(regs*, void*)+0x26>
c001a7f6:	83 ec 0c             	sub    esp,0xc
c001a7f9:	53                   	push   ebx
c001a7fa:	ff d2                	call   edx
c001a7fc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a7ff:	eb 0d                	jmp    c001a80e <systemCall(regs*, void*)+0x33>
c001a801:	52                   	push   edx
c001a802:	52                   	push   edx
c001a803:	50                   	push   eax
c001a804:	68 80 89 02 c0       	push   0xc0028980
c001a809:	e8 31 7e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001a80e:	83 c4 10             	add    esp,0x10
c001a811:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a816:	31 d2                	xor    edx,edx
c001a818:	83 c4 08             	add    esp,0x8
c001a81b:	5b                   	pop    ebx
c001a81c:	c3                   	ret    

c001a81d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a81d:	55                   	push   ebp
c001a81e:	89 e5                	mov    ebp,esp
c001a820:	57                   	push   edi
c001a821:	56                   	push   esi
c001a822:	53                   	push   ebx
c001a823:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a829:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a82c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a82f:	85 c0                	test   eax,eax
c001a831:	0f 95 c1             	setne  cl
c001a834:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a838:	0f 94 c2             	sete   dl
c001a83b:	84 d1                	test   cl,dl
c001a83d:	74 26                	je     c001a865 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a83f:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a846:	74 1d                	je     c001a865 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a848:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a84b:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a851:	89 d6                	mov    esi,edx
c001a853:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a859:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a85f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a862:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a865:	83 ec 0c             	sub    esp,0xc
c001a868:	05 ff 0f 00 00       	add    eax,0xfff
c001a86d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a870:	6a 01                	push   0x1
c001a872:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a878:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a87e:	e8 cc 6d ff ff       	call   c001164f <Virt::allocateKernelVirtualPages(int)>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	89 c6                	mov    esi,eax
c001a888:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a88e:	0f 86 21 01 00 00    	jbe    c001a9b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a894:	c1 eb 0c             	shr    ebx,0xc
c001a897:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a8a1:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a8a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a8aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a8ad:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a8b3:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a8b6:	29 d8                	sub    eax,ebx
c001a8b8:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a8be:	0f 83 f4 00 00 00    	jae    c001a9b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a8cd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a8d0:	3d 00 10 00 00       	cmp    eax,0x1000
c001a8d5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a8d7:	52                   	push   edx
c001a8d8:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a8de:	52                   	push   edx
c001a8df:	76 05                	jbe    c001a8e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a8e1:	b8 00 10 00 00       	mov    eax,0x1000
c001a8e6:	31 d2                	xor    edx,edx
c001a8e8:	52                   	push   edx
c001a8e9:	50                   	push   eax
c001a8ea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a8ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a8f0:	83 c4 20             	add    esp,0x20
c001a8f3:	85 c0                	test   eax,eax
c001a8f5:	74 1f                	je     c001a916 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a8f7:	51                   	push   ecx
c001a8f8:	51                   	push   ecx
c001a8f9:	50                   	push   eax
c001a8fa:	68 94 89 02 c0       	push   0xc0028994
c001a8ff:	e8 3b 7d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001a904:	89 34 24             	mov    DWORD PTR [esp],esi
c001a907:	e8 a7 70 ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c001a90c:	83 c4 10             	add    esp,0x10
c001a90f:	31 c0                	xor    eax,eax
c001a911:	e9 7c 01 00 00       	jmp    c001aa92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a916:	e8 f4 14 00 00       	call   c001be0f <lockScheduler()>
c001a91b:	e8 56 51 ff ff       	call   c000fa76 <Phys::allocatePage()>
c001a920:	6a 07                	push   0x7
c001a922:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a928:	56                   	push   esi
c001a929:	50                   	push   eax
c001a92a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a930:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a933:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a939:	e8 dc 73 ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001a93e:	83 c4 0c             	add    esp,0xc
c001a941:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a947:	6a 00                	push   0x0
c001a949:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a94f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a952:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a958:	e8 27 72 ff ff       	call   c0011b84 <VAS::mapOtherVASIn(bool, VAS*)>
c001a95d:	58                   	pop    eax
c001a95e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a964:	5a                   	pop    edx
c001a965:	68 07 04 00 00       	push   0x407
c001a96a:	53                   	push   ebx
c001a96b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a971:	50                   	push   eax
c001a972:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a978:	6a 00                	push   0x0
c001a97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a97f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a982:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a988:	e8 47 77 ff ff       	call   c00120d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a98d:	83 c4 1c             	add    esp,0x1c
c001a990:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a996:	68 00 10 00 00       	push   0x1000
c001a99b:	50                   	push   eax
c001a99c:	56                   	push   esi
c001a99d:	e8 a5 5c fe ff       	call   c0000647 <memcpy>
c001a9a2:	e8 6a 14 00 00       	call   c001be11 <unlockScheduler()>
c001a9a7:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a9ad:	83 c4 10             	add    esp,0x10
c001a9b0:	e9 f5 fe ff ff       	jmp    c001a8aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a9b5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a9b8:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a9c2:	0f 86 bc 00 00 00    	jbe    c001aa84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a9c8:	e8 42 14 00 00       	call   c001be0f <lockScheduler()>
c001a9cd:	51                   	push   ecx
c001a9ce:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a9d4:	6a 00                	push   0x0
c001a9d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9de:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a9e4:	e8 9b 71 ff ff       	call   c0011b84 <VAS::mapOtherVASIn(bool, VAS*)>
c001a9e9:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	c1 e8 0c             	shr    eax,0xc
c001a9f5:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a9ff:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001aa05:	e8 6c 50 ff ff       	call   c000fa76 <Phys::allocatePage()>
c001aa0a:	6a 07                	push   0x7
c001aa0c:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001aa12:	56                   	push   esi
c001aa13:	50                   	push   eax
c001aa14:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aa1a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aa1d:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001aa23:	e8 f2 72 ff ff       	call   c0011d1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa28:	58                   	pop    eax
c001aa29:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001aa2f:	5a                   	pop    edx
c001aa30:	68 07 04 00 00       	push   0x407
c001aa35:	53                   	push   ebx
c001aa36:	81 c3 00 10 00 00    	add    ebx,0x1000
c001aa3c:	50                   	push   eax
c001aa3d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001aa43:	6a 00                	push   0x0
c001aa45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa4d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001aa53:	e8 7c 76 ff ff       	call   c00120d4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001aa58:	83 c4 1c             	add    esp,0x1c
c001aa5b:	68 00 10 00 00       	push   0x1000
c001aa60:	6a 00                	push   0x0
c001aa62:	56                   	push   esi
c001aa63:	e8 15 5c fe ff       	call   c000067d <memset>
c001aa68:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001aa6e:	83 c4 10             	add    esp,0x10
c001aa71:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001aa77:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001aa7d:	77 86                	ja     c001aa05 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001aa7f:	e8 8d 13 00 00       	call   c001be11 <unlockScheduler()>
c001aa84:	83 ec 0c             	sub    esp,0xc
c001aa87:	56                   	push   esi
c001aa88:	e8 26 6f ff ff       	call   c00119b3 <Virt::freeKernelVirtualPages(unsigned long)>
c001aa8d:	83 c4 10             	add    esp,0x10
c001aa90:	b0 01                	mov    al,0x1
c001aa92:	8d 65 f4             	lea    esp,[ebp-0xc]
c001aa95:	5b                   	pop    ebx
c001aa96:	5e                   	pop    esi
c001aa97:	5f                   	pop    edi
c001aa98:	5d                   	pop    ebp
c001aa99:	c3                   	ret    

c001aa9a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001aa9a:	55                   	push   ebp
c001aa9b:	57                   	push   edi
c001aa9c:	56                   	push   esi
c001aa9d:	53                   	push   ebx
c001aa9e:	83 ec 48             	sub    esp,0x48
c001aaa1:	68 14 01 00 00       	push   0x114
c001aaa6:	e8 21 4a ff ff       	call   c000f4cc <malloc>
c001aaab:	83 c4 0c             	add    esp,0xc
c001aaae:	89 c6                	mov    esi,eax
c001aab0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aab8:	50                   	push   eax
c001aab9:	e8 b0 80 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001aabe:	58                   	pop    eax
c001aabf:	5a                   	pop    edx
c001aac0:	6a 01                	push   0x1
c001aac2:	56                   	push   esi
c001aac3:	e8 0a 81 ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	85 c0                	test   eax,eax
c001aacd:	0f 85 47 01 00 00    	jne    c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aad3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aadb:	83 ec 0c             	sub    esp,0xc
c001aade:	6a 34                	push   0x34
c001aae0:	e8 e7 49 ff ff       	call   c000f4cc <malloc>
c001aae5:	89 c3                	mov    ebx,eax
c001aae7:	58                   	pop    eax
c001aae8:	8b 06                	mov    eax,DWORD PTR [esi]
c001aaea:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001aaee:	57                   	push   edi
c001aaef:	53                   	push   ebx
c001aaf0:	6a 00                	push   0x0
c001aaf2:	6a 34                	push   0x34
c001aaf4:	56                   	push   esi
c001aaf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaf8:	83 c4 20             	add    esp,0x20
c001aafb:	85 c0                	test   eax,eax
c001aafd:	0f 85 17 01 00 00    	jne    c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab03:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ab09:	0f 85 0b 01 00 00    	jne    c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab0f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab12:	85 c0                	test   eax,eax
c001ab14:	0f 84 00 01 00 00    	je     c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab1a:	31 d2                	xor    edx,edx
c001ab1c:	55                   	push   ebp
c001ab1d:	52                   	push   edx
c001ab1e:	50                   	push   eax
c001ab1f:	56                   	push   esi
c001ab20:	e8 6b 81 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001ab25:	83 c4 10             	add    esp,0x10
c001ab28:	85 c0                	test   eax,eax
c001ab2a:	0f 85 ea 00 00 00    	jne    c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ab36:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ab3e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab42:	0f af c2             	imul   eax,edx
c001ab45:	50                   	push   eax
c001ab46:	e8 81 49 ff ff       	call   c000f4cc <malloc>
c001ab4b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ab4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab51:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab58:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab5c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab60:	0f af c2             	imul   eax,edx
c001ab63:	99                   	cdq    
c001ab64:	52                   	push   edx
c001ab65:	50                   	push   eax
c001ab66:	56                   	push   esi
c001ab67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ab6a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab6d:	83 c4 20             	add    esp,0x20
c001ab70:	85 c0                	test   eax,eax
c001ab72:	0f 84 a2 00 00 00    	je     c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab78:	31 d2                	xor    edx,edx
c001ab7a:	51                   	push   ecx
c001ab7b:	52                   	push   edx
c001ab7c:	50                   	push   eax
c001ab7d:	56                   	push   esi
c001ab7e:	e8 0d 81 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	85 c0                	test   eax,eax
c001ab88:	0f 85 8c 00 00 00    	jne    c001ac1a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab8e:	83 ec 0c             	sub    esp,0xc
c001ab91:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ab95:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ab99:	31 ed                	xor    ebp,ebp
c001ab9b:	0f af c2             	imul   eax,edx
c001ab9e:	50                   	push   eax
c001ab9f:	e8 28 49 ff ff       	call   c000f4cc <malloc>
c001aba4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001aba6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001abad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abb1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001abb5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001abb9:	0f af c2             	imul   eax,edx
c001abbc:	99                   	cdq    
c001abbd:	52                   	push   edx
c001abbe:	50                   	push   eax
c001abbf:	56                   	push   esi
c001abc0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001abc3:	83 c4 20             	add    esp,0x20
c001abc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001abce:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001abd2:	0f 86 80 00 00 00    	jbe    c001ac58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001abd8:	0f b7 fd             	movzx  edi,bp
c001abdb:	c1 e7 05             	shl    edi,0x5
c001abde:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001abe2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001abe5:	75 6b                	jne    c001ac52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001abe7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001abea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abee:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001abf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abf5:	52                   	push   edx
c001abf6:	31 d2                	xor    edx,edx
c001abf8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001abfb:	52                   	push   edx
c001abfc:	50                   	push   eax
c001abfd:	56                   	push   esi
c001abfe:	e8 8d 80 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001ac03:	83 c4 10             	add    esp,0x10
c001ac06:	85 c0                	test   eax,eax
c001ac08:	74 17                	je     c001ac21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ac0a:	83 ec 0c             	sub    esp,0xc
c001ac0d:	68 bf 89 02 c0       	push   0xc00289bf
c001ac12:	e8 28 7a ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	31 c0                	xor    eax,eax
c001ac1c:	e9 87 00 00 00       	jmp    c001aca8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ac21:	83 ec 0c             	sub    esp,0xc
c001ac24:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ac27:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ac2a:	50                   	push   eax
c001ac2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ac2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac33:	56                   	push   esi
c001ac34:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ac38:	e8 e0 fb ff ff       	call   c001a81d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ac3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac41:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ac45:	83 c4 20             	add    esp,0x20
c001ac48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ac4c:	73 04                	jae    c001ac52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ac4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac52:	45                   	inc    ebp
c001ac53:	e9 76 ff ff ff       	jmp    c001abce <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ac58:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ac5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac64:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ac6a:	83 ec 0c             	sub    esp,0xc
c001ac6d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ac73:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ac78:	05 00 10 00 00       	add    eax,0x1000
c001ac7d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ac80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac84:	e8 53 48 ff ff       	call   c000f4dc <free>
c001ac89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac8c:	e8 4b 48 ff ff       	call   c000f4dc <free>
c001ac91:	58                   	pop    eax
c001ac92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac96:	e8 41 48 ff ff       	call   c000f4dc <free>
c001ac9b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac9e:	e8 8d 7f ff ff       	call   c0012c30 <File::close()>
c001aca3:	83 c4 10             	add    esp,0x10
c001aca6:	b0 01                	mov    al,0x1
c001aca8:	83 c4 3c             	add    esp,0x3c
c001acab:	5b                   	pop    ebx
c001acac:	5e                   	pop    esi
c001acad:	5f                   	pop    edi
c001acae:	5d                   	pop    ebp
c001acaf:	c3                   	ret    

c001acb0 <Thr::runtimeReferenceHelper()>:
c001acb0:	83 ec 18             	sub    esp,0x18
c001acb3:	68 c7 89 02 c0       	push   0xc00289c7
c001acb8:	e8 82 79 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001acbd:	fa                   	cli    
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	eb fe                	jmp    c001acc1 <Thr::runtimeReferenceHelper()+0x11>

c001acc3 <Thr::getAddressOfKernelSymbol(char const*)>:
c001acc3:	57                   	push   edi
c001acc4:	56                   	push   esi
c001acc5:	53                   	push   ebx
c001acc6:	31 db                	xor    ebx,ebx
c001acc8:	39 1d 60 be 02 c0    	cmp    DWORD PTR ds:0xc002be60,ebx
c001acce:	7e 3c                	jle    c001ad0c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001acd0:	8b 34 9d e0 bd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4220]
c001acd7:	31 ff                	xor    edi,edi
c001acd9:	39 3c 9d e0 bc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4320],edi
c001ace0:	7e 27                	jle    c001ad09 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ace2:	50                   	push   eax
c001ace3:	50                   	push   eax
c001ace4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ace8:	8b 06                	mov    eax,DWORD PTR [esi]
c001acea:	03 04 9d 60 bd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd42a0]
c001acf1:	50                   	push   eax
c001acf2:	e8 76 5a fe ff       	call   c000076d <strcmp>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	85 c0                	test   eax,eax
c001acfc:	75 05                	jne    c001ad03 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001acfe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ad01:	eb 0b                	jmp    c001ad0e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ad03:	83 c6 10             	add    esi,0x10
c001ad06:	47                   	inc    edi
c001ad07:	eb d0                	jmp    c001acd9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ad09:	43                   	inc    ebx
c001ad0a:	eb bc                	jmp    c001acc8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ad0c:	31 c0                	xor    eax,eax
c001ad0e:	5b                   	pop    ebx
c001ad0f:	5e                   	pop    esi
c001ad10:	5f                   	pop    edi
c001ad11:	c3                   	ret    

c001ad12 <Thr::loadKernelSymbolTable(char const*)>:
c001ad12:	55                   	push   ebp
c001ad13:	57                   	push   edi
c001ad14:	56                   	push   esi
c001ad15:	53                   	push   ebx
c001ad16:	83 ec 68             	sub    esp,0x68
c001ad19:	8b 35 b4 be 02 c0    	mov    esi,DWORD PTR ds:0xc002beb4
c001ad1f:	68 14 01 00 00       	push   0x114
c001ad24:	e8 a3 47 ff ff       	call   c000f4cc <malloc>
c001ad29:	83 c4 0c             	add    esp,0xc
c001ad2c:	89 c3                	mov    ebx,eax
c001ad2e:	56                   	push   esi
c001ad2f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ad33:	50                   	push   eax
c001ad34:	e8 35 7e ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001ad39:	5e                   	pop    esi
c001ad3a:	5f                   	pop    edi
c001ad3b:	6a 01                	push   0x1
c001ad3d:	53                   	push   ebx
c001ad3e:	e8 8f 7e ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	31 d2                	xor    edx,edx
c001ad48:	85 c0                	test   eax,eax
c001ad4a:	0f 85 74 02 00 00    	jne    c001afc4 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad50:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	6a 34                	push   0x34
c001ad5d:	e8 6a 47 ff ff       	call   c000f4cc <malloc>
c001ad62:	59                   	pop    ecx
c001ad63:	89 c7                	mov    edi,eax
c001ad65:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ad69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad6b:	56                   	push   esi
c001ad6c:	57                   	push   edi
c001ad6d:	6a 00                	push   0x0
c001ad6f:	6a 34                	push   0x34
c001ad71:	53                   	push   ebx
c001ad72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad75:	83 c4 20             	add    esp,0x20
c001ad78:	85 c0                	test   eax,eax
c001ad7a:	74 17                	je     c001ad93 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	68 e9 89 02 c0       	push   0xc00289e9
c001ad84:	e8 7a e0 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	31 d2                	xor    edx,edx
c001ad8e:	e9 31 02 00 00       	jmp    c001afc4 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad93:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ad99:	75 e1                	jne    c001ad7c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ad9b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ad9e:	85 c0                	test   eax,eax
c001ada0:	74 da                	je     c001ad7c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ada2:	52                   	push   edx
c001ada3:	31 d2                	xor    edx,edx
c001ada5:	52                   	push   edx
c001ada6:	50                   	push   eax
c001ada7:	53                   	push   ebx
c001ada8:	e8 e3 7e ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	85 c0                	test   eax,eax
c001adb2:	75 c8                	jne    c001ad7c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001adbb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001adbf:	31 ed                	xor    ebp,ebp
c001adc1:	0f af c2             	imul   eax,edx
c001adc4:	50                   	push   eax
c001adc5:	e8 02 47 ff ff       	call   c000f4cc <malloc>
c001adca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001adcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001add0:	89 34 24             	mov    DWORD PTR [esp],esi
c001add3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001add7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001addb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001addf:	0f af c2             	imul   eax,edx
c001ade2:	99                   	cdq    
c001ade3:	52                   	push   edx
c001ade4:	50                   	push   eax
c001ade5:	53                   	push   ebx
c001ade6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ade9:	83 c4 20             	add    esp,0x20
c001adec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001adf4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001adfc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ae04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae0c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ae10:	0f 86 aa 00 00 00    	jbe    c001aec0 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001ae16:	0f b7 f5             	movzx  esi,bp
c001ae19:	6b f6 28             	imul   esi,esi,0x28
c001ae1c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae20:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae27:	50                   	push   eax
c001ae28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae2c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ae30:	8b 16                	mov    edx,DWORD PTR [esi]
c001ae32:	6b c0 28             	imul   eax,eax,0x28
c001ae35:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ae39:	89 d0                	mov    eax,edx
c001ae3b:	31 d2                	xor    edx,edx
c001ae3d:	52                   	push   edx
c001ae3e:	50                   	push   eax
c001ae3f:	53                   	push   ebx
c001ae40:	e8 4b 7e ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001ae45:	83 c4 0c             	add    esp,0xc
c001ae48:	6a 20                	push   0x20
c001ae4a:	6a 00                	push   0x0
c001ae4c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae50:	52                   	push   edx
c001ae51:	e8 27 58 fe ff       	call   c000067d <memset>
c001ae56:	58                   	pop    eax
c001ae57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae59:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ae5d:	51                   	push   ecx
c001ae5e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ae62:	52                   	push   edx
c001ae63:	6a 00                	push   0x0
c001ae65:	6a 1f                	push   0x1f
c001ae67:	53                   	push   ebx
c001ae68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae6b:	83 c4 18             	add    esp,0x18
c001ae6e:	68 00 8a 02 c0       	push   0xc0028a00
c001ae73:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae77:	52                   	push   edx
c001ae78:	e8 f0 58 fe ff       	call   c000076d <strcmp>
c001ae7d:	83 c4 10             	add    esp,0x10
c001ae80:	85 c0                	test   eax,eax
c001ae82:	75 0f                	jne    c001ae93 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001ae84:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae93:	50                   	push   eax
c001ae94:	50                   	push   eax
c001ae95:	68 08 8a 02 c0       	push   0xc0028a08
c001ae9a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ae9e:	50                   	push   eax
c001ae9f:	e8 c9 58 fe ff       	call   c000076d <strcmp>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	85 c0                	test   eax,eax
c001aea9:	75 0f                	jne    c001aeba <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aeab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aeae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aeba:	45                   	inc    ebp
c001aebb:	e9 4c ff ff ff       	jmp    c001ae0c <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aec0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aec5:	75 10                	jne    c001aed7 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aec7:	83 ec 0c             	sub    esp,0xc
c001aeca:	68 10 8a 02 c0       	push   0xc0028a10
c001aecf:	e8 2f df ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001aedc:	75 10                	jne    c001aeee <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aede:	83 ec 0c             	sub    esp,0xc
c001aee1:	68 10 8a 02 c0       	push   0xc0028a10
c001aee6:	e8 18 df ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001aeeb:	83 c4 10             	add    esp,0x10
c001aeee:	31 d2                	xor    edx,edx
c001aef0:	50                   	push   eax
c001aef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef5:	52                   	push   edx
c001aef6:	50                   	push   eax
c001aef7:	53                   	push   ebx
c001aef8:	e8 93 7d ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001aefd:	5a                   	pop    edx
c001aefe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af02:	e8 c5 45 ff ff       	call   c000f4cc <malloc>
c001af07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af0f:	31 c9                	xor    ecx,ecx
c001af11:	5e                   	pop    esi
c001af12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af14:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001af18:	55                   	push   ebp
c001af19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af1d:	51                   	push   ecx
c001af1e:	52                   	push   edx
c001af1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af23:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001af27:	53                   	push   ebx
c001af28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af2b:	83 c4 14             	add    esp,0x14
c001af2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af32:	e8 95 45 ff ff       	call   c000f4cc <malloc>
c001af37:	89 c6                	mov    esi,eax
c001af39:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af3e:	56                   	push   esi
c001af3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001af43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af47:	51                   	push   ecx
c001af48:	52                   	push   edx
c001af49:	53                   	push   ebx
c001af4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af51:	8b 15 60 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be60
c001af57:	83 c4 1c             	add    esp,0x1c
c001af5a:	c1 e8 04             	shr    eax,0x4
c001af5d:	89 04 95 e0 bc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4320],eax
c001af64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af68:	31 d2                	xor    edx,edx
c001af6a:	52                   	push   edx
c001af6b:	50                   	push   eax
c001af6c:	53                   	push   ebx
c001af6d:	e8 1e 7d ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001af72:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001af74:	31 d2                	xor    edx,edx
c001af76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af79:	56                   	push   esi
c001af7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af7e:	52                   	push   edx
c001af7f:	50                   	push   eax
c001af80:	53                   	push   ebx
c001af81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af84:	83 c4 14             	add    esp,0x14
c001af87:	53                   	push   ebx
c001af88:	e8 a3 7c ff ff       	call   c0012c30 <File::close()>
c001af8d:	5d                   	pop    ebp
c001af8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af92:	e8 45 45 ff ff       	call   c000f4dc <free>
c001af97:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af9a:	e8 3d 45 ff ff       	call   c000f4dc <free>
c001af9f:	a1 60 be 02 c0       	mov    eax,ds:0xc002be60
c001afa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afa8:	8d 50 01             	lea    edx,[eax+0x1]
c001afab:	89 0c 85 e0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4220],ecx
c001afb2:	89 15 60 be 02 c0    	mov    DWORD PTR ds:0xc002be60,edx
c001afb8:	89 34 85 60 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd42a0],esi
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	b2 01                	mov    dl,0x1
c001afc4:	83 c4 5c             	add    esp,0x5c
c001afc7:	88 d0                	mov    al,dl
c001afc9:	5b                   	pop    ebx
c001afca:	5e                   	pop    esi
c001afcb:	5f                   	pop    edi
c001afcc:	5d                   	pop    ebp
c001afcd:	c3                   	ret    

c001afce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001afce:	55                   	push   ebp
c001afcf:	57                   	push   edi
c001afd0:	56                   	push   esi
c001afd1:	53                   	push   ebx
c001afd2:	81 ec 68 03 00 00    	sub    esp,0x368
c001afd8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001afdf:	8b 1d b4 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002beb4
c001afe5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001afe9:	68 14 01 00 00       	push   0x114
c001afee:	e8 d9 44 ff ff       	call   c000f4cc <malloc>
c001aff3:	83 c4 0c             	add    esp,0xc
c001aff6:	89 c5                	mov    ebp,eax
c001aff8:	53                   	push   ebx
c001aff9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b000:	50                   	push   eax
c001b001:	e8 68 7b ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001b006:	58                   	pop    eax
c001b007:	5a                   	pop    edx
c001b008:	6a 01                	push   0x1
c001b00a:	55                   	push   ebp
c001b00b:	e8 c2 7b ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	85 c0                	test   eax,eax
c001b015:	0f 85 f2 06 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b01b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b023:	83 ec 0c             	sub    esp,0xc
c001b026:	6a 34                	push   0x34
c001b028:	e8 9f 44 ff ff       	call   c000f4cc <malloc>
c001b02d:	89 c7                	mov    edi,eax
c001b02f:	58                   	pop    eax
c001b030:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b033:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b037:	53                   	push   ebx
c001b038:	57                   	push   edi
c001b039:	6a 00                	push   0x0
c001b03b:	6a 34                	push   0x34
c001b03d:	55                   	push   ebp
c001b03e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b041:	83 c4 20             	add    esp,0x20
c001b044:	85 c0                	test   eax,eax
c001b046:	0f 85 c1 06 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b04c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b052:	0f 85 b5 06 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b058:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b05b:	85 c0                	test   eax,eax
c001b05d:	0f 84 aa 06 00 00    	je     c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b063:	31 d2                	xor    edx,edx
c001b065:	56                   	push   esi
c001b066:	52                   	push   edx
c001b067:	50                   	push   eax
c001b068:	55                   	push   ebp
c001b069:	e8 22 7c ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b06e:	83 c4 10             	add    esp,0x10
c001b071:	85 c0                	test   eax,eax
c001b073:	0f 85 94 06 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b079:	83 ec 0c             	sub    esp,0xc
c001b07c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b07f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b083:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b087:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b08b:	0f af c2             	imul   eax,edx
c001b08e:	50                   	push   eax
c001b08f:	e8 38 44 ff ff       	call   c000f4cc <malloc>
c001b094:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b097:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b09b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b0a6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b0aa:	0f af c2             	imul   eax,edx
c001b0ad:	99                   	cdq    
c001b0ae:	52                   	push   edx
c001b0af:	50                   	push   eax
c001b0b0:	55                   	push   ebp
c001b0b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0b4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b0b7:	83 c4 20             	add    esp,0x20
c001b0ba:	85 c0                	test   eax,eax
c001b0bc:	0f 84 4b 06 00 00    	je     c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0c2:	31 d2                	xor    edx,edx
c001b0c4:	51                   	push   ecx
c001b0c5:	52                   	push   edx
c001b0c6:	50                   	push   eax
c001b0c7:	55                   	push   ebp
c001b0c8:	e8 c3 7b ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b0cd:	83 c4 10             	add    esp,0x10
c001b0d0:	85 c0                	test   eax,eax
c001b0d2:	0f 85 35 06 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b0df:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b0e3:	31 f6                	xor    esi,esi
c001b0e5:	0f af c2             	imul   eax,edx
c001b0e8:	50                   	push   eax
c001b0e9:	e8 de 43 ff ff       	call   c000f4cc <malloc>
c001b0ee:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b0f1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b0f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0fc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b100:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b104:	0f af c2             	imul   eax,edx
c001b107:	99                   	cdq    
c001b108:	52                   	push   edx
c001b109:	50                   	push   eax
c001b10a:	55                   	push   ebp
c001b10b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b10e:	83 c4 20             	add    esp,0x20
c001b111:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b115:	0f 86 8a 00 00 00    	jbe    c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b11b:	0f b7 de             	movzx  ebx,si
c001b11e:	c1 e3 05             	shl    ebx,0x5
c001b121:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b125:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b128:	75 75                	jne    c001b19f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b12a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b12d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b131:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b138:	52                   	push   edx
c001b139:	31 d2                	xor    edx,edx
c001b13b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b13e:	52                   	push   edx
c001b13f:	50                   	push   eax
c001b140:	55                   	push   ebp
c001b141:	e8 4a 7b ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	85 c0                	test   eax,eax
c001b14b:	0f 85 bc 05 00 00    	jne    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b151:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b158:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b15b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b15f:	31 d2                	xor    edx,edx
c001b161:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b16c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b173:	50                   	push   eax
c001b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b17c:	52                   	push   edx
c001b17d:	50                   	push   eax
c001b17e:	55                   	push   ebp
c001b17f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b182:	83 c4 1c             	add    esp,0x1c
c001b185:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b188:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b18b:	50                   	push   eax
c001b18c:	6a 00                	push   0x0
c001b18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b192:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b196:	50                   	push   eax
c001b197:	e8 e1 54 fe ff       	call   c000067d <memset>
c001b19c:	83 c4 10             	add    esp,0x10
c001b19f:	46                   	inc    esi
c001b1a0:	e9 6c ff ff ff       	jmp    c001b111 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b1a5:	31 db                	xor    ebx,ebx
c001b1a7:	50                   	push   eax
c001b1a8:	68 00 01 00 00       	push   0x100
c001b1ad:	6a 00                	push   0x0
c001b1af:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b1b3:	50                   	push   eax
c001b1b4:	e8 c4 54 fe ff       	call   c000067d <memset>
c001b1b9:	83 c4 0c             	add    esp,0xc
c001b1bc:	68 00 01 00 00       	push   0x100
c001b1c1:	6a 00                	push   0x0
c001b1c3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b1ca:	50                   	push   eax
c001b1cb:	e8 ad 54 fe ff       	call   c000067d <memset>
c001b1d0:	83 c4 10             	add    esp,0x10
c001b1d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b1db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b1e3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b1eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b1f3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b1fb:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b1ff:	0f 86 30 01 00 00    	jbe    c001b335 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b205:	0f b7 f3             	movzx  esi,bx
c001b208:	6b f6 28             	imul   esi,esi,0x28
c001b20b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b20f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b216:	50                   	push   eax
c001b217:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b21b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b21f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b221:	6b d2 28             	imul   edx,edx,0x28
c001b224:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b228:	31 d2                	xor    edx,edx
c001b22a:	52                   	push   edx
c001b22b:	50                   	push   eax
c001b22c:	55                   	push   ebp
c001b22d:	e8 5e 7a ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b232:	83 c4 0c             	add    esp,0xc
c001b235:	6a 20                	push   0x20
c001b237:	6a 00                	push   0x0
c001b239:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b240:	51                   	push   ecx
c001b241:	e8 37 54 fe ff       	call   c000067d <memset>
c001b246:	58                   	pop    eax
c001b247:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b24a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b24e:	52                   	push   edx
c001b24f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b256:	51                   	push   ecx
c001b257:	6a 00                	push   0x0
c001b259:	6a 1f                	push   0x1f
c001b25b:	55                   	push   ebp
c001b25c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b25f:	83 c4 1c             	add    esp,0x1c
c001b262:	6a 09                	push   0x9
c001b264:	68 2a 8a 02 c0       	push   0xc0028a2a
c001b269:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b270:	51                   	push   ecx
c001b271:	e8 6e 53 fe ff       	call   c00005e4 <memcmp>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	85 c0                	test   eax,eax
c001b27b:	75 21                	jne    c001b29e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b27d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b281:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b289:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b28d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b290:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b297:	89 c8                	mov    eax,ecx
c001b299:	40                   	inc    eax
c001b29a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b29e:	50                   	push   eax
c001b29f:	6a 09                	push   0x9
c001b2a1:	68 34 8a 02 c0       	push   0xc0028a34
c001b2a6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2ad:	50                   	push   eax
c001b2ae:	e8 31 53 fe ff       	call   c00005e4 <memcmp>
c001b2b3:	83 c4 10             	add    esp,0x10
c001b2b6:	85 c0                	test   eax,eax
c001b2b8:	75 21                	jne    c001b2db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b2c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b2ca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2cd:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b2d4:	89 c8                	mov    eax,ecx
c001b2d6:	40                   	inc    eax
c001b2d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2db:	50                   	push   eax
c001b2dc:	50                   	push   eax
c001b2dd:	68 00 8a 02 c0       	push   0xc0028a00
c001b2e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2e9:	50                   	push   eax
c001b2ea:	e8 7e 54 fe ff       	call   c000076d <strcmp>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	85 c0                	test   eax,eax
c001b2f4:	75 0f                	jne    c001b305 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b2f6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b301:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b305:	50                   	push   eax
c001b306:	50                   	push   eax
c001b307:	68 08 8a 02 c0       	push   0xc0028a08
c001b30c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b313:	50                   	push   eax
c001b314:	e8 54 54 fe ff       	call   c000076d <strcmp>
c001b319:	83 c4 10             	add    esp,0x10
c001b31c:	85 c0                	test   eax,eax
c001b31e:	75 0f                	jne    c001b32f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b320:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b323:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b327:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b32b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b32f:	43                   	inc    ebx
c001b330:	e9 c6 fe ff ff       	jmp    c001b1fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b335:	31 d2                	xor    edx,edx
c001b337:	50                   	push   eax
c001b338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b33c:	52                   	push   edx
c001b33d:	50                   	push   eax
c001b33e:	55                   	push   ebp
c001b33f:	e8 4c 79 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b344:	5a                   	pop    edx
c001b345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b349:	e8 7e 41 ff ff       	call   c000f4cc <malloc>
c001b34e:	31 d2                	xor    edx,edx
c001b350:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b354:	59                   	pop    ecx
c001b355:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b358:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b35c:	53                   	push   ebx
c001b35d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b361:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b365:	52                   	push   edx
c001b366:	50                   	push   eax
c001b367:	55                   	push   ebp
c001b368:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b36b:	83 c4 14             	add    esp,0x14
c001b36e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b372:	e8 55 41 ff ff       	call   c000f4cc <malloc>
c001b377:	31 d2                	xor    edx,edx
c001b379:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b37d:	83 c4 0c             	add    esp,0xc
c001b380:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b384:	52                   	push   edx
c001b385:	50                   	push   eax
c001b386:	55                   	push   ebp
c001b387:	e8 04 79 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b38c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b38f:	31 d2                	xor    edx,edx
c001b391:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b394:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b398:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b39c:	52                   	push   edx
c001b39d:	50                   	push   eax
c001b39e:	55                   	push   ebp
c001b39f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b3a2:	83 c4 20             	add    esp,0x20
c001b3a5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b3ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3b1:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b3b5:	0f 84 56 03 00 00    	je     c001b711 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b3bb:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b3c2:	31 d2                	xor    edx,edx
c001b3c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3c8:	c1 e8 03             	shr    eax,0x3
c001b3cb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b3cf:	50                   	push   eax
c001b3d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3d4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b3d8:	52                   	push   edx
c001b3d9:	50                   	push   eax
c001b3da:	55                   	push   ebp
c001b3db:	e8 b0 78 ff ff       	call   c0012c90 <File::seek(unsigned long long)>
c001b3e0:	58                   	pop    eax
c001b3e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3e5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b3ec:	e8 db 40 ff ff       	call   c000f4cc <malloc>
c001b3f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b3f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b3f8:	31 d2                	xor    edx,edx
c001b3fa:	58                   	pop    eax
c001b3fb:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b3ff:	50                   	push   eax
c001b400:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b404:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b408:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b40f:	52                   	push   edx
c001b410:	50                   	push   eax
c001b411:	55                   	push   ebp
c001b412:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b415:	83 c4 20             	add    esp,0x20
c001b418:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b420:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b424:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b428:	0f 8d c7 02 00 00    	jge    c001b6f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b42e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b436:	31 db                	xor    ebx,ebx
c001b438:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b43b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b43f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b443:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b44b:	c1 e8 08             	shr    eax,0x8
c001b44e:	89 c6                	mov    esi,eax
c001b450:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b454:	c1 e6 04             	shl    esi,0x4
c001b457:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b45b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b45e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b462:	85 c0                	test   eax,eax
c001b464:	0f 85 17 01 00 00    	jne    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b46a:	83 ec 0c             	sub    esp,0xc
c001b46d:	b3 01                	mov    bl,0x1
c001b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b473:	03 06                	add    eax,DWORD PTR [esi]
c001b475:	50                   	push   eax
c001b476:	e8 48 f8 ff ff       	call   c001acc3 <Thr::getAddressOfKernelSymbol(char const*)>
c001b47b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b47f:	83 c4 10             	add    esp,0x10
c001b482:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b487:	0f 85 f4 00 00 00    	jne    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b48d:	50                   	push   eax
c001b48e:	50                   	push   eax
c001b48f:	68 3e 8a 02 c0       	push   0xc0028a3e
c001b494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b498:	03 06                	add    eax,DWORD PTR [esi]
c001b49a:	50                   	push   eax
c001b49b:	e8 cd 52 fe ff       	call   c000076d <strcmp>
c001b4a0:	83 c4 10             	add    esp,0x10
c001b4a3:	85 c0                	test   eax,eax
c001b4a5:	75 0a                	jne    c001b4b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b4a7:	b8 7c 39 02 c0       	mov    eax,0xc002397c
c001b4ac:	e9 ca 00 00 00       	jmp    c001b57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4b1:	50                   	push   eax
c001b4b2:	50                   	push   eax
c001b4b3:	68 48 8a 02 c0       	push   0xc0028a48
c001b4b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4bc:	03 06                	add    eax,DWORD PTR [esi]
c001b4be:	50                   	push   eax
c001b4bf:	e8 a9 52 fe ff       	call   c000076d <strcmp>
c001b4c4:	83 c4 10             	add    esp,0x10
c001b4c7:	85 c0                	test   eax,eax
c001b4c9:	75 0a                	jne    c001b4d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b4cb:	b8 b0 36 02 c0       	mov    eax,0xc00236b0
c001b4d0:	e9 a6 00 00 00       	jmp    c001b57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4d5:	53                   	push   ebx
c001b4d6:	53                   	push   ebx
c001b4d7:	68 51 8a 02 c0       	push   0xc0028a51
c001b4dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4e0:	03 06                	add    eax,DWORD PTR [esi]
c001b4e2:	50                   	push   eax
c001b4e3:	e8 85 52 fe ff       	call   c000076d <strcmp>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	85 c0                	test   eax,eax
c001b4ed:	75 0a                	jne    c001b4f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b4ef:	b8 7c 3a 02 c0       	mov    eax,0xc0023a7c
c001b4f4:	e9 82 00 00 00       	jmp    c001b57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4f9:	51                   	push   ecx
c001b4fa:	51                   	push   ecx
c001b4fb:	68 5b 8a 02 c0       	push   0xc0028a5b
c001b500:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b504:	03 06                	add    eax,DWORD PTR [esi]
c001b506:	50                   	push   eax
c001b507:	e8 61 52 fe ff       	call   c000076d <strcmp>
c001b50c:	83 c4 10             	add    esp,0x10
c001b50f:	85 c0                	test   eax,eax
c001b511:	74 63                	je     c001b576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b513:	50                   	push   eax
c001b514:	50                   	push   eax
c001b515:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b519:	03 06                	add    eax,DWORD PTR [esi]
c001b51b:	50                   	push   eax
c001b51c:	68 64 8a 02 c0       	push   0xc0028a64
c001b521:	e8 19 71 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001b526:	58                   	pop    eax
c001b527:	5a                   	pop    edx
c001b528:	68 7e 8a 02 c0       	push   0xc0028a7e
c001b52d:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b534:	53                   	push   ebx
c001b535:	e8 e2 51 fe ff       	call   c000071c <strcpy>
c001b53a:	59                   	pop    ecx
c001b53b:	58                   	pop    eax
c001b53c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b540:	03 06                	add    eax,DWORD PTR [esi]
c001b542:	50                   	push   eax
c001b543:	53                   	push   ebx
c001b544:	e8 8a 52 fe ff       	call   c00007d3 <strcat>
c001b549:	58                   	pop    eax
c001b54a:	5a                   	pop    edx
c001b54b:	68 14 8b 02 c0       	push   0xc0028b14
c001b550:	53                   	push   ebx
c001b551:	e8 7d 52 fe ff       	call   c00007d3 <strcat>
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b55e:	0f 84 4b 01 00 00    	je     c001b6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	53                   	push   ebx
c001b568:	e8 96 d8 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b56d:	83 c4 10             	add    esp,0x10
c001b570:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b574:	eb 0b                	jmp    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b576:	b8 fc 37 02 c0       	mov    eax,0xc00237fc
c001b57b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b57f:	b3 01                	mov    bl,0x1
c001b581:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b586:	0f 85 80 00 00 00    	jne    c001b60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b58c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b593:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b597:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b59b:	01 ce                	add    esi,ecx
c001b59d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b5a5:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5a7:	0f 94 c2             	sete   dl
c001b5aa:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b5b2:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b5b7:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b5bb:	84 db                	test   bl,bl
c001b5bd:	74 31                	je     c001b5f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b5bf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5c3:	01 c3                	add    ebx,eax
c001b5c5:	84 d2                	test   dl,dl
c001b5c7:	75 0a                	jne    c001b5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b5c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b5cd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b5d1:	76 32                	jbe    c001b605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5d3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b5d8:	0f 84 d1 00 00 00    	je     c001b6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	68 95 8a 02 c0       	push   0xc0028a95
c001b5e6:	e8 18 d8 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	eb 15                	jmp    c001b605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5f0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b5f3:	84 d2                	test   dl,dl
c001b5f5:	75 0e                	jne    c001b605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b5fb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b5ff:	77 04                	ja     c001b605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b601:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b605:	89 1e                	mov    DWORD PTR [esi],ebx
c001b607:	e9 e0 00 00 00       	jmp    c001b6ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b60c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b611:	75 6e                	jne    c001b681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b613:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b61a:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b61e:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b622:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b62a:	74 17                	je     c001b643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b62c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b634:	74 0d                	je     c001b643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b636:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b63a:	83 e8 04             	sub    eax,0x4
c001b63d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b641:	76 17                	jbe    c001b65a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b643:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b648:	74 65                	je     c001b6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b64a:	83 ec 0c             	sub    esp,0xc
c001b64d:	68 b1 8a 02 c0       	push   0xc0028ab1
c001b652:	e8 ac d7 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	8b 16                	mov    edx,DWORD PTR [esi]
c001b65c:	84 db                	test   bl,bl
c001b65e:	74 13                	je     c001b673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b664:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b66b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b66f:	01 d0                	add    eax,edx
c001b671:	eb 06                	jmp    c001b679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b673:	89 d0                	mov    eax,edx
c001b675:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b679:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b67d:	89 06                	mov    DWORD PTR [esi],eax
c001b67f:	eb 6b                	jmp    c001b6ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b681:	50                   	push   eax
c001b682:	50                   	push   eax
c001b683:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b688:	50                   	push   eax
c001b689:	68 cd 8a 02 c0       	push   0xc0028acd
c001b68e:	e8 ac 6f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b69b:	74 12                	je     c001b6af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b69d:	83 ec 0c             	sub    esp,0xc
c001b6a0:	68 d8 8a 02 c0       	push   0xc0028ad8
c001b6a5:	e8 59 d7 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	eb 3d                	jmp    c001b6ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b6af:	83 ec 0c             	sub    esp,0xc
c001b6b2:	55                   	push   ebp
c001b6b3:	e8 78 75 ff ff       	call   c0012c30 <File::close()>
c001b6b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b6bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b6be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6c1:	59                   	pop    ecx
c001b6c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6c6:	e8 11 3e ff ff       	call   c000f4dc <free>
c001b6cb:	5b                   	pop    ebx
c001b6cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6d0:	e8 07 3e ff ff       	call   c000f4dc <free>
c001b6d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b6d8:	e8 ff 3d ff ff       	call   c000f4dc <free>
c001b6dd:	5e                   	pop    esi
c001b6de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6e2:	e8 f5 3d ff ff       	call   c000f4dc <free>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	eb 21                	jmp    c001b70d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b6ec:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b6f0:	e9 2b fd ff ff       	jmp    c001b420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001b6f5:	83 ec 0c             	sub    esp,0xc
c001b6f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6fc:	e8 db 3d ff ff       	call   c000f4dc <free>
c001b701:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	e9 a0 fc ff ff       	jmp    c001b3ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001b70d:	31 c0                	xor    eax,eax
c001b70f:	eb 33                	jmp    c001b744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	55                   	push   ebp
c001b715:	e8 16 75 ff ff       	call   c0012c30 <File::close()>
c001b71a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b71d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b723:	58                   	pop    eax
c001b724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b728:	e8 af 3d ff ff       	call   c000f4dc <free>
c001b72d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b730:	e8 a7 3d ff ff       	call   c000f4dc <free>
c001b735:	5a                   	pop    edx
c001b736:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b73a:	e8 9d 3d ff ff       	call   c000f4dc <free>
c001b73f:	83 c4 10             	add    esp,0x10
c001b742:	b0 01                	mov    al,0x1
c001b744:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b74a:	5b                   	pop    ebx
c001b74b:	5e                   	pop    esi
c001b74c:	5f                   	pop    edi
c001b74d:	5d                   	pop    ebp
c001b74e:	c3                   	ret    

c001b74f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b74f:	56                   	push   esi
c001b750:	31 d2                	xor    edx,edx
c001b752:	53                   	push   ebx
c001b753:	8b 1d c0 b6 02 c0    	mov    ebx,DWORD PTR ds:0xc002b6c0
c001b759:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b75d:	39 d3                	cmp    ebx,edx
c001b75f:	7e 1b                	jle    c001b77c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b761:	8b 04 95 e0 b8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4720]
c001b768:	39 c8                	cmp    eax,ecx
c001b76a:	77 0d                	ja     c001b779 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b76c:	8b 34 95 e0 b6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4920]
c001b773:	01 c6                	add    esi,eax
c001b775:	39 ce                	cmp    esi,ecx
c001b777:	77 05                	ja     c001b77e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b779:	42                   	inc    edx
c001b77a:	eb e1                	jmp    c001b75d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b77c:	31 c0                	xor    eax,eax
c001b77e:	5b                   	pop    ebx
c001b77f:	5e                   	pop    esi
c001b780:	c3                   	ret    

c001b781 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b781:	53                   	push   ebx
c001b782:	31 c0                	xor    eax,eax
c001b784:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b788:	8b 1d c0 b6 02 c0    	mov    ebx,DWORD PTR ds:0xc002b6c0
c001b78e:	39 c3                	cmp    ebx,eax
c001b790:	7e 22                	jle    c001b7b4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b792:	8b 14 85 e0 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4720]
c001b799:	39 ca                	cmp    edx,ecx
c001b79b:	77 14                	ja     c001b7b1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b79d:	03 14 85 e0 b6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4920]
c001b7a4:	39 ca                	cmp    edx,ecx
c001b7a6:	76 09                	jbe    c001b7b1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b7a8:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001b7af:	eb 05                	jmp    c001b7b6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b7b1:	40                   	inc    eax
c001b7b2:	eb da                	jmp    c001b78e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b7b4:	31 c0                	xor    eax,eax
c001b7b6:	5b                   	pop    ebx
c001b7b7:	c3                   	ret    

c001b7b8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b7b8:	53                   	push   ebx
c001b7b9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b7bd:	53                   	push   ebx
c001b7be:	e8 8c ff ff ff       	call   c001b74f <Thr::getDriverBaseFromAddress(unsigned long)>
c001b7c3:	5a                   	pop    edx
c001b7c4:	31 d2                	xor    edx,edx
c001b7c6:	85 c0                	test   eax,eax
c001b7c8:	74 04                	je     c001b7ce <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b7ca:	89 da                	mov    edx,ebx
c001b7cc:	29 c2                	sub    edx,eax
c001b7ce:	89 d0                	mov    eax,edx
c001b7d0:	5b                   	pop    ebx
c001b7d1:	c3                   	ret    

c001b7d2 <Thr::loadDLL(char const*, bool)>:
c001b7d2:	55                   	push   ebp
c001b7d3:	57                   	push   edi
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	81 ec 34 01 00 00    	sub    esp,0x134
c001b7dc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b7e3:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b7ea:	56                   	push   esi
c001b7eb:	68 f0 8a 02 c0       	push   0xc0028af0
c001b7f0:	e8 4a 6e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001b7f5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b7fc:	e8 cb 3c ff ff       	call   c000f4cc <malloc>
c001b801:	83 c4 0c             	add    esp,0xc
c001b804:	89 c3                	mov    ebx,eax
c001b806:	ff 35 b4 be 02 c0    	push   DWORD PTR ds:0xc002beb4
c001b80c:	56                   	push   esi
c001b80d:	50                   	push   eax
c001b80e:	e8 5b 73 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	85 db                	test   ebx,ebx
c001b818:	75 3c                	jne    c001b856 <Thr::loadDLL(char const*, bool)+0x84>
c001b81a:	89 e8                	mov    eax,ebp
c001b81c:	84 c0                	test   al,al
c001b81e:	0f 84 b0 01 00 00    	je     c001b9d4 <Thr::loadDLL(char const*, bool)+0x202>
c001b824:	50                   	push   eax
c001b825:	50                   	push   eax
c001b826:	68 01 8b 02 c0       	push   0xc0028b01
c001b82b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001b82f:	57                   	push   edi
c001b830:	e8 e7 4e fe ff       	call   c000071c <strcpy>
c001b835:	58                   	pop    eax
c001b836:	5a                   	pop    edx
c001b837:	56                   	push   esi
c001b838:	57                   	push   edi
c001b839:	e8 95 4f fe ff       	call   c00007d3 <strcat>
c001b83e:	59                   	pop    ecx
c001b83f:	58                   	pop    eax
c001b840:	68 14 8b 02 c0       	push   0xc0028b14
c001b845:	57                   	push   edi
c001b846:	e8 88 4f fe ff       	call   c00007d3 <strcat>
c001b84b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b84e:	e8 b0 d5 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b853:	83 c4 10             	add    esp,0x10
c001b856:	50                   	push   eax
c001b857:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b85b:	50                   	push   eax
c001b85c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b860:	50                   	push   eax
c001b861:	53                   	push   ebx
c001b862:	e8 17 76 ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c001b867:	83 c4 10             	add    esp,0x10
c001b86a:	85 db                	test   ebx,ebx
c001b86c:	74 0c                	je     c001b87a <Thr::loadDLL(char const*, bool)+0xa8>
c001b86e:	83 ec 0c             	sub    esp,0xc
c001b871:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b873:	53                   	push   ebx
c001b874:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b87f:	75 0a                	jne    c001b88b <Thr::loadDLL(char const*, bool)+0xb9>
c001b881:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b885:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b889:	75 3c                	jne    c001b8c7 <Thr::loadDLL(char const*, bool)+0xf5>
c001b88b:	89 e8                	mov    eax,ebp
c001b88d:	84 c0                	test   al,al
c001b88f:	0f 84 3d 01 00 00    	je     c001b9d2 <Thr::loadDLL(char const*, bool)+0x200>
c001b895:	50                   	push   eax
c001b896:	50                   	push   eax
c001b897:	68 01 8b 02 c0       	push   0xc0028b01
c001b89c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b8a0:	53                   	push   ebx
c001b8a1:	e8 76 4e fe ff       	call   c000071c <strcpy>
c001b8a6:	58                   	pop    eax
c001b8a7:	5a                   	pop    edx
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	e8 24 4f fe ff       	call   c00007d3 <strcat>
c001b8af:	59                   	pop    ecx
c001b8b0:	5f                   	pop    edi
c001b8b1:	68 14 8b 02 c0       	push   0xc0028b14
c001b8b6:	53                   	push   ebx
c001b8b7:	e8 17 4f fe ff       	call   c00007d3 <strcat>
c001b8bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8bf:	e8 3f d5 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	e8 13 5f ff ff       	call   c00117df <Virt::getAKernelVAS()>
c001b8cc:	51                   	push   ecx
c001b8cd:	6a 03                	push   0x3
c001b8cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b8d3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8d7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b8dd:	83 d3 00             	adc    ebx,0x0
c001b8e0:	89 ca                	mov    edx,ecx
c001b8e2:	89 d1                	mov    ecx,edx
c001b8e4:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b8e8:	51                   	push   ecx
c001b8e9:	50                   	push   eax
c001b8ea:	e8 2b 65 ff ff       	call   c0011e1a <VAS::allocatePages(int, int)>
c001b8ef:	89 34 24             	mov    DWORD PTR [esp],esi
c001b8f2:	89 c3                	mov    ebx,eax
c001b8f4:	e8 a1 4d fe ff       	call   c000069a <strlen>
c001b8f9:	8b 3d c0 b6 02 c0    	mov    edi,DWORD PTR ds:0xc002b6c0
c001b8ff:	40                   	inc    eax
c001b900:	89 04 24             	mov    DWORD PTR [esp],eax
c001b903:	e8 c4 3b ff ff       	call   c000f4cc <malloc>
c001b908:	89 04 bd e0 ba 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4520],eax
c001b90f:	5f                   	pop    edi
c001b910:	58                   	pop    eax
c001b911:	a1 c0 b6 02 c0       	mov    eax,ds:0xc002b6c0
c001b916:	56                   	push   esi
c001b917:	ff 34 85 e0 ba 02 c0 	push   DWORD PTR [eax*4-0x3ffd4520]
c001b91e:	e8 f9 4d fe ff       	call   c000071c <strcpy>
c001b923:	a1 c0 b6 02 c0       	mov    eax,ds:0xc002b6c0
c001b928:	8d 50 01             	lea    edx,[eax+0x1]
c001b92b:	89 1c 85 e0 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4720],ebx
c001b932:	89 15 c0 b6 02 c0    	mov    DWORD PTR ds:0xc002b6c0,edx
c001b938:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b93c:	83 c4 0c             	add    esp,0xc
c001b93f:	89 14 85 e0 b6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4920],edx
c001b946:	6a 01                	push   0x1
c001b948:	53                   	push   ebx
c001b949:	56                   	push   esi
c001b94a:	e8 7f f6 ff ff       	call   c001afce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	89 c7                	mov    edi,eax
c001b954:	fe c8                	dec    al
c001b956:	74 16                	je     c001b96e <Thr::loadDLL(char const*, bool)+0x19c>
c001b958:	89 e8                	mov    eax,ebp
c001b95a:	84 c0                	test   al,al
c001b95c:	74 10                	je     c001b96e <Thr::loadDLL(char const*, bool)+0x19c>
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	68 16 8b 02 c0       	push   0xc0028b16
c001b966:	e8 98 d4 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	31 f6                	xor    esi,esi
c001b970:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b974:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b978:	05 ff 0f 00 00       	add    eax,0xfff
c001b97d:	83 d2 00             	adc    edx,0x0
c001b980:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b984:	c1 ea 0c             	shr    edx,0xc
c001b987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b98b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b98f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b993:	ba 00 00 00 00       	mov    edx,0x0
c001b998:	89 d0                	mov    eax,edx
c001b99a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b99e:	73 2c                	jae    c001b9cc <Thr::loadDLL(char const*, bool)+0x1fa>
c001b9a0:	e8 3a 5e ff ff       	call   c00117df <Virt::getAKernelVAS()>
c001b9a5:	89 f5                	mov    ebp,esi
c001b9a7:	c1 e5 0c             	shl    ebp,0xc
c001b9aa:	52                   	push   edx
c001b9ab:	01 dd                	add    ebp,ebx
c001b9ad:	52                   	push   edx
c001b9ae:	55                   	push   ebp
c001b9af:	50                   	push   eax
c001b9b0:	e8 df 5f ff ff       	call   c0011994 <VAS::getPageTableEntry(unsigned long)>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b9bb:	75 0c                	jne    c001b9c9 <Thr::loadDLL(char const*, bool)+0x1f7>
c001b9bd:	83 ec 0c             	sub    esp,0xc
c001b9c0:	55                   	push   ebp
c001b9c1:	e8 26 40 ff ff       	call   c000f9ec <Phys::freePage(unsigned long)>
c001b9c6:	83 c4 10             	add    esp,0x10
c001b9c9:	46                   	inc    esi
c001b9ca:	eb a4                	jmp    c001b970 <Thr::loadDLL(char const*, bool)+0x19e>
c001b9cc:	89 f8                	mov    eax,edi
c001b9ce:	84 c0                	test   al,al
c001b9d0:	75 02                	jne    c001b9d4 <Thr::loadDLL(char const*, bool)+0x202>
c001b9d2:	31 db                	xor    ebx,ebx
c001b9d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b9da:	89 d8                	mov    eax,ebx
c001b9dc:	5b                   	pop    ebx
c001b9dd:	5e                   	pop    esi
c001b9de:	5f                   	pop    edi
c001b9df:	5d                   	pop    ebp
c001b9e0:	c3                   	ret    

c001b9e1 <Thr::executeDLL(unsigned long, void*)>:
c001b9e1:	56                   	push   esi
c001b9e2:	53                   	push   ebx
c001b9e3:	51                   	push   ecx
c001b9e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b9ec:	85 db                	test   ebx,ebx
c001b9ee:	75 10                	jne    c001ba00 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	68 35 8b 02 c0       	push   0xc0028b35
c001b9f8:	e8 06 d4 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ba04:	89 d8                	mov    eax,ebx
c001ba06:	5a                   	pop    edx
c001ba07:	5b                   	pop    ebx
c001ba08:	5e                   	pop    esi
c001ba09:	ff e0                	jmp    eax
c001ba0b:	90                   	nop

c001ba0c <changeTSS>:
c001ba0c:	83 ec 14             	sub    esp,0x14
c001ba0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba14:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ba17:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ba1c:	c1 e2 15             	shl    edx,0x15
c001ba1f:	29 d0                	sub    eax,edx
c001ba21:	50                   	push   eax
c001ba22:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001ba27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ba2d:	05 7c 11 00 00       	add    eax,0x117c
c001ba32:	50                   	push   eax
c001ba33:	e8 56 55 ff ff       	call   c0010f8e <TSS::setESP(unsigned long)>
c001ba38:	83 c4 1c             	add    esp,0x1c
c001ba3b:	c3                   	ret    

c001ba3c <Process::addArgs(char**)>:
c001ba3c:	57                   	push   edi
c001ba3d:	56                   	push   esi
c001ba3e:	53                   	push   ebx
c001ba3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba47:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ba51:	85 ff                	test   edi,edi
c001ba53:	74 3d                	je     c001ba92 <Process::addArgs(char**)+0x56>
c001ba55:	8b 07                	mov    eax,DWORD PTR [edi]
c001ba57:	85 c0                	test   eax,eax
c001ba59:	74 37                	je     c001ba92 <Process::addArgs(char**)+0x56>
c001ba5b:	31 db                	xor    ebx,ebx
c001ba5d:	83 ec 0c             	sub    esp,0xc
c001ba60:	50                   	push   eax
c001ba61:	e8 34 4c fe ff       	call   c000069a <strlen>
c001ba66:	40                   	inc    eax
c001ba67:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba6a:	e8 5d 3a ff ff       	call   c000f4cc <malloc>
c001ba6f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ba76:	5a                   	pop    edx
c001ba77:	59                   	pop    ecx
c001ba78:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ba7b:	43                   	inc    ebx
c001ba7c:	50                   	push   eax
c001ba7d:	e8 9a 4c fe ff       	call   c000071c <strcpy>
c001ba82:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ba88:	83 c4 10             	add    esp,0x10
c001ba8b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ba8e:	85 c0                	test   eax,eax
c001ba90:	75 cb                	jne    c001ba5d <Process::addArgs(char**)+0x21>
c001ba92:	5b                   	pop    ebx
c001ba93:	5e                   	pop    esi
c001ba94:	5f                   	pop    edi
c001ba95:	c3                   	ret    

c001ba96 <Process::Process(char const*, Process*, char**)>:
c001ba96:	56                   	push   esi
c001ba97:	53                   	push   ebx
c001ba98:	83 ec 14             	sub    esp,0x14
c001ba9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba9f:	05 0c 02 00 00       	add    eax,0x20c
c001baa4:	bb 07 00 00 00       	mov    ebx,0x7
c001baa9:	89 c6                	mov    esi,eax
c001baab:	85 db                	test   ebx,ebx
c001baad:	78 12                	js     c001bac1 <Process::Process(char const*, Process*, char**)+0x2b>
c001baaf:	83 ec 0c             	sub    esp,0xc
c001bab2:	56                   	push   esi
c001bab3:	e8 7a a1 00 00       	call   c0025c32 <ThreadControlBlock::ThreadControlBlock()>
c001bab8:	83 c4 10             	add    esp,0x10
c001babb:	83 c6 63             	add    esi,0x63
c001babe:	4b                   	dec    ebx
c001babf:	eb ea                	jmp    c001baab <Process::Process(char const*, Process*, char**)+0x15>
c001bac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bac5:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bad9:	a1 44 9f 02 c0       	mov    eax,ds:0xc0029f44
c001bade:	8d 50 01             	lea    edx,[eax+0x1]
c001bae1:	89 15 44 9f 02 c0    	mov    DWORD PTR ds:0xc0029f44,edx
c001bae7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001baeb:	89 02                	mov    DWORD PTR [edx],eax
c001baed:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bafc:	e8 cb 39 ff ff       	call   c000f4cc <malloc>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	89 c3                	mov    ebx,eax
c001bb06:	83 ec 08             	sub    esp,0x8
c001bb09:	6a 00                	push   0x0
c001bb0b:	53                   	push   ebx
c001bb0c:	e8 b1 66 ff ff       	call   c00121c2 <VAS::VAS(bool)>
c001bb11:	83 c4 10             	add    esp,0x10
c001bb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb18:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bb1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb22:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb34:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb3e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb44:	85 c0                	test   eax,eax
c001bb46:	74 42                	je     c001bb8a <Process::Process(char const*, Process*, char**)+0xf4>
c001bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb4c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb52:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb5c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb66:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb6c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb76:	05 0c 01 00 00       	add    eax,0x10c
c001bb7b:	83 ec 08             	sub    esp,0x8
c001bb7e:	52                   	push   edx
c001bb7f:	50                   	push   eax
c001bb80:	e8 97 4b fe ff       	call   c000071c <strcpy>
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	eb 63                	jmp    c001bbed <Process::Process(char const*, Process*, char**)+0x157>
c001bb8a:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bb92:	83 ec 0c             	sub    esp,0xc
c001bb95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb99:	e8 2e 39 ff ff       	call   c000f4cc <malloc>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	89 c3                	mov    ebx,eax
c001bba3:	83 ec 08             	sub    esp,0x8
c001bba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbaa:	53                   	push   ebx
c001bbab:	e8 dc 50 ff ff       	call   c0010c8c <VgaText::VgaText(char const*)>
c001bbb0:	83 c4 10             	add    esp,0x10
c001bbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb7:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbc1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	50                   	push   eax
c001bbcb:	e8 bd 44 ff ff       	call   c001008d <addToTerminalCycle(VgaText*)>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbd7:	05 0c 01 00 00       	add    eax,0x10c
c001bbdc:	83 ec 08             	sub    esp,0x8
c001bbdf:	68 5f 8b 02 c0       	push   0xc0028b5f
c001bbe4:	50                   	push   eax
c001bbe5:	e8 32 4b fe ff       	call   c000071c <strcpy>
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf1:	83 c0 0c             	add    eax,0xc
c001bbf4:	83 ec 08             	sub    esp,0x8
c001bbf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbfb:	50                   	push   eax
c001bbfc:	e8 1b 4b fe ff       	call   c000071c <strcpy>
c001bc01:	83 c4 10             	add    esp,0x10
c001bc04:	83 ec 08             	sub    esp,0x8
c001bc07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc0f:	e8 28 fe ff ff       	call   c001ba3c <Process::addArgs(char**)>
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	83 ec 08             	sub    esp,0x8
c001bc1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc22:	e8 73 ee ff ff       	call   c001aa9a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc2e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc32:	83 f0 01             	xor    eax,0x1
c001bc35:	88 c2                	mov    dl,al
c001bc37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc3b:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bc41:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bc46:	83 ec 08             	sub    esp,0x8
c001bc49:	50                   	push   eax
c001bc4a:	68 5c 8c 02 c0       	push   0xc0028c5c
c001bc4f:	e8 eb 69 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	90                   	nop
c001bc58:	83 c4 14             	add    esp,0x14
c001bc5b:	5b                   	pop    ebx
c001bc5c:	5e                   	pop    esi
c001bc5d:	c3                   	ret    

c001bc5e <Process::Process(bool, char const*, Process*, char**)>:
c001bc5e:	56                   	push   esi
c001bc5f:	53                   	push   ebx
c001bc60:	83 ec 24             	sub    esp,0x24
c001bc63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bc67:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc6f:	05 0c 02 00 00       	add    eax,0x20c
c001bc74:	bb 07 00 00 00       	mov    ebx,0x7
c001bc79:	89 c6                	mov    esi,eax
c001bc7b:	85 db                	test   ebx,ebx
c001bc7d:	78 12                	js     c001bc91 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001bc7f:	83 ec 0c             	sub    esp,0xc
c001bc82:	56                   	push   esi
c001bc83:	e8 aa 9f 00 00       	call   c0025c32 <ThreadControlBlock::ThreadControlBlock()>
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	83 c6 63             	add    esi,0x63
c001bc8e:	4b                   	dec    ebx
c001bc8f:	eb ea                	jmp    c001bc7b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001bc91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc95:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bc9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bca0:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bca9:	a1 44 9f 02 c0       	mov    eax,ds:0xc0029f44
c001bcae:	8d 50 01             	lea    edx,[eax+0x1]
c001bcb1:	89 15 44 9f 02 c0    	mov    DWORD PTR ds:0xc0029f44,edx
c001bcb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bcbb:	89 02                	mov    DWORD PTR [edx],eax
c001bcbd:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bccc:	e8 fb 37 ff ff       	call   c000f4cc <malloc>
c001bcd1:	83 c4 10             	add    esp,0x10
c001bcd4:	89 c3                	mov    ebx,eax
c001bcd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bcdb:	83 ec 08             	sub    esp,0x8
c001bcde:	50                   	push   eax
c001bcdf:	53                   	push   ebx
c001bce0:	e8 dd 64 ff ff       	call   c00121c2 <VAS::VAS(bool)>
c001bce5:	83 c4 10             	add    esp,0x10
c001bce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcec:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bcf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcf6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bd00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd04:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bd08:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bd0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd12:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd18:	85 c0                	test   eax,eax
c001bd1a:	74 42                	je     c001bd5e <Process::Process(bool, char const*, Process*, char**)+0x100>
c001bd1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd20:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd26:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bd2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd30:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bd36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd3a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd40:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bd46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd4a:	05 0c 01 00 00       	add    eax,0x10c
c001bd4f:	83 ec 08             	sub    esp,0x8
c001bd52:	52                   	push   edx
c001bd53:	50                   	push   eax
c001bd54:	e8 c3 49 fe ff       	call   c000071c <strcpy>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	eb 63                	jmp    c001bdc1 <Process::Process(bool, char const*, Process*, char**)+0x163>
c001bd5e:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001bd66:	83 ec 0c             	sub    esp,0xc
c001bd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bd6d:	e8 5a 37 ff ff       	call   c000f4cc <malloc>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	89 c3                	mov    ebx,eax
c001bd77:	83 ec 08             	sub    esp,0x8
c001bd7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd7e:	53                   	push   ebx
c001bd7f:	e8 08 4f ff ff       	call   c0010c8c <VgaText::VgaText(char const*)>
c001bd84:	83 c4 10             	add    esp,0x10
c001bd87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd8b:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bd91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd95:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bd9b:	83 ec 0c             	sub    esp,0xc
c001bd9e:	50                   	push   eax
c001bd9f:	e8 e9 42 ff ff       	call   c001008d <addToTerminalCycle(VgaText*)>
c001bda4:	83 c4 10             	add    esp,0x10
c001bda7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdab:	05 0c 01 00 00       	add    eax,0x10c
c001bdb0:	83 ec 08             	sub    esp,0x8
c001bdb3:	68 5f 8b 02 c0       	push   0xc0028b5f
c001bdb8:	50                   	push   eax
c001bdb9:	e8 5e 49 fe ff       	call   c000071c <strcpy>
c001bdbe:	83 c4 10             	add    esp,0x10
c001bdc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdc5:	83 c0 0c             	add    eax,0xc
c001bdc8:	83 ec 08             	sub    esp,0x8
c001bdcb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bdcf:	50                   	push   eax
c001bdd0:	e8 47 49 fe ff       	call   c000071c <strcpy>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	83 ec 08             	sub    esp,0x8
c001bddb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bddf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bde3:	e8 54 fc ff ff       	call   c001ba3c <Process::addArgs(char**)>
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	90                   	nop
c001bdec:	83 c4 24             	add    esp,0x24
c001bdef:	5b                   	pop    ebx
c001bdf0:	5e                   	pop    esi
c001bdf1:	c3                   	ret    

c001bdf2 <disableIRQs()>:
c001bdf2:	fa                   	cli    
c001bdf3:	ff 05 8c be 02 c0    	inc    DWORD PTR ds:0xc002be8c
c001bdf9:	c3                   	ret    

c001bdfa <getIRQNestingLevel()>:
c001bdfa:	a1 8c be 02 c0       	mov    eax,ds:0xc002be8c
c001bdff:	c3                   	ret    

c001be00 <enableIRQs()>:
c001be00:	a1 8c be 02 c0       	mov    eax,ds:0xc002be8c
c001be05:	48                   	dec    eax
c001be06:	a3 8c be 02 c0       	mov    ds:0xc002be8c,eax
c001be0b:	75 01                	jne    c001be0e <enableIRQs()+0xe>
c001be0d:	fb                   	sti    
c001be0e:	c3                   	ret    

c001be0f <lockScheduler()>:
c001be0f:	eb e1                	jmp    c001bdf2 <disableIRQs()>

c001be11 <unlockScheduler()>:
c001be11:	eb ed                	jmp    c001be00 <enableIRQs()>

c001be13 <userModeEntryPoint(void*)>:
c001be13:	83 ec 0c             	sub    esp,0xc
c001be16:	e8 f6 ff ff ff       	call   c001be11 <unlockScheduler()>
c001be1b:	fb                   	sti    
c001be1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be24:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001be2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be2e:	83 c4 0c             	add    esp,0xc
c001be31:	e9 aa 44 fe ff       	jmp    c00002e0 <goToUsermode>

c001be36 <lockStuff()>:
c001be36:	e8 b7 ff ff ff       	call   c001bdf2 <disableIRQs()>
c001be3b:	ff 05 88 be 02 c0    	inc    DWORD PTR ds:0xc002be88
c001be41:	c3                   	ret    

c001be42 <taskStartupFunction>:
c001be42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be47:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001be4a:	c3                   	ret    

c001be4b <updateTimeUsed()>:
c001be4b:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001be50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be56:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001be5d:	74 50                	je     c001beaf <updateTimeUsed()+0x64>
c001be5f:	57                   	push   edi
c001be60:	56                   	push   esi
c001be61:	53                   	push   ebx
c001be62:	0f 31                	rdtsc  
c001be64:	89 c1                	mov    ecx,eax
c001be66:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c001be6b:	2b 0d b8 be 02 c0    	sub    ecx,DWORD PTR ds:0xc002beb8
c001be71:	89 d3                	mov    ebx,edx
c001be73:	89 0d c0 be 02 c0    	mov    DWORD PTR ds:0xc002bec0,ecx
c001be79:	1b 1d bc be 02 c0    	sbb    ebx,DWORD PTR ds:0xc002bebc
c001be7f:	a3 b8 be 02 c0       	mov    ds:0xc002beb8,eax
c001be84:	89 1d c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,ebx
c001be8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be8f:	89 15 cc be 02 c0    	mov    DWORD PTR ds:0xc002becc,edx
c001be95:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001be98:	89 15 bc be 02 c0    	mov    DWORD PTR ds:0xc002bebc,edx
c001be9e:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001bea1:	01 f1                	add    ecx,esi
c001bea3:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001bea6:	11 fb                	adc    ebx,edi
c001bea8:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001beab:	5b                   	pop    ebx
c001beac:	5e                   	pop    esi
c001bead:	5f                   	pop    edi
c001beae:	c3                   	ret    
c001beaf:	c3                   	ret    

c001beb0 <switchToThread(ThreadControlBlock*)>:
c001beb0:	53                   	push   ebx
c001beb1:	83 ec 08             	sub    esp,0x8
c001beb4:	a1 88 be 02 c0       	mov    eax,ds:0xc002be88
c001beb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bebd:	85 c0                	test   eax,eax
c001bebf:	75 30                	jne    c001bef1 <switchToThread(ThreadControlBlock*)+0x41>
c001bec1:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001bec4:	3c ff                	cmp    al,0xff
c001bec6:	74 25                	je     c001beed <switchToThread(ThreadControlBlock*)+0x3d>
c001bec8:	0f b6 d0             	movzx  edx,al
c001becb:	b8 84 03 00 00       	mov    eax,0x384
c001bed0:	29 d0                	sub    eax,edx
c001bed2:	c1 e0 10             	shl    eax,0x10
c001bed5:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001bed8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001bedb:	e8 6b ff ff ff       	call   c001be4b <updateTimeUsed()>
c001bee0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bee4:	83 c4 08             	add    esp,0x8
c001bee7:	5b                   	pop    ebx
c001bee8:	e9 2c 44 fe ff       	jmp    c0000319 <switchToThreadASM>
c001beed:	31 c0                	xor    eax,eax
c001beef:	eb e7                	jmp    c001bed8 <switchToThread(ThreadControlBlock*)+0x28>
c001bef1:	c7 05 84 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be84,0x1
c001befb:	83 c4 08             	add    esp,0x8
c001befe:	5b                   	pop    ebx
c001beff:	c3                   	ret    

c001bf00 <Semaphore::Semaphore(int)>:
c001bf00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf08:	89 10                	mov    DWORD PTR [eax],edx
c001bf0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bf15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf2b:	90                   	nop
c001bf2c:	c3                   	ret    
c001bf2d:	90                   	nop

c001bf2e <Mutex::Mutex()>:
c001bf2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf32:	6a 01                	push   0x1
c001bf34:	50                   	push   eax
c001bf35:	e8 c6 ff ff ff       	call   c001bf00 <Semaphore::Semaphore(int)>
c001bf3a:	83 c4 08             	add    esp,0x8
c001bf3d:	90                   	nop
c001bf3e:	c3                   	ret    
c001bf3f:	90                   	nop

c001bf40 <Process::createThread(void (*)(void*), void*, int)>:
c001bf40:	55                   	push   ebp
c001bf41:	31 c9                	xor    ecx,ecx
c001bf43:	57                   	push   edi
c001bf44:	56                   	push   esi
c001bf45:	53                   	push   ebx
c001bf46:	83 ec 1c             	sub    esp,0x1c
c001bf49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf4d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bf54:	89 f2                	mov    edx,esi
c001bf56:	0f b7 c2             	movzx  eax,dx
c001bf59:	83 e2 01             	and    edx,0x1
c001bf5c:	74 14                	je     c001bf72 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bf5e:	d1 f8                	sar    eax,1
c001bf60:	41                   	inc    ecx
c001bf61:	89 c2                	mov    edx,eax
c001bf63:	83 f9 10             	cmp    ecx,0x10
c001bf66:	75 ee                	jne    c001bf56 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bf68:	83 c4 1c             	add    esp,0x1c
c001bf6b:	31 c0                	xor    eax,eax
c001bf6d:	5b                   	pop    ebx
c001bf6e:	5e                   	pop    esi
c001bf6f:	5f                   	pop    edi
c001bf70:	5d                   	pop    ebp
c001bf71:	c3                   	ret    
c001bf72:	83 ec 08             	sub    esp,0x8
c001bf75:	b8 01 00 00 00       	mov    eax,0x1
c001bf7a:	d3 e0                	shl    eax,cl
c001bf7c:	09 c6                	or     esi,eax
c001bf7e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bf84:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bf8b:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bf8e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bf91:	01 ce                	add    esi,ecx
c001bf93:	89 f0                	mov    eax,esi
c001bf95:	c1 e0 05             	shl    eax,0x5
c001bf98:	01 c6                	add    esi,eax
c001bf9a:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bf9d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bfa3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bfa9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bfad:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bfb3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bfb9:	89 ca                	mov    edx,ecx
c001bfbb:	f7 da                	neg    edx
c001bfbd:	c1 e2 15             	shl    edx,0x15
c001bfc0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bfc6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bfcc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bfd0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bfda:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bfe0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfe4:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bfea:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bff4:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bffe:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c005:	50                   	push   eax
c001c006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c00a:	68 a8 be 02 c0       	push   0xc002bea8
c001c00f:	e8 ac 9a 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c014:	83 c4 10             	add    esp,0x10
c001c017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c01b:	83 c4 1c             	add    esp,0x1c
c001c01e:	5b                   	pop    ebx
c001c01f:	5e                   	pop    esi
c001c020:	5f                   	pop    edi
c001c021:	5d                   	pop    ebp
c001c022:	c3                   	ret    
c001c023:	90                   	nop

c001c024 <Process::createUserThread()>:
c001c024:	83 ec 0c             	sub    esp,0xc
c001c027:	68 80 00 00 00       	push   0x80
c001c02c:	6a 00                	push   0x0
c001c02e:	68 13 be 01 c0       	push   0xc001be13
c001c033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c037:	e8 04 ff ff ff       	call   c001bf40 <Process::createThread(void (*)(void*), void*, int)>
c001c03c:	83 c4 1c             	add    esp,0x1c
c001c03f:	c3                   	ret    

c001c040 <setupMultitasking(void (*)())>:
c001c040:	56                   	push   esi
c001c041:	53                   	push   ebx
c001c042:	53                   	push   ebx
c001c043:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c047:	eb 10                	jmp    c001c059 <setupMultitasking(void (*)())+0x19>
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	68 a8 be 02 c0       	push   0xc002bea8
c001c051:	e8 bc 99 00 00       	call   c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c056:	83 c4 10             	add    esp,0x10
c001c059:	83 ec 0c             	sub    esp,0xc
c001c05c:	68 a8 be 02 c0       	push   0xc002bea8
c001c061:	e8 90 99 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c066:	83 c4 10             	add    esp,0x10
c001c069:	84 c0                	test   al,al
c001c06b:	74 dc                	je     c001c049 <setupMultitasking(void (*)())+0x9>
c001c06d:	83 ec 0c             	sub    esp,0xc
c001c070:	68 3b 07 00 00       	push   0x73b
c001c075:	e8 52 34 ff ff       	call   c000f4cc <malloc>
c001c07a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c081:	89 c3                	mov    ebx,eax
c001c083:	6a 00                	push   0x0
c001c085:	68 63 8b 02 c0       	push   0xc0028b63
c001c08a:	6a 01                	push   0x1
c001c08c:	50                   	push   eax
c001c08d:	e8 cc fb ff ff       	call   c001bc5e <Process::Process(bool, char const*, Process*, char**)>
c001c092:	83 c4 18             	add    esp,0x18
c001c095:	89 1d b4 be 02 c0    	mov    DWORD PTR ds:0xc002beb4,ebx
c001c09b:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c0a1:	68 84 8c 02 c0       	push   0xc0028c84
c001c0a6:	e8 94 65 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c0ab:	58                   	pop    eax
c001c0ac:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c0b2:	e8 4a 47 ff ff       	call   c0010801 <setActiveTerminal(VgaText*)>
c001c0b7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c0bf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c0c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c0c8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c0d2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c0d8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c0de:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c0e8:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c0f2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c0fc:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c102:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c108:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c112:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c118:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c122:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c128:	5a                   	pop    edx
c001c129:	59                   	pop    ecx
c001c12a:	68 5f 8b 02 c0       	push   0xc0028b5f
c001c12f:	50                   	push   eax
c001c130:	e8 e7 45 fe ff       	call   c000071c <strcpy>
c001c135:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c13c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c140:	83 c4 14             	add    esp,0x14
c001c143:	5b                   	pop    ebx
c001c144:	5e                   	pop    esi
c001c145:	e9 c1 41 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001c14a <schedule()>:
c001c14a:	a1 88 be 02 c0       	mov    eax,ds:0xc002be88
c001c14f:	85 c0                	test   eax,eax
c001c151:	74 0b                	je     c001c15e <schedule()+0x14>
c001c153:	c7 05 84 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be84,0x1
c001c15d:	c3                   	ret    
c001c15e:	53                   	push   ebx
c001c15f:	83 ec 14             	sub    esp,0x14
c001c162:	68 a8 be 02 c0       	push   0xc002bea8
c001c167:	e8 8a 98 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	84 c0                	test   al,al
c001c171:	75 38                	jne    c001c1ab <schedule()+0x61>
c001c173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c178:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c17b:	4a                   	dec    edx
c001c17c:	74 32                	je     c001c1b0 <schedule()+0x66>
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	68 a8 be 02 c0       	push   0xc002bea8
c001c186:	e8 63 98 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c18b:	c7 04 24 a8 be 02 c0 	mov    DWORD PTR [esp],0xc002bea8
c001c192:	89 c3                	mov    ebx,eax
c001c194:	e8 79 98 00 00       	call   c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c199:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c1a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1a3:	e8 08 fd ff ff       	call   c001beb0 <switchToThread(ThreadControlBlock*)>
c001c1a8:	83 c4 10             	add    esp,0x10
c001c1ab:	83 c4 08             	add    esp,0x8
c001c1ae:	5b                   	pop    ebx
c001c1af:	c3                   	ret    
c001c1b0:	83 ec 08             	sub    esp,0x8
c001c1b3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c1ba:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c1c0:	68 a8 be 02 c0       	push   0xc002bea8
c001c1c5:	e8 f6 98 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c1ca:	83 c4 10             	add    esp,0x10
c001c1cd:	eb af                	jmp    c001c17e <schedule()+0x34>

c001c1cf <unlockStuff()>:
c001c1cf:	a1 88 be 02 c0       	mov    eax,ds:0xc002be88
c001c1d4:	48                   	dec    eax
c001c1d5:	a3 88 be 02 c0       	mov    ds:0xc002be88,eax
c001c1da:	75 09                	jne    c001c1e5 <unlockStuff()+0x16>
c001c1dc:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001c1e1:	85 c0                	test   eax,eax
c001c1e3:	75 05                	jne    c001c1ea <unlockStuff()+0x1b>
c001c1e5:	e9 16 fc ff ff       	jmp    c001be00 <enableIRQs()>
c001c1ea:	83 ec 0c             	sub    esp,0xc
c001c1ed:	c7 05 84 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be84,0x0
c001c1f7:	e8 4e ff ff ff       	call   c001c14a <schedule()>
c001c1fc:	83 c4 0c             	add    esp,0xc
c001c1ff:	e9 fc fb ff ff       	jmp    c001be00 <enableIRQs()>

c001c204 <Semaphore::tryAcquire()>:
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20b:	e8 26 fc ff ff       	call   c001be36 <lockStuff()>
c001c210:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c213:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c215:	7c 0b                	jl     c001c222 <Semaphore::tryAcquire()+0x1e>
c001c217:	e8 b3 ff ff ff       	call   c001c1cf <unlockStuff()>
c001c21c:	31 c0                	xor    eax,eax
c001c21e:	83 c4 0c             	add    esp,0xc
c001c221:	c3                   	ret    
c001c222:	42                   	inc    edx
c001c223:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c226:	e8 a4 ff ff ff       	call   c001c1cf <unlockStuff()>
c001c22b:	b0 01                	mov    al,0x1
c001c22d:	83 c4 0c             	add    esp,0xc
c001c230:	c3                   	ret    
c001c231:	90                   	nop

c001c232 <Semaphore::assertLocked(char const*)>:
c001c232:	83 ec 0c             	sub    esp,0xc
c001c235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c239:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c23d:	e8 f4 fb ff ff       	call   c001be36 <lockStuff()>
c001c242:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c244:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c247:	7c 05                	jl     c001c24e <Semaphore::assertLocked(char const*)+0x1c>
c001c249:	83 c4 0c             	add    esp,0xc
c001c24c:	eb 81                	jmp    c001c1cf <unlockStuff()>
c001c24e:	83 ec 0c             	sub    esp,0xc
c001c251:	52                   	push   edx
c001c252:	e8 ac cb ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	83 c4 0c             	add    esp,0xc
c001c25d:	e9 6d ff ff ff       	jmp    c001c1cf <unlockStuff()>

c001c262 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c262:	83 ec 0c             	sub    esp,0xc
c001c265:	e8 90 fb ff ff       	call   c001bdfa <getIRQNestingLevel()>
c001c26a:	83 ec 08             	sub    esp,0x8
c001c26d:	50                   	push   eax
c001c26e:	68 b8 8c 02 c0       	push   0xc0028cb8
c001c273:	e8 c7 63 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c278:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c281:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c284:	e8 c1 fe ff ff       	call   c001c14a <schedule()>
c001c289:	e8 83 fb ff ff       	call   c001be11 <unlockScheduler()>
c001c28e:	e8 67 fb ff ff       	call   c001bdfa <getIRQNestingLevel()>
c001c293:	5a                   	pop    edx
c001c294:	59                   	pop    ecx
c001c295:	50                   	push   eax
c001c296:	68 ec 8c 02 c0       	push   0xc0028cec
c001c29b:	e8 9f 63 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c2a0:	83 c4 1c             	add    esp,0x1c
c001c2a3:	c3                   	ret    

c001c2a4 <blockTask(TaskState)>:
c001c2a4:	83 ec 0c             	sub    esp,0xc
c001c2a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2ab:	e8 5f fb ff ff       	call   c001be0f <lockScheduler()>
c001c2b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c2b8:	e8 8d fe ff ff       	call   c001c14a <schedule()>
c001c2bd:	83 c4 0c             	add    esp,0xc
c001c2c0:	e9 4c fb ff ff       	jmp    c001be11 <unlockScheduler()>

c001c2c5 <waitTask(int, int*, int)>:
c001c2c5:	83 ec 18             	sub    esp,0x18
c001c2c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2d1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c2d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2dd:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c2e0:	6a 07                	push   0x7
c001c2e2:	e8 bd ff ff ff       	call   c001c2a4 <blockTask(TaskState)>
c001c2e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2ec:	83 c4 10             	add    esp,0x10
c001c2ef:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c2f2:	85 d2                	test   edx,edx
c001c2f4:	74 0a                	je     c001c300 <waitTask(int, int*, int)+0x3b>
c001c2f6:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c2f9:	89 02                	mov    DWORD PTR [edx],eax
c001c2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c300:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c303:	83 c4 0c             	add    esp,0xc
c001c306:	c3                   	ret    

c001c307 <nanoSleepUntil(unsigned long long)>:
c001c307:	83 ec 0c             	sub    esp,0xc
c001c30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c312:	3b 05 10 b0 02 c0    	cmp    eax,DWORD PTR ds:0xc002b010
c001c318:	89 d1                	mov    ecx,edx
c001c31a:	1b 0d 14 b0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002b014
c001c320:	73 04                	jae    c001c326 <nanoSleepUntil(unsigned long long)+0x1f>
c001c322:	83 c4 0c             	add    esp,0xc
c001c325:	c3                   	ret    
c001c326:	e8 0b fb ff ff       	call   c001be36 <lockStuff()>
c001c32b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c331:	83 ec 08             	sub    esp,0x8
c001c334:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c337:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c33a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c340:	68 9c be 02 c0       	push   0xc002be9c
c001c345:	e8 76 97 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c34a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c351:	e8 4e ff ff ff       	call   c001c2a4 <blockTask(TaskState)>
c001c356:	83 c4 1c             	add    esp,0x1c
c001c359:	e9 71 fe ff ff       	jmp    c001c1cf <unlockStuff()>

c001c35e <nanoSleep(unsigned long long)>:
c001c35e:	a1 10 b0 02 c0       	mov    eax,ds:0xc002b010
c001c363:	8b 15 14 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b014
c001c369:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c36d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c371:	eb 94                	jmp    c001c307 <nanoSleepUntil(unsigned long long)>

c001c373 <sleep(unsigned long long)>:
c001c373:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c37b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c380:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c384:	01 ca                	add    edx,ecx
c001c386:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c38a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c38e:	eb ce                	jmp    c001c35e <nanoSleep(unsigned long long)>

c001c390 <Semaphore::acquire()>:
c001c390:	83 ec 0c             	sub    esp,0xc
c001c393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c397:	e8 9a fa ff ff       	call   c001be36 <lockStuff()>
c001c39c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c39f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c3a1:	7d 0c                	jge    c001c3af <Semaphore::acquire()+0x1f>
c001c3a3:	42                   	inc    edx
c001c3a4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c3a7:	83 c4 0c             	add    esp,0xc
c001c3aa:	e9 20 fe ff ff       	jmp    c001c1cf <unlockStuff()>
c001c3af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3b5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c3bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3bf:	85 d2                	test   edx,edx
c001c3c1:	74 2a                	je     c001c3ed <Semaphore::acquire()+0x5d>
c001c3c3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c3c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c3cc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c3cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3db:	6a 05                	push   0x5
c001c3dd:	e8 c2 fe ff ff       	call   c001c2a4 <blockTask(TaskState)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	83 c4 0c             	add    esp,0xc
c001c3e8:	e9 e2 fd ff ff       	jmp    c001c1cf <unlockStuff()>
c001c3ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3f6:	eb d7                	jmp    c001c3cf <Semaphore::acquire()+0x3f>

c001c3f8 <taskReturned>:
c001c3f8:	83 ec 18             	sub    esp,0x18
c001c3fb:	68 20 8d 02 c0       	push   0xc0028d20
c001c400:	e8 fe c9 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001c405:	83 c4 10             	add    esp,0x10
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	6a 02                	push   0x2
c001c40d:	e8 92 fe ff ff       	call   c001c2a4 <blockTask(TaskState)>
c001c412:	e8 f8 f9 ff ff       	call   c001be0f <lockScheduler()>
c001c417:	e8 2e fd ff ff       	call   c001c14a <schedule()>
c001c41c:	e8 f0 f9 ff ff       	call   c001be11 <unlockScheduler()>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	eb e2                	jmp    c001c408 <taskReturned+0x10>

c001c426 <unblockTask(ThreadControlBlock*)>:
c001c426:	53                   	push   ebx
c001c427:	83 ec 08             	sub    esp,0x8
c001c42a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c42e:	e8 dc f9 ff ff       	call   c001be0f <lockScheduler()>
c001c433:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c436:	85 c0                	test   eax,eax
c001c438:	74 5c                	je     c001c496 <unblockTask(ThreadControlBlock*)+0x70>
c001c43a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c43d:	48                   	dec    eax
c001c43e:	74 31                	je     c001c471 <unblockTask(ThreadControlBlock*)+0x4b>
c001c440:	83 ec 0c             	sub    esp,0xc
c001c443:	68 a8 be 02 c0       	push   0xc002bea8
c001c448:	e8 a1 95 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	85 c0                	test   eax,eax
c001c452:	75 17                	jne    c001c46b <unblockTask(ThreadControlBlock*)+0x45>
c001c454:	eb 65                	jmp    c001c4bb <unblockTask(ThreadControlBlock*)+0x95>
c001c456:	83 ec 08             	sub    esp,0x8
c001c459:	50                   	push   eax
c001c45a:	68 a8 be 02 c0       	push   0xc002bea8
c001c45f:	e8 64 98 00 00       	call   c0025cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	85 c0                	test   eax,eax
c001c469:	74 50                	je     c001c4bb <unblockTask(ThreadControlBlock*)+0x95>
c001c46b:	39 c3                	cmp    ebx,eax
c001c46d:	75 e7                	jne    c001c456 <unblockTask(ThreadControlBlock*)+0x30>
c001c46f:	eb 1c                	jmp    c001c48d <unblockTask(ThreadControlBlock*)+0x67>
c001c471:	83 ec 0c             	sub    esp,0xc
c001c474:	68 10 8e 02 c0       	push   0xc0028e10
c001c479:	e8 c1 61 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c47e:	c7 04 24 9c 8d 02 c0 	mov    DWORD PTR [esp],0xc0028d9c
c001c485:	e8 b5 61 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	83 c4 08             	add    esp,0x8
c001c490:	5b                   	pop    ebx
c001c491:	e9 7b f9 ff ff       	jmp    c001be11 <unlockScheduler()>
c001c496:	83 ec 0c             	sub    esp,0xc
c001c499:	68 54 8d 02 c0       	push   0xc0028d54
c001c49e:	e8 9c 61 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c4a3:	c7 04 24 9c 8d 02 c0 	mov    DWORD PTR [esp],0xc0028d9c
c001c4aa:	e8 90 61 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	83 c4 08             	add    esp,0x8
c001c4b5:	5b                   	pop    ebx
c001c4b6:	e9 56 f9 ff ff       	jmp    c001be11 <unlockScheduler()>
c001c4bb:	83 ec 08             	sub    esp,0x8
c001c4be:	53                   	push   ebx
c001c4bf:	68 a8 be 02 c0       	push   0xc002bea8
c001c4c4:	e8 f7 95 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	83 c4 08             	add    esp,0x8
c001c4cf:	5b                   	pop    ebx
c001c4d0:	e9 3c f9 ff ff       	jmp    c001be11 <unlockScheduler()>

c001c4d5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c4d5:	55                   	push   ebp
c001c4d6:	57                   	push   edi
c001c4d7:	56                   	push   esi
c001c4d8:	53                   	push   ebx
c001c4d9:	83 ec 1c             	sub    esp,0x1c
c001c4dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c4e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c4e3:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c4e9:	85 c9                	test   ecx,ecx
c001c4eb:	7e 20                	jle    c001c50d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c4ed:	31 f6                	xor    esi,esi
c001c4ef:	83 ec 0c             	sub    esp,0xc
c001c4f2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c4f9:	46                   	inc    esi
c001c4fa:	e8 dd 2f ff ff       	call   c000f4dc <free>
c001c4ff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c50b:	7f e2                	jg     c001c4ef <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c50d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c517:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c51c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c51f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c522:	d3 c0                	rol    eax,cl
c001c524:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c52b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c52e:	89 f7                	mov    edi,esi
c001c530:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c538:	0f 85 4f 01 00 00    	jne    c001c68d <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c53e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c544:	85 c0                	test   eax,eax
c001c546:	0f 84 aa 00 00 00    	je     c001c5f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c54c:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c54f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c553:	31 c9                	xor    ecx,ecx
c001c555:	eb 10                	jmp    c001c567 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c557:	41                   	inc    ecx
c001c558:	83 f9 10             	cmp    ecx,0x10
c001c55b:	0f 84 95 00 00 00    	je     c001c5f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c561:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c567:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c56e:	d3 fa                	sar    edx,cl
c001c570:	83 e2 01             	and    edx,0x1
c001c573:	74 e2                	je     c001c557 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c575:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c578:	01 ca                	add    edx,ecx
c001c57a:	89 d5                	mov    ebp,edx
c001c57c:	c1 e5 05             	shl    ebp,0x5
c001c57f:	01 ea                	add    edx,ebp
c001c581:	01 d0                	add    eax,edx
c001c583:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c589:	83 fd 07             	cmp    ebp,0x7
c001c58c:	75 c9                	jne    c001c557 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c58e:	05 40 02 00 00       	add    eax,0x240
c001c593:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c596:	83 fd ff             	cmp    ebp,0xffffffff
c001c599:	0f 8c 08 01 00 00    	jl     c001c6a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c59f:	0f 84 b9 01 00 00    	je     c001c75e <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c5a5:	85 ed                	test   ebp,ebp
c001c5a7:	0f 84 a0 01 00 00    	je     c001c74d <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c5ad:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c5af:	75 a6                	jne    c001c557 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c5b1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c5b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c5bb:	01 d0                	add    eax,edx
c001c5bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c5ca:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c5cd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5d3:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c5da:	50                   	push   eax
c001c5db:	e8 46 fe ff ff       	call   c001c426 <unblockTask(ThreadControlBlock*)>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c5e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5ea:	89 f7                	mov    edi,esi
c001c5ec:	41                   	inc    ecx
c001c5ed:	83 f9 10             	cmp    ecx,0x10
c001c5f0:	0f 85 6b ff ff ff    	jne    c001c561 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c5f6:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c5fc:	85 c0                	test   eax,eax
c001c5fe:	74 5d                	je     c001c65d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c600:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c606:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c60c:	74 4f                	je     c001c65d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c60e:	83 ec 0c             	sub    esp,0xc
c001c611:	68 a8 be 02 c0       	push   0xc002bea8
c001c616:	e8 d3 93 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c61b:	c7 04 24 a8 be 02 c0 	mov    DWORD PTR [esp],0xc002bea8
c001c622:	89 c7                	mov    edi,eax
c001c624:	e8 cd 93 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	84 c0                	test   al,al
c001c62e:	0f 84 e4 00 00 00    	je     c001c718 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c634:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c637:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c63d:	85 d2                	test   edx,edx
c001c63f:	74 0f                	je     c001c650 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c641:	83 ec 0c             	sub    esp,0xc
c001c644:	8b 02                	mov    eax,DWORD PTR [edx]
c001c646:	52                   	push   edx
c001c647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c64a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c64d:	83 c4 10             	add    esp,0x10
c001c650:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c65a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c65d:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c663:	85 db                	test   ebx,ebx
c001c665:	74 16                	je     c001c67d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	53                   	push   ebx
c001c66b:	e8 3e 55 ff ff       	call   c0011bae <VAS::~VAS()>
c001c670:	58                   	pop    eax
c001c671:	5a                   	pop    edx
c001c672:	6a 10                	push   0x10
c001c674:	53                   	push   ebx
c001c675:	e8 e5 5e ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	83 ec 0c             	sub    esp,0xc
c001c680:	68 6a 8b 02 c0       	push   0xc0028b6a
c001c685:	e8 b5 5f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c68a:	83 c4 10             	add    esp,0x10
c001c68d:	83 ec 08             	sub    esp,0x8
c001c690:	68 3b 07 00 00       	push   0x73b
c001c695:	68 78 8b 02 c0       	push   0xc0028b78
c001c69a:	e8 a0 5f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c69f:	83 c4 2c             	add    esp,0x2c
c001c6a2:	5b                   	pop    ebx
c001c6a3:	5e                   	pop    esi
c001c6a4:	5f                   	pop    edi
c001c6a5:	5d                   	pop    ebp
c001c6a6:	c3                   	ret    
c001c6a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c6ab:	83 ec 0c             	sub    esp,0xc
c001c6ae:	68 54 8e 02 c0       	push   0xc0028e54
c001c6b3:	e8 4b c7 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001c6b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	89 f7                	mov    edi,esi
c001c6c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6c4:	e9 8e fe ff ff       	jmp    c001c557 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c6c9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c6cf:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c6d5:	75 1c                	jne    c001c6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c6d7:	83 ec 0c             	sub    esp,0xc
c001c6da:	68 bc 8e 02 c0       	push   0xc0028ebc
c001c6df:	e8 5b 5f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c6e4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c6eb:	e8 b4 fb ff ff       	call   c001c2a4 <blockTask(TaskState)>
c001c6f0:	83 c4 10             	add    esp,0x10
c001c6f3:	83 ec 08             	sub    esp,0x8
c001c6f6:	56                   	push   esi
c001c6f7:	68 a8 be 02 c0       	push   0xc002bea8
c001c6fc:	e8 bf 93 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c701:	c7 04 24 a8 be 02 c0 	mov    DWORD PTR [esp],0xc002bea8
c001c708:	e8 e1 92 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c70d:	83 c4 10             	add    esp,0x10
c001c710:	39 f8                	cmp    eax,edi
c001c712:	0f 84 1c ff ff ff    	je     c001c634 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	68 a8 be 02 c0       	push   0xc002bea8
c001c720:	e8 c9 92 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c725:	c7 04 24 a8 be 02 c0 	mov    DWORD PTR [esp],0xc002bea8
c001c72c:	89 c6                	mov    esi,eax
c001c72e:	e8 df 92 00 00       	call   c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	39 f3                	cmp    ebx,esi
c001c738:	74 b9                	je     c001c6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c73a:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c73d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c740:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c746:	75 ab                	jne    c001c6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c748:	e9 7c ff ff ff       	jmp    c001c6c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c74d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	68 88 8e 02 c0       	push   0xc0028e88
c001c759:	e9 55 ff ff ff       	jmp    c001c6b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c75e:	8b 36                	mov    esi,DWORD PTR [esi]
c001c760:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c764:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c767:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c76a:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c770:	01 d7                	add    edi,edx
c001c772:	89 f8                	mov    eax,edi
c001c774:	e9 44 fe ff ff       	jmp    c001c5bd <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c779 <cleanerTaskFunction(void*)>:
c001c779:	53                   	push   ebx
c001c77a:	83 ec 08             	sub    esp,0x8
c001c77d:	e8 8f f6 ff ff       	call   c001be11 <unlockScheduler()>
c001c782:	e8 88 f6 ff ff       	call   c001be0f <lockScheduler()>
c001c787:	80 3d 6c be 02 c0 00 	cmp    BYTE PTR ds:0xc002be6c,0x0
c001c78e:	0f 85 8e 00 00 00    	jne    c001c822 <cleanerTaskFunction(void*)+0xa9>
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	6a 02                	push   0x2
c001c799:	e8 c4 fa ff ff       	call   c001c262 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c79e:	83 c4 10             	add    esp,0x10
c001c7a1:	c6 05 6c be 02 c0 00 	mov    BYTE PTR ds:0xc002be6c,0x0
c001c7a8:	e8 89 f6 ff ff       	call   c001be36 <lockStuff()>
c001c7ad:	e8 5d f6 ff ff       	call   c001be0f <lockScheduler()>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	68 90 be 02 c0       	push   0xc002be90
c001c7ba:	e8 37 92 00 00       	call   c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	84 c0                	test   al,al
c001c7c4:	75 40                	jne    c001c806 <cleanerTaskFunction(void*)+0x8d>
c001c7c6:	83 ec 0c             	sub    esp,0xc
c001c7c9:	68 90 be 02 c0       	push   0xc002be90
c001c7ce:	e8 1b 92 00 00       	call   c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c7d3:	c7 04 24 90 be 02 c0 	mov    DWORD PTR [esp],0xc002be90
c001c7da:	89 c3                	mov    ebx,eax
c001c7dc:	e8 31 92 00 00       	call   c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c7e1:	c7 04 24 8e 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b8e
c001c7e8:	e8 52 5e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c7ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7f0:	e8 e0 fc ff ff       	call   c001c4d5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c7f5:	c7 04 24 a7 8b 02 c0 	mov    DWORD PTR [esp],0xc0028ba7
c001c7fc:	e8 3e 5e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	eb ac                	jmp    c001c7b2 <cleanerTaskFunction(void*)+0x39>
c001c806:	e8 06 f6 ff ff       	call   c001be11 <unlockScheduler()>
c001c80b:	e8 bf f9 ff ff       	call   c001c1cf <unlockStuff()>
c001c810:	e8 fa f5 ff ff       	call   c001be0f <lockScheduler()>
c001c815:	80 3d 6c be 02 c0 00 	cmp    BYTE PTR ds:0xc002be6c,0x0
c001c81c:	0f 84 72 ff ff ff    	je     c001c794 <cleanerTaskFunction(void*)+0x1b>
c001c822:	e8 ea f5 ff ff       	call   c001be11 <unlockScheduler()>
c001c827:	e9 75 ff ff ff       	jmp    c001c7a1 <cleanerTaskFunction(void*)+0x28>

c001c82c <terminateTask(int)>:
c001c82c:	83 ec 14             	sub    esp,0x14
c001c82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c837:	83 c0 0c             	add    eax,0xc
c001c83a:	50                   	push   eax
c001c83b:	68 e4 8e 02 c0       	push   0xc0028ee4
c001c840:	e8 fa 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c845:	e8 ec f5 ff ff       	call   c001be36 <lockStuff()>
c001c84a:	e8 c0 f5 ff ff       	call   c001be0f <lockScheduler()>
c001c84f:	c7 04 24 ba 8b 02 c0 	mov    DWORD PTR [esp],0xc0028bba
c001c856:	e8 e4 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c85b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c85f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c864:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c86f:	5a                   	pop    edx
c001c870:	59                   	pop    ecx
c001c871:	50                   	push   eax
c001c872:	68 90 be 02 c0       	push   0xc002be90
c001c877:	e8 44 92 00 00       	call   c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c87c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c881:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c888:	c7 04 24 d4 8b 02 c0 	mov    DWORD PTR [esp],0xc0028bd4
c001c88f:	e8 ab 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c894:	83 c4 10             	add    esp,0x10
c001c897:	a1 68 be 02 c0       	mov    eax,ds:0xc002be68
c001c89c:	85 c0                	test   eax,eax
c001c89e:	74 5a                	je     c001c8fa <terminateTask(int)+0xce>
c001c8a0:	83 ec 0c             	sub    esp,0xc
c001c8a3:	68 ee 8b 02 c0       	push   0xc0028bee
c001c8a8:	e8 92 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c8ad:	58                   	pop    eax
c001c8ae:	c6 05 6c be 02 c0 01 	mov    BYTE PTR ds:0xc002be6c,0x1
c001c8b5:	ff 35 68 be 02 c0    	push   DWORD PTR ds:0xc002be68
c001c8bb:	e8 66 fb ff ff       	call   c001c426 <unblockTask(ThreadControlBlock*)>
c001c8c0:	c7 04 24 08 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c08
c001c8c7:	e8 73 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c8cc:	83 c4 10             	add    esp,0x10
c001c8cf:	e8 3d f5 ff ff       	call   c001be11 <unlockScheduler()>
c001c8d4:	e8 f6 f8 ff ff       	call   c001c1cf <unlockStuff()>
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	68 40 8c 02 c0       	push   0xc0028c40
c001c8e1:	e8 59 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c8e6:	83 c4 10             	add    esp,0x10
c001c8e9:	e8 21 f5 ff ff       	call   c001be0f <lockScheduler()>
c001c8ee:	e8 57 f8 ff ff       	call   c001c14a <schedule()>
c001c8f3:	e8 19 f5 ff ff       	call   c001be11 <unlockScheduler()>
c001c8f8:	eb ef                	jmp    c001c8e9 <terminateTask(int)+0xbd>
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	68 22 8c 02 c0       	push   0xc0028c22
c001c902:	e8 38 5d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001c907:	83 c4 10             	add    esp,0x10
c001c90a:	eb c3                	jmp    c001c8cf <terminateTask(int)+0xa3>

c001c90c <Thr::terminateFromIRQ(int)>:
c001c90c:	83 ec 18             	sub    esp,0x18
c001c90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c913:	e8 14 ff ff ff       	call   c001c82c <terminateTask(int)>

c001c918 <Semaphore::release()>:
c001c918:	83 ec 0c             	sub    esp,0xc
c001c91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91f:	e8 12 f5 ff ff       	call   c001be36 <lockStuff()>
c001c924:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c927:	85 d2                	test   edx,edx
c001c929:	74 1a                	je     c001c945 <Semaphore::release()+0x2d>
c001c92b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c92e:	83 ec 0c             	sub    esp,0xc
c001c931:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c934:	52                   	push   edx
c001c935:	e8 ec fa ff ff       	call   c001c426 <unblockTask(ThreadControlBlock*)>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	83 c4 0c             	add    esp,0xc
c001c940:	e9 8a f8 ff ff       	jmp    c001c1cf <unlockStuff()>
c001c945:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c948:	83 c4 0c             	add    esp,0xc
c001c94b:	e9 7f f8 ff ff       	jmp    c001c1cf <unlockStuff()>

c001c950 <__static_initialization_and_destruction_0(int, int)>:
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c958:	0f 85 88 00 00 00    	jne    c001c9e6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c95e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c966:	75 7e                	jne    c001c9e6 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	68 a8 be 02 c0       	push   0xc002bea8
c001c970:	e8 fb 92 00 00       	call   c0025c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	83 ec 04             	sub    esp,0x4
c001c97b:	68 44 99 02 c0       	push   0xc0029944
c001c980:	68 a8 be 02 c0       	push   0xc002bea8
c001c985:	68 30 5c 02 c0       	push   0xc0025c30
c001c98a:	e8 4a 5b ff ff       	call   c00124d9 <__cxa_atexit>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	83 ec 0c             	sub    esp,0xc
c001c995:	68 9c be 02 c0       	push   0xc002be9c
c001c99a:	e8 d1 92 00 00       	call   c0025c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	83 ec 04             	sub    esp,0x4
c001c9a5:	68 44 99 02 c0       	push   0xc0029944
c001c9aa:	68 9c be 02 c0       	push   0xc002be9c
c001c9af:	68 30 5c 02 c0       	push   0xc0025c30
c001c9b4:	e8 20 5b ff ff       	call   c00124d9 <__cxa_atexit>
c001c9b9:	83 c4 10             	add    esp,0x10
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	68 90 be 02 c0       	push   0xc002be90
c001c9c4:	e8 a7 92 00 00       	call   c0025c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	83 ec 04             	sub    esp,0x4
c001c9cf:	68 44 99 02 c0       	push   0xc0029944
c001c9d4:	68 90 be 02 c0       	push   0xc002be90
c001c9d9:	68 30 5c 02 c0       	push   0xc0025c30
c001c9de:	e8 f6 5a ff ff       	call   c00124d9 <__cxa_atexit>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	90                   	nop
c001c9e7:	83 c4 0c             	add    esp,0xc
c001c9ea:	c3                   	ret    

c001c9eb <_GLOBAL__sub_I_kernelProcess>:
c001c9eb:	83 ec 0c             	sub    esp,0xc
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 ff ff 00 00       	push   0xffff
c001c9f6:	6a 01                	push   0x1
c001c9f8:	e8 53 ff ff ff       	call   c001c950 <__static_initialization_and_destruction_0(int, int)>
c001c9fd:	83 c4 10             	add    esp,0x10
c001ca00:	83 c4 0c             	add    esp,0xc
c001ca03:	c3                   	ret    

c001ca04 <Vm::vm8086EntryPoint(void*)>:
c001ca04:	83 ec 0c             	sub    esp,0xc
c001ca07:	e8 05 f4 ff ff       	call   c001be11 <unlockScheduler()>
c001ca0c:	fb                   	sti    
c001ca0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca12:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ca16:	52                   	push   edx
c001ca17:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ca1b:	52                   	push   edx
c001ca1c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ca20:	52                   	push   edx
c001ca21:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ca25:	50                   	push   eax
c001ca26:	e8 84 38 fe ff       	call   c00002af <goToVM86>
c001ca2b:	83 c4 1c             	add    esp,0x1c
c001ca2e:	c3                   	ret    

c001ca2f <Vm::inbv(unsigned short)>:
c001ca2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca33:	ec                   	in     al,dx
c001ca34:	c3                   	ret    

c001ca35 <Vm::outbv(unsigned short, unsigned char)>:
c001ca35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca3d:	ee                   	out    dx,al
c001ca3e:	c3                   	ret    

c001ca3f <Vm::realToLinear(unsigned short, unsigned short)>:
c001ca3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ca44:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ca49:	c1 e0 04             	shl    eax,0x4
c001ca4c:	01 d0                	add    eax,edx
c001ca4e:	c3                   	ret    

c001ca4f <Vm::getSegment(unsigned int)>:
c001ca4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca53:	c1 e8 10             	shr    eax,0x10
c001ca56:	c3                   	ret    

c001ca57 <Vm::getOffset(unsigned int)>:
c001ca57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5b:	c3                   	ret    

c001ca5c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ca5c:	55                   	push   ebp
c001ca5d:	57                   	push   edi
c001ca5e:	56                   	push   esi
c001ca5f:	53                   	push   ebx
c001ca60:	83 ec 2c             	sub    esp,0x2c
c001ca63:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ca67:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ca6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca6f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca73:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca77:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ca7b:	e8 8f f3 ff ff       	call   c001be0f <lockScheduler()>
c001ca80:	68 80 00 00 00       	push   0x80
c001ca85:	6a 00                	push   0x0
c001ca87:	68 04 ca 01 c0       	push   0xc001ca04
c001ca8c:	55                   	push   ebp
c001ca8d:	e8 ae f4 ff ff       	call   c001bf40 <Process::createThread(void (*)(void*), void*, int)>
c001ca92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca96:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ca9a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ca9e:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001caa2:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001caa6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001caaa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cab1:	e8 16 2a ff ff       	call   c000f4cc <malloc>
c001cab6:	83 c4 0c             	add    esp,0xc
c001cab9:	89 c3                	mov    ebx,eax
c001cabb:	55                   	push   ebp
c001cabc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cac0:	50                   	push   eax
c001cac1:	e8 a8 60 ff ff       	call   c0012b6e <File::File(char const*, Process*)>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	85 db                	test   ebx,ebx
c001cacb:	75 0a                	jne    c001cad7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x7b>
c001cacd:	83 ec 0c             	sub    esp,0xc
c001cad0:	68 03 8f 02 c0       	push   0xc0028f03
c001cad5:	eb 24                	jmp    c001cafb <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c001cad7:	50                   	push   eax
c001cad8:	8d 44 24 17          	lea    eax,[esp+0x17]
c001cadc:	50                   	push   eax
c001cadd:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cae1:	50                   	push   eax
c001cae2:	53                   	push   ebx
c001cae3:	e8 96 63 ff ff       	call   c0012e7e <File::stat(unsigned long long*, bool*)>
c001cae8:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001caec:	83 c4 10             	add    esp,0x10
c001caef:	84 d2                	test   dl,dl
c001caf1:	74 1c                	je     c001cb0f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb3>
c001caf3:	83 ec 0c             	sub    esp,0xc
c001caf6:	68 17 8f 02 c0       	push   0xc0028f17
c001cafb:	e8 03 c3 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001cb00:	e8 0c f3 ff ff       	call   c001be11 <unlockScheduler()>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	31 d2                	xor    edx,edx
c001cb0a:	e9 81 00 00 00       	jmp    c001cb90 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x134>
c001cb0f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cb13:	51                   	push   ecx
c001cb14:	51                   	push   ecx
c001cb15:	6a 01                	push   0x1
c001cb17:	53                   	push   ebx
c001cb18:	e8 b5 60 ff ff       	call   c0012bd2 <File::open(FileOpenMode)>
c001cb1d:	83 c4 10             	add    esp,0x10
c001cb20:	85 c0                	test   eax,eax
c001cb22:	74 1b                	je     c001cb3f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe3>
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	68 30 8f 02 c0       	push   0xc0028f30
c001cb2c:	e8 d2 c2 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001cb31:	e8 db f2 ff ff       	call   c001be11 <unlockScheduler()>
c001cb36:	83 c4 10             	add    esp,0x10
c001cb39:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001cb3d:	eb 51                	jmp    c001cb90 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x134>
c001cb3f:	83 ec 0c             	sub    esp,0xc
c001cb42:	0f b7 ff             	movzx  edi,di
c001cb45:	6a 07                	push   0x7
c001cb47:	0f b7 f6             	movzx  esi,si
c001cb4a:	68 00 01 00 00       	push   0x100
c001cb4f:	6a 00                	push   0x0
c001cb51:	6a 00                	push   0x0
c001cb53:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001cb59:	e8 b0 54 ff ff       	call   c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cb5e:	83 c4 18             	add    esp,0x18
c001cb61:	57                   	push   edi
c001cb62:	56                   	push   esi
c001cb63:	e8 d7 fe ff ff       	call   c001ca3f <Vm::realToLinear(unsigned short, unsigned short)>
c001cb68:	5a                   	pop    edx
c001cb69:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cb6b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001cb6f:	51                   	push   ecx
c001cb70:	50                   	push   eax
c001cb71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cb79:	53                   	push   ebx
c001cb7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cb7d:	83 c4 14             	add    esp,0x14
c001cb80:	53                   	push   ebx
c001cb81:	e8 aa 60 ff ff       	call   c0012c30 <File::close()>
c001cb86:	e8 86 f2 ff ff       	call   c001be11 <unlockScheduler()>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	b2 01                	mov    dl,0x1
c001cb90:	83 c4 2c             	add    esp,0x2c
c001cb93:	88 d0                	mov    al,dl
c001cb95:	5b                   	pop    ebx
c001cb96:	5e                   	pop    esi
c001cb97:	5f                   	pop    edi
c001cb98:	5d                   	pop    ebp
c001cb99:	c3                   	ret    

c001cb9a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001cb9a:	57                   	push   edi
c001cb9b:	56                   	push   esi
c001cb9c:	53                   	push   ebx
c001cb9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cba5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cba9:	83 e8 06             	sub    eax,0x6
c001cbac:	0f b7 c0             	movzx  eax,ax
c001cbaf:	50                   	push   eax
c001cbb0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001cbb5:	50                   	push   eax
c001cbb6:	e8 84 fe ff ff       	call   c001ca3f <Vm::realToLinear(unsigned short, unsigned short)>
c001cbbb:	5a                   	pop    edx
c001cbbc:	5e                   	pop    esi
c001cbbd:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001cbc0:	8d 56 fa             	lea    edx,[esi-0x6]
c001cbc3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001cbc9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001cbcc:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001cbcf:	83 c2 02             	add    edx,0x2
c001cbd2:	66 89 10             	mov    WORD PTR [eax],dx
c001cbd5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001cbd8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001cbdc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001cbdf:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001cbe3:	89 d6                	mov    esi,edx
c001cbe5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001cbeb:	66 81 e6 ff fd       	and    si,0xfdff
c001cbf0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001cbf4:	74 07                	je     c001cbfd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001cbf6:	89 d6                	mov    esi,edx
c001cbf8:	66 81 ce 00 02       	or     si,0x200
c001cbfd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001cc01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc06:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cc0a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001cc12:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001cc15:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001cc1d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001cc20:	5b                   	pop    ebx
c001cc21:	5e                   	pop    esi
c001cc22:	5f                   	pop    edi
c001cc23:	c3                   	ret    

c001cc24 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001cc24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc2e:	c1 e0 04             	shl    eax,0x4
c001cc31:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001cc34:	c3                   	ret    

c001cc35 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001cc35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc3f:	c1 e0 04             	shl    eax,0x4
c001cc42:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001cc46:	c3                   	ret    

c001cc47 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001cc47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc51:	c1 e0 04             	shl    eax,0x4
c001cc54:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001cc57:	c3                   	ret    

c001cc58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001cc58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc62:	c1 e0 04             	shl    eax,0x4
c001cc65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc69:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001cc6c:	c3                   	ret    

c001cc6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001cc6d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc72:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc77:	c1 e0 04             	shl    eax,0x4
c001cc7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc7e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001cc82:	c3                   	ret    

c001cc83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001cc83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cc88:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cc8d:	c1 e0 04             	shl    eax,0x4
c001cc90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc94:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001cc97:	c3                   	ret    

c001cc98 <Vm::faultHandler(regs*)>:
c001cc98:	55                   	push   ebp
c001cc99:	57                   	push   edi
c001cc9a:	56                   	push   esi
c001cc9b:	53                   	push   ebx
c001cc9c:	83 ec 1c             	sub    esp,0x1c
c001cc9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cca3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001cca6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ccaa:	0f b7 f0             	movzx  esi,ax
c001ccad:	52                   	push   edx
c001ccae:	0f b7 c0             	movzx  eax,ax
c001ccb1:	50                   	push   eax
c001ccb2:	e8 88 fd ff ff       	call   c001ca3f <Vm::realToLinear(unsigned short, unsigned short)>
c001ccb7:	5a                   	pop    edx
c001ccb8:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ccbb:	59                   	pop    ecx
c001ccbc:	89 c7                	mov    edi,eax
c001ccbe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ccc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccc5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ccca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccce:	0f b7 c5             	movzx  eax,bp
c001ccd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccd5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ccd9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccdd:	e8 5d fd ff ff       	call   c001ca3f <Vm::realToLinear(unsigned short, unsigned short)>
c001cce2:	5a                   	pop    edx
c001cce3:	59                   	pop    ecx
c001cce4:	b1 06                	mov    cl,0x6
c001cce6:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cceb:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ccf0:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001ccf3:	80 fa 9d             	cmp    dl,0x9d
c001ccf6:	0f 84 1d 02 00 00    	je     c001cf19 <Vm::faultHandler(regs*)+0x281>
c001ccfc:	0f 87 8e 00 00 00    	ja     c001cd90 <Vm::faultHandler(regs*)+0xf8>
c001cd02:	80 fa 66             	cmp    dl,0x66
c001cd05:	0f 84 89 01 00 00    	je     c001ce94 <Vm::faultHandler(regs*)+0x1fc>
c001cd0b:	77 44                	ja     c001cd51 <Vm::faultHandler(regs*)+0xb9>
c001cd0d:	80 fa 36             	cmp    dl,0x36
c001cd10:	0f 84 74 01 00 00    	je     c001ce8a <Vm::faultHandler(regs*)+0x1f2>
c001cd16:	77 1a                	ja     c001cd32 <Vm::faultHandler(regs*)+0x9a>
c001cd18:	80 fa 26             	cmp    dl,0x26
c001cd1b:	0f 84 4b 01 00 00    	je     c001ce6c <Vm::faultHandler(regs*)+0x1d4>
c001cd21:	80 fa 2e             	cmp    dl,0x2e
c001cd24:	0f 85 4a 05 00 00    	jne    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001cd2a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd2d:	31 c9                	xor    ecx,ecx
c001cd2f:	47                   	inc    edi
c001cd30:	eb be                	jmp    c001ccf0 <Vm::faultHandler(regs*)+0x58>
c001cd32:	80 fa 64             	cmp    dl,0x64
c001cd35:	0f 84 3b 01 00 00    	je     c001ce76 <Vm::faultHandler(regs*)+0x1de>
c001cd3b:	0f 87 3f 01 00 00    	ja     c001ce80 <Vm::faultHandler(regs*)+0x1e8>
c001cd41:	80 fa 3e             	cmp    dl,0x3e
c001cd44:	0f 85 2a 05 00 00    	jne    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001cd4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd4d:	b1 01                	mov    cl,0x1
c001cd4f:	eb de                	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001cd51:	80 fa 6d             	cmp    dl,0x6d
c001cd54:	0f 84 bf 02 00 00    	je     c001d019 <Vm::faultHandler(regs*)+0x381>
c001cd5a:	77 17                	ja     c001cd73 <Vm::faultHandler(regs*)+0xdb>
c001cd5c:	80 fa 67             	cmp    dl,0x67
c001cd5f:	0f 84 3c 01 00 00    	je     c001cea1 <Vm::faultHandler(regs*)+0x209>
c001cd65:	80 fa 6c             	cmp    dl,0x6c
c001cd68:	0f 84 5d 02 00 00    	je     c001cfcb <Vm::faultHandler(regs*)+0x333>
c001cd6e:	e9 01 05 00 00       	jmp    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001cd73:	80 fa 6f             	cmp    dl,0x6f
c001cd76:	0f 84 8b 03 00 00    	je     c001d107 <Vm::faultHandler(regs*)+0x46f>
c001cd7c:	0f 82 0f 03 00 00    	jb     c001d091 <Vm::faultHandler(regs*)+0x3f9>
c001cd82:	80 fa 9c             	cmp    dl,0x9c
c001cd85:	0f 84 23 01 00 00    	je     c001ceae <Vm::faultHandler(regs*)+0x216>
c001cd8b:	e9 e4 04 00 00       	jmp    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001cd90:	80 fa ec             	cmp    dl,0xec
c001cd93:	0f 84 7f 04 00 00    	je     c001d218 <Vm::faultHandler(regs*)+0x580>
c001cd99:	77 7b                	ja     c001ce16 <Vm::faultHandler(regs*)+0x17e>
c001cd9b:	80 fa e4             	cmp    dl,0xe4
c001cd9e:	0f 84 fe 03 00 00    	je     c001d1a2 <Vm::faultHandler(regs*)+0x50a>
c001cda4:	77 53                	ja     c001cdf9 <Vm::faultHandler(regs*)+0x161>
c001cda6:	80 fa cd             	cmp    dl,0xcd
c001cda9:	0f 84 cd 01 00 00    	je     c001cf7c <Vm::faultHandler(regs*)+0x2e4>
c001cdaf:	80 fa cf             	cmp    dl,0xcf
c001cdb2:	0f 85 bc 04 00 00    	jne    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001cdb8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cdbb:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001cdbe:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001cdc2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001cdc5:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001cdc9:	81 ca 00 02 02 00    	or     edx,0x20200
c001cdcf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cdd2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001cdd6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cddc:	66 c1 e8 09          	shr    ax,0x9
c001cde0:	83 e0 01             	and    eax,0x1
c001cde3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cde6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cde9:	83 c0 06             	add    eax,0x6
c001cdec:	25 ff ff 00 00       	and    eax,0xffff
c001cdf1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cdf4:	e9 77 04 00 00       	jmp    c001d270 <Vm::faultHandler(regs*)+0x5d8>
c001cdf9:	80 fa e6             	cmp    dl,0xe6
c001cdfc:	0f 84 ea 03 00 00    	je     c001d1ec <Vm::faultHandler(regs*)+0x554>
c001ce02:	0f 82 b6 03 00 00    	jb     c001d1be <Vm::faultHandler(regs*)+0x526>
c001ce08:	80 fa e7             	cmp    dl,0xe7
c001ce0b:	0f 84 f2 03 00 00    	je     c001d203 <Vm::faultHandler(regs*)+0x56b>
c001ce11:	e9 5e 04 00 00       	jmp    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001ce16:	80 fa ef             	cmp    dl,0xef
c001ce19:	0f 84 3c 04 00 00    	je     c001d25b <Vm::faultHandler(regs*)+0x5c3>
c001ce1f:	77 28                	ja     c001ce49 <Vm::faultHandler(regs*)+0x1b1>
c001ce21:	80 fa ed             	cmp    dl,0xed
c001ce24:	0f 84 0a 04 00 00    	je     c001d234 <Vm::faultHandler(regs*)+0x59c>
c001ce2a:	80 fa ee             	cmp    dl,0xee
c001ce2d:	0f 85 41 04 00 00    	jne    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001ce33:	50                   	push   eax
c001ce34:	50                   	push   eax
c001ce35:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ce39:	50                   	push   eax
c001ce3a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ce3e:	50                   	push   eax
c001ce3f:	e8 f1 fb ff ff       	call   c001ca35 <Vm::outbv(unsigned short, unsigned char)>
c001ce44:	e9 0a 04 00 00       	jmp    c001d253 <Vm::faultHandler(regs*)+0x5bb>
c001ce49:	80 fa fa             	cmp    dl,0xfa
c001ce4c:	0f 84 5d 01 00 00    	je     c001cfaf <Vm::faultHandler(regs*)+0x317>
c001ce52:	80 fa fb             	cmp    dl,0xfb
c001ce55:	0f 84 62 01 00 00    	je     c001cfbd <Vm::faultHandler(regs*)+0x325>
c001ce5b:	80 fa f3             	cmp    dl,0xf3
c001ce5e:	0f 85 10 04 00 00    	jne    c001d274 <Vm::faultHandler(regs*)+0x5dc>
c001ce64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce67:	e9 c3 fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ce6c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce6f:	b1 02                	mov    cl,0x2
c001ce71:	e9 b9 fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ce76:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce79:	b1 03                	mov    cl,0x3
c001ce7b:	e9 af fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ce80:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce83:	b1 04                	mov    cl,0x4
c001ce85:	e9 a5 fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ce8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce8d:	b1 05                	mov    cl,0x5
c001ce8f:	e9 9b fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ce94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce97:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ce9c:	e9 8e fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001cea1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cea4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cea9:	e9 81 fe ff ff       	jmp    c001cd2f <Vm::faultHandler(regs*)+0x97>
c001ceae:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ceb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ceb5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ceba:	74 30                	je     c001ceec <Vm::faultHandler(regs*)+0x254>
c001cebc:	83 e9 04             	sub    ecx,0x4
c001cebf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cec5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cecb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cece:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ced1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ced7:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cedb:	0f 84 8c 03 00 00    	je     c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001cee1:	80 ce 02             	or     dh,0x2
c001cee4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cee7:	e9 81 03 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001ceec:	83 e9 02             	sub    ecx,0x2
c001ceef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cef5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cef8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cefc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cf02:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cf06:	74 05                	je     c001cf0d <Vm::faultHandler(regs*)+0x275>
c001cf08:	80 ce 02             	or     dh,0x2
c001cf0b:	eb 03                	jmp    c001cf10 <Vm::faultHandler(regs*)+0x278>
c001cf0d:	80 e6 fd             	and    dh,0xfd
c001cf10:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cf14:	e9 54 03 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001cf19:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cf1e:	74 2a                	je     c001cf4a <Vm::faultHandler(regs*)+0x2b2>
c001cf20:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf22:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cf28:	81 ca 00 02 02 00    	or     edx,0x20200
c001cf2e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cf31:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf33:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cf39:	c1 e8 09             	shr    eax,0x9
c001cf3c:	83 e0 01             	and    eax,0x1
c001cf3f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cf42:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cf45:	83 c0 04             	add    eax,0x4
c001cf48:	eb 25                	jmp    c001cf6f <Vm::faultHandler(regs*)+0x2d7>
c001cf4a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cf4d:	81 ca 00 02 02 00    	or     edx,0x20200
c001cf53:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cf56:	66 8b 00             	mov    ax,WORD PTR [eax]
c001cf59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cf5f:	66 c1 e8 09          	shr    ax,0x9
c001cf63:	83 e0 01             	and    eax,0x1
c001cf66:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cf69:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cf6c:	83 c0 02             	add    eax,0x2
c001cf6f:	25 ff ff 00 00       	and    eax,0xffff
c001cf74:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cf77:	e9 f1 02 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001cf7c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cf80:	3c ff                	cmp    al,0xff
c001cf82:	75 10                	jne    c001cf94 <Vm::faultHandler(regs*)+0x2fc>
c001cf84:	83 ec 0c             	sub    esp,0xc
c001cf87:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001cf8a:	e8 7d f9 ff ff       	call   c001c90c <Thr::terminateFromIRQ(int)>
c001cf8f:	e9 c2 02 00 00       	jmp    c001d256 <Vm::faultHandler(regs*)+0x5be>
c001cf94:	83 ec 0c             	sub    esp,0xc
c001cf97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9f:	57                   	push   edi
c001cfa0:	50                   	push   eax
c001cfa1:	53                   	push   ebx
c001cfa2:	e8 f3 fb ff ff       	call   c001cb9a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cfa7:	83 c4 20             	add    esp,0x20
c001cfaa:	e9 c1 02 00 00       	jmp    c001d270 <Vm::faultHandler(regs*)+0x5d8>
c001cfaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfb4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cfb8:	e9 b0 02 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001cfbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfc2:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cfc6:	e9 a2 02 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001cfcb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cfd0:	74 0d                	je     c001cfdf <Vm::faultHandler(regs*)+0x347>
c001cfd2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cfd9:	0f 87 e9 02 00 00    	ja     c001d2c8 <Vm::faultHandler(regs*)+0x630>
c001cfdf:	83 ec 0c             	sub    esp,0xc
c001cfe2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cfe5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cfe9:	50                   	push   eax
c001cfea:	e8 40 fa ff ff       	call   c001ca2f <Vm::inbv(unsigned short)>
c001cfef:	83 c4 0c             	add    esp,0xc
c001cff2:	0f b6 c0             	movzx  eax,al
c001cff5:	0f b7 c9             	movzx  ecx,cx
c001cff8:	50                   	push   eax
c001cff9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cffd:	50                   	push   eax
c001cffe:	51                   	push   ecx
c001cfff:	e8 54 fc ff ff       	call   c001cc58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d004:	83 c4 10             	add    esp,0x10
c001d007:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d00a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d00e:	74 03                	je     c001d013 <Vm::faultHandler(regs*)+0x37b>
c001d010:	48                   	dec    eax
c001d011:	eb 01                	jmp    c001d014 <Vm::faultHandler(regs*)+0x37c>
c001d013:	40                   	inc    eax
c001d014:	0f b7 c0             	movzx  eax,ax
c001d017:	eb 70                	jmp    c001d089 <Vm::faultHandler(regs*)+0x3f1>
c001d019:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d01c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d01f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d024:	74 0c                	je     c001d032 <Vm::faultHandler(regs*)+0x39a>
c001d026:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d02c:	0f 87 96 02 00 00    	ja     c001d2c8 <Vm::faultHandler(regs*)+0x630>
c001d032:	0f b7 c9             	movzx  ecx,cx
c001d035:	0f b7 f6             	movzx  esi,si
c001d038:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d03b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d040:	74 20                	je     c001d062 <Vm::faultHandler(regs*)+0x3ca>
c001d042:	ed                   	in     eax,dx
c001d043:	55                   	push   ebp
c001d044:	50                   	push   eax
c001d045:	51                   	push   ecx
c001d046:	56                   	push   esi
c001d047:	e8 37 fc ff ff       	call   c001cc83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d04c:	83 c4 10             	add    esp,0x10
c001d04f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d052:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d056:	74 05                	je     c001d05d <Vm::faultHandler(regs*)+0x3c5>
c001d058:	83 e8 04             	sub    eax,0x4
c001d05b:	eb 27                	jmp    c001d084 <Vm::faultHandler(regs*)+0x3ec>
c001d05d:	83 c0 04             	add    eax,0x4
c001d060:	eb 22                	jmp    c001d084 <Vm::faultHandler(regs*)+0x3ec>
c001d062:	66 ed                	in     ax,dx
c001d064:	0f b7 c0             	movzx  eax,ax
c001d067:	57                   	push   edi
c001d068:	50                   	push   eax
c001d069:	51                   	push   ecx
c001d06a:	56                   	push   esi
c001d06b:	e8 fd fb ff ff       	call   c001cc6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d076:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d07a:	74 05                	je     c001d081 <Vm::faultHandler(regs*)+0x3e9>
c001d07c:	83 e8 02             	sub    eax,0x2
c001d07f:	eb 03                	jmp    c001d084 <Vm::faultHandler(regs*)+0x3ec>
c001d081:	83 c0 02             	add    eax,0x2
c001d084:	25 ff ff 00 00       	and    eax,0xffff
c001d089:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d08c:	e9 dc 01 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001d091:	49                   	dec    ecx
c001d092:	80 f9 05             	cmp    cl,0x5
c001d095:	77 24                	ja     c001d0bb <Vm::faultHandler(regs*)+0x423>
c001d097:	0f b6 c9             	movzx  ecx,cl
c001d09a:	ff 24 8d 78 8f 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7088]
c001d0a1:	0f b7 f5             	movzx  esi,bp
c001d0a4:	eb 15                	jmp    c001d0bb <Vm::faultHandler(regs*)+0x423>
c001d0a6:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d0aa:	eb 0f                	jmp    c001d0bb <Vm::faultHandler(regs*)+0x423>
c001d0ac:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d0b0:	eb 09                	jmp    c001d0bb <Vm::faultHandler(regs*)+0x423>
c001d0b2:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d0b6:	eb 03                	jmp    c001d0bb <Vm::faultHandler(regs*)+0x423>
c001d0b8:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d0bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0be:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d0c3:	74 0b                	je     c001d0d0 <Vm::faultHandler(regs*)+0x438>
c001d0c5:	3d ff ff 00 00       	cmp    eax,0xffff
c001d0ca:	0f 87 f8 01 00 00    	ja     c001d2c8 <Vm::faultHandler(regs*)+0x630>
c001d0d0:	0f b7 c0             	movzx  eax,ax
c001d0d3:	52                   	push   edx
c001d0d4:	52                   	push   edx
c001d0d5:	50                   	push   eax
c001d0d6:	56                   	push   esi
c001d0d7:	e8 48 fb ff ff       	call   c001cc24 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d0dc:	59                   	pop    ecx
c001d0dd:	0f b6 c0             	movzx  eax,al
c001d0e0:	5e                   	pop    esi
c001d0e1:	50                   	push   eax
c001d0e2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d0e6:	50                   	push   eax
c001d0e7:	e8 49 f9 ff ff       	call   c001ca35 <Vm::outbv(unsigned short, unsigned char)>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0f2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d0f6:	74 03                	je     c001d0fb <Vm::faultHandler(regs*)+0x463>
c001d0f8:	48                   	dec    eax
c001d0f9:	eb 01                	jmp    c001d0fc <Vm::faultHandler(regs*)+0x464>
c001d0fb:	40                   	inc    eax
c001d0fc:	0f b7 c0             	movzx  eax,ax
c001d0ff:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d102:	e9 66 01 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001d107:	49                   	dec    ecx
c001d108:	80 f9 05             	cmp    cl,0x5
c001d10b:	77 1f                	ja     c001d12c <Vm::faultHandler(regs*)+0x494>
c001d10d:	0f b6 c9             	movzx  ecx,cl
c001d110:	ff 24 8d 90 8f 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7070]
c001d117:	89 ee                	mov    esi,ebp
c001d119:	eb 11                	jmp    c001d12c <Vm::faultHandler(regs*)+0x494>
c001d11b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d11e:	eb 0c                	jmp    c001d12c <Vm::faultHandler(regs*)+0x494>
c001d120:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d123:	eb 07                	jmp    c001d12c <Vm::faultHandler(regs*)+0x494>
c001d125:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d128:	eb 02                	jmp    c001d12c <Vm::faultHandler(regs*)+0x494>
c001d12a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d12c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d12f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d134:	74 0c                	je     c001d142 <Vm::faultHandler(regs*)+0x4aa>
c001d136:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d13c:	0f 87 86 01 00 00    	ja     c001d2c8 <Vm::faultHandler(regs*)+0x630>
c001d142:	0f b7 d6             	movzx  edx,si
c001d145:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d148:	0f b7 c1             	movzx  eax,cx
c001d14b:	81 e7 00 04 00 00    	and    edi,0x400
c001d151:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d154:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d159:	74 1d                	je     c001d178 <Vm::faultHandler(regs*)+0x4e0>
c001d15b:	55                   	push   ebp
c001d15c:	55                   	push   ebp
c001d15d:	50                   	push   eax
c001d15e:	52                   	push   edx
c001d15f:	e8 e3 fa ff ff       	call   c001cc47 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d164:	83 c4 10             	add    esp,0x10
c001d167:	89 f2                	mov    edx,esi
c001d169:	ef                   	out    dx,eax
c001d16a:	85 ff                	test   edi,edi
c001d16c:	74 05                	je     c001d173 <Vm::faultHandler(regs*)+0x4db>
c001d16e:	83 e9 04             	sub    ecx,0x4
c001d171:	eb 21                	jmp    c001d194 <Vm::faultHandler(regs*)+0x4fc>
c001d173:	83 c1 04             	add    ecx,0x4
c001d176:	eb 1c                	jmp    c001d194 <Vm::faultHandler(regs*)+0x4fc>
c001d178:	55                   	push   ebp
c001d179:	55                   	push   ebp
c001d17a:	50                   	push   eax
c001d17b:	52                   	push   edx
c001d17c:	e8 b4 fa ff ff       	call   c001cc35 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	89 f2                	mov    edx,esi
c001d186:	66 ef                	out    dx,ax
c001d188:	85 ff                	test   edi,edi
c001d18a:	74 05                	je     c001d191 <Vm::faultHandler(regs*)+0x4f9>
c001d18c:	83 e9 02             	sub    ecx,0x2
c001d18f:	eb 03                	jmp    c001d194 <Vm::faultHandler(regs*)+0x4fc>
c001d191:	83 c1 02             	add    ecx,0x2
c001d194:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d19a:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d19d:	e9 cb 00 00 00       	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001d1a2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d1a9:	83 ec 0c             	sub    esp,0xc
c001d1ac:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d1b0:	50                   	push   eax
c001d1b1:	e8 79 f8 ff ff       	call   c001ca2f <Vm::inbv(unsigned short)>
c001d1b6:	0f b6 c0             	movzx  eax,al
c001d1b9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d1bc:	eb 3f                	jmp    c001d1fd <Vm::faultHandler(regs*)+0x565>
c001d1be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d1c3:	74 07                	je     c001d1cc <Vm::faultHandler(regs*)+0x534>
c001d1c5:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d1c9:	ed                   	in     eax,dx
c001d1ca:	eb 14                	jmp    c001d1e0 <Vm::faultHandler(regs*)+0x548>
c001d1cc:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d1cf:	66 31 c9             	xor    cx,cx
c001d1d2:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d1d5:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d1d9:	66 ed                	in     ax,dx
c001d1db:	0f b7 c0             	movzx  eax,ax
c001d1de:	09 c8                	or     eax,ecx
c001d1e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d1e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d1e7:	e9 84 00 00 00       	jmp    c001d270 <Vm::faultHandler(regs*)+0x5d8>
c001d1ec:	52                   	push   edx
c001d1ed:	52                   	push   edx
c001d1ee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d1f2:	50                   	push   eax
c001d1f3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d1f7:	50                   	push   eax
c001d1f8:	e8 38 f8 ff ff       	call   c001ca35 <Vm::outbv(unsigned short, unsigned char)>
c001d1fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d201:	eb 53                	jmp    c001d256 <Vm::faultHandler(regs*)+0x5be>
c001d203:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d206:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d20a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d20f:	74 03                	je     c001d214 <Vm::faultHandler(regs*)+0x57c>
c001d211:	ef                   	out    dx,eax
c001d212:	eb cf                	jmp    c001d1e3 <Vm::faultHandler(regs*)+0x54b>
c001d214:	66 ef                	out    dx,ax
c001d216:	eb cb                	jmp    c001d1e3 <Vm::faultHandler(regs*)+0x54b>
c001d218:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d21f:	83 ec 0c             	sub    esp,0xc
c001d222:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d226:	50                   	push   eax
c001d227:	e8 03 f8 ff ff       	call   c001ca2f <Vm::inbv(unsigned short)>
c001d22c:	0f b6 c0             	movzx  eax,al
c001d22f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d232:	eb 1f                	jmp    c001d253 <Vm::faultHandler(regs*)+0x5bb>
c001d234:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d237:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d23c:	74 03                	je     c001d241 <Vm::faultHandler(regs*)+0x5a9>
c001d23e:	ed                   	in     eax,dx
c001d23f:	eb 0d                	jmp    c001d24e <Vm::faultHandler(regs*)+0x5b6>
c001d241:	66 ed                	in     ax,dx
c001d243:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d246:	0f b7 c0             	movzx  eax,ax
c001d249:	66 31 d2             	xor    dx,dx
c001d24c:	09 d0                	or     eax,edx
c001d24e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d251:	eb 1a                	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001d253:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d256:	83 c4 10             	add    esp,0x10
c001d259:	eb 15                	jmp    c001d270 <Vm::faultHandler(regs*)+0x5d8>
c001d25b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d25e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d261:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d266:	74 03                	je     c001d26b <Vm::faultHandler(regs*)+0x5d3>
c001d268:	ef                   	out    dx,eax
c001d269:	eb 02                	jmp    c001d26d <Vm::faultHandler(regs*)+0x5d5>
c001d26b:	66 ef                	out    dx,ax
c001d26d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d270:	b0 01                	mov    al,0x1
c001d272:	eb 56                	jmp    c001d2ca <Vm::faultHandler(regs*)+0x632>
c001d274:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001d278:	50                   	push   eax
c001d279:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001d27d:	50                   	push   eax
c001d27e:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001d282:	50                   	push   eax
c001d283:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001d287:	50                   	push   eax
c001d288:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d28c:	50                   	push   eax
c001d28d:	52                   	push   edx
c001d28e:	52                   	push   edx
c001d28f:	68 49 8f 02 c0       	push   0xc0028f49
c001d294:	e8 a6 53 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001d299:	83 c4 20             	add    esp,0x20
c001d29c:	83 ec 0c             	sub    esp,0xc
c001d29f:	6a 60                	push   0x60
c001d2a1:	e8 89 f7 ff ff       	call   c001ca2f <Vm::inbv(unsigned short)>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	3c 1c                	cmp    al,0x1c
c001d2ab:	74 04                	je     c001d2b1 <Vm::faultHandler(regs*)+0x619>
c001d2ad:	3c 5a                	cmp    al,0x5a
c001d2af:	75 eb                	jne    c001d29c <Vm::faultHandler(regs*)+0x604>
c001d2b1:	3c 5a                	cmp    al,0x5a
c001d2b3:	74 04                	je     c001d2b9 <Vm::faultHandler(regs*)+0x621>
c001d2b5:	3c 1c                	cmp    al,0x1c
c001d2b7:	75 0f                	jne    c001d2c8 <Vm::faultHandler(regs*)+0x630>
c001d2b9:	83 ec 0c             	sub    esp,0xc
c001d2bc:	6a 60                	push   0x60
c001d2be:	e8 6c f7 ff ff       	call   c001ca2f <Vm::inbv(unsigned short)>
c001d2c3:	83 c4 10             	add    esp,0x10
c001d2c6:	eb e9                	jmp    c001d2b1 <Vm::faultHandler(regs*)+0x619>
c001d2c8:	31 c0                	xor    eax,eax
c001d2ca:	83 c4 1c             	add    esp,0x1c
c001d2cd:	5b                   	pop    ebx
c001d2ce:	5e                   	pop    esi
c001d2cf:	5f                   	pop    edi
c001d2d0:	5d                   	pop    ebp
c001d2d1:	c3                   	ret    

c001d2d2 <Vm::fpuInternalTo32(unsigned long long)>:
c001d2d2:	57                   	push   edi
c001d2d3:	56                   	push   esi
c001d2d4:	53                   	push   ebx
c001d2d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2dd:	89 d6                	mov    esi,edx
c001d2df:	89 d7                	mov    edi,edx
c001d2e1:	89 c1                	mov    ecx,eax
c001d2e3:	c1 ef 14             	shr    edi,0x14
c001d2e6:	89 d3                	mov    ebx,edx
c001d2e8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d2ee:	31 d2                	xor    edx,edx
c001d2f0:	89 f8                	mov    eax,edi
c001d2f2:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d2f8:	bf ff 00 00 00       	mov    edi,0xff
c001d2fd:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d302:	83 d2 ff             	adc    edx,0xffffffff
c001d305:	39 c7                	cmp    edi,eax
c001d307:	bf 00 00 00 00       	mov    edi,0x0
c001d30c:	19 d7                	sbb    edi,edx
c001d30e:	72 15                	jb     c001d325 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d310:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d314:	c1 e0 17             	shl    eax,0x17
c001d317:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d31d:	09 f1                	or     ecx,esi
c001d31f:	09 c1                	or     ecx,eax
c001d321:	89 cf                	mov    edi,ecx
c001d323:	eb 02                	jmp    c001d327 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d325:	31 ff                	xor    edi,edi
c001d327:	89 f8                	mov    eax,edi
c001d329:	5b                   	pop    ebx
c001d32a:	5e                   	pop    esi
c001d32b:	5f                   	pop    edi
c001d32c:	c3                   	ret    

c001d32d <Vm::fpuInternalTo64(unsigned long long)>:
c001d32d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d335:	c3                   	ret    

c001d336 <Vm::fpu32ToInternal(unsigned int)>:
c001d336:	57                   	push   edi
c001d337:	31 ff                	xor    edi,edi
c001d339:	56                   	push   esi
c001d33a:	53                   	push   ebx
c001d33b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d33f:	89 cb                	mov    ebx,ecx
c001d341:	89 ce                	mov    esi,ecx
c001d343:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d349:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d34f:	c1 e9 17             	shr    ecx,0x17
c001d352:	89 f0                	mov    eax,esi
c001d354:	0f b6 d1             	movzx  edx,cl
c001d357:	81 c2 80 03 00 00    	add    edx,0x380
c001d35d:	89 d1                	mov    ecx,edx
c001d35f:	89 fa                	mov    edx,edi
c001d361:	c1 e1 14             	shl    ecx,0x14
c001d364:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d368:	c1 e0 1d             	shl    eax,0x1d
c001d36b:	89 d7                	mov    edi,edx
c001d36d:	89 c6                	mov    esi,eax
c001d36f:	89 ca                	mov    edx,ecx
c001d371:	89 f0                	mov    eax,esi
c001d373:	09 fa                	or     edx,edi
c001d375:	09 da                	or     edx,ebx
c001d377:	5b                   	pop    ebx
c001d378:	5e                   	pop    esi
c001d379:	5f                   	pop    edi
c001d37a:	c3                   	ret    

c001d37b <Vm::fpu64ToInternal(unsigned long long)>:
c001d37b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d37f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d383:	c3                   	ret    

c001d384 <Vm::fpuFloatToLong(unsigned long long)>:
c001d384:	57                   	push   edi
c001d385:	31 c0                	xor    eax,eax
c001d387:	56                   	push   esi
c001d388:	31 d2                	xor    edx,edx
c001d38a:	53                   	push   ebx
c001d38b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d38f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d393:	89 d9                	mov    ecx,ebx
c001d395:	c1 e9 14             	shr    ecx,0x14
c001d398:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d39e:	89 cf                	mov    edi,ecx
c001d3a0:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d3a6:	78 33                	js     c001d3db <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d3a8:	89 d9                	mov    ecx,ebx
c001d3aa:	89 f0                	mov    eax,esi
c001d3ac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d3b2:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d3b8:	89 ca                	mov    edx,ecx
c001d3ba:	b9 34 00 00 00       	mov    ecx,0x34
c001d3bf:	29 f9                	sub    ecx,edi
c001d3c1:	0f ad d0             	shrd   eax,edx,cl
c001d3c4:	d3 fa                	sar    edx,cl
c001d3c6:	f6 c1 20             	test   cl,0x20
c001d3c9:	74 05                	je     c001d3d0 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d3cb:	89 d0                	mov    eax,edx
c001d3cd:	c1 fa 1f             	sar    edx,0x1f
c001d3d0:	85 db                	test   ebx,ebx
c001d3d2:	79 07                	jns    c001d3db <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d3d4:	f7 d8                	neg    eax
c001d3d6:	83 d2 00             	adc    edx,0x0
c001d3d9:	f7 da                	neg    edx
c001d3db:	5b                   	pop    ebx
c001d3dc:	5e                   	pop    esi
c001d3dd:	5f                   	pop    edi
c001d3de:	c3                   	ret    

c001d3df <Vm::fpuULongToFloat(unsigned long long)>:
c001d3df:	57                   	push   edi
c001d3e0:	31 c9                	xor    ecx,ecx
c001d3e2:	56                   	push   esi
c001d3e3:	53                   	push   ebx
c001d3e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d3e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3ec:	0f ba e7 14          	bt     edi,0x14
c001d3f0:	72 07                	jb     c001d3f9 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d3f2:	01 f6                	add    esi,esi
c001d3f4:	11 ff                	adc    edi,edi
c001d3f6:	41                   	inc    ecx
c001d3f7:	eb f3                	jmp    c001d3ec <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d3f9:	89 fa                	mov    edx,edi
c001d3fb:	89 f0                	mov    eax,esi
c001d3fd:	bb 33 04 00 00       	mov    ebx,0x433
c001d402:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d408:	29 cb                	sub    ebx,ecx
c001d40a:	89 d9                	mov    ecx,ebx
c001d40c:	5b                   	pop    ebx
c001d40d:	c1 e1 14             	shl    ecx,0x14
c001d410:	5e                   	pop    esi
c001d411:	09 ca                	or     edx,ecx
c001d413:	5f                   	pop    edi
c001d414:	c3                   	ret    

c001d415 <Vm::fpuLongToFloat(long long)>:
c001d415:	56                   	push   esi
c001d416:	31 c0                	xor    eax,eax
c001d418:	53                   	push   ebx
c001d419:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d41d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d421:	39 c8                	cmp    eax,ecx
c001d423:	19 d8                	sbb    eax,ebx
c001d425:	7d 04                	jge    c001d42b <Vm::fpuLongToFloat(long long)+0x16>
c001d427:	31 f6                	xor    esi,esi
c001d429:	eb 0c                	jmp    c001d437 <Vm::fpuLongToFloat(long long)+0x22>
c001d42b:	f7 d9                	neg    ecx
c001d42d:	be 01 00 00 00       	mov    esi,0x1
c001d432:	83 d3 00             	adc    ebx,0x0
c001d435:	f7 db                	neg    ebx
c001d437:	31 c0                	xor    eax,eax
c001d439:	0f ba e3 14          	bt     ebx,0x14
c001d43d:	72 07                	jb     c001d446 <Vm::fpuLongToFloat(long long)+0x31>
c001d43f:	01 c9                	add    ecx,ecx
c001d441:	11 db                	adc    ebx,ebx
c001d443:	40                   	inc    eax
c001d444:	eb f3                	jmp    c001d439 <Vm::fpuLongToFloat(long long)+0x24>
c001d446:	ba 33 04 00 00       	mov    edx,0x433
c001d44b:	29 c2                	sub    edx,eax
c001d44d:	89 c8                	mov    eax,ecx
c001d44f:	c1 e2 14             	shl    edx,0x14
c001d452:	89 d9                	mov    ecx,ebx
c001d454:	89 f3                	mov    ebx,esi
c001d456:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d45c:	09 ca                	or     edx,ecx
c001d45e:	84 db                	test   bl,bl
c001d460:	74 06                	je     c001d468 <Vm::fpuLongToFloat(long long)+0x53>
c001d462:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d468:	5b                   	pop    ebx
c001d469:	5e                   	pop    esi
c001d46a:	c3                   	ret    

c001d46b <Vm::fpuGet0()>:
c001d46b:	31 c0                	xor    eax,eax
c001d46d:	31 d2                	xor    edx,edx
c001d46f:	c3                   	ret    

c001d470 <Vm::fpuGet1()>:
c001d470:	b8 01 00 00 00       	mov    eax,0x1
c001d475:	31 d2                	xor    edx,edx
c001d477:	c3                   	ret    

c001d478 <Vm::fpuGetPi()>:
c001d478:	b8 03 00 00 00       	mov    eax,0x3
c001d47d:	31 d2                	xor    edx,edx
c001d47f:	c3                   	ret    

c001d480 <Vm::fpuGetLog2E()>:
c001d480:	83 ec 18             	sub    esp,0x18
c001d483:	68 a8 8f 02 c0       	push   0xc0028fa8
c001d488:	e8 76 b9 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d48d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d492:	31 d2                	xor    edx,edx
c001d494:	83 c4 1c             	add    esp,0x1c
c001d497:	c3                   	ret    

c001d498 <Vm::fpuGetLogE2()>:
c001d498:	83 ec 18             	sub    esp,0x18
c001d49b:	68 b4 8f 02 c0       	push   0xc0028fb4
c001d4a0:	e8 5e b9 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d4a5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d4aa:	31 d2                	xor    edx,edx
c001d4ac:	83 c4 1c             	add    esp,0x1c
c001d4af:	c3                   	ret    

c001d4b0 <Vm::fpuGetLog210()>:
c001d4b0:	83 ec 18             	sub    esp,0x18
c001d4b3:	68 c0 8f 02 c0       	push   0xc0028fc0
c001d4b8:	e8 46 b9 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d4bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d4c2:	31 d2                	xor    edx,edx
c001d4c4:	83 c4 1c             	add    esp,0x1c
c001d4c7:	c3                   	ret    

c001d4c8 <Vm::fpuGetLog102()>:
c001d4c8:	83 ec 18             	sub    esp,0x18
c001d4cb:	68 cd 8f 02 c0       	push   0xc0028fcd
c001d4d0:	e8 2e b9 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d4d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d4da:	31 d2                	xor    edx,edx
c001d4dc:	83 c4 1c             	add    esp,0x1c
c001d4df:	c3                   	ret    

c001d4e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d4e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d4e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4ec:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d4f0:	0f 92 c0             	setb   al
c001d4f3:	c3                   	ret    

c001d4f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d4f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4fc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d500:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d504:	09 c2                	or     edx,eax
c001d506:	0f 94 c0             	sete   al
c001d509:	c3                   	ret    

c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d50a:	57                   	push   edi
c001d50b:	56                   	push   esi
c001d50c:	53                   	push   ebx
c001d50d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d511:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d515:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d519:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d51d:	57                   	push   edi
c001d51e:	56                   	push   esi
c001d51f:	53                   	push   ebx
c001d520:	51                   	push   ecx
c001d521:	e8 ce ff ff ff       	call   c001d4f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	88 c2                	mov    dl,al
c001d52b:	31 c0                	xor    eax,eax
c001d52d:	84 d2                	test   dl,dl
c001d52f:	75 0c                	jne    c001d53d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d531:	57                   	push   edi
c001d532:	56                   	push   esi
c001d533:	53                   	push   ebx
c001d534:	51                   	push   ecx
c001d535:	e8 a6 ff ff ff       	call   c001d4e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d53a:	83 c4 10             	add    esp,0x10
c001d53d:	83 e0 01             	and    eax,0x1
c001d540:	5b                   	pop    ebx
c001d541:	88 c1                	mov    cl,al
c001d543:	83 e2 01             	and    edx,0x1
c001d546:	a0 e1 be 02 c0       	mov    al,ds:0xc002bee1
c001d54b:	c1 e2 06             	shl    edx,0x6
c001d54e:	83 e0 ba             	and    eax,0xffffffba
c001d551:	5e                   	pop    esi
c001d552:	09 c8                	or     eax,ecx
c001d554:	5f                   	pop    edi
c001d555:	09 d0                	or     eax,edx
c001d557:	a2 e1 be 02 c0       	mov    ds:0xc002bee1,al
c001d55c:	c3                   	ret    

c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d55d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d561:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d565:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d569:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d56d:	c3                   	ret    

c001d56e <Vm::fpuAbs(unsigned long long)>:
c001d56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d576:	c3                   	ret    

c001d577 <Vm::fpuChs(unsigned long long)>:
c001d577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d57b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d57f:	f7 d8                	neg    eax
c001d581:	83 d2 00             	adc    edx,0x0
c001d584:	f7 da                	neg    edx
c001d586:	c3                   	ret    

c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d587:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d58b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d590:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d594:	eb c7                	jmp    c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d596:	53                   	push   ebx
c001d597:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d59b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d59f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d5a7:	0f af ca             	imul   ecx,edx
c001d5aa:	0f af d8             	imul   ebx,eax
c001d5ad:	f7 e2                	mul    edx
c001d5af:	01 d9                	add    ecx,ebx
c001d5b1:	5b                   	pop    ebx
c001d5b2:	01 ca                	add    edx,ecx
c001d5b4:	c3                   	ret    

c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5c8:	e8 af 63 00 00       	call   c002397c <__udivdi3>
c001d5cd:	83 c4 1c             	add    esp,0x1c
c001d5d0:	c3                   	ret    

c001d5d1 <Vm::fpuSquare(unsigned long long)>:
c001d5d1:	50                   	push   eax
c001d5d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5da:	52                   	push   edx
c001d5db:	50                   	push   eax
c001d5dc:	52                   	push   edx
c001d5dd:	50                   	push   eax
c001d5de:	e8 b3 ff ff ff       	call   c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d5e3:	83 c4 14             	add    esp,0x14
c001d5e6:	c3                   	ret    

c001d5e7 <Vm::fpuGetReg(int)>:
c001d5e7:	83 ec 0c             	sub    esp,0xc
c001d5ea:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d5ef:	76 10                	jbe    c001d601 <Vm::fpuGetReg(int)+0x1a>
c001d5f1:	83 ec 0c             	sub    esp,0xc
c001d5f4:	68 da 8f 02 c0       	push   0xc0028fda
c001d5f9:	e8 05 b8 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d5fe:	83 c4 10             	add    esp,0x10
c001d601:	a0 e1 be 02 c0       	mov    al,ds:0xc002bee1
c001d606:	b9 08 00 00 00       	mov    ecx,0x8
c001d60b:	c0 e8 03             	shr    al,0x3
c001d60e:	83 e0 07             	and    eax,0x7
c001d611:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d615:	99                   	cdq    
c001d616:	f7 f9                	idiv   ecx
c001d618:	8b 04 d5 e4 be 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd411c]
c001d61f:	8b 14 d5 e8 be 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4118]
c001d626:	83 c4 0c             	add    esp,0xc
c001d629:	c3                   	ret    

c001d62a <Vm::fpuSetReg(int, unsigned long long)>:
c001d62a:	57                   	push   edi
c001d62b:	56                   	push   esi
c001d62c:	52                   	push   edx
c001d62d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d631:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d635:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d63a:	76 10                	jbe    c001d64c <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d63c:	83 ec 0c             	sub    esp,0xc
c001d63f:	68 ed 8f 02 c0       	push   0xc0028fed
c001d644:	e8 ba b7 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	a0 e1 be 02 c0       	mov    al,ds:0xc002bee1
c001d651:	b9 08 00 00 00       	mov    ecx,0x8
c001d656:	c0 e8 03             	shr    al,0x3
c001d659:	83 e0 07             	and    eax,0x7
c001d65c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d660:	99                   	cdq    
c001d661:	f7 f9                	idiv   ecx
c001d663:	89 34 d5 e4 be 02 c0 	mov    DWORD PTR [edx*8-0x3ffd411c],esi
c001d66a:	89 3c d5 e8 be 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4118],edi
c001d671:	58                   	pop    eax
c001d672:	5e                   	pop    esi
c001d673:	5f                   	pop    edi
c001d674:	c3                   	ret    

c001d675 <Vm::fpuPush(unsigned long long)>:
c001d675:	a0 e1 be 02 c0       	mov    al,ds:0xc002bee1
c001d67a:	c0 e8 03             	shr    al,0x3
c001d67d:	83 e0 07             	and    eax,0x7
c001d680:	83 c0 07             	add    eax,0x7
c001d683:	88 c2                	mov    dl,al
c001d685:	83 e0 07             	and    eax,0x7
c001d688:	83 e2 07             	and    edx,0x7
c001d68b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d692:	8a 15 e1 be 02 c0    	mov    dl,BYTE PTR ds:0xc002bee1
c001d698:	83 e2 c7             	and    edx,0xffffffc7
c001d69b:	09 ca                	or     edx,ecx
c001d69d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6a1:	88 15 e1 be 02 c0    	mov    BYTE PTR ds:0xc002bee1,dl
c001d6a7:	89 0c c5 e8 be 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4118],ecx
c001d6ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6b2:	89 14 c5 e4 be 02 c0 	mov    DWORD PTR [eax*8-0x3ffd411c],edx
c001d6b9:	a1 24 bf 02 c0       	mov    eax,ds:0xc002bf24
c001d6be:	83 f8 08             	cmp    eax,0x8
c001d6c1:	75 08                	jne    c001d6cb <Vm::fpuPush(unsigned long long)+0x56>
c001d6c3:	80 0d e0 be 02 c0 40 	or     BYTE PTR ds:0xc002bee0,0x40
c001d6ca:	c3                   	ret    
c001d6cb:	40                   	inc    eax
c001d6cc:	a3 24 bf 02 c0       	mov    ds:0xc002bf24,eax
c001d6d1:	c3                   	ret    

c001d6d2 <Vm::fpuPop()>:
c001d6d2:	8a 0d e1 be 02 c0    	mov    cl,BYTE PTR ds:0xc002bee1
c001d6d8:	53                   	push   ebx
c001d6d9:	c0 e9 03             	shr    cl,0x3
c001d6dc:	8a 1d e1 be 02 c0    	mov    bl,BYTE PTR ds:0xc002bee1
c001d6e2:	83 e1 07             	and    ecx,0x7
c001d6e5:	83 e3 c7             	and    ebx,0xffffffc7
c001d6e8:	8b 04 cd e4 be 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd411c]
c001d6ef:	8b 14 cd e8 be 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4118]
c001d6f6:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d6fd:	83 e1 38             	and    ecx,0x38
c001d700:	09 d9                	or     ecx,ebx
c001d702:	88 0d e1 be 02 c0    	mov    BYTE PTR ds:0xc002bee1,cl
c001d708:	8b 0d 24 bf 02 c0    	mov    ecx,DWORD PTR ds:0xc002bf24
c001d70e:	85 c9                	test   ecx,ecx
c001d710:	74 09                	je     c001d71b <Vm::fpuPop()+0x49>
c001d712:	49                   	dec    ecx
c001d713:	89 0d 24 bf 02 c0    	mov    DWORD PTR ds:0xc002bf24,ecx
c001d719:	eb 07                	jmp    c001d722 <Vm::fpuPop()+0x50>
c001d71b:	80 0d e0 be 02 c0 40 	or     BYTE PTR ds:0xc002bee0,0x40
c001d722:	5b                   	pop    ebx
c001d723:	c3                   	ret    

c001d724 <Vm::x87Handler(regs*)>:
c001d724:	55                   	push   ebp
c001d725:	57                   	push   edi
c001d726:	56                   	push   esi
c001d727:	53                   	push   ebx
c001d728:	83 ec 1c             	sub    esp,0x1c
c001d72b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d72f:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d734:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d737:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d73f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d743:	50                   	push   eax
c001d744:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d748:	50                   	push   eax
c001d749:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d74d:	50                   	push   eax
c001d74e:	53                   	push   ebx
c001d74f:	e8 b4 b4 ff ff       	call   c0018c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d754:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d757:	83 c4 10             	add    esp,0x10
c001d75a:	89 c6                	mov    esi,eax
c001d75c:	80 fa d9             	cmp    dl,0xd9
c001d75f:	0f 85 52 01 00 00    	jne    c001d8b7 <Vm::x87Handler(regs*)+0x193>
c001d765:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d769:	8d 50 20             	lea    edx,[eax+0x20]
c001d76c:	80 fa 0e             	cmp    dl,0xe
c001d76f:	0f 87 86 00 00 00    	ja     c001d7fb <Vm::x87Handler(regs*)+0xd7>
c001d775:	0f b6 d2             	movzx  edx,dl
c001d778:	ff 24 95 00 90 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7000]
c001d77f:	e8 e7 fc ff ff       	call   c001d46b <Vm::fpuGet0()>
c001d784:	eb 05                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d786:	e8 e5 fc ff ff       	call   c001d470 <Vm::fpuGet1()>
c001d78b:	57                   	push   edi
c001d78c:	57                   	push   edi
c001d78d:	52                   	push   edx
c001d78e:	50                   	push   eax
c001d78f:	e8 e1 fe ff ff       	call   c001d675 <Vm::fpuPush(unsigned long long)>
c001d794:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d798:	83 c4 10             	add    esp,0x10
c001d79b:	b0 01                	mov    al,0x1
c001d79d:	e9 e3 09 00 00       	jmp    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001d7a2:	83 ec 0c             	sub    esp,0xc
c001d7a5:	6a 00                	push   0x0
c001d7a7:	e8 3b fe ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d7ac:	59                   	pop    ecx
c001d7ad:	5e                   	pop    esi
c001d7ae:	52                   	push   edx
c001d7af:	50                   	push   eax
c001d7b0:	e8 c2 fd ff ff       	call   c001d577 <Vm::fpuChs(unsigned long long)>
c001d7b5:	eb 13                	jmp    c001d7ca <Vm::x87Handler(regs*)+0xa6>
c001d7b7:	83 ec 0c             	sub    esp,0xc
c001d7ba:	6a 00                	push   0x0
c001d7bc:	e8 26 fe ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d7c1:	5f                   	pop    edi
c001d7c2:	5d                   	pop    ebp
c001d7c3:	52                   	push   edx
c001d7c4:	50                   	push   eax
c001d7c5:	e8 a4 fd ff ff       	call   c001d56e <Vm::fpuAbs(unsigned long long)>
c001d7ca:	83 c4 0c             	add    esp,0xc
c001d7cd:	52                   	push   edx
c001d7ce:	50                   	push   eax
c001d7cf:	6a 00                	push   0x0
c001d7d1:	e8 54 fe ff ff       	call   c001d62a <Vm::fpuSetReg(int, unsigned long long)>
c001d7d6:	eb bc                	jmp    c001d794 <Vm::x87Handler(regs*)+0x70>
c001d7d8:	e8 d3 fc ff ff       	call   c001d4b0 <Vm::fpuGetLog210()>
c001d7dd:	eb ac                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d7df:	e8 9c fc ff ff       	call   c001d480 <Vm::fpuGetLog2E()>
c001d7e4:	eb a5                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d7e6:	e8 8d fc ff ff       	call   c001d478 <Vm::fpuGetPi()>
c001d7eb:	eb 9e                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d7ed:	e8 d6 fc ff ff       	call   c001d4c8 <Vm::fpuGetLog102()>
c001d7f2:	eb 97                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d7f4:	e8 9f fc ff ff       	call   c001d498 <Vm::fpuGetLogE2()>
c001d7f9:	eb 90                	jmp    c001d78b <Vm::x87Handler(regs*)+0x67>
c001d7fb:	8d 50 40             	lea    edx,[eax+0x40]
c001d7fe:	80 fa 07             	cmp    dl,0x7
c001d801:	77 15                	ja     c001d818 <Vm::x87Handler(regs*)+0xf4>
c001d803:	83 ec 0c             	sub    esp,0xc
c001d806:	2d c0 00 00 00       	sub    eax,0xc0
c001d80b:	50                   	push   eax
c001d80c:	e8 d6 fd ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d811:	59                   	pop    ecx
c001d812:	5e                   	pop    esi
c001d813:	e9 75 ff ff ff       	jmp    c001d78d <Vm::x87Handler(regs*)+0x69>
c001d818:	8d 50 38             	lea    edx,[eax+0x38]
c001d81b:	80 fa 07             	cmp    dl,0x7
c001d81e:	77 3c                	ja     c001d85c <Vm::x87Handler(regs*)+0x138>
c001d820:	83 ec 0c             	sub    esp,0xc
c001d823:	2d c8 00 00 00       	sub    eax,0xc8
c001d828:	50                   	push   eax
c001d829:	e8 b9 fd ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d82e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d835:	89 c6                	mov    esi,eax
c001d837:	89 d7                	mov    edi,edx
c001d839:	e8 a9 fd ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d83e:	83 c4 0c             	add    esp,0xc
c001d841:	52                   	push   edx
c001d842:	50                   	push   eax
c001d843:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d847:	2d c8 00 00 00       	sub    eax,0xc8
c001d84c:	50                   	push   eax
c001d84d:	e8 d8 fd ff ff       	call   c001d62a <Vm::fpuSetReg(int, unsigned long long)>
c001d852:	83 c4 0c             	add    esp,0xc
c001d855:	57                   	push   edi
c001d856:	56                   	push   esi
c001d857:	e9 73 ff ff ff       	jmp    c001d7cf <Vm::x87Handler(regs*)+0xab>
c001d85c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d860:	84 d2                	test   dl,dl
c001d862:	75 0f                	jne    c001d873 <Vm::x87Handler(regs*)+0x14f>
c001d864:	83 ec 0c             	sub    esp,0xc
c001d867:	ff 36                	push   DWORD PTR [esi]
c001d869:	e8 c8 fa ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001d86e:	e9 bf 00 00 00       	jmp    c001d932 <Vm::x87Handler(regs*)+0x20e>
c001d873:	80 fa 03             	cmp    dl,0x3
c001d876:	75 13                	jne    c001d88b <Vm::x87Handler(regs*)+0x167>
c001d878:	e8 55 fe ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001d87d:	55                   	push   ebp
c001d87e:	55                   	push   ebp
c001d87f:	52                   	push   edx
c001d880:	50                   	push   eax
c001d881:	e8 4c fa ff ff       	call   c001d2d2 <Vm::fpuInternalTo32(unsigned long long)>
c001d886:	e9 88 00 00 00       	jmp    c001d913 <Vm::x87Handler(regs*)+0x1ef>
c001d88b:	80 fa 05             	cmp    dl,0x5
c001d88e:	75 0e                	jne    c001d89e <Vm::x87Handler(regs*)+0x17a>
c001d890:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d893:	66 a3 e2 be 02 c0    	mov    ds:0xc002bee2,ax
c001d899:	e9 df 00 00 00       	jmp    c001d97d <Vm::x87Handler(regs*)+0x259>
c001d89e:	31 c0                	xor    eax,eax
c001d8a0:	80 fa 07             	cmp    dl,0x7
c001d8a3:	0f 85 dc 08 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001d8a9:	66 a1 e2 be 02 c0    	mov    ax,ds:0xc002bee2
c001d8af:	66 89 06             	mov    WORD PTR [esi],ax
c001d8b2:	e9 c6 00 00 00       	jmp    c001d97d <Vm::x87Handler(regs*)+0x259>
c001d8b7:	80 fa d8             	cmp    dl,0xd8
c001d8ba:	0f 84 c9 00 00 00    	je     c001d989 <Vm::x87Handler(regs*)+0x265>
c001d8c0:	80 fa dc             	cmp    dl,0xdc
c001d8c3:	0f 84 0d 02 00 00    	je     c001dad6 <Vm::x87Handler(regs*)+0x3b2>
c001d8c9:	80 fa de             	cmp    dl,0xde
c001d8cc:	0f 84 cd 02 00 00    	je     c001db9f <Vm::x87Handler(regs*)+0x47b>
c001d8d2:	80 fa dd             	cmp    dl,0xdd
c001d8d5:	0f 84 5f 04 00 00    	je     c001dd3a <Vm::x87Handler(regs*)+0x616>
c001d8db:	80 fa da             	cmp    dl,0xda
c001d8de:	0f 84 24 05 00 00    	je     c001de08 <Vm::x87Handler(regs*)+0x6e4>
c001d8e4:	80 fa df             	cmp    dl,0xdf
c001d8e7:	0f 84 68 05 00 00    	je     c001de55 <Vm::x87Handler(regs*)+0x731>
c001d8ed:	31 c0                	xor    eax,eax
c001d8ef:	80 fa db             	cmp    dl,0xdb
c001d8f2:	0f 85 8d 08 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001d8f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d8fc:	80 fa 03             	cmp    dl,0x3
c001d8ff:	0f 85 70 06 00 00    	jne    c001df75 <Vm::x87Handler(regs*)+0x851>
c001d905:	e8 c8 fd ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001d90a:	55                   	push   ebp
c001d90b:	55                   	push   ebp
c001d90c:	52                   	push   edx
c001d90d:	50                   	push   eax
c001d90e:	e8 71 fa ff ff       	call   c001d384 <Vm::fpuFloatToLong(unsigned long long)>
c001d913:	83 c4 10             	add    esp,0x10
c001d916:	89 06                	mov    DWORD PTR [esi],eax
c001d918:	eb 63                	jmp    c001d97d <Vm::x87Handler(regs*)+0x259>
c001d91a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d91e:	84 d2                	test   dl,dl
c001d920:	0f 85 e6 05 00 00    	jne    c001df0c <Vm::x87Handler(regs*)+0x7e8>
c001d926:	57                   	push   edi
c001d927:	57                   	push   edi
c001d928:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d92b:	ff 36                	push   DWORD PTR [esi]
c001d92d:	e8 49 fa ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001d932:	5e                   	pop    esi
c001d933:	5f                   	pop    edi
c001d934:	52                   	push   edx
c001d935:	50                   	push   eax
c001d936:	e8 3a fd ff ff       	call   c001d675 <Vm::fpuPush(unsigned long long)>
c001d93b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d93f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d942:	e9 51 fe ff ff       	jmp    c001d798 <Vm::x87Handler(regs*)+0x74>
c001d947:	80 fa 03             	cmp    dl,0x3
c001d94a:	0f 85 d7 06 00 00    	jne    c001e027 <Vm::x87Handler(regs*)+0x903>
c001d950:	57                   	push   edi
c001d951:	57                   	push   edi
c001d952:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d955:	ff 36                	push   DWORD PTR [esi]
c001d957:	e8 1f fa ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001d95c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d963:	89 c6                	mov    esi,eax
c001d965:	89 d7                	mov    edi,edx
c001d967:	e8 7b fc ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d96c:	57                   	push   edi
c001d96d:	56                   	push   esi
c001d96e:	52                   	push   edx
c001d96f:	50                   	push   eax
c001d970:	e8 95 fb ff ff       	call   c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d975:	83 c4 20             	add    esp,0x20
c001d978:	e8 55 fd ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001d97d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d981:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d984:	e9 12 fe ff ff       	jmp    c001d79b <Vm::x87Handler(regs*)+0x77>
c001d989:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d98d:	8d 50 40             	lea    edx,[eax+0x40]
c001d990:	80 fa 07             	cmp    dl,0x7
c001d993:	77 29                	ja     c001d9be <Vm::x87Handler(regs*)+0x29a>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	2d c0 00 00 00       	sub    eax,0xc0
c001d99d:	50                   	push   eax
c001d99e:	e8 44 fc ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d9a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9aa:	89 c6                	mov    esi,eax
c001d9ac:	89 d7                	mov    edi,edx
c001d9ae:	e8 34 fc ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d9b3:	57                   	push   edi
c001d9b4:	56                   	push   esi
c001d9b5:	52                   	push   edx
c001d9b6:	50                   	push   eax
c001d9b7:	e8 a1 fb ff ff       	call   c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d9bc:	eb 2f                	jmp    c001d9ed <Vm::x87Handler(regs*)+0x2c9>
c001d9be:	8d 50 38             	lea    edx,[eax+0x38]
c001d9c1:	80 fa 07             	cmp    dl,0x7
c001d9c4:	77 2f                	ja     c001d9f5 <Vm::x87Handler(regs*)+0x2d1>
c001d9c6:	83 ec 0c             	sub    esp,0xc
c001d9c9:	2d c8 00 00 00       	sub    eax,0xc8
c001d9ce:	50                   	push   eax
c001d9cf:	e8 13 fc ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d9d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9db:	89 c6                	mov    esi,eax
c001d9dd:	89 d7                	mov    edi,edx
c001d9df:	e8 03 fc ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001d9e4:	57                   	push   edi
c001d9e5:	56                   	push   esi
c001d9e6:	52                   	push   edx
c001d9e7:	50                   	push   eax
c001d9e8:	e8 a9 fb ff ff       	call   c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d9ed:	83 c4 1c             	add    esp,0x1c
c001d9f0:	e9 d8 fd ff ff       	jmp    c001d7cd <Vm::x87Handler(regs*)+0xa9>
c001d9f5:	8d 50 30             	lea    edx,[eax+0x30]
c001d9f8:	80 fa 07             	cmp    dl,0x7
c001d9fb:	77 0d                	ja     c001da0a <Vm::x87Handler(regs*)+0x2e6>
c001d9fd:	83 ec 0c             	sub    esp,0xc
c001da00:	2d d0 00 00 00       	sub    eax,0xd0
c001da05:	e9 99 03 00 00       	jmp    c001dda3 <Vm::x87Handler(regs*)+0x67f>
c001da0a:	8d 50 28             	lea    edx,[eax+0x28]
c001da0d:	80 fa 07             	cmp    dl,0x7
c001da10:	77 0d                	ja     c001da1f <Vm::x87Handler(regs*)+0x2fb>
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	2d d8 00 00 00       	sub    eax,0xd8
c001da1a:	e9 c0 03 00 00       	jmp    c001dddf <Vm::x87Handler(regs*)+0x6bb>
c001da1f:	8d 50 20             	lea    edx,[eax+0x20]
c001da22:	80 fa 07             	cmp    dl,0x7
c001da25:	77 1b                	ja     c001da42 <Vm::x87Handler(regs*)+0x31e>
c001da27:	83 ec 0c             	sub    esp,0xc
c001da2a:	2d e0 00 00 00       	sub    eax,0xe0
c001da2f:	50                   	push   eax
c001da30:	e8 b2 fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001da35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da3c:	89 c6                	mov    esi,eax
c001da3e:	89 d7                	mov    edi,edx
c001da40:	eb 22                	jmp    c001da64 <Vm::x87Handler(regs*)+0x340>
c001da42:	8d 50 18             	lea    edx,[eax+0x18]
c001da45:	80 fa 07             	cmp    dl,0x7
c001da48:	77 2d                	ja     c001da77 <Vm::x87Handler(regs*)+0x353>
c001da4a:	83 ec 0c             	sub    esp,0xc
c001da4d:	6a 00                	push   0x0
c001da4f:	e8 93 fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001da54:	89 c6                	mov    esi,eax
c001da56:	89 d7                	mov    edi,edx
c001da58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001da5c:	2d e8 00 00 00       	sub    eax,0xe8
c001da61:	89 04 24             	mov    DWORD PTR [esp],eax
c001da64:	e8 7e fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001da69:	57                   	push   edi
c001da6a:	56                   	push   esi
c001da6b:	52                   	push   edx
c001da6c:	50                   	push   eax
c001da6d:	e8 15 fb ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001da72:	e9 76 ff ff ff       	jmp    c001d9ed <Vm::x87Handler(regs*)+0x2c9>
c001da77:	8d 50 10             	lea    edx,[eax+0x10]
c001da7a:	80 fa 07             	cmp    dl,0x7
c001da7d:	77 1b                	ja     c001da9a <Vm::x87Handler(regs*)+0x376>
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	2d f0 00 00 00       	sub    eax,0xf0
c001da87:	50                   	push   eax
c001da88:	e8 5a fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001da8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da94:	89 c6                	mov    esi,eax
c001da96:	89 d7                	mov    edi,edx
c001da98:	eb 22                	jmp    c001dabc <Vm::x87Handler(regs*)+0x398>
c001da9a:	3c f7                	cmp    al,0xf7
c001da9c:	0f 86 d1 03 00 00    	jbe    c001de73 <Vm::x87Handler(regs*)+0x74f>
c001daa2:	83 ec 0c             	sub    esp,0xc
c001daa5:	6a 00                	push   0x0
c001daa7:	e8 3b fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001daac:	89 c6                	mov    esi,eax
c001daae:	89 d7                	mov    edi,edx
c001dab0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dab4:	2d f8 00 00 00       	sub    eax,0xf8
c001dab9:	89 04 24             	mov    DWORD PTR [esp],eax
c001dabc:	e8 26 fb ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dac1:	57                   	push   edi
c001dac2:	56                   	push   esi
c001dac3:	52                   	push   edx
c001dac4:	50                   	push   eax
c001dac5:	e8 eb fa ff ff       	call   c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001daca:	83 c4 1c             	add    esp,0x1c
c001dacd:	52                   	push   edx
c001dace:	50                   	push   eax
c001dacf:	6a 00                	push   0x0
c001dad1:	e9 51 02 00 00       	jmp    c001dd27 <Vm::x87Handler(regs*)+0x603>
c001dad6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dada:	8d 50 40             	lea    edx,[eax+0x40]
c001dadd:	80 fa 07             	cmp    dl,0x7
c001dae0:	77 37                	ja     c001db19 <Vm::x87Handler(regs*)+0x3f5>
c001dae2:	83 ec 0c             	sub    esp,0xc
c001dae5:	2d c0 00 00 00       	sub    eax,0xc0
c001daea:	50                   	push   eax
c001daeb:	e8 f7 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001daf0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daf7:	89 c6                	mov    esi,eax
c001daf9:	89 d7                	mov    edi,edx
c001dafb:	e8 e7 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001db00:	57                   	push   edi
c001db01:	56                   	push   esi
c001db02:	52                   	push   edx
c001db03:	50                   	push   eax
c001db04:	e8 54 fa ff ff       	call   c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001db09:	83 c4 1c             	add    esp,0x1c
c001db0c:	52                   	push   edx
c001db0d:	50                   	push   eax
c001db0e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db12:	2d c0 00 00 00       	sub    eax,0xc0
c001db17:	eb 3d                	jmp    c001db56 <Vm::x87Handler(regs*)+0x432>
c001db19:	8d 50 38             	lea    edx,[eax+0x38]
c001db1c:	80 fa 07             	cmp    dl,0x7
c001db1f:	77 3b                	ja     c001db5c <Vm::x87Handler(regs*)+0x438>
c001db21:	83 ec 0c             	sub    esp,0xc
c001db24:	2d c8 00 00 00       	sub    eax,0xc8
c001db29:	50                   	push   eax
c001db2a:	e8 b8 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001db2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db36:	89 c6                	mov    esi,eax
c001db38:	89 d7                	mov    edi,edx
c001db3a:	e8 a8 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001db3f:	57                   	push   edi
c001db40:	56                   	push   esi
c001db41:	52                   	push   edx
c001db42:	50                   	push   eax
c001db43:	e8 4e fa ff ff       	call   c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001db48:	83 c4 1c             	add    esp,0x1c
c001db4b:	52                   	push   edx
c001db4c:	50                   	push   eax
c001db4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db51:	2d c8 00 00 00       	sub    eax,0xc8
c001db56:	50                   	push   eax
c001db57:	e9 75 fc ff ff       	jmp    c001d7d1 <Vm::x87Handler(regs*)+0xad>
c001db5c:	83 c0 18             	add    eax,0x18
c001db5f:	3c 07                	cmp    al,0x7
c001db61:	0f 87 3b 04 00 00    	ja     c001dfa2 <Vm::x87Handler(regs*)+0x87e>
c001db67:	83 ec 0c             	sub    esp,0xc
c001db6a:	6a 00                	push   0x0
c001db6c:	e8 76 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001db71:	89 c6                	mov    esi,eax
c001db73:	89 d7                	mov    edi,edx
c001db75:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db79:	2d e8 00 00 00       	sub    eax,0xe8
c001db7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001db81:	e8 61 fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001db86:	57                   	push   edi
c001db87:	56                   	push   esi
c001db88:	52                   	push   edx
c001db89:	50                   	push   eax
c001db8a:	e8 f8 f9 ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db8f:	83 c4 1c             	add    esp,0x1c
c001db92:	52                   	push   edx
c001db93:	50                   	push   eax
c001db94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db98:	2d e8 00 00 00       	sub    eax,0xe8
c001db9d:	eb b7                	jmp    c001db56 <Vm::x87Handler(regs*)+0x432>
c001db9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dba3:	8d 50 40             	lea    edx,[eax+0x40]
c001dba6:	80 fa 07             	cmp    dl,0x7
c001dba9:	77 3a                	ja     c001dbe5 <Vm::x87Handler(regs*)+0x4c1>
c001dbab:	83 ec 0c             	sub    esp,0xc
c001dbae:	2d c0 00 00 00       	sub    eax,0xc0
c001dbb3:	50                   	push   eax
c001dbb4:	e8 2e fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dbb9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbc0:	89 c6                	mov    esi,eax
c001dbc2:	89 d7                	mov    edi,edx
c001dbc4:	e8 1e fa ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dbc9:	57                   	push   edi
c001dbca:	56                   	push   esi
c001dbcb:	52                   	push   edx
c001dbcc:	50                   	push   eax
c001dbcd:	e8 8b f9 ff ff       	call   c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dbd2:	83 c4 1c             	add    esp,0x1c
c001dbd5:	52                   	push   edx
c001dbd6:	50                   	push   eax
c001dbd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbdb:	2d c0 00 00 00       	sub    eax,0xc0
c001dbe0:	e9 9e 01 00 00       	jmp    c001dd83 <Vm::x87Handler(regs*)+0x65f>
c001dbe5:	8d 50 20             	lea    edx,[eax+0x20]
c001dbe8:	80 fa 07             	cmp    dl,0x7
c001dbeb:	77 3a                	ja     c001dc27 <Vm::x87Handler(regs*)+0x503>
c001dbed:	83 ec 0c             	sub    esp,0xc
c001dbf0:	2d e0 00 00 00       	sub    eax,0xe0
c001dbf5:	50                   	push   eax
c001dbf6:	e8 ec f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dbfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc02:	89 c6                	mov    esi,eax
c001dc04:	89 d7                	mov    edi,edx
c001dc06:	e8 dc f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dc0b:	57                   	push   edi
c001dc0c:	56                   	push   esi
c001dc0d:	52                   	push   edx
c001dc0e:	50                   	push   eax
c001dc0f:	e8 73 f9 ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc14:	83 c4 1c             	add    esp,0x1c
c001dc17:	52                   	push   edx
c001dc18:	50                   	push   eax
c001dc19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc1d:	2d e0 00 00 00       	sub    eax,0xe0
c001dc22:	e9 5c 01 00 00       	jmp    c001dd83 <Vm::x87Handler(regs*)+0x65f>
c001dc27:	8d 50 18             	lea    edx,[eax+0x18]
c001dc2a:	80 fa 07             	cmp    dl,0x7
c001dc2d:	77 3b                	ja     c001dc6a <Vm::x87Handler(regs*)+0x546>
c001dc2f:	83 ec 0c             	sub    esp,0xc
c001dc32:	6a 00                	push   0x0
c001dc34:	e8 ae f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dc39:	89 c6                	mov    esi,eax
c001dc3b:	89 d7                	mov    edi,edx
c001dc3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc41:	2d e8 00 00 00       	sub    eax,0xe8
c001dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc49:	e8 99 f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dc4e:	57                   	push   edi
c001dc4f:	56                   	push   esi
c001dc50:	52                   	push   edx
c001dc51:	50                   	push   eax
c001dc52:	e8 30 f9 ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc57:	83 c4 1c             	add    esp,0x1c
c001dc5a:	52                   	push   edx
c001dc5b:	50                   	push   eax
c001dc5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc60:	2d e8 00 00 00       	sub    eax,0xe8
c001dc65:	e9 19 01 00 00       	jmp    c001dd83 <Vm::x87Handler(regs*)+0x65f>
c001dc6a:	8d 50 38             	lea    edx,[eax+0x38]
c001dc6d:	80 fa 07             	cmp    dl,0x7
c001dc70:	77 37                	ja     c001dca9 <Vm::x87Handler(regs*)+0x585>
c001dc72:	83 ec 0c             	sub    esp,0xc
c001dc75:	2d c8 00 00 00       	sub    eax,0xc8
c001dc7a:	50                   	push   eax
c001dc7b:	e8 67 f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dc80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc87:	89 c6                	mov    esi,eax
c001dc89:	89 d7                	mov    edi,edx
c001dc8b:	e8 57 f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dc90:	57                   	push   edi
c001dc91:	56                   	push   esi
c001dc92:	52                   	push   edx
c001dc93:	50                   	push   eax
c001dc94:	e8 fd f8 ff ff       	call   c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc99:	83 c4 1c             	add    esp,0x1c
c001dc9c:	52                   	push   edx
c001dc9d:	50                   	push   eax
c001dc9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dca2:	2d c8 00 00 00       	sub    eax,0xc8
c001dca7:	eb 7d                	jmp    c001dd26 <Vm::x87Handler(regs*)+0x602>
c001dca9:	3c f7                	cmp    al,0xf7
c001dcab:	76 38                	jbe    c001dce5 <Vm::x87Handler(regs*)+0x5c1>
c001dcad:	83 ec 0c             	sub    esp,0xc
c001dcb0:	6a 00                	push   0x0
c001dcb2:	e8 30 f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dcb7:	89 c6                	mov    esi,eax
c001dcb9:	89 d7                	mov    edi,edx
c001dcbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dcbf:	2d f8 00 00 00       	sub    eax,0xf8
c001dcc4:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcc7:	e8 1b f9 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dccc:	57                   	push   edi
c001dccd:	56                   	push   esi
c001dcce:	52                   	push   edx
c001dccf:	50                   	push   eax
c001dcd0:	e8 e0 f8 ff ff       	call   c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dcd5:	83 c4 1c             	add    esp,0x1c
c001dcd8:	52                   	push   edx
c001dcd9:	50                   	push   eax
c001dcda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dcde:	2d f8 00 00 00       	sub    eax,0xf8
c001dce3:	eb 41                	jmp    c001dd26 <Vm::x87Handler(regs*)+0x602>
c001dce5:	8d 50 10             	lea    edx,[eax+0x10]
c001dce8:	80 fa 07             	cmp    dl,0x7
c001dceb:	0f 87 5a 01 00 00    	ja     c001de4b <Vm::x87Handler(regs*)+0x727>
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	2d f0 00 00 00       	sub    eax,0xf0
c001dcf9:	50                   	push   eax
c001dcfa:	e8 e8 f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dcff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd06:	89 c6                	mov    esi,eax
c001dd08:	89 d7                	mov    edi,edx
c001dd0a:	e8 d8 f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dd0f:	57                   	push   edi
c001dd10:	56                   	push   esi
c001dd11:	52                   	push   edx
c001dd12:	50                   	push   eax
c001dd13:	e8 9d f8 ff ff       	call   c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dd18:	83 c4 1c             	add    esp,0x1c
c001dd1b:	52                   	push   edx
c001dd1c:	50                   	push   eax
c001dd1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd21:	2d f0 00 00 00       	sub    eax,0xf0
c001dd26:	50                   	push   eax
c001dd27:	e8 fe f8 ff ff       	call   c001d62a <Vm::fpuSetReg(int, unsigned long long)>
c001dd2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001dd30:	e8 9d f9 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001dd35:	e9 5e fa ff ff       	jmp    c001d798 <Vm::x87Handler(regs*)+0x74>
c001dd3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd3e:	8d 50 30             	lea    edx,[eax+0x30]
c001dd41:	80 fa 07             	cmp    dl,0x7
c001dd44:	77 1d                	ja     c001dd63 <Vm::x87Handler(regs*)+0x63f>
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	6a 00                	push   0x0
c001dd4b:	e8 97 f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dd50:	83 c4 0c             	add    esp,0xc
c001dd53:	52                   	push   edx
c001dd54:	50                   	push   eax
c001dd55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd59:	2d d0 00 00 00       	sub    eax,0xd0
c001dd5e:	e9 f3 fd ff ff       	jmp    c001db56 <Vm::x87Handler(regs*)+0x432>
c001dd63:	8d 50 28             	lea    edx,[eax+0x28]
c001dd66:	80 fa 07             	cmp    dl,0x7
c001dd69:	77 28                	ja     c001dd93 <Vm::x87Handler(regs*)+0x66f>
c001dd6b:	83 ec 0c             	sub    esp,0xc
c001dd6e:	6a 00                	push   0x0
c001dd70:	e8 72 f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dd75:	83 c4 0c             	add    esp,0xc
c001dd78:	52                   	push   edx
c001dd79:	50                   	push   eax
c001dd7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd7e:	2d d8 00 00 00       	sub    eax,0xd8
c001dd83:	50                   	push   eax
c001dd84:	e8 a1 f8 ff ff       	call   c001d62a <Vm::fpuSetReg(int, unsigned long long)>
c001dd89:	e8 44 f9 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001dd8e:	e9 01 fa ff ff       	jmp    c001d794 <Vm::x87Handler(regs*)+0x70>
c001dd93:	8d 50 20             	lea    edx,[eax+0x20]
c001dd96:	80 fa 07             	cmp    dl,0x7
c001dd99:	77 30                	ja     c001ddcb <Vm::x87Handler(regs*)+0x6a7>
c001dd9b:	83 ec 0c             	sub    esp,0xc
c001dd9e:	2d e0 00 00 00       	sub    eax,0xe0
c001dda3:	50                   	push   eax
c001dda4:	e8 3e f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dda9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddb0:	89 c6                	mov    esi,eax
c001ddb2:	89 d7                	mov    edi,edx
c001ddb4:	e8 2e f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001ddb9:	57                   	push   edi
c001ddba:	56                   	push   esi
c001ddbb:	52                   	push   edx
c001ddbc:	50                   	push   eax
c001ddbd:	e8 48 f7 ff ff       	call   c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ddc2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ddc6:	e9 54 02 00 00       	jmp    c001e01f <Vm::x87Handler(regs*)+0x8fb>
c001ddcb:	8d 50 18             	lea    edx,[eax+0x18]
c001ddce:	80 fa 07             	cmp    dl,0x7
c001ddd1:	0f 87 43 fb ff ff    	ja     c001d91a <Vm::x87Handler(regs*)+0x1f6>
c001ddd7:	83 ec 0c             	sub    esp,0xc
c001ddda:	2d e8 00 00 00       	sub    eax,0xe8
c001dddf:	50                   	push   eax
c001dde0:	e8 02 f8 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dde5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddec:	89 c6                	mov    esi,eax
c001ddee:	89 d7                	mov    edi,edx
c001ddf0:	e8 f2 f7 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001ddf5:	57                   	push   edi
c001ddf6:	56                   	push   esi
c001ddf7:	52                   	push   edx
c001ddf8:	50                   	push   eax
c001ddf9:	e8 0c f7 ff ff       	call   c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ddfe:	83 c4 20             	add    esp,0x20
c001de01:	e8 cc f8 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001de06:	eb 62                	jmp    c001de6a <Vm::x87Handler(regs*)+0x746>
c001de08:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001de0c:	0f 85 0f 01 00 00    	jne    c001df21 <Vm::x87Handler(regs*)+0x7fd>
c001de12:	83 ec 0c             	sub    esp,0xc
c001de15:	6a 01                	push   0x1
c001de17:	e8 cb f7 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001de1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de23:	89 c6                	mov    esi,eax
c001de25:	89 d7                	mov    edi,edx
c001de27:	e8 bb f7 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001de2c:	57                   	push   edi
c001de2d:	56                   	push   esi
c001de2e:	52                   	push   edx
c001de2f:	50                   	push   eax
c001de30:	e8 d5 f6 ff ff       	call   c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001de35:	83 c4 20             	add    esp,0x20
c001de38:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001de3c:	e8 91 f8 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001de41:	e8 8c f8 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001de46:	e9 50 f9 ff ff       	jmp    c001d79b <Vm::x87Handler(regs*)+0x77>
c001de4b:	3c d9                	cmp    al,0xd9
c001de4d:	0f 85 b5 02 00 00    	jne    c001e108 <Vm::x87Handler(regs*)+0x9e4>
c001de53:	eb bd                	jmp    c001de12 <Vm::x87Handler(regs*)+0x6ee>
c001de55:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001de59:	0f 85 ea 02 00 00    	jne    c001e149 <Vm::x87Handler(regs*)+0xa25>
c001de5f:	0f b7 05 e0 be 02 c0 	movzx  eax,WORD PTR ds:0xc002bee0
c001de66:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001de6a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001de6e:	e9 28 f9 ff ff       	jmp    c001d79b <Vm::x87Handler(regs*)+0x77>
c001de73:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001de77:	84 d2                	test   dl,dl
c001de79:	75 0f                	jne    c001de8a <Vm::x87Handler(regs*)+0x766>
c001de7b:	83 ec 0c             	sub    esp,0xc
c001de7e:	ff 36                	push   DWORD PTR [esi]
c001de80:	e8 b1 f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001de85:	e9 2c 01 00 00       	jmp    c001dfb6 <Vm::x87Handler(regs*)+0x892>
c001de8a:	80 fa 01             	cmp    dl,0x1
c001de8d:	75 0f                	jne    c001de9e <Vm::x87Handler(regs*)+0x77a>
c001de8f:	83 ec 0c             	sub    esp,0xc
c001de92:	ff 36                	push   DWORD PTR [esi]
c001de94:	e8 9d f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001de99:	e9 81 02 00 00       	jmp    c001e11f <Vm::x87Handler(regs*)+0x9fb>
c001de9e:	80 fa 04             	cmp    dl,0x4
c001dea1:	75 0f                	jne    c001deb2 <Vm::x87Handler(regs*)+0x78e>
c001dea3:	83 ec 0c             	sub    esp,0xc
c001dea6:	ff 36                	push   DWORD PTR [esi]
c001dea8:	e8 89 f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001dead:	e9 86 01 00 00       	jmp    c001e038 <Vm::x87Handler(regs*)+0x914>
c001deb2:	80 fa 05             	cmp    dl,0x5
c001deb5:	75 1b                	jne    c001ded2 <Vm::x87Handler(regs*)+0x7ae>
c001deb7:	83 ec 0c             	sub    esp,0xc
c001deba:	6a 00                	push   0x0
c001debc:	e8 26 f7 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dec1:	89 c7                	mov    edi,eax
c001dec3:	89 d5                	mov    ebp,edx
c001dec5:	58                   	pop    eax
c001dec6:	ff 36                	push   DWORD PTR [esi]
c001dec8:	e8 69 f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001decd:	e9 a3 01 00 00       	jmp    c001e075 <Vm::x87Handler(regs*)+0x951>
c001ded2:	80 fa 06             	cmp    dl,0x6
c001ded5:	75 0f                	jne    c001dee6 <Vm::x87Handler(regs*)+0x7c2>
c001ded7:	83 ec 0c             	sub    esp,0xc
c001deda:	ff 36                	push   DWORD PTR [esi]
c001dedc:	e8 55 f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001dee1:	e9 ae 01 00 00       	jmp    c001e094 <Vm::x87Handler(regs*)+0x970>
c001dee6:	31 c0                	xor    eax,eax
c001dee8:	80 fa 07             	cmp    dl,0x7
c001deeb:	0f 85 94 02 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001def1:	83 ec 0c             	sub    esp,0xc
c001def4:	6a 00                	push   0x0
c001def6:	e8 ec f6 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001defb:	89 c7                	mov    edi,eax
c001defd:	89 d5                	mov    ebp,edx
c001deff:	58                   	pop    eax
c001df00:	ff 36                	push   DWORD PTR [esi]
c001df02:	e8 2f f4 ff ff       	call   c001d336 <Vm::fpu32ToInternal(unsigned int)>
c001df07:	e9 cb 01 00 00       	jmp    c001e0d7 <Vm::x87Handler(regs*)+0x9b3>
c001df0c:	80 fa 03             	cmp    dl,0x3
c001df0f:	0f 85 d3 01 00 00    	jne    c001e0e8 <Vm::x87Handler(regs*)+0x9c4>
c001df15:	e8 b8 f7 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001df1a:	51                   	push   ecx
c001df1b:	51                   	push   ecx
c001df1c:	e9 de 01 00 00       	jmp    c001e0ff <Vm::x87Handler(regs*)+0x9db>
c001df21:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001df25:	80 fa 01             	cmp    dl,0x1
c001df28:	75 09                	jne    c001df33 <Vm::x87Handler(regs*)+0x80f>
c001df2a:	57                   	push   edi
c001df2b:	57                   	push   edi
c001df2c:	8b 06                	mov    eax,DWORD PTR [esi]
c001df2e:	e9 e3 01 00 00       	jmp    c001e116 <Vm::x87Handler(regs*)+0x9f2>
c001df33:	80 fa 04             	cmp    dl,0x4
c001df36:	75 12                	jne    c001df4a <Vm::x87Handler(regs*)+0x826>
c001df38:	31 d2                	xor    edx,edx
c001df3a:	51                   	push   ecx
c001df3b:	51                   	push   ecx
c001df3c:	8b 06                	mov    eax,DWORD PTR [esi]
c001df3e:	52                   	push   edx
c001df3f:	50                   	push   eax
c001df40:	e8 d0 f4 ff ff       	call   c001d415 <Vm::fpuLongToFloat(long long)>
c001df45:	e9 ee 00 00 00       	jmp    c001e038 <Vm::x87Handler(regs*)+0x914>
c001df4a:	31 c0                	xor    eax,eax
c001df4c:	80 fa 07             	cmp    dl,0x7
c001df4f:	0f 85 30 02 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001df55:	83 ec 0c             	sub    esp,0xc
c001df58:	6a 00                	push   0x0
c001df5a:	e8 88 f6 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001df5f:	89 c7                	mov    edi,eax
c001df61:	89 d5                	mov    ebp,edx
c001df63:	58                   	pop    eax
c001df64:	8b 06                	mov    eax,DWORD PTR [esi]
c001df66:	5a                   	pop    edx
c001df67:	31 d2                	xor    edx,edx
c001df69:	52                   	push   edx
c001df6a:	50                   	push   eax
c001df6b:	e8 a5 f4 ff ff       	call   c001d415 <Vm::fpuLongToFloat(long long)>
c001df70:	e9 62 01 00 00       	jmp    c001e0d7 <Vm::x87Handler(regs*)+0x9b3>
c001df75:	84 d2                	test   dl,dl
c001df77:	75 0d                	jne    c001df86 <Vm::x87Handler(regs*)+0x862>
c001df79:	31 d2                	xor    edx,edx
c001df7b:	55                   	push   ebp
c001df7c:	55                   	push   ebp
c001df7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001df7f:	52                   	push   edx
c001df80:	50                   	push   eax
c001df81:	e9 d3 01 00 00       	jmp    c001e159 <Vm::x87Handler(regs*)+0xa35>
c001df86:	31 c0                	xor    eax,eax
c001df88:	80 fa 02             	cmp    dl,0x2
c001df8b:	0f 85 f4 01 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001df91:	83 ec 0c             	sub    esp,0xc
c001df94:	6a 00                	push   0x0
c001df96:	e8 4c f6 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001df9b:	59                   	pop    ecx
c001df9c:	5f                   	pop    edi
c001df9d:	e9 6a f9 ff ff       	jmp    c001d90c <Vm::x87Handler(regs*)+0x1e8>
c001dfa2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dfa6:	84 d2                	test   dl,dl
c001dfa8:	75 2a                	jne    c001dfd4 <Vm::x87Handler(regs*)+0x8b0>
c001dfaa:	50                   	push   eax
c001dfab:	50                   	push   eax
c001dfac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dfaf:	ff 36                	push   DWORD PTR [esi]
c001dfb1:	e8 c5 f3 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001dfb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfbd:	89 c6                	mov    esi,eax
c001dfbf:	89 d7                	mov    edi,edx
c001dfc1:	e8 21 f6 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001dfc6:	57                   	push   edi
c001dfc7:	56                   	push   esi
c001dfc8:	52                   	push   edx
c001dfc9:	50                   	push   eax
c001dfca:	e8 8e f5 ff ff       	call   c001d55d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dfcf:	e9 64 01 00 00       	jmp    c001e138 <Vm::x87Handler(regs*)+0xa14>
c001dfd4:	80 fa 01             	cmp    dl,0x1
c001dfd7:	75 11                	jne    c001dfea <Vm::x87Handler(regs*)+0x8c6>
c001dfd9:	50                   	push   eax
c001dfda:	50                   	push   eax
c001dfdb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dfde:	ff 36                	push   DWORD PTR [esi]
c001dfe0:	e8 96 f3 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001dfe5:	e9 35 01 00 00       	jmp    c001e11f <Vm::x87Handler(regs*)+0x9fb>
c001dfea:	80 fa 02             	cmp    dl,0x2
c001dfed:	0f 85 54 f9 ff ff    	jne    c001d947 <Vm::x87Handler(regs*)+0x223>
c001dff3:	55                   	push   ebp
c001dff4:	55                   	push   ebp
c001dff5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dff8:	ff 36                	push   DWORD PTR [esi]
c001dffa:	e8 7c f3 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001dfff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e006:	89 c6                	mov    esi,eax
c001e008:	89 d7                	mov    edi,edx
c001e00a:	e8 d8 f5 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e00f:	57                   	push   edi
c001e010:	56                   	push   esi
c001e011:	52                   	push   edx
c001e012:	50                   	push   eax
c001e013:	e8 f2 f4 ff ff       	call   c001d50a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e01c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e01f:	83 c4 20             	add    esp,0x20
c001e022:	e9 74 f7 ff ff       	jmp    c001d79b <Vm::x87Handler(regs*)+0x77>
c001e027:	80 fa 04             	cmp    dl,0x4
c001e02a:	75 2a                	jne    c001e056 <Vm::x87Handler(regs*)+0x932>
c001e02c:	51                   	push   ecx
c001e02d:	51                   	push   ecx
c001e02e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e031:	ff 36                	push   DWORD PTR [esi]
c001e033:	e8 43 f3 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001e038:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e03f:	89 c6                	mov    esi,eax
c001e041:	89 d7                	mov    edi,edx
c001e043:	e8 9f f5 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e048:	57                   	push   edi
c001e049:	56                   	push   esi
c001e04a:	52                   	push   edx
c001e04b:	50                   	push   eax
c001e04c:	e8 36 f5 ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e051:	e9 e2 00 00 00       	jmp    c001e138 <Vm::x87Handler(regs*)+0xa14>
c001e056:	80 fa 05             	cmp    dl,0x5
c001e059:	75 28                	jne    c001e083 <Vm::x87Handler(regs*)+0x95f>
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	6a 00                	push   0x0
c001e060:	e8 82 f5 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e065:	89 c7                	mov    edi,eax
c001e067:	89 d5                	mov    ebp,edx
c001e069:	58                   	pop    eax
c001e06a:	5a                   	pop    edx
c001e06b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e06e:	ff 36                	push   DWORD PTR [esi]
c001e070:	e8 06 f3 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001e075:	83 c4 10             	add    esp,0x10
c001e078:	55                   	push   ebp
c001e079:	57                   	push   edi
c001e07a:	52                   	push   edx
c001e07b:	50                   	push   eax
c001e07c:	e8 06 f5 ff ff       	call   c001d587 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e081:	eb 60                	jmp    c001e0e3 <Vm::x87Handler(regs*)+0x9bf>
c001e083:	80 fa 06             	cmp    dl,0x6
c001e086:	75 2a                	jne    c001e0b2 <Vm::x87Handler(regs*)+0x98e>
c001e088:	51                   	push   ecx
c001e089:	51                   	push   ecx
c001e08a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e08d:	ff 36                	push   DWORD PTR [esi]
c001e08f:	e8 e7 f2 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001e094:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e09b:	89 c6                	mov    esi,eax
c001e09d:	89 d7                	mov    edi,edx
c001e09f:	e8 43 f5 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e0a4:	57                   	push   edi
c001e0a5:	56                   	push   esi
c001e0a6:	52                   	push   edx
c001e0a7:	50                   	push   eax
c001e0a8:	e8 08 f5 ff ff       	call   c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e0ad:	e9 86 00 00 00       	jmp    c001e138 <Vm::x87Handler(regs*)+0xa14>
c001e0b2:	31 c0                	xor    eax,eax
c001e0b4:	80 fa 07             	cmp    dl,0x7
c001e0b7:	0f 85 c8 00 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	6a 00                	push   0x0
c001e0c2:	e8 20 f5 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e0c7:	89 c7                	mov    edi,eax
c001e0c9:	89 d5                	mov    ebp,edx
c001e0cb:	58                   	pop    eax
c001e0cc:	5a                   	pop    edx
c001e0cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e0d0:	ff 36                	push   DWORD PTR [esi]
c001e0d2:	e8 a4 f2 ff ff       	call   c001d37b <Vm::fpu64ToInternal(unsigned long long)>
c001e0d7:	83 c4 10             	add    esp,0x10
c001e0da:	55                   	push   ebp
c001e0db:	57                   	push   edi
c001e0dc:	52                   	push   edx
c001e0dd:	50                   	push   eax
c001e0de:	e8 d2 f4 ff ff       	call   c001d5b5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e0e3:	83 c4 0c             	add    esp,0xc
c001e0e6:	eb 53                	jmp    c001e13b <Vm::x87Handler(regs*)+0xa17>
c001e0e8:	31 c0                	xor    eax,eax
c001e0ea:	80 fa 02             	cmp    dl,0x2
c001e0ed:	0f 85 92 00 00 00    	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	6a 00                	push   0x0
c001e0f8:	e8 ea f4 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e0fd:	59                   	pop    ecx
c001e0fe:	5f                   	pop    edi
c001e0ff:	52                   	push   edx
c001e100:	50                   	push   eax
c001e101:	e8 27 f2 ff ff       	call   c001d32d <Vm::fpuInternalTo64(unsigned long long)>
c001e106:	eb 70                	jmp    c001e178 <Vm::x87Handler(regs*)+0xa54>
c001e108:	31 c0                	xor    eax,eax
c001e10a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e10f:	75 74                	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001e111:	50                   	push   eax
c001e112:	50                   	push   eax
c001e113:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e116:	31 d2                	xor    edx,edx
c001e118:	52                   	push   edx
c001e119:	50                   	push   eax
c001e11a:	e8 f6 f2 ff ff       	call   c001d415 <Vm::fpuLongToFloat(long long)>
c001e11f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e126:	89 c6                	mov    esi,eax
c001e128:	89 d7                	mov    edi,edx
c001e12a:	e8 b8 f4 ff ff       	call   c001d5e7 <Vm::fpuGetReg(int)>
c001e12f:	57                   	push   edi
c001e130:	56                   	push   esi
c001e131:	52                   	push   edx
c001e132:	50                   	push   eax
c001e133:	e8 5e f4 ff ff       	call   c001d596 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e138:	83 c4 1c             	add    esp,0x1c
c001e13b:	52                   	push   edx
c001e13c:	50                   	push   eax
c001e13d:	6a 00                	push   0x0
c001e13f:	e8 e6 f4 ff ff       	call   c001d62a <Vm::fpuSetReg(int, unsigned long long)>
c001e144:	e9 f2 f7 ff ff       	jmp    c001d93b <Vm::x87Handler(regs*)+0x217>
c001e149:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e14d:	80 fa 05             	cmp    dl,0x5
c001e150:	75 11                	jne    c001e163 <Vm::x87Handler(regs*)+0xa3f>
c001e152:	55                   	push   ebp
c001e153:	55                   	push   ebp
c001e154:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e157:	ff 36                	push   DWORD PTR [esi]
c001e159:	e8 81 f2 ff ff       	call   c001d3df <Vm::fpuULongToFloat(unsigned long long)>
c001e15e:	e9 cf f7 ff ff       	jmp    c001d932 <Vm::x87Handler(regs*)+0x20e>
c001e163:	31 c0                	xor    eax,eax
c001e165:	80 fa 07             	cmp    dl,0x7
c001e168:	75 1b                	jne    c001e185 <Vm::x87Handler(regs*)+0xa61>
c001e16a:	e8 63 f5 ff ff       	call   c001d6d2 <Vm::fpuPop()>
c001e16f:	51                   	push   ecx
c001e170:	51                   	push   ecx
c001e171:	52                   	push   edx
c001e172:	50                   	push   eax
c001e173:	e8 0c f2 ff ff       	call   c001d384 <Vm::fpuFloatToLong(unsigned long long)>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	89 06                	mov    DWORD PTR [esi],eax
c001e17d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e180:	e9 f8 f7 ff ff       	jmp    c001d97d <Vm::x87Handler(regs*)+0x259>
c001e185:	83 c4 1c             	add    esp,0x1c
c001e188:	5b                   	pop    ebx
c001e189:	5e                   	pop    esi
c001e18a:	5f                   	pop    edi
c001e18b:	5d                   	pop    ebp
c001e18c:	c3                   	ret    

c001e18d <__static_initialization_and_destruction_0(int, int)>:
c001e18d:	83 ec 0c             	sub    esp,0xc
c001e190:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e195:	75 1a                	jne    c001e1b1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e197:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e19f:	75 10                	jne    c001e1b1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e1a1:	83 ec 0c             	sub    esp,0xc
c001e1a4:	68 e0 be 02 c0       	push   0xc002bee0
c001e1a9:	e8 22 7b 00 00       	call   c0025cd0 <Vm::_FPUState::_FPUState()>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	90                   	nop
c001e1b2:	83 c4 0c             	add    esp,0xc
c001e1b5:	c3                   	ret    

c001e1b6 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	83 ec 08             	sub    esp,0x8
c001e1bc:	68 ff ff 00 00       	push   0xffff
c001e1c1:	6a 01                	push   0x1
c001e1c3:	e8 c5 ff ff ff       	call   c001e18d <__static_initialization_and_destruction_0(int, int)>
c001e1c8:	83 c4 10             	add    esp,0x10
c001e1cb:	83 c4 0c             	add    esp,0xc
c001e1ce:	c3                   	ret    
c001e1cf:	90                   	nop

c001e1d0 <FAT::getName()>:
c001e1d0:	b8 3c 90 02 c0       	mov    eax,0xc002903c
c001e1d5:	c3                   	ret    

c001e1d6 <FAT::tell(void*, unsigned long long*)>:
c001e1d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e1db:	75 06                	jne    c001e1e3 <FAT::tell(void*, unsigned long long*)+0xd>
c001e1dd:	b8 04 00 00 00       	mov    eax,0x4
c001e1e2:	c3                   	ret    
c001e1e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e1e8:	75 06                	jne    c001e1f0 <FAT::tell(void*, unsigned long long*)+0x1a>
c001e1ea:	b8 04 00 00 00       	mov    eax,0x4
c001e1ef:	c3                   	ret    
c001e1f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1f4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e1f7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e1fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1fe:	89 01                	mov    DWORD PTR [ecx],eax
c001e200:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e203:	b8 00 00 00 00       	mov    eax,0x0
c001e208:	c3                   	ret    
c001e209:	90                   	nop

c001e20a <FAT::stat(void*, unsigned long long*)>:
c001e20a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e20f:	75 06                	jne    c001e217 <FAT::stat(void*, unsigned long long*)+0xd>
c001e211:	b8 04 00 00 00       	mov    eax,0x4
c001e216:	c3                   	ret    
c001e217:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e21c:	75 06                	jne    c001e224 <FAT::stat(void*, unsigned long long*)+0x1a>
c001e21e:	b8 04 00 00 00       	mov    eax,0x4
c001e223:	c3                   	ret    
c001e224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e228:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e22b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e22e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e232:	89 01                	mov    DWORD PTR [ecx],eax
c001e234:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e237:	b8 00 00 00 00       	mov    eax,0x0
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <FAT::~FAT()>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	ba c0 90 02 c0       	mov    edx,0xc00290c0
c001e246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24a:	89 10                	mov    DWORD PTR [eax],edx
c001e24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	50                   	push   eax
c001e254:	e8 0f 47 ff ff       	call   c0012968 <Filesystem::~Filesystem()>
c001e259:	83 c4 10             	add    esp,0x10
c001e25c:	90                   	nop
c001e25d:	83 c4 0c             	add    esp,0xc
c001e260:	c3                   	ret    
c001e261:	90                   	nop

c001e262 <FAT::~FAT()>:
c001e262:	83 ec 0c             	sub    esp,0xc
c001e265:	83 ec 0c             	sub    esp,0xc
c001e268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e26c:	e8 cd ff ff ff       	call   c001e23e <FAT::~FAT()>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	83 ec 08             	sub    esp,0x8
c001e277:	6a 08                	push   0x8
c001e279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e27d:	e8 dd 42 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c001e282:	83 c4 10             	add    esp,0x10
c001e285:	83 c4 0c             	add    esp,0xc
c001e288:	c3                   	ret    
c001e289:	90                   	nop

c001e28a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e28a:	83 ec 1c             	sub    esp,0x1c
c001e28d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e294:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e29d:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e2a4:	83 f8 ff             	cmp    eax,0xffffffff
c001e2a7:	75 34                	jne    c001e2dd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e2a9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2ad:	88 c2                	mov    dl,al
c001e2af:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e2b4:	01 d0                	add    eax,edx
c001e2b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2ba:	8b 15 40 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf40
c001e2c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2c4:	89 14 85 60 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40a0],edx
c001e2cb:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e2d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2d4:	89 14 85 e0 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4020],edx
c001e2db:	eb 17                	jmp    c001e2f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e2dd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e2e1:	88 c2                	mov    dl,al
c001e2e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2e7:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e2ee:	01 d0                	add    eax,edx
c001e2f0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e2f4:	83 ec 04             	sub    esp,0x4
c001e2f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e2fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e2ff:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e303:	50                   	push   eax
c001e304:	e8 d1 87 fe ff       	call   c0006ada <f_getlabel>
c001e309:	83 c4 10             	add    esp,0x10
c001e30c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e315:	75 07                	jne    c001e31e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e317:	b8 00 00 00 00       	mov    eax,0x0
c001e31c:	eb 05                	jmp    c001e323 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e31e:	b8 01 00 00 00       	mov    eax,0x1
c001e323:	83 c4 1c             	add    esp,0x1c
c001e326:	c3                   	ret    
c001e327:	90                   	nop

c001e328 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e328:	57                   	push   edi
c001e329:	83 ec 58             	sub    esp,0x58
c001e32c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e334:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e338:	b9 0f 00 00 00       	mov    ecx,0xf
c001e33d:	b8 00 00 00 00       	mov    eax,0x0
c001e342:	fc                   	cld    
c001e343:	89 d7                	mov    edi,edx
c001e345:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e347:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e34b:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e352:	83 f8 ff             	cmp    eax,0xffffffff
c001e355:	75 34                	jne    c001e38b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e357:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e35b:	88 c2                	mov    dl,al
c001e35d:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e362:	01 d0                	add    eax,edx
c001e364:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e368:	8b 15 40 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf40
c001e36e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e372:	89 14 85 60 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40a0],edx
c001e379:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e37e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e382:	89 14 85 e0 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4020],edx
c001e389:	eb 17                	jmp    c001e3a2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e38b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e38f:	88 c2                	mov    dl,al
c001e391:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e395:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e39c:	01 d0                	add    eax,edx
c001e39e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e3a2:	83 ec 08             	sub    esp,0x8
c001e3a5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e3a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e3ad:	50                   	push   eax
c001e3ae:	e8 20 24 fe ff       	call   c00007d3 <strcat>
c001e3b3:	83 c4 10             	add    esp,0x10
c001e3b6:	83 ec 0c             	sub    esp,0xc
c001e3b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e3bd:	50                   	push   eax
c001e3be:	e8 05 89 fe ff       	call   c0006cc8 <f_setlabel>
c001e3c3:	83 c4 10             	add    esp,0x10
c001e3c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e3ca:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e3cf:	75 07                	jne    c001e3d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e3d1:	b8 00 00 00 00       	mov    eax,0x0
c001e3d6:	eb 05                	jmp    c001e3dd <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e3d8:	b8 01 00 00 00       	mov    eax,0x1
c001e3dd:	83 c4 58             	add    esp,0x58
c001e3e0:	5f                   	pop    edi
c001e3e1:	c3                   	ret    

c001e3e2 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e3e2:	83 ec 2c             	sub    esp,0x2c
c001e3e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e3ed:	83 ec 08             	sub    esp,0x8
c001e3f0:	68 60 90 02 c0       	push   0xc0029060
c001e3f5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e3f9:	e8 6f 23 fe ff       	call   c000076d <strcmp>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	85 c0                	test   eax,eax
c001e403:	0f 94 c0             	sete   al
c001e406:	84 c0                	test   al,al
c001e408:	74 0d                	je     c001e417 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e40a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e412:	e9 a6 00 00 00       	jmp    c001e4bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e417:	83 ec 08             	sub    esp,0x8
c001e41a:	68 52 90 02 c0       	push   0xc0029052
c001e41f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e423:	e8 45 23 fe ff       	call   c000076d <strcmp>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	85 c0                	test   eax,eax
c001e42d:	0f 94 c0             	sete   al
c001e430:	84 c0                	test   al,al
c001e432:	74 0a                	je     c001e43e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e434:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e43c:	eb 7f                	jmp    c001e4bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e43e:	83 ec 08             	sub    esp,0x8
c001e441:	68 58 90 02 c0       	push   0xc0029058
c001e446:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e44a:	e8 1e 23 fe ff       	call   c000076d <strcmp>
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	85 c0                	test   eax,eax
c001e454:	0f 94 c0             	sete   al
c001e457:	84 c0                	test   al,al
c001e459:	74 0a                	je     c001e465 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e45b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e463:	eb 58                	jmp    c001e4bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e465:	83 ec 08             	sub    esp,0x8
c001e468:	68 4c 63 02 c0       	push   0xc002634c
c001e46d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e471:	e8 f7 22 fe ff       	call   c000076d <strcmp>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	85 c0                	test   eax,eax
c001e47b:	0f 94 c0             	sete   al
c001e47e:	84 c0                	test   al,al
c001e480:	74 0a                	je     c001e48c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e482:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e48a:	eb 31                	jmp    c001e4bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e48c:	83 ec 08             	sub    esp,0x8
c001e48f:	68 5e 90 02 c0       	push   0xc002905e
c001e494:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e498:	e8 d0 22 fe ff       	call   c000076d <strcmp>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	85 c0                	test   eax,eax
c001e4a2:	0f 94 c0             	sete   al
c001e4a5:	84 c0                	test   al,al
c001e4a7:	74 0a                	je     c001e4b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e4a9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e4b1:	eb 0a                	jmp    c001e4bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e4b3:	b8 08 00 00 00       	mov    eax,0x8
c001e4b8:	e9 04 01 00 00       	jmp    c001e5c1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e4bd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e4c4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e4c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4cd:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e4d4:	83 f8 ff             	cmp    eax,0xffffffff
c001e4d7:	75 34                	jne    c001e50d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e4d9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e4dd:	88 c2                	mov    dl,al
c001e4df:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e4e4:	01 d0                	add    eax,edx
c001e4e6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e4ea:	8b 15 40 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf40
c001e4f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4f4:	89 14 85 60 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40a0],edx
c001e4fb:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e500:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e504:	89 14 85 e0 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4020],edx
c001e50b:	eb 17                	jmp    c001e524 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e50d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e511:	88 c2                	mov    dl,al
c001e513:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e517:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e51e:	01 d0                	add    eax,edx
c001e520:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e524:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e528:	88 04 24             	mov    BYTE PTR [esp],al
c001e52b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e52f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e533:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e53b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e540:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e548:	83 ec 0c             	sub    esp,0xc
c001e54b:	68 00 20 00 00       	push   0x2000
c001e550:	e8 77 0f ff ff       	call   c000f4cc <malloc>
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e55c:	68 00 20 00 00       	push   0x2000
c001e561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e565:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e569:	50                   	push   eax
c001e56a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e56e:	50                   	push   eax
c001e56f:	e8 9f 8b fe ff       	call   c0007113 <f_mkfs>
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e57b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e580:	75 07                	jne    c001e589 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e582:	b8 00 00 00 00       	mov    eax,0x0
c001e587:	eb 38                	jmp    c001e5c1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e589:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e58e:	75 17                	jne    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e590:	83 ec 0c             	sub    esp,0xc
c001e593:	68 90 90 02 c0       	push   0xc0029090
c001e598:	e8 a2 40 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001e59d:	83 c4 10             	add    esp,0x10
c001e5a0:	b8 09 00 00 00       	mov    eax,0x9
c001e5a5:	eb 1a                	jmp    c001e5c1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5ab:	83 ec 08             	sub    esp,0x8
c001e5ae:	50                   	push   eax
c001e5af:	68 64 90 02 c0       	push   0xc0029064
c001e5b4:	e8 86 40 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	b8 01 00 00 00       	mov    eax,0x1
c001e5c1:	83 c4 2c             	add    esp,0x2c
c001e5c4:	c3                   	ret    
c001e5c5:	90                   	nop

c001e5c6 <FAT::tryMount(LogicalDisk*, int)>:
c001e5c6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e5cc:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e5d1:	83 f8 14             	cmp    eax,0x14
c001e5d4:	75 17                	jne    c001e5ed <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e5d6:	83 ec 0c             	sub    esp,0xc
c001e5d9:	68 76 90 02 c0       	push   0xc0029076
c001e5de:	e8 20 a8 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001e5e3:	83 c4 10             	add    esp,0x10
c001e5e6:	b0 00                	mov    al,0x0
c001e5e8:	e9 d7 01 00 00       	jmp    c001e7c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e5ed:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e5f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e5fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e600:	3d 00 02 00 00       	cmp    eax,0x200
c001e605:	74 07                	je     c001e60e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e607:	b0 00                	mov    al,0x0
c001e609:	e9 b6 01 00 00       	jmp    c001e7c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e60e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e616:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e61d:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001e624:	83 f8 ff             	cmp    eax,0xffffffff
c001e627:	74 07                	je     c001e630 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e629:	b0 01                	mov    al,0x1
c001e62b:	e9 94 01 00 00       	jmp    c001e7c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e630:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e63a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e642:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e649:	88 c2                	mov    dl,al
c001e64b:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e650:	01 d0                	add    eax,edx
c001e652:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e659:	8b 15 40 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf40
c001e65f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e666:	89 14 85 60 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40a0],edx
c001e66d:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e672:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e679:	89 14 85 e0 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4020],edx
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 54 02 00 00       	push   0x254
c001e688:	e8 3f 0e ff ff       	call   c000f4cc <malloc>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e697:	83 ec 04             	sub    esp,0x4
c001e69a:	6a 00                	push   0x0
c001e69c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e6a3:	50                   	push   eax
c001e6a4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e6ab:	e8 21 66 fe ff       	call   c0004cd1 <f_mount>
c001e6b0:	83 c4 10             	add    esp,0x10
c001e6b3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e6ba:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e6c2:	74 19                	je     c001e6dd <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e6ce:	e8 19 0e ff ff       	call   c000f4ec <rfree>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	b0 00                	mov    al,0x0
c001e6d8:	e9 e7 00 00 00       	jmp    c001e7c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e6dd:	83 ec 04             	sub    esp,0x4
c001e6e0:	68 00 01 00 00       	push   0x100
c001e6e5:	6a 00                	push   0x0
c001e6e7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e6ee:	50                   	push   eax
c001e6ef:	e8 89 1f fe ff       	call   c000067d <memset>
c001e6f4:	83 c4 10             	add    esp,0x10
c001e6f7:	83 ec 08             	sub    esp,0x8
c001e6fa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e701:	50                   	push   eax
c001e702:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e709:	50                   	push   eax
c001e70a:	e8 c4 20 fe ff       	call   c00007d3 <strcat>
c001e70f:	83 c4 10             	add    esp,0x10
c001e712:	83 ec 08             	sub    esp,0x8
c001e715:	68 84 90 02 c0       	push   0xc0029084
c001e71a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e721:	50                   	push   eax
c001e722:	e8 ac 20 fe ff       	call   c00007d3 <strcat>
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	83 ec 04             	sub    esp,0x4
c001e72d:	6a 01                	push   0x1
c001e72f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e736:	50                   	push   eax
c001e737:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e73b:	50                   	push   eax
c001e73c:	e8 f2 65 fe ff       	call   c0004d33 <f_open>
c001e741:	83 c4 10             	add    esp,0x10
c001e744:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e74b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e752:	85 c0                	test   eax,eax
c001e754:	74 0a                	je     c001e760 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e756:	78 2d                	js     c001e785 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e758:	83 e8 04             	sub    eax,0x4
c001e75b:	83 f8 01             	cmp    eax,0x1
c001e75e:	77 25                	ja     c001e785 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e760:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e768:	83 ec 0c             	sub    esp,0xc
c001e76b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e76f:	50                   	push   eax
c001e770:	e8 10 71 fe ff       	call   c0005885 <f_close>
c001e775:	83 c4 10             	add    esp,0x10
c001e778:	90                   	nop
c001e779:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e781:	74 3a                	je     c001e7bd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e783:	eb 2d                	jmp    c001e7b2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e78f:	e8 58 0d ff ff       	call   c000f4ec <rfree>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	83 ec 04             	sub    esp,0x4
c001e79a:	6a 00                	push   0x0
c001e79c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e7a3:	50                   	push   eax
c001e7a4:	6a 00                	push   0x0
c001e7a6:	e8 26 65 fe ff       	call   c0004cd1 <f_mount>
c001e7ab:	83 c4 10             	add    esp,0x10
c001e7ae:	b0 00                	mov    al,0x0
c001e7b0:	eb 12                	jmp    c001e7c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e7b2:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001e7b7:	40                   	inc    eax
c001e7b8:	a3 40 bf 02 c0       	mov    ds:0xc002bf40,eax
c001e7bd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e7c4:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e7ca:	c3                   	ret    
c001e7cb:	90                   	nop

c001e7cc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e7cc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e7d2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e7da:	74 0a                	je     c001e7e6 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e7dc:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e7e4:	75 0a                	jne    c001e7f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e7e6:	b8 04 00 00 00       	mov    eax,0x4
c001e7eb:	e9 db 00 00 00       	jmp    c001e8cb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e7f0:	83 ec 08             	sub    esp,0x8
c001e7f3:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e7fa:	50                   	push   eax
c001e7fb:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e802:	e8 88 76 fe ff       	call   c0005e8f <f_readdir>
c001e807:	83 c4 10             	add    esp,0x10
c001e80a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e811:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e817:	83 ec 0c             	sub    esp,0xc
c001e81a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e821:	83 c0 1a             	add    eax,0x1a
c001e824:	50                   	push   eax
c001e825:	e8 70 1e fe ff       	call   c000069a <strlen>
c001e82a:	83 c4 10             	add    esp,0x10
c001e82d:	ba 00 00 00 00       	mov    edx,0x0
c001e832:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e836:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e83a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e841:	0f b6 c0             	movzx  eax,al
c001e844:	83 e0 10             	and    eax,0x10
c001e847:	74 07                	je     c001e850 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e849:	b8 02 00 00 00       	mov    eax,0x2
c001e84e:	eb 05                	jmp    c001e855 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e850:	b8 01 00 00 00       	mov    eax,0x1
c001e855:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e859:	83 ec 08             	sub    esp,0x8
c001e85c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e863:	83 c0 1a             	add    eax,0x1a
c001e866:	50                   	push   eax
c001e867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e86b:	83 c0 10             	add    eax,0x10
c001e86e:	50                   	push   eax
c001e86f:	e8 a8 1e fe ff       	call   c000071c <strcpy>
c001e874:	83 c4 10             	add    esp,0x10
c001e877:	83 ec 04             	sub    esp,0x4
c001e87a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e881:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e885:	50                   	push   eax
c001e886:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e88d:	e8 b5 1d fe ff       	call   c0000647 <memcpy>
c001e892:	83 c4 10             	add    esp,0x10
c001e895:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e89c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e8a2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e8a9:	84 c0                	test   al,al
c001e8ab:	75 07                	jne    c001e8b4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e8ad:	b8 07 00 00 00       	mov    eax,0x7
c001e8b2:	eb 17                	jmp    c001e8cb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e8b4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e8bb:	85 c0                	test   eax,eax
c001e8bd:	75 07                	jne    c001e8c6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e8bf:	b8 00 00 00 00       	mov    eax,0x0
c001e8c4:	eb 05                	jmp    c001e8cb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e8c6:	b8 01 00 00 00       	mov    eax,0x1
c001e8cb:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e8d1:	c3                   	ret    

c001e8d2 <FAT::read(void*, unsigned long, void*, int*)>:
c001e8d2:	83 ec 1c             	sub    esp,0x1c
c001e8d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e8da:	74 07                	je     c001e8e3 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e8dc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e8e1:	75 07                	jne    c001e8ea <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e8e3:	b8 04 00 00 00       	mov    eax,0x4
c001e8e8:	eb 3d                	jmp    c001e927 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e8ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e8ee:	50                   	push   eax
c001e8ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e8f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e8fb:	e8 6f 68 fe ff       	call   c000516f <f_read>
c001e900:	83 c4 10             	add    esp,0x10
c001e903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e907:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e90b:	89 c2                	mov    edx,eax
c001e90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e911:	89 10                	mov    DWORD PTR [eax],edx
c001e913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e917:	85 c0                	test   eax,eax
c001e919:	75 07                	jne    c001e922 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e91b:	b8 00 00 00 00       	mov    eax,0x0
c001e920:	eb 05                	jmp    c001e927 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e922:	b8 01 00 00 00       	mov    eax,0x1
c001e927:	83 c4 1c             	add    esp,0x1c
c001e92a:	c3                   	ret    
c001e92b:	90                   	nop

c001e92c <FAT::write(void*, unsigned long, void*, int*)>:
c001e92c:	83 ec 1c             	sub    esp,0x1c
c001e92f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e934:	74 07                	je     c001e93d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e936:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e93b:	75 07                	jne    c001e944 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e93d:	b8 04 00 00 00       	mov    eax,0x4
c001e942:	eb 3d                	jmp    c001e981 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e944:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e948:	50                   	push   eax
c001e949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e94d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e951:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e955:	e8 95 6a fe ff       	call   c00053ef <f_write>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e965:	89 c2                	mov    edx,eax
c001e967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e96b:	89 10                	mov    DWORD PTR [eax],edx
c001e96d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e971:	85 c0                	test   eax,eax
c001e973:	75 07                	jne    c001e97c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e975:	b8 00 00 00 00       	mov    eax,0x0
c001e97a:	eb 05                	jmp    c001e981 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e97c:	b8 01 00 00 00       	mov    eax,0x1
c001e981:	83 c4 1c             	add    esp,0x1c
c001e984:	c3                   	ret    
c001e985:	90                   	nop

c001e986 <FAT::close(void*)>:
c001e986:	83 ec 1c             	sub    esp,0x1c
c001e989:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e98e:	75 07                	jne    c001e997 <FAT::close(void*)+0x11>
c001e990:	b8 04 00 00 00       	mov    eax,0x4
c001e995:	eb 36                	jmp    c001e9cd <FAT::close(void*)+0x47>
c001e997:	83 ec 0c             	sub    esp,0xc
c001e99a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e99e:	e8 e2 6e fe ff       	call   c0005885 <f_close>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e9b1:	e8 26 0b ff ff       	call   c000f4dc <free>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	75 07                	jne    c001e9c8 <FAT::close(void*)+0x42>
c001e9c1:	b8 00 00 00 00       	mov    eax,0x0
c001e9c6:	eb 05                	jmp    c001e9cd <FAT::close(void*)+0x47>
c001e9c8:	b8 01 00 00 00       	mov    eax,0x1
c001e9cd:	83 c4 1c             	add    esp,0x1c
c001e9d0:	c3                   	ret    
c001e9d1:	90                   	nop

c001e9d2 <FAT::closeDir(void*)>:
c001e9d2:	83 ec 1c             	sub    esp,0x1c
c001e9d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e9da:	75 07                	jne    c001e9e3 <FAT::closeDir(void*)+0x11>
c001e9dc:	b8 04 00 00 00       	mov    eax,0x4
c001e9e1:	eb 36                	jmp    c001ea19 <FAT::closeDir(void*)+0x47>
c001e9e3:	83 ec 0c             	sub    esp,0xc
c001e9e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e9ea:	e8 7e 74 fe ff       	call   c0005e6d <f_closedir>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9f6:	83 ec 0c             	sub    esp,0xc
c001e9f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e9fd:	e8 da 0a ff ff       	call   c000f4dc <free>
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea09:	85 c0                	test   eax,eax
c001ea0b:	75 07                	jne    c001ea14 <FAT::closeDir(void*)+0x42>
c001ea0d:	b8 00 00 00 00       	mov    eax,0x0
c001ea12:	eb 05                	jmp    c001ea19 <FAT::closeDir(void*)+0x47>
c001ea14:	b8 01 00 00 00       	mov    eax,0x1
c001ea19:	83 c4 1c             	add    esp,0x1c
c001ea1c:	c3                   	ret    
c001ea1d:	90                   	nop

c001ea1e <FAT::seek(void*, unsigned long long)>:
c001ea1e:	83 ec 2c             	sub    esp,0x2c
c001ea21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ea25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ea2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea31:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ea36:	75 07                	jne    c001ea3f <FAT::seek(void*, unsigned long long)+0x21>
c001ea38:	b8 04 00 00 00       	mov    eax,0x4
c001ea3d:	eb 2f                	jmp    c001ea6e <FAT::seek(void*, unsigned long long)+0x50>
c001ea3f:	83 ec 04             	sub    esp,0x4
c001ea42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ea4e:	e8 61 6e fe ff       	call   c00058b4 <f_lseek>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ea5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea5e:	85 c0                	test   eax,eax
c001ea60:	75 07                	jne    c001ea69 <FAT::seek(void*, unsigned long long)+0x4b>
c001ea62:	b8 00 00 00 00       	mov    eax,0x0
c001ea67:	eb 05                	jmp    c001ea6e <FAT::seek(void*, unsigned long long)+0x50>
c001ea69:	b8 01 00 00 00       	mov    eax,0x1
c001ea6e:	83 c4 2c             	add    esp,0x2c
c001ea71:	c3                   	ret    

c001ea72 <fatWrapperReadDisk>:
c001ea72:	83 ec 1c             	sub    esp,0x1c
c001ea75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea79:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ea7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea81:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ea88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ea91:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c001ea98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eaa3:	52                   	push   edx
c001eaa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaac:	50                   	push   eax
c001eaad:	e8 a0 71 ff ff       	call   c0015c52 <LogicalDisk::read(unsigned long long, int, void*)>
c001eab2:	83 c4 20             	add    esp,0x20
c001eab5:	83 c4 1c             	add    esp,0x1c
c001eab8:	c3                   	ret    

c001eab9 <fatWrapperWriteDisk>:
c001eab9:	83 ec 1c             	sub    esp,0x1c
c001eabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eac0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eac4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eac8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eacb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001eacf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ead3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ead8:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c001eadf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001eae3:	83 ec 0c             	sub    esp,0xc
c001eae6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eaea:	52                   	push   edx
c001eaeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eaf3:	50                   	push   eax
c001eaf4:	e8 c5 71 ff ff       	call   c0015cbe <LogicalDisk::write(unsigned long long, int, void*)>
c001eaf9:	83 c4 20             	add    esp,0x20
c001eafc:	83 c4 1c             	add    esp,0x1c
c001eaff:	c3                   	ret    

c001eb00 <fatWrapperIoctl>:
c001eb00:	53                   	push   ebx
c001eb01:	83 ec 28             	sub    esp,0x28
c001eb04:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001eb08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eb0c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eb10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eb14:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001eb19:	75 31                	jne    c001eb4c <fatWrapperIoctl+0x4c>
c001eb1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eb23:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb28:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c001eb2f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001eb35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb3f:	66 89 02             	mov    WORD PTR [edx],ax
c001eb42:	b8 00 00 00 00       	mov    eax,0x0
c001eb47:	e9 b2 00 00 00       	jmp    c001ebfe <fatWrapperIoctl+0xfe>
c001eb4c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001eb51:	75 6a                	jne    c001ebbd <fatWrapperIoctl+0xbd>
c001eb53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eb5b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb60:	8b 04 85 a0 af 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5060]
c001eb67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001eb6d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001eb73:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001eb79:	89 c8                	mov    eax,ecx
c001eb7b:	89 da                	mov    edx,ebx
c001eb7d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001eb81:	c1 e0 0a             	shl    eax,0xa
c001eb84:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001eb89:	8b 0c 8d a0 af 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5060]
c001eb90:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001eb96:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001eb9c:	89 cb                	mov    ebx,ecx
c001eb9e:	c1 fb 1f             	sar    ebx,0x1f
c001eba1:	53                   	push   ebx
c001eba2:	51                   	push   ecx
c001eba3:	52                   	push   edx
c001eba4:	50                   	push   eax
c001eba5:	e8 d2 4d 00 00       	call   c002397c <__udivdi3>
c001ebaa:	83 c4 10             	add    esp,0x10
c001ebad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ebb1:	89 01                	mov    DWORD PTR [ecx],eax
c001ebb3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ebb6:	b8 00 00 00 00       	mov    eax,0x0
c001ebbb:	eb 41                	jmp    c001ebfe <fatWrapperIoctl+0xfe>
c001ebbd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ebc2:	75 07                	jne    c001ebcb <fatWrapperIoctl+0xcb>
c001ebc4:	b8 00 00 00 00       	mov    eax,0x0
c001ebc9:	eb 33                	jmp    c001ebfe <fatWrapperIoctl+0xfe>
c001ebcb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ebd0:	75 19                	jne    c001ebeb <fatWrapperIoctl+0xeb>
c001ebd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ebd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ebda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ebde:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ebe4:	b8 00 00 00 00       	mov    eax,0x0
c001ebe9:	eb 13                	jmp    c001ebfe <fatWrapperIoctl+0xfe>
c001ebeb:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ebf0:	75 07                	jne    c001ebf9 <fatWrapperIoctl+0xf9>
c001ebf2:	b8 00 00 00 00       	mov    eax,0x0
c001ebf7:	eb 05                	jmp    c001ebfe <fatWrapperIoctl+0xfe>
c001ebf9:	b8 04 00 00 00       	mov    eax,0x4
c001ebfe:	83 c4 28             	add    esp,0x28
c001ec01:	5b                   	pop    ebx
c001ec02:	c3                   	ret    
c001ec03:	90                   	nop

c001ec04 <FAT::FAT()>:
c001ec04:	83 ec 1c             	sub    esp,0x1c
c001ec07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	50                   	push   eax
c001ec0f:	e8 30 3d ff ff       	call   c0012944 <Filesystem::Filesystem()>
c001ec14:	83 c4 10             	add    esp,0x10
c001ec17:	ba c0 90 02 c0       	mov    edx,0xc00290c0
c001ec1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec20:	89 10                	mov    DWORD PTR [eax],edx
c001ec22:	c7 05 40 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bf40,0x0
c001ec2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ec34:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ec39:	7f 15                	jg     c001ec50 <FAT::FAT()+0x4c>
c001ec3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec3f:	c7 04 85 60 bf 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd40a0],0xffffffff
c001ec4a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ec4e:	eb e4                	jmp    c001ec34 <FAT::FAT()+0x30>
c001ec50:	90                   	nop
c001ec51:	83 c4 1c             	add    esp,0x1c
c001ec54:	c3                   	ret    
c001ec55:	90                   	nop

c001ec56 <FAT::fixFilepath(char*)>:
c001ec56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec5a:	8a 00                	mov    al,BYTE PTR [eax]
c001ec5c:	3c 40                	cmp    al,0x40
c001ec5e:	7e 2c                	jle    c001ec8c <FAT::fixFilepath(char*)+0x36>
c001ec60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec64:	8a 00                	mov    al,BYTE PTR [eax]
c001ec66:	83 e8 41             	sub    eax,0x41
c001ec69:	88 c2                	mov    dl,al
c001ec6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec6f:	88 10                	mov    BYTE PTR [eax],dl
c001ec71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec75:	8a 00                	mov    al,BYTE PTR [eax]
c001ec77:	0f be c0             	movsx  eax,al
c001ec7a:	8b 04 85 60 bf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd40a0]
c001ec81:	83 c0 30             	add    eax,0x30
c001ec84:	88 c2                	mov    dl,al
c001ec86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec8a:	88 10                	mov    BYTE PTR [eax],dl
c001ec8c:	90                   	nop
c001ec8d:	c3                   	ret    

c001ec8e <FAT::open(char const*, void**, FileOpenMode)>:
c001ec8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ec94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ec9c:	74 0a                	je     c001eca8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ec9e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001eca6:	75 0a                	jne    c001ecb2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001eca8:	b8 04 00 00 00       	mov    eax,0x4
c001ecad:	e9 fd 00 00 00       	jmp    c001edaf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ecb2:	83 ec 08             	sub    esp,0x8
c001ecb5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ecbc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecc0:	50                   	push   eax
c001ecc1:	e8 56 1a fe ff       	call   c000071c <strcpy>
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	83 ec 08             	sub    esp,0x8
c001eccc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ecd0:	50                   	push   eax
c001ecd1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ecd8:	e8 79 ff ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001ecdd:	83 c4 10             	add    esp,0x10
c001ece0:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ece8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ecef:	83 e0 01             	and    eax,0x1
c001ecf2:	74 08                	je     c001ecfc <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ecf4:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ecfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ed03:	83 e0 04             	and    eax,0x4
c001ed06:	74 10                	je     c001ed18 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ed08:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ed10:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ed18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ed1f:	83 e0 02             	and    eax,0x2
c001ed22:	74 08                	je     c001ed2c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ed24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ed2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ed33:	83 e0 08             	and    eax,0x8
c001ed36:	74 08                	je     c001ed40 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ed38:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ed40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ed47:	83 e0 10             	and    eax,0x10
c001ed4a:	74 08                	je     c001ed54 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ed4c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	68 50 02 00 00       	push   0x250
c001ed5c:	e8 6b 07 ff ff       	call   c000f4cc <malloc>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	89 c2                	mov    edx,eax
c001ed66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ed6d:	89 10                	mov    DWORD PTR [eax],edx
c001ed6f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ed77:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ed7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed80:	83 ec 04             	sub    esp,0x4
c001ed83:	52                   	push   edx
c001ed84:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ed88:	52                   	push   edx
c001ed89:	50                   	push   eax
c001ed8a:	e8 a4 5f fe ff       	call   c0004d33 <f_open>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ed99:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001eda1:	74 07                	je     c001edaa <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001eda3:	b8 01 00 00 00       	mov    eax,0x1
c001eda8:	eb 05                	jmp    c001edaf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001edaa:	b8 00 00 00 00       	mov    eax,0x0
c001edaf:	81 c4 1c 01 00 00    	add    esp,0x11c
c001edb5:	c3                   	ret    

c001edb6 <FAT::openDir(char const*, void**)>:
c001edb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001edbc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001edc4:	74 0a                	je     c001edd0 <FAT::openDir(char const*, void**)+0x1a>
c001edc6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001edce:	75 07                	jne    c001edd7 <FAT::openDir(char const*, void**)+0x21>
c001edd0:	b8 04 00 00 00       	mov    eax,0x4
c001edd5:	eb 7d                	jmp    c001ee54 <FAT::openDir(char const*, void**)+0x9e>
c001edd7:	83 ec 08             	sub    esp,0x8
c001edda:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ede1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ede5:	50                   	push   eax
c001ede6:	e8 31 19 fe ff       	call   c000071c <strcpy>
c001edeb:	83 c4 10             	add    esp,0x10
c001edee:	83 ec 08             	sub    esp,0x8
c001edf1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001edf5:	50                   	push   eax
c001edf6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001edfd:	e8 54 fe ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001ee02:	83 c4 10             	add    esp,0x10
c001ee05:	83 ec 0c             	sub    esp,0xc
c001ee08:	6a 4c                	push   0x4c
c001ee0a:	e8 bd 06 ff ff       	call   c000f4cc <malloc>
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	89 c2                	mov    edx,eax
c001ee14:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ee1b:	89 10                	mov    DWORD PTR [eax],edx
c001ee1d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	83 ec 08             	sub    esp,0x8
c001ee29:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ee2d:	52                   	push   edx
c001ee2e:	50                   	push   eax
c001ee2f:	e8 37 6f fe ff       	call   c0005d6b <f_opendir>
c001ee34:	83 c4 10             	add    esp,0x10
c001ee37:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ee3e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ee46:	74 07                	je     c001ee4f <FAT::openDir(char const*, void**)+0x99>
c001ee48:	b8 01 00 00 00       	mov    eax,0x1
c001ee4d:	eb 05                	jmp    c001ee54 <FAT::openDir(char const*, void**)+0x9e>
c001ee4f:	b8 00 00 00 00       	mov    eax,0x0
c001ee54:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ee5a:	c3                   	ret    
c001ee5b:	90                   	nop

c001ee5c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ee5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ee62:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ee6a:	75 0a                	jne    c001ee76 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001ee6c:	b8 04 00 00 00       	mov    eax,0x4
c001ee71:	e9 c9 00 00 00       	jmp    c001ef3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ee76:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ee7e:	75 0a                	jne    c001ee8a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001ee80:	b8 04 00 00 00       	mov    eax,0x4
c001ee85:	e9 b5 00 00 00       	jmp    c001ef3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ee8a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ee92:	75 0a                	jne    c001ee9e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ee94:	b8 04 00 00 00       	mov    eax,0x4
c001ee99:	e9 a1 00 00 00       	jmp    c001ef3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ee9e:	83 ec 08             	sub    esp,0x8
c001eea1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eea8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eeaf:	50                   	push   eax
c001eeb0:	e8 67 18 fe ff       	call   c000071c <strcpy>
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	83 ec 08             	sub    esp,0x8
c001eebb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001eec2:	50                   	push   eax
c001eec3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eeca:	e8 87 fd ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001eecf:	83 c4 10             	add    esp,0x10
c001eed2:	83 ec 08             	sub    esp,0x8
c001eed5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eed9:	50                   	push   eax
c001eeda:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eee1:	50                   	push   eax
c001eee2:	e8 43 70 fe ff       	call   c0005f2a <f_stat>
c001eee7:	83 c4 10             	add    esp,0x10
c001eeea:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eef1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eef8:	85 c0                	test   eax,eax
c001eefa:	74 07                	je     c001ef03 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001eefc:	83 f8 04             	cmp    eax,0x4
c001eeff:	74 32                	je     c001ef33 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ef01:	eb 37                	jmp    c001ef3a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ef03:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ef07:	0f b6 c0             	movzx  eax,al
c001ef0a:	83 e0 10             	and    eax,0x10
c001ef0d:	0f 95 c2             	setne  dl
c001ef10:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ef17:	88 10                	mov    BYTE PTR [eax],dl
c001ef19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ef20:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ef27:	89 01                	mov    DWORD PTR [ecx],eax
c001ef29:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ef2c:	b8 00 00 00 00       	mov    eax,0x0
c001ef31:	eb 0c                	jmp    c001ef3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ef33:	b8 02 00 00 00       	mov    eax,0x2
c001ef38:	eb 05                	jmp    c001ef3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ef3a:	b8 01 00 00 00       	mov    eax,0x1
c001ef3f:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ef45:	c3                   	ret    

c001ef46 <FAT::unlink(char const*)>:
c001ef46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ef4c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ef54:	75 07                	jne    c001ef5d <FAT::unlink(char const*)+0x17>
c001ef56:	b8 04 00 00 00       	mov    eax,0x4
c001ef5b:	eb 5c                	jmp    c001efb9 <FAT::unlink(char const*)+0x73>
c001ef5d:	83 ec 08             	sub    esp,0x8
c001ef60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ef67:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ef6b:	50                   	push   eax
c001ef6c:	e8 ab 17 fe ff       	call   c000071c <strcpy>
c001ef71:	83 c4 10             	add    esp,0x10
c001ef74:	83 ec 08             	sub    esp,0x8
c001ef77:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ef7b:	50                   	push   eax
c001ef7c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ef83:	e8 ce fc ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001ef88:	83 c4 10             	add    esp,0x10
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ef92:	50                   	push   eax
c001ef93:	e8 e4 72 fe ff       	call   c000627c <f_unlink>
c001ef98:	83 c4 10             	add    esp,0x10
c001ef9b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001efa2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001efa9:	85 c0                	test   eax,eax
c001efab:	75 07                	jne    c001efb4 <FAT::unlink(char const*)+0x6e>
c001efad:	b8 00 00 00 00       	mov    eax,0x0
c001efb2:	eb 05                	jmp    c001efb9 <FAT::unlink(char const*)+0x73>
c001efb4:	b8 01 00 00 00       	mov    eax,0x1
c001efb9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001efbf:	c3                   	ret    

c001efc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001efc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001efc6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001efcd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001efd4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001efd8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001efdc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001efe4:	75 0a                	jne    c001eff0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001efe6:	b8 04 00 00 00       	mov    eax,0x4
c001efeb:	e9 1c 01 00 00       	jmp    c001f10c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eff0:	83 ec 08             	sub    esp,0x8
c001eff3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001effa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001effe:	50                   	push   eax
c001efff:	e8 18 17 fe ff       	call   c000071c <strcpy>
c001f004:	83 c4 10             	add    esp,0x10
c001f007:	83 ec 08             	sub    esp,0x8
c001f00a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f00e:	50                   	push   eax
c001f00f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f016:	e8 3b fc ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f026:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f02e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f033:	83 e0 01             	and    eax,0x1
c001f036:	74 08                	je     c001f040 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f038:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f040:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f045:	83 e0 02             	and    eax,0x2
c001f048:	74 08                	je     c001f052 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f04a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f052:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f057:	83 e0 04             	and    eax,0x4
c001f05a:	74 08                	je     c001f064 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f05c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f064:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f069:	83 e0 08             	and    eax,0x8
c001f06c:	74 08                	je     c001f076 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f06e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f076:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f07b:	83 e0 01             	and    eax,0x1
c001f07e:	74 08                	je     c001f088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f080:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f088:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f08d:	83 e0 02             	and    eax,0x2
c001f090:	74 08                	je     c001f09a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f092:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f09a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f09f:	83 e0 04             	and    eax,0x4
c001f0a2:	74 08                	je     c001f0ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f0a4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f0ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f0b1:	83 e0 08             	and    eax,0x8
c001f0b4:	74 08                	je     c001f0be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f0b6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f0be:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f0c5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f0cc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f0d4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f0dc:	83 ec 04             	sub    esp,0x4
c001f0df:	52                   	push   edx
c001f0e0:	50                   	push   eax
c001f0e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f0e5:	50                   	push   eax
c001f0e6:	e8 33 78 fe ff       	call   c000691e <f_chmod>
c001f0eb:	83 c4 10             	add    esp,0x10
c001f0ee:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f0f5:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f0fc:	85 c0                	test   eax,eax
c001f0fe:	75 07                	jne    c001f107 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f100:	b8 00 00 00 00       	mov    eax,0x0
c001f105:	eb 05                	jmp    c001f10c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f107:	b8 01 00 00 00       	mov    eax,0x1
c001f10c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f112:	c3                   	ret    
c001f113:	90                   	nop

c001f114 <FAT::rename(char const*, char const*)>:
c001f114:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f11a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f122:	74 0a                	je     c001f12e <FAT::rename(char const*, char const*)+0x1a>
c001f124:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f12c:	75 0a                	jne    c001f138 <FAT::rename(char const*, char const*)+0x24>
c001f12e:	b8 04 00 00 00       	mov    eax,0x4
c001f133:	e9 98 00 00 00       	jmp    c001f1d0 <FAT::rename(char const*, char const*)+0xbc>
c001f138:	83 ec 08             	sub    esp,0x8
c001f13b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f142:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f149:	50                   	push   eax
c001f14a:	e8 cd 15 fe ff       	call   c000071c <strcpy>
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	83 ec 08             	sub    esp,0x8
c001f155:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f15c:	50                   	push   eax
c001f15d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f164:	e8 ed fa ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	83 ec 08             	sub    esp,0x8
c001f16f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f176:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f17a:	50                   	push   eax
c001f17b:	e8 9c 15 fe ff       	call   c000071c <strcpy>
c001f180:	83 c4 10             	add    esp,0x10
c001f183:	83 ec 08             	sub    esp,0x8
c001f186:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f18a:	50                   	push   eax
c001f18b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f192:	e8 bf fa ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001f197:	83 c4 10             	add    esp,0x10
c001f19a:	83 ec 08             	sub    esp,0x8
c001f19d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1a1:	50                   	push   eax
c001f1a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f1a9:	50                   	push   eax
c001f1aa:	e8 7c 74 fe ff       	call   c000662b <f_rename>
c001f1af:	83 c4 10             	add    esp,0x10
c001f1b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f1b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f1c0:	85 c0                	test   eax,eax
c001f1c2:	75 07                	jne    c001f1cb <FAT::rename(char const*, char const*)+0xb7>
c001f1c4:	b8 00 00 00 00       	mov    eax,0x0
c001f1c9:	eb 05                	jmp    c001f1d0 <FAT::rename(char const*, char const*)+0xbc>
c001f1cb:	b8 01 00 00 00       	mov    eax,0x1
c001f1d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f1d6:	c3                   	ret    
c001f1d7:	90                   	nop

c001f1d8 <FAT::mkdir(char const*)>:
c001f1d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f1de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f1e6:	75 07                	jne    c001f1ef <FAT::mkdir(char const*)+0x17>
c001f1e8:	b8 04 00 00 00       	mov    eax,0x4
c001f1ed:	eb 5c                	jmp    c001f24b <FAT::mkdir(char const*)+0x73>
c001f1ef:	83 ec 08             	sub    esp,0x8
c001f1f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f1f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f1fd:	50                   	push   eax
c001f1fe:	e8 19 15 fe ff       	call   c000071c <strcpy>
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	83 ec 08             	sub    esp,0x8
c001f209:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f20d:	50                   	push   eax
c001f20e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f215:	e8 3c fa ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001f21a:	83 c4 10             	add    esp,0x10
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f224:	50                   	push   eax
c001f225:	e8 d5 71 fe ff       	call   c00063ff <f_mkdir>
c001f22a:	83 c4 10             	add    esp,0x10
c001f22d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f234:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f23b:	85 c0                	test   eax,eax
c001f23d:	75 07                	jne    c001f246 <FAT::mkdir(char const*)+0x6e>
c001f23f:	b8 00 00 00 00       	mov    eax,0x0
c001f244:	eb 05                	jmp    c001f24b <FAT::mkdir(char const*)+0x73>
c001f246:	b8 01 00 00 00       	mov    eax,0x1
c001f24b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f251:	c3                   	ret    

c001f252 <FAT::exists(char const*)>:
c001f252:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f258:	83 ec 08             	sub    esp,0x8
c001f25b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f262:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f266:	50                   	push   eax
c001f267:	e8 b0 14 fe ff       	call   c000071c <strcpy>
c001f26c:	83 c4 10             	add    esp,0x10
c001f26f:	83 ec 08             	sub    esp,0x8
c001f272:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f276:	50                   	push   eax
c001f277:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f27e:	e8 d3 f9 ff ff       	call   c001ec56 <FAT::fixFilepath(char*)>
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	83 ec 08             	sub    esp,0x8
c001f289:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f290:	50                   	push   eax
c001f291:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f295:	50                   	push   eax
c001f296:	e8 8f 6c fe ff       	call   c0005f2a <f_stat>
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f2a5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f2ac:	85 c0                	test   eax,eax
c001f2ae:	75 04                	jne    c001f2b4 <FAT::exists(char const*)+0x62>
c001f2b0:	b0 01                	mov    al,0x1
c001f2b2:	eb 02                	jmp    c001f2b6 <FAT::exists(char const*)+0x64>
c001f2b4:	b0 00                	mov    al,0x0
c001f2b6:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f2bc:	c3                   	ret    
c001f2bd:	90                   	nop

c001f2be <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f2be:	b8 08 00 00 00       	mov    eax,0x8
c001f2c3:	c3                   	ret    

c001f2c4 <ISO9660::seek(void*, unsigned long long)>:
c001f2c4:	53                   	push   ebx
c001f2c5:	b8 04 00 00 00       	mov    eax,0x4
c001f2ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f2d6:	85 d2                	test   edx,edx
c001f2d8:	74 17                	je     c001f2f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f2da:	89 c8                	mov    eax,ecx
c001f2dc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f2df:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f2e2:	b8 01 00 00 00       	mov    eax,0x1
c001f2e7:	73 08                	jae    c001f2f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f2e9:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f2ec:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f2ef:	31 c0                	xor    eax,eax
c001f2f1:	5b                   	pop    ebx
c001f2f2:	c3                   	ret    
c001f2f3:	90                   	nop

c001f2f4 <ISO9660::tell(void*, unsigned long long*)>:
c001f2f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2fc:	85 d2                	test   edx,edx
c001f2fe:	74 12                	je     c001f312 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f300:	85 c0                	test   eax,eax
c001f302:	74 0e                	je     c001f312 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f304:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f307:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f30a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f30d:	89 10                	mov    DWORD PTR [eax],edx
c001f30f:	31 c0                	xor    eax,eax
c001f311:	c3                   	ret    
c001f312:	b8 04 00 00 00       	mov    eax,0x4
c001f317:	c3                   	ret    

c001f318 <ISO9660::getName()>:
c001f318:	b8 1c 91 02 c0       	mov    eax,0xc002911c
c001f31d:	c3                   	ret    

c001f31e <ISO9660::stat(void*, unsigned long long*)>:
c001f31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f322:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f326:	85 d2                	test   edx,edx
c001f328:	74 12                	je     c001f33c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f32a:	85 c0                	test   eax,eax
c001f32c:	74 0e                	je     c001f33c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f32e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f331:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f334:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f337:	89 10                	mov    DWORD PTR [eax],edx
c001f339:	31 c0                	xor    eax,eax
c001f33b:	c3                   	ret    
c001f33c:	b8 04 00 00 00       	mov    eax,0x4
c001f341:	c3                   	ret    

c001f342 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f342:	b8 01 00 00 00       	mov    eax,0x1
c001f347:	c3                   	ret    

c001f348 <ISO9660::unlink(char const*)>:
c001f348:	b8 01 00 00 00       	mov    eax,0x1
c001f34d:	c3                   	ret    

c001f34e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f34e:	b8 01 00 00 00       	mov    eax,0x1
c001f353:	c3                   	ret    

c001f354 <ISO9660::rename(char const*, char const*)>:
c001f354:	b8 01 00 00 00       	mov    eax,0x1
c001f359:	c3                   	ret    

c001f35a <ISO9660::mkdir(char const*)>:
c001f35a:	b8 01 00 00 00       	mov    eax,0x1
c001f35f:	c3                   	ret    

c001f360 <ISO9660::close(void*)>:
c001f360:	83 ec 0c             	sub    esp,0xc
c001f363:	b8 04 00 00 00       	mov    eax,0x4
c001f368:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f36c:	85 d2                	test   edx,edx
c001f36e:	74 0e                	je     c001f37e <ISO9660::close(void*)+0x1e>
c001f370:	83 ec 0c             	sub    esp,0xc
c001f373:	52                   	push   edx
c001f374:	e8 63 01 ff ff       	call   c000f4dc <free>
c001f379:	83 c4 10             	add    esp,0x10
c001f37c:	31 c0                	xor    eax,eax
c001f37e:	83 c4 0c             	add    esp,0xc
c001f381:	c3                   	ret    

c001f382 <ISO9660::closeDir(void*)>:
c001f382:	83 ec 0c             	sub    esp,0xc
c001f385:	b8 04 00 00 00       	mov    eax,0x4
c001f38a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f38e:	85 d2                	test   edx,edx
c001f390:	74 0e                	je     c001f3a0 <ISO9660::closeDir(void*)+0x1e>
c001f392:	83 ec 0c             	sub    esp,0xc
c001f395:	52                   	push   edx
c001f396:	e8 41 01 ff ff       	call   c000f4dc <free>
c001f39b:	83 c4 10             	add    esp,0x10
c001f39e:	31 c0                	xor    eax,eax
c001f3a0:	83 c4 0c             	add    esp,0xc
c001f3a3:	c3                   	ret    

c001f3a4 <ISO9660::~ISO9660()>:
c001f3a4:	83 ec 0c             	sub    esp,0xc
c001f3a7:	ba 70 91 02 c0       	mov    edx,0xc0029170
c001f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b0:	89 10                	mov    DWORD PTR [eax],edx
c001f3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b6:	83 ec 0c             	sub    esp,0xc
c001f3b9:	50                   	push   eax
c001f3ba:	e8 a9 35 ff ff       	call   c0012968 <Filesystem::~Filesystem()>
c001f3bf:	83 c4 10             	add    esp,0x10
c001f3c2:	90                   	nop
c001f3c3:	83 c4 0c             	add    esp,0xc
c001f3c6:	c3                   	ret    
c001f3c7:	90                   	nop

c001f3c8 <ISO9660::~ISO9660()>:
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	83 ec 0c             	sub    esp,0xc
c001f3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d2:	e8 cd ff ff ff       	call   c001f3a4 <ISO9660::~ISO9660()>
c001f3d7:	83 c4 10             	add    esp,0x10
c001f3da:	83 ec 08             	sub    esp,0x8
c001f3dd:	6a 08                	push   0x8
c001f3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e3:	e8 77 31 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c001f3e8:	83 c4 10             	add    esp,0x10
c001f3eb:	83 c4 0c             	add    esp,0xc
c001f3ee:	c3                   	ret    

c001f3ef <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f3ef:	55                   	push   ebp
c001f3f0:	31 c9                	xor    ecx,ecx
c001f3f2:	57                   	push   edi
c001f3f3:	56                   	push   esi
c001f3f4:	53                   	push   ebx
c001f3f5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f3f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f3fd:	89 eb                	mov    ebx,ebp
c001f3ff:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f403:	39 ce                	cmp    esi,ecx
c001f405:	7e 17                	jle    c001f41e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f407:	31 d2                	xor    edx,edx
c001f409:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f40d:	7d 13                	jge    c001f422 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f40f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f413:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f416:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f419:	75 0d                	jne    c001f428 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f41b:	42                   	inc    edx
c001f41c:	eb eb                	jmp    c001f409 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f41e:	31 c0                	xor    eax,eax
c001f420:	eb 0a                	jmp    c001f42c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f422:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f426:	eb 04                	jmp    c001f42c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f428:	41                   	inc    ecx
c001f429:	43                   	inc    ebx
c001f42a:	eb d7                	jmp    c001f403 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f42c:	5b                   	pop    ebx
c001f42d:	5e                   	pop    esi
c001f42e:	5f                   	pop    edi
c001f42f:	5d                   	pop    ebp
c001f430:	c3                   	ret    

c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f431:	56                   	push   esi
c001f432:	53                   	push   ebx
c001f433:	52                   	push   edx
c001f434:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f43c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f440:	39 0d 40 c0 02 c0    	cmp    DWORD PTR ds:0xc002c040,ecx
c001f446:	75 08                	jne    c001f450 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f448:	38 05 48 9f 02 c0    	cmp    BYTE PTR ds:0xc0029f48,al
c001f44e:	74 2b                	je     c001f47b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f450:	83 ec 0c             	sub    esp,0xc
c001f453:	a2 48 9f 02 c0       	mov    ds:0xc0029f48,al
c001f458:	68 60 c0 02 c0       	push   0xc002c060
c001f45d:	0f be c0             	movsx  eax,al
c001f460:	6a 01                	push   0x1
c001f462:	89 0d 40 c0 02 c0    	mov    DWORD PTR ds:0xc002c040,ecx
c001f468:	31 db                	xor    ebx,ebx
c001f46a:	53                   	push   ebx
c001f46b:	51                   	push   ecx
c001f46c:	ff 34 85 9c ae 02 c0 	push   DWORD PTR [eax*4-0x3ffd5164]
c001f473:	e8 da 67 ff ff       	call   c0015c52 <LogicalDisk::read(unsigned long long, int, void*)>
c001f478:	83 c4 20             	add    esp,0x20
c001f47b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f483:	c7 44 24 14 60 c0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002c060
c001f48b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f48f:	58                   	pop    eax
c001f490:	5b                   	pop    ebx
c001f491:	5e                   	pop    esi
c001f492:	e9 b0 11 fe ff       	jmp    c0000647 <memcpy>
c001f497:	90                   	nop

c001f498 <ISO9660::tryMount(LogicalDisk*, int)>:
c001f498:	81 ec 10 08 00 00    	sub    esp,0x810
c001f49e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f4a5:	83 c0 41             	add    eax,0x41
c001f4a8:	0f be c0             	movsx  eax,al
c001f4ab:	50                   	push   eax
c001f4ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f4b0:	50                   	push   eax
c001f4b1:	6a 10                	push   0x10
c001f4b3:	e8 79 ff ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4b8:	83 c4 10             	add    esp,0x10
c001f4bb:	31 c0                	xor    eax,eax
c001f4bd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f4c2:	75 1d                	jne    c001f4e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f4c4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f4c9:	75 16                	jne    c001f4e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f4cb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f4d0:	75 0f                	jne    c001f4e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f4d2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f4d7:	75 08                	jne    c001f4e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f4d9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f4de:	0f 94 c0             	sete   al
c001f4e1:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f4e7:	c3                   	ret    

c001f4e8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f4e8:	55                   	push   ebp
c001f4e9:	57                   	push   edi
c001f4ea:	56                   	push   esi
c001f4eb:	53                   	push   ebx
c001f4ec:	81 ec 34 08 00 00    	sub    esp,0x834
c001f4f2:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f4f9:	55                   	push   ebp
c001f4fa:	68 37 91 02 c0       	push   0xc0029137
c001f4ff:	e8 3b 31 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001f504:	83 c4 10             	add    esp,0x10
c001f507:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f50f:	0f 84 06 02 00 00    	je     c001f71b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f515:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f51d:	0f 84 f8 01 00 00    	je     c001f71b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f523:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f52a:	b8 01 00 00 00       	mov    eax,0x1
c001f52f:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f533:	0f 85 e7 01 00 00    	jne    c001f720 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f539:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f53c:	31 d2                	xor    edx,edx
c001f53e:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f541:	89 e9                	mov    ecx,ebp
c001f543:	89 d3                	mov    ebx,edx
c001f545:	01 f1                	add    ecx,esi
c001f547:	11 fb                	adc    ebx,edi
c001f549:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f54d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f551:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f558:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f55b:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f55e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f562:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f566:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f56a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f56e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f572:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f576:	72 19                	jb     c001f591 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f578:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f584:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f587:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f58b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f58f:	eb 13                	jmp    c001f5a4 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f595:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f599:	29 f0                	sub    eax,esi
c001f59b:	19 fa                	sbb    edx,edi
c001f59d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f5a4:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f5ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5b0:	53                   	push   ebx
c001f5b1:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f5b5:	c1 e0 0b             	shl    eax,0xb
c001f5b8:	01 c6                	add    esi,eax
c001f5ba:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f5c1:	11 d7                	adc    edi,edx
c001f5c3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f5c7:	89 fa                	mov    edx,edi
c001f5c9:	50                   	push   eax
c001f5ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f5ce:	50                   	push   eax
c001f5cf:	89 f0                	mov    eax,esi
c001f5d1:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f5d5:	50                   	push   eax
c001f5d6:	e8 56 fe ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5db:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f5e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f5e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f5ed:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f5f3:	83 c4 10             	add    esp,0x10
c001f5f6:	b8 00 08 00 00       	mov    eax,0x800
c001f5fb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f5ff:	29 d0                	sub    eax,edx
c001f601:	39 c1                	cmp    ecx,eax
c001f603:	83 db 00             	sbb    ebx,0x0
c001f606:	7d 19                	jge    c001f621 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f608:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f60d:	75 16                	jne    c001f625 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f60f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f61c:	e9 f6 00 00 00       	jmp    c001f717 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f621:	89 c5                	mov    ebp,eax
c001f623:	eb 03                	jmp    c001f628 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f625:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f628:	51                   	push   ecx
c001f629:	55                   	push   ebp
c001f62a:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f62e:	50                   	push   eax
c001f62f:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f636:	e8 0c 10 fe ff       	call   c0000647 <memcpy>
c001f63b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f63f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f643:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f64a:	01 e8                	add    eax,ebp
c001f64c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f650:	89 e8                	mov    eax,ebp
c001f652:	99                   	cdq    
c001f653:	01 ee                	add    esi,ebp
c001f655:	11 d7                	adc    edi,edx
c001f657:	29 e9                	sub    ecx,ebp
c001f659:	19 d3                	sbb    ebx,edx
c001f65b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f65f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f663:	83 c4 10             	add    esp,0x10
c001f666:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f66b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f66e:	b8 00 00 00 00       	mov    eax,0x0
c001f673:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f677:	7d 3f                	jge    c001f6b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f679:	52                   	push   edx
c001f67a:	89 fa                	mov    edx,edi
c001f67c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f683:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f687:	50                   	push   eax
c001f688:	89 f0                	mov    eax,esi
c001f68a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f68e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f692:	50                   	push   eax
c001f693:	e8 99 fd ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f698:	81 c6 00 08 00 00    	add    esi,0x800
c001f69e:	83 d7 00             	adc    edi,0x0
c001f6a1:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f6a9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f6b1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f6b6:	eb ab                	jmp    c001f663 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bc:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f6bf:	74 34                	je     c001f6f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f6c1:	89 fa                	mov    edx,edi
c001f6c3:	50                   	push   eax
c001f6c4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f6cb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f6cf:	50                   	push   eax
c001f6d0:	89 f0                	mov    eax,esi
c001f6d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f6d6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f6da:	55                   	push   ebp
c001f6db:	50                   	push   eax
c001f6dc:	e8 50 fd ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f6e1:	83 c4 0c             	add    esp,0xc
c001f6e4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f6e8:	55                   	push   ebp
c001f6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6ed:	e8 55 0f fe ff       	call   c0000647 <memcpy>
c001f6f2:	83 c4 10             	add    esp,0x10
c001f6f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f6fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f700:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f704:	89 38                	mov    DWORD PTR [eax],edi
c001f706:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f70d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f711:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f714:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f717:	31 c0                	xor    eax,eax
c001f719:	eb 05                	jmp    c001f720 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f71b:	b8 04 00 00 00       	mov    eax,0x4
c001f720:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f726:	5b                   	pop    ebx
c001f727:	5e                   	pop    esi
c001f728:	5f                   	pop    edi
c001f729:	5d                   	pop    ebp
c001f72a:	c3                   	ret    
c001f72b:	90                   	nop

c001f72c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f72c:	55                   	push   ebp
c001f72d:	57                   	push   edi
c001f72e:	56                   	push   esi
c001f72f:	53                   	push   ebx
c001f730:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f736:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f73d:	85 f6                	test   esi,esi
c001f73f:	0f 84 64 02 00 00    	je     c001f9a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f745:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f74d:	0f 84 56 02 00 00    	je     c001f9a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f753:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f756:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f759:	75 0a                	jne    c001f765 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f75b:	b8 07 00 00 00       	mov    eax,0x7
c001f760:	e9 49 02 00 00       	jmp    c001f9ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f765:	50                   	push   eax
c001f766:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f76a:	50                   	push   eax
c001f76b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f772:	53                   	push   ebx
c001f773:	8b 06                	mov    eax,DWORD PTR [esi]
c001f775:	c1 e0 0b             	shl    eax,0xb
c001f778:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f77b:	c1 e8 0b             	shr    eax,0xb
c001f77e:	50                   	push   eax
c001f77f:	e8 ad fc ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f784:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f787:	83 c4 10             	add    esp,0x10
c001f78a:	89 c1                	mov    ecx,eax
c001f78c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f78f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f795:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f798:	84 db                	test   bl,bl
c001f79a:	0f 85 90 00 00 00    	jne    c001f830 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f7a0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f7a6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f7ac:	29 c7                	sub    edi,eax
c001f7ae:	89 fb                	mov    ebx,edi
c001f7b0:	c1 fb 1f             	sar    ebx,0x1f
c001f7b3:	01 f8                	add    eax,edi
c001f7b5:	11 da                	adc    edx,ebx
c001f7b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f7bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f7bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f7c2:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f7c5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f7c8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f7d2:	89 d8                	mov    eax,ebx
c001f7d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f7d7:	ba 00 00 00 00       	mov    edx,0x0
c001f7dc:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f7e0:	b8 00 00 00 00       	mov    eax,0x0
c001f7e5:	73 0b                	jae    c001f7f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f7e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f7ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f7ee:	29 f8                	sub    eax,edi
c001f7f0:	19 da                	sbb    edx,ebx
c001f7f2:	89 d3                	mov    ebx,edx
c001f7f4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f7f7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f7fa:	09 c3                	or     ebx,eax
c001f7fc:	0f 84 59 ff ff ff    	je     c001f75b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f802:	55                   	push   ebp
c001f803:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f807:	50                   	push   eax
c001f808:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f80f:	53                   	push   ebx
c001f810:	8b 06                	mov    eax,DWORD PTR [esi]
c001f812:	c1 e0 0b             	shl    eax,0xb
c001f815:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f819:	c1 e8 0b             	shr    eax,0xb
c001f81c:	50                   	push   eax
c001f81d:	e8 0f fc ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f822:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f825:	83 c4 10             	add    esp,0x10
c001f828:	25 ff 07 00 00       	and    eax,0x7ff
c001f82d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f830:	57                   	push   edi
c001f831:	6a 28                	push   0x28
c001f833:	6a 00                	push   0x0
c001f835:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f839:	50                   	push   eax
c001f83a:	e8 3e 0e fe ff       	call   c000067d <memset>
c001f83f:	31 d2                	xor    edx,edx
c001f841:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f844:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f84a:	89 f8                	mov    eax,edi
c001f84c:	83 c0 21             	add    eax,0x21
c001f84f:	83 d2 00             	adc    edx,0x0
c001f852:	89 c7                	mov    edi,eax
c001f854:	89 d5                	mov    ebp,edx
c001f856:	83 c4 10             	add    esp,0x10
c001f859:	31 c9                	xor    ecx,ecx
c001f85b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f862:	83 f9 28             	cmp    ecx,0x28
c001f865:	88 04 24             	mov    BYTE PTR [esp],al
c001f868:	0f 94 c2             	sete   dl
c001f86b:	88 d0                	mov    al,dl
c001f86d:	ba ff 07 00 00       	mov    edx,0x7ff
c001f872:	39 fa                	cmp    edx,edi
c001f874:	ba 00 00 00 00       	mov    edx,0x0
c001f879:	19 ea                	sbb    edx,ebp
c001f87b:	0f 92 c2             	setb   dl
c001f87e:	09 c2                	or     edx,eax
c001f880:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f884:	0f 94 c0             	sete   al
c001f887:	08 d0                	or     al,dl
c001f889:	75 16                	jne    c001f8a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f88b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f88f:	74 10                	je     c001f8a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f891:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f894:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f898:	41                   	inc    ecx
c001f899:	83 c7 01             	add    edi,0x1
c001f89c:	83 d5 00             	adc    ebp,0x0
c001f89f:	eb ba                	jmp    c001f85b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f8a1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f8af:	57                   	push   edi
c001f8b0:	e8 e5 0d fe ff       	call   c000069a <strlen>
c001f8b5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f8bd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f8c1:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f8c8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f8cb:	5a                   	pop    edx
c001f8cc:	25 ff 07 00 00       	and    eax,0x7ff
c001f8d1:	01 c8                	add    eax,ecx
c001f8d3:	59                   	pop    ecx
c001f8d4:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f8da:	83 e0 02             	and    eax,0x2
c001f8dd:	3c 01                	cmp    al,0x1
c001f8df:	19 c0                	sbb    eax,eax
c001f8e1:	83 c0 02             	add    eax,0x2
c001f8e4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f8e8:	57                   	push   edi
c001f8e9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f8ed:	50                   	push   eax
c001f8ee:	e8 29 0e fe ff       	call   c000071c <strcpy>
c001f8f3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	84 c0                	test   al,al
c001f8fc:	75 21                	jne    c001f91f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f8fe:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f906:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f90e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f916:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f91d:	eb 28                	jmp    c001f947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f91f:	fe c8                	dec    al
c001f921:	75 24                	jne    c001f947 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f923:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f92b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f933:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f93b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f942:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f947:	0f b6 fb             	movzx  edi,bl
c001f94a:	31 db                	xor    ebx,ebx
c001f94c:	50                   	push   eax
c001f94d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f954:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f958:	50                   	push   eax
c001f959:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f960:	e8 e2 0c fe ff       	call   c0000647 <memcpy>
c001f965:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f96c:	89 f9                	mov    ecx,edi
c001f96e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f974:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f977:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f97a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f97d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f980:	83 c4 10             	add    esp,0x10
c001f983:	39 c7                	cmp    edi,eax
c001f985:	89 df                	mov    edi,ebx
c001f987:	19 d7                	sbb    edi,edx
c001f989:	72 10                	jb     c001f99b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f98b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f992:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f999:	eb 0a                	jmp    c001f9a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f99b:	29 c8                	sub    eax,ecx
c001f99d:	19 da                	sbb    edx,ebx
c001f99f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f9a2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f9a5:	31 c0                	xor    eax,eax
c001f9a7:	eb 05                	jmp    c001f9ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f9a9:	b8 04 00 00 00       	mov    eax,0x4
c001f9ae:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f9b4:	5b                   	pop    ebx
c001f9b5:	5e                   	pop    esi
c001f9b6:	5f                   	pop    edi
c001f9b7:	5d                   	pop    ebp
c001f9b8:	c3                   	ret    

c001f9b9 <readRoot(unsigned int*, unsigned int*, char)>:
c001f9b9:	81 ec 40 08 00 00    	sub    esp,0x840
c001f9bf:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f9c7:	50                   	push   eax
c001f9c8:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f9cc:	50                   	push   eax
c001f9cd:	6a 10                	push   0x10
c001f9cf:	e8 5d fa ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f9d4:	83 c4 0c             	add    esp,0xc
c001f9d7:	6a 22                	push   0x22
c001f9d9:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f9e0:	50                   	push   eax
c001f9e1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f9e5:	50                   	push   eax
c001f9e6:	e8 5c 0c fe ff       	call   c0000647 <memcpy>
c001f9eb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f9f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f9f6:	89 10                	mov    DWORD PTR [eax],edx
c001f9f8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f9ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa03:	89 10                	mov    DWORD PTR [eax],edx
c001fa05:	b0 01                	mov    al,0x1
c001fa07:	81 c4 4c 08 00 00    	add    esp,0x84c
c001fa0d:	c3                   	ret    

c001fa0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001fa0e:	55                   	push   ebp
c001fa0f:	57                   	push   edi
c001fa10:	56                   	push   esi
c001fa11:	53                   	push   ebx
c001fa12:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fa18:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fa1f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001fa26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fa2a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001fa2e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fa32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fa36:	75 03                	jne    c001fa3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fa38:	83 c3 02             	add    ebx,0x2
c001fa3b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001fa3e:	75 03                	jne    c001fa43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001fa40:	43                   	inc    ebx
c001fa41:	eb f8                	jmp    c001fa3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fa43:	51                   	push   ecx
c001fa44:	68 00 01 00 00       	push   0x100
c001fa49:	6a 00                	push   0x0
c001fa4b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa4f:	50                   	push   eax
c001fa50:	e8 28 0c fe ff       	call   c000067d <memset>
c001fa55:	83 c4 10             	add    esp,0x10
c001fa58:	31 d2                	xor    edx,edx
c001fa5a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fa5d:	84 c0                	test   al,al
c001fa5f:	74 21                	je     c001fa82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001fa61:	3c 2f                	cmp    al,0x2f
c001fa63:	75 0b                	jne    c001fa70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001fa65:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001fa69:	bd 01 00 00 00       	mov    ebp,0x1
c001fa6e:	eb 14                	jmp    c001fa84 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001fa70:	8d 48 9f             	lea    ecx,[eax-0x61]
c001fa73:	80 f9 19             	cmp    cl,0x19
c001fa76:	77 03                	ja     c001fa7b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fa78:	83 e8 20             	sub    eax,0x20
c001fa7b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001fa7f:	42                   	inc    edx
c001fa80:	eb d8                	jmp    c001fa5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001fa82:	31 ed                	xor    ebp,ebp
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001fa8e:	e8 39 fa fe ff       	call   c000f4cc <malloc>
c001fa93:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fa9a:	89 c6                	mov    esi,eax
c001fa9c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001faa2:	c1 ef 0b             	shr    edi,0xb
c001faa5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001faac:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001fab0:	83 c4 10             	add    esp,0x10
c001fab3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001fab8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fabc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001fac3:	74 28                	je     c001faed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001fac5:	52                   	push   edx
c001fac6:	57                   	push   edi
c001fac7:	50                   	push   eax
c001fac8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001facc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001fad3:	e8 59 f9 ff ff       	call   c001f431 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fadc:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001fae3:	05 00 08 00 00       	add    eax,0x800
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	eb cb                	jmp    c001fab8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001faed:	83 ec 0c             	sub    esp,0xc
c001faf0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001faf4:	57                   	push   edi
c001faf5:	e8 a0 0b fe ff       	call   c000069a <strlen>
c001fafa:	50                   	push   eax
c001fafb:	57                   	push   edi
c001fafc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001fb03:	56                   	push   esi
c001fb04:	e8 e6 f8 ff ff       	call   c001f3ef <__memmem(unsigned char*, int, unsigned char*, int)>
c001fb09:	83 c4 20             	add    esp,0x20
c001fb0c:	85 c0                	test   eax,eax
c001fb0e:	75 13                	jne    c001fb23 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	56                   	push   esi
c001fb14:	e8 c3 f9 fe ff       	call   c000f4dc <free>
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	31 c0                	xor    eax,eax
c001fb1e:	e9 b3 00 00 00       	jmp    c001fbd6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fb23:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001fb27:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001fb2b:	c1 e7 08             	shl    edi,0x8
c001fb2e:	c1 e2 10             	shl    edx,0x10
c001fb31:	09 d7                	or     edi,edx
c001fb33:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001fb37:	09 d7                	or     edi,edx
c001fb39:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001fb3d:	c1 e2 18             	shl    edx,0x18
c001fb40:	09 d7                	or     edi,edx
c001fb42:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001fb46:	89 d1                	mov    ecx,edx
c001fb48:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001fb4c:	c1 e1 08             	shl    ecx,0x8
c001fb4f:	c1 e2 10             	shl    edx,0x10
c001fb52:	09 ca                	or     edx,ecx
c001fb54:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001fb58:	09 ca                	or     edx,ecx
c001fb5a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001fb5e:	c1 e1 18             	shl    ecx,0x18
c001fb61:	09 ca                	or     edx,ecx
c001fb63:	89 e9                	mov    ecx,ebp
c001fb65:	84 c9                	test   cl,cl
c001fb67:	74 3c                	je     c001fba5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001fb69:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb6d:	83 ec 0c             	sub    esp,0xc
c001fb70:	56                   	push   esi
c001fb71:	e8 66 f9 fe ff       	call   c000f4dc <free>
c001fb76:	83 c4 0c             	add    esp,0xc
c001fb79:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fb80:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001fb85:	50                   	push   eax
c001fb86:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fb8d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fb94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb98:	52                   	push   edx
c001fb99:	57                   	push   edi
c001fb9a:	53                   	push   ebx
c001fb9b:	e8 6e fe ff ff       	call   c001fa0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fba0:	83 c4 20             	add    esp,0x20
c001fba3:	eb 31                	jmp    c001fbd6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fba5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001fba8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001fbaf:	d0 e8                	shr    al,1
c001fbb1:	89 3b                	mov    DWORD PTR [ebx],edi
c001fbb3:	83 e0 01             	and    eax,0x1
c001fbb6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001fbbd:	83 ec 0c             	sub    esp,0xc
c001fbc0:	89 13                	mov    DWORD PTR [ebx],edx
c001fbc2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001fbc9:	89 03                	mov    DWORD PTR [ebx],eax
c001fbcb:	56                   	push   esi
c001fbcc:	e8 0b f9 fe ff       	call   c000f4dc <free>
c001fbd1:	83 c4 10             	add    esp,0x10
c001fbd4:	b0 01                	mov    al,0x1
c001fbd6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fbdc:	5b                   	pop    ebx
c001fbdd:	5e                   	pop    esi
c001fbde:	5f                   	pop    edi
c001fbdf:	5d                   	pop    ebp
c001fbe0:	c3                   	ret    

c001fbe1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001fbe1:	55                   	push   ebp
c001fbe2:	57                   	push   edi
c001fbe3:	56                   	push   esi
c001fbe4:	53                   	push   ebx
c001fbe5:	83 ec 20             	sub    esp,0x20
c001fbe8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fbec:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fbf0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fbf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fbfc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fc04:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001fc09:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001fc0f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001fc15:	57                   	push   edi
c001fc16:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc1a:	50                   	push   eax
c001fc1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc1f:	50                   	push   eax
c001fc20:	e8 94 fd ff ff       	call   c001f9b9 <readRoot(unsigned int*, unsigned int*, char)>
c001fc25:	5a                   	pop    edx
c001fc26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fc2a:	e8 6b 0a fe ff       	call   c000069a <strlen>
c001fc2f:	83 c4 10             	add    esp,0x10
c001fc32:	83 f8 03             	cmp    eax,0x3
c001fc35:	77 17                	ja     c001fc4e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fc37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc3b:	89 03                	mov    DWORD PTR [ebx],eax
c001fc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc41:	89 06                	mov    DWORD PTR [esi],eax
c001fc43:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001fc4a:	b0 01                	mov    al,0x1
c001fc4c:	eb 19                	jmp    c001fc67 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001fc4e:	50                   	push   eax
c001fc4f:	55                   	push   ebp
c001fc50:	57                   	push   edi
c001fc51:	56                   	push   esi
c001fc52:	53                   	push   ebx
c001fc53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fc5f:	e8 aa fd ff ff       	call   c001fa0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fc64:	83 c4 20             	add    esp,0x20
c001fc67:	83 c4 1c             	add    esp,0x1c
c001fc6a:	5b                   	pop    ebx
c001fc6b:	5e                   	pop    esi
c001fc6c:	5f                   	pop    edi
c001fc6d:	5d                   	pop    ebp
c001fc6e:	c3                   	ret    
c001fc6f:	90                   	nop

c001fc70 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001fc70:	57                   	push   edi
c001fc71:	56                   	push   esi
c001fc72:	53                   	push   ebx
c001fc73:	83 ec 10             	sub    esp,0x10
c001fc76:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fc7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fc7e:	85 ff                	test   edi,edi
c001fc80:	74 7b                	je     c001fcfd <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fc82:	85 f6                	test   esi,esi
c001fc84:	74 77                	je     c001fcfd <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	6a 1c                	push   0x1c
c001fc8b:	e8 3c f8 fe ff       	call   c000f4cc <malloc>
c001fc90:	89 07                	mov    DWORD PTR [edi],eax
c001fc92:	89 c3                	mov    ebx,eax
c001fc94:	58                   	pop    eax
c001fc95:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fc99:	50                   	push   eax
c001fc9a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fc9d:	50                   	push   eax
c001fc9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fca2:	50                   	push   eax
c001fca3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fca7:	50                   	push   eax
c001fca8:	56                   	push   esi
c001fca9:	e8 33 ff ff ff       	call   c001fbe1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fcae:	83 c4 20             	add    esp,0x20
c001fcb1:	84 c0                	test   al,al
c001fcb3:	74 07                	je     c001fcbc <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001fcb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fcba:	74 0b                	je     c001fcc7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001fcbc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fcc0:	b8 01 00 00 00       	mov    eax,0x1
c001fcc5:	eb 3b                	jmp    c001fd02 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fcc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fccf:	89 03                	mov    DWORD PTR [ebx],eax
c001fcd1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fcd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcdc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fce3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fcea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fced:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fcf4:	8a 06                	mov    al,BYTE PTR [esi]
c001fcf6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fcf9:	31 c0                	xor    eax,eax
c001fcfb:	eb 05                	jmp    c001fd02 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fcfd:	b8 04 00 00 00       	mov    eax,0x4
c001fd02:	83 c4 10             	add    esp,0x10
c001fd05:	5b                   	pop    ebx
c001fd06:	5e                   	pop    esi
c001fd07:	5f                   	pop    edi
c001fd08:	c3                   	ret    
c001fd09:	90                   	nop

c001fd0a <ISO9660::exists(char const*)>:
c001fd0a:	83 ec 28             	sub    esp,0x28
c001fd0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fd11:	8d 54 24 18          	lea    edx,[esp+0x18]
c001fd15:	52                   	push   edx
c001fd16:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001fd19:	52                   	push   edx
c001fd1a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fd1e:	52                   	push   edx
c001fd1f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fd23:	52                   	push   edx
c001fd24:	50                   	push   eax
c001fd25:	e8 b7 fe ff ff       	call   c001fbe1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fd2a:	83 c4 3c             	add    esp,0x3c
c001fd2d:	c3                   	ret    

c001fd2e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001fd2e:	56                   	push   esi
c001fd2f:	53                   	push   ebx
c001fd30:	83 ec 14             	sub    esp,0x14
c001fd33:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001fd37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001fd3b:	85 db                	test   ebx,ebx
c001fd3d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fd41:	0f 94 c2             	sete   dl
c001fd44:	85 f6                	test   esi,esi
c001fd46:	0f 94 c0             	sete   al
c001fd49:	08 c2                	or     dl,al
c001fd4b:	75 68                	jne    c001fdb5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fd4d:	85 c9                	test   ecx,ecx
c001fd4f:	74 64                	je     c001fdb5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fd51:	83 ec 0c             	sub    esp,0xc
c001fd54:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001fd57:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd5b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fd61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fd68:	50                   	push   eax
c001fd69:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001fd6c:	50                   	push   eax
c001fd6d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd71:	50                   	push   eax
c001fd72:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd76:	50                   	push   eax
c001fd77:	51                   	push   ecx
c001fd78:	e8 64 fe ff ff       	call   c001fbe1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fd7d:	83 c4 20             	add    esp,0x20
c001fd80:	ba 01 00 00 00       	mov    edx,0x1
c001fd85:	84 c0                	test   al,al
c001fd87:	74 31                	je     c001fdba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fd89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fd94:	89 03                	mov    DWORD PTR [ebx],eax
c001fd96:	ba 00 00 00 00       	mov    edx,0x0
c001fd9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd9f:	85 c0                	test   eax,eax
c001fda1:	0f 95 06             	setne  BYTE PTR [esi]
c001fda4:	74 14                	je     c001fdba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fda6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fdac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fdb3:	eb 05                	jmp    c001fdba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fdb5:	ba 04 00 00 00       	mov    edx,0x4
c001fdba:	83 c4 14             	add    esp,0x14
c001fdbd:	89 d0                	mov    eax,edx
c001fdbf:	5b                   	pop    ebx
c001fdc0:	5e                   	pop    esi
c001fdc1:	c3                   	ret    

c001fdc2 <ISO9660::openDir(char const*, void**)>:
c001fdc2:	57                   	push   edi
c001fdc3:	56                   	push   esi
c001fdc4:	53                   	push   ebx
c001fdc5:	83 ec 10             	sub    esp,0x10
c001fdc8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fdcc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fdd0:	85 ff                	test   edi,edi
c001fdd2:	0f 84 95 00 00 00    	je     c001fe6d <ISO9660::openDir(char const*, void**)+0xab>
c001fdd8:	85 f6                	test   esi,esi
c001fdda:	0f 84 8d 00 00 00    	je     c001fe6d <ISO9660::openDir(char const*, void**)+0xab>
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	6a 1c                	push   0x1c
c001fde5:	e8 e2 f6 fe ff       	call   c000f4cc <malloc>
c001fdea:	89 07                	mov    DWORD PTR [edi],eax
c001fdec:	89 c3                	mov    ebx,eax
c001fdee:	59                   	pop    ecx
c001fdef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fdf3:	50                   	push   eax
c001fdf4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fdf7:	50                   	push   eax
c001fdf8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fdfc:	50                   	push   eax
c001fdfd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe01:	50                   	push   eax
c001fe02:	56                   	push   esi
c001fe03:	e8 d9 fd ff ff       	call   c001fbe1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fe08:	83 c4 20             	add    esp,0x20
c001fe0b:	84 c0                	test   al,al
c001fe0d:	74 07                	je     c001fe16 <ISO9660::openDir(char const*, void**)+0x54>
c001fe0f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe14:	75 21                	jne    c001fe37 <ISO9660::openDir(char const*, void**)+0x75>
c001fe16:	0f b6 c0             	movzx  eax,al
c001fe19:	52                   	push   edx
c001fe1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe1e:	50                   	push   eax
c001fe1f:	68 4a 91 02 c0       	push   0xc002914a
c001fe24:	e8 16 28 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c001fe29:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fe2d:	83 c4 10             	add    esp,0x10
c001fe30:	b8 01 00 00 00       	mov    eax,0x1
c001fe35:	eb 3b                	jmp    c001fe72 <ISO9660::openDir(char const*, void**)+0xb0>
c001fe37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe3b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fe3f:	89 03                	mov    DWORD PTR [ebx],eax
c001fe41:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fe48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe4c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fe53:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe5a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fe5d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fe64:	8a 06                	mov    al,BYTE PTR [esi]
c001fe66:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fe69:	31 c0                	xor    eax,eax
c001fe6b:	eb 05                	jmp    c001fe72 <ISO9660::openDir(char const*, void**)+0xb0>
c001fe6d:	b8 04 00 00 00       	mov    eax,0x4
c001fe72:	83 c4 10             	add    esp,0x10
c001fe75:	5b                   	pop    ebx
c001fe76:	5e                   	pop    esi
c001fe77:	5f                   	pop    edi
c001fe78:	c3                   	ret    
c001fe79:	90                   	nop

c001fe7a <ISO9660::ISO9660()>:
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	50                   	push   eax
c001fe85:	e8 ba 2a ff ff       	call   c0012944 <Filesystem::Filesystem()>
c001fe8a:	83 c4 10             	add    esp,0x10
c001fe8d:	ba 70 91 02 c0       	mov    edx,0xc0029170
c001fe92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe96:	89 10                	mov    DWORD PTR [eax],edx
c001fe98:	90                   	nop
c001fe99:	83 c4 0c             	add    esp,0xc
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <SoundChannel::~SoundChannel()>:
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	50                   	push   eax
c001feac:	e8 2b f6 fe ff       	call   c000f4dc <free>
c001feb1:	83 c4 10             	add    esp,0x10
c001feb4:	90                   	nop
c001feb5:	83 c4 0c             	add    esp,0xc
c001feb8:	c3                   	ret    
c001feb9:	90                   	nop

c001feba <SoundChannel::setSpeed(float)>:
c001feba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fec2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fec5:	c3                   	ret    

c001fec6 <SoundChannel::getSpeed()>:
c001fec6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001fecd:	c3                   	ret    

c001fece <SoundChannel::setVolume(int)>:
c001fece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fed2:	83 f8 64             	cmp    eax,0x64
c001fed5:	7e 05                	jle    c001fedc <SoundChannel::setVolume(int)+0xe>
c001fed7:	b8 64 00 00 00       	mov    eax,0x64
c001fedc:	85 c0                	test   eax,eax
c001fede:	79 02                	jns    c001fee2 <SoundChannel::setVolume(int)+0x14>
c001fee0:	31 c0                	xor    eax,eax
c001fee2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fee6:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fee9:	c3                   	ret    

c001feea <SoundChannel::getVolume()>:
c001feea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fef1:	c3                   	ret    

c001fef2 <SoundChannel::pause()>:
c001fef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fef6:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fefa:	c3                   	ret    
c001fefb:	90                   	nop

c001fefc <SoundChannel::SoundChannel(int, int, int, int)>:
c001fefc:	83 ec 1c             	sub    esp,0x1c
c001feff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ff03:	e8 ea ff ff ff       	call   c001fef2 <SoundChannel::pause()>
c001ff08:	83 c4 04             	add    esp,0x4
c001ff0b:	6a 50                	push   0x50
c001ff0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ff11:	e8 b8 ff ff ff       	call   c001fece <SoundChannel::setVolume(int)>
c001ff16:	83 c4 08             	add    esp,0x8
c001ff19:	a1 e8 91 02 c0       	mov    eax,ds:0xc00291e8
c001ff1e:	50                   	push   eax
c001ff1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ff23:	e8 92 ff ff ff       	call   c001feba <SoundChannel::setSpeed(float)>
c001ff28:	83 c4 08             	add    esp,0x8
c001ff2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ff33:	89 10                	mov    DWORD PTR [eax],edx
c001ff35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ff48:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff4b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ff50:	75 23                	jne    c001ff75 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001ff52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff56:	8b 10                	mov    edx,DWORD PTR [eax]
c001ff58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5f:	0f af c2             	imul   eax,edx
c001ff62:	85 c0                	test   eax,eax
c001ff64:	79 03                	jns    c001ff69 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001ff66:	83 c0 03             	add    eax,0x3
c001ff69:	c1 f8 02             	sar    eax,0x2
c001ff6c:	05 a0 0f 00 00       	add    eax,0xfa0
c001ff71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ff75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ff7d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ff80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ff8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff8f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ff96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff9a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ff9d:	c1 e0 02             	shl    eax,0x2
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	50                   	push   eax
c001ffa4:	e8 23 f5 fe ff       	call   c000f4cc <malloc>
c001ffa9:	83 c4 10             	add    esp,0x10
c001ffac:	89 c2                	mov    edx,eax
c001ffae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffb2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ffb5:	83 ec 04             	sub    esp,0x4
c001ffb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffbc:	50                   	push   eax
c001ffbd:	6a 01                	push   0x1
c001ffbf:	6a 04                	push   0x4
c001ffc1:	e8 7b 89 fe ff       	call   c0008941 <src_new>
c001ffc6:	83 c4 10             	add    esp,0x10
c001ffc9:	89 c2                	mov    edx,eax
c001ffcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffcf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ffd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd6:	85 c0                	test   eax,eax
c001ffd8:	74 10                	je     c001ffea <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	68 cc 91 02 c0       	push   0xc00291cc
c001ffe2:	e8 1c 8e ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c001ffe7:	83 c4 10             	add    esp,0x10
c001ffea:	a0 60 cc 02 c0       	mov    al,ds:0xc002cc60
c001ffef:	83 f0 01             	xor    eax,0x1
c001fff2:	84 c0                	test   al,al
c001fff4:	74 57                	je     c002004d <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fff6:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c001fffb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020007:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002000f:	7f 35                	jg     c0020046 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0020011:	83 ec 0c             	sub    esp,0xc
c0020014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020018:	e8 8a 42 00 00       	call   c00242a7 <__floatsisf>
c002001d:	83 c4 10             	add    esp,0x10
c0020020:	8b 15 ec 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291ec
c0020026:	83 ec 08             	sub    esp,0x8
c0020029:	52                   	push   edx
c002002a:	50                   	push   eax
c002002b:	e8 89 3e 00 00       	call   c0023eb9 <__mulsf3>
c0020030:	83 c4 10             	add    esp,0x10
c0020033:	89 c2                	mov    edx,eax
c0020035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020039:	89 14 85 60 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37a0],edx
c0020040:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020044:	eb c1                	jmp    c0020007 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0020046:	c6 05 60 cc 02 c0 01 	mov    BYTE PTR ds:0xc002cc60,0x1
c002004d:	90                   	nop
c002004e:	83 c4 1c             	add    esp,0x1c
c0020051:	c3                   	ret    

c0020052 <SoundChannel::play()>:
c0020052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020056:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002005a:	c3                   	ret    
c002005b:	90                   	nop

c002005c <SoundChannel::paused()>:
c002005c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020060:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0020063:	c3                   	ret    

c0020064 <SoundChannel::getSampleRate()>:
c0020064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020068:	8b 00                	mov    eax,DWORD PTR [eax]
c002006a:	c3                   	ret    
c002006b:	90                   	nop

c002006c <SoundChannel::getBits()>:
c002006c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020073:	c3                   	ret    

c0020074 <SoundChannel::getBufferUsed()>:
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002007b:	c3                   	ret    

c002007c <SoundChannel::getBufferSize()>:
c002007c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020080:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020083:	c3                   	ret    

c0020084 <SoundChannel::unbuffer(float*, int, int)>:
c0020084:	56                   	push   esi
c0020085:	53                   	push   ebx
c0020086:	83 ec 40             	sub    esp,0x40
c0020089:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002008d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0020090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020094:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0020097:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002009b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002009f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00200a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00200a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00200ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00200af:	e8 f3 41 00 00       	call   c00242a7 <__floatsisf>
c00200b4:	5a                   	pop    edx
c00200b5:	89 c6                	mov    esi,eax
c00200b7:	ff 33                	push   DWORD PTR [ebx]
c00200b9:	e8 e9 41 00 00       	call   c00242a7 <__floatsisf>
c00200be:	59                   	pop    ecx
c00200bf:	5a                   	pop    edx
c00200c0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00200c3:	50                   	push   eax
c00200c4:	e8 f0 3d 00 00       	call   c0023eb9 <__mulsf3>
c00200c9:	59                   	pop    ecx
c00200ca:	5a                   	pop    edx
c00200cb:	50                   	push   eax
c00200cc:	56                   	push   esi
c00200cd:	e8 aa 3f 00 00       	call   c002407c <__divsf3>
c00200d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00200d5:	e8 9d 54 00 00       	call   c0025577 <__extendsfdf2>
c00200da:	59                   	pop    ecx
c00200db:	5e                   	pop    esi
c00200dc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00200e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00200e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00200ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200f0:	50                   	push   eax
c00200f1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00200f4:	e8 3d 84 fe ff       	call   c0008536 <src_process>
c00200f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00200fd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020100:	83 c4 0c             	add    esp,0xc
c0020103:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0020106:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0020109:	29 d0                	sub    eax,edx
c002010b:	c1 e0 02             	shl    eax,0x2
c002010e:	50                   	push   eax
c002010f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0020112:	50                   	push   eax
c0020113:	51                   	push   ecx
c0020114:	e8 f6 04 fe ff       	call   c000060f <memmove>
c0020119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002011d:	83 c4 44             	add    esp,0x44
c0020120:	5b                   	pop    ebx
c0020121:	5e                   	pop    esi
c0020122:	c3                   	ret    
c0020123:	90                   	nop

c0020124 <SoundChannel::buffer8(unsigned char*, int)>:
c0020124:	55                   	push   ebp
c0020125:	57                   	push   edi
c0020126:	56                   	push   esi
c0020127:	53                   	push   ebx
c0020128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002012c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020130:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020133:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020137:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002013a:	74 7a                	je     c00201b6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002013c:	85 ff                	test   edi,edi
c002013e:	7e 76                	jle    c00201b6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020140:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0020144:	8d 70 01             	lea    esi,[eax+0x1]
c0020147:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002014a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002014d:	8b 1c 9d 60 c8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd37a0]
c0020154:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020157:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002015a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002015d:	74 5e                	je     c00201bd <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002015f:	83 ff 01             	cmp    edi,0x1
c0020162:	74 4b                	je     c00201af <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0020164:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0020168:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002016b:	8d 70 01             	lea    esi,[eax+0x1]
c002016e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020171:	8b 1c 9d 60 c8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd37a0]
c0020178:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002017b:	b8 02 00 00 00       	mov    eax,0x2
c0020180:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020183:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020186:	75 23                	jne    c00201ab <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0020188:	eb 27                	jmp    c00201b1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002018a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002018f:	8d 71 01             	lea    esi,[ecx+0x1]
c0020192:	40                   	inc    eax
c0020193:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020196:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0020199:	8b 1c 9d 60 c8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd37a0]
c00201a0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00201a3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00201a6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00201a9:	74 06                	je     c00201b1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00201ab:	39 c7                	cmp    edi,eax
c00201ad:	75 db                	jne    c002018a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00201af:	89 f8                	mov    eax,edi
c00201b1:	5b                   	pop    ebx
c00201b2:	5e                   	pop    esi
c00201b3:	5f                   	pop    edi
c00201b4:	5d                   	pop    ebp
c00201b5:	c3                   	ret    
c00201b6:	5b                   	pop    ebx
c00201b7:	31 c0                	xor    eax,eax
c00201b9:	5e                   	pop    esi
c00201ba:	5f                   	pop    edi
c00201bb:	5d                   	pop    ebp
c00201bc:	c3                   	ret    
c00201bd:	b8 01 00 00 00       	mov    eax,0x1
c00201c2:	eb ed                	jmp    c00201b1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00201c4 <SoundDevice::SoundDevice(char const*)>:
c00201c4:	83 ec 1c             	sub    esp,0x1c
c00201c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201cb:	83 ec 08             	sub    esp,0x8
c00201ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00201d2:	50                   	push   eax
c00201d3:	e8 46 3a ff ff       	call   c0013c1e <Device::Device(char const*)>
c00201d8:	83 c4 10             	add    esp,0x10
c00201db:	ba f8 91 02 c0       	mov    edx,0xc00291f8
c00201e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201e4:	89 10                	mov    DWORD PTR [eax],edx
c00201e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201ea:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00201f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201f8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020202:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002020a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002020f:	7f 19                	jg     c002022a <SoundDevice::SoundDevice(char const*)+0x66>
c0020211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020219:	83 c2 54             	add    edx,0x54
c002021c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0020224:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020228:	eb e0                	jmp    c002020a <SoundDevice::SoundDevice(char const*)+0x46>
c002022a:	90                   	nop
c002022b:	83 c4 1c             	add    esp,0x1c
c002022e:	c3                   	ret    
c002022f:	90                   	nop

c0020230 <SoundDevice::~SoundDevice()>:
c0020230:	53                   	push   ebx
c0020231:	83 ec 18             	sub    esp,0x18
c0020234:	ba f8 91 02 c0       	mov    edx,0xc00291f8
c0020239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002023d:	89 10                	mov    DWORD PTR [eax],edx
c002023f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020247:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002024c:	7f 46                	jg     c0020294 <SoundDevice::~SoundDevice()+0x64>
c002024e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020256:	83 c2 54             	add    edx,0x54
c0020259:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002025d:	85 c0                	test   eax,eax
c002025f:	74 2d                	je     c002028e <SoundDevice::~SoundDevice()+0x5e>
c0020261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020265:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020269:	83 c2 54             	add    edx,0x54
c002026c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0020270:	85 db                	test   ebx,ebx
c0020272:	74 1a                	je     c002028e <SoundDevice::~SoundDevice()+0x5e>
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	53                   	push   ebx
c0020278:	e8 21 fc ff ff       	call   c001fe9e <SoundChannel::~SoundChannel()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	83 ec 08             	sub    esp,0x8
c0020283:	6a 2c                	push   0x2c
c0020285:	53                   	push   ebx
c0020286:	e8 d4 22 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c002028b:	83 c4 10             	add    esp,0x10
c002028e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020292:	eb b3                	jmp    c0020247 <SoundDevice::~SoundDevice()+0x17>
c0020294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020298:	83 ec 0c             	sub    esp,0xc
c002029b:	50                   	push   eax
c002029c:	e8 5f 36 ff ff       	call   c0013900 <Device::~Device()>
c00202a1:	83 c4 10             	add    esp,0x10
c00202a4:	90                   	nop
c00202a5:	83 c4 18             	add    esp,0x18
c00202a8:	5b                   	pop    ebx
c00202a9:	c3                   	ret    

c00202aa <SoundDevice::~SoundDevice()>:
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	83 ec 0c             	sub    esp,0xc
c00202b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b4:	e8 77 ff ff ff       	call   c0020230 <SoundDevice::~SoundDevice()>
c00202b9:	83 c4 10             	add    esp,0x10
c00202bc:	83 ec 08             	sub    esp,0x8
c00202bf:	68 e4 01 00 00       	push   0x1e4
c00202c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c8:	e8 92 22 ff ff       	call   c001255f <operator delete(void*, unsigned long)>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	83 c4 0c             	add    esp,0xc
c00202d3:	c3                   	ret    

c00202d4 <SoundDevice::getFreeChannelNum()>:
c00202d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202d8:	31 c0                	xor    eax,eax
c00202da:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00202e2:	74 09                	je     c00202ed <SoundDevice::getFreeChannelNum()+0x19>
c00202e4:	40                   	inc    eax
c00202e5:	83 f8 20             	cmp    eax,0x20
c00202e8:	75 f0                	jne    c00202da <SoundDevice::getFreeChannelNum()+0x6>
c00202ea:	83 c8 ff             	or     eax,0xffffffff
c00202ed:	c3                   	ret    

c00202ee <SoundDevice::addChannel(SoundChannel*)>:
c00202ee:	56                   	push   esi
c00202ef:	53                   	push   ebx
c00202f0:	51                   	push   ecx
c00202f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00202f9:	53                   	push   ebx
c00202fa:	e8 d5 ff ff ff       	call   c00202d4 <SoundDevice::getFreeChannelNum()>
c00202ff:	5a                   	pop    edx
c0020300:	83 f8 ff             	cmp    eax,0xffffffff
c0020303:	74 51                	je     c0020356 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020305:	85 f6                	test   esi,esi
c0020307:	74 4d                	je     c0020356 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020309:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0020310:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020317:	75 30                	jne    c0020349 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0020319:	83 ec 0c             	sub    esp,0xc
c002031c:	56                   	push   esi
c002031d:	e8 42 fd ff ff       	call   c0020064 <SoundChannel::getSampleRate()>
c0020322:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0020328:	89 34 24             	mov    DWORD PTR [esp],esi
c002032b:	e8 3c fd ff ff       	call   c002006c <SoundChannel::getBits()>
c0020330:	83 c4 0c             	add    esp,0xc
c0020333:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0020339:	8b 13                	mov    edx,DWORD PTR [ebx]
c002033b:	50                   	push   eax
c002033c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0020342:	53                   	push   ebx
c0020343:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020346:	83 c4 10             	add    esp,0x10
c0020349:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002034f:	b8 01 00 00 00       	mov    eax,0x1
c0020354:	eb 03                	jmp    c0020359 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020356:	83 c8 ff             	or     eax,0xffffffff
c0020359:	5a                   	pop    edx
c002035a:	5b                   	pop    ebx
c002035b:	5e                   	pop    esi
c002035c:	c3                   	ret    
c002035d:	90                   	nop

c002035e <SoundDevice::removeChannel(int)>:
c002035e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020366:	83 fa 1f             	cmp    edx,0x1f
c0020369:	77 23                	ja     c002038e <SoundDevice::removeChannel(int)+0x30>
c002036b:	8d 14 90             	lea    edx,[eax+edx*4]
c002036e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0020375:	74 17                	je     c002038e <SoundDevice::removeChannel(int)+0x30>
c0020377:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0020381:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0020387:	75 05                	jne    c002038e <SoundDevice::removeChannel(int)+0x30>
c0020389:	8b 00                	mov    eax,DWORD PTR [eax]
c002038b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002038e:	c3                   	ret    
c002038f:	90                   	nop

c0020390 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0020390:	57                   	push   edi
c0020391:	56                   	push   esi
c0020392:	53                   	push   ebx
c0020393:	31 db                	xor    ebx,ebx
c0020395:	83 ec 10             	sub    esp,0x10
c0020398:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002039c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00203a0:	0f 8d cb 00 00 00    	jge    c0020471 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00203a6:	83 ec 0c             	sub    esp,0xc
c00203a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00203ad:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00203b0:	e8 c2 51 00 00       	call   c0025577 <__extendsfdf2>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203c0:	68 00 00 f0 3f       	push   0x3ff00000
c00203c5:	6a 00                	push   0x0
c00203c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00203cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00203cf:	e8 2f 41 00 00       	call   c0024503 <__adddf3>
c00203d4:	83 c4 10             	add    esp,0x10
c00203d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203df:	68 00 00 e0 3f       	push   0x3fe00000
c00203e4:	6a 00                	push   0x0
c00203e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00203ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00203ee:	e8 8d 47 00 00       	call   c0024b80 <__muldf3>
c00203f3:	83 c4 10             	add    esp,0x10
c00203f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00203fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203fe:	68 00 00 60 40       	push   0x40600000
c0020403:	6a 00                	push   0x0
c0020405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002040d:	e8 6e 47 00 00       	call   c0024b80 <__muldf3>
c0020412:	59                   	pop    ecx
c0020413:	5f                   	pop    edi
c0020414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002041c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020424:	e8 2a 50 00 00       	call   c0025453 <__truncdfsf2>
c0020429:	5a                   	pop    edx
c002042a:	89 c7                	mov    edi,eax
c002042c:	59                   	pop    ecx
c002042d:	68 00 00 fe 42       	push   0x42fe0000
c0020432:	50                   	push   eax
c0020433:	e8 c5 40 00 00       	call   c00244fd <__gesf2>
c0020438:	83 c4 10             	add    esp,0x10
c002043b:	85 c0                	test   eax,eax
c002043d:	78 06                	js     c0020445 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002043f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020443:	eb 26                	jmp    c002046b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020445:	50                   	push   eax
c0020446:	50                   	push   eax
c0020447:	6a 00                	push   0x0
c0020449:	57                   	push   edi
c002044a:	e8 b2 40 00 00       	call   c0024501 <__lesf2>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	85 c0                	test   eax,eax
c0020454:	7f 06                	jg     c002045c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020456:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002045a:	eb 0f                	jmp    c002046b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	57                   	push   edi
c0020460:	e8 a7 51 00 00       	call   c002560c <lrintf>
c0020465:	83 c4 10             	add    esp,0x10
c0020468:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002046b:	43                   	inc    ebx
c002046c:	e9 2b ff ff ff       	jmp    c002039c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	5b                   	pop    ebx
c0020475:	5e                   	pop    esi
c0020476:	5f                   	pop    edi
c0020477:	c3                   	ret    

c0020478 <SoundDevice::getAudio(int, float*, float*)>:
c0020478:	55                   	push   ebp
c0020479:	57                   	push   edi
c002047a:	56                   	push   esi
c002047b:	53                   	push   ebx
c002047c:	31 db                	xor    ebx,ebx
c002047e:	83 ec 20             	sub    esp,0x20
c0020481:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020485:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020489:	c1 e0 02             	shl    eax,0x2
c002048c:	50                   	push   eax
c002048d:	6a 00                	push   0x0
c002048f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020493:	e8 e5 01 fe ff       	call   c000067d <memset>
c0020498:	83 c4 10             	add    esp,0x10
c002049b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002049f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00204a6:	85 c0                	test   eax,eax
c00204a8:	0f 84 d7 00 00 00    	je     c0020585 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00204ae:	83 ec 0c             	sub    esp,0xc
c00204b1:	50                   	push   eax
c00204b2:	e8 a5 fb ff ff       	call   c002005c <SoundChannel::paused()>
c00204b7:	83 c4 10             	add    esp,0x10
c00204ba:	84 c0                	test   al,al
c00204bc:	0f 85 c3 00 00 00    	jne    c0020585 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00204cc:	e8 19 fa ff ff       	call   c001feea <SoundChannel::getVolume()>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	85 c0                	test   eax,eax
c00204d6:	0f 84 a9 00 00 00    	je     c0020585 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00204dc:	83 ec 0c             	sub    esp,0xc
c00204df:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00204e6:	e8 ff f9 ff ff       	call   c001feea <SoundChannel::getVolume()>
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	50                   	push   eax
c00204ef:	e8 b3 3d 00 00       	call   c00242a7 <__floatsisf>
c00204f4:	59                   	pop    ecx
c00204f5:	5d                   	pop    ebp
c00204f6:	31 ed                	xor    ebp,ebp
c00204f8:	68 00 00 c8 42       	push   0x42c80000
c00204fd:	50                   	push   eax
c00204fe:	e8 79 3b 00 00       	call   c002407c <__divsf3>
c0020503:	83 c4 10             	add    esp,0x10
c0020506:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002050a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002050e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020514:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020518:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002051f:	e8 60 fb ff ff       	call   c0020084 <SoundChannel::unbuffer(float*, int, int)>
c0020524:	83 c4 20             	add    esp,0x20
c0020527:	89 c1                	mov    ecx,eax
c0020529:	39 cd                	cmp    ebp,ecx
c002052b:	7d 52                	jge    c002057f <SoundDevice::getAudio(int, float*, float*)+0x107>
c002052d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020531:	50                   	push   eax
c0020532:	50                   	push   eax
c0020533:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020537:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002053a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002053e:	e8 76 39 00 00       	call   c0023eb9 <__mulsf3>
c0020543:	5a                   	pop    edx
c0020544:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020548:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002054e:	e8 54 3d 00 00       	call   c00242a7 <__floatsisf>
c0020553:	59                   	pop    ecx
c0020554:	5a                   	pop    edx
c0020555:	50                   	push   eax
c0020556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002055a:	e8 1d 3b 00 00       	call   c002407c <__divsf3>
c002055f:	59                   	pop    ecx
c0020560:	5a                   	pop    edx
c0020561:	50                   	push   eax
c0020562:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020566:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020569:	e8 28 36 00 00       	call   c0023b96 <__addsf3>
c002056e:	83 c4 10             	add    esp,0x10
c0020571:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020575:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020579:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002057c:	45                   	inc    ebp
c002057d:	eb aa                	jmp    c0020529 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002057f:	39 cf                	cmp    edi,ecx
c0020581:	7e 02                	jle    c0020585 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020583:	89 cf                	mov    edi,ecx
c0020585:	43                   	inc    ebx
c0020586:	83 fb 20             	cmp    ebx,0x20
c0020589:	0f 85 10 ff ff ff    	jne    c002049f <SoundDevice::getAudio(int, float*, float*)+0x27>
c002058f:	83 c4 1c             	add    esp,0x1c
c0020592:	89 f8                	mov    eax,edi
c0020594:	5b                   	pop    ebx
c0020595:	5e                   	pop    esi
c0020596:	5f                   	pop    edi
c0020597:	5d                   	pop    ebp
c0020598:	c3                   	ret    
c0020599:	90                   	nop

c002059a <PCI::open(int, int, void*)>:
c002059a:	83 ec 18             	sub    esp,0x18
c002059d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00205a3:	50                   	push   eax
c00205a4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00205a7:	31 c0                	xor    eax,eax
c00205a9:	83 c4 1c             	add    esp,0x1c
c00205ac:	c3                   	ret    
c00205ad:	90                   	nop

c00205ae <PCI::close(int, int, void*)>:
c00205ae:	31 c0                	xor    eax,eax
c00205b0:	c3                   	ret    
c00205b1:	90                   	nop

c00205b2 <PCI::PCI()>:
c00205b2:	83 ec 0c             	sub    esp,0xc
c00205b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b9:	83 ec 08             	sub    esp,0x8
c00205bc:	68 28 92 02 c0       	push   0xc0029228
c00205c1:	50                   	push   eax
c00205c2:	e8 13 2d ff ff       	call   c00132da <Bus::Bus(char const*)>
c00205c7:	83 c4 10             	add    esp,0x10
c00205ca:	ba b4 92 02 c0       	mov    edx,0xc00292b4
c00205cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d3:	89 10                	mov    DWORD PTR [eax],edx
c00205d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00205df:	0f b6 d0             	movzx  edx,al
c00205e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00205ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00205f7:	0f b6 d0             	movzx  edx,al
c00205fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fe:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020607:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002060d:	8d 50 01             	lea    edx,[eax+0x1]
c0020610:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020614:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002061a:	0f b6 d0             	movzx  edx,al
c002061d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020621:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020625:	83 c9 c0             	or     ecx,0xffffffc0
c0020628:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002062c:	90                   	nop
c002062d:	83 c4 0c             	add    esp,0xc
c0020630:	c3                   	ret    
c0020631:	90                   	nop

c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020632:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020636:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002063b:	89 ca                	mov    edx,ecx
c002063d:	c1 e0 10             	shl    eax,0x10
c0020640:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020646:	09 d0                	or     eax,edx
c0020648:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002064d:	c1 e2 08             	shl    edx,0x8
c0020650:	09 d0                	or     eax,edx
c0020652:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020657:	c1 e2 0b             	shl    edx,0xb
c002065a:	09 d0                	or     eax,edx
c002065c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020661:	0d 00 00 00 80       	or     eax,0x80000000
c0020666:	ef                   	out    dx,eax
c0020667:	ba fc 0c 00 00       	mov    edx,0xcfc
c002066c:	ed                   	in     eax,dx
c002066d:	83 e1 02             	and    ecx,0x2
c0020670:	0f b6 c9             	movzx  ecx,cl
c0020673:	c1 e1 03             	shl    ecx,0x3
c0020676:	d3 e8                	shr    eax,cl
c0020678:	c3                   	ret    
c0020679:	90                   	nop

c002067a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002067a:	6a 00                	push   0x0
c002067c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020681:	50                   	push   eax
c0020682:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020687:	50                   	push   eax
c0020688:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002068d:	50                   	push   eax
c002068e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020692:	e8 9b ff ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020697:	83 c4 14             	add    esp,0x14
c002069a:	c3                   	ret    
c002069b:	90                   	nop

c002069c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002069c:	6a 0e                	push   0xe
c002069e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00206a3:	50                   	push   eax
c00206a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00206a9:	50                   	push   eax
c00206aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00206af:	50                   	push   eax
c00206b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00206b4:	e8 79 ff ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206b9:	83 c4 14             	add    esp,0x14
c00206bc:	0f b6 c0             	movzx  eax,al
c00206bf:	c3                   	ret    

c00206c0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00206c0:	55                   	push   ebp
c00206c1:	57                   	push   edi
c00206c2:	56                   	push   esi
c00206c3:	53                   	push   ebx
c00206c4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00206c9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00206ce:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00206d3:	6a 0a                	push   0xa
c00206d5:	56                   	push   esi
c00206d6:	55                   	push   ebp
c00206d7:	57                   	push   edi
c00206d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00206dc:	e8 51 ff ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206e1:	6a 0a                	push   0xa
c00206e3:	89 c3                	mov    ebx,eax
c00206e5:	56                   	push   esi
c00206e6:	0f b6 db             	movzx  ebx,bl
c00206e9:	55                   	push   ebp
c00206ea:	57                   	push   edi
c00206eb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00206ef:	e8 3e ff ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206f4:	83 c4 28             	add    esp,0x28
c00206f7:	25 00 ff 00 00       	and    eax,0xff00
c00206fc:	09 d8                	or     eax,ebx
c00206fe:	5b                   	pop    ebx
c00206ff:	5e                   	pop    esi
c0020700:	5f                   	pop    edi
c0020701:	5d                   	pop    ebp
c0020702:	c3                   	ret    
c0020703:	90                   	nop

c0020704 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020704:	6a 08                	push   0x8
c0020706:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002070b:	50                   	push   eax
c002070c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020711:	50                   	push   eax
c0020712:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020717:	50                   	push   eax
c0020718:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002071c:	e8 11 ff ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020721:	83 c4 14             	add    esp,0x14
c0020724:	0f b6 c4             	movzx  eax,ah
c0020727:	c3                   	ret    

c0020728 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020728:	6a 08                	push   0x8
c002072a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002072f:	50                   	push   eax
c0020730:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020735:	50                   	push   eax
c0020736:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002073b:	50                   	push   eax
c002073c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020740:	e8 ed fe ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020745:	83 c4 14             	add    esp,0x14
c0020748:	c3                   	ret    
c0020749:	90                   	nop

c002074a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002074a:	6a 3c                	push   0x3c
c002074c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020751:	50                   	push   eax
c0020752:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020757:	50                   	push   eax
c0020758:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002075d:	50                   	push   eax
c002075e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020762:	e8 cb fe ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020767:	83 c4 14             	add    esp,0x14
c002076a:	c3                   	ret    
c002076b:	90                   	nop

c002076c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002076c:	6a 18                	push   0x18
c002076e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020773:	50                   	push   eax
c0020774:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020779:	50                   	push   eax
c002077a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002077f:	50                   	push   eax
c0020780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020784:	e8 a9 fe ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020789:	83 c4 14             	add    esp,0x14
c002078c:	0f b6 c4             	movzx  eax,ah
c002078f:	c3                   	ret    

c0020790 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020790:	55                   	push   ebp
c0020791:	57                   	push   edi
c0020792:	56                   	push   esi
c0020793:	53                   	push   ebx
c0020794:	50                   	push   eax
c0020795:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020799:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002079e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00207a3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00207a8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00207af:	8d 43 12             	lea    eax,[ebx+0x12]
c00207b2:	83 c3 10             	add    ebx,0x10
c00207b5:	0f b6 c0             	movzx  eax,al
c00207b8:	0f b6 db             	movzx  ebx,bl
c00207bb:	50                   	push   eax
c00207bc:	51                   	push   ecx
c00207bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00207c1:	57                   	push   edi
c00207c2:	55                   	push   ebp
c00207c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00207c7:	e8 66 fe ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207cc:	53                   	push   ebx
c00207cd:	89 c6                	mov    esi,eax
c00207cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207d3:	c1 e6 10             	shl    esi,0x10
c00207d6:	51                   	push   ecx
c00207d7:	57                   	push   edi
c00207d8:	55                   	push   ebp
c00207d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00207dd:	e8 50 fe ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207e2:	83 c4 2c             	add    esp,0x2c
c00207e5:	0f b7 c0             	movzx  eax,ax
c00207e8:	5b                   	pop    ebx
c00207e9:	09 f0                	or     eax,esi
c00207eb:	5e                   	pop    esi
c00207ec:	5f                   	pop    edi
c00207ed:	5d                   	pop    ebp
c00207ee:	c3                   	ret    
c00207ef:	90                   	nop

c00207f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00207f0:	53                   	push   ebx
c00207f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00207f6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00207ff:	c1 e1 10             	shl    ecx,0x10
c0020802:	25 fc 00 00 00       	and    eax,0xfc
c0020807:	09 c1                	or     ecx,eax
c0020809:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002080e:	c1 e0 08             	shl    eax,0x8
c0020811:	09 c1                	or     ecx,eax
c0020813:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020818:	c1 e0 0b             	shl    eax,0xb
c002081b:	09 c1                	or     ecx,eax
c002081d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020823:	89 c8                	mov    eax,ecx
c0020825:	ef                   	out    dx,eax
c0020826:	ba fc 0c 00 00       	mov    edx,0xcfc
c002082b:	ed                   	in     eax,dx
c002082c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020831:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020836:	74 0a                	je     c0020842 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020838:	0f b7 d8             	movzx  ebx,ax
c002083b:	89 d0                	mov    eax,edx
c002083d:	c1 e0 10             	shl    eax,0x10
c0020840:	eb 05                	jmp    c0020847 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020842:	66 31 c0             	xor    ax,ax
c0020845:	89 d3                	mov    ebx,edx
c0020847:	09 c3                	or     ebx,eax
c0020849:	ba f8 0c 00 00       	mov    edx,0xcf8
c002084e:	89 c8                	mov    eax,ecx
c0020850:	ef                   	out    dx,eax
c0020851:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020856:	89 d8                	mov    eax,ebx
c0020858:	ef                   	out    dx,eax
c0020859:	5b                   	pop    ebx
c002085a:	c3                   	ret    
c002085b:	90                   	nop

c002085c <PCI::checkBus(unsigned char)>:
c002085c:	56                   	push   esi
c002085d:	53                   	push   ebx
c002085e:	31 db                	xor    ebx,ebx
c0020860:	51                   	push   ecx
c0020861:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020866:	52                   	push   edx
c0020867:	53                   	push   ebx
c0020868:	43                   	inc    ebx
c0020869:	56                   	push   esi
c002086a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002086e:	e8 29 03 00 00       	call   c0020b9c <PCI::checkDevice(unsigned char, unsigned char)>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	83 fb 20             	cmp    ebx,0x20
c0020879:	75 eb                	jne    c0020866 <PCI::checkBus(unsigned char)+0xa>
c002087b:	58                   	pop    eax
c002087c:	5b                   	pop    ebx
c002087d:	5e                   	pop    esi
c002087e:	c3                   	ret    
c002087f:	90                   	nop

c0020880 <PCI::foundDevice(PCIDeviceInfo)>:
c0020880:	55                   	push   ebp
c0020881:	57                   	push   edi
c0020882:	56                   	push   esi
c0020883:	53                   	push   ebx
c0020884:	83 ec 1c             	sub    esp,0x1c
c0020887:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002088b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020891:	0f 84 51 01 00 00    	je     c00209e8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020897:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002089b:	66 81 f9 06 04       	cmp    cx,0x406
c00208a0:	75 2c                	jne    c00208ce <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00208a2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00208a7:	50                   	push   eax
c00208a8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00208ad:	50                   	push   eax
c00208ae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00208b3:	50                   	push   eax
c00208b4:	56                   	push   esi
c00208b5:	e8 b2 fe ff ff       	call   c002076c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00208ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00208be:	0f b6 c0             	movzx  eax,al
c00208c1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00208c5:	83 c4 2c             	add    esp,0x2c
c00208c8:	5b                   	pop    ebx
c00208c9:	5e                   	pop    esi
c00208ca:	5f                   	pop    edi
c00208cb:	5d                   	pop    ebp
c00208cc:	eb 8e                	jmp    c002085c <PCI::checkBus(unsigned char)>
c00208ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00208d2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00208d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00208dc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00208e0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00208e4:	88 d3                	mov    bl,dl
c00208e6:	85 c0                	test   eax,eax
c00208e8:	74 33                	je     c002091d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00208ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00208ed:	85 d2                	test   edx,edx
c00208ef:	74 28                	je     c0020919 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00208f1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00208f7:	31 ef                	xor    edi,ebp
c00208f9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00208ff:	75 18                	jne    c0020919 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020901:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020905:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002090b:	75 0c                	jne    c0020919 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002090d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020913:	0f 84 cf 00 00 00    	je     c00209e8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020919:	8b 00                	mov    eax,DWORD PTR [eax]
c002091b:	eb c9                	jmp    c00208e6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002091d:	66 81 f9 01 06       	cmp    cx,0x601
c0020922:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020926:	75 18                	jne    c0020940 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020928:	83 ec 0c             	sub    esp,0xc
c002092b:	68 58 01 00 00       	push   0x158
c0020930:	e8 97 eb fe ff       	call   c000f4cc <malloc>
c0020935:	59                   	pop    ecx
c0020936:	89 c5                	mov    ebp,eax
c0020938:	5f                   	pop    edi
c0020939:	68 30 92 02 c0       	push   0xc0029230
c002093e:	eb 7d                	jmp    c00209bd <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020940:	66 81 f9 01 01       	cmp    cx,0x101
c0020945:	75 60                	jne    c00209a7 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020947:	83 ec 0c             	sub    esp,0xc
c002094a:	68 70 02 00 00       	push   0x270
c002094f:	e8 78 eb fe ff       	call   c000f4cc <malloc>
c0020954:	89 04 24             	mov    DWORD PTR [esp],eax
c0020957:	89 c5                	mov    ebp,eax
c0020959:	e8 02 03 00 00       	call   c0020c60 <IDE::IDE()>
c002095e:	58                   	pop    eax
c002095f:	5a                   	pop    edx
c0020960:	55                   	push   ebp
c0020961:	56                   	push   esi
c0020962:	e8 c7 30 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c0020967:	83 ec 1c             	sub    esp,0x1c
c002096a:	b9 09 00 00 00       	mov    ecx,0x9
c002096f:	fc                   	cld    
c0020970:	89 e7                	mov    edi,esp
c0020972:	89 de                	mov    esi,ebx
c0020974:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020976:	55                   	push   ebp
c0020977:	e8 bc 2f ff ff       	call   c0013938 <Device::preOpenPCI(PCIDeviceInfo)>
c002097c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002097f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020983:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002098b:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020993:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002099b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002099e:	83 c4 4c             	add    esp,0x4c
c00209a1:	5b                   	pop    ebx
c00209a2:	5e                   	pop    esi
c00209a3:	5f                   	pop    edi
c00209a4:	5d                   	pop    ebp
c00209a5:	ff e0                	jmp    eax
c00209a7:	83 ec 0c             	sub    esp,0xc
c00209aa:	68 58 01 00 00       	push   0x158
c00209af:	e8 18 eb fe ff       	call   c000f4cc <malloc>
c00209b4:	59                   	pop    ecx
c00209b5:	89 c5                	mov    ebp,eax
c00209b7:	5f                   	pop    edi
c00209b8:	68 4f 92 02 c0       	push   0xc002924f
c00209bd:	55                   	push   ebp
c00209be:	e8 61 33 ff ff       	call   c0013d24 <DriverlessDevice::DriverlessDevice(char const*)>
c00209c3:	58                   	pop    eax
c00209c4:	5a                   	pop    edx
c00209c5:	55                   	push   ebp
c00209c6:	56                   	push   esi
c00209c7:	e8 62 30 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c00209cc:	b9 09 00 00 00       	mov    ecx,0x9
c00209d1:	fc                   	cld    
c00209d2:	89 df                	mov    edi,ebx
c00209d4:	89 de                	mov    esi,ebx
c00209d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00209d8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00209dc:	83 c4 2c             	add    esp,0x2c
c00209df:	5b                   	pop    ebx
c00209e0:	5e                   	pop    esi
c00209e1:	5f                   	pop    edi
c00209e2:	5d                   	pop    ebp
c00209e3:	e9 50 2f ff ff       	jmp    c0013938 <Device::preOpenPCI(PCIDeviceInfo)>
c00209e8:	83 c4 1c             	add    esp,0x1c
c00209eb:	5b                   	pop    ebx
c00209ec:	5e                   	pop    esi
c00209ed:	5f                   	pop    edi
c00209ee:	5d                   	pop    ebp
c00209ef:	c3                   	ret    

c00209f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00209f0:	55                   	push   ebp
c00209f1:	57                   	push   edi
c00209f2:	56                   	push   esi
c00209f3:	53                   	push   ebx
c00209f4:	83 ec 5c             	sub    esp,0x5c
c00209f7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00209fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020a03:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020a08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a0c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020a10:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020a15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a19:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020a1e:	6a 0c                	push   0xc
c0020a20:	55                   	push   ebp
c0020a21:	53                   	push   ebx
c0020a22:	57                   	push   edi
c0020a23:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020a2a:	e8 03 fc ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a2f:	55                   	push   ebp
c0020a30:	53                   	push   ebx
c0020a31:	57                   	push   edi
c0020a32:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020a39:	e8 82 fc ff ff       	call   c00206c0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020a3e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020a43:	83 c4 24             	add    esp,0x24
c0020a46:	55                   	push   ebp
c0020a47:	53                   	push   ebx
c0020a48:	57                   	push   edi
c0020a49:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020a4d:	e8 f8 fc ff ff       	call   c002074a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020a52:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020a56:	6a 3c                	push   0x3c
c0020a58:	55                   	push   ebp
c0020a59:	53                   	push   ebx
c0020a5a:	57                   	push   edi
c0020a5b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020a62:	e8 cb fb ff ff       	call   c0020632 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a67:	0f b6 c4             	movzx  eax,ah
c0020a6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020a6e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020a72:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020a76:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0020a7b:	83 c4 24             	add    esp,0x24
c0020a7e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020a84:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020a8b:	74 6c                	je     c0020af9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020a8d:	31 f6                	xor    esi,esi
c0020a8f:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c0020a95:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020a9b:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020aa1:	7e 56                	jle    c0020af9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020aa3:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020aa6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020aad:	39 cb                	cmp    ebx,ecx
c0020aaf:	75 45                	jne    c0020af6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020ab1:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0020ab8:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020abc:	75 38                	jne    c0020af6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020abe:	83 ec 0c             	sub    esp,0xc
c0020ac1:	68 69 92 02 c0       	push   0xc0029269
c0020ac6:	e8 74 1b ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0020acb:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c0020ad1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020ad7:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020adf:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020ae3:	52                   	push   edx
c0020ae4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ae8:	53                   	push   ebx
c0020ae9:	68 8e 92 02 c0       	push   0xc002928e
c0020aee:	e8 4c 1b ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0020af3:	83 c4 20             	add    esp,0x20
c0020af6:	46                   	inc    esi
c0020af7:	eb 96                	jmp    c0020a8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020af9:	31 d2                	xor    edx,edx
c0020afb:	83 ec 0c             	sub    esp,0xc
c0020afe:	55                   	push   ebp
c0020aff:	53                   	push   ebx
c0020b00:	57                   	push   edi
c0020b01:	52                   	push   edx
c0020b02:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020b06:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020b0d:	e8 7e fc ff ff       	call   c0020790 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b12:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020b16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020b1a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020b1e:	42                   	inc    edx
c0020b1f:	83 c4 20             	add    esp,0x20
c0020b22:	83 fa 06             	cmp    edx,0x6
c0020b25:	75 d4                	jne    c0020afb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020b27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020b2b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020b2f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020b33:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020b37:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020b3b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020b3f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020b44:	86 e0                	xchg   al,ah
c0020b46:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020b4b:	55                   	push   ebp
c0020b4c:	53                   	push   ebx
c0020b4d:	57                   	push   edi
c0020b4e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020b52:	e8 ad fb ff ff       	call   c0020704 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020b57:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020b5b:	55                   	push   ebp
c0020b5c:	53                   	push   ebx
c0020b5d:	57                   	push   edi
c0020b5e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020b65:	e8 10 fb ff ff       	call   c002067a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020b6a:	83 ec 0c             	sub    esp,0xc
c0020b6d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020b72:	b9 09 00 00 00       	mov    ecx,0x9
c0020b77:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020b7b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020b7f:	fc                   	cld    
c0020b80:	89 e7                	mov    edi,esp
c0020b82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020b84:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020b8b:	e8 f0 fc ff ff       	call   c0020880 <PCI::foundDevice(PCIDeviceInfo)>
c0020b90:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020b96:	5b                   	pop    ebx
c0020b97:	5e                   	pop    esi
c0020b98:	5f                   	pop    edi
c0020b99:	5d                   	pop    ebp
c0020b9a:	c3                   	ret    
c0020b9b:	90                   	nop

c0020b9c <PCI::checkDevice(unsigned char, unsigned char)>:
c0020b9c:	55                   	push   ebp
c0020b9d:	57                   	push   edi
c0020b9e:	56                   	push   esi
c0020b9f:	53                   	push   ebx
c0020ba0:	83 ec 0c             	sub    esp,0xc
c0020ba3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020ba7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020bac:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020bb1:	6a 00                	push   0x0
c0020bb3:	56                   	push   esi
c0020bb4:	57                   	push   edi
c0020bb5:	55                   	push   ebp
c0020bb6:	e8 bf fa ff ff       	call   c002067a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020bbb:	6a 00                	push   0x0
c0020bbd:	56                   	push   esi
c0020bbe:	57                   	push   edi
c0020bbf:	55                   	push   ebp
c0020bc0:	e8 2b fe ff ff       	call   c00209f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020bc5:	83 c4 20             	add    esp,0x20
c0020bc8:	6a 00                	push   0x0
c0020bca:	56                   	push   esi
c0020bcb:	57                   	push   edi
c0020bcc:	55                   	push   ebp
c0020bcd:	e8 ca fa ff ff       	call   c002069c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020bd2:	83 c4 10             	add    esp,0x10
c0020bd5:	84 c0                	test   al,al
c0020bd7:	79 27                	jns    c0020c00 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0020bd9:	bb 01 00 00 00       	mov    ebx,0x1
c0020bde:	53                   	push   ebx
c0020bdf:	56                   	push   esi
c0020be0:	57                   	push   edi
c0020be1:	55                   	push   ebp
c0020be2:	e8 93 fa ff ff       	call   c002067a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020be7:	83 c4 10             	add    esp,0x10
c0020bea:	66 40                	inc    ax
c0020bec:	74 0c                	je     c0020bfa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020bee:	53                   	push   ebx
c0020bef:	56                   	push   esi
c0020bf0:	57                   	push   edi
c0020bf1:	55                   	push   ebp
c0020bf2:	e8 f9 fd ff ff       	call   c00209f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020bf7:	83 c4 10             	add    esp,0x10
c0020bfa:	43                   	inc    ebx
c0020bfb:	83 fb 08             	cmp    ebx,0x8
c0020bfe:	75 de                	jne    c0020bde <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020c00:	83 c4 0c             	add    esp,0xc
c0020c03:	5b                   	pop    ebx
c0020c04:	5e                   	pop    esi
c0020c05:	5f                   	pop    edi
c0020c06:	5d                   	pop    ebp
c0020c07:	c3                   	ret    

c0020c08 <PCI::detect()>:
c0020c08:	56                   	push   esi
c0020c09:	53                   	push   ebx
c0020c0a:	53                   	push   ebx
c0020c0b:	31 db                	xor    ebx,ebx
c0020c0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020c11:	6a 00                	push   0x0
c0020c13:	6a 00                	push   0x0
c0020c15:	6a 00                	push   0x0
c0020c17:	56                   	push   esi
c0020c18:	e8 7f fa ff ff       	call   c002069c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020c1d:	83 c4 10             	add    esp,0x10
c0020c20:	a8 80                	test   al,0x80
c0020c22:	75 21                	jne    c0020c45 <PCI::detect()+0x3d>
c0020c24:	51                   	push   ecx
c0020c25:	51                   	push   ecx
c0020c26:	6a 00                	push   0x0
c0020c28:	56                   	push   esi
c0020c29:	e8 2e fc ff ff       	call   c002085c <PCI::checkBus(unsigned char)>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	eb 24                	jmp    c0020c57 <PCI::detect()+0x4f>
c0020c33:	52                   	push   edx
c0020c34:	52                   	push   edx
c0020c35:	53                   	push   ebx
c0020c36:	43                   	inc    ebx
c0020c37:	56                   	push   esi
c0020c38:	e8 1f fc ff ff       	call   c002085c <PCI::checkBus(unsigned char)>
c0020c3d:	83 c4 10             	add    esp,0x10
c0020c40:	83 fb 08             	cmp    ebx,0x8
c0020c43:	74 12                	je     c0020c57 <PCI::detect()+0x4f>
c0020c45:	53                   	push   ebx
c0020c46:	6a 00                	push   0x0
c0020c48:	6a 00                	push   0x0
c0020c4a:	56                   	push   esi
c0020c4b:	e8 2a fa ff ff       	call   c002067a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020c50:	83 c4 10             	add    esp,0x10
c0020c53:	66 40                	inc    ax
c0020c55:	74 dc                	je     c0020c33 <PCI::detect()+0x2b>
c0020c57:	58                   	pop    eax
c0020c58:	5b                   	pop    ebx
c0020c59:	5e                   	pop    esi
c0020c5a:	c3                   	ret    
c0020c5b:	90                   	nop

c0020c5c <IDE::close(int, int, void*)>:
c0020c5c:	83 c8 ff             	or     eax,0xffffffff
c0020c5f:	c3                   	ret    

c0020c60 <IDE::IDE()>:
c0020c60:	83 ec 0c             	sub    esp,0xc
c0020c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c67:	83 ec 08             	sub    esp,0x8
c0020c6a:	68 d8 92 02 c0       	push   0xc00292d8
c0020c6f:	50                   	push   eax
c0020c70:	e8 45 31 ff ff       	call   c0013dba <HardDiskController::HardDiskController(char const*)>
c0020c75:	83 c4 10             	add    esp,0x10
c0020c78:	ba 18 95 02 c0       	mov    edx,0xc0029518
c0020c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c81:	89 10                	mov    DWORD PTR [eax],edx
c0020c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c87:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020c8e:	90                   	nop
c0020c8f:	83 c4 0c             	add    esp,0xc
c0020c92:	c3                   	ret    
c0020c93:	90                   	nop

c0020c94 <IDE::prepareInterrupt(unsigned char)>:
c0020c94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c9d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0020ca5:	c3                   	ret    

c0020ca6 <selectDrive(unsigned char, unsigned char)>:
c0020ca6:	c3                   	ret    
c0020ca7:	90                   	nop

c0020ca8 <IDE::getBase(unsigned char)>:
c0020ca8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0020cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020cb1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0020cb9:	c3                   	ret    

c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0020cba:	55                   	push   ebp
c0020cbb:	57                   	push   edi
c0020cbc:	56                   	push   esi
c0020cbd:	53                   	push   ebx
c0020cbe:	83 ec 1c             	sub    esp,0x1c
c0020cc1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020cc5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020cc9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0020ccc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020cd0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020cd4:	80 f9 03             	cmp    cl,0x3
c0020cd7:	77 51                	ja     c0020d2a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0020cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cdd:	0f b6 f2             	movzx  esi,dl
c0020ce0:	0f b6 db             	movzx  ebx,bl
c0020ce3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020ce6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020cea:	83 ca 80             	or     edx,0xffffff80
c0020ced:	0f b6 d2             	movzx  edx,dl
c0020cf0:	52                   	push   edx
c0020cf1:	6a 0c                	push   0xc
c0020cf3:	56                   	push   esi
c0020cf4:	57                   	push   edi
c0020cf5:	e8 c0 ff ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020cfa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020cff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d03:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020d07:	ee                   	out    dx,al
c0020d08:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020d0d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020d11:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020d15:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d19:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020d21:	83 c4 2c             	add    esp,0x2c
c0020d24:	5b                   	pop    ebx
c0020d25:	5e                   	pop    esi
c0020d26:	5f                   	pop    edi
c0020d27:	5d                   	pop    ebp
c0020d28:	eb 90                	jmp    c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020d2a:	80 fb 07             	cmp    bl,0x7
c0020d2d:	77 12                	ja     c0020d41 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020d2f:	0f b6 d2             	movzx  edx,dl
c0020d32:	0f b6 db             	movzx  ebx,bl
c0020d35:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020d3d:	89 da                	mov    edx,ebx
c0020d3f:	eb 2f                	jmp    c0020d70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020d41:	80 fb 0d             	cmp    bl,0xd
c0020d44:	77 13                	ja     c0020d59 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020d46:	0f b6 d2             	movzx  edx,dl
c0020d49:	0f b6 db             	movzx  ebx,bl
c0020d4c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020d53:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020d57:	eb 17                	jmp    c0020d70 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020d59:	80 fb 15             	cmp    bl,0x15
c0020d5c:	77 13                	ja     c0020d71 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020d5e:	0f b6 d2             	movzx  edx,dl
c0020d61:	0f b6 db             	movzx  ebx,bl
c0020d64:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020d6c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020d70:	ee                   	out    dx,al
c0020d71:	83 c4 1c             	add    esp,0x1c
c0020d74:	5b                   	pop    ebx
c0020d75:	5e                   	pop    esi
c0020d76:	5f                   	pop    edi
c0020d77:	5d                   	pop    ebp
c0020d78:	c3                   	ret    
c0020d79:	90                   	nop

c0020d7a <IDE::read(unsigned char, unsigned char)>:
c0020d7a:	55                   	push   ebp
c0020d7b:	57                   	push   edi
c0020d7c:	56                   	push   esi
c0020d7d:	53                   	push   ebx
c0020d7e:	83 ec 1c             	sub    esp,0x1c
c0020d81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020d85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020d89:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020d8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020d90:	3c 03                	cmp    al,0x3
c0020d92:	77 43                	ja     c0020dd7 <IDE::read(unsigned char, unsigned char)+0x5d>
c0020d94:	0f b6 f2             	movzx  esi,dl
c0020d97:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020d9a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0020d9e:	83 c8 80             	or     eax,0xffffff80
c0020da1:	0f b6 c0             	movzx  eax,al
c0020da4:	50                   	push   eax
c0020da5:	6a 0c                	push   0xc
c0020da7:	56                   	push   esi
c0020da8:	57                   	push   edi
c0020da9:	e8 0c ff ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020dae:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0020db3:	0f b6 c3             	movzx  eax,bl
c0020db6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0020dba:	ec                   	in     al,dx
c0020dbb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0020dbf:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0020dc4:	52                   	push   edx
c0020dc5:	6a 0c                	push   0xc
c0020dc7:	56                   	push   esi
c0020dc8:	57                   	push   edi
c0020dc9:	e8 ec fe ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020dce:	83 c4 20             	add    esp,0x20
c0020dd1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020dd5:	eb 49                	jmp    c0020e20 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020dd7:	80 fb 07             	cmp    bl,0x7
c0020dda:	77 12                	ja     c0020dee <IDE::read(unsigned char, unsigned char)+0x74>
c0020ddc:	0f b6 d2             	movzx  edx,dl
c0020ddf:	0f b6 c3             	movzx  eax,bl
c0020de2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020dea:	89 c2                	mov    edx,eax
c0020dec:	eb 31                	jmp    c0020e1f <IDE::read(unsigned char, unsigned char)+0xa5>
c0020dee:	80 fb 0d             	cmp    bl,0xd
c0020df1:	77 13                	ja     c0020e06 <IDE::read(unsigned char, unsigned char)+0x8c>
c0020df3:	0f b6 d2             	movzx  edx,dl
c0020df6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020dfd:	0f b6 d3             	movzx  edx,bl
c0020e00:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020e04:	eb 19                	jmp    c0020e1f <IDE::read(unsigned char, unsigned char)+0xa5>
c0020e06:	31 c0                	xor    eax,eax
c0020e08:	80 fb 15             	cmp    bl,0x15
c0020e0b:	77 13                	ja     c0020e20 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020e0d:	0f b6 d2             	movzx  edx,dl
c0020e10:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020e18:	0f b6 d3             	movzx  edx,bl
c0020e1b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020e1f:	ec                   	in     al,dx
c0020e20:	83 c4 1c             	add    esp,0x1c
c0020e23:	5b                   	pop    ebx
c0020e24:	5e                   	pop    esi
c0020e25:	5f                   	pop    edi
c0020e26:	5d                   	pop    ebp
c0020e27:	c3                   	ret    

c0020e28 <IDE::waitInterrupt(unsigned char)>:
c0020e28:	55                   	push   ebp
c0020e29:	57                   	push   edi
c0020e2a:	56                   	push   esi
c0020e2b:	53                   	push   ebx
c0020e2c:	31 db                	xor    ebx,ebx
c0020e2e:	83 ec 0c             	sub    esp,0xc
c0020e31:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020e35:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020e3a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020e42:	89 e8                	mov    eax,ebp
c0020e44:	84 c0                	test   al,al
c0020e46:	75 34                	jne    c0020e7c <IDE::waitInterrupt(unsigned char)+0x54>
c0020e48:	52                   	push   edx
c0020e49:	6a 0c                	push   0xc
c0020e4b:	56                   	push   esi
c0020e4c:	57                   	push   edi
c0020e4d:	e8 28 ff ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0020e52:	83 c4 10             	add    esp,0x10
c0020e55:	a8 01                	test   al,0x1
c0020e57:	75 2b                	jne    c0020e84 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020e59:	f6 c3 04             	test   bl,0x4
c0020e5c:	75 16                	jne    c0020e74 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020e5e:	83 fb 32             	cmp    ebx,0x32
c0020e61:	7e 11                	jle    c0020e74 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020e63:	50                   	push   eax
c0020e64:	50                   	push   eax
c0020e65:	6a 00                	push   0x0
c0020e67:	68 80 96 98 00       	push   0x989680
c0020e6c:	e8 ed b4 ff ff       	call   c001c35e <nanoSleep(unsigned long long)>
c0020e71:	83 c4 10             	add    esp,0x10
c0020e74:	83 fb 3c             	cmp    ebx,0x3c
c0020e77:	74 0b                	je     c0020e84 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020e79:	43                   	inc    ebx
c0020e7a:	eb be                	jmp    c0020e3a <IDE::waitInterrupt(unsigned char)+0x12>
c0020e7c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020e84:	83 c4 0c             	add    esp,0xc
c0020e87:	89 e8                	mov    eax,ebp
c0020e89:	5b                   	pop    ebx
c0020e8a:	5e                   	pop    esi
c0020e8b:	5f                   	pop    edi
c0020e8c:	5d                   	pop    ebp
c0020e8d:	c3                   	ret    

c0020e8e <ideChannel0IRQHandler(regs*, void*)>:
c0020e8e:	83 ec 10             	sub    esp,0x10
c0020e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e95:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020e9c:	6a 07                	push   0x7
c0020e9e:	6a 00                	push   0x0
c0020ea0:	50                   	push   eax
c0020ea1:	e8 d4 fe ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0020ea6:	83 c4 1c             	add    esp,0x1c
c0020ea9:	c3                   	ret    

c0020eaa <ideChannel1IRQHandler(regs*, void*)>:
c0020eaa:	83 ec 10             	sub    esp,0x10
c0020ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020eb1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020eb8:	6a 07                	push   0x7
c0020eba:	6a 01                	push   0x1
c0020ebc:	50                   	push   eax
c0020ebd:	e8 b8 fe ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0020ec2:	83 c4 1c             	add    esp,0x1c
c0020ec5:	c3                   	ret    

c0020ec6 <IDE::enableIRQs(unsigned char, bool)>:
c0020ec6:	57                   	push   edi
c0020ec7:	56                   	push   esi
c0020ec8:	be 04 00 00 00       	mov    esi,0x4
c0020ecd:	53                   	push   ebx
c0020ece:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020ed3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ed7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020edc:	0f 94 c0             	sete   al
c0020edf:	d1 e0                	shl    eax,1
c0020ee1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020ee8:	0f b6 c0             	movzx  eax,al
c0020eeb:	50                   	push   eax
c0020eec:	6a 0c                	push   0xc
c0020eee:	57                   	push   edi
c0020eef:	53                   	push   ebx
c0020ef0:	e8 c5 fd ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ef5:	83 c4 10             	add    esp,0x10
c0020ef8:	50                   	push   eax
c0020ef9:	6a 0c                	push   0xc
c0020efb:	57                   	push   edi
c0020efc:	53                   	push   ebx
c0020efd:	e8 78 fe ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0020f02:	83 c4 10             	add    esp,0x10
c0020f05:	4e                   	dec    esi
c0020f06:	75 f0                	jne    c0020ef8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020f08:	5b                   	pop    ebx
c0020f09:	5e                   	pop    esi
c0020f0a:	5f                   	pop    edi
c0020f0b:	c3                   	ret    

c0020f0c <IDE::open(int, int, void*)>:
c0020f0c:	55                   	push   ebp
c0020f0d:	57                   	push   edi
c0020f0e:	56                   	push   esi
c0020f0f:	53                   	push   ebx
c0020f10:	83 ec 1c             	sub    esp,0x1c
c0020f13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020f17:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020f20:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020f29:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020f30:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020f37:	0f 85 b0 02 00 00    	jne    c00211ed <IDE::open(int, int, void*)+0x2e1>
c0020f3d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020f43:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020f47:	83 e0 7f             	and    eax,0x7f
c0020f4a:	3c 05                	cmp    al,0x5
c0020f4c:	74 04                	je     c0020f52 <IDE::open(int, int, void*)+0x46>
c0020f4e:	3c 0f                	cmp    al,0xf
c0020f50:	75 32                	jne    c0020f84 <IDE::open(int, int, void*)+0x78>
c0020f52:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020f58:	83 e0 fc             	and    eax,0xfffffffc
c0020f5b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020f62:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020f68:	83 e0 fc             	and    eax,0xfffffffc
c0020f6b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020f72:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020f78:	83 e0 fc             	and    eax,0xfffffffc
c0020f7b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020f82:	eb 14                	jmp    c0020f98 <IDE::open(int, int, void*)+0x8c>
c0020f84:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020f8e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020f98:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020f9f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020fa6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020faa:	89 c6                	mov    esi,eax
c0020fac:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020fb1:	c1 e6 10             	shl    esi,0x10
c0020fb4:	89 e8                	mov    eax,ebp
c0020fb6:	89 fa                	mov    edx,edi
c0020fb8:	c1 e0 0b             	shl    eax,0xb
c0020fbb:	09 f0                	or     eax,esi
c0020fbd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020fc4:	c1 e6 08             	shl    esi,0x8
c0020fc7:	09 c6                	or     esi,eax
c0020fc9:	89 f0                	mov    eax,esi
c0020fcb:	0d 08 00 00 80       	or     eax,0x80000008
c0020fd0:	ef                   	out    dx,eax
c0020fd1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020fd6:	89 ca                	mov    edx,ecx
c0020fd8:	ed                   	in     eax,dx
c0020fd9:	c1 e8 10             	shr    eax,0x10
c0020fdc:	3d ff ff 00 00       	cmp    eax,0xffff
c0020fe1:	0f 84 f5 00 00 00    	je     c00210dc <IDE::open(int, int, void*)+0x1d0>
c0020fe7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020fed:	89 fa                	mov    edx,edi
c0020fef:	89 f0                	mov    eax,esi
c0020ff1:	ef                   	out    dx,eax
c0020ff2:	b0 fe                	mov    al,0xfe
c0020ff4:	89 ca                	mov    edx,ecx
c0020ff6:	ee                   	out    dx,al
c0020ff7:	89 f0                	mov    eax,esi
c0020ff9:	89 fa                	mov    edx,edi
c0020ffb:	ef                   	out    dx,eax
c0020ffc:	89 ca                	mov    edx,ecx
c0020ffe:	ed                   	in     eax,dx
c0020fff:	3c fe                	cmp    al,0xfe
c0021001:	0f 85 a9 00 00 00    	jne    c00210b0 <IDE::open(int, int, void*)+0x1a4>
c0021007:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c002100d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0021014:	74 33                	je     c0021049 <IDE::open(int, int, void*)+0x13d>
c0021016:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002101c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0021020:	40                   	inc    eax
c0021021:	83 ec 0c             	sub    esp,0xc
c0021024:	0f b6 c0             	movzx  eax,al
c0021027:	50                   	push   eax
c0021028:	55                   	push   ebp
c0021029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002102d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0021033:	51                   	push   ecx
c0021034:	e8 b7 62 ff ff       	call   c00172f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0021039:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002103e:	83 c4 1c             	add    esp,0x1c
c0021041:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021047:	eb 0a                	jmp    c0021053 <IDE::open(int, int, void*)+0x147>
c0021049:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021053:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002105a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021061:	c1 e1 10             	shl    ecx,0x10
c0021064:	c1 e0 08             	shl    eax,0x8
c0021067:	bf f8 0c 00 00       	mov    edi,0xcf8
c002106c:	09 c1                	or     ecx,eax
c002106e:	89 fa                	mov    edx,edi
c0021070:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021077:	c1 e0 0b             	shl    eax,0xb
c002107a:	09 c1                	or     ecx,eax
c002107c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021082:	89 c8                	mov    eax,ecx
c0021084:	ef                   	out    dx,eax
c0021085:	be fc 0c 00 00       	mov    esi,0xcfc
c002108a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0021090:	89 f2                	mov    edx,esi
c0021092:	ee                   	out    dx,al
c0021093:	89 c8                	mov    eax,ecx
c0021095:	89 fa                	mov    edx,edi
c0021097:	ef                   	out    dx,eax
c0021098:	89 f2                	mov    edx,esi
c002109a:	ed                   	in     eax,dx
c002109b:	0f b6 c0             	movzx  eax,al
c002109e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00210a4:	74 46                	je     c00210ec <IDE::open(int, int, void*)+0x1e0>
c00210a6:	83 ec 0c             	sub    esp,0xc
c00210a9:	68 f0 92 02 c0       	push   0xc00292f0
c00210ae:	eb 34                	jmp    c00210e4 <IDE::open(int, int, void*)+0x1d8>
c00210b0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00210b9:	75 17                	jne    c00210d2 <IDE::open(int, int, void*)+0x1c6>
c00210bb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00210c0:	74 07                	je     c00210c9 <IDE::open(int, int, void*)+0x1bd>
c00210c2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00210c7:	75 09                	jne    c00210d2 <IDE::open(int, int, void*)+0x1c6>
c00210c9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00210d0:	eb 1a                	jmp    c00210ec <IDE::open(int, int, void*)+0x1e0>
c00210d2:	83 ec 0c             	sub    esp,0xc
c00210d5:	68 f8 92 02 c0       	push   0xc00292f8
c00210da:	eb 08                	jmp    c00210e4 <IDE::open(int, int, void*)+0x1d8>
c00210dc:	83 ec 0c             	sub    esp,0xc
c00210df:	68 29 93 02 c0       	push   0xc0029329
c00210e4:	e8 1a 7d ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c00210e9:	83 c4 10             	add    esp,0x10
c00210ec:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00210f3:	79 1a                	jns    c002110f <IDE::open(int, int, void*)+0x203>
c00210f5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00210fb:	83 e0 fc             	and    eax,0xfffffffc
c00210fe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0021105:	83 c0 08             	add    eax,0x8
c0021108:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002110f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021115:	89 c2                	mov    edx,eax
c0021117:	83 e2 0f             	and    edx,0xf
c002111a:	66 83 fa 08          	cmp    dx,0x8
c002111e:	75 0a                	jne    c002112a <IDE::open(int, int, void*)+0x21e>
c0021120:	83 e8 02             	sub    eax,0x2
c0021123:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002112a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021130:	89 c2                	mov    edx,eax
c0021132:	83 e2 0f             	and    edx,0xf
c0021135:	66 83 fa 08          	cmp    dx,0x8
c0021139:	75 0a                	jne    c0021145 <IDE::open(int, int, void*)+0x239>
c002113b:	83 e8 02             	sub    eax,0x2
c002113e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021145:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002114c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021153:	89 d0                	mov    eax,edx
c0021155:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021158:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002115c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021160:	8d 4a 01             	lea    ecx,[edx+0x1]
c0021163:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021168:	0f b6 c9             	movzx  ecx,cl
c002116b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0021172:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021175:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021179:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002117d:	8d 50 02             	lea    edx,[eax+0x2]
c0021180:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0021185:	0f b6 d2             	movzx  edx,dl
c0021188:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002118e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021191:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021195:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021199:	8d 48 03             	lea    ecx,[eax+0x3]
c002119c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00211a1:	0f b6 c9             	movzx  ecx,cl
c00211a4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00211aa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00211ad:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00211b1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00211b5:	8d 50 04             	lea    edx,[eax+0x4]
c00211b8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00211be:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00211c3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00211ca:	66 85 f6             	test   si,si
c00211cd:	74 3e                	je     c002120d <IDE::open(int, int, void*)+0x301>
c00211cf:	0f b6 d2             	movzx  edx,dl
c00211d2:	83 c0 05             	add    eax,0x5
c00211d5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00211d8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00211dc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00211e0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00211e6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00211eb:	eb 20                	jmp    c002120d <IDE::open(int, int, void*)+0x301>
c00211ed:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00211f7:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021201:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021208:	e9 02 ff ff ff       	jmp    c002110f <IDE::open(int, int, void*)+0x203>
c002120d:	52                   	push   edx
c002120e:	52                   	push   edx
c002120f:	6a 00                	push   0x0
c0021211:	53                   	push   ebx
c0021212:	e8 7d fa ff ff       	call   c0020c94 <IDE::prepareInterrupt(unsigned char)>
c0021217:	59                   	pop    ecx
c0021218:	5e                   	pop    esi
c0021219:	6a 01                	push   0x1
c002121b:	53                   	push   ebx
c002121c:	e8 73 fa ff ff       	call   c0020c94 <IDE::prepareInterrupt(unsigned char)>
c0021221:	83 c4 0c             	add    esp,0xc
c0021224:	6a 00                	push   0x0
c0021226:	6a 00                	push   0x0
c0021228:	53                   	push   ebx
c0021229:	e8 98 fc ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c002122e:	83 c4 0c             	add    esp,0xc
c0021231:	6a 00                	push   0x0
c0021233:	6a 01                	push   0x1
c0021235:	53                   	push   ebx
c0021236:	e8 8b fc ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c002123b:	83 c4 10             	add    esp,0x10
c002123e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0021245:	74 40                	je     c0021287 <IDE::open(int, int, void*)+0x37b>
c0021247:	83 ec 0c             	sub    esp,0xc
c002124a:	68 53 93 02 c0       	push   0xc0029353
c002124f:	e8 eb 13 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021257:	6a 01                	push   0x1
c0021259:	68 8e 0e 02 c0       	push   0xc0020e8e
c002125e:	6a 0e                	push   0xe
c0021260:	53                   	push   ebx
c0021261:	e8 4c 27 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021266:	83 c4 14             	add    esp,0x14
c0021269:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002126f:	53                   	push   ebx
c0021270:	6a 01                	push   0x1
c0021272:	68 aa 0e 02 c0       	push   0xc0020eaa
c0021277:	6a 0f                	push   0xf
c0021279:	53                   	push   ebx
c002127a:	e8 33 27 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002127f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0021285:	eb 4a                	jmp    c00212d1 <IDE::open(int, int, void*)+0x3c5>
c0021287:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0021291:	50                   	push   eax
c0021292:	6a 0f                	push   0xf
c0021294:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002129a:	68 6f 93 02 c0       	push   0xc002936f
c002129f:	e8 9b 13 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00212a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212a7:	6a 00                	push   0x0
c00212a9:	68 8e 0e 02 c0       	push   0xc0020e8e
c00212ae:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00212b4:	53                   	push   ebx
c00212b5:	e8 f8 26 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00212ba:	83 c4 14             	add    esp,0x14
c00212bd:	53                   	push   ebx
c00212be:	6a 00                	push   0x0
c00212c0:	68 aa 0e 02 c0       	push   0xc0020eaa
c00212c5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00212cb:	53                   	push   ebx
c00212cc:	e8 e1 26 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00212d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00212d3:	83 c4 20             	add    esp,0x20
c00212d6:	83 ec 0c             	sub    esp,0xc
c00212d9:	53                   	push   ebx
c00212da:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00212dd:	83 c4 0c             	add    esp,0xc
c00212e0:	6a 07                	push   0x7
c00212e2:	6a 00                	push   0x0
c00212e4:	53                   	push   ebx
c00212e5:	e8 90 fa ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00212ea:	83 c4 0c             	add    esp,0xc
c00212ed:	6a 07                	push   0x7
c00212ef:	6a 01                	push   0x1
c00212f1:	53                   	push   ebx
c00212f2:	e8 83 fa ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00212f7:	83 c4 0c             	add    esp,0xc
c00212fa:	6a 01                	push   0x1
c00212fc:	6a 00                	push   0x0
c00212fe:	53                   	push   ebx
c00212ff:	e8 c2 fb ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c0021304:	83 c4 0c             	add    esp,0xc
c0021307:	6a 01                	push   0x1
c0021309:	6a 01                	push   0x1
c002130b:	53                   	push   ebx
c002130c:	e8 b5 fb ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c0021311:	83 c4 2c             	add    esp,0x2c
c0021314:	31 c0                	xor    eax,eax
c0021316:	5b                   	pop    ebx
c0021317:	5e                   	pop    esi
c0021318:	5f                   	pop    edi
c0021319:	5d                   	pop    ebp
c002131a:	c3                   	ret    
c002131b:	90                   	nop

c002131c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002131c:	55                   	push   ebp
c002131d:	57                   	push   edi
c002131e:	56                   	push   esi
c002131f:	53                   	push   ebx
c0021320:	83 ec 1c             	sub    esp,0x1c
c0021323:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002132b:	8d 50 f8             	lea    edx,[eax-0x8]
c002132e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021332:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021336:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002133a:	80 fa 03             	cmp    dl,0x3
c002133d:	77 5d                	ja     c002139c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002133f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021347:	0f b6 db             	movzx  ebx,bl
c002134a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002134d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0021351:	83 ca 80             	or     edx,0xffffff80
c0021354:	0f b6 d2             	movzx  edx,dl
c0021357:	52                   	push   edx
c0021358:	6a 0c                	push   0xc
c002135a:	53                   	push   ebx
c002135b:	56                   	push   esi
c002135c:	e8 59 f9 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021361:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021366:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002136a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002136e:	0f b6 c0             	movzx  eax,al
c0021371:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0021375:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021377:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002137c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021380:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021384:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021388:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021390:	83 c4 2c             	add    esp,0x2c
c0021393:	5b                   	pop    ebx
c0021394:	5e                   	pop    esi
c0021395:	5f                   	pop    edi
c0021396:	5d                   	pop    ebp
c0021397:	e9 1e f9 ff ff       	jmp    c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c002139c:	3c 07                	cmp    al,0x7
c002139e:	77 10                	ja     c00213b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00213a0:	0f b6 db             	movzx  ebx,bl
c00213a3:	0f b6 d0             	movzx  edx,al
c00213a6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00213ae:	eb 2d                	jmp    c00213dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00213b0:	3c 0d                	cmp    al,0xd
c00213b2:	77 13                	ja     c00213c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00213b4:	0f b6 db             	movzx  ebx,bl
c00213b7:	0f b6 c0             	movzx  eax,al
c00213ba:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00213c1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00213c5:	eb 16                	jmp    c00213dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00213c7:	3c 15                	cmp    al,0x15
c00213c9:	77 14                	ja     c00213df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00213cb:	0f b6 db             	movzx  ebx,bl
c00213ce:	0f b6 c0             	movzx  eax,al
c00213d1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00213d9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00213dd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00213df:	83 c4 1c             	add    esp,0x1c
c00213e2:	5b                   	pop    ebx
c00213e3:	5e                   	pop    esi
c00213e4:	5f                   	pop    edi
c00213e5:	5d                   	pop    ebp
c00213e6:	c3                   	ret    
c00213e7:	90                   	nop

c00213e8 <IDE::detect()>:
c00213e8:	55                   	push   ebp
c00213e9:	57                   	push   edi
c00213ea:	56                   	push   esi
c00213eb:	53                   	push   ebx
c00213ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00213f2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00213f9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021400:	0f 85 be 02 00 00    	jne    c00216c4 <IDE::detect()+0x2dc>
c0021406:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002140d:	31 f6                	xor    esi,esi
c002140f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021417:	31 ed                	xor    ebp,ebp
c0021419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002141d:	c1 e0 06             	shl    eax,0x6
c0021420:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021428:	89 e8                	mov    eax,ebp
c002142a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002142e:	c1 e0 04             	shl    eax,0x4
c0021431:	83 c8 a0             	or     eax,0xffffffa0
c0021434:	0f b6 c0             	movzx  eax,al
c0021437:	50                   	push   eax
c0021438:	6a 06                	push   0x6
c002143a:	56                   	push   esi
c002143b:	53                   	push   ebx
c002143c:	e8 79 f8 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021441:	83 c4 0c             	add    esp,0xc
c0021444:	6a 0c                	push   0xc
c0021446:	56                   	push   esi
c0021447:	53                   	push   ebx
c0021448:	e8 2d f9 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c002144d:	83 c4 0c             	add    esp,0xc
c0021450:	6a 0c                	push   0xc
c0021452:	56                   	push   esi
c0021453:	53                   	push   ebx
c0021454:	e8 21 f9 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021459:	83 c4 0c             	add    esp,0xc
c002145c:	6a 0c                	push   0xc
c002145e:	56                   	push   esi
c002145f:	53                   	push   ebx
c0021460:	e8 15 f9 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021465:	83 c4 0c             	add    esp,0xc
c0021468:	6a 0c                	push   0xc
c002146a:	56                   	push   esi
c002146b:	53                   	push   ebx
c002146c:	e8 09 f9 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021471:	68 ec 00 00 00       	push   0xec
c0021476:	6a 07                	push   0x7
c0021478:	56                   	push   esi
c0021479:	53                   	push   ebx
c002147a:	e8 3b f8 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c002147f:	83 c4 1c             	add    esp,0x1c
c0021482:	6a 0c                	push   0xc
c0021484:	56                   	push   esi
c0021485:	53                   	push   ebx
c0021486:	e8 ef f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c002148b:	83 c4 0c             	add    esp,0xc
c002148e:	6a 0c                	push   0xc
c0021490:	56                   	push   esi
c0021491:	53                   	push   ebx
c0021492:	e8 e3 f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021497:	83 c4 0c             	add    esp,0xc
c002149a:	6a 0c                	push   0xc
c002149c:	56                   	push   esi
c002149d:	53                   	push   ebx
c002149e:	e8 d7 f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00214a3:	83 c4 0c             	add    esp,0xc
c00214a6:	6a 0c                	push   0xc
c00214a8:	56                   	push   esi
c00214a9:	53                   	push   ebx
c00214aa:	e8 cb f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00214af:	83 c4 0c             	add    esp,0xc
c00214b2:	6a 0c                	push   0xc
c00214b4:	56                   	push   esi
c00214b5:	53                   	push   ebx
c00214b6:	e8 bf f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00214bb:	83 c4 10             	add    esp,0x10
c00214be:	84 c0                	test   al,al
c00214c0:	0f 84 8b 01 00 00    	je     c0021651 <IDE::detect()+0x269>
c00214c6:	31 ff                	xor    edi,edi
c00214c8:	50                   	push   eax
c00214c9:	6a 0c                	push   0xc
c00214cb:	56                   	push   esi
c00214cc:	53                   	push   ebx
c00214cd:	e8 a8 f8 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c00214d2:	83 c4 10             	add    esp,0x10
c00214d5:	a8 01                	test   al,0x1
c00214d7:	0f 85 8e 01 00 00    	jne    c002166b <IDE::detect()+0x283>
c00214dd:	84 c0                	test   al,al
c00214df:	78 04                	js     c00214e5 <IDE::detect()+0xfd>
c00214e1:	a8 08                	test   al,0x8
c00214e3:	75 27                	jne    c002150c <IDE::detect()+0x124>
c00214e5:	47                   	inc    edi
c00214e6:	81 ff 17 01 00 00    	cmp    edi,0x117
c00214ec:	7e da                	jle    c00214c8 <IDE::detect()+0xe0>
c00214ee:	50                   	push   eax
c00214ef:	50                   	push   eax
c00214f0:	6a 00                	push   0x0
c00214f2:	68 40 4b 4c 00       	push   0x4c4b40
c00214f7:	e8 62 ae ff ff       	call   c001c35e <nanoSleep(unsigned long long)>
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021505:	75 c1                	jne    c00214c8 <IDE::detect()+0xe0>
c0021507:	e9 5f 01 00 00       	jmp    c002166b <IDE::detect()+0x283>
c002150c:	31 c9                	xor    ecx,ecx
c002150e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021512:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021516:	83 ec 0c             	sub    esp,0xc
c0021519:	68 80 00 00 00       	push   0x80
c002151e:	57                   	push   edi
c002151f:	6a 00                	push   0x0
c0021521:	56                   	push   esi
c0021522:	53                   	push   ebx
c0021523:	e8 f4 fd ff ff       	call   c002131c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021528:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002152d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021531:	89 d1                	mov    ecx,edx
c0021533:	c1 e0 06             	shl    eax,0x6
c0021536:	01 d8                	add    eax,ebx
c0021538:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002153f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021546:	89 f2                	mov    edx,esi
c0021548:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002154e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021552:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021558:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002155c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021563:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002156b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021572:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002157a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021580:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021587:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002158d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021591:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021595:	83 c4 20             	add    esp,0x20
c0021598:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002159b:	83 c0 02             	add    eax,0x2
c002159e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00215a4:	83 c7 02             	add    edi,0x2
c00215a7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00215aa:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00215b0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00215b4:	75 e2                	jne    c0021598 <IDE::detect()+0x1b0>
c00215b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ba:	c1 e0 06             	shl    eax,0x6
c00215bd:	01 d8                	add    eax,ebx
c00215bf:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00215c5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00215cc:	66 c1 ea 09          	shr    dx,0x9
c00215d0:	83 e2 01             	and    edx,0x1
c00215d3:	84 c9                	test   cl,cl
c00215d5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00215db:	75 2f                	jne    c002160c <IDE::detect()+0x224>
c00215dd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00215e3:	85 c0                	test   eax,eax
c00215e5:	74 66                	je     c002164d <IDE::detect()+0x265>
c00215e7:	50                   	push   eax
c00215e8:	55                   	push   ebp
c00215e9:	56                   	push   esi
c00215ea:	68 8b 93 02 c0       	push   0xc002938b
c00215ef:	e8 4b 10 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00215f4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00215fb:	e8 cc de fe ff       	call   c000f4cc <malloc>
c0021600:	89 c7                	mov    edi,eax
c0021602:	89 04 24             	mov    DWORD PTR [esp],eax
c0021605:	e8 e8 02 00 00       	call   c00218f2 <ATA::ATA()>
c002160a:	eb 28                	jmp    c0021634 <IDE::detect()+0x24c>
c002160c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021612:	55                   	push   ebp
c0021613:	56                   	push   esi
c0021614:	68 ba 93 02 c0       	push   0xc00293ba
c0021619:	e8 21 10 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c002161e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021625:	e8 a2 de fe ff       	call   c000f4cc <malloc>
c002162a:	89 c7                	mov    edi,eax
c002162c:	89 04 24             	mov    DWORD PTR [esp],eax
c002162f:	e8 ee 08 00 00       	call   c0021f22 <ATAPI::ATAPI()>
c0021634:	5a                   	pop    edx
c0021635:	59                   	pop    ecx
c0021636:	57                   	push   edi
c0021637:	53                   	push   ebx
c0021638:	e8 f1 23 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c002163d:	8b 07                	mov    eax,DWORD PTR [edi]
c002163f:	53                   	push   ebx
c0021640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021644:	6a 00                	push   0x0
c0021646:	57                   	push   edi
c0021647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002164a:	83 c4 20             	add    esp,0x20
c002164d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021651:	4d                   	dec    ebp
c0021652:	74 0a                	je     c002165e <IDE::detect()+0x276>
c0021654:	bd 01 00 00 00       	mov    ebp,0x1
c0021659:	e9 bb fd ff ff       	jmp    c0021419 <IDE::detect()+0x31>
c002165e:	4e                   	dec    esi
c002165f:	74 63                	je     c00216c4 <IDE::detect()+0x2dc>
c0021661:	be 01 00 00 00       	mov    esi,0x1
c0021666:	e9 ac fd ff ff       	jmp    c0021417 <IDE::detect()+0x2f>
c002166b:	50                   	push   eax
c002166c:	6a 04                	push   0x4
c002166e:	56                   	push   esi
c002166f:	53                   	push   ebx
c0021670:	e8 05 f7 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021675:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021679:	83 c4 0c             	add    esp,0xc
c002167c:	6a 05                	push   0x5
c002167e:	56                   	push   esi
c002167f:	53                   	push   ebx
c0021680:	e8 f5 f6 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002168c:	80 fa 14             	cmp    dl,0x14
c002168f:	75 04                	jne    c0021695 <IDE::detect()+0x2ad>
c0021691:	3c eb                	cmp    al,0xeb
c0021693:	eb 07                	jmp    c002169c <IDE::detect()+0x2b4>
c0021695:	3c 96                	cmp    al,0x96
c0021697:	75 b8                	jne    c0021651 <IDE::detect()+0x269>
c0021699:	80 fa 69             	cmp    dl,0x69
c002169c:	75 b3                	jne    c0021651 <IDE::detect()+0x269>
c002169e:	68 a1 00 00 00       	push   0xa1
c00216a3:	6a 07                	push   0x7
c00216a5:	56                   	push   esi
c00216a6:	53                   	push   ebx
c00216a7:	e8 0e f6 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216ac:	5f                   	pop    edi
c00216ad:	58                   	pop    eax
c00216ae:	6a 00                	push   0x0
c00216b0:	68 40 42 0f 00       	push   0xf4240
c00216b5:	e8 a4 ac ff ff       	call   c001c35e <nanoSleep(unsigned long long)>
c00216ba:	83 c4 10             	add    esp,0x10
c00216bd:	b1 01                	mov    cl,0x1
c00216bf:	e9 4a fe ff ff       	jmp    c002150e <IDE::detect()+0x126>
c00216c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00216ca:	5b                   	pop    ebx
c00216cb:	5e                   	pop    esi
c00216cc:	5f                   	pop    edi
c00216cd:	5d                   	pop    ebp
c00216ce:	c3                   	ret    
c00216cf:	90                   	nop

c00216d0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00216d0:	55                   	push   ebp
c00216d1:	57                   	push   edi
c00216d2:	56                   	push   esi
c00216d3:	53                   	push   ebx
c00216d4:	83 ec 1c             	sub    esp,0x1c
c00216d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00216db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00216df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00216e3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00216e7:	88 c3                	mov    bl,al
c00216e9:	84 c0                	test   al,al
c00216eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216ef:	0f 84 67 01 00 00    	je     c002185c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00216f5:	83 ec 0c             	sub    esp,0xc
c00216f8:	68 eb 93 02 c0       	push   0xc00293eb
c00216fd:	e8 3d 0f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021702:	83 c4 10             	add    esp,0x10
c0021705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021709:	3c 01                	cmp    al,0x1
c002170b:	75 17                	jne    c0021724 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002170d:	83 ec 0c             	sub    esp,0xc
c0021710:	b3 13                	mov    bl,0x13
c0021712:	68 f7 93 02 c0       	push   0xc00293f7
c0021717:	e8 23 0f ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c002171c:	83 c4 10             	add    esp,0x10
c002171f:	e9 25 01 00 00       	jmp    c0021849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021724:	3c 02                	cmp    al,0x2
c0021726:	0f 85 ef 00 00 00    	jne    c002181b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002172c:	d1 e6                	shl    esi,1
c002172e:	09 ee                	or     esi,ebp
c0021730:	52                   	push   edx
c0021731:	89 f0                	mov    eax,esi
c0021733:	6a 01                	push   0x1
c0021735:	0f b6 f0             	movzx  esi,al
c0021738:	c1 e6 06             	shl    esi,0x6
c002173b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021743:	50                   	push   eax
c0021744:	57                   	push   edi
c0021745:	e8 30 f6 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	89 c6                	mov    esi,eax
c002174f:	a8 01                	test   al,0x1
c0021751:	74 12                	je     c0021765 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021753:	83 ec 0c             	sub    esp,0xc
c0021756:	b3 07                	mov    bl,0x7
c0021758:	68 0c 94 02 c0       	push   0xc002940c
c002175d:	e8 dd 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021762:	83 c4 10             	add    esp,0x10
c0021765:	f7 c6 02 00 00 00    	test   esi,0x2
c002176b:	74 12                	je     c002177f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002176d:	83 ec 0c             	sub    esp,0xc
c0021770:	b3 03                	mov    bl,0x3
c0021772:	68 2a 94 02 c0       	push   0xc002942a
c0021777:	e8 c3 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c002177c:	83 c4 10             	add    esp,0x10
c002177f:	f7 c6 04 00 00 00    	test   esi,0x4
c0021785:	74 12                	je     c0021799 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021787:	83 ec 0c             	sub    esp,0xc
c002178a:	b3 14                	mov    bl,0x14
c002178c:	68 4a 94 02 c0       	push   0xc002944a
c0021791:	e8 a9 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021796:	83 c4 10             	add    esp,0x10
c0021799:	f7 c6 08 00 00 00    	test   esi,0x8
c002179f:	74 12                	je     c00217b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00217a1:	83 ec 0c             	sub    esp,0xc
c00217a4:	b3 03                	mov    bl,0x3
c00217a6:	68 2a 94 02 c0       	push   0xc002942a
c00217ab:	e8 8f 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00217b0:	83 c4 10             	add    esp,0x10
c00217b3:	f7 c6 10 00 00 00    	test   esi,0x10
c00217b9:	74 12                	je     c00217cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00217bb:	83 ec 0c             	sub    esp,0xc
c00217be:	b3 15                	mov    bl,0x15
c00217c0:	68 62 94 02 c0       	push   0xc0029462
c00217c5:	e8 75 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00217ca:	83 c4 10             	add    esp,0x10
c00217cd:	f7 c6 20 00 00 00    	test   esi,0x20
c00217d3:	74 12                	je     c00217e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00217d5:	83 ec 0c             	sub    esp,0xc
c00217d8:	b3 03                	mov    bl,0x3
c00217da:	68 2a 94 02 c0       	push   0xc002942a
c00217df:	e8 5b 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00217e4:	83 c4 10             	add    esp,0x10
c00217e7:	f7 c6 40 00 00 00    	test   esi,0x40
c00217ed:	74 12                	je     c0021801 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00217ef:	83 ec 0c             	sub    esp,0xc
c00217f2:	b3 16                	mov    bl,0x16
c00217f4:	68 7c 94 02 c0       	push   0xc002947c
c00217f9:	e8 41 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00217fe:	83 c4 10             	add    esp,0x10
c0021801:	89 f0                	mov    eax,esi
c0021803:	84 c0                	test   al,al
c0021805:	79 42                	jns    c0021849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021807:	83 ec 0c             	sub    esp,0xc
c002180a:	b3 0d                	mov    bl,0xd
c002180c:	68 9d 94 02 c0       	push   0xc002949d
c0021811:	e8 29 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021816:	83 c4 10             	add    esp,0x10
c0021819:	eb 2e                	jmp    c0021849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002181b:	3c 03                	cmp    al,0x3
c002181d:	75 14                	jne    c0021833 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002181f:	83 ec 0c             	sub    esp,0xc
c0021822:	b3 17                	mov    bl,0x17
c0021824:	68 b1 94 02 c0       	push   0xc00294b1
c0021829:	e8 11 0e ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c002182e:	83 c4 10             	add    esp,0x10
c0021831:	eb 16                	jmp    c0021849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021833:	3c 04                	cmp    al,0x4
c0021835:	75 12                	jne    c0021849 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021837:	83 ec 0c             	sub    esp,0xc
c002183a:	b3 08                	mov    bl,0x8
c002183c:	68 c7 94 02 c0       	push   0xc00294c7
c0021841:	e8 f9 0d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021846:	83 c4 10             	add    esp,0x10
c0021849:	50                   	push   eax
c002184a:	50                   	push   eax
c002184b:	0f b6 c3             	movzx  eax,bl
c002184e:	50                   	push   eax
c002184f:	68 df 94 02 c0       	push   0xc00294df
c0021854:	e8 e6 0d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0021859:	83 c4 10             	add    esp,0x10
c002185c:	83 c4 1c             	add    esp,0x1c
c002185f:	88 d8                	mov    al,bl
c0021861:	5b                   	pop    ebx
c0021862:	5e                   	pop    esi
c0021863:	5f                   	pop    edi
c0021864:	5d                   	pop    ebp
c0021865:	c3                   	ret    

c0021866 <IDE::polling(unsigned char, unsigned int)>:
c0021866:	57                   	push   edi
c0021867:	56                   	push   esi
c0021868:	53                   	push   ebx
c0021869:	bb 04 00 00 00       	mov    ebx,0x4
c002186e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021872:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021877:	52                   	push   edx
c0021878:	6a 0c                	push   0xc
c002187a:	56                   	push   esi
c002187b:	57                   	push   edi
c002187c:	e8 f9 f4 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021881:	83 c4 10             	add    esp,0x10
c0021884:	4b                   	dec    ebx
c0021885:	75 f0                	jne    c0021877 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021887:	bb a0 86 01 00       	mov    ebx,0x186a0
c002188c:	50                   	push   eax
c002188d:	6a 0c                	push   0xc
c002188f:	56                   	push   esi
c0021890:	57                   	push   edi
c0021891:	e8 e4 f4 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021896:	83 c4 10             	add    esp,0x10
c0021899:	a8 01                	test   al,0x1
c002189b:	74 12                	je     c00218af <IDE::polling(unsigned char, unsigned int)+0x49>
c002189d:	83 ec 0c             	sub    esp,0xc
c00218a0:	68 f9 94 02 c0       	push   0xc00294f9
c00218a5:	e8 95 0d ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00218aa:	83 c4 10             	add    esp,0x10
c00218ad:	eb 17                	jmp    c00218c6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00218af:	a8 20                	test   al,0x20
c00218b1:	75 0f                	jne    c00218c2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00218b3:	4b                   	dec    ebx
c00218b4:	74 10                	je     c00218c6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00218b6:	84 c0                	test   al,al
c00218b8:	78 d2                	js     c002188c <IDE::polling(unsigned char, unsigned int)+0x26>
c00218ba:	a8 08                	test   al,0x8
c00218bc:	74 ce                	je     c002188c <IDE::polling(unsigned char, unsigned int)+0x26>
c00218be:	31 c0                	xor    eax,eax
c00218c0:	eb 06                	jmp    c00218c8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00218c2:	b0 01                	mov    al,0x1
c00218c4:	eb 02                	jmp    c00218c8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00218c6:	b0 02                	mov    al,0x2
c00218c8:	5b                   	pop    ebx
c00218c9:	5e                   	pop    esi
c00218ca:	5f                   	pop    edi
c00218cb:	c3                   	ret    

c00218cc <ATA::close(int, int, void*)>:
c00218cc:	83 ec 0c             	sub    esp,0xc
c00218cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00218d9:	85 c0                	test   eax,eax
c00218db:	74 0c                	je     c00218e9 <ATA::close(int, int, void*)+0x1d>
c00218dd:	83 ec 0c             	sub    esp,0xc
c00218e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00218e2:	50                   	push   eax
c00218e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00218e6:	83 c4 10             	add    esp,0x10
c00218e9:	31 c0                	xor    eax,eax
c00218eb:	83 c4 0c             	add    esp,0xc
c00218ee:	c3                   	ret    
c00218ef:	90                   	nop

c00218f0 <ATA::powerSaving(PowerSavingLevel)>:
c00218f0:	c3                   	ret    
c00218f1:	90                   	nop

c00218f2 <ATA::ATA()>:
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f9:	83 ec 04             	sub    esp,0x4
c00218fc:	68 00 02 00 00       	push   0x200
c0021901:	68 3c 95 02 c0       	push   0xc002953c
c0021906:	50                   	push   eax
c0021907:	e8 32 25 ff ff       	call   c0013e3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	ba 68 95 02 c0       	mov    edx,0xc0029568
c0021914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021918:	89 10                	mov    DWORD PTR [eax],edx
c002191a:	90                   	nop
c002191b:	83 c4 0c             	add    esp,0xc
c002191e:	c3                   	ret    
c002191f:	90                   	nop

c0021920 <ATA::flush(bool)>:
c0021920:	53                   	push   ebx
c0021921:	83 ec 08             	sub    esp,0x8
c0021924:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021929:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002192d:	19 c0                	sbb    eax,eax
c002192f:	83 e0 fd             	and    eax,0xfffffffd
c0021932:	05 ea 00 00 00       	add    eax,0xea
c0021937:	50                   	push   eax
c0021938:	6a 07                	push   0x7
c002193a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021941:	50                   	push   eax
c0021942:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021948:	e8 6d f3 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c002194d:	83 c4 0c             	add    esp,0xc
c0021950:	6a 00                	push   0x0
c0021952:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021959:	50                   	push   eax
c002195a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021960:	e8 01 ff ff ff       	call   c0021866 <IDE::polling(unsigned char, unsigned int)>
c0021965:	83 c4 18             	add    esp,0x18
c0021968:	5b                   	pop    ebx
c0021969:	c3                   	ret    

c002196a <ATA::readyForCommand()>:
c002196a:	56                   	push   esi
c002196b:	53                   	push   ebx
c002196c:	31 db                	xor    ebx,ebx
c002196e:	50                   	push   eax
c002196f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021973:	50                   	push   eax
c0021974:	6a 0c                	push   0xc
c0021976:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002197d:	50                   	push   eax
c002197e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021984:	e8 f1 f3 ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	a8 88                	test   al,0x88
c002198e:	74 23                	je     c00219b3 <ATA::readyForCommand()+0x49>
c0021990:	43                   	inc    ebx
c0021991:	83 fb 63             	cmp    ebx,0x63
c0021994:	7e dd                	jle    c0021973 <ATA::readyForCommand()+0x9>
c0021996:	51                   	push   ecx
c0021997:	51                   	push   ecx
c0021998:	6a 00                	push   0x0
c002199a:	68 40 42 0f 00       	push   0xf4240
c002199f:	e8 ba a9 ff ff       	call   c001c35e <nanoSleep(unsigned long long)>
c00219a4:	83 c4 10             	add    esp,0x10
c00219a7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00219ad:	75 c4                	jne    c0021973 <ATA::readyForCommand()+0x9>
c00219af:	31 c0                	xor    eax,eax
c00219b1:	eb 02                	jmp    c00219b5 <ATA::readyForCommand()+0x4b>
c00219b3:	b0 01                	mov    al,0x1
c00219b5:	5a                   	pop    edx
c00219b6:	5b                   	pop    ebx
c00219b7:	5e                   	pop    esi
c00219b8:	c3                   	ret    
c00219b9:	90                   	nop

c00219ba <ATA::access(unsigned long long, int, void*, bool)>:
c00219ba:	55                   	push   ebp
c00219bb:	57                   	push   edi
c00219bc:	56                   	push   esi
c00219bd:	53                   	push   ebx
c00219be:	83 ec 2c             	sub    esp,0x2c
c00219c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00219c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00219c9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00219cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00219d1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00219d5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00219d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00219dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00219e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219e7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00219f1:	c1 e0 06             	shl    eax,0x6
c00219f4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00219fc:	74 5d                	je     c0021a5b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00219fe:	89 fa                	mov    edx,edi
c0021a00:	89 f0                	mov    eax,esi
c0021a02:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021a06:	c1 ea 1c             	shr    edx,0x1c
c0021a09:	89 d1                	mov    ecx,edx
c0021a0b:	09 c1                	or     ecx,eax
c0021a0d:	74 25                	je     c0021a34 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021a0f:	31 ed                	xor    ebp,ebp
c0021a11:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021a18:	89 fa                	mov    edx,edi
c0021a1a:	89 f0                	mov    eax,esi
c0021a1c:	0f ad d0             	shrd   eax,edx,cl
c0021a1f:	d3 ea                	shr    edx,cl
c0021a21:	f6 c1 20             	test   cl,0x20
c0021a24:	74 02                	je     c0021a28 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021a26:	89 d0                	mov    eax,edx
c0021a28:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021a2c:	45                   	inc    ebp
c0021a2d:	83 fd 06             	cmp    ebp,0x6
c0021a30:	75 df                	jne    c0021a11 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021a32:	eb 76                	jmp    c0021aaa <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021a34:	89 f0                	mov    eax,esi
c0021a36:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021a3b:	89 fa                	mov    edx,edi
c0021a3d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021a44:	0f ac d0 10          	shrd   eax,edx,0x10
c0021a48:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021a4d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021a51:	c1 ee 18             	shr    esi,0x18
c0021a54:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021a59:	eb 56                	jmp    c0021ab1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021a5b:	6a 00                	push   0x0
c0021a5d:	6a 3f                	push   0x3f
c0021a5f:	57                   	push   edi
c0021a60:	56                   	push   esi
c0021a61:	e8 16 20 00 00       	call   c0023a7c <__umoddi3>
c0021a66:	83 c4 10             	add    esp,0x10
c0021a69:	40                   	inc    eax
c0021a6a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021a6e:	6a 00                	push   0x0
c0021a70:	68 f0 03 00 00       	push   0x3f0
c0021a75:	57                   	push   edi
c0021a76:	56                   	push   esi
c0021a77:	e8 00 1f 00 00       	call   c002397c <__udivdi3>
c0021a7c:	83 c4 10             	add    esp,0x10
c0021a7f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021a84:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021a8b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021a90:	6a 00                	push   0x0
c0021a92:	6a 3f                	push   0x3f
c0021a94:	57                   	push   edi
c0021a95:	56                   	push   esi
c0021a96:	e8 e1 1e 00 00       	call   c002397c <__udivdi3>
c0021a9b:	83 c4 10             	add    esp,0x10
c0021a9e:	89 c6                	mov    esi,eax
c0021aa0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0021aa5:	83 e6 0f             	and    esi,0xf
c0021aa8:	eb 07                	jmp    c0021ab1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021aaa:	31 f6                	xor    esi,esi
c0021aac:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0021ab1:	bf 01 00 00 00       	mov    edi,0x1
c0021ab6:	50                   	push   eax
c0021ab7:	6a 00                	push   0x0
c0021ab9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ac0:	50                   	push   eax
c0021ac1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ac5:	e8 fc f3 ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c0021aca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021acd:	e8 98 fe ff ff       	call   c002196a <ATA::readyForCommand()>
c0021ad2:	83 c4 10             	add    esp,0x10
c0021ad5:	84 c0                	test   al,al
c0021ad7:	0f 84 50 02 00 00    	je     c0021d2d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021add:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021ae3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021ae9:	c1 e0 04             	shl    eax,0x4
c0021aec:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021af3:	09 c6                	or     esi,eax
c0021af5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021afa:	75 05                	jne    c0021b01 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021afc:	83 ce a0             	or     esi,0xffffffa0
c0021aff:	eb 03                	jmp    c0021b04 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021b01:	83 ce e0             	or     esi,0xffffffe0
c0021b04:	89 f0                	mov    eax,esi
c0021b06:	0f b6 f0             	movzx  esi,al
c0021b09:	56                   	push   esi
c0021b0a:	6a 06                	push   0x6
c0021b0c:	51                   	push   ecx
c0021b0d:	52                   	push   edx
c0021b0e:	e8 a7 f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b13:	83 c4 10             	add    esp,0x10
c0021b16:	6a 00                	push   0x0
c0021b18:	6a 01                	push   0x1
c0021b1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b21:	50                   	push   eax
c0021b22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b28:	e8 8d f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b2d:	83 c4 10             	add    esp,0x10
c0021b30:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021b35:	75 6e                	jne    c0021ba5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021b37:	6a 00                	push   0x0
c0021b39:	6a 08                	push   0x8
c0021b3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b42:	50                   	push   eax
c0021b43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b49:	e8 6c f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b4e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021b53:	50                   	push   eax
c0021b54:	6a 09                	push   0x9
c0021b56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b5d:	50                   	push   eax
c0021b5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b64:	e8 51 f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b69:	83 c4 20             	add    esp,0x20
c0021b6c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021b71:	50                   	push   eax
c0021b72:	6a 0a                	push   0xa
c0021b74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b7b:	50                   	push   eax
c0021b7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b82:	e8 33 f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b87:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021b8c:	50                   	push   eax
c0021b8d:	6a 0b                	push   0xb
c0021b8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021b96:	50                   	push   eax
c0021b97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021b9d:	e8 18 f1 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ba2:	83 c4 20             	add    esp,0x20
c0021ba5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0021baa:	50                   	push   eax
c0021bab:	6a 02                	push   0x2
c0021bad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021bb4:	50                   	push   eax
c0021bb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021bbb:	e8 fa f0 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bc0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0021bc5:	50                   	push   eax
c0021bc6:	6a 03                	push   0x3
c0021bc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021bcf:	50                   	push   eax
c0021bd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021bd6:	e8 df f0 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bdb:	83 c4 20             	add    esp,0x20
c0021bde:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021be3:	50                   	push   eax
c0021be4:	6a 04                	push   0x4
c0021be6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021bed:	50                   	push   eax
c0021bee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021bf4:	e8 c1 f0 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021bfe:	50                   	push   eax
c0021bff:	6a 05                	push   0x5
c0021c01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c08:	50                   	push   eax
c0021c09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c0f:	e8 a6 f0 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c14:	83 c4 20             	add    esp,0x20
c0021c17:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021c1c:	0f 94 c0             	sete   al
c0021c1f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021c24:	74 09                	je     c0021c2f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021c26:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021c2d:	eb 07                	jmp    c0021c36 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021c2f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021c36:	0f b6 c0             	movzx  eax,al
c0021c39:	50                   	push   eax
c0021c3a:	6a 07                	push   0x7
c0021c3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c43:	50                   	push   eax
c0021c44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c4a:	e8 6b f0 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c4f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021c53:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021c57:	83 c4 10             	add    esp,0x10
c0021c5a:	85 f6                	test   esi,esi
c0021c5c:	0f 84 ac 00 00 00    	je     c0021d0e <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021c62:	50                   	push   eax
c0021c63:	6a 01                	push   0x1
c0021c65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c6c:	50                   	push   eax
c0021c6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c73:	e8 ee fb ff ff       	call   c0021866 <IDE::polling(unsigned char, unsigned int)>
c0021c78:	83 c4 10             	add    esp,0x10
c0021c7b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021c81:	84 c0                	test   al,al
c0021c83:	74 20                	je     c0021ca5 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021c85:	0f b6 f8             	movzx  edi,al
c0021c88:	0f b6 d2             	movzx  edx,dl
c0021c8b:	57                   	push   edi
c0021c8c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021c93:	50                   	push   eax
c0021c94:	52                   	push   edx
c0021c95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c9b:	e8 30 fa ff ff       	call   c00216d0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021ca0:	e9 85 00 00 00       	jmp    c0021d2a <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0021ca5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021caa:	74 41                	je     c0021ced <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0021cac:	31 c9                	xor    ecx,ecx
c0021cae:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0021cb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021cb6:	50                   	push   eax
c0021cb7:	50                   	push   eax
c0021cb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cbf:	50                   	push   eax
c0021cc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cc6:	e8 dd ef ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c0021ccb:	89 c2                	mov    edx,eax
c0021ccd:	89 e8                	mov    eax,ebp
c0021ccf:	66 ef                	out    dx,ax
c0021cd1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021cd5:	83 c4 10             	add    esp,0x10
c0021cd8:	41                   	inc    ecx
c0021cd9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021cdf:	75 cd                	jne    c0021cae <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021ce1:	4e                   	dec    esi
c0021ce2:	81 c7 00 02 00 00    	add    edi,0x200
c0021ce8:	e9 6d ff ff ff       	jmp    c0021c5a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021ced:	0f b6 d2             	movzx  edx,dl
c0021cf0:	51                   	push   ecx
c0021cf1:	51                   	push   ecx
c0021cf2:	52                   	push   edx
c0021cf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cf9:	e8 aa ef ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c0021cfe:	b9 00 01 00 00       	mov    ecx,0x100
c0021d03:	89 c2                	mov    edx,eax
c0021d05:	fc                   	cld    
c0021d06:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021d09:	83 c4 10             	add    esp,0x10
c0021d0c:	eb d3                	jmp    c0021ce1 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021d0e:	31 ff                	xor    edi,edi
c0021d10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021d15:	74 16                	je     c0021d2d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021d17:	50                   	push   eax
c0021d18:	50                   	push   eax
c0021d19:	31 c0                	xor    eax,eax
c0021d1b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021d20:	0f 94 c0             	sete   al
c0021d23:	50                   	push   eax
c0021d24:	53                   	push   ebx
c0021d25:	e8 f6 fb ff ff       	call   c0021920 <ATA::flush(bool)>
c0021d2a:	83 c4 10             	add    esp,0x10
c0021d2d:	83 c4 2c             	add    esp,0x2c
c0021d30:	89 f8                	mov    eax,edi
c0021d32:	5b                   	pop    ebx
c0021d33:	5e                   	pop    esi
c0021d34:	5f                   	pop    edi
c0021d35:	5d                   	pop    ebp
c0021d36:	c3                   	ret    
c0021d37:	90                   	nop

c0021d38 <ATA::read(unsigned long long, int, void*)>:
c0021d38:	57                   	push   edi
c0021d39:	b8 04 00 00 00       	mov    eax,0x4
c0021d3e:	56                   	push   esi
c0021d3f:	53                   	push   ebx
c0021d40:	83 ec 10             	sub    esp,0x10
c0021d43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021d47:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021d4b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021d4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d52:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021d56:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021d5c:	77 3b                	ja     c0021d99 <ATA::read(unsigned long long, int, void*)+0x61>
c0021d5e:	b8 06 00 00 00       	mov    eax,0x6
c0021d63:	85 d2                	test   edx,edx
c0021d65:	74 32                	je     c0021d99 <ATA::read(unsigned long long, int, void*)+0x61>
c0021d67:	50                   	push   eax
c0021d68:	50                   	push   eax
c0021d69:	6a 00                	push   0x0
c0021d6b:	52                   	push   edx
c0021d6c:	53                   	push   ebx
c0021d6d:	57                   	push   edi
c0021d6e:	56                   	push   esi
c0021d6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021d73:	e8 42 fc ff ff       	call   c00219ba <ATA::access(unsigned long long, int, void*, bool)>
c0021d78:	83 c4 20             	add    esp,0x20
c0021d7b:	85 c0                	test   eax,eax
c0021d7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d81:	75 11                	jne    c0021d94 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021d83:	01 1d 68 cc 02 c0    	add    DWORD PTR ds:0xc002cc68,ebx
c0021d89:	e8 1a e7 fe ff       	call   c00104a8 <VgaText::updateDiskUsage()>
c0021d8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d92:	eb 05                	jmp    c0021d99 <ATA::read(unsigned long long, int, void*)+0x61>
c0021d94:	b8 01 00 00 00       	mov    eax,0x1
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	5b                   	pop    ebx
c0021d9d:	5e                   	pop    esi
c0021d9e:	5f                   	pop    edi
c0021d9f:	c3                   	ret    

c0021da0 <ATA::write(unsigned long long, int, void*)>:
c0021da0:	57                   	push   edi
c0021da1:	b8 04 00 00 00       	mov    eax,0x4
c0021da6:	56                   	push   esi
c0021da7:	53                   	push   ebx
c0021da8:	83 ec 10             	sub    esp,0x10
c0021dab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021daf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021db3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021db6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021dba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021dbe:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021dc4:	77 3b                	ja     c0021e01 <ATA::write(unsigned long long, int, void*)+0x61>
c0021dc6:	b8 06 00 00 00       	mov    eax,0x6
c0021dcb:	85 d2                	test   edx,edx
c0021dcd:	74 32                	je     c0021e01 <ATA::write(unsigned long long, int, void*)+0x61>
c0021dcf:	50                   	push   eax
c0021dd0:	50                   	push   eax
c0021dd1:	6a 01                	push   0x1
c0021dd3:	52                   	push   edx
c0021dd4:	53                   	push   ebx
c0021dd5:	57                   	push   edi
c0021dd6:	56                   	push   esi
c0021dd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ddb:	e8 da fb ff ff       	call   c00219ba <ATA::access(unsigned long long, int, void*, bool)>
c0021de0:	83 c4 20             	add    esp,0x20
c0021de3:	85 c0                	test   eax,eax
c0021de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021de9:	75 11                	jne    c0021dfc <ATA::write(unsigned long long, int, void*)+0x5c>
c0021deb:	01 1d 64 cc 02 c0    	add    DWORD PTR ds:0xc002cc64,ebx
c0021df1:	e8 b2 e6 fe ff       	call   c00104a8 <VgaText::updateDiskUsage()>
c0021df6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dfa:	eb 05                	jmp    c0021e01 <ATA::write(unsigned long long, int, void*)+0x61>
c0021dfc:	b8 01 00 00 00       	mov    eax,0x1
c0021e01:	83 c4 10             	add    esp,0x10
c0021e04:	5b                   	pop    ebx
c0021e05:	5e                   	pop    esi
c0021e06:	5f                   	pop    edi
c0021e07:	c3                   	ret    

c0021e08 <ATA::detectCHS()>:
c0021e08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e0c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021e12:	c1 e0 06             	shl    eax,0x6
c0021e15:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021e1b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021e25:	c7 44 24 04 4b 95 02 c0 	mov    DWORD PTR [esp+0x4],0xc002954b
c0021e2d:	e9 d1 6f ff ff       	jmp    c0018e03 <Krnl::panic(char const*)>

c0021e32 <ATA::open(int, int, void*)>:
c0021e32:	53                   	push   ebx
c0021e33:	83 ec 08             	sub    esp,0x8
c0021e36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021e42:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021e48:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021e4e:	c1 e0 06             	shl    eax,0x6
c0021e51:	01 d0                	add    eax,edx
c0021e53:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021e5a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021e60:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021e67:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021e71:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021e77:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021e7e:	75 0c                	jne    c0021e8c <ATA::open(int, int, void*)+0x5a>
c0021e80:	83 ec 0c             	sub    esp,0xc
c0021e83:	53                   	push   ebx
c0021e84:	e8 7f ff ff ff       	call   c0021e08 <ATA::detectCHS()>
c0021e89:	83 c4 10             	add    esp,0x10
c0021e8c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021e92:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021e98:	c1 e0 06             	shl    eax,0x6
c0021e9b:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021ea2:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021eac:	d1 e8                	shr    eax,1
c0021eae:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021eb4:	6a 04                	push   0x4
c0021eb6:	6a 0c                	push   0xc
c0021eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ebf:	50                   	push   eax
c0021ec0:	52                   	push   edx
c0021ec1:	e8 f4 ed ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ec6:	90                   	nop
c0021ec7:	90                   	nop
c0021ec8:	6a 00                	push   0x0
c0021eca:	6a 0c                	push   0xc
c0021ecc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ed3:	50                   	push   eax
c0021ed4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021eda:	e8 db ed ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021edf:	83 c4 14             	add    esp,0x14
c0021ee2:	53                   	push   ebx
c0021ee3:	e8 be 1f ff ff       	call   c0013ea6 <PhysicalDisk::startCache()>
c0021ee8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021eeb:	e8 66 3f ff ff       	call   c0015e56 <createPartitionsForDisk(PhysicalDisk*)>
c0021ef0:	31 c0                	xor    eax,eax
c0021ef2:	83 c4 18             	add    esp,0x18
c0021ef5:	5b                   	pop    ebx
c0021ef6:	c3                   	ret    
c0021ef7:	90                   	nop

c0021ef8 <ATAPI::write(unsigned long long, int, void*)>:
c0021ef8:	b8 03 00 00 00       	mov    eax,0x3
c0021efd:	c3                   	ret    

c0021efe <ATAPI::close(int, int, void*)>:
c0021efe:	83 ec 0c             	sub    esp,0xc
c0021f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f0b:	85 c0                	test   eax,eax
c0021f0d:	74 0c                	je     c0021f1b <ATAPI::close(int, int, void*)+0x1d>
c0021f0f:	83 ec 0c             	sub    esp,0xc
c0021f12:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f14:	50                   	push   eax
c0021f15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021f18:	83 c4 10             	add    esp,0x10
c0021f1b:	31 c0                	xor    eax,eax
c0021f1d:	83 c4 0c             	add    esp,0xc
c0021f20:	c3                   	ret    
c0021f21:	90                   	nop

c0021f22 <ATAPI::ATAPI()>:
c0021f22:	83 ec 0c             	sub    esp,0xc
c0021f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f29:	83 ec 04             	sub    esp,0x4
c0021f2c:	68 00 08 00 00       	push   0x800
c0021f31:	68 94 95 02 c0       	push   0xc0029594
c0021f36:	50                   	push   eax
c0021f37:	e8 02 1f ff ff       	call   c0013e3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021f3c:	83 c4 10             	add    esp,0x10
c0021f3f:	ba d4 95 02 c0       	mov    edx,0xc00295d4
c0021f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f48:	89 10                	mov    DWORD PTR [eax],edx
c0021f4a:	90                   	nop
c0021f4b:	83 c4 0c             	add    esp,0xc
c0021f4e:	c3                   	ret    
c0021f4f:	90                   	nop

c0021f50 <ATAPI::readyForCommand()>:
c0021f50:	56                   	push   esi
c0021f51:	53                   	push   ebx
c0021f52:	31 db                	xor    ebx,ebx
c0021f54:	50                   	push   eax
c0021f55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021f59:	50                   	push   eax
c0021f5a:	6a 0c                	push   0xc
c0021f5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021f63:	50                   	push   eax
c0021f64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021f6a:	e8 0b ee ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0021f6f:	83 c4 10             	add    esp,0x10
c0021f72:	a8 88                	test   al,0x88
c0021f74:	74 23                	je     c0021f99 <ATAPI::readyForCommand()+0x49>
c0021f76:	43                   	inc    ebx
c0021f77:	83 fb 63             	cmp    ebx,0x63
c0021f7a:	7e dd                	jle    c0021f59 <ATAPI::readyForCommand()+0x9>
c0021f7c:	51                   	push   ecx
c0021f7d:	51                   	push   ecx
c0021f7e:	6a 00                	push   0x0
c0021f80:	68 40 42 0f 00       	push   0xf4240
c0021f85:	e8 d4 a3 ff ff       	call   c001c35e <nanoSleep(unsigned long long)>
c0021f8a:	83 c4 10             	add    esp,0x10
c0021f8d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021f93:	75 c4                	jne    c0021f59 <ATAPI::readyForCommand()+0x9>
c0021f95:	31 c0                	xor    eax,eax
c0021f97:	eb 02                	jmp    c0021f9b <ATAPI::readyForCommand()+0x4b>
c0021f99:	b0 01                	mov    al,0x1
c0021f9b:	5a                   	pop    edx
c0021f9c:	5b                   	pop    ebx
c0021f9d:	5e                   	pop    esi
c0021f9e:	c3                   	ret    
c0021f9f:	90                   	nop

c0021fa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021fa0:	55                   	push   ebp
c0021fa1:	57                   	push   edi
c0021fa2:	56                   	push   esi
c0021fa3:	53                   	push   ebx
c0021fa4:	83 ec 20             	sub    esp,0x20
c0021fa7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021fab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021faf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021fb3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021fb7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fbb:	6a 01                	push   0x1
c0021fbd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021fc4:	50                   	push   eax
c0021fc5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021fcb:	e8 f6 ee ff ff       	call   c0020ec6 <IDE::enableIRQs(unsigned char, bool)>
c0021fd0:	5e                   	pop    esi
c0021fd1:	58                   	pop    eax
c0021fd2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021fd9:	50                   	push   eax
c0021fda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021fe0:	e8 af ec ff ff       	call   c0020c94 <IDE::prepareInterrupt(unsigned char)>
c0021fe5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021fe8:	e8 63 ff ff ff       	call   c0021f50 <ATAPI::readyForCommand()>
c0021fed:	83 c4 10             	add    esp,0x10
c0021ff0:	84 c0                	test   al,al
c0021ff2:	75 0a                	jne    c0021ffe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021ff4:	bb 01 00 00 00       	mov    ebx,0x1
c0021ff9:	e9 57 02 00 00       	jmp    c0022255 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021ffe:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0022004:	c1 e0 04             	shl    eax,0x4
c0022007:	0f b6 c0             	movzx  eax,al
c002200a:	50                   	push   eax
c002200b:	6a 06                	push   0x6
c002200d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022014:	50                   	push   eax
c0022015:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002201b:	e8 9a ec ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022020:	6a 00                	push   0x0
c0022022:	6a 01                	push   0x1
c0022024:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002202b:	50                   	push   eax
c002202c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022032:	e8 83 ec ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022037:	83 c4 20             	add    esp,0x20
c002203a:	0f b6 c3             	movzx  eax,bl
c002203d:	0f b6 df             	movzx  ebx,bh
c0022040:	50                   	push   eax
c0022041:	6a 04                	push   0x4
c0022043:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002204a:	50                   	push   eax
c002204b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022051:	e8 64 ec ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022056:	53                   	push   ebx
c0022057:	6a 05                	push   0x5
c0022059:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022060:	50                   	push   eax
c0022061:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022067:	e8 4e ec ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c002206c:	83 c4 20             	add    esp,0x20
c002206f:	68 a0 00 00 00       	push   0xa0
c0022074:	6a 07                	push   0x7
c0022076:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002207d:	50                   	push   eax
c002207e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022084:	e8 31 ec ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022089:	83 c4 0c             	add    esp,0xc
c002208c:	6a 01                	push   0x1
c002208e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022095:	50                   	push   eax
c0022096:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002209c:	e8 c5 f7 ff ff       	call   c0021866 <IDE::polling(unsigned char, unsigned int)>
c00220a1:	83 c4 10             	add    esp,0x10
c00220a4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00220aa:	84 c0                	test   al,al
c00220ac:	74 23                	je     c00220d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00220ae:	0f b6 d8             	movzx  ebx,al
c00220b1:	0f b6 d2             	movzx  edx,dl
c00220b4:	53                   	push   ebx
c00220b5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00220bc:	50                   	push   eax
c00220bd:	52                   	push   edx
c00220be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00220c4:	e8 07 f6 ff ff       	call   c00216d0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00220c9:	83 c4 10             	add    esp,0x10
c00220cc:	e9 84 01 00 00       	jmp    c0022255 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00220d1:	0f b6 d2             	movzx  edx,dl
c00220d4:	53                   	push   ebx
c00220d5:	53                   	push   ebx
c00220d6:	52                   	push   edx
c00220d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00220dd:	e8 c6 eb ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c00220e2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00220e6:	b9 06 00 00 00       	mov    ecx,0x6
c00220eb:	89 c2                	mov    edx,eax
c00220ed:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00220f0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00220f4:	83 c4 10             	add    esp,0x10
c00220f7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00220fd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022104:	85 db                	test   ebx,ebx
c0022106:	0f 84 ec 00 00 00    	je     c00221f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002210c:	51                   	push   ecx
c002210d:	51                   	push   ecx
c002210e:	52                   	push   edx
c002210f:	50                   	push   eax
c0022110:	e8 13 ed ff ff       	call   c0020e28 <IDE::waitInterrupt(unsigned char)>
c0022115:	83 c4 10             	add    esp,0x10
c0022118:	84 c0                	test   al,al
c002211a:	0f 84 d4 fe ff ff    	je     c0021ff4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022120:	56                   	push   esi
c0022121:	56                   	push   esi
c0022122:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022129:	50                   	push   eax
c002212a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022130:	e8 5f eb ff ff       	call   c0020c94 <IDE::prepareInterrupt(unsigned char)>
c0022135:	83 c4 0c             	add    esp,0xc
c0022138:	6a 04                	push   0x4
c002213a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022141:	50                   	push   eax
c0022142:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022148:	e8 2d ec ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c002214d:	83 c4 0c             	add    esp,0xc
c0022150:	89 c6                	mov    esi,eax
c0022152:	6a 05                	push   0x5
c0022154:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002215b:	50                   	push   eax
c002215c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022162:	e8 13 ec ff ff       	call   c0020d7a <IDE::read(unsigned char, unsigned char)>
c0022167:	89 f1                	mov    ecx,esi
c0022169:	0f b6 c0             	movzx  eax,al
c002216c:	0f b6 f1             	movzx  esi,cl
c002216f:	c1 e0 08             	shl    eax,0x8
c0022172:	09 c6                	or     esi,eax
c0022174:	d1 fe                	sar    esi,1
c0022176:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002217a:	83 c4 10             	add    esp,0x10
c002217d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022182:	74 41                	je     c00221c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0022184:	31 c9                	xor    ecx,ecx
c0022186:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002218c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022193:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022197:	75 0a                	jne    c00221a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0022199:	01 c9                	add    ecx,ecx
c002219b:	01 cd                	add    ebp,ecx
c002219d:	4b                   	dec    ebx
c002219e:	e9 54 ff ff ff       	jmp    c00220f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00221a3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00221a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00221ac:	51                   	push   ecx
c00221ad:	51                   	push   ecx
c00221ae:	52                   	push   edx
c00221af:	50                   	push   eax
c00221b0:	e8 f3 ea ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c00221b5:	89 c2                	mov    edx,eax
c00221b7:	89 f0                	mov    eax,esi
c00221b9:	66 ef                	out    dx,ax
c00221bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00221bf:	83 c4 10             	add    esp,0x10
c00221c2:	41                   	inc    ecx
c00221c3:	eb c1                	jmp    c0022186 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00221c5:	31 f6                	xor    esi,esi
c00221c7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00221cd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00221d4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00221d8:	75 06                	jne    c00221e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00221da:	01 f6                	add    esi,esi
c00221dc:	01 f5                	add    ebp,esi
c00221de:	eb bd                	jmp    c002219d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00221e0:	51                   	push   ecx
c00221e1:	51                   	push   ecx
c00221e2:	52                   	push   edx
c00221e3:	50                   	push   eax
c00221e4:	e8 bf ea ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c00221e9:	89 c2                	mov    edx,eax
c00221eb:	66 ed                	in     ax,dx
c00221ed:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00221f2:	83 c4 10             	add    esp,0x10
c00221f5:	46                   	inc    esi
c00221f6:	eb cf                	jmp    c00221c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00221f8:	51                   	push   ecx
c00221f9:	51                   	push   ecx
c00221fa:	52                   	push   edx
c00221fb:	50                   	push   eax
c00221fc:	e8 27 ec ff ff       	call   c0020e28 <IDE::waitInterrupt(unsigned char)>
c0022201:	83 c4 10             	add    esp,0x10
c0022204:	84 c0                	test   al,al
c0022206:	0f 84 e8 fd ff ff    	je     c0021ff4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002220c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022211:	52                   	push   edx
c0022212:	52                   	push   edx
c0022213:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002221a:	50                   	push   eax
c002221b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022221:	e8 6e ea ff ff       	call   c0020c94 <IDE::prepareInterrupt(unsigned char)>
c0022226:	83 c4 10             	add    esp,0x10
c0022229:	50                   	push   eax
c002222a:	50                   	push   eax
c002222b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022232:	50                   	push   eax
c0022233:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022239:	e8 6a ea ff ff       	call   c0020ca8 <IDE::getBase(unsigned char)>
c002223e:	8d 50 07             	lea    edx,[eax+0x7]
c0022241:	ec                   	in     al,dx
c0022242:	83 c4 10             	add    esp,0x10
c0022245:	a8 88                	test   al,0x88
c0022247:	74 0a                	je     c0022253 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022249:	4b                   	dec    ebx
c002224a:	75 dd                	jne    c0022229 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002224c:	bb 02 00 00 00       	mov    ebx,0x2
c0022251:	eb 02                	jmp    c0022255 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022253:	31 db                	xor    ebx,ebx
c0022255:	83 c4 1c             	add    esp,0x1c
c0022258:	89 d8                	mov    eax,ebx
c002225a:	5b                   	pop    ebx
c002225b:	5e                   	pop    esi
c002225c:	5f                   	pop    edi
c002225d:	5d                   	pop    ebp
c002225e:	c3                   	ret    
c002225f:	90                   	nop

c0022260 <ATAPI::diskRemoved()>:
c0022260:	83 ec 18             	sub    esp,0x18
c0022263:	68 9f 95 02 c0       	push   0xc002959f
c0022268:	e8 d2 03 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c002226d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022271:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0022278:	83 c4 1c             	add    esp,0x1c
c002227b:	c3                   	ret    

c002227c <ATAPI::eject()>:
c002227c:	57                   	push   edi
c002227d:	b9 03 00 00 00       	mov    ecx,0x3
c0022282:	53                   	push   ebx
c0022283:	83 ec 14             	sub    esp,0x14
c0022286:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002228a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002228e:	fc                   	cld    
c002228f:	31 c0                	xor    eax,eax
c0022291:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022293:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022298:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002229d:	50                   	push   eax
c002229e:	50                   	push   eax
c002229f:	6a 00                	push   0x0
c00222a1:	6a 00                	push   0x0
c00222a3:	6a 00                	push   0x0
c00222a5:	6a 02                	push   0x2
c00222a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222ab:	50                   	push   eax
c00222ac:	53                   	push   ebx
c00222ad:	e8 ee fc ff ff       	call   c0021fa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00222b2:	83 c4 14             	add    esp,0x14
c00222b5:	53                   	push   ebx
c00222b6:	e8 a5 ff ff ff       	call   c0022260 <ATAPI::diskRemoved()>
c00222bb:	83 c4 24             	add    esp,0x24
c00222be:	5b                   	pop    ebx
c00222bf:	5f                   	pop    edi
c00222c0:	c3                   	ret    
c00222c1:	90                   	nop

c00222c2 <ATAPI::diskInserted()>:
c00222c2:	53                   	push   ebx
c00222c3:	83 ec 14             	sub    esp,0x14
c00222c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00222ca:	68 b5 95 02 c0       	push   0xc00295b5
c00222cf:	e8 6b 03 ff ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00222d4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00222db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00222de:	e8 c3 1b ff ff       	call   c0013ea6 <PhysicalDisk::startCache()>
c00222e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00222e7:	83 c4 18             	add    esp,0x18
c00222ea:	5b                   	pop    ebx
c00222eb:	e9 66 3b ff ff       	jmp    c0015e56 <createPartitionsForDisk(PhysicalDisk*)>

c00222f0 <ATAPI::detectMedia()>:
c00222f0:	56                   	push   esi
c00222f1:	53                   	push   ebx
c00222f2:	83 ec 28             	sub    esp,0x28
c00222f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222f9:	6a 0c                	push   0xc
c00222fb:	6a 00                	push   0x0
c00222fd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022301:	56                   	push   esi
c0022302:	e8 76 e3 fd ff       	call   c000067d <memset>
c0022307:	58                   	pop    eax
c0022308:	5a                   	pop    edx
c0022309:	6a 00                	push   0x0
c002230b:	6a 00                	push   0x0
c002230d:	6a 00                	push   0x0
c002230f:	6a 00                	push   0x0
c0022311:	56                   	push   esi
c0022312:	53                   	push   ebx
c0022313:	e8 88 fc ff ff       	call   c0021fa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022318:	83 c4 1c             	add    esp,0x1c
c002231b:	6a 0c                	push   0xc
c002231d:	6a 00                	push   0x0
c002231f:	56                   	push   esi
c0022320:	e8 58 e3 fd ff       	call   c000067d <memset>
c0022325:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002232a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002232f:	59                   	pop    ecx
c0022330:	58                   	pop    eax
c0022331:	6a 01                	push   0x1
c0022333:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022337:	50                   	push   eax
c0022338:	6a 00                	push   0x0
c002233a:	6a 12                	push   0x12
c002233c:	56                   	push   esi
c002233d:	53                   	push   ebx
c002233e:	e8 5d fc ff ff       	call   c0021fa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022343:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022347:	83 c4 20             	add    esp,0x20
c002234a:	83 e0 7f             	and    eax,0x7f
c002234d:	3c 70                	cmp    al,0x70
c002234f:	74 15                	je     c0022366 <ATAPI::detectMedia()+0x76>
c0022351:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022358:	75 0c                	jne    c0022366 <ATAPI::detectMedia()+0x76>
c002235a:	83 ec 0c             	sub    esp,0xc
c002235d:	53                   	push   ebx
c002235e:	e8 5f ff ff ff       	call   c00222c2 <ATAPI::diskInserted()>
c0022363:	83 c4 10             	add    esp,0x10
c0022366:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002236a:	83 e0 0f             	and    eax,0xf
c002236d:	3c 02                	cmp    al,0x2
c002236f:	75 1b                	jne    c002238c <ATAPI::detectMedia()+0x9c>
c0022371:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022376:	75 2d                	jne    c00223a5 <ATAPI::detectMedia()+0xb5>
c0022378:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002237f:	74 24                	je     c00223a5 <ATAPI::detectMedia()+0xb5>
c0022381:	83 ec 0c             	sub    esp,0xc
c0022384:	53                   	push   ebx
c0022385:	e8 d6 fe ff ff       	call   c0022260 <ATAPI::diskRemoved()>
c002238a:	eb 16                	jmp    c00223a2 <ATAPI::detectMedia()+0xb2>
c002238c:	84 c0                	test   al,al
c002238e:	75 15                	jne    c00223a5 <ATAPI::detectMedia()+0xb5>
c0022390:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022397:	75 0c                	jne    c00223a5 <ATAPI::detectMedia()+0xb5>
c0022399:	83 ec 0c             	sub    esp,0xc
c002239c:	53                   	push   ebx
c002239d:	e8 20 ff ff ff       	call   c00222c2 <ATAPI::diskInserted()>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	83 c4 24             	add    esp,0x24
c00223a8:	5b                   	pop    ebx
c00223a9:	5e                   	pop    esi
c00223aa:	c3                   	ret    
c00223ab:	90                   	nop

c00223ac <ATAPI::open(int, int, void*)>:
c00223ac:	53                   	push   ebx
c00223ad:	83 ec 08             	sub    esp,0x8
c00223b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00223b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00223b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00223bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00223c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00223c8:	c1 e0 06             	shl    eax,0x6
c00223cb:	01 d0                	add    eax,edx
c00223cd:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00223d4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00223da:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00223e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00223eb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00223f1:	6a 04                	push   0x4
c00223f3:	6a 0c                	push   0xc
c00223f5:	51                   	push   ecx
c00223f6:	52                   	push   edx
c00223f7:	e8 be e8 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223fc:	90                   	nop
c00223fd:	90                   	nop
c00223fe:	6a 00                	push   0x0
c0022400:	6a 0c                	push   0xc
c0022402:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022409:	50                   	push   eax
c002240a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022410:	e8 a5 e8 ff ff       	call   c0020cba <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022415:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002241c:	83 c4 14             	add    esp,0x14
c002241f:	53                   	push   ebx
c0022420:	e8 cb fe ff ff       	call   c00222f0 <ATAPI::detectMedia()>
c0022425:	31 c0                	xor    eax,eax
c0022427:	83 c4 18             	add    esp,0x18
c002242a:	5b                   	pop    ebx
c002242b:	c3                   	ret    

c002242c <ATAPI::read(unsigned long long, int, void*)>:
c002242c:	55                   	push   ebp
c002242d:	57                   	push   edi
c002242e:	56                   	push   esi
c002242f:	53                   	push   ebx
c0022430:	83 ec 1c             	sub    esp,0x1c
c0022433:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022437:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002243b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002243f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022446:	74 41                	je     c0022489 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022448:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002244c:	b9 03 00 00 00       	mov    ecx,0x3
c0022451:	fc                   	cld    
c0022452:	31 c0                	xor    eax,eax
c0022454:	86 fb                	xchg   bl,bh
c0022456:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022458:	c1 c3 10             	rol    ebx,0x10
c002245b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022460:	89 e8                	mov    eax,ebp
c0022462:	86 fb                	xchg   bl,bh
c0022464:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022468:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002246c:	50                   	push   eax
c002246d:	50                   	push   eax
c002246e:	55                   	push   ebp
c002246f:	c1 e5 0b             	shl    ebp,0xb
c0022472:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022476:	6a 00                	push   0x0
c0022478:	55                   	push   ebp
c0022479:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002247d:	50                   	push   eax
c002247e:	56                   	push   esi
c002247f:	e8 1c fb ff ff       	call   c0021fa0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022484:	83 c4 20             	add    esp,0x20
c0022487:	eb 1a                	jmp    c00224a3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022489:	83 ec 0c             	sub    esp,0xc
c002248c:	56                   	push   esi
c002248d:	e8 5e fe ff ff       	call   c00222f0 <ATAPI::detectMedia()>
c0022492:	83 c4 10             	add    esp,0x10
c0022495:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002249c:	75 aa                	jne    c0022448 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002249e:	b8 02 00 00 00       	mov    eax,0x2
c00224a3:	83 c4 1c             	add    esp,0x1c
c00224a6:	5b                   	pop    ebx
c00224a7:	5e                   	pop    esi
c00224a8:	5f                   	pop    edi
c00224a9:	5d                   	pop    ebp
c00224aa:	c3                   	ret    
c00224ab:	90                   	nop

c00224ac <AVX::open(int, int, void*)>:
c00224ac:	83 ec 0c             	sub    esp,0xc
c00224af:	e8 44 11 00 00       	call   c00235f8 <avxInit>
c00224b4:	b8 00 00 00 00       	mov    eax,0x0
c00224b9:	83 c4 0c             	add    esp,0xc
c00224bc:	c3                   	ret    
c00224bd:	90                   	nop

c00224be <AVX::close(int, int, void*)>:
c00224be:	83 ec 0c             	sub    esp,0xc
c00224c1:	e8 33 11 00 00       	call   c00235f9 <avxClose>
c00224c6:	b8 00 00 00 00       	mov    eax,0x0
c00224cb:	83 c4 0c             	add    esp,0xc
c00224ce:	c3                   	ret    
c00224cf:	90                   	nop

c00224d0 <AVX::available()>:
c00224d0:	83 ec 0c             	sub    esp,0xc
c00224d3:	e8 18 11 00 00       	call   c00235f0 <avxDetect>
c00224d8:	85 c0                	test   eax,eax
c00224da:	0f 95 c0             	setne  al
c00224dd:	83 c4 0c             	add    esp,0xc
c00224e0:	c3                   	ret    
c00224e1:	90                   	nop

c00224e2 <AVX::save(void*)>:
c00224e2:	83 ec 0c             	sub    esp,0xc
c00224e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224e9:	83 ec 0c             	sub    esp,0xc
c00224ec:	50                   	push   eax
c00224ed:	e8 04 11 00 00       	call   c00235f6 <avxSave>
c00224f2:	83 c4 10             	add    esp,0x10
c00224f5:	90                   	nop
c00224f6:	83 c4 0c             	add    esp,0xc
c00224f9:	c3                   	ret    

c00224fa <AVX::load(void*)>:
c00224fa:	83 ec 0c             	sub    esp,0xc
c00224fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022501:	83 ec 0c             	sub    esp,0xc
c0022504:	50                   	push   eax
c0022505:	e8 ed 10 00 00       	call   c00235f7 <avxLoad>
c002250a:	83 c4 10             	add    esp,0x10
c002250d:	90                   	nop
c002250e:	83 c4 0c             	add    esp,0xc
c0022511:	c3                   	ret    

c0022512 <AVX::AVX()>:
c0022512:	83 ec 0c             	sub    esp,0xc
c0022515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022519:	83 ec 08             	sub    esp,0x8
c002251c:	68 00 96 02 c0       	push   0xc0029600
c0022521:	50                   	push   eax
c0022522:	e8 f5 19 ff ff       	call   c0013f1c <FPU::FPU(char const*)>
c0022527:	83 c4 10             	add    esp,0x10
c002252a:	ba 10 96 02 c0       	mov    edx,0xc0029610
c002252f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022533:	89 10                	mov    DWORD PTR [eax],edx
c0022535:	90                   	nop
c0022536:	83 c4 0c             	add    esp,0xc
c0022539:	c3                   	ret    

c002253a <MMX::available()>:
c002253a:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c002253f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022545:	83 e0 20             	and    eax,0x20
c0022548:	84 c0                	test   al,al
c002254a:	0f 95 c0             	setne  al
c002254d:	c3                   	ret    

c002254e <MMX::open(int, int, void*)>:
c002254e:	83 ec 0c             	sub    esp,0xc
c0022551:	e8 16 11 00 00       	call   c002366c <x87Init>
c0022556:	b8 00 00 00 00       	mov    eax,0x0
c002255b:	83 c4 0c             	add    esp,0xc
c002255e:	c3                   	ret    
c002255f:	90                   	nop

c0022560 <MMX::close(int, int, void*)>:
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	e8 1e 11 00 00       	call   c0023686 <x87Close>
c0022568:	b8 00 00 00 00       	mov    eax,0x0
c002256d:	83 c4 0c             	add    esp,0xc
c0022570:	c3                   	ret    
c0022571:	90                   	nop

c0022572 <MMX::save(void*)>:
c0022572:	83 ec 0c             	sub    esp,0xc
c0022575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022579:	83 ec 0c             	sub    esp,0xc
c002257c:	50                   	push   eax
c002257d:	e8 df 10 00 00       	call   c0023661 <x87Save>
c0022582:	83 c4 10             	add    esp,0x10
c0022585:	90                   	nop
c0022586:	83 c4 0c             	add    esp,0xc
c0022589:	c3                   	ret    

c002258a <MMX::load(void*)>:
c002258a:	83 ec 0c             	sub    esp,0xc
c002258d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022591:	83 ec 0c             	sub    esp,0xc
c0022594:	50                   	push   eax
c0022595:	e8 cd 10 00 00       	call   c0023667 <x87Load>
c002259a:	83 c4 10             	add    esp,0x10
c002259d:	90                   	nop
c002259e:	83 c4 0c             	add    esp,0xc
c00225a1:	c3                   	ret    

c00225a2 <MMX::MMX()>:
c00225a2:	83 ec 0c             	sub    esp,0xc
c00225a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a9:	83 ec 08             	sub    esp,0x8
c00225ac:	68 40 96 02 c0       	push   0xc0029640
c00225b1:	50                   	push   eax
c00225b2:	e8 65 19 ff ff       	call   c0013f1c <FPU::FPU(char const*)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	ba 50 96 02 c0       	mov    edx,0xc0029650
c00225bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c3:	89 10                	mov    DWORD PTR [eax],edx
c00225c5:	90                   	nop
c00225c6:	83 c4 0c             	add    esp,0xc
c00225c9:	c3                   	ret    

c00225ca <SSE::open(int, int, void*)>:
c00225ca:	83 ec 0c             	sub    esp,0xc
c00225cd:	e8 55 10 00 00       	call   c0023627 <sseInit>
c00225d2:	b8 00 00 00 00       	mov    eax,0x0
c00225d7:	83 c4 0c             	add    esp,0xc
c00225da:	c3                   	ret    
c00225db:	90                   	nop

c00225dc <SSE::close(int, int, void*)>:
c00225dc:	83 ec 0c             	sub    esp,0xc
c00225df:	e8 53 10 00 00       	call   c0023637 <sseClose>
c00225e4:	b8 00 00 00 00       	mov    eax,0x0
c00225e9:	83 c4 0c             	add    esp,0xc
c00225ec:	c3                   	ret    
c00225ed:	90                   	nop

c00225ee <SSE::available()>:
c00225ee:	83 ec 1c             	sub    esp,0x1c
c00225f1:	e8 0a 10 00 00       	call   c0023600 <sseDetect>
c00225f6:	85 c0                	test   eax,eax
c00225f8:	0f 95 c0             	setne  al
c00225fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00225ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022603:	83 c4 1c             	add    esp,0x1c
c0022606:	c3                   	ret    
c0022607:	90                   	nop

c0022608 <SSE::save(void*)>:
c0022608:	83 ec 0c             	sub    esp,0xc
c002260b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002260f:	83 ec 0c             	sub    esp,0xc
c0022612:	50                   	push   eax
c0022613:	e8 03 10 00 00       	call   c002361b <sseSave>
c0022618:	83 c4 10             	add    esp,0x10
c002261b:	90                   	nop
c002261c:	83 c4 0c             	add    esp,0xc
c002261f:	c3                   	ret    

c0022620 <SSE::load(void*)>:
c0022620:	83 ec 0c             	sub    esp,0xc
c0022623:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022627:	83 ec 0c             	sub    esp,0xc
c002262a:	50                   	push   eax
c002262b:	e8 f1 0f 00 00       	call   c0023621 <sseLoad>
c0022630:	83 c4 10             	add    esp,0x10
c0022633:	90                   	nop
c0022634:	83 c4 0c             	add    esp,0xc
c0022637:	c3                   	ret    

c0022638 <SSE::SSE()>:
c0022638:	83 ec 0c             	sub    esp,0xc
c002263b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002263f:	83 ec 08             	sub    esp,0x8
c0022642:	68 80 96 02 c0       	push   0xc0029680
c0022647:	50                   	push   eax
c0022648:	e8 cf 18 ff ff       	call   c0013f1c <FPU::FPU(char const*)>
c002264d:	83 c4 10             	add    esp,0x10
c0022650:	ba 90 96 02 c0       	mov    edx,0xc0029690
c0022655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022659:	89 10                	mov    DWORD PTR [eax],edx
c002265b:	90                   	nop
c002265c:	83 c4 0c             	add    esp,0xc
c002265f:	c3                   	ret    

c0022660 <x87::open(int, int, void*)>:
c0022660:	83 ec 0c             	sub    esp,0xc
c0022663:	e8 04 10 00 00       	call   c002366c <x87Init>
c0022668:	b8 00 00 00 00       	mov    eax,0x0
c002266d:	83 c4 0c             	add    esp,0xc
c0022670:	c3                   	ret    
c0022671:	90                   	nop

c0022672 <x87::close(int, int, void*)>:
c0022672:	83 ec 0c             	sub    esp,0xc
c0022675:	e8 0c 10 00 00       	call   c0023686 <x87Close>
c002267a:	b8 00 00 00 00       	mov    eax,0x0
c002267f:	83 c4 0c             	add    esp,0xc
c0022682:	c3                   	ret    
c0022683:	90                   	nop

c0022684 <x87::available()>:
c0022684:	83 ec 0c             	sub    esp,0xc
c0022687:	e8 ba 0f 00 00       	call   c0023646 <x87Detect>
c002268c:	85 c0                	test   eax,eax
c002268e:	0f 95 c0             	setne  al
c0022691:	83 c4 0c             	add    esp,0xc
c0022694:	c3                   	ret    
c0022695:	90                   	nop

c0022696 <x87::save(void*)>:
c0022696:	83 ec 0c             	sub    esp,0xc
c0022699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002269d:	83 ec 0c             	sub    esp,0xc
c00226a0:	50                   	push   eax
c00226a1:	e8 bb 0f 00 00       	call   c0023661 <x87Save>
c00226a6:	83 c4 10             	add    esp,0x10
c00226a9:	90                   	nop
c00226aa:	83 c4 0c             	add    esp,0xc
c00226ad:	c3                   	ret    

c00226ae <x87::load(void*)>:
c00226ae:	83 ec 0c             	sub    esp,0xc
c00226b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226b5:	83 ec 0c             	sub    esp,0xc
c00226b8:	50                   	push   eax
c00226b9:	e8 a9 0f 00 00       	call   c0023667 <x87Load>
c00226be:	83 c4 10             	add    esp,0x10
c00226c1:	90                   	nop
c00226c2:	83 c4 0c             	add    esp,0xc
c00226c5:	c3                   	ret    

c00226c6 <x87::x87()>:
c00226c6:	83 ec 0c             	sub    esp,0xc
c00226c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226cd:	83 ec 08             	sub    esp,0x8
c00226d0:	68 c0 96 02 c0       	push   0xc00296c0
c00226d5:	50                   	push   eax
c00226d6:	e8 41 18 ff ff       	call   c0013f1c <FPU::FPU(char const*)>
c00226db:	83 c4 10             	add    esp,0x10
c00226de:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c00226e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e7:	89 10                	mov    DWORD PTR [eax],edx
c00226e9:	90                   	nop
c00226ea:	83 c4 0c             	add    esp,0xc
c00226ed:	c3                   	ret    

c00226ee <APIC::disable()>:
c00226ee:	90                   	nop
c00226ef:	c3                   	ret    

c00226f0 <APIC::close(int, int, void*)>:
c00226f0:	55                   	push   ebp
c00226f1:	89 e5                	mov    ebp,esp
c00226f3:	83 ec 08             	sub    esp,0x8
c00226f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00226fb:	83 c0 3c             	add    eax,0x3c
c00226fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0022700:	83 ec 0c             	sub    esp,0xc
c0022703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022706:	ff d0                	call   eax
c0022708:	83 c4 10             	add    esp,0x10
c002270b:	b8 00 00 00 00       	mov    eax,0x0
c0022710:	c9                   	leave  
c0022711:	c3                   	ret    

c0022712 <IOAPIC::close(int, int, void*)>:
c0022712:	b8 00 00 00 00       	mov    eax,0x0
c0022717:	c3                   	ret    

c0022718 <APIC::io_wait()>:
c0022718:	eb 00                	jmp    c002271a <APIC::io_wait()+0x2>
c002271a:	eb 00                	jmp    c002271c <APIC::io_wait()+0x4>
c002271c:	90                   	nop
c002271d:	c3                   	ret    

c002271e <APIC::getBase()>:
c002271e:	55                   	push   ebp
c002271f:	89 e5                	mov    ebp,esp
c0022721:	83 ec 18             	sub    esp,0x18
c0022724:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0022729:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002272f:	83 e0 08             	and    eax,0x8
c0022732:	84 c0                	test   al,al
c0022734:	75 07                	jne    c002273d <APIC::getBase()+0x1f>
c0022736:	b8 00 00 00 00       	mov    eax,0x0
c002273b:	eb 21                	jmp    c002275e <APIC::getBase()+0x40>
c002273d:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0022742:	83 ec 08             	sub    esp,0x8
c0022745:	6a 1b                	push   0x1b
c0022747:	50                   	push   eax
c0022748:	e8 27 c3 fe ff       	call   c000ea74 <Computer::rdmsr(unsigned int)>
c002274d:	83 c4 10             	add    esp,0x10
c0022750:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022753:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022756:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022759:	25 00 f0 ff ff       	and    eax,0xfffff000
c002275e:	c9                   	leave  
c002275f:	c3                   	ret    

c0022760 <APIC::eoi(unsigned char)>:
c0022760:	55                   	push   ebp
c0022761:	89 e5                	mov    ebp,esp
c0022763:	83 ec 28             	sub    esp,0x28
c0022766:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022769:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002276c:	83 ec 0c             	sub    esp,0xc
c002276f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022772:	e8 a7 ff ff ff       	call   c002271e <APIC::getBase()>
c0022777:	83 c4 10             	add    esp,0x10
c002277a:	05 b0 00 00 00       	add    eax,0xb0
c002277f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022782:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022785:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002278b:	90                   	nop
c002278c:	c9                   	leave  
c002278d:	c3                   	ret    

c002278e <APIC::open(int, int, void*)>:
c002278e:	55                   	push   ebp
c002278f:	89 e5                	mov    ebp,esp
c0022791:	57                   	push   edi
c0022792:	56                   	push   esi
c0022793:	53                   	push   ebx
c0022794:	83 ec 2c             	sub    esp,0x2c
c0022797:	83 ec 0c             	sub    esp,0xc
c002279a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002279d:	e8 7c ff ff ff       	call   c002271e <APIC::getBase()>
c00227a2:	83 c4 10             	add    esp,0x10
c00227a5:	89 c2                	mov    edx,eax
c00227a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00227b0:	0f b6 f8             	movzx  edi,al
c00227b3:	89 d0                	mov    eax,edx
c00227b5:	ba 00 00 00 00       	mov    edx,0x0
c00227ba:	89 c1                	mov    ecx,eax
c00227bc:	80 e5 ff             	and    ch,0xff
c00227bf:	89 cb                	mov    ebx,ecx
c00227c1:	0f b6 f2             	movzx  esi,dl
c00227c4:	89 d8                	mov    eax,ebx
c00227c6:	89 f2                	mov    edx,esi
c00227c8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00227cb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00227ce:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00227d2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00227d6:	83 e0 00             	and    eax,0x0
c00227d9:	09 d0                	or     eax,edx
c00227db:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00227df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227e2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00227e8:	8d 50 01             	lea    edx,[eax+0x1]
c00227eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00227ee:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00227f4:	0f b6 d0             	movzx  edx,al
c00227f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227fa:	83 c2 08             	add    edx,0x8
c00227fd:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022801:	0f b6 c9             	movzx  ecx,cl
c0022804:	81 c9 00 00 01 00    	or     ecx,0x10000
c002280a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022814:	e8 05 ff ff ff       	call   c002271e <APIC::getBase()>
c0022819:	83 c4 10             	add    esp,0x10
c002281c:	05 f0 00 00 00       	add    eax,0xf0
c0022821:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022824:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022827:	8b 00                	mov    eax,DWORD PTR [eax]
c0022829:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002282c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0022833:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002283a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002283d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022840:	89 10                	mov    DWORD PTR [eax],edx
c0022842:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022849:	a1 50 b2 02 c0       	mov    eax,ds:0xc002b250
c002284e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0022851:	7d 7c                	jge    c00228cf <APIC::open(int, int, void*)+0x141>
c0022853:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022856:	8b 04 85 60 b2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4da0]
c002285d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0022860:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022863:	8b 04 85 60 b2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4da0]
c002286a:	c1 e8 08             	shr    eax,0x8
c002286d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0022871:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022874:	8b 04 85 60 b2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4da0]
c002287b:	c1 e8 18             	shr    eax,0x18
c002287e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0022881:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0022885:	75 40                	jne    c00228c7 <APIC::open(int, int, void*)+0x139>
c0022887:	83 ec 0c             	sub    esp,0xc
c002288a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002288d:	e8 8c fe ff ff       	call   c002271e <APIC::getBase()>
c0022892:	83 c4 10             	add    esp,0x10
c0022895:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0022899:	75 07                	jne    c00228a2 <APIC::open(int, int, void*)+0x114>
c002289b:	ba 60 03 00 00       	mov    edx,0x360
c00228a0:	eb 05                	jmp    c00228a7 <APIC::open(int, int, void*)+0x119>
c00228a2:	ba 50 03 00 00       	mov    edx,0x350
c00228a7:	01 d0                	add    eax,edx
c00228a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00228ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00228af:	8b 00                	mov    eax,DWORD PTR [eax]
c00228b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00228b4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00228bb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00228bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00228c2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00228c5:	89 10                	mov    DWORD PTR [eax],edx
c00228c7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00228ca:	e9 7a ff ff ff       	jmp    c0022849 <APIC::open(int, int, void*)+0xbb>
c00228cf:	b8 00 00 00 00       	mov    eax,0x0
c00228d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00228d7:	5b                   	pop    ebx
c00228d8:	5e                   	pop    esi
c00228d9:	5f                   	pop    edi
c00228da:	5d                   	pop    ebp
c00228db:	c3                   	ret    

c00228dc <IOAPIC::IOAPIC()>:
c00228dc:	83 ec 0c             	sub    esp,0xc
c00228df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e3:	83 ec 08             	sub    esp,0x8
c00228e6:	68 00 97 02 c0       	push   0xc0029700
c00228eb:	50                   	push   eax
c00228ec:	e8 2d 13 ff ff       	call   c0013c1e <Device::Device(char const*)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	ba 28 98 02 c0       	mov    edx,0xc0029828
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	89 10                	mov    DWORD PTR [eax],edx
c00228ff:	90                   	nop
c0022900:	83 c4 0c             	add    esp,0xc
c0022903:	c3                   	ret    

c0022904 <APIC::APIC()>:
c0022904:	53                   	push   ebx
c0022905:	83 ec 18             	sub    esp,0x18
c0022908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002290c:	83 ec 08             	sub    esp,0x8
c002290f:	68 08 97 02 c0       	push   0xc0029708
c0022914:	50                   	push   eax
c0022915:	e8 5c 1a ff ff       	call   c0014376 <InterruptController::InterruptController(char const*)>
c002291a:	83 c4 10             	add    esp,0x10
c002291d:	ba e0 97 02 c0       	mov    edx,0xc00297e0
c0022922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022926:	89 10                	mov    DWORD PTR [eax],edx
c0022928:	a0 c0 cc 02 c0       	mov    al,ds:0xc002ccc0
c002292d:	83 f0 01             	xor    eax,0x1
c0022930:	84 c0                	test   al,al
c0022932:	0f 84 a1 00 00 00    	je     c00229d9 <APIC::APIC()+0xd5>
c0022938:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002293d:	a0 00 b3 02 c0       	mov    al,ds:0xc002b300
c0022942:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022946:	0f 83 86 00 00 00    	jae    c00229d2 <APIC::APIC()+0xce>
c002294c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0022954:	83 ec 0c             	sub    esp,0xc
c0022957:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002295b:	e8 6c cb fe ff       	call   c000f4cc <malloc>
c0022960:	83 c4 10             	add    esp,0x10
c0022963:	89 c3                	mov    ebx,eax
c0022965:	83 ec 0c             	sub    esp,0xc
c0022968:	53                   	push   ebx
c0022969:	e8 6e ff ff ff       	call   c00228dc <IOAPIC::IOAPIC()>
c002296e:	83 c4 10             	add    esp,0x10
c0022971:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022975:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002297a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002297e:	89 14 85 a0 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3360],edx
c0022985:	a1 80 cc 02 c0       	mov    eax,ds:0xc002cc80
c002298a:	40                   	inc    eax
c002298b:	a3 80 cc 02 c0       	mov    ds:0xc002cc80,eax
c0022990:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c0022995:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002299b:	83 ec 08             	sub    esp,0x8
c002299e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00229a2:	50                   	push   eax
c00229a3:	e8 86 10 ff ff       	call   c0013a2e <Device::addChild(Device*)>
c00229a8:	83 c4 10             	add    esp,0x10
c00229ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229af:	8b 00                	mov    eax,DWORD PTR [eax]
c00229b1:	83 c0 08             	add    eax,0x8
c00229b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229b6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00229bb:	6a 00                	push   0x0
c00229bd:	6a 00                	push   0x0
c00229bf:	52                   	push   edx
c00229c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c4:	ff d0                	call   eax
c00229c6:	83 c4 10             	add    esp,0x10
c00229c9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00229cd:	e9 6b ff ff ff       	jmp    c002293d <APIC::APIC()+0x39>
c00229d2:	c6 05 c0 cc 02 c0 01 	mov    BYTE PTR ds:0xc002ccc0,0x1
c00229d9:	90                   	nop
c00229da:	83 c4 18             	add    esp,0x18
c00229dd:	5b                   	pop    ebx
c00229de:	c3                   	ret    
c00229df:	90                   	nop

c00229e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00229e0:	55                   	push   ebp
c00229e1:	89 e5                	mov    ebp,esp
c00229e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00229ec:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00229ef:	72 1d                	jb     c0022a0e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00229f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00229fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229fd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022a03:	01 d0                	add    eax,edx
c0022a05:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022a08:	73 04                	jae    c0022a0e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022a0a:	b0 01                	mov    al,0x1
c0022a0c:	eb 02                	jmp    c0022a10 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022a0e:	b0 00                	mov    al,0x0
c0022a10:	5d                   	pop    ebp
c0022a11:	c3                   	ret    

c0022a12 <IOAPIC::read(int)>:
c0022a12:	55                   	push   ebp
c0022a13:	89 e5                	mov    ebp,esp
c0022a15:	83 ec 10             	sub    esp,0x10
c0022a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a1b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022a21:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022a24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a27:	0f b6 d0             	movzx  edx,al
c0022a2a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022a2d:	89 10                	mov    DWORD PTR [eax],edx
c0022a2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022a32:	83 c0 10             	add    eax,0x10
c0022a35:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a37:	c9                   	leave  
c0022a38:	c3                   	ret    
c0022a39:	90                   	nop

c0022a3a <IOAPIC::open(int, int, void*)>:
c0022a3a:	55                   	push   ebp
c0022a3b:	89 e5                	mov    ebp,esp
c0022a3d:	57                   	push   edi
c0022a3e:	56                   	push   esi
c0022a3f:	53                   	push   ebx
c0022a40:	83 ec 0c             	sub    esp,0xc
c0022a43:	83 ec 0c             	sub    esp,0xc
c0022a46:	68 33 97 02 c0       	push   0xc0029733
c0022a4b:	e8 ef fb fe ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0022a50:	83 c4 10             	add    esp,0x10
c0022a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022a59:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022a68:	8b 14 85 40 b3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4cc0]
c0022a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a72:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022a81:	8b 14 85 c0 b3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4c40]
c0022a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a8b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a94:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a9d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022aa3:	0f b6 f8             	movzx  edi,al
c0022aa6:	89 d0                	mov    eax,edx
c0022aa8:	ba 00 00 00 00       	mov    edx,0x0
c0022aad:	89 c1                	mov    ecx,eax
c0022aaf:	80 e5 ff             	and    ch,0xff
c0022ab2:	89 cb                	mov    ebx,ecx
c0022ab4:	0f b6 f2             	movzx  esi,dl
c0022ab7:	89 d8                	mov    eax,ebx
c0022ab9:	89 f2                	mov    edx,esi
c0022abb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022abe:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022ac1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022ac5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022ac9:	83 e0 00             	and    eax,0x0
c0022acc:	09 d0                	or     eax,edx
c0022ace:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ad5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022adb:	8d 50 01             	lea    edx,[eax+0x1]
c0022ade:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022ae1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022ae7:	0f b6 d0             	movzx  edx,al
c0022aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022aed:	83 c2 08             	add    edx,0x8
c0022af0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022af4:	0f b6 c9             	movzx  ecx,cl
c0022af7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022afd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022b01:	83 ec 08             	sub    esp,0x8
c0022b04:	6a 01                	push   0x1
c0022b06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b09:	e8 04 ff ff ff       	call   c0022a12 <IOAPIC::read(int)>
c0022b0e:	83 c4 10             	add    esp,0x10
c0022b11:	c1 f8 10             	sar    eax,0x10
c0022b14:	0f b6 c0             	movzx  eax,al
c0022b17:	8d 50 01             	lea    edx,[eax+0x1]
c0022b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b1d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022b23:	b8 00 00 00 00       	mov    eax,0x0
c0022b28:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022b2b:	5b                   	pop    ebx
c0022b2c:	5e                   	pop    esi
c0022b2d:	5f                   	pop    edi
c0022b2e:	5d                   	pop    ebp
c0022b2f:	c3                   	ret    

c0022b30 <IOAPIC::write(int, int)>:
c0022b30:	55                   	push   ebp
c0022b31:	89 e5                	mov    ebp,esp
c0022b33:	83 ec 10             	sub    esp,0x10
c0022b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b3f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022b42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b45:	0f b6 d0             	movzx  edx,al
c0022b48:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b4b:	89 10                	mov    DWORD PTR [eax],edx
c0022b4d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b50:	8d 50 10             	lea    edx,[eax+0x10]
c0022b53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022b56:	89 02                	mov    DWORD PTR [edx],eax
c0022b58:	90                   	nop
c0022b59:	c9                   	leave  
c0022b5a:	c3                   	ret    
c0022b5b:	90                   	nop

c0022b5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022b5c:	55                   	push   ebp
c0022b5d:	89 e5                	mov    ebp,esp
c0022b5f:	53                   	push   ebx
c0022b60:	83 ec 2c             	sub    esp,0x2c
c0022b63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b66:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022b69:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022b6c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022b6f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022b72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022b75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022b78:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022b7b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022b7e:	88 d8                	mov    al,bl
c0022b80:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022b83:	88 c8                	mov    al,cl
c0022b85:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022b88:	88 d0                	mov    al,dl
c0022b8a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022b8d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022b91:	83 c0 08             	add    eax,0x8
c0022b94:	01 c0                	add    eax,eax
c0022b96:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022b99:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022b9d:	83 c0 08             	add    eax,0x8
c0022ba0:	01 c0                	add    eax,eax
c0022ba2:	40                   	inc    eax
c0022ba3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022ba6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022ba9:	50                   	push   eax
c0022baa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bad:	e8 60 fe ff ff       	call   c0022a12 <IOAPIC::read(int)>
c0022bb2:	83 c4 08             	add    esp,0x8
c0022bb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022bb8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022bbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022bc2:	c1 e0 18             	shl    eax,0x18
c0022bc5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022bc8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022bcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022bce:	52                   	push   edx
c0022bcf:	50                   	push   eax
c0022bd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bd3:	e8 58 ff ff ff       	call   c0022b30 <IOAPIC::write(int, int)>
c0022bd8:	83 c4 0c             	add    esp,0xc
c0022bdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022bde:	50                   	push   eax
c0022bdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022be2:	e8 2b fe ff ff       	call   c0022a12 <IOAPIC::read(int)>
c0022be7:	83 c4 08             	add    esp,0x8
c0022bea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022bed:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022bf4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022bfb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0022c02:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022c06:	74 09                	je     c0022c11 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022c08:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0022c0f:	eb 07                	jmp    c0022c18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022c11:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022c18:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022c1c:	74 09                	je     c0022c27 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022c1e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022c25:	eb 07                	jmp    c0022c2e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022c27:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022c2e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022c35:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022c39:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022c3c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022c3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022c42:	52                   	push   edx
c0022c43:	50                   	push   eax
c0022c44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c47:	e8 e4 fe ff ff       	call   c0022b30 <IOAPIC::write(int, int)>
c0022c4c:	83 c4 0c             	add    esp,0xc
c0022c4f:	90                   	nop
c0022c50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022c53:	c9                   	leave  
c0022c54:	c3                   	ret    
c0022c55:	90                   	nop

c0022c56 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022c56:	55                   	push   ebp
c0022c57:	89 e5                	mov    ebp,esp
c0022c59:	57                   	push   edi
c0022c5a:	56                   	push   esi
c0022c5b:	53                   	push   ebx
c0022c5c:	83 ec 2c             	sub    esp,0x2c
c0022c5f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022c62:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022c65:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022c69:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022c6d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022c71:	74 5a                	je     c0022ccd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022c73:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022c77:	7f 44                	jg     c0022cbd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022c79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c7c:	05 80 9c 02 c0       	add    eax,0xc0029c80
c0022c81:	8a 00                	mov    al,BYTE PTR [eax]
c0022c83:	0f b6 c0             	movzx  eax,al
c0022c86:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022c89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c8c:	66 8b 84 00 e0 b2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4d20]
c0022c94:	0f b7 c0             	movzx  eax,ax
c0022c97:	83 e0 02             	and    eax,0x2
c0022c9a:	85 c0                	test   eax,eax
c0022c9c:	74 04                	je     c0022ca2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022c9e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022ca5:	66 8b 84 00 e0 b2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4d20]
c0022cad:	0f b7 c0             	movzx  eax,ax
c0022cb0:	83 e0 08             	and    eax,0x8
c0022cb3:	85 c0                	test   eax,eax
c0022cb5:	74 16                	je     c0022ccd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022cb7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022cbb:	eb 10                	jmp    c0022ccd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022cbd:	83 ec 0c             	sub    esp,0xc
c0022cc0:	68 44 97 02 c0       	push   0xc0029744
c0022cc5:	e8 39 61 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0022cca:	83 c4 10             	add    esp,0x10
c0022ccd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022cd1:	a1 80 cc 02 c0       	mov    eax,ds:0xc002cc80
c0022cd6:	83 ec 08             	sub    esp,0x8
c0022cd9:	50                   	push   eax
c0022cda:	68 7c 97 02 c0       	push   0xc002977c
c0022cdf:	e8 5b f9 fe ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0022ce4:	83 c4 10             	add    esp,0x10
c0022ce7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0022cee:	a1 80 cc 02 c0       	mov    eax,ds:0xc002cc80
c0022cf3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022cf6:	7d 67                	jge    c0022d5f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022cf8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022cfb:	8b 04 85 a0 cc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3360]
c0022d02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022d05:	83 ec 08             	sub    esp,0x8
c0022d08:	52                   	push   edx
c0022d09:	50                   	push   eax
c0022d0a:	e8 d1 fc ff ff       	call   c00229e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022d0f:	83 c4 10             	add    esp,0x10
c0022d12:	84 c0                	test   al,al
c0022d14:	74 44                	je     c0022d5a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022d16:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022d19:	8b 1c 85 a0 cc 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd3360]
c0022d20:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022d24:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022d27:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022d2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022d2e:	83 c0 20             	add    eax,0x20
c0022d31:	0f b6 f0             	movzx  esi,al
c0022d34:	b8 00 00 00 00       	mov    eax,0x0
c0022d39:	99                   	cdq    
c0022d3a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022d3d:	0f b6 c9             	movzx  ecx,cl
c0022d40:	83 ec 04             	sub    esp,0x4
c0022d43:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022d46:	57                   	push   edi
c0022d47:	56                   	push   esi
c0022d48:	52                   	push   edx
c0022d49:	50                   	push   eax
c0022d4a:	51                   	push   ecx
c0022d4b:	53                   	push   ebx
c0022d4c:	e8 0b fe ff ff       	call   c0022b5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022d51:	83 c4 20             	add    esp,0x20
c0022d54:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022d58:	eb 05                	jmp    c0022d5f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022d5a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022d5d:	eb 8f                	jmp    c0022cee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022d5f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022d62:	83 f0 01             	xor    eax,0x1
c0022d65:	84 c0                	test   al,al
c0022d67:	74 10                	je     c0022d79 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022d69:	83 ec 0c             	sub    esp,0xc
c0022d6c:	68 93 97 02 c0       	push   0xc0029793
c0022d71:	e8 8d 60 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0022d76:	83 c4 10             	add    esp,0x10
c0022d79:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022d7d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022d84:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022d88:	7f 65                	jg     c0022def <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022d8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022d90:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022d97:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022d9a:	01 ca                	add    edx,ecx
c0022d9c:	83 c2 54             	add    edx,0x54
c0022d9f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022da3:	85 c0                	test   eax,eax
c0022da5:	75 43                	jne    c0022dea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022daa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022dad:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022db4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022db7:	01 ca                	add    edx,ecx
c0022db9:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022dbc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022dbf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022dc6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022dc9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022dd0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022dd3:	01 ca                	add    edx,ecx
c0022dd5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022ddb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022dde:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022de2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022de5:	83 e8 20             	sub    eax,0x20
c0022de8:	eb 1a                	jmp    c0022e04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022dea:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022ded:	eb 95                	jmp    c0022d84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0022def:	83 ec 0c             	sub    esp,0xc
c0022df2:	68 a0 97 02 c0       	push   0xc00297a0
c0022df7:	e8 07 60 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022e04:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022e07:	5b                   	pop    ebx
c0022e08:	5e                   	pop    esi
c0022e09:	5f                   	pop    edi
c0022e0a:	5d                   	pop    ebp
c0022e0b:	c3                   	ret    

c0022e0c <PIC::disable()>:
c0022e0c:	55                   	push   ebp
c0022e0d:	89 e5                	mov    ebp,esp
c0022e0f:	83 ec 10             	sub    esp,0x10
c0022e12:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022e18:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022e1c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022e1f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022e23:	ee                   	out    dx,al
c0022e24:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022e2a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022e2e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022e31:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022e35:	ee                   	out    dx,al
c0022e36:	90                   	nop
c0022e37:	c9                   	leave  
c0022e38:	c3                   	ret    
c0022e39:	90                   	nop

c0022e3a <PIC::close(int, int, void*)>:
c0022e3a:	55                   	push   ebp
c0022e3b:	89 e5                	mov    ebp,esp
c0022e3d:	83 ec 08             	sub    esp,0x8
c0022e40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e45:	83 c0 3c             	add    eax,0x3c
c0022e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e4a:	83 ec 0c             	sub    esp,0xc
c0022e4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022e50:	ff d0                	call   eax
c0022e52:	83 c4 10             	add    esp,0x10
c0022e55:	b8 00 00 00 00       	mov    eax,0x0
c0022e5a:	c9                   	leave  
c0022e5b:	c3                   	ret    

c0022e5c <PIC::PIC()>:
c0022e5c:	83 ec 0c             	sub    esp,0xc
c0022e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e63:	83 ec 08             	sub    esp,0x8
c0022e66:	68 4c 98 02 c0       	push   0xc002984c
c0022e6b:	50                   	push   eax
c0022e6c:	e8 05 15 ff ff       	call   c0014376 <InterruptController::InterruptController(char const*)>
c0022e71:	83 c4 10             	add    esp,0x10
c0022e74:	ba 78 98 02 c0       	mov    edx,0xc0029878
c0022e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7d:	89 10                	mov    DWORD PTR [eax],edx
c0022e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022e89:	0f b6 d0             	movzx  edx,al
c0022e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e90:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ea1:	0f b6 d0             	movzx  edx,al
c0022ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0022eba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ebe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ec4:	0f b6 d0             	movzx  edx,al
c0022ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022ecf:	83 e1 3f             	and    ecx,0x3f
c0022ed2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ee0:	0f b6 d0             	movzx  edx,al
c0022ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0022eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ef8:	0f b6 d0             	movzx  edx,al
c0022efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f0e:	8d 50 01             	lea    edx,[eax+0x1]
c0022f11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f15:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022f1b:	0f b6 d0             	movzx  edx,al
c0022f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f22:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022f26:	83 e1 3f             	and    ecx,0x3f
c0022f29:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022f2d:	90                   	nop
c0022f2e:	83 c4 0c             	add    esp,0xc
c0022f31:	c3                   	ret    

c0022f32 <PIC::ioWait()>:
c0022f32:	eb 00                	jmp    c0022f34 <PIC::ioWait()+0x2>
c0022f34:	eb 00                	jmp    c0022f36 <PIC::ioWait()+0x4>
c0022f36:	90                   	nop
c0022f37:	c3                   	ret    

c0022f38 <PIC::getIRQReg(int)>:
c0022f38:	55                   	push   ebp
c0022f39:	89 e5                	mov    ebp,esp
c0022f3b:	83 ec 10             	sub    esp,0x10
c0022f3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022f41:	0f b6 c0             	movzx  eax,al
c0022f44:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022f4a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022f4d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022f50:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022f54:	ee                   	out    dx,al
c0022f55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022f58:	0f b6 c0             	movzx  eax,al
c0022f5b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022f61:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022f64:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022f67:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022f6b:	ee                   	out    dx,al
c0022f6c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022f72:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022f76:	89 c2                	mov    edx,eax
c0022f78:	ec                   	in     al,dx
c0022f79:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022f7c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022f7f:	0f b6 c0             	movzx  eax,al
c0022f82:	c1 e0 08             	shl    eax,0x8
c0022f85:	89 c1                	mov    ecx,eax
c0022f87:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022f8d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022f91:	89 c2                	mov    edx,eax
c0022f93:	ec                   	in     al,dx
c0022f94:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022f97:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022f9a:	0f b6 c0             	movzx  eax,al
c0022f9d:	09 c8                	or     eax,ecx
c0022f9f:	c9                   	leave  
c0022fa0:	c3                   	ret    
c0022fa1:	90                   	nop

c0022fa2 <PIC::eoi(unsigned char)>:
c0022fa2:	55                   	push   ebp
c0022fa3:	89 e5                	mov    ebp,esp
c0022fa5:	83 ec 14             	sub    esp,0x14
c0022fa8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022fab:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022fae:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022fb2:	75 1e                	jne    c0022fd2 <PIC::eoi(unsigned char)+0x30>
c0022fb4:	6a 0b                	push   0xb
c0022fb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022fb9:	e8 7a ff ff ff       	call   c0022f38 <PIC::getIRQReg(int)>
c0022fbe:	83 c4 08             	add    esp,0x8
c0022fc1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022fc5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022fc9:	25 80 00 00 00       	and    eax,0x80
c0022fce:	85 c0                	test   eax,eax
c0022fd0:	74 5f                	je     c0023031 <PIC::eoi(unsigned char)+0x8f>
c0022fd2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022fd6:	75 2d                	jne    c0023005 <PIC::eoi(unsigned char)+0x63>
c0022fd8:	6a 0b                	push   0xb
c0022fda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022fdd:	e8 56 ff ff ff       	call   c0022f38 <PIC::getIRQReg(int)>
c0022fe2:	83 c4 08             	add    esp,0x8
c0022fe5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022fe9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022fec:	66 85 c0             	test   ax,ax
c0022fef:	78 14                	js     c0023005 <PIC::eoi(unsigned char)+0x63>
c0022ff1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022ff7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022ffb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022ffe:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023002:	ee                   	out    dx,al
c0023003:	eb 2d                	jmp    c0023032 <PIC::eoi(unsigned char)+0x90>
c0023005:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023009:	76 12                	jbe    c002301d <PIC::eoi(unsigned char)+0x7b>
c002300b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023011:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0023015:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023018:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002301c:	ee                   	out    dx,al
c002301d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023023:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023027:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002302a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002302e:	ee                   	out    dx,al
c002302f:	eb 01                	jmp    c0023032 <PIC::eoi(unsigned char)+0x90>
c0023031:	90                   	nop
c0023032:	c9                   	leave  
c0023033:	c3                   	ret    

c0023034 <PIC::remap()>:
c0023034:	55                   	push   ebp
c0023035:	89 e5                	mov    ebp,esp
c0023037:	83 ec 48             	sub    esp,0x48
c002303a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0023041:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023048:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002304e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0023051:	89 c2                	mov    edx,eax
c0023053:	ec                   	in     al,dx
c0023054:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023057:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002305a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002305d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0023063:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023066:	89 c2                	mov    edx,eax
c0023068:	ec                   	in     al,dx
c0023069:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002306c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002306f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0023072:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0023078:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002307c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002307f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0023082:	ee                   	out    dx,al
c0023083:	83 ec 0c             	sub    esp,0xc
c0023086:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023089:	e8 a4 fe ff ff       	call   c0022f32 <PIC::ioWait()>
c002308e:	83 c4 10             	add    esp,0x10
c0023091:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023097:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002309b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002309e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00230a1:	ee                   	out    dx,al
c00230a2:	83 ec 0c             	sub    esp,0xc
c00230a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230a8:	e8 85 fe ff ff       	call   c0022f32 <PIC::ioWait()>
c00230ad:	83 c4 10             	add    esp,0x10
c00230b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00230b3:	0f b6 c0             	movzx  eax,al
c00230b6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00230bc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00230bf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00230c2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00230c5:	ee                   	out    dx,al
c00230c6:	83 ec 0c             	sub    esp,0xc
c00230c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230cc:	e8 61 fe ff ff       	call   c0022f32 <PIC::ioWait()>
c00230d1:	83 c4 10             	add    esp,0x10
c00230d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00230d7:	0f b6 c0             	movzx  eax,al
c00230da:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00230e0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00230e3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00230e6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00230e9:	ee                   	out    dx,al
c00230ea:	83 ec 0c             	sub    esp,0xc
c00230ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230f0:	e8 3d fe ff ff       	call   c0022f32 <PIC::ioWait()>
c00230f5:	83 c4 10             	add    esp,0x10
c00230f8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00230fe:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0023102:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0023105:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0023108:	ee                   	out    dx,al
c0023109:	83 ec 0c             	sub    esp,0xc
c002310c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002310f:	e8 1e fe ff ff       	call   c0022f32 <PIC::ioWait()>
c0023114:	83 c4 10             	add    esp,0x10
c0023117:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002311d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0023121:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0023124:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023127:	ee                   	out    dx,al
c0023128:	83 ec 0c             	sub    esp,0xc
c002312b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002312e:	e8 ff fd ff ff       	call   c0022f32 <PIC::ioWait()>
c0023133:	83 c4 10             	add    esp,0x10
c0023136:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002313c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0023140:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0023143:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0023146:	ee                   	out    dx,al
c0023147:	83 ec 0c             	sub    esp,0xc
c002314a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002314d:	e8 e0 fd ff ff       	call   c0022f32 <PIC::ioWait()>
c0023152:	83 c4 10             	add    esp,0x10
c0023155:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002315b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002315f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0023162:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023165:	ee                   	out    dx,al
c0023166:	83 ec 0c             	sub    esp,0xc
c0023169:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002316c:	e8 c1 fd ff ff       	call   c0022f32 <PIC::ioWait()>
c0023171:	83 c4 10             	add    esp,0x10
c0023174:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0023178:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002317e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0023181:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0023184:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023187:	ee                   	out    dx,al
c0023188:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002318c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0023192:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0023195:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0023198:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002319b:	ee                   	out    dx,al
c002319c:	90                   	nop
c002319d:	c9                   	leave  
c002319e:	c3                   	ret    
c002319f:	90                   	nop

c00231a0 <PIC::open(int, int, void*)>:
c00231a0:	55                   	push   ebp
c00231a1:	89 e5                	mov    ebp,esp
c00231a3:	83 ec 18             	sub    esp,0x18
c00231a6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00231ac:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00231b0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00231b3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00231b7:	ee                   	out    dx,al
c00231b8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00231be:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00231c2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00231c5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00231c9:	ee                   	out    dx,al
c00231ca:	83 ec 0c             	sub    esp,0xc
c00231cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231d0:	e8 5f fe ff ff       	call   c0023034 <PIC::remap()>
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	b8 00 00 00 00       	mov    eax,0x0
c00231dd:	c9                   	leave  
c00231de:	c3                   	ret    
c00231df:	90                   	nop

c00231e0 <APICTimer::close(int, int, void*)>:
c00231e0:	b8 00 00 00 00       	mov    eax,0x0
c00231e5:	c3                   	ret    

c00231e6 <apicTimerHandler(regs*, void*)>:
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00231ef:	99                   	cdq    
c00231f0:	52                   	push   edx
c00231f1:	50                   	push   eax
c00231f2:	6a 00                	push   0x0
c00231f4:	68 00 ca 9a 3b       	push   0x3b9aca00
c00231f9:	e8 7e 07 00 00       	call   c002397c <__udivdi3>
c00231fe:	83 c4 10             	add    esp,0x10
c0023201:	83 ec 08             	sub    esp,0x8
c0023204:	52                   	push   edx
c0023205:	50                   	push   eax
c0023206:	e8 6c 2f ff ff       	call   c0016177 <timerHandler(unsigned long long)>
c002320b:	83 c4 10             	add    esp,0x10
c002320e:	90                   	nop
c002320f:	83 c4 0c             	add    esp,0xc
c0023212:	c3                   	ret    
c0023213:	90                   	nop

c0023214 <APICTimer::write(int)>:
c0023214:	53                   	push   ebx
c0023215:	83 ec 28             	sub    esp,0x28
c0023218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002321c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023220:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023226:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c002322b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023231:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023237:	83 ec 0c             	sub    esp,0xc
c002323a:	50                   	push   eax
c002323b:	e8 de f4 ff ff       	call   c002271e <APIC::getBase()>
c0023240:	83 c4 10             	add    esp,0x10
c0023243:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023247:	a1 10 b0 02 c0       	mov    eax,ds:0xc002b010
c002324c:	8b 15 14 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b014
c0023252:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023256:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002325a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002325e:	05 e0 03 00 00       	add    eax,0x3e0
c0023263:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002326d:	05 80 03 00 00       	add    eax,0x380
c0023272:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0023278:	fb                   	sti    
c0023279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023281:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0023286:	83 d2 00             	adc    edx,0x0
c0023289:	89 c1                	mov    ecx,eax
c002328b:	89 d3                	mov    ebx,edx
c002328d:	a1 10 b0 02 c0       	mov    eax,ds:0xc002b010
c0023292:	8b 15 14 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b014
c0023298:	39 c8                	cmp    eax,ecx
c002329a:	89 d0                	mov    eax,edx
c002329c:	19 d8                	sbb    eax,ebx
c002329e:	73 02                	jae    c00232a2 <APICTimer::write(int)+0x8e>
c00232a0:	eb d7                	jmp    c0023279 <APICTimer::write(int)+0x65>
c00232a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232a6:	05 20 03 00 00       	add    eax,0x320
c00232ab:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00232b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232b5:	05 90 03 00 00       	add    eax,0x390
c00232ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00232bc:	f7 d0                	not    eax
c00232be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00232c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00232c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232ca:	ba 00 00 00 00       	mov    edx,0x0
c00232cf:	f7 f3                	div    ebx
c00232d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00232d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00232df:	0d 00 00 02 00       	or     eax,0x20000
c00232e4:	89 c2                	mov    edx,eax
c00232e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232ea:	05 20 03 00 00       	add    eax,0x320
c00232ef:	89 10                	mov    DWORD PTR [eax],edx
c00232f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232f5:	05 e0 03 00 00       	add    eax,0x3e0
c00232fa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023304:	05 80 03 00 00       	add    eax,0x380
c0023309:	89 c2                	mov    edx,eax
c002330b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002330f:	89 02                	mov    DWORD PTR [edx],eax
c0023311:	90                   	nop
c0023312:	83 c4 28             	add    esp,0x28
c0023315:	5b                   	pop    ebx
c0023316:	c3                   	ret    
c0023317:	90                   	nop

c0023318 <APICTimer::open(int, int, void*)>:
c0023318:	57                   	push   edi
c0023319:	56                   	push   esi
c002331a:	53                   	push   ebx
c002331b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023321:	83 c0 24             	add    eax,0x24
c0023324:	8b 00                	mov    eax,DWORD PTR [eax]
c0023326:	83 ec 08             	sub    esp,0x8
c0023329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002332d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023331:	ff d0                	call   eax
c0023333:	83 c4 10             	add    esp,0x10
c0023336:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c002333b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023341:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023347:	83 ec 0c             	sub    esp,0xc
c002334a:	50                   	push   eax
c002334b:	e8 ce f3 ff ff       	call   c002271e <APIC::getBase()>
c0023350:	83 c4 10             	add    esp,0x10
c0023353:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0023359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023363:	0f b6 f8             	movzx  edi,al
c0023366:	89 d0                	mov    eax,edx
c0023368:	ba 00 00 00 00       	mov    edx,0x0
c002336d:	89 c1                	mov    ecx,eax
c002336f:	80 e5 ff             	and    ch,0xff
c0023372:	89 cb                	mov    ebx,ecx
c0023374:	0f b6 f2             	movzx  esi,dl
c0023377:	89 d8                	mov    eax,ebx
c0023379:	89 f2                	mov    edx,esi
c002337b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002337f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023382:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023386:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002338a:	83 e0 00             	and    eax,0x0
c002338d:	09 d0                	or     eax,edx
c002338f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023397:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002339d:	8d 50 01             	lea    edx,[eax+0x1]
c00233a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233a4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00233aa:	0f b6 d0             	movzx  edx,al
c00233ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b1:	83 c2 08             	add    edx,0x8
c00233b4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00233b8:	0f b6 c9             	movzx  ecx,cl
c00233bb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00233c1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00233c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00233cd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00233d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233db:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00233e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233e5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00233eb:	83 ec 0c             	sub    esp,0xc
c00233ee:	51                   	push   ecx
c00233ef:	6a 01                	push   0x1
c00233f1:	68 e6 31 02 c0       	push   0xc00231e6
c00233f6:	52                   	push   edx
c00233f7:	50                   	push   eax
c00233f8:	e8 b5 05 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233fd:	83 c4 20             	add    esp,0x20
c0023400:	89 c2                	mov    edx,eax
c0023402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023406:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002340c:	b8 00 00 00 00       	mov    eax,0x0
c0023411:	5b                   	pop    ebx
c0023412:	5e                   	pop    esi
c0023413:	5f                   	pop    edi
c0023414:	c3                   	ret    
c0023415:	90                   	nop

c0023416 <APICTimer::APICTimer()>:
c0023416:	83 ec 0c             	sub    esp,0xc
c0023419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341d:	83 ec 08             	sub    esp,0x8
c0023420:	68 b8 98 02 c0       	push   0xc00298b8
c0023425:	50                   	push   eax
c0023426:	e8 bd 2c ff ff       	call   c00160e8 <Timer::Timer(char const*)>
c002342b:	83 c4 10             	add    esp,0x10
c002342e:	ba cc 98 02 c0       	mov    edx,0xc00298cc
c0023433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023437:	89 10                	mov    DWORD PTR [eax],edx
c0023439:	90                   	nop
c002343a:	83 c4 0c             	add    esp,0xc
c002343d:	c3                   	ret    

c002343e <PIT::write(int)>:
c002343e:	83 ec 10             	sub    esp,0x10
c0023441:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023449:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002344f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023453:	a3 c4 cc 02 c0       	mov    ds:0xc002ccc4,eax
c0023458:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002345d:	99                   	cdq    
c002345e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0023462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023466:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002346d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0023472:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023476:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002347b:	ee                   	out    dx,al
c002347c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023480:	0f b6 c0             	movzx  eax,al
c0023483:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002348a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002348e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0023492:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023497:	ee                   	out    dx,al
c0023498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002349c:	c1 f8 08             	sar    eax,0x8
c002349f:	0f b6 c0             	movzx  eax,al
c00234a2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00234a9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00234ad:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00234b1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00234b6:	ee                   	out    dx,al
c00234b7:	90                   	nop
c00234b8:	83 c4 10             	add    esp,0x10
c00234bb:	c3                   	ret    

c00234bc <pitHandler(regs*, void*)>:
c00234bc:	83 ec 0c             	sub    esp,0xc
c00234bf:	a1 c4 cc 02 c0       	mov    eax,ds:0xc002ccc4
c00234c4:	99                   	cdq    
c00234c5:	52                   	push   edx
c00234c6:	50                   	push   eax
c00234c7:	6a 00                	push   0x0
c00234c9:	68 00 ca 9a 3b       	push   0x3b9aca00
c00234ce:	e8 a9 04 00 00       	call   c002397c <__udivdi3>
c00234d3:	83 c4 10             	add    esp,0x10
c00234d6:	83 ec 08             	sub    esp,0x8
c00234d9:	52                   	push   edx
c00234da:	50                   	push   eax
c00234db:	e8 97 2c ff ff       	call   c0016177 <timerHandler(unsigned long long)>
c00234e0:	83 c4 10             	add    esp,0x10
c00234e3:	90                   	nop
c00234e4:	83 c4 0c             	add    esp,0xc
c00234e7:	c3                   	ret    

c00234e8 <PIT::open(int, int, void*)>:
c00234e8:	83 ec 0c             	sub    esp,0xc
c00234eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00234f1:	83 c0 24             	add    eax,0x24
c00234f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234f6:	83 ec 08             	sub    esp,0x8
c00234f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023501:	ff d0                	call   eax
c0023503:	83 c4 10             	add    esp,0x10
c0023506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002350a:	83 ec 0c             	sub    esp,0xc
c002350d:	6a 00                	push   0x0
c002350f:	6a 01                	push   0x1
c0023511:	68 bc 34 02 c0       	push   0xc00234bc
c0023516:	6a 00                	push   0x0
c0023518:	50                   	push   eax
c0023519:	e8 94 04 ff ff       	call   c00139b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002351e:	83 c4 20             	add    esp,0x20
c0023521:	89 c2                	mov    edx,eax
c0023523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023527:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002352d:	b8 00 00 00 00       	mov    eax,0x0
c0023532:	83 c4 0c             	add    esp,0xc
c0023535:	c3                   	ret    

c0023536 <PIT::close(int, int, void*)>:
c0023536:	83 ec 0c             	sub    esp,0xc
c0023539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354b:	6a 01                	push   0x1
c002354d:	68 bc 34 02 c0       	push   0xc00234bc
c0023552:	6a 00                	push   0x0
c0023554:	50                   	push   eax
c0023555:	e8 96 04 ff ff       	call   c00139f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002355a:	83 c4 10             	add    esp,0x10
c002355d:	b8 00 00 00 00       	mov    eax,0x0
c0023562:	83 c4 0c             	add    esp,0xc
c0023565:	c3                   	ret    

c0023566 <PIT::PIT()>:
c0023566:	83 ec 0c             	sub    esp,0xc
c0023569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002356d:	83 ec 08             	sub    esp,0x8
c0023570:	68 f4 98 02 c0       	push   0xc00298f4
c0023575:	50                   	push   eax
c0023576:	e8 6d 2b ff ff       	call   c00160e8 <Timer::Timer(char const*)>
c002357b:	83 c4 10             	add    esp,0x10
c002357e:	ba 1c 99 02 c0       	mov    edx,0xc002991c
c0023583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023587:	89 10                	mov    DWORD PTR [eax],edx
c0023589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023593:	0f b6 d0             	movzx  edx,al
c0023596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00235a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00235ab:	0f b6 d0             	movzx  edx,al
c00235ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00235b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00235c1:	8d 50 01             	lea    edx,[eax+0x1]
c00235c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00235c8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00235ce:	0f b6 d0             	movzx  edx,al
c00235d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235d5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00235d9:	83 e1 3f             	and    ecx,0x3f
c00235dc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00235e0:	90                   	nop
c00235e1:	83 c4 0c             	add    esp,0xc
c00235e4:	c3                   	ret    
c00235e5:	66 90                	xchg   ax,ax
c00235e7:	66 90                	xchg   ax,ax
c00235e9:	66 90                	xchg   ax,ax
c00235eb:	66 90                	xchg   ax,ax
c00235ed:	66 90                	xchg   ax,ax
c00235ef:	90                   	nop

c00235f0 <avxDetect>:
c00235f0:	b8 00 00 00 00       	mov    eax,0x0
c00235f5:	c3                   	ret    

c00235f6 <avxSave>:
c00235f6:	c3                   	ret    

c00235f7 <avxLoad>:
c00235f7:	c3                   	ret    

c00235f8 <avxInit>:
c00235f8:	c3                   	ret    

c00235f9 <avxClose>:
c00235f9:	c3                   	ret    
c00235fa:	66 90                	xchg   ax,ax
c00235fc:	66 90                	xchg   ax,ax
c00235fe:	66 90                	xchg   ax,ax

c0023600 <sseDetect>:
c0023600:	b8 01 00 00 00       	mov    eax,0x1
c0023605:	0f a2                	cpuid  
c0023607:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002360d:	74 06                	je     c0023615 <sseDetect.noSSE>
c002360f:	b8 01 00 00 00       	mov    eax,0x1
c0023614:	c3                   	ret    

c0023615 <sseDetect.noSSE>:
c0023615:	b8 00 00 00 00       	mov    eax,0x0
c002361a:	c3                   	ret    

c002361b <sseSave>:
c002361b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023620:	c3                   	ret    

c0023621 <sseLoad>:
c0023621:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023626:	c3                   	ret    

c0023627 <sseInit>:
c0023627:	e8 40 00 00 00       	call   c002366c <x87Init>
c002362c:	0f 20 e0             	mov    eax,cr4
c002362f:	66 0d 00 06          	or     ax,0x600
c0023633:	0f 22 e0             	mov    cr4,eax
c0023636:	c3                   	ret    

c0023637 <sseClose>:
c0023637:	c3                   	ret    
c0023638:	66 90                	xchg   ax,ax
c002363a:	66 90                	xchg   ax,ax
c002363c:	66 90                	xchg   ax,ax
c002363e:	66 90                	xchg   ax,ax

c0023640 <value_37F>:
c0023640:	7f 03                	jg     c0023645 <value_37A+0x1>

c0023642 <value_37E>:
c0023642:	7e 03                	jle    c0023647 <x87Detect+0x1>

c0023644 <value_37A>:
c0023644:	7a 03                	jp     c0023649 <x87Detect+0x3>

c0023646 <x87Detect>:
c0023646:	b8 01 00 00 00       	mov    eax,0x1
c002364b:	0f a2                	cpuid  
c002364d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023653:	74 06                	je     c002365b <x87Detect.nox87>
c0023655:	b8 01 00 00 00       	mov    eax,0x1
c002365a:	c3                   	ret    

c002365b <x87Detect.nox87>:
c002365b:	b8 00 00 00 00       	mov    eax,0x0
c0023660:	c3                   	ret    

c0023661 <x87Save>:
c0023661:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023666:	c3                   	ret    

c0023667 <x87Load>:
c0023667:	dd 64 24 08          	frstor [esp+0x8]
c002366b:	c3                   	ret    

c002366c <x87Init>:
c002366c:	9b db e3             	finit  
c002366f:	0f 20 c0             	mov    eax,cr0
c0023672:	66 25 fb ff          	and    ax,0xfffb
c0023676:	66 0d 22 00          	or     ax,0x22
c002367a:	0f 22 c0             	mov    cr0,eax
c002367d:	0f 06                	clts   
c002367f:	d9 2d 44 36 02 c0    	fldcw  WORD PTR ds:0xc0023644
c0023685:	c3                   	ret    

c0023686 <x87Close>:
c0023686:	c3                   	ret    
c0023687:	90                   	nop

c0023688 <__do_global_ctors_aux>:
c0023688:	a1 e0 60 02 c0       	mov    eax,ds:0xc00260e0
c002368d:	83 f8 ff             	cmp    eax,0xffffffff
c0023690:	74 1a                	je     c00236ac <__do_global_ctors_aux+0x24>
c0023692:	55                   	push   ebp
c0023693:	89 e5                	mov    ebp,esp
c0023695:	53                   	push   ebx
c0023696:	52                   	push   edx
c0023697:	bb e0 60 02 c0       	mov    ebx,0xc00260e0
c002369c:	ff d0                	call   eax
c002369e:	83 eb 04             	sub    ebx,0x4
c00236a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236a3:	83 f8 ff             	cmp    eax,0xffffffff
c00236a6:	75 f4                	jne    c002369c <__do_global_ctors_aux+0x14>
c00236a8:	58                   	pop    eax
c00236a9:	5b                   	pop    ebx
c00236aa:	5d                   	pop    ebp
c00236ab:	c3                   	ret    
c00236ac:	c3                   	ret    
c00236ad:	66 90                	xchg   ax,ax
c00236af:	90                   	nop

c00236b0 <__divdi3>:
c00236b0:	55                   	push   ebp
c00236b1:	57                   	push   edi
c00236b2:	56                   	push   esi
c00236b3:	53                   	push   ebx
c00236b4:	83 ec 1c             	sub    esp,0x1c
c00236b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00236bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00236c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00236c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00236ce:	85 db                	test   ebx,ebx
c00236d0:	0f 88 8e 00 00 00    	js     c0023764 <__divdi3+0xb4>
c00236d6:	89 dd                	mov    ebp,ebx
c00236d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00236e0:	89 d3                	mov    ebx,edx
c00236e2:	85 d2                	test   edx,edx
c00236e4:	79 0d                	jns    c00236f3 <__divdi3+0x43>
c00236e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00236ea:	f7 d8                	neg    eax
c00236ec:	83 d2 00             	adc    edx,0x0
c00236ef:	f7 da                	neg    edx
c00236f1:	89 d3                	mov    ebx,edx
c00236f3:	89 c7                	mov    edi,eax
c00236f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00236f8:	85 db                	test   ebx,ebx
c00236fa:	75 48                	jne    c0023744 <__divdi3+0x94>
c00236fc:	39 ef                	cmp    edi,ebp
c00236fe:	76 24                	jbe    c0023724 <__divdi3+0x74>
c0023700:	89 ea                	mov    edx,ebp
c0023702:	f7 f7                	div    edi
c0023704:	89 c1                	mov    ecx,eax
c0023706:	31 f6                	xor    esi,esi
c0023708:	89 c8                	mov    eax,ecx
c002370a:	89 f2                	mov    edx,esi
c002370c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023710:	85 c9                	test   ecx,ecx
c0023712:	74 07                	je     c002371b <__divdi3+0x6b>
c0023714:	f7 d8                	neg    eax
c0023716:	83 d2 00             	adc    edx,0x0
c0023719:	f7 da                	neg    edx
c002371b:	83 c4 1c             	add    esp,0x1c
c002371e:	5b                   	pop    ebx
c002371f:	5e                   	pop    esi
c0023720:	5f                   	pop    edi
c0023721:	5d                   	pop    ebp
c0023722:	c3                   	ret    
c0023723:	90                   	nop
c0023724:	85 ff                	test   edi,edi
c0023726:	75 0b                	jne    c0023733 <__divdi3+0x83>
c0023728:	b8 01 00 00 00       	mov    eax,0x1
c002372d:	31 d2                	xor    edx,edx
c002372f:	f7 f3                	div    ebx
c0023731:	89 c7                	mov    edi,eax
c0023733:	31 d2                	xor    edx,edx
c0023735:	89 e8                	mov    eax,ebp
c0023737:	f7 f7                	div    edi
c0023739:	89 c6                	mov    esi,eax
c002373b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002373e:	f7 f7                	div    edi
c0023740:	89 c1                	mov    ecx,eax
c0023742:	eb c4                	jmp    c0023708 <__divdi3+0x58>
c0023744:	39 eb                	cmp    ebx,ebp
c0023746:	77 3c                	ja     c0023784 <__divdi3+0xd4>
c0023748:	0f bd f3             	bsr    esi,ebx
c002374b:	83 f6 1f             	xor    esi,0x1f
c002374e:	75 40                	jne    c0023790 <__divdi3+0xe0>
c0023750:	39 eb                	cmp    ebx,ebp
c0023752:	72 09                	jb     c002375d <__divdi3+0xad>
c0023754:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023757:	0f 87 97 00 00 00    	ja     c00237f4 <__divdi3+0x144>
c002375d:	b9 01 00 00 00       	mov    ecx,0x1
c0023762:	eb a4                	jmp    c0023708 <__divdi3+0x58>
c0023764:	f7 d9                	neg    ecx
c0023766:	83 d3 00             	adc    ebx,0x0
c0023769:	f7 db                	neg    ebx
c002376b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002376e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023772:	89 dd                	mov    ebp,ebx
c0023774:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002377c:	e9 5f ff ff ff       	jmp    c00236e0 <__divdi3+0x30>
c0023781:	8d 76 00             	lea    esi,[esi+0x0]
c0023784:	31 f6                	xor    esi,esi
c0023786:	31 c9                	xor    ecx,ecx
c0023788:	e9 7b ff ff ff       	jmp    c0023708 <__divdi3+0x58>
c002378d:	8d 76 00             	lea    esi,[esi+0x0]
c0023790:	b8 20 00 00 00       	mov    eax,0x20
c0023795:	29 f0                	sub    eax,esi
c0023797:	89 f1                	mov    ecx,esi
c0023799:	d3 e3                	shl    ebx,cl
c002379b:	89 fa                	mov    edx,edi
c002379d:	88 c1                	mov    cl,al
c002379f:	d3 ea                	shr    edx,cl
c00237a1:	09 da                	or     edx,ebx
c00237a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00237a7:	89 f1                	mov    ecx,esi
c00237a9:	d3 e7                	shl    edi,cl
c00237ab:	89 eb                	mov    ebx,ebp
c00237ad:	88 c1                	mov    cl,al
c00237af:	d3 eb                	shr    ebx,cl
c00237b1:	89 f1                	mov    ecx,esi
c00237b3:	d3 e5                	shl    ebp,cl
c00237b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00237b8:	88 c1                	mov    cl,al
c00237ba:	d3 ea                	shr    edx,cl
c00237bc:	09 d5                	or     ebp,edx
c00237be:	89 e8                	mov    eax,ebp
c00237c0:	89 da                	mov    edx,ebx
c00237c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00237c6:	89 d3                	mov    ebx,edx
c00237c8:	89 c5                	mov    ebp,eax
c00237ca:	f7 e7                	mul    edi
c00237cc:	39 d3                	cmp    ebx,edx
c00237ce:	72 18                	jb     c00237e8 <__divdi3+0x138>
c00237d0:	74 0a                	je     c00237dc <__divdi3+0x12c>
c00237d2:	89 e9                	mov    ecx,ebp
c00237d4:	31 f6                	xor    esi,esi
c00237d6:	e9 2d ff ff ff       	jmp    c0023708 <__divdi3+0x58>
c00237db:	90                   	nop
c00237dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00237df:	89 f1                	mov    ecx,esi
c00237e1:	d3 e7                	shl    edi,cl
c00237e3:	39 c7                	cmp    edi,eax
c00237e5:	73 eb                	jae    c00237d2 <__divdi3+0x122>
c00237e7:	90                   	nop
c00237e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00237eb:	31 f6                	xor    esi,esi
c00237ed:	e9 16 ff ff ff       	jmp    c0023708 <__divdi3+0x58>
c00237f2:	66 90                	xchg   ax,ax
c00237f4:	31 c9                	xor    ecx,ecx
c00237f6:	e9 0d ff ff ff       	jmp    c0023708 <__divdi3+0x58>
c00237fb:	90                   	nop

c00237fc <__moddi3>:
c00237fc:	55                   	push   ebp
c00237fd:	57                   	push   edi
c00237fe:	56                   	push   esi
c00237ff:	53                   	push   ebx
c0023800:	83 ec 2c             	sub    esp,0x2c
c0023803:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023807:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002380b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002380f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023813:	85 db                	test   ebx,ebx
c0023815:	0f 88 85 00 00 00    	js     c00238a0 <__moddi3+0xa4>
c002381b:	89 de                	mov    esi,ebx
c002381d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023825:	89 d7                	mov    edi,edx
c0023827:	85 d2                	test   edx,edx
c0023829:	79 09                	jns    c0023834 <__moddi3+0x38>
c002382b:	f7 d8                	neg    eax
c002382d:	83 d2 00             	adc    edx,0x0
c0023830:	f7 da                	neg    edx
c0023832:	89 d7                	mov    edi,edx
c0023834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023838:	89 cd                	mov    ebp,ecx
c002383a:	85 ff                	test   edi,edi
c002383c:	75 52                	jne    c0023890 <__moddi3+0x94>
c002383e:	89 c3                	mov    ebx,eax
c0023840:	39 f0                	cmp    eax,esi
c0023842:	76 24                	jbe    c0023868 <__moddi3+0x6c>
c0023844:	89 c8                	mov    eax,ecx
c0023846:	89 f2                	mov    edx,esi
c0023848:	f7 f3                	div    ebx
c002384a:	89 d6                	mov    esi,edx
c002384c:	89 f0                	mov    eax,esi
c002384e:	31 d2                	xor    edx,edx
c0023850:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023854:	85 c9                	test   ecx,ecx
c0023856:	74 07                	je     c002385f <__moddi3+0x63>
c0023858:	f7 d8                	neg    eax
c002385a:	83 d2 00             	adc    edx,0x0
c002385d:	f7 da                	neg    edx
c002385f:	83 c4 2c             	add    esp,0x2c
c0023862:	5b                   	pop    ebx
c0023863:	5e                   	pop    esi
c0023864:	5f                   	pop    edi
c0023865:	5d                   	pop    ebp
c0023866:	c3                   	ret    
c0023867:	90                   	nop
c0023868:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002386c:	85 db                	test   ebx,ebx
c002386e:	75 0d                	jne    c002387d <__moddi3+0x81>
c0023870:	b8 01 00 00 00       	mov    eax,0x1
c0023875:	31 d2                	xor    edx,edx
c0023877:	f7 f7                	div    edi
c0023879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002387d:	89 f0                	mov    eax,esi
c002387f:	31 d2                	xor    edx,edx
c0023881:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023885:	f7 f7                	div    edi
c0023887:	89 e8                	mov    eax,ebp
c0023889:	f7 f7                	div    edi
c002388b:	89 d6                	mov    esi,edx
c002388d:	eb bd                	jmp    c002384c <__moddi3+0x50>
c002388f:	90                   	nop
c0023890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023894:	39 f7                	cmp    edi,esi
c0023896:	76 20                	jbe    c00238b8 <__moddi3+0xbc>
c0023898:	89 c8                	mov    eax,ecx
c002389a:	89 f2                	mov    edx,esi
c002389c:	eb b2                	jmp    c0023850 <__moddi3+0x54>
c002389e:	66 90                	xchg   ax,ax
c00238a0:	f7 d9                	neg    ecx
c00238a2:	83 d3 00             	adc    ebx,0x0
c00238a5:	f7 db                	neg    ebx
c00238a7:	89 de                	mov    esi,ebx
c00238a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00238b1:	e9 6f ff ff ff       	jmp    c0023825 <__moddi3+0x29>
c00238b6:	66 90                	xchg   ax,ax
c00238b8:	0f bd c7             	bsr    eax,edi
c00238bb:	83 f0 1f             	xor    eax,0x1f
c00238be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00238c2:	75 24                	jne    c00238e8 <__moddi3+0xec>
c00238c4:	39 f7                	cmp    edi,esi
c00238c6:	72 06                	jb     c00238ce <__moddi3+0xd2>
c00238c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00238cc:	77 0c                	ja     c00238da <__moddi3+0xde>
c00238ce:	89 e9                	mov    ecx,ebp
c00238d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00238d4:	19 fe                	sbb    esi,edi
c00238d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00238da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238de:	89 f2                	mov    edx,esi
c00238e0:	e9 6b ff ff ff       	jmp    c0023850 <__moddi3+0x54>
c00238e5:	8d 76 00             	lea    esi,[esi+0x0]
c00238e8:	b8 20 00 00 00       	mov    eax,0x20
c00238ed:	89 c2                	mov    edx,eax
c00238ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00238f3:	29 da                	sub    edx,ebx
c00238f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00238f9:	88 d9                	mov    cl,bl
c00238fb:	d3 e7                	shl    edi,cl
c00238fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023901:	88 d1                	mov    cl,dl
c0023903:	d3 e8                	shr    eax,cl
c0023905:	09 c7                	or     edi,eax
c0023907:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002390b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002390f:	89 d8                	mov    eax,ebx
c0023911:	88 d9                	mov    cl,bl
c0023913:	d3 e7                	shl    edi,cl
c0023915:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023919:	89 f3                	mov    ebx,esi
c002391b:	88 d1                	mov    cl,dl
c002391d:	d3 eb                	shr    ebx,cl
c002391f:	89 c7                	mov    edi,eax
c0023921:	88 c1                	mov    cl,al
c0023923:	d3 e6                	shl    esi,cl
c0023925:	89 e8                	mov    eax,ebp
c0023927:	88 d1                	mov    cl,dl
c0023929:	d3 e8                	shr    eax,cl
c002392b:	09 f0                	or     eax,esi
c002392d:	89 f9                	mov    ecx,edi
c002392f:	d3 e5                	shl    ebp,cl
c0023931:	89 da                	mov    edx,ebx
c0023933:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023937:	89 d3                	mov    ebx,edx
c0023939:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002393d:	89 c6                	mov    esi,eax
c002393f:	89 d1                	mov    ecx,edx
c0023941:	39 d3                	cmp    ebx,edx
c0023943:	72 27                	jb     c002396c <__moddi3+0x170>
c0023945:	74 21                	je     c0023968 <__moddi3+0x16c>
c0023947:	29 f5                	sub    ebp,esi
c0023949:	19 cb                	sbb    ebx,ecx
c002394b:	89 de                	mov    esi,ebx
c002394d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023951:	d3 e6                	shl    esi,cl
c0023953:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023957:	89 f9                	mov    ecx,edi
c0023959:	d3 ed                	shr    ebp,cl
c002395b:	09 ee                	or     esi,ebp
c002395d:	89 f0                	mov    eax,esi
c002395f:	d3 eb                	shr    ebx,cl
c0023961:	89 da                	mov    edx,ebx
c0023963:	e9 e8 fe ff ff       	jmp    c0023850 <__moddi3+0x54>
c0023968:	39 c5                	cmp    ebp,eax
c002396a:	73 db                	jae    c0023947 <__moddi3+0x14b>
c002396c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023970:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023974:	89 d1                	mov    ecx,edx
c0023976:	89 c6                	mov    esi,eax
c0023978:	eb cd                	jmp    c0023947 <__moddi3+0x14b>
c002397a:	66 90                	xchg   ax,ax

c002397c <__udivdi3>:
c002397c:	55                   	push   ebp
c002397d:	57                   	push   edi
c002397e:	56                   	push   esi
c002397f:	53                   	push   ebx
c0023980:	83 ec 1c             	sub    esp,0x1c
c0023983:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023987:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002398b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002398f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023993:	85 d2                	test   edx,edx
c0023995:	75 41                	jne    c00239d8 <__udivdi3+0x5c>
c0023997:	39 f7                	cmp    edi,esi
c0023999:	76 15                	jbe    c00239b0 <__udivdi3+0x34>
c002399b:	89 e8                	mov    eax,ebp
c002399d:	89 f2                	mov    edx,esi
c002399f:	f7 f7                	div    edi
c00239a1:	31 db                	xor    ebx,ebx
c00239a3:	89 da                	mov    edx,ebx
c00239a5:	83 c4 1c             	add    esp,0x1c
c00239a8:	5b                   	pop    ebx
c00239a9:	5e                   	pop    esi
c00239aa:	5f                   	pop    edi
c00239ab:	5d                   	pop    ebp
c00239ac:	c3                   	ret    
c00239ad:	8d 76 00             	lea    esi,[esi+0x0]
c00239b0:	89 f9                	mov    ecx,edi
c00239b2:	85 ff                	test   edi,edi
c00239b4:	75 0b                	jne    c00239c1 <__udivdi3+0x45>
c00239b6:	b8 01 00 00 00       	mov    eax,0x1
c00239bb:	31 d2                	xor    edx,edx
c00239bd:	f7 f7                	div    edi
c00239bf:	89 c1                	mov    ecx,eax
c00239c1:	31 d2                	xor    edx,edx
c00239c3:	89 f0                	mov    eax,esi
c00239c5:	f7 f1                	div    ecx
c00239c7:	89 c3                	mov    ebx,eax
c00239c9:	89 e8                	mov    eax,ebp
c00239cb:	f7 f1                	div    ecx
c00239cd:	89 da                	mov    edx,ebx
c00239cf:	83 c4 1c             	add    esp,0x1c
c00239d2:	5b                   	pop    ebx
c00239d3:	5e                   	pop    esi
c00239d4:	5f                   	pop    edi
c00239d5:	5d                   	pop    ebp
c00239d6:	c3                   	ret    
c00239d7:	90                   	nop
c00239d8:	39 f2                	cmp    edx,esi
c00239da:	77 1c                	ja     c00239f8 <__udivdi3+0x7c>
c00239dc:	0f bd da             	bsr    ebx,edx
c00239df:	83 f3 1f             	xor    ebx,0x1f
c00239e2:	75 24                	jne    c0023a08 <__udivdi3+0x8c>
c00239e4:	39 f2                	cmp    edx,esi
c00239e6:	72 08                	jb     c00239f0 <__udivdi3+0x74>
c00239e8:	39 ef                	cmp    edi,ebp
c00239ea:	0f 87 84 00 00 00    	ja     c0023a74 <__udivdi3+0xf8>
c00239f0:	b8 01 00 00 00       	mov    eax,0x1
c00239f5:	eb ac                	jmp    c00239a3 <__udivdi3+0x27>
c00239f7:	90                   	nop
c00239f8:	31 db                	xor    ebx,ebx
c00239fa:	31 c0                	xor    eax,eax
c00239fc:	89 da                	mov    edx,ebx
c00239fe:	83 c4 1c             	add    esp,0x1c
c0023a01:	5b                   	pop    ebx
c0023a02:	5e                   	pop    esi
c0023a03:	5f                   	pop    edi
c0023a04:	5d                   	pop    ebp
c0023a05:	c3                   	ret    
c0023a06:	66 90                	xchg   ax,ax
c0023a08:	b8 20 00 00 00       	mov    eax,0x20
c0023a0d:	29 d8                	sub    eax,ebx
c0023a0f:	88 d9                	mov    cl,bl
c0023a11:	d3 e2                	shl    edx,cl
c0023a13:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023a17:	89 fa                	mov    edx,edi
c0023a19:	88 c1                	mov    cl,al
c0023a1b:	d3 ea                	shr    edx,cl
c0023a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023a21:	09 d1                	or     ecx,edx
c0023a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023a27:	88 d9                	mov    cl,bl
c0023a29:	d3 e7                	shl    edi,cl
c0023a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023a2f:	89 f7                	mov    edi,esi
c0023a31:	88 c1                	mov    cl,al
c0023a33:	d3 ef                	shr    edi,cl
c0023a35:	88 d9                	mov    cl,bl
c0023a37:	d3 e6                	shl    esi,cl
c0023a39:	89 ea                	mov    edx,ebp
c0023a3b:	88 c1                	mov    cl,al
c0023a3d:	d3 ea                	shr    edx,cl
c0023a3f:	09 d6                	or     esi,edx
c0023a41:	89 f0                	mov    eax,esi
c0023a43:	89 fa                	mov    edx,edi
c0023a45:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023a49:	89 d7                	mov    edi,edx
c0023a4b:	89 c6                	mov    esi,eax
c0023a4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023a51:	39 d7                	cmp    edi,edx
c0023a53:	72 13                	jb     c0023a68 <__udivdi3+0xec>
c0023a55:	74 09                	je     c0023a60 <__udivdi3+0xe4>
c0023a57:	89 f0                	mov    eax,esi
c0023a59:	31 db                	xor    ebx,ebx
c0023a5b:	e9 43 ff ff ff       	jmp    c00239a3 <__udivdi3+0x27>
c0023a60:	88 d9                	mov    cl,bl
c0023a62:	d3 e5                	shl    ebp,cl
c0023a64:	39 c5                	cmp    ebp,eax
c0023a66:	73 ef                	jae    c0023a57 <__udivdi3+0xdb>
c0023a68:	8d 46 ff             	lea    eax,[esi-0x1]
c0023a6b:	31 db                	xor    ebx,ebx
c0023a6d:	e9 31 ff ff ff       	jmp    c00239a3 <__udivdi3+0x27>
c0023a72:	66 90                	xchg   ax,ax
c0023a74:	31 c0                	xor    eax,eax
c0023a76:	e9 28 ff ff ff       	jmp    c00239a3 <__udivdi3+0x27>
c0023a7b:	90                   	nop

c0023a7c <__umoddi3>:
c0023a7c:	55                   	push   ebp
c0023a7d:	57                   	push   edi
c0023a7e:	56                   	push   esi
c0023a7f:	53                   	push   ebx
c0023a80:	83 ec 1c             	sub    esp,0x1c
c0023a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a8b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a93:	89 da                	mov    edx,ebx
c0023a95:	85 c0                	test   eax,eax
c0023a97:	75 37                	jne    c0023ad0 <__umoddi3+0x54>
c0023a99:	39 df                	cmp    edi,ebx
c0023a9b:	76 13                	jbe    c0023ab0 <__umoddi3+0x34>
c0023a9d:	89 f0                	mov    eax,esi
c0023a9f:	f7 f7                	div    edi
c0023aa1:	89 d0                	mov    eax,edx
c0023aa3:	31 d2                	xor    edx,edx
c0023aa5:	83 c4 1c             	add    esp,0x1c
c0023aa8:	5b                   	pop    ebx
c0023aa9:	5e                   	pop    esi
c0023aaa:	5f                   	pop    edi
c0023aab:	5d                   	pop    ebp
c0023aac:	c3                   	ret    
c0023aad:	8d 76 00             	lea    esi,[esi+0x0]
c0023ab0:	89 fd                	mov    ebp,edi
c0023ab2:	85 ff                	test   edi,edi
c0023ab4:	75 0b                	jne    c0023ac1 <__umoddi3+0x45>
c0023ab6:	b8 01 00 00 00       	mov    eax,0x1
c0023abb:	31 d2                	xor    edx,edx
c0023abd:	f7 f7                	div    edi
c0023abf:	89 c5                	mov    ebp,eax
c0023ac1:	89 d8                	mov    eax,ebx
c0023ac3:	31 d2                	xor    edx,edx
c0023ac5:	f7 f5                	div    ebp
c0023ac7:	89 f0                	mov    eax,esi
c0023ac9:	f7 f5                	div    ebp
c0023acb:	89 d0                	mov    eax,edx
c0023acd:	eb d4                	jmp    c0023aa3 <__umoddi3+0x27>
c0023acf:	90                   	nop
c0023ad0:	89 f1                	mov    ecx,esi
c0023ad2:	39 d8                	cmp    eax,ebx
c0023ad4:	76 0a                	jbe    c0023ae0 <__umoddi3+0x64>
c0023ad6:	89 f0                	mov    eax,esi
c0023ad8:	83 c4 1c             	add    esp,0x1c
c0023adb:	5b                   	pop    ebx
c0023adc:	5e                   	pop    esi
c0023add:	5f                   	pop    edi
c0023ade:	5d                   	pop    ebp
c0023adf:	c3                   	ret    
c0023ae0:	0f bd e8             	bsr    ebp,eax
c0023ae3:	83 f5 1f             	xor    ebp,0x1f
c0023ae6:	75 1c                	jne    c0023b04 <__umoddi3+0x88>
c0023ae8:	39 d8                	cmp    eax,ebx
c0023aea:	72 04                	jb     c0023af0 <__umoddi3+0x74>
c0023aec:	39 f7                	cmp    edi,esi
c0023aee:	77 08                	ja     c0023af8 <__umoddi3+0x7c>
c0023af0:	89 da                	mov    edx,ebx
c0023af2:	29 fe                	sub    esi,edi
c0023af4:	19 c2                	sbb    edx,eax
c0023af6:	89 f1                	mov    ecx,esi
c0023af8:	89 c8                	mov    eax,ecx
c0023afa:	83 c4 1c             	add    esp,0x1c
c0023afd:	5b                   	pop    ebx
c0023afe:	5e                   	pop    esi
c0023aff:	5f                   	pop    edi
c0023b00:	5d                   	pop    ebp
c0023b01:	c3                   	ret    
c0023b02:	66 90                	xchg   ax,ax
c0023b04:	ba 20 00 00 00       	mov    edx,0x20
c0023b09:	29 ea                	sub    edx,ebp
c0023b0b:	89 e9                	mov    ecx,ebp
c0023b0d:	d3 e0                	shl    eax,cl
c0023b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023b13:	89 f8                	mov    eax,edi
c0023b15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023b19:	88 d1                	mov    cl,dl
c0023b1b:	d3 e8                	shr    eax,cl
c0023b1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b21:	09 c1                	or     ecx,eax
c0023b23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023b27:	89 e9                	mov    ecx,ebp
c0023b29:	d3 e7                	shl    edi,cl
c0023b2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023b2f:	89 d8                	mov    eax,ebx
c0023b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023b35:	88 d1                	mov    cl,dl
c0023b37:	d3 e8                	shr    eax,cl
c0023b39:	89 c7                	mov    edi,eax
c0023b3b:	89 e9                	mov    ecx,ebp
c0023b3d:	d3 e3                	shl    ebx,cl
c0023b3f:	89 f0                	mov    eax,esi
c0023b41:	88 d1                	mov    cl,dl
c0023b43:	d3 e8                	shr    eax,cl
c0023b45:	09 d8                	or     eax,ebx
c0023b47:	89 e9                	mov    ecx,ebp
c0023b49:	d3 e6                	shl    esi,cl
c0023b4b:	89 f3                	mov    ebx,esi
c0023b4d:	89 fa                	mov    edx,edi
c0023b4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023b53:	89 d1                	mov    ecx,edx
c0023b55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023b59:	89 c6                	mov    esi,eax
c0023b5b:	89 d7                	mov    edi,edx
c0023b5d:	39 d1                	cmp    ecx,edx
c0023b5f:	72 27                	jb     c0023b88 <__umoddi3+0x10c>
c0023b61:	74 21                	je     c0023b84 <__umoddi3+0x108>
c0023b63:	89 ca                	mov    edx,ecx
c0023b65:	29 f3                	sub    ebx,esi
c0023b67:	19 fa                	sbb    edx,edi
c0023b69:	89 d0                	mov    eax,edx
c0023b6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023b6f:	d3 e0                	shl    eax,cl
c0023b71:	89 e9                	mov    ecx,ebp
c0023b73:	d3 eb                	shr    ebx,cl
c0023b75:	09 d8                	or     eax,ebx
c0023b77:	d3 ea                	shr    edx,cl
c0023b79:	83 c4 1c             	add    esp,0x1c
c0023b7c:	5b                   	pop    ebx
c0023b7d:	5e                   	pop    esi
c0023b7e:	5f                   	pop    edi
c0023b7f:	5d                   	pop    ebp
c0023b80:	c3                   	ret    
c0023b81:	8d 76 00             	lea    esi,[esi+0x0]
c0023b84:	39 c3                	cmp    ebx,eax
c0023b86:	73 db                	jae    c0023b63 <__umoddi3+0xe7>
c0023b88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023b8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023b90:	89 d7                	mov    edi,edx
c0023b92:	89 c6                	mov    esi,eax
c0023b94:	eb cd                	jmp    c0023b63 <__umoddi3+0xe7>

c0023b96 <__addsf3>:
c0023b96:	55                   	push   ebp
c0023b97:	89 e5                	mov    ebp,esp
c0023b99:	57                   	push   edi
c0023b9a:	56                   	push   esi
c0023b9b:	53                   	push   ebx
c0023b9c:	83 ec 08             	sub    esp,0x8
c0023b9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023ba2:	89 fa                	mov    edx,edi
c0023ba4:	89 f8                	mov    eax,edi
c0023ba6:	c1 f8 17             	sar    eax,0x17
c0023ba9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023bac:	c1 e2 08             	shl    edx,0x8
c0023baf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023bb5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023bb8:	89 de                	mov    esi,ebx
c0023bba:	c1 fe 17             	sar    esi,0x17
c0023bbd:	c1 e3 08             	shl    ebx,0x8
c0023bc0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023bc6:	31 f0                	xor    eax,esi
c0023bc8:	0f 88 3b 01 00 00    	js     c0023d09 <__addsf3+0x173>
c0023bce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023bd1:	29 f1                	sub    ecx,esi
c0023bd3:	85 c9                	test   ecx,ecx
c0023bd5:	7e 54                	jle    c0023c2b <__addsf3+0x95>
c0023bd7:	89 f0                	mov    eax,esi
c0023bd9:	84 c0                	test   al,al
c0023bdb:	75 10                	jne    c0023bed <__addsf3+0x57>
c0023bdd:	85 db                	test   ebx,ebx
c0023bdf:	0f 84 aa 02 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023be5:	49                   	dec    ecx
c0023be6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023be9:	74 38                	je     c0023c23 <__addsf3+0x8d>
c0023beb:	eb 13                	jmp    c0023c00 <__addsf3+0x6a>
c0023bed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023bf0:	f7 d0                	not    eax
c0023bf2:	84 c0                	test   al,al
c0023bf4:	0f 84 95 02 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023bfa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023c00:	83 f9 1f             	cmp    ecx,0x1f
c0023c03:	0f 8f 86 02 00 00    	jg     c0023e8f <__addsf3+0x2f9>
c0023c09:	89 de                	mov    esi,ebx
c0023c0b:	d3 ee                	shr    esi,cl
c0023c0d:	b8 20 00 00 00       	mov    eax,0x20
c0023c12:	29 c8                	sub    eax,ecx
c0023c14:	89 c1                	mov    ecx,eax
c0023c16:	d3 e3                	shl    ebx,cl
c0023c18:	31 c0                	xor    eax,eax
c0023c1a:	85 db                	test   ebx,ebx
c0023c1c:	0f 95 c0             	setne  al
c0023c1f:	09 f0                	or     eax,esi
c0023c21:	01 d0                	add    eax,edx
c0023c23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023c26:	e9 b6 00 00 00       	jmp    c0023ce1 <__addsf3+0x14b>
c0023c2b:	74 5c                	je     c0023c89 <__addsf3+0xf3>
c0023c2d:	89 f1                	mov    ecx,esi
c0023c2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023c32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023c35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023c39:	75 14                	jne    c0023c4f <__addsf3+0xb9>
c0023c3b:	85 d2                	test   edx,edx
c0023c3d:	0f 84 4c 02 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023c43:	49                   	dec    ecx
c0023c44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023c47:	0f 84 94 00 00 00    	je     c0023ce1 <__addsf3+0x14b>
c0023c4d:	eb 12                	jmp    c0023c61 <__addsf3+0xcb>
c0023c4f:	89 f0                	mov    eax,esi
c0023c51:	f7 d0                	not    eax
c0023c53:	84 c0                	test   al,al
c0023c55:	0f 84 34 02 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023c5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023c64:	83 f9 1f             	cmp    ecx,0x1f
c0023c67:	0f 8f 22 02 00 00    	jg     c0023e8f <__addsf3+0x2f9>
c0023c6d:	89 d7                	mov    edi,edx
c0023c6f:	d3 ef                	shr    edi,cl
c0023c71:	b8 20 00 00 00       	mov    eax,0x20
c0023c76:	29 c8                	sub    eax,ecx
c0023c78:	89 c1                	mov    ecx,eax
c0023c7a:	d3 e2                	shl    edx,cl
c0023c7c:	31 c0                	xor    eax,eax
c0023c7e:	85 d2                	test   edx,edx
c0023c80:	0f 95 c0             	setne  al
c0023c83:	09 f8                	or     eax,edi
c0023c85:	01 d8                	add    eax,ebx
c0023c87:	eb 58                	jmp    c0023ce1 <__addsf3+0x14b>
c0023c89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023c8c:	8d 70 01             	lea    esi,[eax+0x1]
c0023c8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023c95:	75 32                	jne    c0023cc9 <__addsf3+0x133>
c0023c97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023c9b:	75 1f                	jne    c0023cbc <__addsf3+0x126>
c0023c9d:	85 d2                	test   edx,edx
c0023c9f:	0f 84 e0 01 00 00    	je     c0023e85 <__addsf3+0x2ef>
c0023ca5:	85 db                	test   ebx,ebx
c0023ca7:	0f 84 e2 01 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023cad:	89 d0                	mov    eax,edx
c0023caf:	01 d8                	add    eax,ebx
c0023cb1:	0f 89 a9 01 00 00    	jns    c0023e60 <__addsf3+0x2ca>
c0023cb7:	e9 9d 01 00 00       	jmp    c0023e59 <__addsf3+0x2c3>
c0023cbc:	85 d2                	test   edx,edx
c0023cbe:	0f 85 cb 01 00 00    	jne    c0023e8f <__addsf3+0x2f9>
c0023cc4:	e9 bc 01 00 00       	jmp    c0023e85 <__addsf3+0x2ef>
c0023cc9:	31 c0                	xor    eax,eax
c0023ccb:	89 f1                	mov    ecx,esi
c0023ccd:	f7 d1                	not    ecx
c0023ccf:	84 c9                	test   cl,cl
c0023cd1:	0f 84 90 01 00 00    	je     c0023e67 <__addsf3+0x2d1>
c0023cd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023cda:	d1 e8                	shr    eax,1
c0023cdc:	e9 86 01 00 00       	jmp    c0023e67 <__addsf3+0x2d1>
c0023ce1:	85 c0                	test   eax,eax
c0023ce3:	0f 89 7e 01 00 00    	jns    c0023e67 <__addsf3+0x2d1>
c0023ce9:	46                   	inc    esi
c0023cea:	89 f2                	mov    edx,esi
c0023cec:	f7 d2                	not    edx
c0023cee:	84 d2                	test   dl,dl
c0023cf0:	0f 84 6f 01 00 00    	je     c0023e65 <__addsf3+0x2cf>
c0023cf6:	89 c2                	mov    edx,eax
c0023cf8:	83 e2 01             	and    edx,0x1
c0023cfb:	d1 e8                	shr    eax,1
c0023cfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023d02:	09 d0                	or     eax,edx
c0023d04:	e9 5e 01 00 00       	jmp    c0023e67 <__addsf3+0x2d1>
c0023d09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0023d0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023d10:	89 f0                	mov    eax,esi
c0023d12:	0f b6 c0             	movzx  eax,al
c0023d15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023d18:	29 c1                	sub    ecx,eax
c0023d1a:	85 c9                	test   ecx,ecx
c0023d1c:	7e 55                	jle    c0023d73 <__addsf3+0x1dd>
c0023d1e:	85 c0                	test   eax,eax
c0023d20:	75 11                	jne    c0023d33 <__addsf3+0x19d>
c0023d22:	85 db                	test   ebx,ebx
c0023d24:	0f 84 65 01 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023d2a:	49                   	dec    ecx
c0023d2b:	75 19                	jne    c0023d46 <__addsf3+0x1b0>
c0023d2d:	89 d0                	mov    eax,edx
c0023d2f:	29 d8                	sub    eax,ebx
c0023d31:	eb 38                	jmp    c0023d6b <__addsf3+0x1d5>
c0023d33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023d36:	f7 d0                	not    eax
c0023d38:	84 c0                	test   al,al
c0023d3a:	0f 84 4f 01 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023d40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023d46:	83 f9 1f             	cmp    ecx,0x1f
c0023d49:	0f 8f 40 01 00 00    	jg     c0023e8f <__addsf3+0x2f9>
c0023d4f:	89 de                	mov    esi,ebx
c0023d51:	d3 ee                	shr    esi,cl
c0023d53:	b8 20 00 00 00       	mov    eax,0x20
c0023d58:	29 c8                	sub    eax,ecx
c0023d5a:	89 c1                	mov    ecx,eax
c0023d5c:	d3 e3                	shl    ebx,cl
c0023d5e:	31 c0                	xor    eax,eax
c0023d60:	85 db                	test   ebx,ebx
c0023d62:	0f 95 c0             	setne  al
c0023d65:	09 f0                	or     eax,esi
c0023d67:	29 c2                	sub    edx,eax
c0023d69:	89 d0                	mov    eax,edx
c0023d6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023d6e:	e9 af 00 00 00       	jmp    c0023e22 <__addsf3+0x28c>
c0023d73:	74 5c                	je     c0023dd1 <__addsf3+0x23b>
c0023d75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023d78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023d7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023d7f:	75 14                	jne    c0023d95 <__addsf3+0x1ff>
c0023d81:	85 d2                	test   edx,edx
c0023d83:	0f 84 06 01 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023d89:	48                   	dec    eax
c0023d8a:	75 1b                	jne    c0023da7 <__addsf3+0x211>
c0023d8c:	89 d8                	mov    eax,ebx
c0023d8e:	29 d0                	sub    eax,edx
c0023d90:	e9 8d 00 00 00       	jmp    c0023e22 <__addsf3+0x28c>
c0023d95:	89 f1                	mov    ecx,esi
c0023d97:	f7 d1                	not    ecx
c0023d99:	84 c9                	test   cl,cl
c0023d9b:	0f 84 ee 00 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023da1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023da7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023daa:	83 f8 1f             	cmp    eax,0x1f
c0023dad:	0f 8f dc 00 00 00    	jg     c0023e8f <__addsf3+0x2f9>
c0023db3:	89 d7                	mov    edi,edx
c0023db5:	88 c1                	mov    cl,al
c0023db7:	d3 ef                	shr    edi,cl
c0023db9:	b9 20 00 00 00       	mov    ecx,0x20
c0023dbe:	29 c1                	sub    ecx,eax
c0023dc0:	d3 e2                	shl    edx,cl
c0023dc2:	31 c0                	xor    eax,eax
c0023dc4:	85 d2                	test   edx,edx
c0023dc6:	0f 95 c0             	setne  al
c0023dc9:	09 f8                	or     eax,edi
c0023dcb:	29 c3                	sub    ebx,eax
c0023dcd:	89 d8                	mov    eax,ebx
c0023dcf:	eb 51                	jmp    c0023e22 <__addsf3+0x28c>
c0023dd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023dd4:	40                   	inc    eax
c0023dd5:	a8 fe                	test   al,0xfe
c0023dd7:	75 3d                	jne    c0023e16 <__addsf3+0x280>
c0023dd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023ddd:	0f 85 a7 00 00 00    	jne    c0023e8a <__addsf3+0x2f4>
c0023de3:	85 d2                	test   edx,edx
c0023de5:	75 12                	jne    c0023df9 <__addsf3+0x263>
c0023de7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023dea:	85 db                	test   ebx,ebx
c0023dec:	0f 85 9d 00 00 00    	jne    c0023e8f <__addsf3+0x2f9>
c0023df2:	31 ff                	xor    edi,edi
c0023df4:	e9 96 00 00 00       	jmp    c0023e8f <__addsf3+0x2f9>
c0023df9:	85 db                	test   ebx,ebx
c0023dfb:	0f 84 8e 00 00 00    	je     c0023e8f <__addsf3+0x2f9>
c0023e01:	89 d0                	mov    eax,edx
c0023e03:	29 d8                	sub    eax,ebx
c0023e05:	79 06                	jns    c0023e0d <__addsf3+0x277>
c0023e07:	89 d8                	mov    eax,ebx
c0023e09:	29 d0                	sub    eax,edx
c0023e0b:	eb 5a                	jmp    c0023e67 <__addsf3+0x2d1>
c0023e0d:	bf 00 00 00 00       	mov    edi,0x0
c0023e12:	74 7b                	je     c0023e8f <__addsf3+0x2f9>
c0023e14:	eb 4a                	jmp    c0023e60 <__addsf3+0x2ca>
c0023e16:	89 d0                	mov    eax,edx
c0023e18:	29 d8                	sub    eax,ebx
c0023e1a:	79 12                	jns    c0023e2e <__addsf3+0x298>
c0023e1c:	89 d8                	mov    eax,ebx
c0023e1e:	29 d0                	sub    eax,edx
c0023e20:	eb 09                	jmp    c0023e2b <__addsf3+0x295>
c0023e22:	85 c0                	test   eax,eax
c0023e24:	79 41                	jns    c0023e67 <__addsf3+0x2d1>
c0023e26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0023e2e:	31 f6                	xor    esi,esi
c0023e30:	85 c0                	test   eax,eax
c0023e32:	74 33                	je     c0023e67 <__addsf3+0x2d1>
c0023e34:	0f bd c8             	bsr    ecx,eax
c0023e37:	83 f1 1f             	xor    ecx,0x1f
c0023e3a:	d3 e0                	shl    eax,cl
c0023e3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023e40:	39 ca                	cmp    edx,ecx
c0023e42:	7f 10                	jg     c0023e54 <__addsf3+0x2be>
c0023e44:	29 d1                	sub    ecx,edx
c0023e46:	41                   	inc    ecx
c0023e47:	d3 e8                	shr    eax,cl
c0023e49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023e4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023e52:	eb 13                	jmp    c0023e67 <__addsf3+0x2d1>
c0023e54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023e57:	29 ce                	sub    esi,ecx
c0023e59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e5e:	eb 07                	jmp    c0023e67 <__addsf3+0x2d1>
c0023e60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023e63:	eb 02                	jmp    c0023e67 <__addsf3+0x2d1>
c0023e65:	31 c0                	xor    eax,eax
c0023e67:	89 c2                	mov    edx,eax
c0023e69:	c1 ea 08             	shr    edx,0x8
c0023e6c:	a8 7f                	test   al,0x7f
c0023e6e:	0f 95 c1             	setne  cl
c0023e71:	09 d1                	or     ecx,edx
c0023e73:	83 e1 01             	and    ecx,0x1
c0023e76:	c1 e8 07             	shr    eax,0x7
c0023e79:	21 c8                	and    eax,ecx
c0023e7b:	c1 e6 17             	shl    esi,0x17
c0023e7e:	09 d6                	or     esi,edx
c0023e80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023e83:	eb 0a                	jmp    c0023e8f <__addsf3+0x2f9>
c0023e85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023e88:	eb 05                	jmp    c0023e8f <__addsf3+0x2f9>
c0023e8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0023e8f:	89 f8                	mov    eax,edi
c0023e91:	5a                   	pop    edx
c0023e92:	59                   	pop    ecx
c0023e93:	5b                   	pop    ebx
c0023e94:	5e                   	pop    esi
c0023e95:	5f                   	pop    edi
c0023e96:	5d                   	pop    ebp
c0023e97:	c3                   	ret    

c0023e98 <__subsf3>:
c0023e98:	55                   	push   ebp
c0023e99:	89 e5                	mov    ebp,esp
c0023e9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e9e:	05 00 00 00 80       	add    eax,0x80000000
c0023ea3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023ea6:	5d                   	pop    ebp
c0023ea7:	e9 ea fc ff ff       	jmp    c0023b96 <__addsf3>

c0023eac <__negsf2>:
c0023eac:	55                   	push   ebp
c0023ead:	89 e5                	mov    ebp,esp
c0023eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023eb2:	05 00 00 00 80       	add    eax,0x80000000
c0023eb7:	5d                   	pop    ebp
c0023eb8:	c3                   	ret    

c0023eb9 <__mulsf3>:
c0023eb9:	55                   	push   ebp
c0023eba:	89 e5                	mov    ebp,esp
c0023ebc:	57                   	push   edi
c0023ebd:	56                   	push   esi
c0023ebe:	53                   	push   ebx
c0023ebf:	83 ec 1c             	sub    esp,0x1c
c0023ec2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023ec5:	89 f0                	mov    eax,esi
c0023ec7:	89 f1                	mov    ecx,esi
c0023ec9:	c1 f9 17             	sar    ecx,0x17
c0023ecc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023ecf:	c1 e0 08             	shl    eax,0x8
c0023ed2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023ed7:	89 c1                	mov    ecx,eax
c0023ed9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023edc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023edf:	89 c7                	mov    edi,eax
c0023ee1:	c1 ff 17             	sar    edi,0x17
c0023ee4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023ee8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023eeb:	89 f8                	mov    eax,edi
c0023eed:	0f b6 c0             	movzx  eax,al
c0023ef0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023ef3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0023ef7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023efa:	42                   	inc    edx
c0023efb:	80 e2 fe             	and    dl,0xfe
c0023efe:	75 7b                	jne    c0023f7b <__mulsf3+0xc2>
c0023f00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023f04:	74 54                	je     c0023f5a <__mulsf3+0xa1>
c0023f06:	85 c9                	test   ecx,ecx
c0023f08:	0f 85 64 01 00 00    	jne    c0024072 <__mulsf3+0x1b9>
c0023f0e:	8d 57 01             	lea    edx,[edi+0x1]
c0023f11:	80 e2 fe             	and    dl,0xfe
c0023f14:	75 1f                	jne    c0023f35 <__mulsf3+0x7c>
c0023f16:	85 c0                	test   eax,eax
c0023f18:	b8 00 00 00 00       	mov    eax,0x0
c0023f1d:	74 29                	je     c0023f48 <__mulsf3+0x8f>
c0023f1f:	53                   	push   ebx
c0023f20:	53                   	push   ebx
c0023f21:	50                   	push   eax
c0023f22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f25:	e8 96 05 00 00       	call   c00244c0 <__nesf2>
c0023f2a:	83 c4 10             	add    esp,0x10
c0023f2d:	85 c0                	test   eax,eax
c0023f2f:	0f 85 3a 01 00 00    	jne    c002406f <__mulsf3+0x1b6>
c0023f35:	85 ff                	test   edi,edi
c0023f37:	0f 89 35 01 00 00    	jns    c0024072 <__mulsf3+0x1b9>
c0023f3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023f43:	e9 2a 01 00 00       	jmp    c0024072 <__mulsf3+0x1b9>
c0023f48:	51                   	push   ecx
c0023f49:	51                   	push   ecx
c0023f4a:	50                   	push   eax
c0023f4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f4e:	e8 6d 05 00 00       	call   c00244c0 <__nesf2>
c0023f53:	83 c4 10             	add    esp,0x10
c0023f56:	85 c0                	test   eax,eax
c0023f58:	eb 15                	jmp    c0023f6f <__mulsf3+0xb6>
c0023f5a:	85 c9                	test   ecx,ecx
c0023f5c:	74 0b                	je     c0023f69 <__mulsf3+0xb0>
c0023f5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023f61:	01 c9                	add    ecx,ecx
c0023f63:	78 16                	js     c0023f7b <__mulsf3+0xc2>
c0023f65:	89 d3                	mov    ebx,edx
c0023f67:	eb f5                	jmp    c0023f5e <__mulsf3+0xa5>
c0023f69:	89 f8                	mov    eax,edi
c0023f6b:	f7 d0                	not    eax
c0023f6d:	84 c0                	test   al,al
c0023f6f:	75 c4                	jne    c0023f35 <__mulsf3+0x7c>
c0023f71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023f76:	e9 f7 00 00 00       	jmp    c0024072 <__mulsf3+0x1b9>
c0023f7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f7e:	c1 e6 08             	shl    esi,0x8
c0023f81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023f87:	8d 57 01             	lea    edx,[edi+0x1]
c0023f8a:	80 e2 fe             	and    dl,0xfe
c0023f8d:	75 63                	jne    c0023ff2 <__mulsf3+0x139>
c0023f8f:	85 c0                	test   eax,eax
c0023f91:	74 2f                	je     c0023fc2 <__mulsf3+0x109>
c0023f93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023f97:	0f 89 d2 00 00 00    	jns    c002406f <__mulsf3+0x1b6>
c0023f9d:	52                   	push   edx
c0023f9e:	52                   	push   edx
c0023f9f:	6a 00                	push   0x0
c0023fa1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023fa4:	e8 dc 04 00 00       	call   c0024485 <__eqsf2>
c0023fa9:	83 c4 10             	add    esp,0x10
c0023fac:	85 c0                	test   eax,eax
c0023fae:	0f 85 bb 00 00 00    	jne    c002406f <__mulsf3+0x1b6>
c0023fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023fb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023fbd:	e9 b0 00 00 00       	jmp    c0024072 <__mulsf3+0x1b9>
c0023fc2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023fc5:	50                   	push   eax
c0023fc6:	50                   	push   eax
c0023fc7:	6a 00                	push   0x0
c0023fc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023fcc:	e8 b4 04 00 00       	call   c0024485 <__eqsf2>
c0023fd1:	83 c4 10             	add    esp,0x10
c0023fd4:	85 c0                	test   eax,eax
c0023fd6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023fd9:	75 0c                	jne    c0023fe7 <__mulsf3+0x12e>
c0023fdb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023fdf:	0f 89 8a 00 00 00    	jns    c002406f <__mulsf3+0x1b6>
c0023fe5:	eb cd                	jmp    c0023fb4 <__mulsf3+0xfb>
c0023fe7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023fea:	01 f6                	add    esi,esi
c0023fec:	78 04                	js     c0023ff2 <__mulsf3+0x139>
c0023fee:	89 c3                	mov    ebx,eax
c0023ff0:	eb f5                	jmp    c0023fe7 <__mulsf3+0x12e>
c0023ff2:	89 c8                	mov    eax,ecx
c0023ff4:	0d 00 00 00 80       	or     eax,0x80000000
c0023ff9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023fff:	f7 e6                	mul    esi
c0024001:	85 c0                	test   eax,eax
c0024003:	0f 95 c0             	setne  al
c0024006:	0f b6 c0             	movzx  eax,al
c0024009:	09 c2                	or     edx,eax
c002400b:	78 03                	js     c0024010 <__mulsf3+0x157>
c002400d:	01 d2                	add    edx,edx
c002400f:	4b                   	dec    ebx
c0024010:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0024016:	7f 22                	jg     c002403a <__mulsf3+0x181>
c0024018:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002401e:	85 db                	test   ebx,ebx
c0024020:	7f 23                	jg     c0024045 <__mulsf3+0x18c>
c0024022:	83 fb e9             	cmp    ebx,0xffffffe9
c0024025:	7c 1a                	jl     c0024041 <__mulsf3+0x188>
c0024027:	81 ca 00 00 00 80    	or     edx,0x80000000
c002402d:	b9 01 00 00 00       	mov    ecx,0x1
c0024032:	29 d9                	sub    ecx,ebx
c0024034:	d3 ea                	shr    edx,cl
c0024036:	31 db                	xor    ebx,ebx
c0024038:	eb 0b                	jmp    c0024045 <__mulsf3+0x18c>
c002403a:	bb ff 00 00 00       	mov    ebx,0xff
c002403f:	eb 02                	jmp    c0024043 <__mulsf3+0x18a>
c0024041:	31 db                	xor    ebx,ebx
c0024043:	31 d2                	xor    edx,edx
c0024045:	89 d0                	mov    eax,edx
c0024047:	c1 e8 08             	shr    eax,0x8
c002404a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002404d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024053:	09 fb                	or     ebx,edi
c0024055:	c1 e3 17             	shl    ebx,0x17
c0024058:	09 c3                	or     ebx,eax
c002405a:	f6 c2 7f             	test   dl,0x7f
c002405d:	0f 95 c1             	setne  cl
c0024060:	09 c8                	or     eax,ecx
c0024062:	83 e0 01             	and    eax,0x1
c0024065:	c1 ea 07             	shr    edx,0x7
c0024068:	21 c2                	and    edx,eax
c002406a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002406d:	eb 03                	jmp    c0024072 <__mulsf3+0x1b9>
c002406f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024072:	89 f0                	mov    eax,esi
c0024074:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024077:	5b                   	pop    ebx
c0024078:	5e                   	pop    esi
c0024079:	5f                   	pop    edi
c002407a:	5d                   	pop    ebp
c002407b:	c3                   	ret    

c002407c <__divsf3>:
c002407c:	55                   	push   ebp
c002407d:	89 e5                	mov    ebp,esp
c002407f:	57                   	push   edi
c0024080:	56                   	push   esi
c0024081:	53                   	push   ebx
c0024082:	83 ec 1c             	sub    esp,0x1c
c0024085:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024088:	89 d8                	mov    eax,ebx
c002408a:	89 d9                	mov    ecx,ebx
c002408c:	c1 f9 17             	sar    ecx,0x17
c002408f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024092:	c1 e0 08             	shl    eax,0x8
c0024095:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002409a:	89 c1                	mov    ecx,eax
c002409c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002409f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00240a2:	89 c7                	mov    edi,eax
c00240a4:	c1 ff 17             	sar    edi,0x17
c00240a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00240ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00240ae:	89 f8                	mov    eax,edi
c00240b0:	0f b6 c0             	movzx  eax,al
c00240b3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00240b6:	29 c6                	sub    esi,eax
c00240b8:	83 c6 7f             	add    esi,0x7f
c00240bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00240be:	42                   	inc    edx
c00240bf:	80 e2 fe             	and    dl,0xfe
c00240c2:	0f 85 9c 00 00 00    	jne    c0024164 <__divsf3+0xe8>
c00240c8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00240cc:	74 33                	je     c0024101 <__divsf3+0x85>
c00240ce:	85 c9                	test   ecx,ecx
c00240d0:	0f 85 c7 01 00 00    	jne    c002429d <__divsf3+0x221>
c00240d6:	8d 57 01             	lea    edx,[edi+0x1]
c00240d9:	80 e2 fe             	and    dl,0xfe
c00240dc:	75 2f                	jne    c002410d <__divsf3+0x91>
c00240de:	85 c0                	test   eax,eax
c00240e0:	74 2b                	je     c002410d <__divsf3+0x91>
c00240e2:	51                   	push   ecx
c00240e3:	51                   	push   ecx
c00240e4:	6a 00                	push   0x0
c00240e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240e9:	e8 d2 03 00 00       	call   c00244c0 <__nesf2>
c00240ee:	83 c4 10             	add    esp,0x10
c00240f1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00240f4:	85 c0                	test   eax,eax
c00240f6:	0f 85 a1 01 00 00    	jne    c002429d <__divsf3+0x221>
c00240fc:	e9 92 01 00 00       	jmp    c0024293 <__divsf3+0x217>
c0024101:	85 c9                	test   ecx,ecx
c0024103:	75 1b                	jne    c0024120 <__divsf3+0xa4>
c0024105:	8d 57 01             	lea    edx,[edi+0x1]
c0024108:	80 e2 fe             	and    dl,0xfe
c002410b:	74 1e                	je     c002412b <__divsf3+0xaf>
c002410d:	85 ff                	test   edi,edi
c002410f:	0f 89 88 01 00 00    	jns    c002429d <__divsf3+0x221>
c0024115:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002411b:	e9 7d 01 00 00       	jmp    c002429d <__divsf3+0x221>
c0024120:	8d 56 ff             	lea    edx,[esi-0x1]
c0024123:	01 c9                	add    ecx,ecx
c0024125:	78 3d                	js     c0024164 <__divsf3+0xe8>
c0024127:	89 d6                	mov    esi,edx
c0024129:	eb f5                	jmp    c0024120 <__divsf3+0xa4>
c002412b:	85 c0                	test   eax,eax
c002412d:	b8 00 00 00 00       	mov    eax,0x0
c0024132:	74 18                	je     c002414c <__divsf3+0xd0>
c0024134:	52                   	push   edx
c0024135:	52                   	push   edx
c0024136:	50                   	push   eax
c0024137:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002413a:	e8 81 03 00 00       	call   c00244c0 <__nesf2>
c002413f:	83 c4 10             	add    esp,0x10
c0024142:	85 c0                	test   eax,eax
c0024144:	0f 85 50 01 00 00    	jne    c002429a <__divsf3+0x21e>
c002414a:	eb c1                	jmp    c002410d <__divsf3+0x91>
c002414c:	56                   	push   esi
c002414d:	56                   	push   esi
c002414e:	50                   	push   eax
c002414f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024152:	e8 69 03 00 00       	call   c00244c0 <__nesf2>
c0024157:	83 c4 10             	add    esp,0x10
c002415a:	85 c0                	test   eax,eax
c002415c:	0f 84 31 01 00 00    	je     c0024293 <__divsf3+0x217>
c0024162:	eb a9                	jmp    c002410d <__divsf3+0x91>
c0024164:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024167:	c1 e3 08             	shl    ebx,0x8
c002416a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024170:	8d 57 01             	lea    edx,[edi+0x1]
c0024173:	80 e2 fe             	and    dl,0xfe
c0024176:	75 71                	jne    c00241e9 <__divsf3+0x16d>
c0024178:	85 c0                	test   eax,eax
c002417a:	ba 00 00 00 00       	mov    edx,0x0
c002417f:	74 2f                	je     c00241b0 <__divsf3+0x134>
c0024181:	51                   	push   ecx
c0024182:	51                   	push   ecx
c0024183:	52                   	push   edx
c0024184:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024187:	e8 f9 02 00 00       	call   c0024485 <__eqsf2>
c002418c:	83 c4 10             	add    esp,0x10
c002418f:	85 c0                	test   eax,eax
c0024191:	0f 85 03 01 00 00    	jne    c002429a <__divsf3+0x21e>
c0024197:	31 d2                	xor    edx,edx
c0024199:	89 d3                	mov    ebx,edx
c002419b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002419e:	31 f8                	xor    eax,edi
c00241a0:	0f 89 f7 00 00 00    	jns    c002429d <__divsf3+0x221>
c00241a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00241ab:	e9 ed 00 00 00       	jmp    c002429d <__divsf3+0x221>
c00241b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00241b3:	50                   	push   eax
c00241b4:	50                   	push   eax
c00241b5:	52                   	push   edx
c00241b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00241b9:	e8 c7 02 00 00       	call   c0024485 <__eqsf2>
c00241be:	83 c4 10             	add    esp,0x10
c00241c1:	85 c0                	test   eax,eax
c00241c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00241c6:	75 16                	jne    c00241de <__divsf3+0x162>
c00241c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00241cb:	31 fb                	xor    ebx,edi
c00241cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00241d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00241d9:	e9 bf 00 00 00       	jmp    c002429d <__divsf3+0x221>
c00241de:	8d 46 01             	lea    eax,[esi+0x1]
c00241e1:	01 db                	add    ebx,ebx
c00241e3:	78 04                	js     c00241e9 <__divsf3+0x16d>
c00241e5:	89 c6                	mov    esi,eax
c00241e7:	eb f5                	jmp    c00241de <__divsf3+0x162>
c00241e9:	89 c8                	mov    eax,ecx
c00241eb:	0d 00 00 00 80       	or     eax,0x80000000
c00241f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00241f6:	31 d2                	xor    edx,edx
c00241f8:	39 d8                	cmp    eax,ebx
c00241fa:	72 07                	jb     c0024203 <__divsf3+0x187>
c00241fc:	29 d8                	sub    eax,ebx
c00241fe:	ba 01 00 00 00       	mov    edx,0x1
c0024203:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002420a:	01 d2                	add    edx,edx
c002420c:	89 c1                	mov    ecx,eax
c002420e:	01 c0                	add    eax,eax
c0024210:	85 c9                	test   ecx,ecx
c0024212:	78 04                	js     c0024218 <__divsf3+0x19c>
c0024214:	39 c3                	cmp    ebx,eax
c0024216:	77 05                	ja     c002421d <__divsf3+0x1a1>
c0024218:	29 d8                	sub    eax,ebx
c002421a:	83 ca 01             	or     edx,0x1
c002421d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0024220:	75 e8                	jne    c002420a <__divsf3+0x18e>
c0024222:	85 c0                	test   eax,eax
c0024224:	0f 95 c0             	setne  al
c0024227:	0f b6 c0             	movzx  eax,al
c002422a:	c1 e2 06             	shl    edx,0x6
c002422d:	09 c2                	or     edx,eax
c002422f:	78 03                	js     c0024234 <__divsf3+0x1b8>
c0024231:	01 d2                	add    edx,edx
c0024233:	4e                   	dec    esi
c0024234:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002423a:	7f 22                	jg     c002425e <__divsf3+0x1e2>
c002423c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024242:	85 f6                	test   esi,esi
c0024244:	7f 23                	jg     c0024269 <__divsf3+0x1ed>
c0024246:	83 fe e9             	cmp    esi,0xffffffe9
c0024249:	7c 1a                	jl     c0024265 <__divsf3+0x1e9>
c002424b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024251:	b9 01 00 00 00       	mov    ecx,0x1
c0024256:	29 f1                	sub    ecx,esi
c0024258:	d3 ea                	shr    edx,cl
c002425a:	31 f6                	xor    esi,esi
c002425c:	eb 0b                	jmp    c0024269 <__divsf3+0x1ed>
c002425e:	be ff 00 00 00       	mov    esi,0xff
c0024263:	eb 02                	jmp    c0024267 <__divsf3+0x1eb>
c0024265:	31 f6                	xor    esi,esi
c0024267:	31 d2                	xor    edx,edx
c0024269:	89 d0                	mov    eax,edx
c002426b:	c1 e8 08             	shr    eax,0x8
c002426e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024271:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024277:	09 fe                	or     esi,edi
c0024279:	c1 e6 17             	shl    esi,0x17
c002427c:	09 c6                	or     esi,eax
c002427e:	f6 c2 7f             	test   dl,0x7f
c0024281:	0f 95 c1             	setne  cl
c0024284:	09 c8                	or     eax,ecx
c0024286:	83 e0 01             	and    eax,0x1
c0024289:	c1 ea 07             	shr    edx,0x7
c002428c:	21 c2                	and    edx,eax
c002428e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0024291:	eb 0a                	jmp    c002429d <__divsf3+0x221>
c0024293:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0024298:	eb 03                	jmp    c002429d <__divsf3+0x221>
c002429a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002429d:	89 d8                	mov    eax,ebx
c002429f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00242a2:	5b                   	pop    ebx
c00242a3:	5e                   	pop    esi
c00242a4:	5f                   	pop    edi
c00242a5:	5d                   	pop    ebp
c00242a6:	c3                   	ret    

c00242a7 <__floatsisf>:
c00242a7:	55                   	push   ebp
c00242a8:	89 e5                	mov    ebp,esp
c00242aa:	53                   	push   ebx
c00242ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00242ae:	85 d2                	test   edx,edx
c00242b0:	7e 2b                	jle    c00242dd <__floatsisf+0x36>
c00242b2:	0f bd ca             	bsr    ecx,edx
c00242b5:	83 f1 1f             	xor    ecx,0x1f
c00242b8:	d3 e2                	shl    edx,cl
c00242ba:	89 d0                	mov    eax,edx
c00242bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00242c1:	89 c3                	mov    ebx,eax
c00242c3:	c1 eb 08             	shr    ebx,0x8
c00242c6:	80 e2 7f             	and    dl,0x7f
c00242c9:	0f 95 c2             	setne  dl
c00242cc:	09 da                	or     edx,ebx
c00242ce:	83 e2 01             	and    edx,0x1
c00242d1:	c1 e8 07             	shr    eax,0x7
c00242d4:	21 c2                	and    edx,eax
c00242d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00242db:	eb 32                	jmp    c002430f <__floatsisf+0x68>
c00242dd:	b8 00 00 00 00       	mov    eax,0x0
c00242e2:	74 34                	je     c0024318 <__floatsisf+0x71>
c00242e4:	f7 da                	neg    edx
c00242e6:	0f bd ca             	bsr    ecx,edx
c00242e9:	83 f1 1f             	xor    ecx,0x1f
c00242ec:	d3 e2                	shl    edx,cl
c00242ee:	89 d0                	mov    eax,edx
c00242f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00242f5:	89 c3                	mov    ebx,eax
c00242f7:	c1 eb 08             	shr    ebx,0x8
c00242fa:	80 e2 7f             	and    dl,0x7f
c00242fd:	0f 95 c2             	setne  dl
c0024300:	09 da                	or     edx,ebx
c0024302:	83 e2 01             	and    edx,0x1
c0024305:	c1 e8 07             	shr    eax,0x7
c0024308:	21 c2                	and    edx,eax
c002430a:	b8 9e 01 00 00       	mov    eax,0x19e
c002430f:	29 c8                	sub    eax,ecx
c0024311:	c1 e0 17             	shl    eax,0x17
c0024314:	09 d8                	or     eax,ebx
c0024316:	01 d0                	add    eax,edx
c0024318:	5b                   	pop    ebx
c0024319:	5d                   	pop    ebp
c002431a:	c3                   	ret    

c002431b <__floatunsisf>:
c002431b:	55                   	push   ebp
c002431c:	89 e5                	mov    ebp,esp
c002431e:	53                   	push   ebx
c002431f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024322:	31 c0                	xor    eax,eax
c0024324:	85 d2                	test   edx,edx
c0024326:	74 32                	je     c002435a <__floatunsisf+0x3f>
c0024328:	0f bd ca             	bsr    ecx,edx
c002432b:	83 f1 1f             	xor    ecx,0x1f
c002432e:	d3 e2                	shl    edx,cl
c0024330:	89 d0                	mov    eax,edx
c0024332:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024337:	89 c3                	mov    ebx,eax
c0024339:	c1 eb 08             	shr    ebx,0x8
c002433c:	80 e2 7f             	and    dl,0x7f
c002433f:	0f 95 c2             	setne  dl
c0024342:	09 da                	or     edx,ebx
c0024344:	83 e2 01             	and    edx,0x1
c0024347:	c1 e8 07             	shr    eax,0x7
c002434a:	21 c2                	and    edx,eax
c002434c:	b8 9e 00 00 00       	mov    eax,0x9e
c0024351:	29 c8                	sub    eax,ecx
c0024353:	c1 e0 17             	shl    eax,0x17
c0024356:	09 d8                	or     eax,ebx
c0024358:	01 d0                	add    eax,edx
c002435a:	5b                   	pop    ebx
c002435b:	5d                   	pop    ebp
c002435c:	c3                   	ret    

c002435d <__fixsfsi>:
c002435d:	55                   	push   ebp
c002435e:	89 e5                	mov    ebp,esp
c0024360:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024363:	89 d1                	mov    ecx,edx
c0024365:	c1 e1 08             	shl    ecx,0x8
c0024368:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002436e:	c1 fa 17             	sar    edx,0x17
c0024371:	78 1c                	js     c002438f <__fixsfsi+0x32>
c0024373:	83 ea 7f             	sub    edx,0x7f
c0024376:	31 c0                	xor    eax,eax
c0024378:	83 fa 1e             	cmp    edx,0x1e
c002437b:	77 40                	ja     c00243bd <__fixsfsi+0x60>
c002437d:	89 c8                	mov    eax,ecx
c002437f:	0d 00 00 00 80       	or     eax,0x80000000
c0024384:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024389:	29 d1                	sub    ecx,edx
c002438b:	d3 e8                	shr    eax,cl
c002438d:	eb 2e                	jmp    c00243bd <__fixsfsi+0x60>
c002438f:	31 c0                	xor    eax,eax
c0024391:	81 c2 81 00 00 00    	add    edx,0x81
c0024397:	78 24                	js     c00243bd <__fixsfsi+0x60>
c0024399:	83 fa 1e             	cmp    edx,0x1e
c002439c:	7e 09                	jle    c00243a7 <__fixsfsi+0x4a>
c002439e:	83 fa 1f             	cmp    edx,0x1f
c00243a1:	75 18                	jne    c00243bb <__fixsfsi+0x5e>
c00243a3:	85 c9                	test   ecx,ecx
c00243a5:	75 14                	jne    c00243bb <__fixsfsi+0x5e>
c00243a7:	89 c8                	mov    eax,ecx
c00243a9:	0d 00 00 00 80       	or     eax,0x80000000
c00243ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00243b3:	29 d1                	sub    ecx,edx
c00243b5:	d3 e8                	shr    eax,cl
c00243b7:	f7 d8                	neg    eax
c00243b9:	eb 02                	jmp    c00243bd <__fixsfsi+0x60>
c00243bb:	31 c0                	xor    eax,eax
c00243bd:	5d                   	pop    ebp
c00243be:	c3                   	ret    

c00243bf <__fixunssfsi>:
c00243bf:	55                   	push   ebp
c00243c0:	89 e5                	mov    ebp,esp
c00243c2:	53                   	push   ebx
c00243c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00243c6:	89 d3                	mov    ebx,edx
c00243c8:	c1 fb 17             	sar    ebx,0x17
c00243cb:	83 eb 7f             	sub    ebx,0x7f
c00243ce:	31 c0                	xor    eax,eax
c00243d0:	83 fb 1f             	cmp    ebx,0x1f
c00243d3:	77 18                	ja     c00243ed <__fixunssfsi+0x2e>
c00243d5:	89 d0                	mov    eax,edx
c00243d7:	c1 e0 08             	shl    eax,0x8
c00243da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00243df:	0d 00 00 00 80       	or     eax,0x80000000
c00243e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00243e9:	29 d9                	sub    ecx,ebx
c00243eb:	d3 e8                	shr    eax,cl
c00243ed:	5b                   	pop    ebx
c00243ee:	5d                   	pop    ebp
c00243ef:	c3                   	ret    

c00243f0 <__cmpsf2>:
c00243f0:	55                   	push   ebp
c00243f1:	89 e5                	mov    ebp,esp
c00243f3:	57                   	push   edi
c00243f4:	56                   	push   esi
c00243f5:	53                   	push   ebx
c00243f6:	83 ec 24             	sub    esp,0x24
c00243f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00243fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243ff:	e8 4f 10 00 00       	call   c0025453 <__truncdfsf2>
c0024404:	5a                   	pop    edx
c0024405:	59                   	pop    ecx
c0024406:	89 c3                	mov    ebx,eax
c0024408:	c1 e8 17             	shr    eax,0x17
c002440b:	0f b6 f0             	movzx  esi,al
c002440e:	89 d8                	mov    eax,ebx
c0024410:	c1 e8 1f             	shr    eax,0x1f
c0024413:	31 c6                	xor    esi,eax
c0024415:	c1 e3 08             	shl    ebx,0x8
c0024418:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002441b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002441e:	e8 30 10 00 00       	call   c0025453 <__truncdfsf2>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	89 c1                	mov    ecx,eax
c0024428:	c1 e9 17             	shr    ecx,0x17
c002442b:	0f b6 c9             	movzx  ecx,cl
c002442e:	89 c7                	mov    edi,eax
c0024430:	c1 ef 1f             	shr    edi,0x1f
c0024433:	89 ca                	mov    edx,ecx
c0024435:	31 fa                	xor    edx,edi
c0024437:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002443a:	c1 e0 08             	shl    eax,0x8
c002443d:	89 c2                	mov    edx,eax
c002443f:	89 d8                	mov    eax,ebx
c0024441:	09 d0                	or     eax,edx
c0024443:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024448:	09 f0                	or     eax,esi
c002444a:	75 08                	jne    c0024454 <__cmpsf2+0x64>
c002444c:	31 c0                	xor    eax,eax
c002444e:	39 f9                	cmp    ecx,edi
c0024450:	75 0c                	jne    c002445e <__cmpsf2+0x6e>
c0024452:	eb 29                	jmp    c002447d <__cmpsf2+0x8d>
c0024454:	b8 01 00 00 00       	mov    eax,0x1
c0024459:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002445c:	7f 1f                	jg     c002447d <__cmpsf2+0x8d>
c002445e:	83 c8 ff             	or     eax,0xffffffff
c0024461:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024464:	7c 17                	jl     c002447d <__cmpsf2+0x8d>
c0024466:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002446c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024472:	b8 01 00 00 00       	mov    eax,0x1
c0024477:	39 d3                	cmp    ebx,edx
c0024479:	77 02                	ja     c002447d <__cmpsf2+0x8d>
c002447b:	19 c0                	sbb    eax,eax
c002447d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024480:	5b                   	pop    ebx
c0024481:	5e                   	pop    esi
c0024482:	5f                   	pop    edi
c0024483:	5d                   	pop    ebp
c0024484:	c3                   	ret    

c0024485 <__eqsf2>:
c0024485:	55                   	push   ebp
c0024486:	89 e5                	mov    ebp,esp
c0024488:	83 ec 24             	sub    esp,0x24
c002448b:	6a 01                	push   0x1
c002448d:	83 ec 0c             	sub    esp,0xc
c0024490:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024493:	e8 df 10 00 00       	call   c0025577 <__extendsfdf2>
c0024498:	83 c4 10             	add    esp,0x10
c002449b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002449e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00244a1:	52                   	push   edx
c00244a2:	50                   	push   eax
c00244a3:	50                   	push   eax
c00244a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244a7:	e8 cb 10 00 00       	call   c0025577 <__extendsfdf2>
c00244ac:	59                   	pop    ecx
c00244ad:	59                   	pop    ecx
c00244ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00244b4:	52                   	push   edx
c00244b5:	50                   	push   eax
c00244b6:	e8 35 ff ff ff       	call   c00243f0 <__cmpsf2>
c00244bb:	83 c4 20             	add    esp,0x20
c00244be:	c9                   	leave  
c00244bf:	c3                   	ret    

c00244c0 <__nesf2>:
c00244c0:	eb c3                	jmp    c0024485 <__eqsf2>

c00244c2 <__gtsf2>:
c00244c2:	55                   	push   ebp
c00244c3:	89 e5                	mov    ebp,esp
c00244c5:	83 ec 24             	sub    esp,0x24
c00244c8:	6a ff                	push   0xffffffff
c00244ca:	83 ec 0c             	sub    esp,0xc
c00244cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00244d0:	e8 a2 10 00 00       	call   c0025577 <__extendsfdf2>
c00244d5:	83 c4 10             	add    esp,0x10
c00244d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00244de:	52                   	push   edx
c00244df:	50                   	push   eax
c00244e0:	50                   	push   eax
c00244e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244e4:	e8 8e 10 00 00       	call   c0025577 <__extendsfdf2>
c00244e9:	59                   	pop    ecx
c00244ea:	59                   	pop    ecx
c00244eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00244f1:	52                   	push   edx
c00244f2:	50                   	push   eax
c00244f3:	e8 f8 fe ff ff       	call   c00243f0 <__cmpsf2>
c00244f8:	83 c4 20             	add    esp,0x20
c00244fb:	c9                   	leave  
c00244fc:	c3                   	ret    

c00244fd <__gesf2>:
c00244fd:	eb c3                	jmp    c00244c2 <__gtsf2>

c00244ff <__ltsf2>:
c00244ff:	eb 84                	jmp    c0024485 <__eqsf2>

c0024501 <__lesf2>:
c0024501:	eb 82                	jmp    c0024485 <__eqsf2>

c0024503 <__adddf3>:
c0024503:	55                   	push   ebp
c0024504:	89 e5                	mov    ebp,esp
c0024506:	57                   	push   edi
c0024507:	56                   	push   esi
c0024508:	53                   	push   ebx
c0024509:	83 ec 24             	sub    esp,0x24
c002450c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002450f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024512:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024515:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024518:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002451b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002451e:	89 c8                	mov    eax,ecx
c0024520:	89 ce                	mov    esi,ecx
c0024522:	c1 fe 14             	sar    esi,0x14
c0024525:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024528:	89 fb                	mov    ebx,edi
c002452a:	89 fa                	mov    edx,edi
c002452c:	c1 e2 0b             	shl    edx,0xb
c002452f:	c1 e0 0b             	shl    eax,0xb
c0024532:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024537:	c1 eb 15             	shr    ebx,0x15
c002453a:	09 d8                	or     eax,ebx
c002453c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002453f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024542:	c1 fe 14             	sar    esi,0x14
c0024545:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024548:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002454b:	89 f3                	mov    ebx,esi
c002454d:	c1 e3 0b             	shl    ebx,0xb
c0024550:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024553:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024556:	c1 e3 0b             	shl    ebx,0xb
c0024559:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002455f:	c1 ee 15             	shr    esi,0x15
c0024562:	09 f3                	or     ebx,esi
c0024564:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024567:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002456a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002456d:	0f 88 5f 02 00 00    	js     c00247d2 <__adddf3+0x2cf>
c0024573:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024576:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024579:	85 db                	test   ebx,ebx
c002457b:	0f 8e c7 00 00 00    	jle    c0024648 <__adddf3+0x145>
c0024581:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024588:	75 1a                	jne    c00245a4 <__adddf3+0xa1>
c002458a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002458d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024590:	0f 84 b2 05 00 00    	je     c0024b48 <__adddf3+0x645>
c0024596:	4b                   	dec    ebx
c0024597:	75 23                	jne    c00245bc <__adddf3+0xb9>
c0024599:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002459c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002459f:	e9 99 00 00 00       	jmp    c002463d <__adddf3+0x13a>
c00245a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00245a7:	f7 d6                	not    esi
c00245a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00245af:	0f 84 93 05 00 00    	je     c0024b48 <__adddf3+0x645>
c00245b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00245bc:	83 fb 1f             	cmp    ebx,0x1f
c00245bf:	7e 42                	jle    c0024603 <__adddf3+0x100>
c00245c1:	83 fb 3f             	cmp    ebx,0x3f
c00245c4:	0f 8f 7e 05 00 00    	jg     c0024b48 <__adddf3+0x645>
c00245ca:	83 e3 1f             	and    ebx,0x1f
c00245cd:	89 d9                	mov    ecx,ebx
c00245cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00245d2:	d3 ef                	shr    edi,cl
c00245d4:	31 db                	xor    ebx,ebx
c00245d6:	85 c9                	test   ecx,ecx
c00245d8:	74 15                	je     c00245ef <__adddf3+0xec>
c00245da:	be 20 00 00 00       	mov    esi,0x20
c00245df:	29 ce                	sub    esi,ecx
c00245e1:	89 f1                	mov    ecx,esi
c00245e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00245e6:	d3 e6                	shl    esi,cl
c00245e8:	31 db                	xor    ebx,ebx
c00245ea:	85 f6                	test   esi,esi
c00245ec:	0f 95 c3             	setne  bl
c00245ef:	31 c9                	xor    ecx,ecx
c00245f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00245f5:	0f 95 c1             	setne  cl
c00245f8:	09 cf                	or     edi,ecx
c00245fa:	09 fb                	or     ebx,edi
c00245fc:	01 da                	add    edx,ebx
c00245fe:	83 d0 00             	adc    eax,0x0
c0024601:	eb 3a                	jmp    c002463d <__adddf3+0x13a>
c0024603:	bf 20 00 00 00       	mov    edi,0x20
c0024608:	29 df                	sub    edi,ebx
c002460a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002460d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024610:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024613:	d3 e6                	shl    esi,cl
c0024615:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024618:	88 d9                	mov    cl,bl
c002461a:	d3 ef                	shr    edi,cl
c002461c:	09 fe                	or     esi,edi
c002461e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024621:	88 d9                	mov    cl,bl
c0024623:	d3 ef                	shr    edi,cl
c0024625:	89 fb                	mov    ebx,edi
c0024627:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002462a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002462d:	d3 e7                	shl    edi,cl
c002462f:	85 ff                	test   edi,edi
c0024631:	0f 95 c1             	setne  cl
c0024634:	0f b6 c9             	movzx  ecx,cl
c0024637:	09 ce                	or     esi,ecx
c0024639:	01 f2                	add    edx,esi
c002463b:	11 d8                	adc    eax,ebx
c002463d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024640:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024643:	e9 52 01 00 00       	jmp    c002479a <__adddf3+0x297>
c0024648:	0f 84 d5 00 00 00    	je     c0024723 <__adddf3+0x220>
c002464e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024651:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024654:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024657:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002465a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024661:	75 20                	jne    c0024683 <__adddf3+0x180>
c0024663:	89 d6                	mov    esi,edx
c0024665:	09 c6                	or     esi,eax
c0024667:	0f 84 db 04 00 00    	je     c0024b48 <__adddf3+0x645>
c002466d:	4b                   	dec    ebx
c002466e:	75 29                	jne    c0024699 <__adddf3+0x196>
c0024670:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024673:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024676:	01 d1                	add    ecx,edx
c0024678:	11 c6                	adc    esi,eax
c002467a:	89 f0                	mov    eax,esi
c002467c:	89 ca                	mov    edx,ecx
c002467e:	e9 17 01 00 00       	jmp    c002479a <__adddf3+0x297>
c0024683:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024686:	f7 d6                	not    esi
c0024688:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002468e:	0f 84 b4 04 00 00    	je     c0024b48 <__adddf3+0x645>
c0024694:	0d 00 00 00 80       	or     eax,0x80000000
c0024699:	83 fb 1f             	cmp    ebx,0x1f
c002469c:	7e 48                	jle    c00246e6 <__adddf3+0x1e3>
c002469e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00246a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00246a4:	83 fb 3f             	cmp    ebx,0x3f
c00246a7:	0f 8f 9b 04 00 00    	jg     c0024b48 <__adddf3+0x645>
c00246ad:	83 e3 1f             	and    ebx,0x1f
c00246b0:	89 d9                	mov    ecx,ebx
c00246b2:	89 c7                	mov    edi,eax
c00246b4:	d3 ef                	shr    edi,cl
c00246b6:	31 db                	xor    ebx,ebx
c00246b8:	85 c9                	test   ecx,ecx
c00246ba:	74 12                	je     c00246ce <__adddf3+0x1cb>
c00246bc:	be 20 00 00 00       	mov    esi,0x20
c00246c1:	29 ce                	sub    esi,ecx
c00246c3:	89 f1                	mov    ecx,esi
c00246c5:	d3 e0                	shl    eax,cl
c00246c7:	31 db                	xor    ebx,ebx
c00246c9:	85 c0                	test   eax,eax
c00246cb:	0f 95 c3             	setne  bl
c00246ce:	31 c0                	xor    eax,eax
c00246d0:	85 d2                	test   edx,edx
c00246d2:	0f 95 c0             	setne  al
c00246d5:	09 c7                	or     edi,eax
c00246d7:	09 fb                	or     ebx,edi
c00246d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00246dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246df:	01 da                	add    edx,ebx
c00246e1:	83 d6 00             	adc    esi,0x0
c00246e4:	eb 39                	jmp    c002471f <__adddf3+0x21c>
c00246e6:	be 20 00 00 00       	mov    esi,0x20
c00246eb:	29 de                	sub    esi,ebx
c00246ed:	89 c7                	mov    edi,eax
c00246ef:	89 f1                	mov    ecx,esi
c00246f1:	d3 e7                	shl    edi,cl
c00246f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00246f6:	89 d7                	mov    edi,edx
c00246f8:	88 d9                	mov    cl,bl
c00246fa:	d3 ef                	shr    edi,cl
c00246fc:	89 f9                	mov    ecx,edi
c00246fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024701:	09 cf                	or     edi,ecx
c0024703:	88 d9                	mov    cl,bl
c0024705:	d3 e8                	shr    eax,cl
c0024707:	89 f1                	mov    ecx,esi
c0024709:	d3 e2                	shl    edx,cl
c002470b:	85 d2                	test   edx,edx
c002470d:	0f 95 c2             	setne  dl
c0024710:	0f b6 d2             	movzx  edx,dl
c0024713:	09 d7                	or     edi,edx
c0024715:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024718:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002471b:	01 fa                	add    edx,edi
c002471d:	11 c6                	adc    esi,eax
c002471f:	89 f0                	mov    eax,esi
c0024721:	eb 77                	jmp    c002479a <__adddf3+0x297>
c0024723:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024726:	46                   	inc    esi
c0024727:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002472a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024730:	75 41                	jne    c0024773 <__adddf3+0x270>
c0024732:	89 d3                	mov    ebx,edx
c0024734:	09 c3                	or     ebx,eax
c0024736:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002473d:	75 27                	jne    c0024766 <__adddf3+0x263>
c002473f:	85 db                	test   ebx,ebx
c0024741:	0f 84 fb 03 00 00    	je     c0024b42 <__adddf3+0x63f>
c0024747:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002474a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002474d:	0f 84 f5 03 00 00    	je     c0024b48 <__adddf3+0x645>
c0024753:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024756:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024759:	85 c0                	test   eax,eax
c002475b:	0f 89 91 03 00 00    	jns    c0024af2 <__adddf3+0x5ef>
c0024761:	e9 85 03 00 00       	jmp    c0024aeb <__adddf3+0x5e8>
c0024766:	85 db                	test   ebx,ebx
c0024768:	0f 85 da 03 00 00    	jne    c0024b48 <__adddf3+0x645>
c002476e:	e9 cf 03 00 00       	jmp    c0024b42 <__adddf3+0x63f>
c0024773:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024776:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024779:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002477c:	f7 d1                	not    ecx
c002477e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024784:	0f 84 70 03 00 00    	je     c0024afa <__adddf3+0x5f7>
c002478a:	d1 ea                	shr    edx,1
c002478c:	89 c1                	mov    ecx,eax
c002478e:	c1 e1 1f             	shl    ecx,0x1f
c0024791:	09 ca                	or     edx,ecx
c0024793:	d1 e8                	shr    eax,1
c0024795:	e9 6f 03 00 00       	jmp    c0024b09 <__adddf3+0x606>
c002479a:	85 c0                	test   eax,eax
c002479c:	0f 89 67 03 00 00    	jns    c0024b09 <__adddf3+0x606>
c00247a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00247a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00247a8:	f7 d1                	not    ecx
c00247aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00247b0:	0f 84 44 03 00 00    	je     c0024afa <__adddf3+0x5f7>
c00247b6:	89 d1                	mov    ecx,edx
c00247b8:	d1 e9                	shr    ecx,1
c00247ba:	83 e2 01             	and    edx,0x1
c00247bd:	09 ca                	or     edx,ecx
c00247bf:	89 c1                	mov    ecx,eax
c00247c1:	c1 e1 1f             	shl    ecx,0x1f
c00247c4:	09 ca                	or     edx,ecx
c00247c6:	d1 e8                	shr    eax,1
c00247c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00247cd:	e9 37 03 00 00       	jmp    c0024b09 <__adddf3+0x606>
c00247d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00247d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00247db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00247de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00247e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00247e7:	29 de                	sub    esi,ebx
c00247e9:	85 f6                	test   esi,esi
c00247eb:	0f 8e bd 00 00 00    	jle    c00248ae <__adddf3+0x3ab>
c00247f1:	85 db                	test   ebx,ebx
c00247f3:	75 17                	jne    c002480c <__adddf3+0x309>
c00247f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00247f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00247fb:	0f 84 47 03 00 00    	je     c0024b48 <__adddf3+0x645>
c0024801:	4e                   	dec    esi
c0024802:	75 20                	jne    c0024824 <__adddf3+0x321>
c0024804:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024807:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002480a:	eb 5b                	jmp    c0024867 <__adddf3+0x364>
c002480c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002480f:	f7 d3                	not    ebx
c0024811:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024817:	0f 84 2b 03 00 00    	je     c0024b48 <__adddf3+0x645>
c002481d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024824:	83 fe 1f             	cmp    esi,0x1f
c0024827:	7e 49                	jle    c0024872 <__adddf3+0x36f>
c0024829:	83 fe 3f             	cmp    esi,0x3f
c002482c:	0f 8f 16 03 00 00    	jg     c0024b48 <__adddf3+0x645>
c0024832:	83 e6 1f             	and    esi,0x1f
c0024835:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024838:	89 f1                	mov    ecx,esi
c002483a:	d3 ef                	shr    edi,cl
c002483c:	31 db                	xor    ebx,ebx
c002483e:	85 f6                	test   esi,esi
c0024840:	74 13                	je     c0024855 <__adddf3+0x352>
c0024842:	b9 20 00 00 00       	mov    ecx,0x20
c0024847:	29 f1                	sub    ecx,esi
c0024849:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002484c:	d3 e6                	shl    esi,cl
c002484e:	31 db                	xor    ebx,ebx
c0024850:	85 f6                	test   esi,esi
c0024852:	0f 95 c3             	setne  bl
c0024855:	31 c9                	xor    ecx,ecx
c0024857:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002485b:	0f 95 c1             	setne  cl
c002485e:	09 cf                	or     edi,ecx
c0024860:	09 fb                	or     ebx,edi
c0024862:	29 da                	sub    edx,ebx
c0024864:	83 d8 00             	sbb    eax,0x0
c0024867:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002486a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002486d:	e9 aa 01 00 00       	jmp    c0024a1c <__adddf3+0x519>
c0024872:	bf 20 00 00 00       	mov    edi,0x20
c0024877:	29 f7                	sub    edi,esi
c0024879:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002487c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002487f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024882:	d3 e3                	shl    ebx,cl
c0024884:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024887:	89 f1                	mov    ecx,esi
c0024889:	d3 ef                	shr    edi,cl
c002488b:	09 fb                	or     ebx,edi
c002488d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024890:	89 f1                	mov    ecx,esi
c0024892:	d3 ef                	shr    edi,cl
c0024894:	89 fe                	mov    esi,edi
c0024896:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024899:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002489c:	d3 e7                	shl    edi,cl
c002489e:	85 ff                	test   edi,edi
c00248a0:	0f 95 c1             	setne  cl
c00248a3:	0f b6 c9             	movzx  ecx,cl
c00248a6:	09 cb                	or     ebx,ecx
c00248a8:	29 da                	sub    edx,ebx
c00248aa:	19 f0                	sbb    eax,esi
c00248ac:	eb b9                	jmp    c0024867 <__adddf3+0x364>
c00248ae:	0f 84 cd 00 00 00    	je     c0024981 <__adddf3+0x47e>
c00248b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00248b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00248ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00248bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00248c1:	75 1b                	jne    c00248de <__adddf3+0x3db>
c00248c3:	89 d6                	mov    esi,edx
c00248c5:	09 c6                	or     esi,eax
c00248c7:	0f 84 7b 02 00 00    	je     c0024b48 <__adddf3+0x645>
c00248cd:	4b                   	dec    ebx
c00248ce:	75 24                	jne    c00248f4 <__adddf3+0x3f1>
c00248d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00248d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00248d6:	29 d1                	sub    ecx,edx
c00248d8:	19 c6                	sbb    esi,eax
c00248da:	89 ca                	mov    edx,ecx
c00248dc:	eb 61                	jmp    c002493f <__adddf3+0x43c>
c00248de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248e1:	f7 d6                	not    esi
c00248e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00248e9:	0f 84 59 02 00 00    	je     c0024b48 <__adddf3+0x645>
c00248ef:	0d 00 00 00 80       	or     eax,0x80000000
c00248f4:	83 fb 1f             	cmp    ebx,0x1f
c00248f7:	7e 4d                	jle    c0024946 <__adddf3+0x443>
c00248f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00248fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00248ff:	83 fb 3f             	cmp    ebx,0x3f
c0024902:	0f 8f 40 02 00 00    	jg     c0024b48 <__adddf3+0x645>
c0024908:	83 e3 1f             	and    ebx,0x1f
c002490b:	89 d9                	mov    ecx,ebx
c002490d:	89 c7                	mov    edi,eax
c002490f:	d3 ef                	shr    edi,cl
c0024911:	31 db                	xor    ebx,ebx
c0024913:	85 c9                	test   ecx,ecx
c0024915:	74 12                	je     c0024929 <__adddf3+0x426>
c0024917:	be 20 00 00 00       	mov    esi,0x20
c002491c:	29 ce                	sub    esi,ecx
c002491e:	89 f1                	mov    ecx,esi
c0024920:	d3 e0                	shl    eax,cl
c0024922:	31 db                	xor    ebx,ebx
c0024924:	85 c0                	test   eax,eax
c0024926:	0f 95 c3             	setne  bl
c0024929:	31 c0                	xor    eax,eax
c002492b:	85 d2                	test   edx,edx
c002492d:	0f 95 c0             	setne  al
c0024930:	09 c7                	or     edi,eax
c0024932:	09 fb                	or     ebx,edi
c0024934:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024937:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002493a:	29 da                	sub    edx,ebx
c002493c:	83 de 00             	sbb    esi,0x0
c002493f:	89 f0                	mov    eax,esi
c0024941:	e9 d6 00 00 00       	jmp    c0024a1c <__adddf3+0x519>
c0024946:	be 20 00 00 00       	mov    esi,0x20
c002494b:	29 de                	sub    esi,ebx
c002494d:	89 c7                	mov    edi,eax
c002494f:	89 f1                	mov    ecx,esi
c0024951:	d3 e7                	shl    edi,cl
c0024953:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024956:	89 d7                	mov    edi,edx
c0024958:	88 d9                	mov    cl,bl
c002495a:	d3 ef                	shr    edi,cl
c002495c:	89 f9                	mov    ecx,edi
c002495e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024961:	09 cf                	or     edi,ecx
c0024963:	88 d9                	mov    cl,bl
c0024965:	d3 e8                	shr    eax,cl
c0024967:	89 f1                	mov    ecx,esi
c0024969:	d3 e2                	shl    edx,cl
c002496b:	85 d2                	test   edx,edx
c002496d:	0f 95 c2             	setne  dl
c0024970:	0f b6 d2             	movzx  edx,dl
c0024973:	09 d7                	or     edi,edx
c0024975:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024978:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002497b:	29 fa                	sub    edx,edi
c002497d:	19 c6                	sbb    esi,eax
c002497f:	eb be                	jmp    c002493f <__adddf3+0x43c>
c0024981:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024984:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024987:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002498d:	75 6a                	jne    c00249f9 <__adddf3+0x4f6>
c002498f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024993:	75 58                	jne    c00249ed <__adddf3+0x4ea>
c0024995:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024998:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002499b:	89 d6                	mov    esi,edx
c002499d:	09 c6                	or     esi,eax
c002499f:	75 17                	jne    c00249b8 <__adddf3+0x4b5>
c00249a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00249a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00249a7:	85 db                	test   ebx,ebx
c00249a9:	0f 85 99 01 00 00    	jne    c0024b48 <__adddf3+0x645>
c00249af:	31 ff                	xor    edi,edi
c00249b1:	31 c9                	xor    ecx,ecx
c00249b3:	e9 90 01 00 00       	jmp    c0024b48 <__adddf3+0x645>
c00249b8:	85 db                	test   ebx,ebx
c00249ba:	0f 84 88 01 00 00    	je     c0024b48 <__adddf3+0x645>
c00249c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00249c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00249c6:	85 c0                	test   eax,eax
c00249c8:	79 10                	jns    c00249da <__adddf3+0x4d7>
c00249ca:	31 c9                	xor    ecx,ecx
c00249cc:	f7 da                	neg    edx
c00249ce:	0f 95 c1             	setne  cl
c00249d1:	01 c8                	add    eax,ecx
c00249d3:	f7 d8                	neg    eax
c00249d5:	e9 2f 01 00 00       	jmp    c0024b09 <__adddf3+0x606>
c00249da:	31 ff                	xor    edi,edi
c00249dc:	31 c9                	xor    ecx,ecx
c00249de:	89 c3                	mov    ebx,eax
c00249e0:	09 d3                	or     ebx,edx
c00249e2:	0f 84 60 01 00 00    	je     c0024b48 <__adddf3+0x645>
c00249e8:	e9 05 01 00 00       	jmp    c0024af2 <__adddf3+0x5ef>
c00249ed:	31 ff                	xor    edi,edi
c00249ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00249f4:	e9 4f 01 00 00       	jmp    c0024b48 <__adddf3+0x645>
c00249f9:	89 c1                	mov    ecx,eax
c00249fb:	89 d0                	mov    eax,edx
c00249fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024a00:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024a03:	89 ca                	mov    edx,ecx
c0024a05:	85 c9                	test   ecx,ecx
c0024a07:	79 2c                	jns    c0024a35 <__adddf3+0x532>
c0024a09:	31 c9                	xor    ecx,ecx
c0024a0b:	f7 d8                	neg    eax
c0024a0d:	0f 95 c1             	setne  cl
c0024a10:	01 ca                	add    edx,ecx
c0024a12:	f7 da                	neg    edx
c0024a14:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024a17:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024a1a:	eb 19                	jmp    c0024a35 <__adddf3+0x532>
c0024a1c:	85 c0                	test   eax,eax
c0024a1e:	0f 89 e5 00 00 00    	jns    c0024b09 <__adddf3+0x606>
c0024a24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024a29:	89 c1                	mov    ecx,eax
c0024a2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024a2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024a31:	89 d0                	mov    eax,edx
c0024a33:	89 ca                	mov    edx,ecx
c0024a35:	85 d2                	test   edx,edx
c0024a37:	74 59                	je     c0024a92 <__adddf3+0x58f>
c0024a39:	0f bd da             	bsr    ebx,edx
c0024a3c:	83 f3 1f             	xor    ebx,0x1f
c0024a3f:	88 d9                	mov    cl,bl
c0024a41:	d3 e2                	shl    edx,cl
c0024a43:	bf 20 00 00 00       	mov    edi,0x20
c0024a48:	89 f9                	mov    ecx,edi
c0024a4a:	29 d9                	sub    ecx,ebx
c0024a4c:	89 c6                	mov    esi,eax
c0024a4e:	d3 ee                	shr    esi,cl
c0024a50:	09 d6                	or     esi,edx
c0024a52:	88 d9                	mov    cl,bl
c0024a54:	d3 e0                	shl    eax,cl
c0024a56:	89 c2                	mov    edx,eax
c0024a58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a5b:	25 ff 07 00 00       	and    eax,0x7ff
c0024a60:	39 d8                	cmp    eax,ebx
c0024a62:	7f 22                	jg     c0024a86 <__adddf3+0x583>
c0024a64:	29 c3                	sub    ebx,eax
c0024a66:	43                   	inc    ebx
c0024a67:	88 d9                	mov    cl,bl
c0024a69:	d3 ea                	shr    edx,cl
c0024a6b:	29 df                	sub    edi,ebx
c0024a6d:	89 f9                	mov    ecx,edi
c0024a6f:	89 f0                	mov    eax,esi
c0024a71:	d3 e0                	shl    eax,cl
c0024a73:	09 c2                	or     edx,eax
c0024a75:	89 f0                	mov    eax,esi
c0024a77:	88 d9                	mov    cl,bl
c0024a79:	d3 e8                	shr    eax,cl
c0024a7b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024a7e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024a84:	eb 6f                	jmp    c0024af5 <__adddf3+0x5f2>
c0024a86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a89:	29 d8                	sub    eax,ebx
c0024a8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024a8e:	89 f0                	mov    eax,esi
c0024a90:	eb 59                	jmp    c0024aeb <__adddf3+0x5e8>
c0024a92:	85 c0                	test   eax,eax
c0024a94:	74 6a                	je     c0024b00 <__adddf3+0x5fd>
c0024a96:	0f bd c8             	bsr    ecx,eax
c0024a99:	83 f1 1f             	xor    ecx,0x1f
c0024a9c:	d3 e0                	shl    eax,cl
c0024a9e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024aa1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024aa7:	83 c1 20             	add    ecx,0x20
c0024aaa:	39 cb                	cmp    ebx,ecx
c0024aac:	7f 35                	jg     c0024ae3 <__adddf3+0x5e0>
c0024aae:	29 d9                	sub    ecx,ebx
c0024ab0:	8d 71 01             	lea    esi,[ecx+0x1]
c0024ab3:	83 fe 1f             	cmp    esi,0x1f
c0024ab6:	7e 09                	jle    c0024ac1 <__adddf3+0x5be>
c0024ab8:	83 e9 1f             	sub    ecx,0x1f
c0024abb:	d3 e8                	shr    eax,cl
c0024abd:	89 c3                	mov    ebx,eax
c0024abf:	eb 11                	jmp    c0024ad2 <__adddf3+0x5cf>
c0024ac1:	b9 20 00 00 00       	mov    ecx,0x20
c0024ac6:	29 f1                	sub    ecx,esi
c0024ac8:	89 c3                	mov    ebx,eax
c0024aca:	d3 e3                	shl    ebx,cl
c0024acc:	89 f1                	mov    ecx,esi
c0024ace:	d3 e8                	shr    eax,cl
c0024ad0:	89 c2                	mov    edx,eax
c0024ad2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024ad5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024ada:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024add:	89 d0                	mov    eax,edx
c0024adf:	89 da                	mov    edx,ebx
c0024ae1:	eb 26                	jmp    c0024b09 <__adddf3+0x606>
c0024ae3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024ae6:	29 cf                	sub    edi,ecx
c0024ae8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024aeb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024af0:	eb 17                	jmp    c0024b09 <__adddf3+0x606>
c0024af2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024af5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024af8:	eb 0f                	jmp    c0024b09 <__adddf3+0x606>
c0024afa:	31 d2                	xor    edx,edx
c0024afc:	31 c0                	xor    eax,eax
c0024afe:	eb 09                	jmp    c0024b09 <__adddf3+0x606>
c0024b00:	89 c2                	mov    edx,eax
c0024b02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024b09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b0c:	c1 e1 14             	shl    ecx,0x14
c0024b0f:	89 c3                	mov    ebx,eax
c0024b11:	c1 eb 0b             	shr    ebx,0xb
c0024b14:	09 d9                	or     ecx,ebx
c0024b16:	89 d3                	mov    ebx,edx
c0024b18:	c1 eb 0b             	shr    ebx,0xb
c0024b1b:	c1 e0 15             	shl    eax,0x15
c0024b1e:	09 d8                	or     eax,ebx
c0024b20:	89 c7                	mov    edi,eax
c0024b22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024b28:	0f 95 c0             	setne  al
c0024b2b:	89 c6                	mov    esi,eax
c0024b2d:	09 f3                	or     ebx,esi
c0024b2f:	83 e3 01             	and    ebx,0x1
c0024b32:	c1 ea 0a             	shr    edx,0xa
c0024b35:	21 da                	and    edx,ebx
c0024b37:	89 f8                	mov    eax,edi
c0024b39:	01 d0                	add    eax,edx
c0024b3b:	83 d1 00             	adc    ecx,0x0
c0024b3e:	89 c7                	mov    edi,eax
c0024b40:	eb 06                	jmp    c0024b48 <__adddf3+0x645>
c0024b42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024b45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024b48:	89 f8                	mov    eax,edi
c0024b4a:	89 ca                	mov    edx,ecx
c0024b4c:	83 c4 24             	add    esp,0x24
c0024b4f:	5b                   	pop    ebx
c0024b50:	5e                   	pop    esi
c0024b51:	5f                   	pop    edi
c0024b52:	5d                   	pop    ebp
c0024b53:	c3                   	ret    

c0024b54 <__subdf3>:
c0024b54:	55                   	push   ebp
c0024b55:	89 e5                	mov    ebp,esp
c0024b57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024b5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024b5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024b63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024b66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024b69:	5d                   	pop    ebp
c0024b6a:	e9 94 f9 ff ff       	jmp    c0024503 <__adddf3>

c0024b6f <__negdf2>:
c0024b6f:	55                   	push   ebp
c0024b70:	89 e5                	mov    ebp,esp
c0024b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024b75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024b78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024b7e:	5d                   	pop    ebp
c0024b7f:	c3                   	ret    

c0024b80 <__muldf3>:
c0024b80:	55                   	push   ebp
c0024b81:	89 e5                	mov    ebp,esp
c0024b83:	57                   	push   edi
c0024b84:	56                   	push   esi
c0024b85:	53                   	push   ebx
c0024b86:	83 ec 24             	sub    esp,0x24
c0024b89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024b8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024b92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024b95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024b98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0024b9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b9e:	89 c8                	mov    eax,ecx
c0024ba0:	c1 f8 14             	sar    eax,0x14
c0024ba3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024ba6:	89 f8                	mov    eax,edi
c0024ba8:	89 fb                	mov    ebx,edi
c0024baa:	c1 e3 0b             	shl    ebx,0xb
c0024bad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024bb0:	c1 e1 0b             	shl    ecx,0xb
c0024bb3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024bb9:	c1 e8 15             	shr    eax,0x15
c0024bbc:	09 c1                	or     ecx,eax
c0024bbe:	89 d6                	mov    esi,edx
c0024bc0:	89 d0                	mov    eax,edx
c0024bc2:	c1 f8 14             	sar    eax,0x14
c0024bc5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024bc8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024bcb:	89 c3                	mov    ebx,eax
c0024bcd:	c1 e3 0b             	shl    ebx,0xb
c0024bd0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024bd3:	c1 e6 0b             	shl    esi,0xb
c0024bd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024bdc:	c1 e8 15             	shr    eax,0x15
c0024bdf:	09 c6                	or     esi,eax
c0024be1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024be4:	25 ff 07 00 00       	and    eax,0x7ff
c0024be9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024bec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024bef:	25 ff 07 00 00       	and    eax,0x7ff
c0024bf4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024bf7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024bfa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024bfd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024c04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024c07:	40                   	inc    eax
c0024c08:	a9 fe 07 00 00       	test   eax,0x7fe
c0024c0d:	0f 85 8d 00 00 00    	jne    c0024ca0 <__muldf3+0x120>
c0024c13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024c16:	09 c8                	or     eax,ecx
c0024c18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0024c1c:	74 44                	je     c0024c62 <__muldf3+0xe2>
c0024c1e:	85 c0                	test   eax,eax
c0024c20:	0f 85 31 02 00 00    	jne    c0024e57 <__muldf3+0x2d7>
c0024c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024c29:	40                   	inc    eax
c0024c2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0024c2f:	75 13                	jne    c0024c44 <__muldf3+0xc4>
c0024c31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024c34:	09 f1                	or     ecx,esi
c0024c36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024c3a:	74 22                	je     c0024c5e <__muldf3+0xde>
c0024c3c:	85 c9                	test   ecx,ecx
c0024c3e:	0f 85 0d 02 00 00    	jne    c0024e51 <__muldf3+0x2d1>
c0024c44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024c48:	0f 89 09 02 00 00    	jns    c0024e57 <__muldf3+0x2d7>
c0024c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024c51:	05 00 00 00 80       	add    eax,0x80000000
c0024c56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024c59:	e9 f9 01 00 00       	jmp    c0024e57 <__muldf3+0x2d7>
c0024c5e:	85 c9                	test   ecx,ecx
c0024c60:	eb 2e                	jmp    c0024c90 <__muldf3+0x110>
c0024c62:	85 c0                	test   eax,eax
c0024c64:	74 20                	je     c0024c86 <__muldf3+0x106>
c0024c66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024c69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024c6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024c6f:	c1 ef 1f             	shr    edi,0x1f
c0024c72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024c75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024c78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024c7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c7e:	09 f9                	or     ecx,edi
c0024c80:	78 1e                	js     c0024ca0 <__muldf3+0x120>
c0024c82:	89 c3                	mov    ebx,eax
c0024c84:	eb e0                	jmp    c0024c66 <__muldf3+0xe6>
c0024c86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024c89:	f7 d0                	not    eax
c0024c8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024c90:	75 b2                	jne    c0024c44 <__muldf3+0xc4>
c0024c92:	31 ff                	xor    edi,edi
c0024c94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0024c9b:	e9 b7 01 00 00       	jmp    c0024e57 <__muldf3+0x2d7>
c0024ca0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024ca3:	40                   	inc    eax
c0024ca4:	a9 fe 07 00 00       	test   eax,0x7fe
c0024ca9:	75 57                	jne    c0024d02 <__muldf3+0x182>
c0024cab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024cae:	09 f0                	or     eax,esi
c0024cb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024cb4:	74 23                	je     c0024cd9 <__muldf3+0x159>
c0024cb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024cba:	0f 89 91 01 00 00    	jns    c0024e51 <__muldf3+0x2d1>
c0024cc0:	85 c0                	test   eax,eax
c0024cc2:	0f 85 89 01 00 00    	jne    c0024e51 <__muldf3+0x2d1>
c0024cc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024ccb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024cd4:	e9 7e 01 00 00       	jmp    c0024e57 <__muldf3+0x2d7>
c0024cd9:	85 c0                	test   eax,eax
c0024cdb:	75 0c                	jne    c0024ce9 <__muldf3+0x169>
c0024cdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024ce1:	0f 89 6a 01 00 00    	jns    c0024e51 <__muldf3+0x2d1>
c0024ce7:	eb df                	jmp    c0024cc8 <__muldf3+0x148>
c0024ce9:	01 f6                	add    esi,esi
c0024ceb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024cee:	c1 ea 1f             	shr    edx,0x1f
c0024cf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024cf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0024cf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024cfa:	09 d6                	or     esi,edx
c0024cfc:	78 04                	js     c0024d02 <__muldf3+0x182>
c0024cfe:	89 c3                	mov    ebx,eax
c0024d00:	eb e7                	jmp    c0024ce9 <__muldf3+0x169>
c0024d02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024d08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024d0e:	89 c8                	mov    eax,ecx
c0024d10:	f7 e6                	mul    esi
c0024d12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024d15:	89 c7                	mov    edi,eax
c0024d17:	89 c8                	mov    eax,ecx
c0024d19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024d1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0024d1f:	89 c1                	mov    ecx,eax
c0024d21:	89 f0                	mov    eax,esi
c0024d23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024d26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024d29:	89 c6                	mov    esi,eax
c0024d2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024d31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024d34:	31 c0                	xor    eax,eax
c0024d36:	01 f1                	add    ecx,esi
c0024d38:	0f 92 c0             	setb   al
c0024d3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0024d3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024d41:	83 d6 00             	adc    esi,0x0
c0024d44:	01 c7                	add    edi,eax
c0024d46:	83 d6 00             	adc    esi,0x0
c0024d49:	01 ca                	add    edx,ecx
c0024d4b:	0f 92 c1             	setb   cl
c0024d4e:	0f b6 c9             	movzx  ecx,cl
c0024d51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024d54:	83 d6 00             	adc    esi,0x0
c0024d57:	01 cf                	add    edi,ecx
c0024d59:	83 d6 00             	adc    esi,0x0
c0024d5c:	31 c9                	xor    ecx,ecx
c0024d5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024d61:	0f 95 c1             	setne  cl
c0024d64:	09 cf                	or     edi,ecx
c0024d66:	85 f6                	test   esi,esi
c0024d68:	78 0c                	js     c0024d76 <__muldf3+0x1f6>
c0024d6a:	01 f6                	add    esi,esi
c0024d6c:	89 f8                	mov    eax,edi
c0024d6e:	c1 e8 1f             	shr    eax,0x1f
c0024d71:	09 c6                	or     esi,eax
c0024d73:	01 ff                	add    edi,edi
c0024d75:	4b                   	dec    ebx
c0024d76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0024d7c:	0f 8f 85 00 00 00    	jg     c0024e07 <__muldf3+0x287>
c0024d82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024d88:	85 db                	test   ebx,ebx
c0024d8a:	0f 8f 84 00 00 00    	jg     c0024e14 <__muldf3+0x294>
c0024d90:	83 fb cc             	cmp    ebx,0xffffffcc
c0024d93:	7c 79                	jl     c0024e0e <__muldf3+0x28e>
c0024d95:	ba 01 00 00 00       	mov    edx,0x1
c0024d9a:	29 da                	sub    edx,ebx
c0024d9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024da2:	83 fa 1f             	cmp    edx,0x1f
c0024da5:	7e 30                	jle    c0024dd7 <__muldf3+0x257>
c0024da7:	83 fa 20             	cmp    edx,0x20
c0024daa:	75 0b                	jne    c0024db7 <__muldf3+0x237>
c0024dac:	31 c0                	xor    eax,eax
c0024dae:	85 ff                	test   edi,edi
c0024db0:	0f 95 c0             	setne  al
c0024db3:	89 c7                	mov    edi,eax
c0024db5:	eb 1a                	jmp    c0024dd1 <__muldf3+0x251>
c0024db7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0024dba:	89 f0                	mov    eax,esi
c0024dbc:	d3 e0                	shl    eax,cl
c0024dbe:	09 f8                	or     eax,edi
c0024dc0:	0f 95 c0             	setne  al
c0024dc3:	0f b6 c0             	movzx  eax,al
c0024dc6:	89 c7                	mov    edi,eax
c0024dc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024dcd:	29 d9                	sub    ecx,ebx
c0024dcf:	d3 ee                	shr    esi,cl
c0024dd1:	09 f7                	or     edi,esi
c0024dd3:	31 db                	xor    ebx,ebx
c0024dd5:	eb 3b                	jmp    c0024e12 <__muldf3+0x292>
c0024dd7:	83 c3 1f             	add    ebx,0x1f
c0024dda:	89 f0                	mov    eax,esi
c0024ddc:	88 d9                	mov    cl,bl
c0024dde:	d3 e0                	shl    eax,cl
c0024de0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024de3:	89 f8                	mov    eax,edi
c0024de5:	88 d1                	mov    cl,dl
c0024de7:	d3 e8                	shr    eax,cl
c0024de9:	89 c1                	mov    ecx,eax
c0024deb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024dee:	09 c8                	or     eax,ecx
c0024df0:	88 d9                	mov    cl,bl
c0024df2:	d3 e7                	shl    edi,cl
c0024df4:	31 db                	xor    ebx,ebx
c0024df6:	85 ff                	test   edi,edi
c0024df8:	0f 95 c3             	setne  bl
c0024dfb:	89 df                	mov    edi,ebx
c0024dfd:	09 c7                	or     edi,eax
c0024dff:	88 d1                	mov    cl,dl
c0024e01:	d3 ee                	shr    esi,cl
c0024e03:	31 db                	xor    ebx,ebx
c0024e05:	eb 0d                	jmp    c0024e14 <__muldf3+0x294>
c0024e07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0024e0c:	eb 02                	jmp    c0024e10 <__muldf3+0x290>
c0024e0e:	31 db                	xor    ebx,ebx
c0024e10:	31 ff                	xor    edi,edi
c0024e12:	31 f6                	xor    esi,esi
c0024e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024e17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0024e1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024e1f:	09 c3                	or     ebx,eax
c0024e21:	c1 e3 14             	shl    ebx,0x14
c0024e24:	89 f0                	mov    eax,esi
c0024e26:	c1 e8 0b             	shr    eax,0xb
c0024e29:	09 c3                	or     ebx,eax
c0024e2b:	89 f8                	mov    eax,edi
c0024e2d:	c1 e8 0b             	shr    eax,0xb
c0024e30:	c1 e6 15             	shl    esi,0x15
c0024e33:	09 c6                	or     esi,eax
c0024e35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0024e3b:	0f 95 c1             	setne  cl
c0024e3e:	09 c8                	or     eax,ecx
c0024e40:	83 e0 01             	and    eax,0x1
c0024e43:	c1 ef 0a             	shr    edi,0xa
c0024e46:	21 c7                	and    edi,eax
c0024e48:	01 f7                	add    edi,esi
c0024e4a:	83 d3 00             	adc    ebx,0x0
c0024e4d:	89 da                	mov    edx,ebx
c0024e4f:	eb 03                	jmp    c0024e54 <__muldf3+0x2d4>
c0024e51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024e54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024e57:	89 f8                	mov    eax,edi
c0024e59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024e5c:	83 c4 24             	add    esp,0x24
c0024e5f:	5b                   	pop    ebx
c0024e60:	5e                   	pop    esi
c0024e61:	5f                   	pop    edi
c0024e62:	5d                   	pop    ebp
c0024e63:	c3                   	ret    

c0024e64 <__divdf3>:
c0024e64:	55                   	push   ebp
c0024e65:	89 e5                	mov    ebp,esp
c0024e67:	57                   	push   edi
c0024e68:	56                   	push   esi
c0024e69:	53                   	push   ebx
c0024e6a:	83 ec 2c             	sub    esp,0x2c
c0024e6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024e70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024e73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024e76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024e79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024e7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024e7f:	89 ce                	mov    esi,ecx
c0024e81:	89 c8                	mov    eax,ecx
c0024e83:	c1 f8 14             	sar    eax,0x14
c0024e86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024e89:	89 f8                	mov    eax,edi
c0024e8b:	89 fb                	mov    ebx,edi
c0024e8d:	c1 e3 0b             	shl    ebx,0xb
c0024e90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024e93:	c1 e6 0b             	shl    esi,0xb
c0024e96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024e9c:	c1 e8 15             	shr    eax,0x15
c0024e9f:	09 c6                	or     esi,eax
c0024ea1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024ea4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024ea7:	89 c2                	mov    edx,eax
c0024ea9:	c1 fa 14             	sar    edx,0x14
c0024eac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024eaf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024eb2:	89 de                	mov    esi,ebx
c0024eb4:	c1 e6 0b             	shl    esi,0xb
c0024eb7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024eba:	c1 e0 0b             	shl    eax,0xb
c0024ebd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024ec2:	c1 eb 15             	shr    ebx,0x15
c0024ec5:	09 d8                	or     eax,ebx
c0024ec7:	89 c2                	mov    edx,eax
c0024ec9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ecc:	25 ff 07 00 00       	and    eax,0x7ff
c0024ed1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024ed4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024ed7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024edd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024ee0:	29 d8                	sub    eax,ebx
c0024ee2:	05 ff 03 00 00       	add    eax,0x3ff
c0024ee7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024eea:	46                   	inc    esi
c0024eeb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024ef1:	0f 85 a5 00 00 00    	jne    c0024f9c <__divdf3+0x138>
c0024ef7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024efa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024efd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024f01:	74 2a                	je     c0024f2d <__divdf3+0xc9>
c0024f03:	85 f6                	test   esi,esi
c0024f05:	0f 85 cc 02 00 00    	jne    c00251d7 <__divdf3+0x373>
c0024f0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024f0e:	40                   	inc    eax
c0024f0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0024f14:	75 26                	jne    c0024f3c <__divdf3+0xd8>
c0024f16:	85 db                	test   ebx,ebx
c0024f18:	74 22                	je     c0024f3c <__divdf3+0xd8>
c0024f1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024f1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024f20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024f23:	09 d0                	or     eax,edx
c0024f25:	0f 85 ac 02 00 00    	jne    c00251d7 <__divdf3+0x373>
c0024f2b:	eb 63                	jmp    c0024f90 <__divdf3+0x12c>
c0024f2d:	85 f6                	test   esi,esi
c0024f2f:	75 22                	jne    c0024f53 <__divdf3+0xef>
c0024f31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024f34:	40                   	inc    eax
c0024f35:	a9 fe 07 00 00       	test   eax,0x7fe
c0024f3a:	74 36                	je     c0024f72 <__divdf3+0x10e>
c0024f3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024f40:	0f 89 91 02 00 00    	jns    c00251d7 <__divdf3+0x373>
c0024f46:	89 f8                	mov    eax,edi
c0024f48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024f4e:	e9 80 02 00 00       	jmp    c00251d3 <__divdf3+0x36f>
c0024f53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024f56:	01 f6                	add    esi,esi
c0024f58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024f5b:	c1 ef 1f             	shr    edi,0x1f
c0024f5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024f61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024f64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024f67:	09 f7                	or     edi,esi
c0024f69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024f6c:	78 2e                	js     c0024f9c <__divdf3+0x138>
c0024f6e:	89 c8                	mov    eax,ecx
c0024f70:	eb e1                	jmp    c0024f53 <__divdf3+0xef>
c0024f72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024f75:	09 d0                	or     eax,edx
c0024f77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024f7b:	74 0f                	je     c0024f8c <__divdf3+0x128>
c0024f7d:	85 c0                	test   eax,eax
c0024f7f:	74 bb                	je     c0024f3c <__divdf3+0xd8>
c0024f81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024f84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024f87:	e9 4b 02 00 00       	jmp    c00251d7 <__divdf3+0x373>
c0024f8c:	85 c0                	test   eax,eax
c0024f8e:	75 ac                	jne    c0024f3c <__divdf3+0xd8>
c0024f90:	31 ff                	xor    edi,edi
c0024f92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024f97:	e9 3b 02 00 00       	jmp    c00251d7 <__divdf3+0x373>
c0024f9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024f9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024fa2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024fa8:	75 6b                	jne    c0025015 <__divdf3+0x1b1>
c0024faa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024fad:	09 d6                	or     esi,edx
c0024faf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024fb3:	74 28                	je     c0024fdd <__divdf3+0x179>
c0024fb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024fb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024fbb:	85 f6                	test   esi,esi
c0024fbd:	0f 85 14 02 00 00    	jne    c00251d7 <__divdf3+0x373>
c0024fc3:	31 ff                	xor    edi,edi
c0024fc5:	31 c9                	xor    ecx,ecx
c0024fc7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024fca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024fcd:	0f 89 04 02 00 00    	jns    c00251d7 <__divdf3+0x373>
c0024fd3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024fd8:	e9 fa 01 00 00       	jmp    c00251d7 <__divdf3+0x373>
c0024fdd:	85 f6                	test   esi,esi
c0024fdf:	75 1b                	jne    c0024ffc <__divdf3+0x198>
c0024fe1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024fe4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024fe7:	25 00 00 00 80       	and    eax,0x80000000
c0024fec:	31 c9                	xor    ecx,ecx
c0024fee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024ff3:	89 cf                	mov    edi,ecx
c0024ff5:	89 c1                	mov    ecx,eax
c0024ff7:	e9 db 01 00 00       	jmp    c00251d7 <__divdf3+0x373>
c0024ffc:	01 d2                	add    edx,edx
c0024ffe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025001:	c1 eb 1f             	shr    ebx,0x1f
c0025004:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025007:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002500a:	8d 48 01             	lea    ecx,[eax+0x1]
c002500d:	09 da                	or     edx,ebx
c002500f:	78 04                	js     c0025015 <__divdf3+0x1b1>
c0025011:	89 c8                	mov    eax,ecx
c0025013:	eb e7                	jmp    c0024ffc <__divdf3+0x198>
c0025015:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025018:	81 ce 00 00 00 80    	or     esi,0x80000000
c002501e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025024:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025027:	39 d6                	cmp    esi,edx
c0025029:	77 0d                	ja     c0025038 <__divdf3+0x1d4>
c002502b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002502e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025031:	72 1b                	jb     c002504e <__divdf3+0x1ea>
c0025033:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025036:	75 16                	jne    c002504e <__divdf3+0x1ea>
c0025038:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002503b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002503e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025041:	83 de 00             	sbb    esi,0x0
c0025044:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025047:	ba 01 00 00 00       	mov    edx,0x1
c002504c:	eb 02                	jmp    c0025050 <__divdf3+0x1ec>
c002504e:	31 d2                	xor    edx,edx
c0025050:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025057:	31 ff                	xor    edi,edi
c0025059:	01 ff                	add    edi,edi
c002505b:	89 d1                	mov    ecx,edx
c002505d:	c1 e9 1f             	shr    ecx,0x1f
c0025060:	09 cf                	or     edi,ecx
c0025062:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025065:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025068:	89 da                	mov    edx,ebx
c002506a:	89 f3                	mov    ebx,esi
c002506c:	8d 34 36             	lea    esi,[esi+esi*1]
c002506f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025072:	c1 e9 1f             	shr    ecx,0x1f
c0025075:	09 ce                	or     esi,ecx
c0025077:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002507a:	01 c9                	add    ecx,ecx
c002507c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002507f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025082:	85 db                	test   ebx,ebx
c0025084:	78 29                	js     c00250af <__divdf3+0x24b>
c0025086:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025089:	72 07                	jb     c0025092 <__divdf3+0x22e>
c002508b:	75 3c                	jne    c00250c9 <__divdf3+0x265>
c002508d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025090:	77 37                	ja     c00250c9 <__divdf3+0x265>
c0025092:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025095:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025098:	31 d2                	xor    edx,edx
c002509a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002509d:	0f 97 c2             	seta   dl
c00250a0:	29 d6                	sub    esi,edx
c00250a2:	89 d9                	mov    ecx,ebx
c00250a4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00250a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00250aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00250ad:	eb 17                	jmp    c00250c6 <__divdf3+0x262>
c00250af:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00250b2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00250b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00250b8:	0f 97 c1             	seta   cl
c00250bb:	0f b6 c9             	movzx  ecx,cl
c00250be:	29 ce                	sub    esi,ecx
c00250c0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00250c3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00250c6:	83 ca 01             	or     edx,0x1
c00250c9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00250cc:	75 8b                	jne    c0025059 <__divdf3+0x1f5>
c00250ce:	c1 e7 09             	shl    edi,0x9
c00250d1:	89 d1                	mov    ecx,edx
c00250d3:	c1 e9 17             	shr    ecx,0x17
c00250d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00250d9:	09 f3                	or     ebx,esi
c00250db:	0f 95 c3             	setne  bl
c00250de:	0f b6 db             	movzx  ebx,bl
c00250e1:	c1 e2 09             	shl    edx,0x9
c00250e4:	09 d3                	or     ebx,edx
c00250e6:	89 ca                	mov    edx,ecx
c00250e8:	09 fa                	or     edx,edi
c00250ea:	78 0c                	js     c00250f8 <__divdf3+0x294>
c00250ec:	01 d2                	add    edx,edx
c00250ee:	89 d9                	mov    ecx,ebx
c00250f0:	c1 e9 1f             	shr    ecx,0x1f
c00250f3:	09 ca                	or     edx,ecx
c00250f5:	01 db                	add    ebx,ebx
c00250f7:	48                   	dec    eax
c00250f8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00250fd:	0f 8f 83 00 00 00    	jg     c0025186 <__divdf3+0x322>
c0025103:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025109:	85 c0                	test   eax,eax
c002510b:	0f 8f 82 00 00 00    	jg     c0025193 <__divdf3+0x32f>
c0025111:	83 f8 cc             	cmp    eax,0xffffffcc
c0025114:	7c 77                	jl     c002518d <__divdf3+0x329>
c0025116:	be 01 00 00 00       	mov    esi,0x1
c002511b:	29 c6                	sub    esi,eax
c002511d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025123:	83 fe 1f             	cmp    esi,0x1f
c0025126:	7e 2f                	jle    c0025157 <__divdf3+0x2f3>
c0025128:	83 fe 20             	cmp    esi,0x20
c002512b:	75 0a                	jne    c0025137 <__divdf3+0x2d3>
c002512d:	85 db                	test   ebx,ebx
c002512f:	0f 95 c3             	setne  bl
c0025132:	0f b6 db             	movzx  ebx,bl
c0025135:	eb 1a                	jmp    c0025151 <__divdf3+0x2ed>
c0025137:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002513a:	89 d7                	mov    edi,edx
c002513c:	d3 e7                	shl    edi,cl
c002513e:	89 f9                	mov    ecx,edi
c0025140:	09 d9                	or     ecx,ebx
c0025142:	0f 95 c3             	setne  bl
c0025145:	0f b6 db             	movzx  ebx,bl
c0025148:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002514d:	29 c1                	sub    ecx,eax
c002514f:	d3 ea                	shr    edx,cl
c0025151:	09 d3                	or     ebx,edx
c0025153:	31 c0                	xor    eax,eax
c0025155:	eb 3a                	jmp    c0025191 <__divdf3+0x32d>
c0025157:	83 c0 1f             	add    eax,0x1f
c002515a:	89 d7                	mov    edi,edx
c002515c:	88 c1                	mov    cl,al
c002515e:	d3 e7                	shl    edi,cl
c0025160:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025163:	89 df                	mov    edi,ebx
c0025165:	89 f1                	mov    ecx,esi
c0025167:	d3 ef                	shr    edi,cl
c0025169:	89 f9                	mov    ecx,edi
c002516b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002516e:	09 cf                	or     edi,ecx
c0025170:	88 c1                	mov    cl,al
c0025172:	d3 e3                	shl    ebx,cl
c0025174:	85 db                	test   ebx,ebx
c0025176:	0f 95 c3             	setne  bl
c0025179:	0f b6 db             	movzx  ebx,bl
c002517c:	09 fb                	or     ebx,edi
c002517e:	89 f1                	mov    ecx,esi
c0025180:	d3 ea                	shr    edx,cl
c0025182:	31 c0                	xor    eax,eax
c0025184:	eb 0d                	jmp    c0025193 <__divdf3+0x32f>
c0025186:	b8 ff 07 00 00       	mov    eax,0x7ff
c002518b:	eb 02                	jmp    c002518f <__divdf3+0x32b>
c002518d:	31 c0                	xor    eax,eax
c002518f:	31 db                	xor    ebx,ebx
c0025191:	31 d2                	xor    edx,edx
c0025193:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0025196:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0025199:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002519f:	09 c8                	or     eax,ecx
c00251a1:	c1 e0 14             	shl    eax,0x14
c00251a4:	89 d1                	mov    ecx,edx
c00251a6:	c1 e9 0b             	shr    ecx,0xb
c00251a9:	09 c8                	or     eax,ecx
c00251ab:	89 c6                	mov    esi,eax
c00251ad:	89 d9                	mov    ecx,ebx
c00251af:	c1 e9 0b             	shr    ecx,0xb
c00251b2:	c1 e2 15             	shl    edx,0x15
c00251b5:	09 ca                	or     edx,ecx
c00251b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00251bd:	0f 95 c0             	setne  al
c00251c0:	09 c1                	or     ecx,eax
c00251c2:	83 e1 01             	and    ecx,0x1
c00251c5:	c1 eb 0a             	shr    ebx,0xa
c00251c8:	21 cb                	and    ebx,ecx
c00251ca:	01 d3                	add    ebx,edx
c00251cc:	89 d8                	mov    eax,ebx
c00251ce:	83 d6 00             	adc    esi,0x0
c00251d1:	89 f2                	mov    edx,esi
c00251d3:	89 c7                	mov    edi,eax
c00251d5:	89 d1                	mov    ecx,edx
c00251d7:	89 f8                	mov    eax,edi
c00251d9:	89 ca                	mov    edx,ecx
c00251db:	83 c4 2c             	add    esp,0x2c
c00251de:	5b                   	pop    ebx
c00251df:	5e                   	pop    esi
c00251e0:	5f                   	pop    edi
c00251e1:	5d                   	pop    ebp
c00251e2:	c3                   	ret    

c00251e3 <__floatsidf>:
c00251e3:	55                   	push   ebp
c00251e4:	89 e5                	mov    ebp,esp
c00251e6:	56                   	push   esi
c00251e7:	53                   	push   ebx
c00251e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00251eb:	85 db                	test   ebx,ebx
c00251ed:	7e 15                	jle    c0025204 <__floatsidf+0x21>
c00251ef:	0f bd cb             	bsr    ecx,ebx
c00251f2:	83 f1 1f             	xor    ecx,0x1f
c00251f5:	d3 e3                	shl    ebx,cl
c00251f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00251fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0025202:	eb 21                	jmp    c0025225 <__floatsidf+0x42>
c0025204:	b8 00 00 00 00       	mov    eax,0x0
c0025209:	ba 00 00 00 00       	mov    edx,0x0
c002520e:	74 2a                	je     c002523a <__floatsidf+0x57>
c0025210:	f7 db                	neg    ebx
c0025212:	0f bd cb             	bsr    ecx,ebx
c0025215:	83 f1 1f             	xor    ecx,0x1f
c0025218:	d3 e3                	shl    ebx,cl
c002521a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025220:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0025225:	29 c8                	sub    eax,ecx
c0025227:	c1 e0 14             	shl    eax,0x14
c002522a:	89 c1                	mov    ecx,eax
c002522c:	89 de                	mov    esi,ebx
c002522e:	c1 ee 0b             	shr    esi,0xb
c0025231:	09 f1                	or     ecx,esi
c0025233:	89 ca                	mov    edx,ecx
c0025235:	c1 e3 15             	shl    ebx,0x15
c0025238:	89 d8                	mov    eax,ebx
c002523a:	5b                   	pop    ebx
c002523b:	5e                   	pop    esi
c002523c:	5d                   	pop    ebp
c002523d:	c3                   	ret    

c002523e <__floatunsidf>:
c002523e:	55                   	push   ebp
c002523f:	89 e5                	mov    ebp,esp
c0025241:	56                   	push   esi
c0025242:	53                   	push   ebx
c0025243:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025246:	85 db                	test   ebx,ebx
c0025248:	74 2a                	je     c0025274 <__floatunsidf+0x36>
c002524a:	0f bd cb             	bsr    ecx,ebx
c002524d:	83 f1 1f             	xor    ecx,0x1f
c0025250:	d3 e3                	shl    ebx,cl
c0025252:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025258:	b8 1e 04 00 00       	mov    eax,0x41e
c002525d:	29 c8                	sub    eax,ecx
c002525f:	c1 e0 14             	shl    eax,0x14
c0025262:	89 c1                	mov    ecx,eax
c0025264:	89 de                	mov    esi,ebx
c0025266:	c1 ee 0b             	shr    esi,0xb
c0025269:	09 f1                	or     ecx,esi
c002526b:	89 ca                	mov    edx,ecx
c002526d:	c1 e3 15             	shl    ebx,0x15
c0025270:	89 d8                	mov    eax,ebx
c0025272:	eb 04                	jmp    c0025278 <__floatunsidf+0x3a>
c0025274:	31 c0                	xor    eax,eax
c0025276:	31 d2                	xor    edx,edx
c0025278:	5b                   	pop    ebx
c0025279:	5e                   	pop    esi
c002527a:	5d                   	pop    ebp
c002527b:	c3                   	ret    

c002527c <__fixdfsi>:
c002527c:	55                   	push   ebp
c002527d:	89 e5                	mov    ebp,esp
c002527f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025282:	89 d1                	mov    ecx,edx
c0025284:	c1 e1 0b             	shl    ecx,0xb
c0025287:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002528d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025290:	c1 e8 15             	shr    eax,0x15
c0025293:	09 c1                	or     ecx,eax
c0025295:	c1 fa 14             	sar    edx,0x14
c0025298:	78 1f                	js     c00252b9 <__fixdfsi+0x3d>
c002529a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00252a0:	31 c0                	xor    eax,eax
c00252a2:	83 fa 1e             	cmp    edx,0x1e
c00252a5:	77 40                	ja     c00252e7 <__fixdfsi+0x6b>
c00252a7:	89 c8                	mov    eax,ecx
c00252a9:	0d 00 00 00 80       	or     eax,0x80000000
c00252ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00252b3:	29 d1                	sub    ecx,edx
c00252b5:	d3 e8                	shr    eax,cl
c00252b7:	eb 2e                	jmp    c00252e7 <__fixdfsi+0x6b>
c00252b9:	31 c0                	xor    eax,eax
c00252bb:	81 c2 01 04 00 00    	add    edx,0x401
c00252c1:	78 24                	js     c00252e7 <__fixdfsi+0x6b>
c00252c3:	83 fa 1e             	cmp    edx,0x1e
c00252c6:	7e 09                	jle    c00252d1 <__fixdfsi+0x55>
c00252c8:	83 fa 1f             	cmp    edx,0x1f
c00252cb:	75 18                	jne    c00252e5 <__fixdfsi+0x69>
c00252cd:	85 c9                	test   ecx,ecx
c00252cf:	75 14                	jne    c00252e5 <__fixdfsi+0x69>
c00252d1:	89 c8                	mov    eax,ecx
c00252d3:	0d 00 00 00 80       	or     eax,0x80000000
c00252d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00252dd:	29 d1                	sub    ecx,edx
c00252df:	d3 e8                	shr    eax,cl
c00252e1:	f7 d8                	neg    eax
c00252e3:	eb 02                	jmp    c00252e7 <__fixdfsi+0x6b>
c00252e5:	31 c0                	xor    eax,eax
c00252e7:	5d                   	pop    ebp
c00252e8:	c3                   	ret    

c00252e9 <__fixunsdfsi>:
c00252e9:	55                   	push   ebp
c00252ea:	89 e5                	mov    ebp,esp
c00252ec:	53                   	push   ebx
c00252ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00252f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00252f3:	89 d3                	mov    ebx,edx
c00252f5:	c1 fb 14             	sar    ebx,0x14
c00252f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00252fe:	31 c0                	xor    eax,eax
c0025300:	83 fb 1f             	cmp    ebx,0x1f
c0025303:	77 1d                	ja     c0025322 <__fixunsdfsi+0x39>
c0025305:	89 d0                	mov    eax,edx
c0025307:	c1 e0 0b             	shl    eax,0xb
c002530a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002530f:	c1 e9 15             	shr    ecx,0x15
c0025312:	09 c8                	or     eax,ecx
c0025314:	0d 00 00 00 80       	or     eax,0x80000000
c0025319:	b9 1f 00 00 00       	mov    ecx,0x1f
c002531e:	29 d9                	sub    ecx,ebx
c0025320:	d3 e8                	shr    eax,cl
c0025322:	5b                   	pop    ebx
c0025323:	5d                   	pop    ebp
c0025324:	c3                   	ret    

c0025325 <__cmpdf2>:
c0025325:	55                   	push   ebp
c0025326:	89 e5                	mov    ebp,esp
c0025328:	57                   	push   edi
c0025329:	56                   	push   esi
c002532a:	53                   	push   ebx
c002532b:	83 ec 0c             	sub    esp,0xc
c002532e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0025331:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025334:	89 ca                	mov    edx,ecx
c0025336:	c1 ea 14             	shr    edx,0x14
c0025339:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002533f:	89 cb                	mov    ebx,ecx
c0025341:	c1 fb 1f             	sar    ebx,0x1f
c0025344:	31 da                	xor    edx,ebx
c0025346:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025349:	89 df                	mov    edi,ebx
c002534b:	c1 e7 0b             	shl    edi,0xb
c002534e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025351:	c1 e1 0b             	shl    ecx,0xb
c0025354:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002535a:	c1 eb 15             	shr    ebx,0x15
c002535d:	09 d9                	or     ecx,ebx
c002535f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0025362:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025365:	89 ce                	mov    esi,ecx
c0025367:	c1 ee 14             	shr    esi,0x14
c002536a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025370:	89 cb                	mov    ebx,ecx
c0025372:	c1 fb 1f             	sar    ebx,0x1f
c0025375:	31 de                	xor    esi,ebx
c0025377:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002537a:	89 df                	mov    edi,ebx
c002537c:	c1 e7 0b             	shl    edi,0xb
c002537f:	c1 e1 0b             	shl    ecx,0xb
c0025382:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025388:	c1 eb 15             	shr    ebx,0x15
c002538b:	09 d9                	or     ecx,ebx
c002538d:	89 d3                	mov    ebx,edx
c002538f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0025395:	43                   	inc    ebx
c0025396:	83 fb 01             	cmp    ebx,0x1
c0025399:	77 08                	ja     c00253a3 <__cmpdf2+0x7e>
c002539b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002539e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00253a1:	75 68                	jne    c002540b <__cmpdf2+0xe6>
c00253a3:	89 f3                	mov    ebx,esi
c00253a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00253ab:	43                   	inc    ebx
c00253ac:	83 fb 01             	cmp    ebx,0x1
c00253af:	77 06                	ja     c00253b7 <__cmpdf2+0x92>
c00253b1:	89 fb                	mov    ebx,edi
c00253b3:	09 cb                	or     ebx,ecx
c00253b5:	75 54                	jne    c002540b <__cmpdf2+0xe6>
c00253b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00253ba:	09 f8                	or     eax,edi
c00253bc:	09 c8                	or     eax,ecx
c00253be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00253c1:	75 12                	jne    c00253d5 <__cmpdf2+0xb0>
c00253c3:	8d 42 01             	lea    eax,[edx+0x1]
c00253c6:	83 f8 01             	cmp    eax,0x1
c00253c9:	77 0a                	ja     c00253d5 <__cmpdf2+0xb0>
c00253cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00253ce:	31 c0                	xor    eax,eax
c00253d0:	83 fb 01             	cmp    ebx,0x1
c00253d3:	76 36                	jbe    c002540b <__cmpdf2+0xe6>
c00253d5:	b8 01 00 00 00       	mov    eax,0x1
c00253da:	39 f2                	cmp    edx,esi
c00253dc:	7f 2d                	jg     c002540b <__cmpdf2+0xe6>
c00253de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00253e3:	7c 26                	jl     c002540b <__cmpdf2+0xe6>
c00253e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00253e8:	77 07                	ja     c00253f1 <__cmpdf2+0xcc>
c00253ea:	72 16                	jb     c0025402 <__cmpdf2+0xdd>
c00253ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00253ef:	76 0a                	jbe    c00253fb <__cmpdf2+0xd6>
c00253f1:	89 d0                	mov    eax,edx
c00253f3:	c1 f8 1f             	sar    eax,0x1f
c00253f6:	83 c8 01             	or     eax,0x1
c00253f9:	eb 10                	jmp    c002540b <__cmpdf2+0xe6>
c00253fb:	b8 00 00 00 00       	mov    eax,0x0
c0025400:	73 09                	jae    c002540b <__cmpdf2+0xe6>
c0025402:	89 d0                	mov    eax,edx
c0025404:	c1 f8 1f             	sar    eax,0x1f
c0025407:	83 e0 02             	and    eax,0x2
c002540a:	48                   	dec    eax
c002540b:	83 c4 0c             	add    esp,0xc
c002540e:	5b                   	pop    ebx
c002540f:	5e                   	pop    esi
c0025410:	5f                   	pop    edi
c0025411:	5d                   	pop    ebp
c0025412:	c3                   	ret    

c0025413 <__eqdf2>:
c0025413:	55                   	push   ebp
c0025414:	89 e5                	mov    ebp,esp
c0025416:	50                   	push   eax
c0025417:	6a 01                	push   0x1
c0025419:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002541c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002541f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025425:	e8 fb fe ff ff       	call   c0025325 <__cmpdf2>
c002542a:	83 c4 18             	add    esp,0x18
c002542d:	c9                   	leave  
c002542e:	c3                   	ret    

c002542f <__nedf2>:
c002542f:	eb e2                	jmp    c0025413 <__eqdf2>

c0025431 <__gtdf2>:
c0025431:	55                   	push   ebp
c0025432:	89 e5                	mov    ebp,esp
c0025434:	50                   	push   eax
c0025435:	6a ff                	push   0xffffffff
c0025437:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002543a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002543d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025440:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025443:	e8 dd fe ff ff       	call   c0025325 <__cmpdf2>
c0025448:	83 c4 18             	add    esp,0x18
c002544b:	c9                   	leave  
c002544c:	c3                   	ret    

c002544d <__gedf2>:
c002544d:	eb e2                	jmp    c0025431 <__gtdf2>

c002544f <__ltdf2>:
c002544f:	eb c2                	jmp    c0025413 <__eqdf2>

c0025451 <__ledf2>:
c0025451:	eb c0                	jmp    c0025413 <__eqdf2>

c0025453 <__truncdfsf2>:
c0025453:	55                   	push   ebp
c0025454:	89 e5                	mov    ebp,esp
c0025456:	57                   	push   edi
c0025457:	56                   	push   esi
c0025458:	53                   	push   ebx
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002545f:	89 d1                	mov    ecx,edx
c0025461:	c1 f9 14             	sar    ecx,0x14
c0025464:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025467:	89 df                	mov    edi,ebx
c0025469:	c1 e7 0b             	shl    edi,0xb
c002546c:	89 d0                	mov    eax,edx
c002546e:	c1 e0 0b             	shl    eax,0xb
c0025471:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025476:	c1 eb 15             	shr    ebx,0x15
c0025479:	09 d8                	or     eax,ebx
c002547b:	89 cb                	mov    ebx,ecx
c002547d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025483:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0025489:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002548f:	0f 86 9e 00 00 00    	jbe    c0025533 <__truncdfsf2+0xe0>
c0025495:	85 db                	test   ebx,ebx
c0025497:	75 0a                	jne    c00254a3 <__truncdfsf2+0x50>
c0025499:	c1 fa 17             	sar    edx,0x17
c002549c:	30 d2                	xor    dl,dl
c002549e:	e9 84 00 00 00       	jmp    c0025527 <__truncdfsf2+0xd4>
c00254a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00254a9:	83 fe 83             	cmp    esi,0xffffff83
c00254ac:	7d 4b                	jge    c00254f9 <__truncdfsf2+0xa6>
c00254ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00254b3:	29 f1                	sub    ecx,esi
c00254b5:	83 f9 1f             	cmp    ecx,0x1f
c00254b8:	7f 6b                	jg     c0025525 <__truncdfsf2+0xd2>
c00254ba:	0d 00 00 00 80       	or     eax,0x80000000
c00254bf:	89 c3                	mov    ebx,eax
c00254c1:	d3 eb                	shr    ebx,cl
c00254c3:	be 01 00 00 00       	mov    esi,0x1
c00254c8:	d3 e6                	shl    esi,cl
c00254ca:	4e                   	dec    esi
c00254cb:	21 f0                	and    eax,esi
c00254cd:	09 f8                	or     eax,edi
c00254cf:	0f 95 c0             	setne  al
c00254d2:	0f b6 c0             	movzx  eax,al
c00254d5:	09 c3                	or     ebx,eax
c00254d7:	89 d9                	mov    ecx,ebx
c00254d9:	c1 e9 08             	shr    ecx,0x8
c00254dc:	f6 c3 7f             	test   bl,0x7f
c00254df:	0f 95 c0             	setne  al
c00254e2:	09 c8                	or     eax,ecx
c00254e4:	83 e0 01             	and    eax,0x1
c00254e7:	c1 eb 07             	shr    ebx,0x7
c00254ea:	21 c3                	and    ebx,eax
c00254ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00254f2:	09 d1                	or     ecx,edx
c00254f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00254f7:	eb 76                	jmp    c002556f <__truncdfsf2+0x11c>
c00254f9:	83 c6 80             	add    esi,0xffffff80
c00254fc:	7e 1d                	jle    c002551b <__truncdfsf2+0xc8>
c00254fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0025504:	75 0b                	jne    c0025511 <__truncdfsf2+0xbe>
c0025506:	09 f8                	or     eax,edi
c0025508:	74 09                	je     c0025513 <__truncdfsf2+0xc0>
c002550a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002550f:	eb 02                	jmp    c0025513 <__truncdfsf2+0xc0>
c0025511:	31 c0                	xor    eax,eax
c0025513:	c1 fa 17             	sar    edx,0x17
c0025516:	80 ca ff             	or     dl,0xff
c0025519:	eb 0e                	jmp    c0025529 <__truncdfsf2+0xd6>
c002551b:	c1 fa 1f             	sar    edx,0x1f
c002551e:	c1 e2 08             	shl    edx,0x8
c0025521:	09 ca                	or     edx,ecx
c0025523:	eb 04                	jmp    c0025529 <__truncdfsf2+0xd6>
c0025525:	31 d2                	xor    edx,edx
c0025527:	31 c0                	xor    eax,eax
c0025529:	c1 e2 17             	shl    edx,0x17
c002552c:	c1 e8 08             	shr    eax,0x8
c002552f:	09 d0                	or     eax,edx
c0025531:	eb 3c                	jmp    c002556f <__truncdfsf2+0x11c>
c0025533:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025539:	89 ca                	mov    edx,ecx
c002553b:	c1 fa 0b             	sar    edx,0xb
c002553e:	c1 e2 08             	shl    edx,0x8
c0025541:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025544:	31 db                	xor    ebx,ebx
c0025546:	85 ff                	test   edi,edi
c0025548:	0f 95 c3             	setne  bl
c002554b:	09 d8                	or     eax,ebx
c002554d:	89 c3                	mov    ebx,eax
c002554f:	c1 eb 08             	shr    ebx,0x8
c0025552:	a8 7f                	test   al,0x7f
c0025554:	0f 95 c2             	setne  dl
c0025557:	89 d6                	mov    esi,edx
c0025559:	09 de                	or     esi,ebx
c002555b:	83 e6 01             	and    esi,0x1
c002555e:	c1 e8 07             	shr    eax,0x7
c0025561:	21 f0                	and    eax,esi
c0025563:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025566:	09 ca                	or     edx,ecx
c0025568:	c1 e2 17             	shl    edx,0x17
c002556b:	09 da                	or     edx,ebx
c002556d:	01 d0                	add    eax,edx
c002556f:	83 c4 0c             	add    esp,0xc
c0025572:	5b                   	pop    ebx
c0025573:	5e                   	pop    esi
c0025574:	5f                   	pop    edi
c0025575:	5d                   	pop    ebp
c0025576:	c3                   	ret    

c0025577 <__extendsfdf2>:
c0025577:	55                   	push   ebp
c0025578:	89 e5                	mov    ebp,esp
c002557a:	57                   	push   edi
c002557b:	56                   	push   esi
c002557c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002557f:	89 d1                	mov    ecx,edx
c0025581:	c1 f9 17             	sar    ecx,0x17
c0025584:	c1 e2 08             	shl    edx,0x8
c0025587:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002558d:	89 c8                	mov    eax,ecx
c002558f:	80 e4 f8             	and    ah,0xf8
c0025592:	8d 71 01             	lea    esi,[ecx+0x1]
c0025595:	81 e6 fe 00 00 00    	and    esi,0xfe
c002559b:	75 27                	jne    c00255c4 <__extendsfdf2+0x4d>
c002559d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00255a3:	75 18                	jne    c00255bd <__extendsfdf2+0x46>
c00255a5:	85 d2                	test   edx,edx
c00255a7:	74 20                	je     c00255c9 <__extendsfdf2+0x52>
c00255a9:	41                   	inc    ecx
c00255aa:	01 d2                	add    edx,edx
c00255ac:	79 fb                	jns    c00255a9 <__extendsfdf2+0x32>
c00255ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00255b4:	29 c8                	sub    eax,ecx
c00255b6:	05 81 03 00 00       	add    eax,0x381
c00255bb:	eb 0c                	jmp    c00255c9 <__extendsfdf2+0x52>
c00255bd:	05 00 07 00 00       	add    eax,0x700
c00255c2:	eb 05                	jmp    c00255c9 <__extendsfdf2+0x52>
c00255c4:	05 80 03 00 00       	add    eax,0x380
c00255c9:	c1 e0 14             	shl    eax,0x14
c00255cc:	89 c1                	mov    ecx,eax
c00255ce:	89 d0                	mov    eax,edx
c00255d0:	c1 e8 0b             	shr    eax,0xb
c00255d3:	09 c1                	or     ecx,eax
c00255d5:	c1 e2 15             	shl    edx,0x15
c00255d8:	89 d0                	mov    eax,edx
c00255da:	89 ca                	mov    edx,ecx
c00255dc:	5e                   	pop    esi
c00255dd:	5f                   	pop    edi
c00255de:	5d                   	pop    ebp
c00255df:	c3                   	ret    

c00255e0 <fabs>:
c00255e0:	83 ec 0c             	sub    esp,0xc
c00255e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00255ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00255f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00255f7:	dd 04 24             	fld    QWORD PTR [esp]
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    
c00255fe:	66 90                	xchg   ax,ax

c0025600 <lrint>:
c0025600:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025604:	83 ec 04             	sub    esp,0x4
c0025607:	db 1c 24             	fistp  DWORD PTR [esp]
c002560a:	58                   	pop    eax
c002560b:	c3                   	ret    

c002560c <lrintf>:
c002560c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025610:	83 ec 04             	sub    esp,0x4
c0025613:	db 1c 24             	fistp  DWORD PTR [esp]
c0025616:	58                   	pop    eax
c0025617:	c3                   	ret    

Disassembly of section .init:

c0025618 <_init>:
c0025618:	55                   	push   ebp
c0025619:	89 e5                	mov    ebp,esp
c002561b:	e8 f8 aa fd ff       	call   c0000118 <frame_dummy>
c0025620:	e8 63 e0 ff ff       	call   c0023688 <__do_global_ctors_aux>
c0025625:	5d                   	pop    ebp
c0025626:	c3                   	ret    

Disassembly of section .fini:

c0025627 <_fini>:
c0025627:	55                   	push   ebp
c0025628:	89 e5                	mov    ebp,esp
c002562a:	e8 79 aa fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002562f:	5d                   	pop    ebp
c0025630:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025632 <Computer::~Computer()>:
c0025632:	83 ec 0c             	sub    esp,0xc
c0025635:	ba 30 70 02 c0       	mov    edx,0xc0027030
c002563a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563e:	89 10                	mov    DWORD PTR [eax],edx
c0025640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025644:	83 ec 0c             	sub    esp,0xc
c0025647:	50                   	push   eax
c0025648:	e8 b3 e2 fe ff       	call   c0013900 <Device::~Device()>
c002564d:	83 c4 10             	add    esp,0x10
c0025650:	90                   	nop
c0025651:	83 c4 0c             	add    esp,0xc
c0025654:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025656 <Computer::~Computer()>:
c0025656:	83 ec 0c             	sub    esp,0xc
c0025659:	83 ec 0c             	sub    esp,0xc
c002565c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025660:	e8 cd ff ff ff       	call   c0025632 <Computer::~Computer()>
c0025665:	83 c4 10             	add    esp,0x10
c0025668:	83 ec 08             	sub    esp,0x8
c002566b:	68 ec 01 00 00       	push   0x1ec
c0025670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025674:	e8 e6 ce fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025679:	83 c4 10             	add    esp,0x10
c002567c:	83 c4 0c             	add    esp,0xc
c002567f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025680 <idleCommon()>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	e8 87 67 ff ff       	call   c001be0f <lockScheduler()>
c0025688:	e8 bd 6a ff ff       	call   c001c14a <schedule()>
c002568d:	83 c4 0c             	add    esp,0xc
c0025690:	e9 7c 67 ff ff       	jmp    c001be11 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025696 <LinkedList<UnixFile>::~LinkedList()>:
c0025696:	90                   	nop
c0025697:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025698 <LinkedList<UnixFile>::LinkedList()>:
c0025698:	83 ec 0c             	sub    esp,0xc
c002569b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002569f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00256a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00256b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00256bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00256c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00256d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00256db:	83 ec 0c             	sub    esp,0xc
c00256de:	68 a6 72 02 c0       	push   0xc00272a6
c00256e3:	e8 57 cf fe ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00256e8:	83 c4 10             	add    esp,0x10
c00256eb:	90                   	nop
c00256ec:	83 c4 0c             	add    esp,0xc
c00256ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00256f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00256f8:	75 10                	jne    c002570a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00256fa:	83 ec 0c             	sub    esp,0xc
c00256fd:	68 c0 72 02 c0       	push   0xc00272c0
c0025702:	e8 fc 36 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025707:	83 c4 10             	add    esp,0x10
c002570a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002570e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025710:	85 c0                	test   eax,eax
c0025712:	74 34                	je     c0025748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002571b:	85 c0                	test   eax,eax
c002571d:	74 29                	je     c0025748 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025726:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002572a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002573c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002573f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025746:	eb 65                	jmp    c00257ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574c:	8b 00                	mov    eax,DWORD PTR [eax]
c002574e:	85 c0                	test   eax,eax
c0025750:	75 4b                	jne    c002579d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025759:	85 c0                	test   eax,eax
c002575b:	75 40                	jne    c002579d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002575d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025765:	89 10                	mov    DWORD PTR [eax],edx
c0025767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002576f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025779:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025784:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025787:	85 c0                	test   eax,eax
c0025789:	74 22                	je     c00257ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002578b:	83 ec 0c             	sub    esp,0xc
c002578e:	68 e2 72 02 c0       	push   0xc00272e2
c0025793:	e8 6b 36 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025798:	83 c4 10             	add    esp,0x10
c002579b:	eb 10                	jmp    c00257ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002579d:	83 ec 0c             	sub    esp,0xc
c00257a0:	68 ec 72 02 c0       	push   0xc00272ec
c00257a5:	e8 59 36 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c00257aa:	83 c4 10             	add    esp,0x10
c00257ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00257b4:	8d 50 01             	lea    edx,[eax+0x1]
c00257b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00257be:	90                   	nop
c00257bf:	83 c4 0c             	add    esp,0xc
c00257c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00257c4 <LinkedList<UnixFile>::getFirstElement()>:
c00257c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00257cc <LinkedList<UnixFile>::removeFirst()>:
c00257cc:	83 ec 0c             	sub    esp,0xc
c00257cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00257d5:	85 c0                	test   eax,eax
c00257d7:	75 12                	jne    c00257eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00257d9:	83 ec 0c             	sub    esp,0xc
c00257dc:	68 f8 72 02 c0       	push   0xc00272f8
c00257e1:	e8 1d 36 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c00257e6:	83 c4 10             	add    esp,0x10
c00257e9:	eb 7e                	jmp    c0025869 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00257eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00257f5:	85 c0                	test   eax,eax
c00257f7:	74 10                	je     c0025809 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00257f9:	83 ec 0c             	sub    esp,0xc
c00257fc:	68 43 73 02 c0       	push   0xc0027343
c0025801:	e8 fd 35 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025806:	83 c4 10             	add    esp,0x10
c0025809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580d:	8b 00                	mov    eax,DWORD PTR [eax]
c002580f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025812:	85 c0                	test   eax,eax
c0025814:	75 33                	jne    c0025849 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002582b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002582f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025832:	83 f8 01             	cmp    eax,0x1
c0025835:	74 21                	je     c0025858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025837:	83 ec 0c             	sub    esp,0xc
c002583a:	68 1c 73 02 c0       	push   0xc002731c
c002583f:	e8 bf 35 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025844:	83 c4 10             	add    esp,0x10
c0025847:	eb 0f                	jmp    c0025858 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584d:	8b 00                	mov    eax,DWORD PTR [eax]
c002584f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025856:	89 10                	mov    DWORD PTR [eax],edx
c0025858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002585c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002585f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025866:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025869:	83 c4 0c             	add    esp,0xc
c002586c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002586e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002586e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025875:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025876 <DriverlessDevice::~DriverlessDevice()>:
c0025876:	ba 04 7a 02 c0       	mov    edx,0xc0027a04
c002587b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002587f:	89 10                	mov    DWORD PTR [eax],edx
c0025881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025885:	50                   	push   eax
c0025886:	e8 75 e0 fe ff       	call   c0013900 <Device::~Device()>
c002588b:	83 c4 04             	add    esp,0x4
c002588e:	90                   	nop
c002588f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025890 <DriverlessDevice::~DriverlessDevice()>:
c0025890:	83 ec 0c             	sub    esp,0xc
c0025893:	83 ec 0c             	sub    esp,0xc
c0025896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002589a:	e8 d7 ff ff ff       	call   c0025876 <DriverlessDevice::~DriverlessDevice()>
c002589f:	83 c4 10             	add    esp,0x10
c00258a2:	83 ec 08             	sub    esp,0x8
c00258a5:	68 58 01 00 00       	push   0x158
c00258aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ae:	e8 ac cc fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	83 c4 0c             	add    esp,0xc
c00258b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00258ba <LinkedList<Device>::addElement(Device*)>:
c00258ba:	83 ec 0c             	sub    esp,0xc
c00258bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00258c2:	75 10                	jne    c00258d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00258c4:	83 ec 0c             	sub    esp,0xc
c00258c7:	68 c0 72 02 c0       	push   0xc00272c0
c00258cc:	e8 32 35 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c00258d1:	83 c4 10             	add    esp,0x10
c00258d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00258da:	85 c0                	test   eax,eax
c00258dc:	74 3a                	je     c0025918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00258de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00258e5:	85 c0                	test   eax,eax
c00258e7:	74 2f                	je     c0025918 <LinkedList<Device>::addElement(Device*)+0x5e>
c00258e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00258f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00258f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00258fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025902:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025909:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002590c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025916:	eb 68                	jmp    c0025980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591c:	8b 00                	mov    eax,DWORD PTR [eax]
c002591e:	85 c0                	test   eax,eax
c0025920:	75 4e                	jne    c0025970 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025929:	85 c0                	test   eax,eax
c002592b:	75 43                	jne    c0025970 <LinkedList<Device>::addElement(Device*)+0xb6>
c002592d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025931:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025935:	89 10                	mov    DWORD PTR [eax],edx
c0025937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002593b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002593f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025949:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002595a:	85 c0                	test   eax,eax
c002595c:	74 22                	je     c0025980 <LinkedList<Device>::addElement(Device*)+0xc6>
c002595e:	83 ec 0c             	sub    esp,0xc
c0025961:	68 e2 72 02 c0       	push   0xc00272e2
c0025966:	e8 98 34 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c002596b:	83 c4 10             	add    esp,0x10
c002596e:	eb 10                	jmp    c0025980 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025970:	83 ec 0c             	sub    esp,0xc
c0025973:	68 ec 72 02 c0       	push   0xc00272ec
c0025978:	e8 86 34 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c002597d:	83 c4 10             	add    esp,0x10
c0025980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025987:	8d 50 01             	lea    edx,[eax+0x1]
c002598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025991:	90                   	nop
c0025992:	83 c4 0c             	add    esp,0xc
c0025995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025996 <LinkedList<Device>::LinkedList()>:
c0025996:	83 ec 0c             	sub    esp,0xc
c0025999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002599d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00259a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00259ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00259b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00259c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00259ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00259d9:	83 ec 0c             	sub    esp,0xc
c00259dc:	68 a6 72 02 c0       	push   0xc00272a6
c00259e1:	e8 59 cc fe ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c00259e6:	83 c4 10             	add    esp,0x10
c00259e9:	90                   	nop
c00259ea:	83 c4 0c             	add    esp,0xc
c00259ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00259ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00259ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00259f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00259f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00259f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00259f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00259fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00259fc:	85 c0                	test   eax,eax
c00259fe:	75 0e                	jne    c0025a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025a04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a07:	85 c0                	test   eax,eax
c0025a09:	75 03                	jne    c0025a0e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025a0b:	b0 01                	mov    al,0x1
c0025a0d:	c3                   	ret    
c0025a0e:	b0 00                	mov    al,0x0
c0025a10:	90                   	nop
c0025a11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025a12 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025a12:	83 ec 0c             	sub    esp,0xc
c0025a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a19:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1b:	85 c0                	test   eax,eax
c0025a1d:	75 15                	jne    c0025a34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025a1f:	83 ec 0c             	sub    esp,0xc
c0025a22:	68 f8 72 02 c0       	push   0xc00272f8
c0025a27:	e8 d7 33 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025a2c:	83 c4 10             	add    esp,0x10
c0025a2f:	e9 88 00 00 00       	jmp    c0025abc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a3b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025a3e:	85 c0                	test   eax,eax
c0025a40:	0f 95 c0             	setne  al
c0025a43:	84 c0                	test   al,al
c0025a45:	74 10                	je     c0025a57 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025a47:	83 ec 0c             	sub    esp,0xc
c0025a4a:	68 43 73 02 c0       	push   0xc0027343
c0025a4f:	e8 af 33 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025a54:	83 c4 10             	add    esp,0x10
c0025a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025a60:	85 c0                	test   eax,eax
c0025a62:	0f 94 c0             	sete   al
c0025a65:	84 c0                	test   al,al
c0025a67:	74 33                	je     c0025a9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0025a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a85:	83 f8 01             	cmp    eax,0x1
c0025a88:	74 21                	je     c0025aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025a8a:	83 ec 0c             	sub    esp,0xc
c0025a8d:	68 1c 73 02 c0       	push   0xc002731c
c0025a92:	e8 6c 33 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	eb 0f                	jmp    c0025aab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa9:	89 10                	mov    DWORD PTR [eax],edx
c0025aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ab2:	8d 50 ff             	lea    edx,[eax-0x1]
c0025ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025abc:	83 c4 0c             	add    esp,0xc
c0025abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025ac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025ac8:	75 10                	jne    c0025ada <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0025aca:	83 ec 0c             	sub    esp,0xc
c0025acd:	68 c0 72 02 c0       	push   0xc00272c0
c0025ad2:	e8 2c 33 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025ad7:	83 c4 10             	add    esp,0x10
c0025ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae0:	85 c0                	test   eax,eax
c0025ae2:	74 34                	je     c0025b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025aeb:	85 c0                	test   eax,eax
c0025aed:	74 29                	je     c0025b18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025af6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025afa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025b05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025b16:	eb 65                	jmp    c0025b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b1e:	85 c0                	test   eax,eax
c0025b20:	75 4b                	jne    c0025b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b29:	85 c0                	test   eax,eax
c0025b2b:	75 40                	jne    c0025b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025b35:	89 10                	mov    DWORD PTR [eax],edx
c0025b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025b3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025b57:	85 c0                	test   eax,eax
c0025b59:	74 22                	je     c0025b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025b5b:	83 ec 0c             	sub    esp,0xc
c0025b5e:	68 e2 72 02 c0       	push   0xc00272e2
c0025b63:	e8 9b 32 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025b68:	83 c4 10             	add    esp,0x10
c0025b6b:	eb 10                	jmp    c0025b7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025b6d:	83 ec 0c             	sub    esp,0xc
c0025b70:	68 ec 72 02 c0       	push   0xc00272ec
c0025b75:	e8 89 32 ff ff       	call   c0018e03 <Krnl::panic(char const*)>
c0025b7a:	83 c4 10             	add    esp,0x10
c0025b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025b84:	8d 50 01             	lea    edx,[eax+0x1]
c0025b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025b8e:	90                   	nop
c0025b8f:	83 c4 0c             	add    esp,0xc
c0025b92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025b94 <ACPI::~ACPI()>:
c0025b94:	83 ec 0c             	sub    esp,0xc
c0025b97:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c0025b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba0:	89 10                	mov    DWORD PTR [eax],edx
c0025ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba6:	83 ec 0c             	sub    esp,0xc
c0025ba9:	50                   	push   eax
c0025baa:	e8 51 dd fe ff       	call   c0013900 <Device::~Device()>
c0025baf:	83 c4 10             	add    esp,0x10
c0025bb2:	90                   	nop
c0025bb3:	83 c4 0c             	add    esp,0xc
c0025bb6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025bb8 <ACPI::~ACPI()>:
c0025bb8:	83 ec 0c             	sub    esp,0xc
c0025bbb:	83 ec 0c             	sub    esp,0xc
c0025bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bc2:	e8 cd ff ff ff       	call   c0025b94 <ACPI::~ACPI()>
c0025bc7:	83 c4 10             	add    esp,0x10
c0025bca:	83 ec 08             	sub    esp,0x8
c0025bcd:	68 68 22 00 00       	push   0x2268
c0025bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bd6:	e8 84 c9 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025bdb:	83 c4 10             	add    esp,0x10
c0025bde:	83 c4 0c             	add    esp,0xc
c0025be1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025be2 <CPU::~CPU()>:
c0025be2:	83 ec 0c             	sub    esp,0xc
c0025be5:	ba c0 85 02 c0       	mov    edx,0xc00285c0
c0025bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bee:	89 10                	mov    DWORD PTR [eax],edx
c0025bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf4:	83 ec 0c             	sub    esp,0xc
c0025bf7:	50                   	push   eax
c0025bf8:	e8 03 dd fe ff       	call   c0013900 <Device::~Device()>
c0025bfd:	83 c4 10             	add    esp,0x10
c0025c00:	90                   	nop
c0025c01:	83 c4 0c             	add    esp,0xc
c0025c04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025c06 <CPU::~CPU()>:
c0025c06:	83 ec 0c             	sub    esp,0xc
c0025c09:	83 ec 0c             	sub    esp,0xc
c0025c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c10:	e8 cd ff ff ff       	call   c0025be2 <CPU::~CPU()>
c0025c15:	83 c4 10             	add    esp,0x10
c0025c18:	83 ec 08             	sub    esp,0x8
c0025c1b:	68 98 11 00 00       	push   0x1198
c0025c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c24:	e8 36 c9 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025c29:	83 c4 10             	add    esp,0x10
c0025c2c:	83 c4 0c             	add    esp,0xc
c0025c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025c30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025c30:	90                   	nop
c0025c31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025c32 <ThreadControlBlock::ThreadControlBlock()>:
c0025c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025c6e:	90                   	nop
c0025c6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025c70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025c70:	83 ec 0c             	sub    esp,0xc
c0025c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025cb3:	83 ec 0c             	sub    esp,0xc
c0025cb6:	68 a6 72 02 c0       	push   0xc00272a6
c0025cbb:	e8 7f c9 fe ff       	call   c001263f <Dbg::kprintf(char const*, ...)>
c0025cc0:	83 c4 10             	add    esp,0x10
c0025cc3:	90                   	nop
c0025cc4:	83 c4 0c             	add    esp,0xc
c0025cc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025cc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ccc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025ccf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025cd0 <Vm::_FPUState::_FPUState()>:
c0025cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025cd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025cdb:	90                   	nop
c0025cdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025cde <PCI::~PCI()>:
c0025cde:	83 ec 0c             	sub    esp,0xc
c0025ce1:	ba b4 92 02 c0       	mov    edx,0xc00292b4
c0025ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cea:	89 10                	mov    DWORD PTR [eax],edx
c0025cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf0:	83 ec 0c             	sub    esp,0xc
c0025cf3:	50                   	push   eax
c0025cf4:	e8 17 d6 fe ff       	call   c0013310 <Bus::~Bus()>
c0025cf9:	83 c4 10             	add    esp,0x10
c0025cfc:	90                   	nop
c0025cfd:	83 c4 0c             	add    esp,0xc
c0025d00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0025d02 <PCI::~PCI()>:
c0025d02:	83 ec 0c             	sub    esp,0xc
c0025d05:	83 ec 0c             	sub    esp,0xc
c0025d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d0c:	e8 cd ff ff ff       	call   c0025cde <PCI::~PCI()>
c0025d11:	83 c4 10             	add    esp,0x10
c0025d14:	83 ec 08             	sub    esp,0x8
c0025d17:	68 58 01 00 00       	push   0x158
c0025d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d20:	e8 3a c8 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025d25:	83 c4 10             	add    esp,0x10
c0025d28:	83 c4 0c             	add    esp,0xc
c0025d2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025d2c <IDE::~IDE()>:
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	ba 18 95 02 c0       	mov    edx,0xc0029518
c0025d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d38:	89 10                	mov    DWORD PTR [eax],edx
c0025d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3e:	83 ec 0c             	sub    esp,0xc
c0025d41:	50                   	push   eax
c0025d42:	e8 a9 e0 fe ff       	call   c0013df0 <HardDiskController::~HardDiskController()>
c0025d47:	83 c4 10             	add    esp,0x10
c0025d4a:	90                   	nop
c0025d4b:	83 c4 0c             	add    esp,0xc
c0025d4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025d50 <IDE::~IDE()>:
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	83 ec 0c             	sub    esp,0xc
c0025d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d5a:	e8 cd ff ff ff       	call   c0025d2c <IDE::~IDE()>
c0025d5f:	83 c4 10             	add    esp,0x10
c0025d62:	83 ec 08             	sub    esp,0x8
c0025d65:	68 70 02 00 00       	push   0x270
c0025d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d6e:	e8 ec c7 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025d73:	83 c4 10             	add    esp,0x10
c0025d76:	83 c4 0c             	add    esp,0xc
c0025d79:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025d7a <ATA::~ATA()>:
c0025d7a:	83 ec 0c             	sub    esp,0xc
c0025d7d:	ba 68 95 02 c0       	mov    edx,0xc0029568
c0025d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d86:	89 10                	mov    DWORD PTR [eax],edx
c0025d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8c:	83 ec 0c             	sub    esp,0xc
c0025d8f:	50                   	push   eax
c0025d90:	e8 39 e1 fe ff       	call   c0013ece <PhysicalDisk::~PhysicalDisk()>
c0025d95:	83 c4 10             	add    esp,0x10
c0025d98:	90                   	nop
c0025d99:	83 c4 0c             	add    esp,0xc
c0025d9c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025d9e <ATA::~ATA()>:
c0025d9e:	83 ec 0c             	sub    esp,0xc
c0025da1:	83 ec 0c             	sub    esp,0xc
c0025da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025da8:	e8 cd ff ff ff       	call   c0025d7a <ATA::~ATA()>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	83 ec 08             	sub    esp,0x8
c0025db3:	68 7c 01 00 00       	push   0x17c
c0025db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dbc:	e8 9e c7 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025dc1:	83 c4 10             	add    esp,0x10
c0025dc4:	83 c4 0c             	add    esp,0xc
c0025dc7:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025dc8 <ATAPI::~ATAPI()>:
c0025dc8:	83 ec 0c             	sub    esp,0xc
c0025dcb:	ba d4 95 02 c0       	mov    edx,0xc00295d4
c0025dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd4:	89 10                	mov    DWORD PTR [eax],edx
c0025dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dda:	83 ec 0c             	sub    esp,0xc
c0025ddd:	50                   	push   eax
c0025dde:	e8 eb e0 fe ff       	call   c0013ece <PhysicalDisk::~PhysicalDisk()>
c0025de3:	83 c4 10             	add    esp,0x10
c0025de6:	90                   	nop
c0025de7:	83 c4 0c             	add    esp,0xc
c0025dea:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025dec <ATAPI::~ATAPI()>:
c0025dec:	83 ec 0c             	sub    esp,0xc
c0025def:	83 ec 0c             	sub    esp,0xc
c0025df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025df6:	e8 cd ff ff ff       	call   c0025dc8 <ATAPI::~ATAPI()>
c0025dfb:	83 c4 10             	add    esp,0x10
c0025dfe:	83 ec 08             	sub    esp,0x8
c0025e01:	68 80 01 00 00       	push   0x180
c0025e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e0a:	e8 50 c7 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025e0f:	83 c4 10             	add    esp,0x10
c0025e12:	83 c4 0c             	add    esp,0xc
c0025e15:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025e16 <AVX::~AVX()>:
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	ba 10 96 02 c0       	mov    edx,0xc0029610
c0025e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e22:	89 10                	mov    DWORD PTR [eax],edx
c0025e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	50                   	push   eax
c0025e2c:	e8 21 e1 fe ff       	call   c0013f52 <FPU::~FPU()>
c0025e31:	83 c4 10             	add    esp,0x10
c0025e34:	90                   	nop
c0025e35:	83 c4 0c             	add    esp,0xc
c0025e38:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025e3a <AVX::~AVX()>:
c0025e3a:	83 ec 0c             	sub    esp,0xc
c0025e3d:	83 ec 0c             	sub    esp,0xc
c0025e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e44:	e8 cd ff ff ff       	call   c0025e16 <AVX::~AVX()>
c0025e49:	83 c4 10             	add    esp,0x10
c0025e4c:	83 ec 08             	sub    esp,0x8
c0025e4f:	68 58 01 00 00       	push   0x158
c0025e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e58:	e8 02 c7 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025e5d:	83 c4 10             	add    esp,0x10
c0025e60:	83 c4 0c             	add    esp,0xc
c0025e63:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025e64 <MMX::~MMX()>:
c0025e64:	83 ec 0c             	sub    esp,0xc
c0025e67:	ba 50 96 02 c0       	mov    edx,0xc0029650
c0025e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e70:	89 10                	mov    DWORD PTR [eax],edx
c0025e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e76:	83 ec 0c             	sub    esp,0xc
c0025e79:	50                   	push   eax
c0025e7a:	e8 d3 e0 fe ff       	call   c0013f52 <FPU::~FPU()>
c0025e7f:	83 c4 10             	add    esp,0x10
c0025e82:	90                   	nop
c0025e83:	83 c4 0c             	add    esp,0xc
c0025e86:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025e88 <MMX::~MMX()>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	83 ec 0c             	sub    esp,0xc
c0025e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e92:	e8 cd ff ff ff       	call   c0025e64 <MMX::~MMX()>
c0025e97:	83 c4 10             	add    esp,0x10
c0025e9a:	83 ec 08             	sub    esp,0x8
c0025e9d:	68 58 01 00 00       	push   0x158
c0025ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ea6:	e8 b4 c6 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025eab:	83 c4 10             	add    esp,0x10
c0025eae:	83 c4 0c             	add    esp,0xc
c0025eb1:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025eb2 <SSE::~SSE()>:
c0025eb2:	83 ec 0c             	sub    esp,0xc
c0025eb5:	ba 90 96 02 c0       	mov    edx,0xc0029690
c0025eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ebe:	89 10                	mov    DWORD PTR [eax],edx
c0025ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec4:	83 ec 0c             	sub    esp,0xc
c0025ec7:	50                   	push   eax
c0025ec8:	e8 85 e0 fe ff       	call   c0013f52 <FPU::~FPU()>
c0025ecd:	83 c4 10             	add    esp,0x10
c0025ed0:	90                   	nop
c0025ed1:	83 c4 0c             	add    esp,0xc
c0025ed4:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0025ed6 <SSE::~SSE()>:
c0025ed6:	83 ec 0c             	sub    esp,0xc
c0025ed9:	83 ec 0c             	sub    esp,0xc
c0025edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ee0:	e8 cd ff ff ff       	call   c0025eb2 <SSE::~SSE()>
c0025ee5:	83 c4 10             	add    esp,0x10
c0025ee8:	83 ec 08             	sub    esp,0x8
c0025eeb:	68 58 01 00 00       	push   0x158
c0025ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ef4:	e8 66 c6 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025ef9:	83 c4 10             	add    esp,0x10
c0025efc:	83 c4 0c             	add    esp,0xc
c0025eff:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025f00 <x87::~x87()>:
c0025f00:	83 ec 0c             	sub    esp,0xc
c0025f03:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c0025f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0c:	89 10                	mov    DWORD PTR [eax],edx
c0025f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f12:	83 ec 0c             	sub    esp,0xc
c0025f15:	50                   	push   eax
c0025f16:	e8 37 e0 fe ff       	call   c0013f52 <FPU::~FPU()>
c0025f1b:	83 c4 10             	add    esp,0x10
c0025f1e:	90                   	nop
c0025f1f:	83 c4 0c             	add    esp,0xc
c0025f22:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025f24 <x87::~x87()>:
c0025f24:	83 ec 0c             	sub    esp,0xc
c0025f27:	83 ec 0c             	sub    esp,0xc
c0025f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f2e:	e8 cd ff ff ff       	call   c0025f00 <x87::~x87()>
c0025f33:	83 c4 10             	add    esp,0x10
c0025f36:	83 ec 08             	sub    esp,0x8
c0025f39:	68 58 01 00 00       	push   0x158
c0025f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f42:	e8 18 c6 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025f47:	83 c4 10             	add    esp,0x10
c0025f4a:	83 c4 0c             	add    esp,0xc
c0025f4d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025f4e <IOAPIC::~IOAPIC()>:
c0025f4e:	83 ec 0c             	sub    esp,0xc
c0025f51:	ba 28 98 02 c0       	mov    edx,0xc0029828
c0025f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5a:	89 10                	mov    DWORD PTR [eax],edx
c0025f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f60:	83 ec 0c             	sub    esp,0xc
c0025f63:	50                   	push   eax
c0025f64:	e8 97 d9 fe ff       	call   c0013900 <Device::~Device()>
c0025f69:	83 c4 10             	add    esp,0x10
c0025f6c:	90                   	nop
c0025f6d:	83 c4 0c             	add    esp,0xc
c0025f70:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025f72 <IOAPIC::~IOAPIC()>:
c0025f72:	83 ec 0c             	sub    esp,0xc
c0025f75:	83 ec 0c             	sub    esp,0xc
c0025f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f7c:	e8 cd ff ff ff       	call   c0025f4e <IOAPIC::~IOAPIC()>
c0025f81:	83 c4 10             	add    esp,0x10
c0025f84:	83 ec 08             	sub    esp,0x8
c0025f87:	68 68 01 00 00       	push   0x168
c0025f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f90:	e8 ca c5 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025f95:	83 c4 10             	add    esp,0x10
c0025f98:	83 c4 0c             	add    esp,0xc
c0025f9b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025f9c <APIC::~APIC()>:
c0025f9c:	83 ec 0c             	sub    esp,0xc
c0025f9f:	ba e0 97 02 c0       	mov    edx,0xc00297e0
c0025fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa8:	89 10                	mov    DWORD PTR [eax],edx
c0025faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fae:	83 ec 0c             	sub    esp,0xc
c0025fb1:	50                   	push   eax
c0025fb2:	e8 65 e4 fe ff       	call   c001441c <InterruptController::~InterruptController()>
c0025fb7:	83 c4 10             	add    esp,0x10
c0025fba:	90                   	nop
c0025fbb:	83 c4 0c             	add    esp,0xc
c0025fbe:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025fc0 <APIC::~APIC()>:
c0025fc0:	83 ec 0c             	sub    esp,0xc
c0025fc3:	83 ec 0c             	sub    esp,0xc
c0025fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fca:	e8 cd ff ff ff       	call   c0025f9c <APIC::~APIC()>
c0025fcf:	83 c4 10             	add    esp,0x10
c0025fd2:	83 ec 08             	sub    esp,0x8
c0025fd5:	68 58 21 00 00       	push   0x2158
c0025fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fde:	e8 7c c5 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0025fe3:	83 c4 10             	add    esp,0x10
c0025fe6:	83 c4 0c             	add    esp,0xc
c0025fe9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025fea <PIC::~PIC()>:
c0025fea:	83 ec 0c             	sub    esp,0xc
c0025fed:	ba 78 98 02 c0       	mov    edx,0xc0029878
c0025ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff6:	89 10                	mov    DWORD PTR [eax],edx
c0025ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffc:	83 ec 0c             	sub    esp,0xc
c0025fff:	50                   	push   eax
c0026000:	e8 17 e4 fe ff       	call   c001441c <InterruptController::~InterruptController()>
c0026005:	83 c4 10             	add    esp,0x10
c0026008:	90                   	nop
c0026009:	83 c4 0c             	add    esp,0xc
c002600c:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c002600e <PIC::~PIC()>:
c002600e:	83 ec 0c             	sub    esp,0xc
c0026011:	83 ec 0c             	sub    esp,0xc
c0026014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026018:	e8 cd ff ff ff       	call   c0025fea <PIC::~PIC()>
c002601d:	83 c4 10             	add    esp,0x10
c0026020:	83 ec 08             	sub    esp,0x8
c0026023:	68 58 21 00 00       	push   0x2158
c0026028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002602c:	e8 2e c5 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c0026031:	83 c4 10             	add    esp,0x10
c0026034:	83 c4 0c             	add    esp,0xc
c0026037:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026038 <APICTimer::~APICTimer()>:
c0026038:	83 ec 0c             	sub    esp,0xc
c002603b:	ba cc 98 02 c0       	mov    edx,0xc00298cc
c0026040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026044:	89 10                	mov    DWORD PTR [eax],edx
c0026046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002604a:	83 ec 0c             	sub    esp,0xc
c002604d:	50                   	push   eax
c002604e:	e8 cb 00 ff ff       	call   c001611e <Timer::~Timer()>
c0026053:	83 c4 10             	add    esp,0x10
c0026056:	90                   	nop
c0026057:	83 c4 0c             	add    esp,0xc
c002605a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002605c <APICTimer::~APICTimer()>:
c002605c:	83 ec 0c             	sub    esp,0xc
c002605f:	83 ec 0c             	sub    esp,0xc
c0026062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026066:	e8 cd ff ff ff       	call   c0026038 <APICTimer::~APICTimer()>
c002606b:	83 c4 10             	add    esp,0x10
c002606e:	83 ec 08             	sub    esp,0x8
c0026071:	68 60 01 00 00       	push   0x160
c0026076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002607a:	e8 e0 c4 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c002607f:	83 c4 10             	add    esp,0x10
c0026082:	83 c4 0c             	add    esp,0xc
c0026085:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026086 <PIT::~PIT()>:
c0026086:	83 ec 0c             	sub    esp,0xc
c0026089:	ba 1c 99 02 c0       	mov    edx,0xc002991c
c002608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026092:	89 10                	mov    DWORD PTR [eax],edx
c0026094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026098:	83 ec 0c             	sub    esp,0xc
c002609b:	50                   	push   eax
c002609c:	e8 7d 00 ff ff       	call   c001611e <Timer::~Timer()>
c00260a1:	83 c4 10             	add    esp,0x10
c00260a4:	90                   	nop
c00260a5:	83 c4 0c             	add    esp,0xc
c00260a8:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00260aa <PIT::~PIT()>:
c00260aa:	83 ec 0c             	sub    esp,0xc
c00260ad:	83 ec 0c             	sub    esp,0xc
c00260b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260b4:	e8 cd ff ff ff       	call   c0026086 <PIT::~PIT()>
c00260b9:	83 c4 10             	add    esp,0x10
c00260bc:	83 ec 08             	sub    esp,0x8
c00260bf:	68 5c 01 00 00       	push   0x15c
c00260c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260c8:	e8 92 c4 fe ff       	call   c001255f <operator delete(void*, unsigned long)>
c00260cd:	83 c4 10             	add    esp,0x10
c00260d0:	83 c4 0c             	add    esp,0xc
c00260d3:	c3                   	ret    
