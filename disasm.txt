
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b4 f9 00 00       	call   c000f9d4 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 7d 02 00       	call   c0027da8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 52 89 02 c0       	mov    ebx,0xc0028952
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 89 02 c0    	cmp    ebx,0xc0028960
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 cf 02 c0       	mov    eax,0xc002cfd8
c0000049:	3d d8 cf 02 c0       	cmp    eax,0xc002cfd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 cf 02 c0       	push   0xc002cfd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 cf 02 c0       	mov    eax,0xc002cfd8
c0000075:	2d d8 cf 02 c0       	sub    eax,0xc002cfd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 cf 02 c0       	push   0xc002cfd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d608,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 89 02 c0       	mov    ebx,0xc0028968
c00000bb:	81 eb 64 89 02 c0    	sub    ebx,0xc0028964
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 89 02 c0       	mov    esi,0xc0028964
c00000ca:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c d6 02 c0       	mov    ds:0xc002d60c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c d6 02 c0       	mov    eax,ds:0xc002d60c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 cf 02 c0       	push   0xc002cfd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d608,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 d6 02 c0       	push   0xc002d610
c000012c:	68 d8 cf 02 c0       	push   0xc002cfd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 e5 cc 01 00       	call   c001d080 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 16 23 01 00       	call   c00126c9 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c3 cc 01 00       	call   c001d080 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 11 d1 01 00       	call   c001d4ed <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 bf d6 01 00       	call   c001daa4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 50 da 02 c0 	lgdtd  ds:0xc002da50
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 f4 3f 01 00       	call   c00145cd <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	57                   	push   edi
c00006a1:	56                   	push   esi
c00006a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	01 c2                	add    edx,eax
c00006b0:	89 c7                	mov    edi,eax
c00006b2:	39 d7                	cmp    edi,edx
c00006b4:	74 03                	je     c00006b9 <memcpy+0x19>
c00006b6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00006b7:	eb f9                	jmp    c00006b2 <memcpy+0x12>
c00006b9:	5e                   	pop    esi
c00006ba:	5f                   	pop    edi
c00006bb:	c3                   	ret    

c00006bc <memset>:
c00006bc:	53                   	push   ebx
c00006bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	01 c1                	add    ecx,eax
c00006c9:	39 ca                	cmp    edx,ecx
c00006cb:	74 0a                	je     c00006d7 <memset+0x1b>
c00006cd:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d1:	42                   	inc    edx
c00006d2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d5:	eb f2                	jmp    c00006c9 <memset+0xd>
c00006d7:	5b                   	pop    ebx
c00006d8:	c3                   	ret    

c00006d9 <strlen>:
c00006d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006dd:	31 c0                	xor    eax,eax
c00006df:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e3:	74 03                	je     c00006e8 <strlen+0xf>
c00006e5:	40                   	inc    eax
c00006e6:	eb f7                	jmp    c00006df <strlen+0x6>
c00006e8:	c3                   	ret    

c00006e9 <strpbrk>:
c00006e9:	53                   	push   ebx
c00006ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ee:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f0:	84 c9                	test   cl,cl
c00006f2:	74 14                	je     c0000708 <strpbrk+0x1f>
c00006f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f8:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006fa:	84 db                	test   bl,bl
c00006fc:	74 07                	je     c0000705 <strpbrk+0x1c>
c00006fe:	38 cb                	cmp    bl,cl
c0000700:	74 08                	je     c000070a <strpbrk+0x21>
c0000702:	42                   	inc    edx
c0000703:	eb f3                	jmp    c00006f8 <strpbrk+0xf>
c0000705:	40                   	inc    eax
c0000706:	eb e6                	jmp    c00006ee <strpbrk+0x5>
c0000708:	31 c0                	xor    eax,eax
c000070a:	5b                   	pop    ebx
c000070b:	c3                   	ret    

c000070c <strtok>:
c000070c:	56                   	push   esi
c000070d:	53                   	push   ebx
c000070e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000712:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000716:	85 db                	test   ebx,ebx
c0000718:	75 0e                	jne    c0000728 <strtok+0x1c>
c000071a:	8b 1d 28 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d628
c0000720:	85 db                	test   ebx,ebx
c0000722:	75 04                	jne    c0000728 <strtok+0x1c>
c0000724:	31 db                	xor    ebx,ebx
c0000726:	eb 2e                	jmp    c0000756 <strtok+0x4a>
c0000728:	56                   	push   esi
c0000729:	53                   	push   ebx
c000072a:	e8 ba ff ff ff       	call   c00006e9 <strpbrk>
c000072f:	5a                   	pop    edx
c0000730:	a3 28 d6 02 c0       	mov    ds:0xc002d628,eax
c0000735:	59                   	pop    ecx
c0000736:	a1 28 d6 02 c0       	mov    eax,ds:0xc002d628
c000073b:	39 d8                	cmp    eax,ebx
c000073d:	75 07                	jne    c0000746 <strtok+0x3a>
c000073f:	43                   	inc    ebx
c0000740:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000744:	eb e2                	jmp    c0000728 <strtok+0x1c>
c0000746:	85 c0                	test   eax,eax
c0000748:	74 da                	je     c0000724 <strtok+0x18>
c000074a:	8d 50 01             	lea    edx,[eax+0x1]
c000074d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000750:	89 15 28 d6 02 c0    	mov    DWORD PTR ds:0xc002d628,edx
c0000756:	89 d8                	mov    eax,ebx
c0000758:	5b                   	pop    ebx
c0000759:	5e                   	pop    esi
c000075a:	c3                   	ret    

c000075b <strcpy>:
c000075b:	53                   	push   ebx
c000075c:	31 d2                	xor    edx,edx
c000075e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000762:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000766:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000769:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076c:	84 c9                	test   cl,cl
c000076e:	74 06                	je     c0000776 <strcpy+0x1b>
c0000770:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000773:	42                   	inc    edx
c0000774:	eb ec                	jmp    c0000762 <strcpy+0x7>
c0000776:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000779:	5b                   	pop    ebx
c000077a:	c3                   	ret    

c000077b <strncpy>:
c000077b:	56                   	push   esi
c000077c:	53                   	push   ebx
c000077d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000781:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000785:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000789:	89 c3                	mov    ebx,eax
c000078b:	85 c9                	test   ecx,ecx
c000078d:	74 1a                	je     c00007a9 <strncpy+0x2e>
c000078f:	46                   	inc    esi
c0000790:	43                   	inc    ebx
c0000791:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000794:	49                   	dec    ecx
c0000795:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000798:	84 d2                	test   dl,dl
c000079a:	75 ef                	jne    c000078b <strncpy+0x10>
c000079c:	31 d2                	xor    edx,edx
c000079e:	39 d1                	cmp    ecx,edx
c00007a0:	74 07                	je     c00007a9 <strncpy+0x2e>
c00007a2:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a6:	42                   	inc    edx
c00007a7:	eb f5                	jmp    c000079e <strncpy+0x23>
c00007a9:	5b                   	pop    ebx
c00007aa:	5e                   	pop    esi
c00007ab:	c3                   	ret    

c00007ac <strcmp>:
c00007ac:	31 c9                	xor    ecx,ecx
c00007ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b6:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007ba:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007be:	38 d0                	cmp    al,dl
c00007c0:	75 08                	jne    c00007ca <strcmp+0x1e>
c00007c2:	41                   	inc    ecx
c00007c3:	84 c0                	test   al,al
c00007c5:	75 e7                	jne    c00007ae <strcmp+0x2>
c00007c7:	31 c0                	xor    eax,eax
c00007c9:	c3                   	ret    
c00007ca:	29 d0                	sub    eax,edx
c00007cc:	c3                   	ret    

c00007cd <strchr>:
c00007cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d1:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d3:	84 d2                	test   dl,dl
c00007d5:	74 09                	je     c00007e0 <strchr+0x13>
c00007d7:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007db:	74 05                	je     c00007e2 <strchr+0x15>
c00007dd:	40                   	inc    eax
c00007de:	eb f1                	jmp    c00007d1 <strchr+0x4>
c00007e0:	31 c0                	xor    eax,eax
c00007e2:	c3                   	ret    

c00007e3 <strncmp>:
c00007e3:	56                   	push   esi
c00007e4:	53                   	push   ebx
c00007e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f1:	01 d6                	add    esi,edx
c00007f3:	39 f2                	cmp    edx,esi
c00007f5:	74 12                	je     c0000809 <strncmp+0x26>
c00007f7:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007fa:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fd:	38 c8                	cmp    al,cl
c00007ff:	75 0c                	jne    c000080d <strncmp+0x2a>
c0000801:	42                   	inc    edx
c0000802:	84 c0                	test   al,al
c0000804:	74 03                	je     c0000809 <strncmp+0x26>
c0000806:	43                   	inc    ebx
c0000807:	eb ea                	jmp    c00007f3 <strncmp+0x10>
c0000809:	31 c0                	xor    eax,eax
c000080b:	eb 02                	jmp    c000080f <strncmp+0x2c>
c000080d:	29 c8                	sub    eax,ecx
c000080f:	5b                   	pop    ebx
c0000810:	5e                   	pop    esi
c0000811:	c3                   	ret    

c0000812 <strcat>:
c0000812:	53                   	push   ebx
c0000813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000817:	89 c1                	mov    ecx,eax
c0000819:	8d 51 01             	lea    edx,[ecx+0x1]
c000081c:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000820:	74 04                	je     c0000826 <strcat+0x14>
c0000822:	89 d1                	mov    ecx,edx
c0000824:	eb f3                	jmp    c0000819 <strcat+0x7>
c0000826:	31 d2                	xor    edx,edx
c0000828:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082c:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082f:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000832:	42                   	inc    edx
c0000833:	84 db                	test   bl,bl
c0000835:	75 f1                	jne    c0000828 <strcat+0x16>
c0000837:	5b                   	pop    ebx
c0000838:	c3                   	ret    

c0000839 <strncat>:
c0000839:	56                   	push   esi
c000083a:	53                   	push   ebx
c000083b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000843:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000847:	89 c2                	mov    edx,eax
c0000849:	85 db                	test   ebx,ebx
c000084b:	74 23                	je     c0000870 <strncat+0x37>
c000084d:	8d 72 01             	lea    esi,[edx+0x1]
c0000850:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000854:	74 04                	je     c000085a <strncat+0x21>
c0000856:	89 f2                	mov    edx,esi
c0000858:	eb f3                	jmp    c000084d <strncat+0x14>
c000085a:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085d:	41                   	inc    ecx
c000085e:	42                   	inc    edx
c000085f:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000862:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000865:	84 db                	test   bl,bl
c0000867:	74 07                	je     c0000870 <strncat+0x37>
c0000869:	39 f1                	cmp    ecx,esi
c000086b:	75 f0                	jne    c000085d <strncat+0x24>
c000086d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000870:	5b                   	pop    ebx
c0000871:	5e                   	pop    esi
c0000872:	c3                   	ret    

c0000873 <strstr>:
c0000873:	57                   	push   edi
c0000874:	56                   	push   esi
c0000875:	53                   	push   ebx
c0000876:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087e:	57                   	push   edi
c000087f:	e8 55 fe ff ff       	call   c00006d9 <strlen>
c0000884:	59                   	pop    ecx
c0000885:	89 c6                	mov    esi,eax
c0000887:	85 c0                	test   eax,eax
c0000889:	74 1f                	je     c00008aa <strstr+0x37>
c000088b:	53                   	push   ebx
c000088c:	e8 48 fe ff ff       	call   c00006d9 <strlen>
c0000891:	5a                   	pop    edx
c0000892:	39 f0                	cmp    eax,esi
c0000894:	72 12                	jb     c00008a8 <strstr+0x35>
c0000896:	56                   	push   esi
c0000897:	57                   	push   edi
c0000898:	53                   	push   ebx
c0000899:	e8 9f fd ff ff       	call   c000063d <memcmp>
c000089e:	83 c4 0c             	add    esp,0xc
c00008a1:	85 c0                	test   eax,eax
c00008a3:	74 05                	je     c00008aa <strstr+0x37>
c00008a5:	43                   	inc    ebx
c00008a6:	eb e3                	jmp    c000088b <strstr+0x18>
c00008a8:	31 db                	xor    ebx,ebx
c00008aa:	89 d8                	mov    eax,ebx
c00008ac:	5b                   	pop    ebx
c00008ad:	5e                   	pop    esi
c00008ae:	5f                   	pop    edi
c00008af:	c3                   	ret    

c00008b0 <toupper>:
c00008b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b4:	0f b6 d0             	movzx  edx,al
c00008b7:	f6 82 80 89 02 c0 02 	test   BYTE PTR [edx-0x3ffd7680],0x2
c00008be:	74 03                	je     c00008c3 <toupper+0x13>
c00008c0:	83 e8 20             	sub    eax,0x20
c00008c3:	c3                   	ret    

c00008c4 <tolower>:
c00008c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c8:	0f b6 d0             	movzx  edx,al
c00008cb:	f6 82 80 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7680],0x1
c00008d2:	74 03                	je     c00008d7 <tolower+0x13>
c00008d4:	83 c0 20             	add    eax,0x20
c00008d7:	c3                   	ret    

c00008d8 <simple_strtoul>:
c00008d8:	55                   	push   ebp
c00008d9:	57                   	push   edi
c00008da:	56                   	push   esi
c00008db:	53                   	push   ebx
c00008dc:	83 ec 08             	sub    esp,0x8
c00008df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ea:	f6 82 80 89 02 c0 08 	test   BYTE PTR [edx-0x3ffd7680],0x8
c00008f1:	74 03                	je     c00008f6 <simple_strtoul+0x1e>
c00008f3:	41                   	inc    ecx
c00008f4:	eb f1                	jmp    c00008e7 <simple_strtoul+0xf>
c00008f6:	80 fa 09             	cmp    dl,0x9
c00008f9:	74 f8                	je     c00008f3 <simple_strtoul+0x1b>
c00008fb:	80 fa 2d             	cmp    dl,0x2d
c00008fe:	75 0b                	jne    c000090b <simple_strtoul+0x33>
c0000900:	41                   	inc    ecx
c0000901:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000909:	eb 0e                	jmp    c0000919 <simple_strtoul+0x41>
c000090b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000913:	80 fa 2b             	cmp    dl,0x2b
c0000916:	75 01                	jne    c0000919 <simple_strtoul+0x41>
c0000918:	41                   	inc    ecx
c0000919:	85 f6                	test   esi,esi
c000091b:	75 22                	jne    c000093f <simple_strtoul+0x67>
c000091d:	be 0a 00 00 00       	mov    esi,0xa
c0000922:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000925:	75 5a                	jne    c0000981 <simple_strtoul+0xa9>
c0000927:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000092b:	50                   	push   eax
c000092c:	e8 93 ff ff ff       	call   c00008c4 <tolower>
c0000931:	5a                   	pop    edx
c0000932:	83 f8 78             	cmp    eax,0x78
c0000935:	74 03                	je     c000093a <simple_strtoul+0x62>
c0000937:	41                   	inc    ecx
c0000938:	eb 16                	jmp    c0000950 <simple_strtoul+0x78>
c000093a:	83 c1 02             	add    ecx,0x2
c000093d:	eb 22                	jmp    c0000961 <simple_strtoul+0x89>
c000093f:	8d 46 fe             	lea    eax,[esi-0x2]
c0000942:	83 f8 22             	cmp    eax,0x22
c0000945:	0f 87 b7 00 00 00    	ja     c0000a02 <simple_strtoul+0x12a>
c000094b:	83 fe 08             	cmp    esi,0x8
c000094e:	75 0c                	jne    c000095c <simple_strtoul+0x84>
c0000950:	be 08 00 00 00       	mov    esi,0x8
c0000955:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000958:	75 27                	jne    c0000981 <simple_strtoul+0xa9>
c000095a:	eb 1f                	jmp    c000097b <simple_strtoul+0xa3>
c000095c:	83 fe 10             	cmp    esi,0x10
c000095f:	75 20                	jne    c0000981 <simple_strtoul+0xa9>
c0000961:	be 10 00 00 00       	mov    esi,0x10
c0000966:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000969:	75 16                	jne    c0000981 <simple_strtoul+0xa9>
c000096b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096f:	50                   	push   eax
c0000970:	e8 4f ff ff ff       	call   c00008c4 <tolower>
c0000975:	5d                   	pop    ebp
c0000976:	83 f8 78             	cmp    eax,0x78
c0000979:	74 03                	je     c000097e <simple_strtoul+0xa6>
c000097b:	41                   	inc    ecx
c000097c:	eb 03                	jmp    c0000981 <simple_strtoul+0xa9>
c000097e:	83 c1 02             	add    ecx,0x2
c0000981:	31 ed                	xor    ebp,ebp
c0000983:	31 db                	xor    ebx,ebx
c0000985:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098e:	84 d2                	test   dl,dl
c0000990:	74 27                	je     c00009b9 <simple_strtoul+0xe1>
c0000992:	0f b6 fa             	movzx  edi,dl
c0000995:	f6 87 80 89 02 c0 04 	test   BYTE PTR [edi-0x3ffd7680],0x4
c000099c:	74 05                	je     c00009a3 <simple_strtoul+0xcb>
c000099e:	83 ef 30             	sub    edi,0x30
c00009a1:	eb 22                	jmp    c00009c5 <simple_strtoul+0xed>
c00009a3:	0f be d2             	movsx  edx,dl
c00009a6:	52                   	push   edx
c00009a7:	e8 04 ff ff ff       	call   c00008b0 <toupper>
c00009ac:	5f                   	pop    edi
c00009ad:	0f b6 d0             	movzx  edx,al
c00009b0:	f6 82 80 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7680],0x1
c00009b7:	75 09                	jne    c00009c2 <simple_strtoul+0xea>
c00009b9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009be:	75 2d                	jne    c00009ed <simple_strtoul+0x115>
c00009c0:	eb 57                	jmp    c0000a19 <simple_strtoul+0x141>
c00009c2:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c5:	39 f7                	cmp    edi,esi
c00009c7:	73 f0                	jae    c00009b9 <simple_strtoul+0xe1>
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	89 f8                	mov    eax,edi
c00009cd:	f7 d0                	not    eax
c00009cf:	f7 f6                	div    esi
c00009d1:	39 d8                	cmp    eax,ebx
c00009d3:	72 0e                	jb     c00009e3 <simple_strtoul+0x10b>
c00009d5:	0f af de             	imul   ebx,esi
c00009d8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009df:	01 fb                	add    ebx,edi
c00009e1:	eb 07                	jmp    c00009ea <simple_strtoul+0x112>
c00009e3:	bd 01 00 00 00       	mov    ebp,0x1
c00009e8:	31 db                	xor    ebx,ebx
c00009ea:	41                   	inc    ecx
c00009eb:	eb 9f                	jmp    c000098c <simple_strtoul+0xb4>
c00009ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f0:	09 d8                	or     eax,ebx
c00009f2:	75 1f                	jne    c0000a13 <simple_strtoul+0x13b>
c00009f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009fc:	31 db                	xor    ebx,ebx
c00009fe:	89 38                	mov    DWORD PTR [eax],edi
c0000a00:	eb 17                	jmp    c0000a19 <simple_strtoul+0x141>
c0000a02:	31 db                	xor    ebx,ebx
c0000a04:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a09:	74 14                	je     c0000a1f <simple_strtoul+0x147>
c0000a0b:	31 ed                	xor    ebp,ebp
c0000a0d:	85 c9                	test   ecx,ecx
c0000a0f:	75 e3                	jne    c00009f4 <simple_strtoul+0x11c>
c0000a11:	31 db                	xor    ebx,ebx
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x147>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x150>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	53                   	push   ebx
c0000a56:	8d 50 34             	lea    edx,[eax+0x34]
c0000a59:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a5f:	89 d1                	mov    ecx,edx
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa5:	89 10                	mov    DWORD PTR [eax],edx
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	89 c5                	mov    ebp,eax
c0000ac7:	56                   	push   esi
c0000ac8:	8d 78 34             	lea    edi,[eax+0x34]
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad5:	c1 ea 03             	shr    edx,0x3
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b53:	83 ce 01             	or     esi,0x1
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b5f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d 40 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d640
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	83 c9 03             	or     ecx,0x3
c0000bc4:	c1 e8 03             	shr    eax,0x3
c0000bc7:	89 0d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,ecx
c0000bcd:	83 e8 02             	sub    eax,0x2
c0000bd0:	8b 0c 85 44 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd29bc]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 44 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29bc],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	83 c9 01             	or     ecx,0x1
c0000bf1:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf4:	89 0d 40 d6 02 c0    	mov    DWORD PTR ds:0xc002d640,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 6c d6 02 c0    	cmp    DWORD PTR ds:0xc002d66c,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d 7c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d67c
c0000c41:	c7 42 0c 74 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d674
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 7c d6 02 c0    	mov    DWORD PTR ds:0xc002d67c,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 6c d6 02 c0    	mov    DWORD PTR ds:0xc002d66c,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 40 d6 02 c0 02 	test   BYTE PTR ds:0xc002d640,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c9f:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ca5:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ca8:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d8                	mov    eax,ebx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 30 02 00 00       	call   c0000ef8 <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 20 02 00 00       	jmp    c0000ef0 <sYSMALLOc+0x25e>
c0000cd0:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cd3:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cd9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cdc:	83 e0 fc             	and    eax,0xfffffffc
c0000cdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ce7:	83 c0 10             	add    eax,0x10
c0000cea:	01 c1                	add    ecx,eax
c0000cec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf0:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf7:	74 04                	je     c0000cfd <sYSMALLOc+0x6b>
c0000cf9:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cfd:	f7 da                	neg    edx
c0000cff:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d03:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d07:	21 d1                	and    ecx,edx
c0000d09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d0d:	7f 07                	jg     c0000d16 <sYSMALLOc+0x84>
c0000d0f:	31 c0                	xor    eax,eax
c0000d11:	e9 da 01 00 00       	jmp    c0000ef0 <sYSMALLOc+0x25e>
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d1d:	e8 51 e7 00 00       	call   c000f473 <sbrk>
c0000d22:	83 c4 10             	add    esp,0x10
c0000d25:	89 c6                	mov    esi,eax
c0000d27:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2a:	74 e3                	je     c0000d0f <sYSMALLOc+0x7d>
c0000d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d30:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d34:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d37:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d3d:	39 f1                	cmp    ecx,esi
c0000d3f:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d45:	75 13                	jne    c0000d5a <sYSMALLOc+0xc8>
c0000d47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d4f:	83 c8 01             	or     eax,0x1
c0000d52:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d55:	e9 3e 01 00 00       	jmp    c0000e98 <sYSMALLOc+0x206>
c0000d5a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d60:	88 d0                	mov    al,dl
c0000d62:	83 e0 01             	and    eax,0x1
c0000d65:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d6e:	0f 95 c0             	setne  al
c0000d71:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d75:	39 f1                	cmp    ecx,esi
c0000d77:	76 12                	jbe    c0000d8b <sYSMALLOc+0xf9>
c0000d79:	84 c0                	test   al,al
c0000d7b:	74 0e                	je     c0000d8b <sYSMALLOc+0xf9>
c0000d7d:	83 e2 fe             	and    edx,0xfffffffe
c0000d80:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d86:	e9 83 00 00 00       	jmp    c0000e0e <sYSMALLOc+0x17c>
c0000d8b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d90:	74 7c                	je     c0000e0e <sYSMALLOc+0x17c>
c0000d92:	84 c0                	test   al,al
c0000d94:	74 0c                	je     c0000da2 <sYSMALLOc+0x110>
c0000d96:	89 f0                	mov    eax,esi
c0000d98:	29 c8                	sub    eax,ecx
c0000d9a:	01 e8                	add    eax,ebp
c0000d9c:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000da2:	89 f2                	mov    edx,esi
c0000da4:	83 e2 07             	and    edx,0x7
c0000da7:	74 0c                	je     c0000db5 <sYSMALLOc+0x123>
c0000da9:	b8 08 00 00 00       	mov    eax,0x8
c0000dae:	29 d0                	sub    eax,edx
c0000db0:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000db3:	eb 04                	jmp    c0000db9 <sYSMALLOc+0x127>
c0000db5:	89 f5                	mov    ebp,esi
c0000db7:	31 c0                	xor    eax,eax
c0000db9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dc5:	01 c1                	add    ecx,eax
c0000dc7:	83 ec 0c             	sub    esp,0xc
c0000dca:	01 f1                	add    ecx,esi
c0000dcc:	01 ca                	add    edx,ecx
c0000dce:	29 c8                	sub    eax,ecx
c0000dd0:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dd4:	01 c2                	add    edx,eax
c0000dd6:	52                   	push   edx
c0000dd7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ddb:	e8 93 e6 00 00       	call   c000f473 <sbrk>
c0000de0:	83 c4 10             	add    esp,0x10
c0000de3:	83 f8 ff             	cmp    eax,0xffffffff
c0000de6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dea:	75 0f                	jne    c0000dfb <sYSMALLOc+0x169>
c0000dec:	83 ec 0c             	sub    esp,0xc
c0000def:	6a 00                	push   0x0
c0000df1:	e8 7d e6 00 00       	call   c000f473 <sbrk>
c0000df6:	83 c4 10             	add    esp,0x10
c0000df9:	eb 30                	jmp    c0000e2b <sYSMALLOc+0x199>
c0000dfb:	39 c6                	cmp    esi,eax
c0000dfd:	76 33                	jbe    c0000e32 <sYSMALLOc+0x1a0>
c0000dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e03:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e0a:	01 f0                	add    eax,esi
c0000e0c:	eb 1d                	jmp    c0000e2b <sYSMALLOc+0x199>
c0000e0e:	83 ec 0c             	sub    esp,0xc
c0000e11:	89 f5                	mov    ebp,esi
c0000e13:	6a 00                	push   0x0
c0000e15:	e8 59 e6 00 00       	call   c000f473 <sbrk>
c0000e1a:	89 c2                	mov    edx,eax
c0000e1c:	29 f2                	sub    edx,esi
c0000e1e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e22:	83 c4 10             	add    esp,0x10
c0000e25:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e2b:	31 d2                	xor    edx,edx
c0000e2d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e30:	74 66                	je     c0000e98 <sYSMALLOc+0x206>
c0000e32:	29 e8                	sub    eax,ebp
c0000e34:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e37:	01 d0                	add    eax,edx
c0000e39:	83 c8 01             	or     eax,0x1
c0000e3c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e3f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e45:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e4a:	74 4c                	je     c0000e98 <sYSMALLOc+0x206>
c0000e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e50:	83 e8 0c             	sub    eax,0xc
c0000e53:	83 e0 f8             	and    eax,0xfffffff8
c0000e56:	89 c2                	mov    edx,eax
c0000e58:	83 ca 01             	or     edx,0x1
c0000e5b:	83 f8 0f             	cmp    eax,0xf
c0000e5e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e61:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e69:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e71:	76 25                	jbe    c0000e98 <sYSMALLOc+0x206>
c0000e73:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e79:	83 ec 0c             	sub    esp,0xc
c0000e7c:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e86:	83 c7 08             	add    edi,0x8
c0000e89:	57                   	push   edi
c0000e8a:	e8 0e fd ff ff       	call   c0000b9d <dlfree>
c0000e8f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e95:	83 c4 10             	add    esp,0x10
c0000e98:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e9e:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ea4:	73 06                	jae    c0000eac <sYSMALLOc+0x21a>
c0000ea6:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eac:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eb2:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000eb8:	73 06                	jae    c0000ec0 <sYSMALLOc+0x22e>
c0000eba:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ec3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ec6:	83 e2 fc             	and    edx,0xfffffffc
c0000ec9:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ecd:	0f 82 3c fe ff ff    	jb     c0000d0f <sYSMALLOc+0x7d>
c0000ed3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ed7:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000eda:	29 fa                	sub    edx,edi
c0000edc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000edf:	83 ca 01             	or     edx,0x1
c0000ee2:	89 fb                	mov    ebx,edi
c0000ee4:	83 c0 08             	add    eax,0x8
c0000ee7:	83 cb 01             	or     ebx,0x1
c0000eea:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef0:	83 c4 2c             	add    esp,0x2c
c0000ef3:	5b                   	pop    ebx
c0000ef4:	5e                   	pop    esi
c0000ef5:	5f                   	pop    edi
c0000ef6:	5d                   	pop    ebp
c0000ef7:	c3                   	ret    

c0000ef8 <dlmalloc>:
c0000ef8:	55                   	push   ebp
c0000ef9:	57                   	push   edi
c0000efa:	56                   	push   esi
c0000efb:	53                   	push   ebx
c0000efc:	83 ec 1c             	sub    esp,0x1c
c0000eff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f03:	83 f8 df             	cmp    eax,0xffffffdf
c0000f06:	0f 87 70 03 00 00    	ja     c000127c <dlmalloc+0x384>
c0000f0c:	83 c0 0b             	add    eax,0xb
c0000f0f:	be 10 00 00 00       	mov    esi,0x10
c0000f14:	83 f8 0f             	cmp    eax,0xf
c0000f17:	76 05                	jbe    c0000f1e <dlmalloc+0x26>
c0000f19:	83 e0 f8             	and    eax,0xfffffff8
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	8b 3d 40 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d640
c0000f24:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2a:	75 17                	jne    c0000f43 <dlmalloc+0x4b>
c0000f2c:	85 ff                	test   edi,edi
c0000f2e:	0f 85 05 03 00 00    	jne    c0001239 <dlmalloc+0x341>
c0000f34:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0000f39:	e8 78 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f3e:	e9 f6 02 00 00       	jmp    c0001239 <dlmalloc+0x341>
c0000f43:	39 f7                	cmp    edi,esi
c0000f45:	72 1f                	jb     c0000f66 <dlmalloc+0x6e>
c0000f47:	89 f2                	mov    edx,esi
c0000f49:	c1 ea 03             	shr    edx,0x3
c0000f4c:	83 ea 02             	sub    edx,0x2
c0000f4f:	8b 04 95 44 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd29bc]
c0000f56:	85 c0                	test   eax,eax
c0000f58:	74 0c                	je     c0000f66 <dlmalloc+0x6e>
c0000f5a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f5d:	89 0c 95 44 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd29bc],ecx
c0000f64:	eb 30                	jmp    c0000f96 <dlmalloc+0x9e>
c0000f66:	89 f0                	mov    eax,esi
c0000f68:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f6e:	77 2e                	ja     c0000f9e <dlmalloc+0xa6>
c0000f70:	c1 e8 03             	shr    eax,0x3
c0000f73:	8d 14 c5 74 d6 02 c0 	lea    edx,[eax*8-0x3ffd298c]
c0000f7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7e:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f81:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f84:	39 c3                	cmp    ebx,eax
c0000f86:	74 2e                	je     c0000fb6 <dlmalloc+0xbe>
c0000f88:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8b:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f93:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f96:	83 c0 08             	add    eax,0x8
c0000f99:	e9 e0 02 00 00       	jmp    c000127e <dlmalloc+0x386>
c0000f9e:	e8 8f fa ff ff       	call   c0000a32 <largebin_index>
c0000fa3:	83 e7 02             	and    edi,0x2
c0000fa6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000faa:	74 0a                	je     c0000fb6 <dlmalloc+0xbe>
c0000fac:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0000fb1:	e8 00 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb6:	8d 46 10             	lea    eax,[esi+0x10]
c0000fb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fbd:	8b 1d 80 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d680
c0000fc3:	81 fb 74 d6 02 c0    	cmp    ebx,0xc002d674
c0000fc9:	0f 84 13 01 00 00    	je     c00010e2 <dlmalloc+0x1ea>
c0000fcf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd5:	83 e7 fc             	and    edi,0xfffffffc
c0000fd8:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fde:	77 4c                	ja     c000102c <dlmalloc+0x134>
c0000fe0:	3d 74 d6 02 c0       	cmp    eax,0xc002d674
c0000fe5:	75 45                	jne    c000102c <dlmalloc+0x134>
c0000fe7:	39 1d 70 d6 02 c0    	cmp    DWORD PTR ds:0xc002d670,ebx
c0000fed:	75 3d                	jne    c000102c <dlmalloc+0x134>
c0000fef:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff3:	73 37                	jae    c000102c <dlmalloc+0x134>
c0000ff5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	a3 7c d6 02 c0       	mov    ds:0xc002d67c,eax
c0000fff:	a3 80 d6 02 c0       	mov    ds:0xc002d680,eax
c0001004:	a3 70 d6 02 c0       	mov    ds:0xc002d670,eax
c0001009:	29 f2                	sub    edx,esi
c000100b:	c7 40 08 74 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d674
c0001012:	c7 40 0c 74 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d674
c0001019:	83 ce 01             	or     esi,0x1
c000101c:	89 d1                	mov    ecx,edx
c000101e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001021:	83 c9 01             	or     ecx,0x1
c0001024:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001027:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102a:	eb 15                	jmp    c0001041 <dlmalloc+0x149>
c000102c:	a3 80 d6 02 c0       	mov    ds:0xc002d680,eax
c0001031:	39 fe                	cmp    esi,edi
c0001033:	c7 40 08 74 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d674
c000103a:	75 0d                	jne    c0001049 <dlmalloc+0x151>
c000103c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001041:	8d 43 08             	lea    eax,[ebx+0x8]
c0001044:	e9 35 02 00 00       	jmp    c000127e <dlmalloc+0x386>
c0001049:	89 f8                	mov    eax,edi
c000104b:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001051:	77 19                	ja     c000106c <dlmalloc+0x174>
c0001053:	c1 e8 03             	shr    eax,0x3
c0001056:	8d 14 00             	lea    edx,[eax+eax*1]
c0001059:	83 c2 0d             	add    edx,0xd
c000105c:	8d 2c 95 38 d6 02 c0 	lea    ebp,[edx*4-0x3ffd29c8]
c0001063:	8b 14 95 40 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd29c0]
c000106a:	eb 46                	jmp    c00010b2 <dlmalloc+0x1ba>
c000106c:	e8 c1 f9 ff ff       	call   c0000a32 <largebin_index>
c0001071:	8d 14 00             	lea    edx,[eax+eax*1]
c0001074:	83 c2 0d             	add    edx,0xd
c0001077:	8d 0c 95 40 d6 02 c0 	lea    ecx,[edx*4-0x3ffd29c0]
c000107e:	8b 14 95 40 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd29c0]
c0001085:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001088:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108c:	89 d5                	mov    ebp,edx
c000108e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001092:	74 1e                	je     c00010b2 <dlmalloc+0x1ba>
c0001094:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001097:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109a:	77 12                	ja     c00010ae <dlmalloc+0x1b6>
c000109c:	83 cf 01             	or     edi,0x1
c000109f:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a2:	76 05                	jbe    c00010a9 <dlmalloc+0x1b1>
c00010a4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010a7:	eb f6                	jmp    c000109f <dlmalloc+0x1a7>
c00010a9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010ac:	eb 04                	jmp    c00010b2 <dlmalloc+0x1ba>
c00010ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b2:	89 c7                	mov    edi,eax
c00010b4:	88 c1                	mov    cl,al
c00010b6:	c1 ff 05             	sar    edi,0x5
c00010b9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010bd:	bf 01 00 00 00       	mov    edi,0x1
c00010c2:	d3 e7                	shl    edi,cl
c00010c4:	89 f8                	mov    eax,edi
c00010c6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010ca:	09 04 bd 74 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd268c],eax
c00010d1:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010d7:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010da:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010dd:	e9 db fe ff ff       	jmp    c0000fbd <dlmalloc+0xc5>
c00010e2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e8:	76 78                	jbe    c0001162 <dlmalloc+0x26a>
c00010ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ee:	8d 04 c5 74 d6 02 c0 	lea    eax,[eax*8-0x3ffd298c]
c00010f5:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fb:	39 ca                	cmp    edx,ecx
c00010fd:	74 63                	je     c0001162 <dlmalloc+0x26a>
c00010ff:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001102:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001105:	83 e3 fc             	and    ebx,0xfffffffc
c0001108:	39 de                	cmp    esi,ebx
c000110a:	77 52                	ja     c000115e <dlmalloc+0x266>
c000110c:	89 df                	mov    edi,ebx
c000110e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001111:	29 f7                	sub    edi,esi
c0001113:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	8d 42 08             	lea    eax,[edx+0x8]
c0001121:	77 09                	ja     c000112c <dlmalloc+0x234>
c0001123:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001127:	e9 52 01 00 00       	jmp    c000127e <dlmalloc+0x386>
c000112c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000112f:	83 ce 01             	or     esi,0x1
c0001132:	89 0d 7c d6 02 c0    	mov    DWORD PTR ds:0xc002d67c,ecx
c0001138:	89 0d 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,ecx
c000113e:	c7 41 08 74 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d674
c0001145:	c7 41 0c 74 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d674
c000114c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000114f:	89 fa                	mov    edx,edi
c0001151:	83 ca 01             	or     edx,0x1
c0001154:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001157:	89 3b                	mov    DWORD PTR [ebx],edi
c0001159:	e9 20 01 00 00       	jmp    c000127e <dlmalloc+0x386>
c000115e:	89 c2                	mov    edx,eax
c0001160:	eb 99                	jmp    c00010fb <dlmalloc+0x203>
c0001162:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001166:	b8 01 00 00 00       	mov    eax,0x1
c000116b:	41                   	inc    ecx
c000116c:	89 cb                	mov    ebx,ecx
c000116e:	8d 14 cd 6c d6 02 c0 	lea    edx,[ecx*8-0x3ffd2994]
c0001175:	c1 eb 05             	shr    ebx,0x5
c0001178:	d3 e0                	shl    eax,cl
c000117a:	8b 3c 9d 74 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd268c]
c0001181:	39 f8                	cmp    eax,edi
c0001183:	77 04                	ja     c0001189 <dlmalloc+0x291>
c0001185:	85 c0                	test   eax,eax
c0001187:	75 26                	jne    c00011af <dlmalloc+0x2b7>
c0001189:	43                   	inc    ebx
c000118a:	83 fb 02             	cmp    ebx,0x2
c000118d:	0f 87 a6 00 00 00    	ja     c0001239 <dlmalloc+0x341>
c0001193:	8b 3c 9d 74 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd268c]
c000119a:	85 ff                	test   edi,edi
c000119c:	74 eb                	je     c0001189 <dlmalloc+0x291>
c000119e:	89 d8                	mov    eax,ebx
c00011a0:	c1 e0 06             	shl    eax,0x6
c00011a3:	8d 14 85 6c d6 02 c0 	lea    edx,[eax*4-0x3ffd2994]
c00011aa:	b8 01 00 00 00       	mov    eax,0x1
c00011af:	85 f8                	test   eax,edi
c00011b1:	75 07                	jne    c00011ba <dlmalloc+0x2c2>
c00011b3:	83 c2 08             	add    edx,0x8
c00011b6:	01 c0                	add    eax,eax
c00011b8:	eb f5                	jmp    c00011af <dlmalloc+0x2b7>
c00011ba:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011bd:	39 ca                	cmp    edx,ecx
c00011bf:	75 14                	jne    c00011d5 <dlmalloc+0x2dd>
c00011c1:	89 c1                	mov    ecx,eax
c00011c3:	83 c2 08             	add    edx,0x8
c00011c6:	f7 d1                	not    ecx
c00011c8:	01 c0                	add    eax,eax
c00011ca:	21 cf                	and    edi,ecx
c00011cc:	89 3c 9d 74 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd268c],edi
c00011d3:	eb ac                	jmp    c0001181 <dlmalloc+0x289>
c00011d5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011d8:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011db:	83 e0 fc             	and    eax,0xfffffffc
c00011de:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e1:	89 c3                	mov    ebx,eax
c00011e3:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e6:	29 f3                	sub    ebx,esi
c00011e8:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011eb:	83 fb 0f             	cmp    ebx,0xf
c00011ee:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f1:	77 09                	ja     c00011fc <dlmalloc+0x304>
c00011f3:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011f7:	e9 82 00 00 00       	jmp    c000127e <dlmalloc+0x386>
c00011fc:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	89 3d 7c d6 02 c0    	mov    DWORD PTR ds:0xc002d67c,edi
c000120b:	89 3d 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edi
c0001211:	c7 47 08 74 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d674
c0001218:	c7 47 0c 74 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d674
c000121f:	77 06                	ja     c0001227 <dlmalloc+0x32f>
c0001221:	89 3d 70 d6 02 c0    	mov    DWORD PTR ds:0xc002d670,edi
c0001227:	83 ce 01             	or     esi,0x1
c000122a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000122d:	89 d9                	mov    ecx,ebx
c000122f:	83 c9 01             	or     ecx,0x1
c0001232:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001235:	89 1a                	mov    DWORD PTR [edx],ebx
c0001237:	eb 45                	jmp    c000127e <dlmalloc+0x386>
c0001239:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c000123e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001241:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001244:	83 e2 fc             	and    edx,0xfffffffc
c0001247:	39 d1                	cmp    ecx,edx
c0001249:	77 1e                	ja     c0001269 <dlmalloc+0x371>
c000124b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000124e:	89 f3                	mov    ebx,esi
c0001250:	89 0d 6c d6 02 c0    	mov    DWORD PTR ds:0xc002d66c,ecx
c0001256:	83 cb 01             	or     ebx,0x1
c0001259:	29 f2                	sub    edx,esi
c000125b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000125e:	83 ca 01             	or     edx,0x1
c0001261:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001264:	e9 2d fd ff ff       	jmp    c0000f96 <dlmalloc+0x9e>
c0001269:	83 c4 1c             	add    esp,0x1c
c000126c:	89 f0                	mov    eax,esi
c000126e:	5b                   	pop    ebx
c000126f:	ba 40 d6 02 c0       	mov    edx,0xc002d640
c0001274:	5e                   	pop    esi
c0001275:	5f                   	pop    edi
c0001276:	5d                   	pop    ebp
c0001277:	e9 16 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127c:	31 c0                	xor    eax,eax
c000127e:	83 c4 1c             	add    esp,0x1c
c0001281:	5b                   	pop    ebx
c0001282:	5e                   	pop    esi
c0001283:	5f                   	pop    edi
c0001284:	5d                   	pop    ebp
c0001285:	c3                   	ret    

c0001286 <iALLOc>:
c0001286:	55                   	push   ebp
c0001287:	89 c5                	mov    ebp,eax
c0001289:	57                   	push   edi
c000128a:	56                   	push   esi
c000128b:	53                   	push   ebx
c000128c:	83 ec 2c             	sub    esp,0x2c
c000128f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001293:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000129b:	83 3d 40 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d640,0x0
c00012a2:	75 12                	jne    c00012b6 <iALLOc+0x30>
c00012a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012a8:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00012ad:	e8 04 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012bb:	74 12                	je     c00012cf <iALLOc+0x49>
c00012bd:	85 ed                	test   ebp,ebp
c00012bf:	0f 84 64 01 00 00    	je     c0001429 <iALLOc+0x1a3>
c00012c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012cd:	eb 33                	jmp    c0001302 <iALLOc+0x7c>
c00012cf:	85 ed                	test   ebp,ebp
c00012d1:	75 14                	jne    c00012e7 <iALLOc+0x61>
c00012d3:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012db:	83 c4 2c             	add    esp,0x2c
c00012de:	5b                   	pop    ebx
c00012df:	5e                   	pop    esi
c00012e0:	5f                   	pop    edi
c00012e1:	5d                   	pop    ebp
c00012e2:	e9 11 fc ff ff       	jmp    c0000ef8 <dlmalloc>
c00012e7:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ee:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f6:	83 f8 0f             	cmp    eax,0xf
c00012f9:	76 07                	jbe    c0001302 <iALLOc+0x7c>
c00012fb:	83 e0 f8             	and    eax,0xfffffff8
c00012fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001302:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001307:	75 09                	jne    c0001312 <iALLOc+0x8c>
c0001309:	89 d0                	mov    eax,edx
c000130b:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000130e:	31 f6                	xor    esi,esi
c0001310:	eb 3b                	jmp    c000134d <iALLOc+0xc7>
c0001312:	8b 02                	mov    eax,DWORD PTR [edx]
c0001314:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131c:	83 c0 0b             	add    eax,0xb
c000131f:	83 f8 0f             	cmp    eax,0xf
c0001322:	76 07                	jbe    c000132b <iALLOc+0xa5>
c0001324:	83 e0 f8             	and    eax,0xfffffff8
c0001327:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000132f:	0f af f5             	imul   esi,ebp
c0001332:	eb 25                	jmp    c0001359 <iALLOc+0xd3>
c0001334:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001336:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001339:	bb 10 00 00 00       	mov    ebx,0x10
c000133e:	83 f9 0f             	cmp    ecx,0xf
c0001341:	76 05                	jbe    c0001348 <iALLOc+0xc2>
c0001343:	83 e1 f8             	and    ecx,0xfffffff8
c0001346:	89 cb                	mov    ebx,ecx
c0001348:	01 de                	add    esi,ebx
c000134a:	83 c0 04             	add    eax,0x4
c000134d:	39 c7                	cmp    edi,eax
c000134f:	75 e3                	jne    c0001334 <iALLOc+0xae>
c0001351:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001359:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000135d:	8b 1d 94 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d994
c0001363:	83 ec 0c             	sub    esp,0xc
c0001366:	c7 05 94 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d994,0x0
c0001370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001374:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001378:	50                   	push   eax
c0001379:	e8 7a fb ff ff       	call   c0000ef8 <dlmalloc>
c000137e:	83 c4 10             	add    esp,0x10
c0001381:	89 1d 94 d9 02 c0    	mov    DWORD PTR ds:0xc002d994,ebx
c0001387:	85 c0                	test   eax,eax
c0001389:	0f 84 92 00 00 00    	je     c0001421 <iALLOc+0x19b>
c000138f:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001392:	8d 78 f8             	lea    edi,[eax-0x8]
c0001395:	83 e3 fc             	and    ebx,0xfffffffc
c0001398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139c:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a1:	74 1e                	je     c00013c1 <iALLOc+0x13b>
c00013a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013a7:	89 d9                	mov    ecx,ebx
c00013a9:	52                   	push   edx
c00013aa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013ae:	83 e9 04             	sub    ecx,0x4
c00013b1:	51                   	push   ecx
c00013b2:	6a 00                	push   0x0
c00013b4:	50                   	push   eax
c00013b5:	e8 02 f3 ff ff       	call   c00006bc <memset>
c00013ba:	83 c4 10             	add    esp,0x10
c00013bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c6:	75 14                	jne    c00013dc <iALLOc+0x156>
c00013c8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013cb:	29 f3                	sub    ebx,esi
c00013cd:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013d7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013da:	89 f3                	mov    ebx,esi
c00013dc:	31 c0                	xor    eax,eax
c00013de:	4d                   	dec    ebp
c00013df:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	39 c5                	cmp    ebp,eax
c00013e8:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013eb:	74 2c                	je     c0001419 <iALLOc+0x193>
c00013ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f1:	85 c9                	test   ecx,ecx
c00013f3:	75 15                	jne    c000140a <iALLOc+0x184>
c00013f5:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013f8:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fb:	b9 10 00 00 00       	mov    ecx,0x10
c0001400:	83 fe 0f             	cmp    esi,0xf
c0001403:	76 05                	jbe    c000140a <iALLOc+0x184>
c0001405:	83 e6 f8             	and    esi,0xfffffff8
c0001408:	89 f1                	mov    ecx,esi
c000140a:	89 ce                	mov    esi,ecx
c000140c:	29 cb                	sub    ebx,ecx
c000140e:	83 ce 01             	or     esi,0x1
c0001411:	40                   	inc    eax
c0001412:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001415:	01 cf                	add    edi,ecx
c0001417:	eb c6                	jmp    c00013df <iALLOc+0x159>
c0001419:	83 cb 01             	or     ebx,0x1
c000141c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000141f:	eb 08                	jmp    c0001429 <iALLOc+0x1a3>
c0001421:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000142d:	83 c4 2c             	add    esp,0x2c
c0001430:	5b                   	pop    ebx
c0001431:	5e                   	pop    esi
c0001432:	5f                   	pop    edi
c0001433:	5d                   	pop    ebp
c0001434:	c3                   	ret    

c0001435 <dlrealloc>:
c0001435:	55                   	push   ebp
c0001436:	57                   	push   edi
c0001437:	56                   	push   esi
c0001438:	53                   	push   ebx
c0001439:	83 ec 1c             	sub    esp,0x1c
c000143c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001440:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001444:	85 db                	test   ebx,ebx
c0001446:	75 10                	jne    c0001458 <dlrealloc+0x23>
c0001448:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144c:	83 c4 1c             	add    esp,0x1c
c000144f:	5b                   	pop    ebx
c0001450:	5e                   	pop    esi
c0001451:	5f                   	pop    edi
c0001452:	5d                   	pop    ebp
c0001453:	e9 a0 fa ff ff       	jmp    c0000ef8 <dlmalloc>
c0001458:	83 f8 df             	cmp    eax,0xffffffdf
c000145b:	76 07                	jbe    c0001464 <dlrealloc+0x2f>
c000145d:	31 db                	xor    ebx,ebx
c000145f:	e9 7c 01 00 00       	jmp    c00015e0 <dlrealloc+0x1ab>
c0001464:	83 c0 0b             	add    eax,0xb
c0001467:	bf 10 00 00 00       	mov    edi,0x10
c000146c:	83 f8 0f             	cmp    eax,0xf
c000146f:	76 05                	jbe    c0001476 <dlrealloc+0x41>
c0001471:	83 e0 f8             	and    eax,0xfffffff8
c0001474:	89 c7                	mov    edi,eax
c0001476:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001479:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147c:	89 c6                	mov    esi,eax
c000147e:	83 e6 fc             	and    esi,0xfffffffc
c0001481:	a8 02                	test   al,0x2
c0001483:	75 d8                	jne    c000145d <dlrealloc+0x28>
c0001485:	39 f7                	cmp    edi,esi
c0001487:	0f 86 15 01 00 00    	jbe    c00015a2 <dlrealloc+0x16d>
c000148d:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001491:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001494:	39 15 6c d6 02 c0    	cmp    DWORD PTR ds:0xc002d66c,edx
c000149a:	75 33                	jne    c00014cf <dlrealloc+0x9a>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a5:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014a8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014ac:	77 49                	ja     c00014f7 <dlrealloc+0xc2>
c00014ae:	01 fd                	add    ebp,edi
c00014b0:	83 e0 01             	and    eax,0x1
c00014b3:	09 f8                	or     eax,edi
c00014b5:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014b8:	89 2d 6c d6 02 c0    	mov    DWORD PTR ds:0xc002d66c,ebp
c00014be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c2:	29 f8                	sub    eax,edi
c00014c4:	83 c8 01             	or     eax,0x1
c00014c7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014ca:	e9 11 01 00 00       	jmp    c00015e0 <dlrealloc+0x1ab>
c00014cf:	89 c8                	mov    eax,ecx
c00014d1:	83 e0 fe             	and    eax,0xfffffffe
c00014d4:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014d9:	75 1c                	jne    c00014f7 <dlrealloc+0xc2>
c00014db:	83 e1 fc             	and    ecx,0xfffffffc
c00014de:	01 f1                	add    ecx,esi
c00014e0:	39 cf                	cmp    edi,ecx
c00014e2:	77 13                	ja     c00014f7 <dlrealloc+0xc2>
c00014e4:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014e7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ea:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ed:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f0:	89 ce                	mov    esi,ecx
c00014f2:	e9 ab 00 00 00       	jmp    c00015a2 <dlrealloc+0x16d>
c00014f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fb:	8d 47 f9             	lea    eax,[edi-0x7]
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	50                   	push   eax
c0001502:	e8 f1 f9 ff ff       	call   c0000ef8 <dlmalloc>
c0001507:	83 c4 10             	add    esp,0x10
c000150a:	89 c1                	mov    ecx,eax
c000150c:	85 c0                	test   eax,eax
c000150e:	0f 84 49 ff ff ff    	je     c000145d <dlrealloc+0x28>
c0001514:	8d 40 f8             	lea    eax,[eax-0x8]
c0001517:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151b:	39 c2                	cmp    edx,eax
c000151d:	75 0a                	jne    c0001529 <dlrealloc+0xf4>
c000151f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001522:	83 e0 fc             	and    eax,0xfffffffc
c0001525:	01 c6                	add    esi,eax
c0001527:	eb 79                	jmp    c00015a2 <dlrealloc+0x16d>
c0001529:	83 ee 04             	sub    esi,0x4
c000152c:	83 fe 27             	cmp    esi,0x27
c000152f:	76 16                	jbe    c0001547 <dlrealloc+0x112>
c0001531:	50                   	push   eax
c0001532:	56                   	push   esi
c0001533:	53                   	push   ebx
c0001534:	51                   	push   ecx
c0001535:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001539:	e8 62 f1 ff ff       	call   c00006a0 <memcpy>
c000153e:	83 c4 10             	add    esp,0x10
c0001541:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001545:	eb 43                	jmp    c000158a <dlrealloc+0x155>
c0001547:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001549:	83 fe 13             	cmp    esi,0x13
c000154c:	89 01                	mov    DWORD PTR [ecx],eax
c000154e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001551:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001554:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001557:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155a:	76 2e                	jbe    c000158a <dlrealloc+0x155>
c000155c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000155f:	83 fe 1b             	cmp    esi,0x1b
c0001562:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001565:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001568:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156b:	76 1d                	jbe    c000158a <dlrealloc+0x155>
c000156d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001570:	83 fe 23             	cmp    esi,0x23
c0001573:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001576:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001579:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157c:	76 0c                	jbe    c000158a <dlrealloc+0x155>
c000157e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001581:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001584:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001587:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158e:	83 ec 0c             	sub    esp,0xc
c0001591:	53                   	push   ebx
c0001592:	e8 06 f6 ff ff       	call   c0000b9d <dlfree>
c0001597:	83 c4 10             	add    esp,0x10
c000159a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000159e:	89 cb                	mov    ebx,ecx
c00015a0:	eb 3e                	jmp    c00015e0 <dlrealloc+0x1ab>
c00015a2:	89 f2                	mov    edx,esi
c00015a4:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015a7:	29 fa                	sub    edx,edi
c00015a9:	83 e1 01             	and    ecx,0x1
c00015ac:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b0:	83 fa 0f             	cmp    edx,0xf
c00015b3:	77 0b                	ja     c00015c0 <dlrealloc+0x18b>
c00015b5:	09 ce                	or     esi,ecx
c00015b7:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015ba:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015be:	eb 20                	jmp    c00015e0 <dlrealloc+0x1ab>
c00015c0:	01 fd                	add    ebp,edi
c00015c2:	83 ec 0c             	sub    esp,0xc
c00015c5:	09 cf                	or     edi,ecx
c00015c7:	83 ca 01             	or     edx,0x1
c00015ca:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015cd:	83 c5 08             	add    ebp,0x8
c00015d0:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	55                   	push   ebp
c00015d8:	e8 c0 f5 ff ff       	call   c0000b9d <dlfree>
c00015dd:	83 c4 10             	add    esp,0x10
c00015e0:	83 c4 1c             	add    esp,0x1c
c00015e3:	89 d8                	mov    eax,ebx
c00015e5:	5b                   	pop    ebx
c00015e6:	5e                   	pop    esi
c00015e7:	5f                   	pop    edi
c00015e8:	5d                   	pop    ebp
c00015e9:	c3                   	ret    

c00015ea <dlmemalign>:
c00015ea:	55                   	push   ebp
c00015eb:	57                   	push   edi
c00015ec:	56                   	push   esi
c00015ed:	53                   	push   ebx
c00015ee:	83 ec 0c             	sub    esp,0xc
c00015f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015f9:	83 fa 08             	cmp    edx,0x8
c00015fc:	77 10                	ja     c000160e <dlmemalign+0x24>
c00015fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001602:	83 c4 0c             	add    esp,0xc
c0001605:	5b                   	pop    ebx
c0001606:	5e                   	pop    esi
c0001607:	5f                   	pop    edi
c0001608:	5d                   	pop    ebp
c0001609:	e9 ea f8 ff ff       	jmp    c0000ef8 <dlmalloc>
c000160e:	bf 10 00 00 00       	mov    edi,0x10
c0001613:	83 fa 0f             	cmp    edx,0xf
c0001616:	76 13                	jbe    c000162b <dlmemalign+0x41>
c0001618:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161b:	85 d1                	test   ecx,edx
c000161d:	75 04                	jne    c0001623 <dlmemalign+0x39>
c000161f:	89 d7                	mov    edi,edx
c0001621:	eb 08                	jmp    c000162b <dlmemalign+0x41>
c0001623:	39 d7                	cmp    edi,edx
c0001625:	73 04                	jae    c000162b <dlmemalign+0x41>
c0001627:	01 ff                	add    edi,edi
c0001629:	eb f8                	jmp    c0001623 <dlmemalign+0x39>
c000162b:	83 f8 df             	cmp    eax,0xffffffdf
c000162e:	76 07                	jbe    c0001637 <dlmemalign+0x4d>
c0001630:	31 c0                	xor    eax,eax
c0001632:	e9 ce 00 00 00       	jmp    c0001705 <dlmemalign+0x11b>
c0001637:	83 c0 0b             	add    eax,0xb
c000163a:	bd 10 00 00 00       	mov    ebp,0x10
c000163f:	83 f8 0f             	cmp    eax,0xf
c0001642:	76 05                	jbe    c0001649 <dlmemalign+0x5f>
c0001644:	83 e0 f8             	and    eax,0xfffffff8
c0001647:	89 c5                	mov    ebp,eax
c0001649:	83 ec 0c             	sub    esp,0xc
c000164c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001650:	50                   	push   eax
c0001651:	e8 a2 f8 ff ff       	call   c0000ef8 <dlmalloc>
c0001656:	83 c4 10             	add    esp,0x10
c0001659:	89 c1                	mov    ecx,eax
c000165b:	85 c0                	test   eax,eax
c000165d:	74 d1                	je     c0001630 <dlmemalign+0x46>
c000165f:	31 d2                	xor    edx,edx
c0001661:	8d 70 f8             	lea    esi,[eax-0x8]
c0001664:	f7 f7                	div    edi
c0001666:	85 d2                	test   edx,edx
c0001668:	74 62                	je     c00016cc <dlmemalign+0xe2>
c000166a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000166e:	89 f8                	mov    eax,edi
c0001670:	f7 d8                	neg    eax
c0001672:	21 c3                	and    ebx,eax
c0001674:	83 eb 08             	sub    ebx,0x8
c0001677:	89 d8                	mov    eax,ebx
c0001679:	29 f0                	sub    eax,esi
c000167b:	83 f8 0f             	cmp    eax,0xf
c000167e:	77 02                	ja     c0001682 <dlmemalign+0x98>
c0001680:	01 fb                	add    ebx,edi
c0001682:	89 d8                	mov    eax,ebx
c0001684:	29 f0                	sub    eax,esi
c0001686:	89 c6                	mov    esi,eax
c0001688:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168b:	89 c2                	mov    edx,eax
c000168d:	83 e2 fc             	and    edx,0xfffffffc
c0001690:	29 f2                	sub    edx,esi
c0001692:	a8 02                	test   al,0x2
c0001694:	74 10                	je     c00016a6 <dlmemalign+0xbc>
c0001696:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001699:	83 ca 02             	or     edx,0x2
c000169c:	8d 43 08             	lea    eax,[ebx+0x8]
c000169f:	89 33                	mov    DWORD PTR [ebx],esi
c00016a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a4:	eb 5f                	jmp    c0001705 <dlmemalign+0x11b>
c00016a6:	83 ec 0c             	sub    esp,0xc
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 c8 01             	or     eax,0x1
c00016ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b9:	83 e0 01             	and    eax,0x1
c00016bc:	09 f0                	or     eax,esi
c00016be:	89 de                	mov    esi,ebx
c00016c0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c3:	51                   	push   ecx
c00016c4:	e8 d4 f4 ff ff       	call   c0000b9d <dlfree>
c00016c9:	83 c4 10             	add    esp,0x10
c00016cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016cf:	a8 02                	test   al,0x2
c00016d1:	75 2f                	jne    c0001702 <dlmemalign+0x118>
c00016d3:	83 e0 fc             	and    eax,0xfffffffc
c00016d6:	8d 55 10             	lea    edx,[ebp+0x10]
c00016d9:	39 c2                	cmp    edx,eax
c00016db:	73 25                	jae    c0001702 <dlmemalign+0x118>
c00016dd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e0:	83 ec 0c             	sub    esp,0xc
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c2 08             	add    edx,0x8
c00016e8:	83 c8 01             	or     eax,0x1
c00016eb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f1:	83 e0 01             	and    eax,0x1
c00016f4:	09 c5                	or     ebp,eax
c00016f6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016f9:	52                   	push   edx
c00016fa:	e8 9e f4 ff ff       	call   c0000b9d <dlfree>
c00016ff:	83 c4 10             	add    esp,0x10
c0001702:	8d 46 08             	lea    eax,[esi+0x8]
c0001705:	83 c4 0c             	add    esp,0xc
c0001708:	5b                   	pop    ebx
c0001709:	5e                   	pop    esi
c000170a:	5f                   	pop    edi
c000170b:	5d                   	pop    ebp
c000170c:	c3                   	ret    

c000170d <dlcalloc>:
c000170d:	53                   	push   ebx
c000170e:	83 ec 14             	sub    esp,0x14
c0001711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001715:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171a:	50                   	push   eax
c000171b:	e8 d8 f7 ff ff       	call   c0000ef8 <dlmalloc>
c0001720:	83 c4 10             	add    esp,0x10
c0001723:	89 c3                	mov    ebx,eax
c0001725:	85 c0                	test   eax,eax
c0001727:	74 77                	je     c00017a0 <dlcalloc+0x93>
c0001729:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172c:	89 d0                	mov    eax,edx
c000172e:	83 e0 fc             	and    eax,0xfffffffc
c0001731:	80 e2 02             	and    dl,0x2
c0001734:	75 5a                	jne    c0001790 <dlcalloc+0x83>
c0001736:	83 e8 04             	sub    eax,0x4
c0001739:	83 f8 27             	cmp    eax,0x27
c000173c:	76 03                	jbe    c0001741 <dlcalloc+0x34>
c000173e:	51                   	push   ecx
c000173f:	eb 53                	jmp    c0001794 <dlcalloc+0x87>
c0001741:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001747:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000174e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001755:	83 f8 13             	cmp    eax,0x13
c0001758:	76 46                	jbe    c00017a0 <dlcalloc+0x93>
c000175a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001761:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001768:	83 f8 1b             	cmp    eax,0x1b
c000176b:	76 33                	jbe    c00017a0 <dlcalloc+0x93>
c000176d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001774:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177b:	83 f8 23             	cmp    eax,0x23
c000177e:	76 20                	jbe    c00017a0 <dlcalloc+0x93>
c0001780:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001787:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000178e:	eb 10                	jmp    c00017a0 <dlcalloc+0x93>
c0001790:	83 e8 08             	sub    eax,0x8
c0001793:	52                   	push   edx
c0001794:	50                   	push   eax
c0001795:	6a 00                	push   0x0
c0001797:	53                   	push   ebx
c0001798:	e8 1f ef ff ff       	call   c00006bc <memset>
c000179d:	83 c4 10             	add    esp,0x10
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	83 c4 08             	add    esp,0x8
c00017a5:	5b                   	pop    ebx
c00017a6:	c3                   	ret    

c00017a7 <dlcfree>:
c00017a7:	e9 f1 f3 ff ff       	jmp    c0000b9d <dlfree>

c00017ac <dlindependent_calloc>:
c00017ac:	83 ec 28             	sub    esp,0x28
c00017af:	b9 03 00 00 00       	mov    ecx,0x3
c00017b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c8:	e8 b9 fa ff ff       	call   c0001286 <iALLOc>
c00017cd:	83 c4 2c             	add    esp,0x2c
c00017d0:	c3                   	ret    

c00017d1 <dlindependent_comalloc>:
c00017d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017d9:	31 c9                	xor    ecx,ecx
c00017db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e3:	e9 9e fa ff ff       	jmp    c0001286 <iALLOc>

c00017e8 <dlvalloc>:
c00017e8:	83 ec 0c             	sub    esp,0xc
c00017eb:	83 3d 40 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d640,0x0
c00017f2:	75 0a                	jne    c00017fe <dlvalloc+0x16>
c00017f4:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00017f9:	e8 b8 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00017fe:	50                   	push   eax
c00017ff:	50                   	push   eax
c0001800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001804:	ff 35 9c d9 02 c0    	push   DWORD PTR ds:0xc002d99c
c000180a:	e8 db fd ff ff       	call   c00015ea <dlmemalign>
c000180f:	83 c4 1c             	add    esp,0x1c
c0001812:	c3                   	ret    

c0001813 <dlpvalloc>:
c0001813:	83 ec 0c             	sub    esp,0xc
c0001816:	83 3d 40 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d640,0x0
c000181d:	75 0a                	jne    c0001829 <dlpvalloc+0x16>
c000181f:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0001824:	e8 8d f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001829:	a1 9c d9 02 c0       	mov    eax,ds:0xc002d99c
c000182e:	89 c1                	mov    ecx,eax
c0001830:	52                   	push   edx
c0001831:	f7 d9                	neg    ecx
c0001833:	52                   	push   edx
c0001834:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001838:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183c:	21 ca                	and    edx,ecx
c000183e:	52                   	push   edx
c000183f:	50                   	push   eax
c0001840:	e8 a5 fd ff ff       	call   c00015ea <dlmemalign>
c0001845:	83 c4 1c             	add    esp,0x1c
c0001848:	c3                   	ret    

c0001849 <dlmalloc_trim>:
c0001849:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c000184e:	e8 63 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001853:	31 c0                	xor    eax,eax
c0001855:	c3                   	ret    

c0001856 <dlmalloc_usable_size>:
c0001856:	53                   	push   ebx
c0001857:	31 c0                	xor    eax,eax
c0001859:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000185d:	85 c9                	test   ecx,ecx
c000185f:	74 24                	je     c0001885 <dlmalloc_usable_size+0x2f>
c0001861:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001864:	f6 c2 02             	test   dl,0x2
c0001867:	74 08                	je     c0001871 <dlmalloc_usable_size+0x1b>
c0001869:	83 e2 fc             	and    edx,0xfffffffc
c000186c:	8d 42 f8             	lea    eax,[edx-0x8]
c000186f:	eb 14                	jmp    c0001885 <dlmalloc_usable_size+0x2f>
c0001871:	89 d3                	mov    ebx,edx
c0001873:	31 c0                	xor    eax,eax
c0001875:	83 e3 fe             	and    ebx,0xfffffffe
c0001878:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000187d:	74 06                	je     c0001885 <dlmalloc_usable_size+0x2f>
c000187f:	83 e2 fc             	and    edx,0xfffffffc
c0001882:	8d 42 fc             	lea    eax,[edx-0x4]
c0001885:	5b                   	pop    ebx
c0001886:	c3                   	ret    

c0001887 <dlmallinfo>:
c0001887:	55                   	push   ebp
c0001888:	57                   	push   edi
c0001889:	56                   	push   esi
c000188a:	53                   	push   ebx
c000188b:	83 ec 08             	sub    esp,0x8
c000188e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001892:	83 3d 6c d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d66c,0x0
c0001899:	75 0a                	jne    c00018a5 <dlmallinfo+0x1e>
c000189b:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00018a0:	e8 11 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a5:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c00018aa:	31 ed                	xor    ebp,ebp
c00018ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018b8:	31 c0                	xor    eax,eax
c00018ba:	8b 14 85 44 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd29bc]
c00018c1:	85 d2                	test   edx,edx
c00018c3:	74 0e                	je     c00018d3 <dlmallinfo+0x4c>
c00018c5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018c8:	45                   	inc    ebp
c00018c9:	83 e6 fc             	and    esi,0xfffffffc
c00018cc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018cf:	01 f1                	add    ecx,esi
c00018d1:	eb ee                	jmp    c00018c1 <dlmallinfo+0x3a>
c00018d3:	40                   	inc    eax
c00018d4:	83 f8 0a             	cmp    eax,0xa
c00018d7:	75 e1                	jne    c00018ba <dlmallinfo+0x33>
c00018d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018dd:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018e7:	b8 74 d6 02 c0       	mov    eax,0xc002d674
c00018ec:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ef:	39 f0                	cmp    eax,esi
c00018f1:	74 10                	je     c0001903 <dlmallinfo+0x7c>
c00018f3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f6:	ff 04 24             	inc    DWORD PTR [esp]
c00018f9:	83 e7 fc             	and    edi,0xfffffffc
c00018fc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ff:	01 fa                	add    edx,edi
c0001901:	eb ec                	jmp    c00018ef <dlmallinfo+0x68>
c0001903:	83 c0 08             	add    eax,0x8
c0001906:	3d 6c d9 02 c0       	cmp    eax,0xc002d96c
c000190b:	75 df                	jne    c00018ec <dlmallinfo+0x65>
c000190d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001910:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001913:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001916:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c000191b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000191e:	89 03                	mov    DWORD PTR [ebx],eax
c0001920:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001923:	8b 35 90 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d990
c0001929:	29 d0                	sub    eax,edx
c000192b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000192e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001931:	8b 35 a4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9a4
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	8b 35 b4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9b4
c0001947:	89 d8                	mov    eax,ebx
c0001949:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000194c:	83 c4 08             	add    esp,0x8
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	c2 04 00             	ret    0x4

c0001956 <dlmalloc_stats>:
c0001956:	83 ec 30             	sub    esp,0x30
c0001959:	8d 44 24 08          	lea    eax,[esp+0x8]
c000195d:	50                   	push   eax
c000195e:	e8 24 ff ff ff       	call   c0001887 <dlmallinfo>
c0001963:	83 c4 30             	add    esp,0x30
c0001966:	c3                   	ret    

c0001967 <dlmallopt>:
c0001967:	56                   	push   esi
c0001968:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c000196d:	53                   	push   ebx
c000196e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001972:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001976:	e8 3b f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197b:	8d 46 04             	lea    eax,[esi+0x4]
c000197e:	83 f8 05             	cmp    eax,0x5
c0001981:	77 67                	ja     c00019ea <dlmallopt+0x83>
c0001983:	ff 24 85 84 8a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd757c]
c000198a:	83 fb 50             	cmp    ebx,0x50
c000198d:	77 5b                	ja     c00019ea <dlmallopt+0x83>
c000198f:	ba 08 00 00 00       	mov    edx,0x8
c0001994:	85 db                	test   ebx,ebx
c0001996:	74 12                	je     c00019aa <dlmallopt+0x43>
c0001998:	83 c3 0b             	add    ebx,0xb
c000199b:	ba 10 00 00 00       	mov    edx,0x10
c00019a0:	83 fb 0f             	cmp    ebx,0xf
c00019a3:	76 05                	jbe    c00019aa <dlmallopt+0x43>
c00019a5:	89 da                	mov    edx,ebx
c00019a7:	83 e2 f8             	and    edx,0xfffffff8
c00019aa:	a1 40 d6 02 c0       	mov    eax,ds:0xc002d640
c00019af:	83 e0 03             	and    eax,0x3
c00019b2:	09 d0                	or     eax,edx
c00019b4:	a3 40 d6 02 c0       	mov    ds:0xc002d640,eax
c00019b9:	eb 31                	jmp    c00019ec <dlmallopt+0x85>
c00019bb:	89 1d 84 d9 02 c0    	mov    DWORD PTR ds:0xc002d984,ebx
c00019c1:	eb 06                	jmp    c00019c9 <dlmallopt+0x62>
c00019c3:	89 1d 88 d9 02 c0    	mov    DWORD PTR ds:0xc002d988,ebx
c00019c9:	be 01 00 00 00       	mov    esi,0x1
c00019ce:	eb 1c                	jmp    c00019ec <dlmallopt+0x85>
c00019d0:	89 1d 8c d9 02 c0    	mov    DWORD PTR ds:0xc002d98c,ebx
c00019d6:	eb f1                	jmp    c00019c9 <dlmallopt+0x62>
c00019d8:	31 f6                	xor    esi,esi
c00019da:	85 db                	test   ebx,ebx
c00019dc:	75 0e                	jne    c00019ec <dlmallopt+0x85>
c00019de:	c7 05 94 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d994,0x0
c00019e8:	eb df                	jmp    c00019c9 <dlmallopt+0x62>
c00019ea:	31 f6                	xor    esi,esi
c00019ec:	89 f0                	mov    eax,esi
c00019ee:	5b                   	pop    ebx
c00019ef:	5e                   	pop    esi
c00019f0:	c3                   	ret    

c00019f1 <disk_status>:
c00019f1:	31 c0                	xor    eax,eax
c00019f3:	c3                   	ret    

c00019f4 <disk_initialize>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_read>:
c00019f7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019fc:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001a04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a08:	e9 8f ea 01 00       	jmp    c002049c <fatWrapperReadDisk>

c0001a0d <disk_write>:
c0001a0d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a12:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001a1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1e:	e9 c0 ea 01 00       	jmp    c00204e3 <fatWrapperWriteDisk>

c0001a23 <disk_ioctl>:
c0001a23:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a31:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001a39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a3d:	e9 e8 ea 01 00       	jmp    c002052a <fatWrapperIoctl>

c0001a42 <ld_word>:
c0001a42:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a49:	c1 e2 08             	shl    edx,0x8
c0001a4c:	09 d0                	or     eax,edx
c0001a4e:	c3                   	ret    

c0001a4f <ld_dword>:
c0001a4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a53:	89 d1                	mov    ecx,edx
c0001a55:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a59:	c1 e1 08             	shl    ecx,0x8
c0001a5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	c1 e2 08             	shl    edx,0x8
c0001a64:	09 d0                	or     eax,edx
c0001a66:	c3                   	ret    

c0001a67 <ld_qword>:
c0001a67:	57                   	push   edi
c0001a68:	56                   	push   esi
c0001a69:	53                   	push   ebx
c0001a6a:	31 db                	xor    ebx,ebx
c0001a6c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a6f:	89 df                	mov    edi,ebx
c0001a71:	89 ce                	mov    esi,ecx
c0001a73:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a77:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7b:	c1 e6 08             	shl    esi,0x8
c0001a7e:	09 f2                	or     edx,esi
c0001a80:	89 d6                	mov    esi,edx
c0001a82:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a86:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8a:	c1 e6 08             	shl    esi,0x8
c0001a8d:	09 f2                	or     edx,esi
c0001a8f:	89 d6                	mov    esi,edx
c0001a91:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a95:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a99:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	c1 e1 08             	shl    ecx,0x8
c0001aac:	89 da                	mov    edx,ebx
c0001aae:	09 c8                	or     eax,ecx
c0001ab0:	5b                   	pop    ebx
c0001ab1:	5e                   	pop    esi
c0001ab2:	5f                   	pop    edi
c0001ab3:	c3                   	ret    

c0001ab4 <st_word>:
c0001ab4:	66 89 10             	mov    WORD PTR [eax],dx
c0001ab7:	c3                   	ret    

c0001ab8 <st_dword>:
c0001ab8:	89 10                	mov    DWORD PTR [eax],edx
c0001aba:	c3                   	ret    

c0001abb <st_qword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac0:	c3                   	ret    

c0001ac1 <mem_cpy>:
c0001ac1:	85 c9                	test   ecx,ecx
c0001ac3:	74 10                	je     c0001ad5 <mem_cpy+0x14>
c0001ac5:	57                   	push   edi
c0001ac6:	01 c1                	add    ecx,eax
c0001ac8:	56                   	push   esi
c0001ac9:	89 c7                	mov    edi,eax
c0001acb:	89 d6                	mov    esi,edx
c0001acd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	39 f9                	cmp    ecx,edi
c0001ad0:	75 fb                	jne    c0001acd <mem_cpy+0xc>
c0001ad2:	5e                   	pop    esi
c0001ad3:	5f                   	pop    edi
c0001ad4:	c3                   	ret    
c0001ad5:	c3                   	ret    

c0001ad6 <mem_set>:
c0001ad6:	01 c1                	add    ecx,eax
c0001ad8:	40                   	inc    eax
c0001ad9:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adc:	39 c8                	cmp    eax,ecx
c0001ade:	75 f8                	jne    c0001ad8 <mem_set+0x2>
c0001ae0:	c3                   	ret    

c0001ae1 <mem_cmp>:
c0001ae1:	57                   	push   edi
c0001ae2:	56                   	push   esi
c0001ae3:	89 c6                	mov    esi,eax
c0001ae5:	53                   	push   ebx
c0001ae6:	46                   	inc    esi
c0001ae7:	42                   	inc    edx
c0001ae8:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aec:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af0:	29 fb                	sub    ebx,edi
c0001af2:	89 cf                	mov    edi,ecx
c0001af4:	29 f7                	sub    edi,esi
c0001af6:	01 c7                	add    edi,eax
c0001af8:	74 04                	je     c0001afe <mem_cmp+0x1d>
c0001afa:	85 db                	test   ebx,ebx
c0001afc:	74 e8                	je     c0001ae6 <mem_cmp+0x5>
c0001afe:	89 d8                	mov    eax,ebx
c0001b00:	5b                   	pop    ebx
c0001b01:	5e                   	pop    esi
c0001b02:	5f                   	pop    edi
c0001b03:	c3                   	ret    

c0001b04 <chk_chr>:
c0001b04:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b07:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0a:	74 07                	je     c0001b13 <chk_chr+0xf>
c0001b0c:	39 d1                	cmp    ecx,edx
c0001b0e:	74 03                	je     c0001b13 <chk_chr+0xf>
c0001b10:	40                   	inc    eax
c0001b11:	eb f1                	jmp    c0001b04 <chk_chr>
c0001b13:	89 c8                	mov    eax,ecx
c0001b15:	c3                   	ret    

c0001b16 <dbc_1st>:
c0001b16:	31 c0                	xor    eax,eax
c0001b18:	c3                   	ret    

c0001b19 <dbc_2nd>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <tchar2uni>:
c0001b1c:	57                   	push   edi
c0001b1d:	89 c7                	mov    edi,eax
c0001b1f:	56                   	push   esi
c0001b20:	53                   	push   ebx
c0001b21:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b23:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b25:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b28:	84 c9                	test   cl,cl
c0001b2a:	78 0a                	js     c0001b36 <tchar2uni+0x1a>
c0001b2c:	0f b6 d1             	movzx  edx,cl
c0001b2f:	89 f3                	mov    ebx,esi
c0001b31:	e9 9f 00 00 00       	jmp    c0001bd5 <tchar2uni+0xb9>
c0001b36:	88 ca                	mov    dl,cl
c0001b38:	83 e2 e0             	and    edx,0xffffffe0
c0001b3b:	80 fa c0             	cmp    dl,0xc0
c0001b3e:	75 0c                	jne    c0001b4c <tchar2uni+0x30>
c0001b40:	89 ca                	mov    edx,ecx
c0001b42:	b9 01 00 00 00       	mov    ecx,0x1
c0001b47:	83 e2 1f             	and    edx,0x1f
c0001b4a:	eb 2e                	jmp    c0001b7a <tchar2uni+0x5e>
c0001b4c:	88 ca                	mov    dl,cl
c0001b4e:	83 e2 f0             	and    edx,0xfffffff0
c0001b51:	80 fa e0             	cmp    dl,0xe0
c0001b54:	75 0c                	jne    c0001b62 <tchar2uni+0x46>
c0001b56:	89 ca                	mov    edx,ecx
c0001b58:	b9 02 00 00 00       	mov    ecx,0x2
c0001b5d:	83 e2 0f             	and    edx,0xf
c0001b60:	eb 18                	jmp    c0001b7a <tchar2uni+0x5e>
c0001b62:	88 ca                	mov    dl,cl
c0001b64:	83 e2 f8             	and    edx,0xfffffff8
c0001b67:	88 d0                	mov    al,dl
c0001b69:	83 ca ff             	or     edx,0xffffffff
c0001b6c:	3c f0                	cmp    al,0xf0
c0001b6e:	75 6c                	jne    c0001bdc <tchar2uni+0xc0>
c0001b70:	89 ca                	mov    edx,ecx
c0001b72:	b9 03 00 00 00       	mov    ecx,0x3
c0001b77:	83 e2 07             	and    edx,0x7
c0001b7a:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b7e:	46                   	inc    esi
c0001b7f:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b82:	88 c8                	mov    al,cl
c0001b84:	83 e0 c0             	and    eax,0xffffffc0
c0001b87:	3c 80                	cmp    al,0x80
c0001b89:	75 4e                	jne    c0001bd9 <tchar2uni+0xbd>
c0001b8b:	c1 e2 06             	shl    edx,0x6
c0001b8e:	83 e1 3f             	and    ecx,0x3f
c0001b91:	09 ca                	or     edx,ecx
c0001b93:	39 de                	cmp    esi,ebx
c0001b95:	75 e7                	jne    c0001b7e <tchar2uni+0x62>
c0001b97:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b9a:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba0:	77 37                	ja     c0001bd9 <tchar2uni+0xbd>
c0001ba2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bae:	76 29                	jbe    c0001bd9 <tchar2uni+0xbd>
c0001bb0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb6:	76 1d                	jbe    c0001bd5 <tchar2uni+0xb9>
c0001bb8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bbe:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc4:	c1 e1 06             	shl    ecx,0x6
c0001bc7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bcd:	09 ca                	or     edx,ecx
c0001bcf:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd5:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bd7:	eb 03                	jmp    c0001bdc <tchar2uni+0xc0>
c0001bd9:	83 ca ff             	or     edx,0xffffffff
c0001bdc:	5b                   	pop    ebx
c0001bdd:	89 d0                	mov    eax,edx
c0001bdf:	5e                   	pop    esi
c0001be0:	5f                   	pop    edi
c0001be1:	c3                   	ret    

c0001be2 <put_utf>:
c0001be2:	53                   	push   ebx
c0001be3:	83 f8 7f             	cmp    eax,0x7f
c0001be6:	89 c3                	mov    ebx,eax
c0001be8:	b0 00                	mov    al,0x0
c0001bea:	77 11                	ja     c0001bfd <put_utf+0x1b>
c0001bec:	85 c9                	test   ecx,ecx
c0001bee:	0f 84 e5 00 00 00    	je     c0001cd9 <put_utf+0xf7>
c0001bf4:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf6:	b0 01                	mov    al,0x1
c0001bf8:	e9 dc 00 00 00       	jmp    c0001cd9 <put_utf+0xf7>
c0001bfd:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c03:	77 23                	ja     c0001c28 <put_utf+0x46>
c0001c05:	83 f9 01             	cmp    ecx,0x1
c0001c08:	0f 86 cb 00 00 00    	jbe    c0001cd9 <put_utf+0xf7>
c0001c0e:	89 d8                	mov    eax,ebx
c0001c10:	83 e3 3f             	and    ebx,0x3f
c0001c13:	c1 e8 06             	shr    eax,0x6
c0001c16:	83 cb 80             	or     ebx,0xffffff80
c0001c19:	83 c8 c0             	or     eax,0xffffffc0
c0001c1c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c1f:	88 02                	mov    BYTE PTR [edx],al
c0001c21:	b0 02                	mov    al,0x2
c0001c23:	e9 b1 00 00 00       	jmp    c0001cd9 <put_utf+0xf7>
c0001c28:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c2e:	77 40                	ja     c0001c70 <put_utf+0x8e>
c0001c30:	83 f9 02             	cmp    ecx,0x2
c0001c33:	0f 86 a0 00 00 00    	jbe    c0001cd9 <put_utf+0xf7>
c0001c39:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c3f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c45:	0f 86 8e 00 00 00    	jbe    c0001cd9 <put_utf+0xf7>
c0001c4b:	89 d8                	mov    eax,ebx
c0001c4d:	c1 e8 0c             	shr    eax,0xc
c0001c50:	83 c8 e0             	or     eax,0xffffffe0
c0001c53:	88 02                	mov    BYTE PTR [edx],al
c0001c55:	89 d8                	mov    eax,ebx
c0001c57:	83 e3 3f             	and    ebx,0x3f
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 cb 80             	or     ebx,0xffffff80
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6c:	b0 03                	mov    al,0x3
c0001c6e:	eb 69                	jmp    c0001cd9 <put_utf+0xf7>
c0001c70:	83 f9 03             	cmp    ecx,0x3
c0001c73:	76 64                	jbe    c0001cd9 <put_utf+0xf7>
c0001c75:	89 d9                	mov    ecx,ebx
c0001c77:	0f b7 c3             	movzx  eax,bx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c83:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c89:	c1 e9 06             	shr    ecx,0x6
c0001c8c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c92:	77 43                	ja     c0001cd7 <put_utf+0xf5>
c0001c94:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c9a:	77 3b                	ja     c0001cd7 <put_utf+0xf5>
c0001c9c:	09 cb                	or     ebx,ecx
c0001c9e:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca4:	89 d8                	mov    eax,ebx
c0001ca6:	c1 e8 12             	shr    eax,0x12
c0001ca9:	83 c8 f0             	or     eax,0xfffffff0
c0001cac:	88 02                	mov    BYTE PTR [edx],al
c0001cae:	89 d8                	mov    eax,ebx
c0001cb0:	c1 e8 0c             	shr    eax,0xc
c0001cb3:	83 e0 3f             	and    eax,0x3f
c0001cb6:	83 c8 80             	or     eax,0xffffff80
c0001cb9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbc:	89 d8                	mov    eax,ebx
c0001cbe:	83 e3 3f             	and    ebx,0x3f
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 cb 80             	or     ebx,0xffffff80
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd3:	b0 04                	mov    al,0x4
c0001cd5:	eb 02                	jmp    c0001cd9 <put_utf+0xf7>
c0001cd7:	31 c0                	xor    eax,eax
c0001cd9:	5b                   	pop    ebx
c0001cda:	c3                   	ret    

c0001cdb <clst2sect>:
c0001cdb:	89 c1                	mov    ecx,eax
c0001cdd:	83 ea 02             	sub    edx,0x2
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 e8 02             	sub    eax,0x2
c0001ce6:	39 d0                	cmp    eax,edx
c0001ce8:	76 0d                	jbe    c0001cf7 <clst2sect+0x1c>
c0001cea:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cee:	f7 e2                	mul    edx
c0001cf0:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf3:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf6:	c3                   	ret    
c0001cf7:	31 c0                	xor    eax,eax
c0001cf9:	31 d2                	xor    edx,edx
c0001cfb:	c3                   	ret    

c0001cfc <clmt_clust>:
c0001cfc:	57                   	push   edi
c0001cfd:	89 cf                	mov    edi,ecx
c0001cff:	56                   	push   esi
c0001d00:	89 d6                	mov    esi,edx
c0001d02:	53                   	push   ebx
c0001d03:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d07:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d0a:	89 f2                	mov    edx,esi
c0001d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0e:	c1 ef 09             	shr    edi,0x9
c0001d11:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d15:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d18:	89 f9                	mov    ecx,edi
c0001d1a:	31 ff                	xor    edi,edi
c0001d1c:	57                   	push   edi
c0001d1d:	56                   	push   esi
c0001d1e:	51                   	push   ecx
c0001d1f:	52                   	push   edx
c0001d20:	e8 e7 43 02 00       	call   c002610c <__udivdi3>
c0001d25:	83 c4 10             	add    esp,0x10
c0001d28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2a:	85 d2                	test   edx,edx
c0001d2c:	74 10                	je     c0001d3e <clmt_clust+0x42>
c0001d2e:	39 d0                	cmp    eax,edx
c0001d30:	72 07                	jb     c0001d39 <clmt_clust+0x3d>
c0001d32:	29 d0                	sub    eax,edx
c0001d34:	83 c3 08             	add    ebx,0x8
c0001d37:	eb ef                	jmp    c0001d28 <clmt_clust+0x2c>
c0001d39:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3c:	89 c2                	mov    edx,eax
c0001d3e:	5b                   	pop    ebx
c0001d3f:	89 d0                	mov    eax,edx
c0001d41:	5e                   	pop    esi
c0001d42:	5f                   	pop    edi
c0001d43:	c3                   	ret    

c0001d44 <pick_lfn>:
c0001d44:	55                   	push   ebp
c0001d45:	57                   	push   edi
c0001d46:	56                   	push   esi
c0001d47:	89 d6                	mov    esi,edx
c0001d49:	53                   	push   ebx
c0001d4a:	89 c3                	mov    ebx,eax
c0001d4c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d4f:	e8 ee fc ff ff       	call   c0001a42 <ld_word>
c0001d54:	66 85 c0             	test   ax,ax
c0001d57:	74 04                	je     c0001d5d <pick_lfn+0x19>
c0001d59:	31 c0                	xor    eax,eax
c0001d5b:	eb 5c                	jmp    c0001db9 <pick_lfn+0x75>
c0001d5d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d60:	bd 01 00 00 00       	mov    ebp,0x1
c0001d65:	83 e1 bf             	and    ecx,0xffffffbf
c0001d68:	31 ff                	xor    edi,edi
c0001d6a:	49                   	dec    ecx
c0001d6b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d6e:	0f b6 87 a0 8b 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7460]
c0001d75:	01 f0                	add    eax,esi
c0001d77:	e8 c6 fc ff ff       	call   c0001a42 <ld_word>
c0001d7c:	66 85 ed             	test   bp,bp
c0001d7f:	74 11                	je     c0001d92 <pick_lfn+0x4e>
c0001d81:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d87:	77 d0                	ja     c0001d59 <pick_lfn+0x15>
c0001d89:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d8d:	89 c5                	mov    ebp,eax
c0001d8f:	41                   	inc    ecx
c0001d90:	eb 04                	jmp    c0001d96 <pick_lfn+0x52>
c0001d92:	66 40                	inc    ax
c0001d94:	75 c3                	jne    c0001d59 <pick_lfn+0x15>
c0001d96:	47                   	inc    edi
c0001d97:	83 ff 0d             	cmp    edi,0xd
c0001d9a:	75 d2                	jne    c0001d6e <pick_lfn+0x2a>
c0001d9c:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d9f:	74 13                	je     c0001db4 <pick_lfn+0x70>
c0001da1:	66 85 ed             	test   bp,bp
c0001da4:	74 0e                	je     c0001db4 <pick_lfn+0x70>
c0001da6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dac:	77 ab                	ja     c0001d59 <pick_lfn+0x15>
c0001dae:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db4:	b8 01 00 00 00       	mov    eax,0x1
c0001db9:	5b                   	pop    ebx
c0001dba:	5e                   	pop    esi
c0001dbb:	5f                   	pop    edi
c0001dbc:	5d                   	pop    ebp
c0001dbd:	c3                   	ret    

c0001dbe <put_lfn>:
c0001dbe:	55                   	push   ebp
c0001dbf:	31 ed                	xor    ebp,ebp
c0001dc1:	57                   	push   edi
c0001dc2:	89 d7                	mov    edi,edx
c0001dc4:	56                   	push   esi
c0001dc5:	31 f6                	xor    esi,esi
c0001dc7:	53                   	push   ebx
c0001dc8:	83 ec 08             	sub    esp,0x8
c0001dcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dce:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ddc:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de2:	31 d2                	xor    edx,edx
c0001de4:	e8 cb fc ff ff       	call   c0001ab4 <st_word>
c0001de9:	0f b6 d9             	movzx  ebx,cl
c0001dec:	4b                   	dec    ebx
c0001ded:	6b db 0d             	imul   ebx,ebx,0xd
c0001df0:	66 83 fe ff          	cmp    si,0xffff
c0001df4:	74 08                	je     c0001dfe <put_lfn+0x40>
c0001df6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df9:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dfd:	43                   	inc    ebx
c0001dfe:	0f b6 85 a0 8b 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7460]
c0001e05:	0f b7 d6             	movzx  edx,si
c0001e08:	01 f8                	add    eax,edi
c0001e0a:	e8 a5 fc ff ff       	call   c0001ab4 <st_word>
c0001e0f:	66 85 f6             	test   si,si
c0001e12:	75 03                	jne    c0001e17 <put_lfn+0x59>
c0001e14:	83 ce ff             	or     esi,0xffffffff
c0001e17:	45                   	inc    ebp
c0001e18:	83 fd 0d             	cmp    ebp,0xd
c0001e1b:	75 d3                	jne    c0001df0 <put_lfn+0x32>
c0001e1d:	66 46                	inc    si
c0001e1f:	74 0a                	je     c0001e2b <put_lfn+0x6d>
c0001e21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e24:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e29:	75 09                	jne    c0001e34 <put_lfn+0x76>
c0001e2b:	88 c8                	mov    al,cl
c0001e2d:	83 c8 40             	or     eax,0x40
c0001e30:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e38:	88 07                	mov    BYTE PTR [edi],al
c0001e3a:	83 c4 08             	add    esp,0x8
c0001e3d:	5b                   	pop    ebx
c0001e3e:	5e                   	pop    esi
c0001e3f:	5f                   	pop    edi
c0001e40:	5d                   	pop    ebp
c0001e41:	c3                   	ret    

c0001e42 <gen_numname>:
c0001e42:	57                   	push   edi
c0001e43:	89 cf                	mov    edi,ecx
c0001e45:	56                   	push   esi
c0001e46:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4b:	53                   	push   ebx
c0001e4c:	89 c6                	mov    esi,eax
c0001e4e:	83 ec 10             	sub    esp,0x10
c0001e51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e55:	e8 67 fc ff ff       	call   c0001ac1 <mem_cpy>
c0001e5a:	83 fb 05             	cmp    ebx,0x5
c0001e5d:	76 2d                	jbe    c0001e8c <gen_numname+0x4a>
c0001e5f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e62:	66 85 c0             	test   ax,ax
c0001e65:	74 25                	je     c0001e8c <gen_numname+0x4a>
c0001e67:	83 c7 02             	add    edi,0x2
c0001e6a:	ba 10 00 00 00       	mov    edx,0x10
c0001e6f:	01 db                	add    ebx,ebx
c0001e71:	89 c1                	mov    ecx,eax
c0001e73:	66 d1 e8             	shr    ax,1
c0001e76:	83 e1 01             	and    ecx,0x1
c0001e79:	01 cb                	add    ebx,ecx
c0001e7b:	0f ba e3 10          	bt     ebx,0x10
c0001e7f:	73 06                	jae    c0001e87 <gen_numname+0x45>
c0001e81:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e87:	4a                   	dec    edx
c0001e88:	75 e5                	jne    c0001e6f <gen_numname+0x2d>
c0001e8a:	eb d3                	jmp    c0001e5f <gen_numname+0x1d>
c0001e8c:	b8 07 00 00 00       	mov    eax,0x7
c0001e91:	88 d9                	mov    cl,bl
c0001e93:	83 e1 0f             	and    ecx,0xf
c0001e96:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e99:	80 fa 39             	cmp    dl,0x39
c0001e9c:	76 03                	jbe    c0001ea1 <gen_numname+0x5f>
c0001e9e:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ea8:	89 da                	mov    edx,ebx
c0001eaa:	c1 ea 04             	shr    edx,0x4
c0001ead:	83 fb 0f             	cmp    ebx,0xf
c0001eb0:	76 06                	jbe    c0001eb8 <gen_numname+0x76>
c0001eb2:	89 c8                	mov    eax,ecx
c0001eb4:	89 d3                	mov    ebx,edx
c0001eb6:	eb d9                	jmp    c0001e91 <gen_numname+0x4f>
c0001eb8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ebd:	31 d2                	xor    edx,edx
c0001ebf:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec2:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec5:	39 ca                	cmp    edx,ecx
c0001ec7:	73 18                	jae    c0001ee1 <gen_numname+0x9f>
c0001ec9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecc:	3c 20                	cmp    al,0x20
c0001ece:	74 11                	je     c0001ee1 <gen_numname+0x9f>
c0001ed0:	e8 41 fc ff ff       	call   c0001b16 <dbc_1st>
c0001ed5:	85 c0                	test   eax,eax
c0001ed7:	74 05                	je     c0001ede <gen_numname+0x9c>
c0001ed9:	39 d3                	cmp    ebx,edx
c0001edb:	74 04                	je     c0001ee1 <gen_numname+0x9f>
c0001edd:	42                   	inc    edx
c0001ede:	42                   	inc    edx
c0001edf:	eb e1                	jmp    c0001ec2 <gen_numname+0x80>
c0001ee1:	b0 20                	mov    al,0x20
c0001ee3:	83 f9 07             	cmp    ecx,0x7
c0001ee6:	77 05                	ja     c0001eed <gen_numname+0xab>
c0001ee8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eec:	41                   	inc    ecx
c0001eed:	42                   	inc    edx
c0001eee:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef2:	83 fa 07             	cmp    edx,0x7
c0001ef5:	76 ea                	jbe    c0001ee1 <gen_numname+0x9f>
c0001ef7:	83 c4 10             	add    esp,0x10
c0001efa:	5b                   	pop    ebx
c0001efb:	5e                   	pop    esi
c0001efc:	5f                   	pop    edi
c0001efd:	c3                   	ret    

c0001efe <sum_sfn>:
c0001efe:	31 c9                	xor    ecx,ecx
c0001f00:	31 d2                	xor    edx,edx
c0001f02:	d0 ca                	ror    dl,1
c0001f04:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f07:	41                   	inc    ecx
c0001f08:	83 f9 0b             	cmp    ecx,0xb
c0001f0b:	75 f5                	jne    c0001f02 <sum_sfn+0x4>
c0001f0d:	88 d0                	mov    al,dl
c0001f0f:	c3                   	ret    

c0001f10 <xdir_sum>:
c0001f10:	56                   	push   esi
c0001f11:	31 c9                	xor    ecx,ecx
c0001f13:	53                   	push   ebx
c0001f14:	31 d2                	xor    edx,edx
c0001f16:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1a:	43                   	inc    ebx
c0001f1b:	c1 e3 05             	shl    ebx,0x5
c0001f1e:	83 fa 02             	cmp    edx,0x2
c0001f21:	74 0b                	je     c0001f2e <xdir_sum+0x1e>
c0001f23:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f27:	66 d1 c9             	ror    cx,1
c0001f2a:	01 f1                	add    ecx,esi
c0001f2c:	eb 05                	jmp    c0001f33 <xdir_sum+0x23>
c0001f2e:	ba 03 00 00 00       	mov    edx,0x3
c0001f33:	42                   	inc    edx
c0001f34:	39 d3                	cmp    ebx,edx
c0001f36:	77 e6                	ja     c0001f1e <xdir_sum+0xe>
c0001f38:	89 c8                	mov    eax,ecx
c0001f3a:	5b                   	pop    ebx
c0001f3b:	5e                   	pop    esi
c0001f3c:	c3                   	ret    

c0001f3d <xsum32>:
c0001f3d:	d1 ca                	ror    edx,1
c0001f3f:	0f b6 c0             	movzx  eax,al
c0001f42:	01 d0                	add    eax,edx
c0001f44:	c3                   	ret    

c0001f45 <get_xfileinfo>:
c0001f45:	55                   	push   ebp
c0001f46:	31 c9                	xor    ecx,ecx
c0001f48:	57                   	push   edi
c0001f49:	bd 40 00 00 00       	mov    ebp,0x40
c0001f4e:	56                   	push   esi
c0001f4f:	31 ff                	xor    edi,edi
c0001f51:	53                   	push   ebx
c0001f52:	89 c6                	mov    esi,eax
c0001f54:	83 ec 0c             	sub    esp,0xc
c0001f57:	89 d3                	mov    ebx,edx
c0001f59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f60:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f64:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f67:	76 6d                	jbe    c0001fd6 <get_xfileinfo+0x91>
c0001f69:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f6f:	76 0b                	jbe    c0001f7c <get_xfileinfo+0x37>
c0001f71:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f75:	bf 01 00 00 00       	mov    edi,0x1
c0001f7a:	eb 63                	jmp    c0001fdf <get_xfileinfo+0x9a>
c0001f7c:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f82:	75 03                	jne    c0001f87 <get_xfileinfo+0x42>
c0001f84:	83 c5 02             	add    ebp,0x2
c0001f87:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8a:	83 c5 02             	add    ebp,0x2
c0001f8d:	e8 b0 fa ff ff       	call   c0001a42 <ld_word>
c0001f92:	ff 04 24             	inc    DWORD PTR [esp]
c0001f95:	66 85 c9             	test   cx,cx
c0001f98:	75 0d                	jne    c0001fa7 <get_xfileinfo+0x62>
c0001f9a:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa0:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa5:	76 2b                	jbe    c0001fd2 <get_xfileinfo+0x8d>
c0001fa7:	c1 e1 10             	shl    ecx,0x10
c0001faa:	ba ff 00 00 00       	mov    edx,0xff
c0001faf:	0f b7 c0             	movzx  eax,ax
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	09 c8                	or     eax,ecx
c0001fb6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fba:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc2:	e8 1b fc ff ff       	call   c0001be2 <put_utf>
c0001fc7:	84 c0                	test   al,al
c0001fc9:	74 a6                	je     c0001f71 <get_xfileinfo+0x2c>
c0001fcb:	0f b6 c0             	movzx  eax,al
c0001fce:	01 c7                	add    edi,eax
c0001fd0:	31 c0                	xor    eax,eax
c0001fd2:	89 c1                	mov    ecx,eax
c0001fd4:	eb 8a                	jmp    c0001f60 <get_xfileinfo+0x1b>
c0001fd6:	85 ff                	test   edi,edi
c0001fd8:	74 97                	je     c0001f71 <get_xfileinfo+0x2c>
c0001fda:	66 85 c9             	test   cx,cx
c0001fdd:	75 92                	jne    c0001f71 <get_xfileinfo+0x2c>
c0001fdf:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe4:	31 c0                	xor    eax,eax
c0001fe6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fea:	31 d2                	xor    edx,edx
c0001fec:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fef:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff2:	80 e1 10             	and    cl,0x10
c0001ff5:	75 08                	jne    c0001fff <get_xfileinfo+0xba>
c0001ff7:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffa:	e8 68 fa ff ff       	call   c0001a67 <ld_qword>
c0001fff:	89 03                	mov    DWORD PTR [ebx],eax
c0002001:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002004:	8d 46 0c             	lea    eax,[esi+0xc]
c0002007:	e8 36 fa ff ff       	call   c0001a42 <ld_word>
c000200c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002010:	8d 46 0e             	lea    eax,[esi+0xe]
c0002013:	e8 2a fa ff ff       	call   c0001a42 <ld_word>
c0002018:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201c:	83 c4 0c             	add    esp,0xc
c000201f:	5b                   	pop    ebx
c0002020:	5e                   	pop    esi
c0002021:	5f                   	pop    edi
c0002022:	5d                   	pop    ebp
c0002023:	c3                   	ret    

c0002024 <get_ldnumber>:
c0002024:	8b 10                	mov    edx,DWORD PTR [eax]
c0002026:	85 d2                	test   edx,edx
c0002028:	74 14                	je     c000203e <get_ldnumber+0x1a>
c000202a:	56                   	push   esi
c000202b:	53                   	push   ebx
c000202c:	89 d3                	mov    ebx,edx
c000202e:	43                   	inc    ebx
c000202f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002032:	80 f9 1f             	cmp    cl,0x1f
c0002035:	76 0d                	jbe    c0002044 <get_ldnumber+0x20>
c0002037:	80 f9 3a             	cmp    cl,0x3a
c000203a:	75 f2                	jne    c000202e <get_ldnumber+0xa>
c000203c:	eb 0a                	jmp    c0002048 <get_ldnumber+0x24>
c000203e:	83 c9 ff             	or     ecx,0xffffffff
c0002041:	89 c8                	mov    eax,ecx
c0002043:	c3                   	ret    
c0002044:	31 c9                	xor    ecx,ecx
c0002046:	eb 24                	jmp    c000206c <get_ldnumber+0x48>
c0002048:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000204e:	80 f9 09             	cmp    cl,0x9
c0002051:	77 16                	ja     c0002069 <get_ldnumber+0x45>
c0002053:	83 c2 02             	add    edx,0x2
c0002056:	83 c9 ff             	or     ecx,0xffffffff
c0002059:	39 d3                	cmp    ebx,edx
c000205b:	75 0f                	jne    c000206c <get_ldnumber+0x48>
c000205d:	89 f2                	mov    edx,esi
c000205f:	89 18                	mov    DWORD PTR [eax],ebx
c0002061:	0f be ca             	movsx  ecx,dl
c0002064:	83 e9 30             	sub    ecx,0x30
c0002067:	eb 03                	jmp    c000206c <get_ldnumber+0x48>
c0002069:	83 c9 ff             	or     ecx,0xffffffff
c000206c:	89 c8                	mov    eax,ecx
c000206e:	5b                   	pop    ebx
c000206f:	5e                   	pop    esi
c0002070:	c3                   	ret    

c0002071 <crc32>:
c0002071:	56                   	push   esi
c0002072:	89 d6                	mov    esi,edx
c0002074:	53                   	push   ebx
c0002075:	b2 01                	mov    dl,0x1
c0002077:	bb 08 00 00 00       	mov    ebx,0x8
c000207c:	89 f1                	mov    ecx,esi
c000207e:	84 d1                	test   cl,dl
c0002080:	0f 95 c1             	setne  cl
c0002083:	0f b6 c9             	movzx  ecx,cl
c0002086:	31 c1                	xor    ecx,eax
c0002088:	89 c8                	mov    eax,ecx
c000208a:	d1 e8                	shr    eax,1
c000208c:	80 e1 01             	and    cl,0x1
c000208f:	74 05                	je     c0002096 <crc32+0x25>
c0002091:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002096:	d1 e2                	shl    edx,1
c0002098:	4b                   	dec    ebx
c0002099:	75 e1                	jne    c000207c <crc32+0xb>
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	c3                   	ret    

c000209e <test_gpt_header>:
c000209e:	55                   	push   ebp
c000209f:	b9 10 00 00 00       	mov    ecx,0x10
c00020a4:	57                   	push   edi
c00020a5:	ba a0 8a 02 c0       	mov    edx,0xc0028aa0
c00020aa:	56                   	push   esi
c00020ab:	31 ff                	xor    edi,edi
c00020ad:	53                   	push   ebx
c00020ae:	89 c3                	mov    ebx,eax
c00020b0:	e8 2c fa ff ff       	call   c0001ae1 <mem_cmp>
c00020b5:	85 c0                	test   eax,eax
c00020b7:	75 55                	jne    c000210e <test_gpt_header+0x70>
c00020b9:	89 c7                	mov    edi,eax
c00020bb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c0:	83 ce ff             	or     esi,0xffffffff
c00020c3:	31 d2                	xor    edx,edx
c00020c5:	83 fd 03             	cmp    ebp,0x3
c00020c8:	76 05                	jbe    c00020cf <test_gpt_header+0x31>
c00020ca:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cf:	89 f0                	mov    eax,esi
c00020d1:	45                   	inc    ebp
c00020d2:	e8 9a ff ff ff       	call   c0002071 <crc32>
c00020d7:	83 fd 4c             	cmp    ebp,0x4c
c00020da:	89 c6                	mov    esi,eax
c00020dc:	75 e5                	jne    c00020c3 <test_gpt_header+0x25>
c00020de:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e1:	f7 d6                	not    esi
c00020e3:	e8 67 f9 ff ff       	call   c0001a4f <ld_dword>
c00020e8:	39 c6                	cmp    esi,eax
c00020ea:	75 22                	jne    c000210e <test_gpt_header+0x70>
c00020ec:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ef:	e8 5b f9 ff ff       	call   c0001a4f <ld_dword>
c00020f4:	83 c0 80             	add    eax,0xffffff80
c00020f7:	75 15                	jne    c000210e <test_gpt_header+0x70>
c00020f9:	8d 43 50             	lea    eax,[ebx+0x50]
c00020fc:	e8 4e f9 ff ff       	call   c0001a4f <ld_dword>
c0002101:	3d 80 00 00 00       	cmp    eax,0x80
c0002106:	0f 96 c0             	setbe  al
c0002109:	0f b6 c0             	movzx  eax,al
c000210c:	89 c7                	mov    edi,eax
c000210e:	5b                   	pop    ebx
c000210f:	89 f8                	mov    eax,edi
c0002111:	5e                   	pop    esi
c0002112:	5f                   	pop    edi
c0002113:	5d                   	pop    ebp
c0002114:	c3                   	ret    

c0002115 <make_rand>:
c0002115:	56                   	push   esi
c0002116:	85 c0                	test   eax,eax
c0002118:	53                   	push   ebx
c0002119:	75 05                	jne    c0002120 <make_rand+0xb>
c000211b:	b8 01 00 00 00       	mov    eax,0x1
c0002120:	01 d1                	add    ecx,edx
c0002122:	bb 08 00 00 00       	mov    ebx,0x8
c0002127:	89 c6                	mov    esi,eax
c0002129:	d1 e8                	shr    eax,1
c000212b:	83 e6 01             	and    esi,0x1
c000212e:	85 f6                	test   esi,esi
c0002130:	74 05                	je     c0002137 <make_rand+0x22>
c0002132:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002137:	4b                   	dec    ebx
c0002138:	75 ed                	jne    c0002127 <make_rand+0x12>
c000213a:	42                   	inc    edx
c000213b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213e:	39 ca                	cmp    edx,ecx
c0002140:	75 e0                	jne    c0002122 <make_rand+0xd>
c0002142:	5b                   	pop    ebx
c0002143:	5e                   	pop    esi
c0002144:	c3                   	ret    

c0002145 <validate>:
c0002145:	56                   	push   esi
c0002146:	53                   	push   ebx
c0002147:	89 d6                	mov    esi,edx
c0002149:	51                   	push   ecx
c000214a:	85 c0                	test   eax,eax
c000214c:	75 09                	jne    c0002157 <validate+0x12>
c000214e:	b8 09 00 00 00       	mov    eax,0x9
c0002153:	31 c9                	xor    ecx,ecx
c0002155:	eb 2f                	jmp    c0002186 <validate+0x41>
c0002157:	89 c3                	mov    ebx,eax
c0002159:	8b 00                	mov    eax,DWORD PTR [eax]
c000215b:	85 c0                	test   eax,eax
c000215d:	74 ef                	je     c000214e <validate+0x9>
c000215f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002162:	74 ea                	je     c000214e <validate+0x9>
c0002164:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002168:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000216c:	75 e0                	jne    c000214e <validate+0x9>
c000216e:	83 ec 0c             	sub    esp,0xc
c0002171:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002175:	50                   	push   eax
c0002176:	e8 76 f8 ff ff       	call   c00019f1 <disk_status>
c000217b:	83 c4 10             	add    esp,0x10
c000217e:	a8 01                	test   al,0x1
c0002180:	75 cc                	jne    c000214e <validate+0x9>
c0002182:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002184:	31 c0                	xor    eax,eax
c0002186:	89 0e                	mov    DWORD PTR [esi],ecx
c0002188:	5a                   	pop    edx
c0002189:	5b                   	pop    ebx
c000218a:	5e                   	pop    esi
c000218b:	c3                   	ret    

c000218c <sync_window>:
c000218c:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002190:	0f 84 85 00 00 00    	je     c000221b <sync_window+0x8f>
c0002196:	55                   	push   ebp
c0002197:	8d 68 54             	lea    ebp,[eax+0x54]
c000219a:	57                   	push   edi
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 c3                	mov    ebx,eax
c000219f:	83 ec 28             	sub    esp,0x28
c00021a2:	6a 01                	push   0x1
c00021a4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021aa:	55                   	push   ebp
c00021ab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021af:	50                   	push   eax
c00021b0:	e8 58 f8 ff ff       	call   c0001a0d <disk_write>
c00021b5:	83 c4 20             	add    esp,0x20
c00021b8:	ba 01 00 00 00       	mov    edx,0x1
c00021bd:	85 c0                	test   eax,eax
c00021bf:	75 50                	jne    c0002211 <sync_window+0x85>
c00021c1:	31 ff                	xor    edi,edi
c00021c3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021ce:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d1:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d4:	89 c6                	mov    esi,eax
c00021d6:	89 d7                	mov    edi,edx
c00021d8:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021db:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021df:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ea:	73 23                	jae    c000220f <sync_window+0x83>
c00021ec:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f0:	75 1d                	jne    c000220f <sync_window+0x83>
c00021f2:	83 ec 0c             	sub    esp,0xc
c00021f5:	6a 01                	push   0x1
c00021f7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021fb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ff:	52                   	push   edx
c0002200:	50                   	push   eax
c0002201:	55                   	push   ebp
c0002202:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002206:	50                   	push   eax
c0002207:	e8 01 f8 ff ff       	call   c0001a0d <disk_write>
c000220c:	83 c4 20             	add    esp,0x20
c000220f:	31 d2                	xor    edx,edx
c0002211:	83 c4 1c             	add    esp,0x1c
c0002214:	89 d0                	mov    eax,edx
c0002216:	5b                   	pop    ebx
c0002217:	5e                   	pop    esi
c0002218:	5f                   	pop    edi
c0002219:	5d                   	pop    ebp
c000221a:	c3                   	ret    
c000221b:	31 d2                	xor    edx,edx
c000221d:	89 d0                	mov    eax,edx
c000221f:	c3                   	ret    

c0002220 <move_window>:
c0002220:	56                   	push   esi
c0002221:	53                   	push   ebx
c0002222:	89 c3                	mov    ebx,eax
c0002224:	83 ec 14             	sub    esp,0x14
c0002227:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000222a:	75 07                	jne    c0002233 <move_window+0x13>
c000222c:	31 f6                	xor    esi,esi
c000222e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002231:	74 59                	je     c000228c <move_window+0x6c>
c0002233:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002237:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000223b:	89 d8                	mov    eax,ebx
c000223d:	e8 4a ff ff ff       	call   c000218c <sync_window>
c0002242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002246:	89 c6                	mov    esi,eax
c0002248:	85 c0                	test   eax,eax
c000224a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224e:	75 3c                	jne    c000228c <move_window+0x6c>
c0002250:	83 ec 0c             	sub    esp,0xc
c0002253:	8d 43 54             	lea    eax,[ebx+0x54]
c0002256:	6a 01                	push   0x1
c0002258:	51                   	push   ecx
c0002259:	52                   	push   edx
c000225a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002262:	50                   	push   eax
c0002263:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002267:	50                   	push   eax
c0002268:	e8 8a f7 ff ff       	call   c00019f7 <disk_read>
c000226d:	83 c4 20             	add    esp,0x20
c0002270:	85 c0                	test   eax,eax
c0002272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227a:	74 0a                	je     c0002286 <move_window+0x66>
c000227c:	83 ca ff             	or     edx,0xffffffff
c000227f:	be 01 00 00 00       	mov    esi,0x1
c0002284:	89 d1                	mov    ecx,edx
c0002286:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002289:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000228c:	89 f0                	mov    eax,esi
c000228e:	83 c4 14             	add    esp,0x14
c0002291:	5b                   	pop    ebx
c0002292:	5e                   	pop    esi
c0002293:	c3                   	ret    

c0002294 <check_fs>:
c0002294:	53                   	push   ebx
c0002295:	89 c3                	mov    ebx,eax
c0002297:	83 ec 08             	sub    esp,0x8
c000229a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229e:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022ac:	e8 6f ff ff ff       	call   c0002220 <move_window>
c00022b1:	ba 04 00 00 00       	mov    edx,0x4
c00022b6:	85 c0                	test   eax,eax
c00022b8:	0f 85 89 00 00 00    	jne    c0002347 <check_fs+0xb3>
c00022be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c4:	e8 79 f7 ff ff       	call   c0001a42 <ld_word>
c00022c9:	ba 03 00 00 00       	mov    edx,0x3
c00022ce:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d2:	75 73                	jne    c0002347 <check_fs+0xb3>
c00022d4:	ba c0 8b 02 c0       	mov    edx,0xc0028bc0
c00022d9:	8d 43 54             	lea    eax,[ebx+0x54]
c00022dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e1:	e8 fb f7 ff ff       	call   c0001ae1 <mem_cmp>
c00022e6:	ba 01 00 00 00       	mov    edx,0x1
c00022eb:	85 c0                	test   eax,eax
c00022ed:	74 58                	je     c0002347 <check_fs+0xb3>
c00022ef:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f2:	8d 50 18             	lea    edx,[eax+0x18]
c00022f5:	80 fa 01             	cmp    dl,0x1
c00022f8:	76 09                	jbe    c0002303 <check_fs+0x6f>
c00022fa:	ba 02 00 00 00       	mov    edx,0x2
c00022ff:	3c eb                	cmp    al,0xeb
c0002301:	75 44                	jne    c0002347 <check_fs+0xb3>
c0002303:	ba 18 be 02 c0       	mov    edx,0xc002be18
c0002308:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230e:	b9 03 00 00 00       	mov    ecx,0x3
c0002313:	e8 c9 f7 ff ff       	call   c0001ae1 <mem_cmp>
c0002318:	31 d2                	xor    edx,edx
c000231a:	85 c0                	test   eax,eax
c000231c:	74 29                	je     c0002347 <check_fs+0xb3>
c000231e:	ba cc 8b 02 c0       	mov    edx,0xc0028bcc
c0002323:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002329:	b9 05 00 00 00       	mov    ecx,0x5
c000232e:	e8 ae f7 ff ff       	call   c0001ae1 <mem_cmp>
c0002333:	31 d2                	xor    edx,edx
c0002335:	85 c0                	test   eax,eax
c0002337:	74 0e                	je     c0002347 <check_fs+0xb3>
c0002339:	31 d2                	xor    edx,edx
c000233b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002342:	0f 95 c2             	setne  dl
c0002345:	01 d2                	add    edx,edx
c0002347:	89 d0                	mov    eax,edx
c0002349:	83 c4 08             	add    esp,0x8
c000234c:	5b                   	pop    ebx
c000234d:	c3                   	ret    

c000234e <find_volume>:
c000234e:	55                   	push   ebp
c000234f:	31 c9                	xor    ecx,ecx
c0002351:	57                   	push   edi
c0002352:	56                   	push   esi
c0002353:	89 d6                	mov    esi,edx
c0002355:	53                   	push   ebx
c0002356:	31 d2                	xor    edx,edx
c0002358:	83 ec 3c             	sub    esp,0x3c
c000235b:	89 c3                	mov    ebx,eax
c000235d:	e8 32 ff ff ff       	call   c0002294 <check_fs>
c0002362:	83 f8 02             	cmp    eax,0x2
c0002365:	74 0e                	je     c0002375 <find_volume+0x27>
c0002367:	0f 87 5d 01 00 00    	ja     c00024ca <find_volume+0x17c>
c000236d:	85 f6                	test   esi,esi
c000236f:	0f 84 55 01 00 00    	je     c00024ca <find_volume+0x17c>
c0002375:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000237c:	0f 85 dd 00 00 00    	jne    c000245f <find_volume+0x111>
c0002382:	31 c9                	xor    ecx,ecx
c0002384:	ba 01 00 00 00       	mov    edx,0x1
c0002389:	89 d8                	mov    eax,ebx
c000238b:	e8 90 fe ff ff       	call   c0002220 <move_window>
c0002390:	85 c0                	test   eax,eax
c0002392:	74 0a                	je     c000239e <find_volume+0x50>
c0002394:	b8 04 00 00 00       	mov    eax,0x4
c0002399:	e9 2c 01 00 00       	jmp    c00024ca <find_volume+0x17c>
c000239e:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a1:	89 e8                	mov    eax,ebp
c00023a3:	e8 f6 fc ff ff       	call   c000209e <test_gpt_header>
c00023a8:	85 c0                	test   eax,eax
c00023aa:	75 0a                	jne    c00023b6 <find_volume+0x68>
c00023ac:	b8 03 00 00 00       	mov    eax,0x3
c00023b1:	e9 14 01 00 00       	jmp    c00024ca <find_volume+0x17c>
c00023b6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023bc:	e8 8e f6 ff ff       	call   c0001a4f <ld_dword>
c00023c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023cb:	e8 97 f6 ff ff       	call   c0001a67 <ld_qword>
c00023d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f0:	74 ba                	je     c00023ac <find_volume+0x5e>
c00023f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f6:	31 c9                	xor    ecx,ecx
c00023f8:	c1 e7 07             	shl    edi,0x7
c00023fb:	89 d8                	mov    eax,ebx
c00023fd:	89 fa                	mov    edx,edi
c00023ff:	c1 ea 09             	shr    edx,0x9
c0002402:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002406:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000240a:	e8 11 fe ff ff       	call   c0002220 <move_window>
c000240f:	85 c0                	test   eax,eax
c0002411:	75 81                	jne    c0002394 <find_volume+0x46>
c0002413:	81 e7 80 01 00 00    	and    edi,0x180
c0002419:	b9 10 00 00 00       	mov    ecx,0x10
c000241e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002422:	ba b0 8b 02 c0       	mov    edx,0xc0028bb0
c0002427:	e8 b5 f6 ff ff       	call   c0001ae1 <mem_cmp>
c000242c:	85 c0                	test   eax,eax
c000242e:	75 29                	jne    c0002459 <find_volume+0x10b>
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002438:	e8 2a f6 ff ff       	call   c0001a67 <ld_qword>
c000243d:	89 d1                	mov    ecx,edx
c000243f:	89 c2                	mov    edx,eax
c0002441:	89 d8                	mov    eax,ebx
c0002443:	e8 4c fe ff ff       	call   c0002294 <check_fs>
c0002448:	85 f6                	test   esi,esi
c000244a:	75 07                	jne    c0002453 <find_volume+0x105>
c000244c:	83 f8 01             	cmp    eax,0x1
c000244f:	77 08                	ja     c0002459 <find_volume+0x10b>
c0002451:	eb 77                	jmp    c00024ca <find_volume+0x17c>
c0002453:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002457:	74 71                	je     c00024ca <find_volume+0x17c>
c0002459:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245d:	eb 89                	jmp    c00023e8 <find_volume+0x9a>
c000245f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002463:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002469:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002473:	89 cd                	mov    ebp,ecx
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	89 f8                	mov    eax,edi
c000247b:	83 c7 10             	add    edi,0x10
c000247e:	e8 cc f5 ff ff       	call   c0001a4f <ld_dword>
c0002483:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002487:	89 01                	mov    DWORD PTR [ecx],eax
c0002489:	83 c1 04             	add    ecx,0x4
c000248c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002490:	75 e3                	jne    c0002475 <find_volume+0x127>
c0002492:	31 ff                	xor    edi,edi
c0002494:	85 f6                	test   esi,esi
c0002496:	74 03                	je     c000249b <find_volume+0x14d>
c0002498:	8d 7e ff             	lea    edi,[esi-0x1]
c000249b:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249f:	85 d2                	test   edx,edx
c00024a1:	74 14                	je     c00024b7 <find_volume+0x169>
c00024a3:	31 c9                	xor    ecx,ecx
c00024a5:	89 d8                	mov    eax,ebx
c00024a7:	e8 e8 fd ff ff       	call   c0002294 <check_fs>
c00024ac:	83 f8 01             	cmp    eax,0x1
c00024af:	76 19                	jbe    c00024ca <find_volume+0x17c>
c00024b1:	85 f6                	test   esi,esi
c00024b3:	74 0f                	je     c00024c4 <find_volume+0x176>
c00024b5:	eb 13                	jmp    c00024ca <find_volume+0x17c>
c00024b7:	85 f6                	test   esi,esi
c00024b9:	0f 85 ed fe ff ff    	jne    c00023ac <find_volume+0x5e>
c00024bf:	b8 03 00 00 00       	mov    eax,0x3
c00024c4:	47                   	inc    edi
c00024c5:	83 ff 03             	cmp    edi,0x3
c00024c8:	76 d1                	jbe    c000249b <find_volume+0x14d>
c00024ca:	83 c4 3c             	add    esp,0x3c
c00024cd:	5b                   	pop    ebx
c00024ce:	5e                   	pop    esi
c00024cf:	5f                   	pop    edi
c00024d0:	5d                   	pop    ebp
c00024d1:	c3                   	ret    

c00024d2 <mount_volume>:
c00024d2:	55                   	push   ebp
c00024d3:	57                   	push   edi
c00024d4:	89 cf                	mov    edi,ecx
c00024d6:	56                   	push   esi
c00024d7:	53                   	push   ebx
c00024d8:	bb 0b 00 00 00       	mov    ebx,0xb
c00024dd:	83 ec 3c             	sub    esp,0x3c
c00024e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ea:	e8 35 fb ff ff       	call   c0002024 <get_ldnumber>
c00024ef:	85 c0                	test   eax,eax
c00024f1:	0f 88 3a 05 00 00    	js     c0002a31 <mount_volume+0x55f>
c00024f7:	8b 2c 85 e0 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2620]
c00024fe:	89 c6                	mov    esi,eax
c0002500:	bb 0c 00 00 00       	mov    ebx,0xc
c0002505:	85 ed                	test   ebp,ebp
c0002507:	0f 84 24 05 00 00    	je     c0002a31 <mount_volume+0x55f>
c000250d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002511:	83 e7 fe             	and    edi,0xfffffffe
c0002514:	89 2a                	mov    DWORD PTR [edx],ebp
c0002516:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000251a:	74 32                	je     c000254e <mount_volume+0x7c>
c000251c:	83 ec 0c             	sub    esp,0xc
c000251f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002523:	50                   	push   eax
c0002524:	e8 c8 f4 ff ff       	call   c00019f1 <disk_status>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	75 1e                	jne    c000254e <mount_volume+0x7c>
c0002530:	31 db                	xor    ebx,ebx
c0002532:	89 f9                	mov    ecx,edi
c0002534:	84 c9                	test   cl,cl
c0002536:	0f 84 f5 04 00 00    	je     c0002a31 <mount_volume+0x55f>
c000253c:	a8 04                	test   al,0x4
c000253e:	0f 84 ed 04 00 00    	je     c0002a31 <mount_volume+0x55f>
c0002544:	bb 0a 00 00 00       	mov    ebx,0xa
c0002549:	e9 e3 04 00 00       	jmp    c0002a31 <mount_volume+0x55f>
c000254e:	83 ec 0c             	sub    esp,0xc
c0002551:	89 f0                	mov    eax,esi
c0002553:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002557:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000255a:	0f b6 f0             	movzx  esi,al
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	56                   	push   esi
c0002563:	e8 8c f4 ff ff       	call   c00019f4 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 be 04 00 00    	jne    c0002a31 <mount_volume+0x55f>
c0002573:	89 f9                	mov    ecx,edi
c0002575:	84 c9                	test   cl,cl
c0002577:	74 04                	je     c000257d <mount_volume+0xab>
c0002579:	a8 04                	test   al,0x4
c000257b:	75 c7                	jne    c0002544 <mount_volume+0x72>
c000257d:	31 d2                	xor    edx,edx
c000257f:	89 e8                	mov    eax,ebp
c0002581:	e8 c8 fd ff ff       	call   c000234e <find_volume>
c0002586:	83 f8 04             	cmp    eax,0x4
c0002589:	75 0a                	jne    c0002595 <mount_volume+0xc3>
c000258b:	bb 01 00 00 00       	mov    ebx,0x1
c0002590:	e9 9c 04 00 00       	jmp    c0002a31 <mount_volume+0x55f>
c0002595:	83 f8 01             	cmp    eax,0x1
c0002598:	76 0a                	jbe    c00025a4 <mount_volume+0xd2>
c000259a:	bb 0d 00 00 00       	mov    ebx,0xd
c000259f:	e9 8d 04 00 00       	jmp    c0002a31 <mount_volume+0x55f>
c00025a4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b2:	75 17                	jne    c00025cb <mount_volume+0xf9>
c00025b4:	b8 0b 00 00 00       	mov    eax,0xb
c00025b9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025be:	75 da                	jne    c000259a <mount_volume+0xc8>
c00025c0:	40                   	inc    eax
c00025c1:	83 f8 40             	cmp    eax,0x40
c00025c4:	75 f3                	jne    c00025b9 <mount_volume+0xe7>
c00025c6:	e9 5a 02 00 00       	jmp    c0002825 <mount_volume+0x353>
c00025cb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025ce:	e8 6f f4 ff ff       	call   c0001a42 <ld_word>
c00025d3:	66 3d 00 02          	cmp    ax,0x200
c00025d7:	75 c1                	jne    c000259a <mount_volume+0xc8>
c00025d9:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025dc:	e8 61 f4 ff ff       	call   c0001a42 <ld_word>
c00025e1:	0f b7 c0             	movzx  eax,ax
c00025e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e8:	85 c0                	test   eax,eax
c00025ea:	75 0c                	jne    c00025f8 <mount_volume+0x126>
c00025ec:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ef:	e8 5b f4 ff ff       	call   c0001a4f <ld_dword>
c00025f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025fc:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ff:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002602:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002606:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002609:	48                   	dec    eax
c000260a:	3c 01                	cmp    al,0x1
c000260c:	77 8c                	ja     c000259a <mount_volume+0xc8>
c000260e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002612:	89 c3                	mov    ebx,eax
c0002614:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002618:	66 85 c0             	test   ax,ax
c000261b:	0f 84 79 ff ff ff    	je     c000259a <mount_volume+0xc8>
c0002621:	8d 40 ff             	lea    eax,[eax-0x1]
c0002624:	85 d8                	test   eax,ebx
c0002626:	0f 85 6e ff ff ff    	jne    c000259a <mount_volume+0xc8>
c000262c:	8d 45 65             	lea    eax,[ebp+0x65]
c000262f:	e8 0e f4 ff ff       	call   c0001a42 <ld_word>
c0002634:	89 c7                	mov    edi,eax
c0002636:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000263a:	a8 0f                	test   al,0xf
c000263c:	0f 85 58 ff ff ff    	jne    c000259a <mount_volume+0xc8>
c0002642:	8d 45 67             	lea    eax,[ebp+0x67]
c0002645:	e8 f8 f3 ff ff       	call   c0001a42 <ld_word>
c000264a:	0f b7 f0             	movzx  esi,ax
c000264d:	85 f6                	test   esi,esi
c000264f:	75 0a                	jne    c000265b <mount_volume+0x189>
c0002651:	8d 45 74             	lea    eax,[ebp+0x74]
c0002654:	e8 f6 f3 ff ff       	call   c0001a4f <ld_dword>
c0002659:	89 c6                	mov    esi,eax
c000265b:	8d 45 62             	lea    eax,[ebp+0x62]
c000265e:	e8 df f3 ff ff       	call   c0001a42 <ld_word>
c0002663:	66 85 c0             	test   ax,ax
c0002666:	0f 84 2e ff ff ff    	je     c000259a <mount_volume+0xc8>
c000266c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002671:	0f b7 c8             	movzx  ecx,ax
c0002674:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002679:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000267d:	89 fa                	mov    edx,edi
c000267f:	66 c1 ea 04          	shr    dx,0x4
c0002683:	0f b7 d2             	movzx  edx,dx
c0002686:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000268a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000268d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002691:	39 c6                	cmp    esi,eax
c0002693:	0f 82 01 ff ff ff    	jb     c000259a <mount_volume+0xc8>
c0002699:	29 c6                	sub    esi,eax
c000269b:	31 d2                	xor    edx,edx
c000269d:	89 f0                	mov    eax,esi
c000269f:	f7 f3                	div    ebx
c00026a1:	39 de                	cmp    esi,ebx
c00026a3:	0f 82 f1 fe ff ff    	jb     c000259a <mount_volume+0xc8>
c00026a9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ae:	0f 87 e6 fe ff ff    	ja     c000259a <mount_volume+0xc8>
c00026b4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b9:	0f 86 63 03 00 00    	jbe    c0002a22 <mount_volume+0x550>
c00026bf:	bb 03 00 00 00       	mov    ebx,0x3
c00026c4:	8d 70 02             	lea    esi,[eax+0x2]
c00026c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026cf:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d5:	31 d2                	xor    edx,edx
c00026d7:	89 c8                	mov    eax,ecx
c00026d9:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ec:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ef:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f6:	31 d2                	xor    edx,edx
c00026f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026fc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002700:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002703:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002706:	83 fb 03             	cmp    ebx,0x3
c0002709:	75 2b                	jne    c0002736 <mount_volume+0x264>
c000270b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270e:	e8 2f f3 ff ff       	call   c0001a42 <ld_word>
c0002713:	66 09 c7             	or     di,ax
c0002716:	0f 85 7e fe ff ff    	jne    c000259a <mount_volume+0xc8>
c000271c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002722:	c1 e6 02             	shl    esi,0x2
c0002725:	e8 25 f3 ff ff       	call   c0001a4f <ld_dword>
c000272a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002731:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002734:	eb 30                	jmp    c0002766 <mount_volume+0x294>
c0002736:	66 85 ff             	test   di,di
c0002739:	0f 84 5b fe ff ff    	je     c000259a <mount_volume+0xc8>
c000273f:	31 d2                	xor    edx,edx
c0002741:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002745:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002749:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000274d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002750:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002753:	83 fb 02             	cmp    ebx,0x2
c0002756:	75 04                	jne    c000275c <mount_volume+0x28a>
c0002758:	01 f6                	add    esi,esi
c000275a:	eb 0a                	jmp    c0002766 <mount_volume+0x294>
c000275c:	8d 04 76             	lea    eax,[esi+esi*2]
c000275f:	83 e6 01             	and    esi,0x1
c0002762:	d1 e8                	shr    eax,1
c0002764:	01 c6                	add    esi,eax
c0002766:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000276c:	c1 ee 09             	shr    esi,0x9
c000276f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002773:	0f 87 21 fe ff ff    	ja     c000259a <mount_volume+0xc8>
c0002779:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002780:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002787:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000278b:	83 fb 03             	cmp    ebx,0x3
c000278e:	75 7a                	jne    c000280a <mount_volume+0x338>
c0002790:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002796:	e8 a7 f2 ff ff       	call   c0001a42 <ld_word>
c000279b:	66 48                	dec    ax
c000279d:	75 6b                	jne    c000280a <mount_volume+0x338>
c000279f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a7:	83 c2 01             	add    edx,0x1
c00027aa:	89 e8                	mov    eax,ebp
c00027ac:	83 d1 00             	adc    ecx,0x0
c00027af:	e8 6c fa ff ff       	call   c0002220 <move_window>
c00027b4:	85 c0                	test   eax,eax
c00027b6:	75 52                	jne    c000280a <mount_volume+0x338>
c00027b8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027bc:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c2:	e8 7b f2 ff ff       	call   c0001a42 <ld_word>
c00027c7:	66 3d 55 aa          	cmp    ax,0xaa55
c00027cb:	75 3d                	jne    c000280a <mount_volume+0x338>
c00027cd:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d0:	e8 7a f2 ff ff       	call   c0001a4f <ld_dword>
c00027d5:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027da:	75 2e                	jne    c000280a <mount_volume+0x338>
c00027dc:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e2:	e8 68 f2 ff ff       	call   c0001a4f <ld_dword>
c00027e7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ec:	75 1c                	jne    c000280a <mount_volume+0x338>
c00027ee:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f4:	e8 56 f2 ff ff       	call   c0001a4f <ld_dword>
c00027f9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027fc:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002802:	e8 48 f2 ff ff       	call   c0001a4f <ld_dword>
c0002807:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000280a:	66 a1 c0 d9 02 c0    	mov    ax,ds:0xc002d9c0
c0002810:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002813:	40                   	inc    eax
c0002814:	31 db                	xor    ebx,ebx
c0002816:	66 a3 c0 d9 02 c0    	mov    ds:0xc002d9c0,ax
c000281c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002820:	e9 0c 02 00 00       	jmp    c0002a31 <mount_volume+0x55f>
c0002825:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000282b:	e8 12 f2 ff ff       	call   c0001a42 <ld_word>
c0002830:	66 3d 00 01          	cmp    ax,0x100
c0002834:	0f 85 60 fd ff ff    	jne    c000259a <mount_volume+0xc8>
c000283a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002841:	0f 85 53 fd ff ff    	jne    c000259a <mount_volume+0xc8>
c0002847:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000284d:	e8 15 f2 ff ff       	call   c0001a67 <ld_qword>
c0002852:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002856:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000285a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002860:	e8 ea f1 ff ff       	call   c0001a4f <ld_dword>
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002871:	fe c8                	dec    al
c0002873:	0f 85 21 fd ff ff    	jne    c000259a <mount_volume+0xc8>
c0002879:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002880:	bb 01 00 00 00       	mov    ebx,0x1
c0002885:	d3 e3                	shl    ebx,cl
c0002887:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000288b:	66 85 db             	test   bx,bx
c000288e:	0f 84 06 fd ff ff    	je     c000259a <mount_volume+0xc8>
c0002894:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000289a:	e8 b0 f1 ff ff       	call   c0001a4f <ld_dword>
c000289f:	89 c6                	mov    esi,eax
c00028a1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a6:	0f 87 ee fc ff ff    	ja     c000259a <mount_volume+0xc8>
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8d 40 02             	lea    eax,[eax+0x2]
c00028b3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028bd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c6:	e8 84 f1 ff ff       	call   c0001a4f <ld_dword>
c00028cb:	31 d2                	xor    edx,edx
c00028cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028dd:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e0:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028e3:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e9:	e8 61 f1 ff ff       	call   c0001a4f <ld_dword>
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028fc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ff:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002902:	0f b7 c3             	movzx  eax,bx
c0002905:	31 d2                	xor    edx,edx
c0002907:	0f af f0             	imul   esi,eax
c000290a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000290e:	89 f0                	mov    eax,esi
c0002910:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002914:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002918:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000291c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002920:	39 c1                	cmp    ecx,eax
c0002922:	89 df                	mov    edi,ebx
c0002924:	19 d7                	sbb    edi,edx
c0002926:	0f 82 6e fc ff ff    	jb     c000259a <mount_volume+0xc8>
c000292c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002932:	31 db                	xor    ebx,ebx
c0002934:	e8 16 f1 ff ff       	call   c0001a4f <ld_dword>
c0002939:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002940:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002943:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000294b:	85 db                	test   ebx,ebx
c000294d:	75 39                	jne    c0002988 <mount_volume+0x4b6>
c000294f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002953:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002957:	0f 86 3d fc ff ff    	jbe    c000259a <mount_volume+0xc8>
c000295d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002960:	31 ff                	xor    edi,edi
c0002962:	89 e8                	mov    eax,ebp
c0002964:	e8 72 f3 ff ff       	call   c0001cdb <clst2sect>
c0002969:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000296d:	01 c6                	add    esi,eax
c000296f:	89 e8                	mov    eax,ebp
c0002971:	11 d7                	adc    edi,edx
c0002973:	89 f2                	mov    edx,esi
c0002975:	89 f9                	mov    ecx,edi
c0002977:	e8 a4 f8 ff ff       	call   c0002220 <move_window>
c000297c:	85 c0                	test   eax,eax
c000297e:	0f 85 07 fc ff ff    	jne    c000258b <mount_volume+0xb9>
c0002984:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002988:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000298d:	74 0b                	je     c000299a <mount_volume+0x4c8>
c000298f:	83 c3 20             	add    ebx,0x20
c0002992:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002998:	eb b1                	jmp    c000294b <mount_volume+0x479>
c000299a:	8d 75 54             	lea    esi,[ebp+0x54]
c000299d:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a1:	e8 a9 f0 ff ff       	call   c0001a4f <ld_dword>
c00029a6:	89 c3                	mov    ebx,eax
c00029a8:	83 f8 01             	cmp    eax,0x1
c00029ab:	0f 86 e9 fb ff ff    	jbe    c000259a <mount_volume+0xc8>
c00029b1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b4:	0f 86 e0 fb ff ff    	jbe    c000259a <mount_volume+0xc8>
c00029ba:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c1:	0f af c2             	imul   eax,edx
c00029c4:	31 d2                	xor    edx,edx
c00029c6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029cc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cf:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d2:	31 c9                	xor    ecx,ecx
c00029d4:	89 da                	mov    edx,ebx
c00029d6:	89 e8                	mov    eax,ebp
c00029d8:	c1 ea 07             	shr    edx,0x7
c00029db:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029de:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e1:	e8 3a f8 ff ff       	call   c0002220 <move_window>
c00029e6:	85 c0                	test   eax,eax
c00029e8:	0f 85 9d fb ff ff    	jne    c000258b <mount_volume+0xb9>
c00029ee:	89 d8                	mov    eax,ebx
c00029f0:	83 e0 7f             	and    eax,0x7f
c00029f3:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f6:	e8 54 f0 ff ff       	call   c0001a4f <ld_dword>
c00029fb:	83 f8 ff             	cmp    eax,0xffffffff
c00029fe:	74 0a                	je     c0002a0a <mount_volume+0x538>
c0002a00:	43                   	inc    ebx
c0002a01:	39 d8                	cmp    eax,ebx
c0002a03:	74 cd                	je     c00029d2 <mount_volume+0x500>
c0002a05:	e9 90 fb ff ff       	jmp    c000259a <mount_volume+0xc8>
c0002a0a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a11:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a18:	bb 04 00 00 00       	mov    ebx,0x4
c0002a1d:	e9 e8 fd ff ff       	jmp    c000280a <mount_volume+0x338>
c0002a22:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a27:	19 db                	sbb    ebx,ebx
c0002a29:	83 c3 02             	add    ebx,0x2
c0002a2c:	e9 93 fc ff ff       	jmp    c00026c4 <mount_volume+0x1f2>
c0002a31:	83 c4 3c             	add    esp,0x3c
c0002a34:	89 d8                	mov    eax,ebx
c0002a36:	5b                   	pop    ebx
c0002a37:	5e                   	pop    esi
c0002a38:	5f                   	pop    edi
c0002a39:	5d                   	pop    ebp
c0002a3a:	c3                   	ret    

c0002a3b <find_bitmap>:
c0002a3b:	55                   	push   ebp
c0002a3c:	57                   	push   edi
c0002a3d:	89 c7                	mov    edi,eax
c0002a3f:	56                   	push   esi
c0002a40:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a43:	53                   	push   ebx
c0002a44:	83 ec 1c             	sub    esp,0x1c
c0002a47:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4e:	83 e8 02             	sub    eax,0x2
c0002a51:	39 f0                	cmp    eax,esi
c0002a53:	77 02                	ja     c0002a57 <find_bitmap+0x1c>
c0002a55:	31 f6                	xor    esi,esi
c0002a57:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a5b:	89 f3                	mov    ebx,esi
c0002a5d:	31 ed                	xor    ebp,ebp
c0002a5f:	31 c9                	xor    ecx,ecx
c0002a61:	89 da                	mov    edx,ebx
c0002a63:	89 f8                	mov    eax,edi
c0002a65:	c1 ea 0c             	shr    edx,0xc
c0002a68:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a6b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6e:	e8 ad f7 ff ff       	call   c0002220 <move_window>
c0002a73:	85 c0                	test   eax,eax
c0002a75:	75 68                	jne    c0002adf <find_bitmap+0xa4>
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	89 d9                	mov    ecx,ebx
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	83 e1 07             	and    ecx,0x7
c0002a81:	b8 01 00 00 00       	mov    eax,0x1
c0002a86:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8c:	d3 e0                	shl    eax,cl
c0002a8e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a91:	83 e9 02             	sub    ecx,0x2
c0002a94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a98:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a9c:	43                   	inc    ebx
c0002a9d:	21 c1                	and    ecx,eax
c0002a9f:	d1 e0                	shl    eax,1
c0002aa1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa5:	77 09                	ja     c0002ab0 <find_bitmap+0x75>
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	ba 00 02 00 00       	mov    edx,0x200
c0002aae:	31 c0                	xor    eax,eax
c0002ab0:	84 c9                	test   cl,cl
c0002ab2:	75 10                	jne    c0002ac4 <find_bitmap+0x89>
c0002ab4:	45                   	inc    ebp
c0002ab5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab9:	75 0f                	jne    c0002aca <find_bitmap+0x8f>
c0002abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abf:	83 c0 02             	add    eax,0x2
c0002ac2:	eb 22                	jmp    c0002ae6 <find_bitmap+0xab>
c0002ac4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac8:	31 ed                	xor    ebp,ebp
c0002aca:	39 de                	cmp    esi,ebx
c0002acc:	74 16                	je     c0002ae4 <find_bitmap+0xa9>
c0002ace:	84 c0                	test   al,al
c0002ad0:	75 c6                	jne    c0002a98 <find_bitmap+0x5d>
c0002ad2:	42                   	inc    edx
c0002ad3:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad9:	77 84                	ja     c0002a5f <find_bitmap+0x24>
c0002adb:	b0 01                	mov    al,0x1
c0002add:	eb b9                	jmp    c0002a98 <find_bitmap+0x5d>
c0002adf:	83 c8 ff             	or     eax,0xffffffff
c0002ae2:	eb 02                	jmp    c0002ae6 <find_bitmap+0xab>
c0002ae4:	31 c0                	xor    eax,eax
c0002ae6:	83 c4 1c             	add    esp,0x1c
c0002ae9:	5b                   	pop    ebx
c0002aea:	5e                   	pop    esi
c0002aeb:	5f                   	pop    edi
c0002aec:	5d                   	pop    ebp
c0002aed:	c3                   	ret    

c0002aee <change_bitmap>:
c0002aee:	55                   	push   ebp
c0002aef:	89 cd                	mov    ebp,ecx
c0002af1:	57                   	push   edi
c0002af2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af5:	56                   	push   esi
c0002af6:	89 c7                	mov    edi,eax
c0002af8:	53                   	push   ebx
c0002af9:	89 c8                	mov    eax,ecx
c0002afb:	83 ec 1c             	sub    esp,0x1c
c0002afe:	31 d2                	xor    edx,edx
c0002b00:	89 ce                	mov    esi,ecx
c0002b02:	c1 e8 0c             	shr    eax,0xc
c0002b05:	bb 01 00 00 00       	mov    ebx,0x1
c0002b0a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b0d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b10:	c1 ee 03             	shr    esi,0x3
c0002b13:	83 e1 07             	and    ecx,0x7
c0002b16:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1c:	d3 e3                	shl    ebx,cl
c0002b1e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b22:	89 c1                	mov    ecx,eax
c0002b24:	89 d3                	mov    ebx,edx
c0002b26:	83 c1 01             	add    ecx,0x1
c0002b29:	83 d3 00             	adc    ebx,0x0
c0002b2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b30:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b34:	89 d1                	mov    ecx,edx
c0002b36:	89 c2                	mov    edx,eax
c0002b38:	89 f8                	mov    eax,edi
c0002b3a:	e8 e1 f6 ff ff       	call   c0002220 <move_window>
c0002b3f:	89 c1                	mov    ecx,eax
c0002b41:	85 c0                	test   eax,eax
c0002b43:	75 48                	jne    c0002b8d <change_bitmap+0x9f>
c0002b45:	31 d2                	xor    edx,edx
c0002b47:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b4b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4f:	0f 95 c2             	setne  dl
c0002b52:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b56:	74 3c                	je     c0002b94 <change_bitmap+0xa6>
c0002b58:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b5c:	4d                   	dec    ebp
c0002b5d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b61:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b65:	74 32                	je     c0002b99 <change_bitmap+0xab>
c0002b67:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b6b:	75 d8                	jne    c0002b45 <change_bitmap+0x57>
c0002b6d:	8d 46 01             	lea    eax,[esi+0x1]
c0002b70:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b75:	89 c3                	mov    ebx,eax
c0002b77:	31 f6                	xor    esi,esi
c0002b79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b81:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b87:	74 99                	je     c0002b22 <change_bitmap+0x34>
c0002b89:	89 de                	mov    esi,ebx
c0002b8b:	eb b8                	jmp    c0002b45 <change_bitmap+0x57>
c0002b8d:	b9 01 00 00 00       	mov    ecx,0x1
c0002b92:	eb 05                	jmp    c0002b99 <change_bitmap+0xab>
c0002b94:	b9 02 00 00 00       	mov    ecx,0x2
c0002b99:	83 c4 1c             	add    esp,0x1c
c0002b9c:	89 c8                	mov    eax,ecx
c0002b9e:	5b                   	pop    ebx
c0002b9f:	5e                   	pop    esi
c0002ba0:	5f                   	pop    edi
c0002ba1:	5d                   	pop    ebp
c0002ba2:	c3                   	ret    

c0002ba3 <put_fat>:
c0002ba3:	83 fa 01             	cmp    edx,0x1
c0002ba6:	0f 86 7b 01 00 00    	jbe    c0002d27 <put_fat+0x184>
c0002bac:	55                   	push   ebp
c0002bad:	57                   	push   edi
c0002bae:	89 cf                	mov    edi,ecx
c0002bb0:	56                   	push   esi
c0002bb1:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb6:	53                   	push   ebx
c0002bb7:	89 c6                	mov    esi,eax
c0002bb9:	83 ec 1c             	sub    esp,0x1c
c0002bbc:	89 d3                	mov    ebx,edx
c0002bbe:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc1:	0f 86 68 01 00 00    	jbe    c0002d2f <put_fat+0x18c>
c0002bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc9:	3c 02                	cmp    al,0x2
c0002bcb:	0f 84 c7 00 00 00    	je     c0002c98 <put_fat+0xf5>
c0002bd1:	77 09                	ja     c0002bdc <put_fat+0x39>
c0002bd3:	fe c8                	dec    al
c0002bd5:	74 17                	je     c0002bee <put_fat+0x4b>
c0002bd7:	e9 53 01 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002bdc:	b9 02 00 00 00       	mov    ecx,0x2
c0002be1:	3c 04                	cmp    al,0x4
c0002be3:	0f 86 e1 00 00 00    	jbe    c0002cca <put_fat+0x127>
c0002be9:	e9 41 01 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002bee:	89 d5                	mov    ebp,edx
c0002bf0:	31 c9                	xor    ecx,ecx
c0002bf2:	d1 ed                	shr    ebp,1
c0002bf4:	89 f0                	mov    eax,esi
c0002bf6:	01 d5                	add    ebp,edx
c0002bf8:	89 ea                	mov    edx,ebp
c0002bfa:	c1 ea 09             	shr    edx,0x9
c0002bfd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c00:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c03:	e8 18 f6 ff ff       	call   c0002220 <move_window>
c0002c08:	89 c1                	mov    ecx,eax
c0002c0a:	85 c0                	test   eax,eax
c0002c0c:	0f 85 1d 01 00 00    	jne    c0002d2f <put_fat+0x18c>
c0002c12:	8d 46 54             	lea    eax,[esi+0x54]
c0002c15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c19:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c1c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c26:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c2a:	89 f8                	mov    eax,edi
c0002c2c:	83 e3 01             	and    ebx,0x1
c0002c2f:	74 0d                	je     c0002c3e <put_fat+0x9b>
c0002c31:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c34:	89 fa                	mov    edx,edi
c0002c36:	83 e0 0f             	and    eax,0xf
c0002c39:	c1 e2 04             	shl    edx,0x4
c0002c3c:	09 d0                	or     eax,edx
c0002c3e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c45:	31 c9                	xor    ecx,ecx
c0002c47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c4b:	c1 ea 09             	shr    edx,0x9
c0002c4e:	89 f0                	mov    eax,esi
c0002c50:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c53:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c56:	e8 c5 f5 ff ff       	call   c0002220 <move_window>
c0002c5b:	89 c1                	mov    ecx,eax
c0002c5d:	85 c0                	test   eax,eax
c0002c5f:	0f 85 ca 00 00 00    	jne    c0002d2f <put_fat+0x18c>
c0002c65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c69:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c73:	85 db                	test   ebx,ebx
c0002c75:	74 07                	je     c0002c7e <put_fat+0xdb>
c0002c77:	c1 ef 04             	shr    edi,0x4
c0002c7a:	89 fa                	mov    edx,edi
c0002c7c:	eb 0e                	jmp    c0002c8c <put_fat+0xe9>
c0002c7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c81:	c1 ef 08             	shr    edi,0x8
c0002c84:	83 e2 f0             	and    edx,0xfffffff0
c0002c87:	83 e7 0f             	and    edi,0xf
c0002c8a:	09 fa                	or     edx,edi
c0002c8c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c93:	e9 97 00 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002c98:	31 c9                	xor    ecx,ecx
c0002c9a:	c1 ea 08             	shr    edx,0x8
c0002c9d:	89 f0                	mov    eax,esi
c0002c9f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca5:	e8 76 f5 ff ff       	call   c0002220 <move_window>
c0002caa:	89 c1                	mov    ecx,eax
c0002cac:	85 c0                	test   eax,eax
c0002cae:	75 7f                	jne    c0002d2f <put_fat+0x18c>
c0002cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb4:	01 db                	add    ebx,ebx
c0002cb6:	0f b7 d7             	movzx  edx,di
c0002cb9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbf:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc3:	e8 ec ed ff ff       	call   c0001ab4 <st_word>
c0002cc8:	eb 53                	jmp    c0002d1d <put_fat+0x17a>
c0002cca:	31 c9                	xor    ecx,ecx
c0002ccc:	c1 ea 07             	shr    edx,0x7
c0002ccf:	89 f0                	mov    eax,esi
c0002cd1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd7:	e8 44 f5 ff ff       	call   c0002220 <move_window>
c0002cdc:	89 c1                	mov    ecx,eax
c0002cde:	85 c0                	test   eax,eax
c0002ce0:	75 4d                	jne    c0002d2f <put_fat+0x18c>
c0002ce2:	c1 e3 02             	shl    ebx,0x2
c0002ce5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ceb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cee:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf2:	74 1c                	je     c0002d10 <put_fat+0x16d>
c0002cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf8:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfe:	89 d8                	mov    eax,ebx
c0002d00:	e8 4a ed ff ff       	call   c0001a4f <ld_dword>
c0002d05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d0e:	09 c7                	or     edi,eax
c0002d10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d14:	89 fa                	mov    edx,edi
c0002d16:	89 d8                	mov    eax,ebx
c0002d18:	e8 9b ed ff ff       	call   c0001ab8 <st_dword>
c0002d1d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d25:	eb 08                	jmp    c0002d2f <put_fat+0x18c>
c0002d27:	b9 02 00 00 00       	mov    ecx,0x2
c0002d2c:	89 c8                	mov    eax,ecx
c0002d2e:	c3                   	ret    
c0002d2f:	83 c4 1c             	add    esp,0x1c
c0002d32:	89 c8                	mov    eax,ecx
c0002d34:	5b                   	pop    ebx
c0002d35:	5e                   	pop    esi
c0002d36:	5f                   	pop    edi
c0002d37:	5d                   	pop    ebp
c0002d38:	c3                   	ret    

c0002d39 <fill_last_frag>:
c0002d39:	57                   	push   edi
c0002d3a:	89 cf                	mov    edi,ecx
c0002d3c:	56                   	push   esi
c0002d3d:	89 d6                	mov    esi,edx
c0002d3f:	53                   	push   ebx
c0002d40:	89 c3                	mov    ebx,eax
c0002d42:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d45:	85 c0                	test   eax,eax
c0002d47:	74 21                	je     c0002d6a <fill_last_frag+0x31>
c0002d49:	89 f9                	mov    ecx,edi
c0002d4b:	83 f8 01             	cmp    eax,0x1
c0002d4e:	76 05                	jbe    c0002d55 <fill_last_frag+0x1c>
c0002d50:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d53:	29 c1                	sub    ecx,eax
c0002d55:	8d 56 01             	lea    edx,[esi+0x1]
c0002d58:	29 c2                	sub    edx,eax
c0002d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d5c:	e8 42 fe ff ff       	call   c0002ba3 <put_fat>
c0002d61:	85 c0                	test   eax,eax
c0002d63:	75 05                	jne    c0002d6a <fill_last_frag+0x31>
c0002d65:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d68:	eb d8                	jmp    c0002d42 <fill_last_frag+0x9>
c0002d6a:	5b                   	pop    ebx
c0002d6b:	5e                   	pop    esi
c0002d6c:	5f                   	pop    edi
c0002d6d:	c3                   	ret    

c0002d6e <fill_first_frag>:
c0002d6e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d72:	75 2d                	jne    c0002da1 <fill_first_frag+0x33>
c0002d74:	57                   	push   edi
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	89 c3                	mov    ebx,eax
c0002d79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d7c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7f:	01 d7                	add    edi,edx
c0002d81:	39 fa                	cmp    edx,edi
c0002d83:	74 14                	je     c0002d99 <fill_first_frag+0x2b>
c0002d85:	8d 72 01             	lea    esi,[edx+0x1]
c0002d88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d8a:	89 f1                	mov    ecx,esi
c0002d8c:	e8 12 fe ff ff       	call   c0002ba3 <put_fat>
c0002d91:	89 f2                	mov    edx,esi
c0002d93:	85 c0                	test   eax,eax
c0002d95:	74 ea                	je     c0002d81 <fill_first_frag+0x13>
c0002d97:	eb 0b                	jmp    c0002da4 <fill_first_frag+0x36>
c0002d99:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9d:	31 c0                	xor    eax,eax
c0002d9f:	eb 03                	jmp    c0002da4 <fill_first_frag+0x36>
c0002da1:	31 c0                	xor    eax,eax
c0002da3:	c3                   	ret    
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	c3                   	ret    

c0002da8 <get_fat>:
c0002da8:	83 fa 01             	cmp    edx,0x1
c0002dab:	0f 86 db 01 00 00    	jbe    c0002f8c <get_fat+0x1e4>
c0002db1:	55                   	push   ebp
c0002db2:	b9 01 00 00 00       	mov    ecx,0x1
c0002db7:	57                   	push   edi
c0002db8:	56                   	push   esi
c0002db9:	53                   	push   ebx
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbf:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc2:	0f 86 cc 01 00 00    	jbe    c0002f94 <get_fat+0x1ec>
c0002dc8:	89 c3                	mov    ebx,eax
c0002dca:	89 d6                	mov    esi,edx
c0002dcc:	8a 07                	mov    al,BYTE PTR [edi]
c0002dce:	3c 02                	cmp    al,0x2
c0002dd0:	0f 84 99 00 00 00    	je     c0002e6f <get_fat+0xc7>
c0002dd6:	77 09                	ja     c0002de1 <get_fat+0x39>
c0002dd8:	fe c8                	dec    al
c0002dda:	74 1a                	je     c0002df6 <get_fat+0x4e>
c0002ddc:	e9 b3 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002de1:	3c 03                	cmp    al,0x3
c0002de3:	0f 84 b5 00 00 00    	je     c0002e9e <get_fat+0xf6>
c0002de9:	3c 04                	cmp    al,0x4
c0002deb:	0f 84 e3 00 00 00    	je     c0002ed4 <get_fat+0x12c>
c0002df1:	e9 9e 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002df6:	89 d3                	mov    ebx,edx
c0002df8:	31 c9                	xor    ecx,ecx
c0002dfa:	d1 eb                	shr    ebx,1
c0002dfc:	89 f8                	mov    eax,edi
c0002dfe:	01 d3                	add    ebx,edx
c0002e00:	89 da                	mov    edx,ebx
c0002e02:	c1 ea 09             	shr    edx,0x9
c0002e05:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e08:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e0b:	e8 10 f4 ff ff       	call   c0002220 <move_window>
c0002e10:	85 c0                	test   eax,eax
c0002e12:	74 08                	je     c0002e1c <get_fat+0x74>
c0002e14:	83 c9 ff             	or     ecx,0xffffffff
c0002e17:	e9 78 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e1c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1f:	31 c9                	xor    ecx,ecx
c0002e21:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e27:	89 ea                	mov    edx,ebp
c0002e29:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2d:	c1 ea 09             	shr    edx,0x9
c0002e30:	89 f8                	mov    eax,edi
c0002e32:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e35:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e38:	e8 e3 f3 ff ff       	call   c0002220 <move_window>
c0002e3d:	85 c0                	test   eax,eax
c0002e3f:	75 d3                	jne    c0002e14 <get_fat+0x6c>
c0002e41:	0f b6 c3             	movzx  eax,bl
c0002e44:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e4a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4f:	c1 e3 08             	shl    ebx,0x8
c0002e52:	09 c3                	or     ebx,eax
c0002e54:	89 d9                	mov    ecx,ebx
c0002e56:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e5c:	83 e6 01             	and    esi,0x1
c0002e5f:	0f 84 2f 01 00 00    	je     c0002f94 <get_fat+0x1ec>
c0002e65:	89 d9                	mov    ecx,ebx
c0002e67:	c1 e9 04             	shr    ecx,0x4
c0002e6a:	e9 25 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e6f:	31 c9                	xor    ecx,ecx
c0002e71:	c1 ea 08             	shr    edx,0x8
c0002e74:	89 f8                	mov    eax,edi
c0002e76:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e79:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7c:	e8 9f f3 ff ff       	call   c0002220 <move_window>
c0002e81:	85 c0                	test   eax,eax
c0002e83:	75 8f                	jne    c0002e14 <get_fat+0x6c>
c0002e85:	01 f6                	add    esi,esi
c0002e87:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e91:	e8 ac eb ff ff       	call   c0001a42 <ld_word>
c0002e96:	0f b7 c8             	movzx  ecx,ax
c0002e99:	e9 f6 00 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e9e:	31 c9                	xor    ecx,ecx
c0002ea0:	c1 ea 07             	shr    edx,0x7
c0002ea3:	89 f8                	mov    eax,edi
c0002ea5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eab:	e8 70 f3 ff ff       	call   c0002220 <move_window>
c0002eb0:	85 c0                	test   eax,eax
c0002eb2:	0f 85 5c ff ff ff    	jne    c0002e14 <get_fat+0x6c>
c0002eb8:	c1 e6 02             	shl    esi,0x2
c0002ebb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec5:	e8 85 eb ff ff       	call   c0001a4f <ld_dword>
c0002eca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecf:	e9 b4 00 00 00       	jmp    c0002f88 <get_fat+0x1e0>
c0002ed4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002eda:	89 d1                	mov    ecx,edx
c0002edc:	09 c1                	or     ecx,eax
c0002ede:	74 06                	je     c0002ee6 <get_fat+0x13e>
c0002ee0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee4:	75 0f                	jne    c0002ef5 <get_fat+0x14d>
c0002ee6:	b9 01 00 00 00       	mov    ecx,0x1
c0002eeb:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eef:	0f 85 9f 00 00 00    	jne    c0002f94 <get_fat+0x1ec>
c0002ef5:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef9:	89 f5                	mov    ebp,esi
c0002efb:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f00:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f03:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f06:	80 f9 02             	cmp    cl,0x2
c0002f09:	75 35                	jne    c0002f40 <get_fat+0x198>
c0002f0b:	83 c0 ff             	add    eax,0xffffffff
c0002f0e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f13:	83 d2 ff             	adc    edx,0xffffffff
c0002f16:	31 db                	xor    ebx,ebx
c0002f18:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1c:	53                   	push   ebx
c0002f1d:	c1 ea 09             	shr    edx,0x9
c0002f20:	51                   	push   ecx
c0002f21:	52                   	push   edx
c0002f22:	50                   	push   eax
c0002f23:	e8 e4 31 02 00       	call   c002610c <__udivdi3>
c0002f28:	83 c4 10             	add    esp,0x10
c0002f2b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f30:	39 c5                	cmp    ebp,eax
c0002f32:	77 60                	ja     c0002f94 <get_fat+0x1ec>
c0002f34:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f39:	74 59                	je     c0002f94 <get_fat+0x1ec>
c0002f3b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3e:	eb 54                	jmp    c0002f94 <get_fat+0x1ec>
c0002f40:	80 f9 03             	cmp    cl,0x3
c0002f43:	75 05                	jne    c0002f4a <get_fat+0x1a2>
c0002f45:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f48:	77 f1                	ja     c0002f3b <get_fat+0x193>
c0002f4a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f53:	75 3f                	jne    c0002f94 <get_fat+0x1ec>
c0002f55:	31 c9                	xor    ecx,ecx
c0002f57:	89 f2                	mov    edx,esi
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	c1 ea 07             	shr    edx,0x7
c0002f5e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f61:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f64:	e8 b7 f2 ff ff       	call   c0002220 <move_window>
c0002f69:	85 c0                	test   eax,eax
c0002f6b:	0f 85 a3 fe ff ff    	jne    c0002e14 <get_fat+0x6c>
c0002f71:	c1 e6 02             	shl    esi,0x2
c0002f74:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f7a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7e:	e8 cc ea ff ff       	call   c0001a4f <ld_dword>
c0002f83:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f88:	89 c1                	mov    ecx,eax
c0002f8a:	eb 08                	jmp    c0002f94 <get_fat+0x1ec>
c0002f8c:	b9 01 00 00 00       	mov    ecx,0x1
c0002f91:	89 c8                	mov    eax,ecx
c0002f93:	c3                   	ret    
c0002f94:	83 c4 1c             	add    esp,0x1c
c0002f97:	89 c8                	mov    eax,ecx
c0002f99:	5b                   	pop    ebx
c0002f9a:	5e                   	pop    esi
c0002f9b:	5f                   	pop    edi
c0002f9c:	5d                   	pop    ebp
c0002f9d:	c3                   	ret    

c0002f9e <dir_sdi>:
c0002f9e:	55                   	push   ebp
c0002f9f:	57                   	push   edi
c0002fa0:	56                   	push   esi
c0002fa1:	53                   	push   ebx
c0002fa2:	89 c3                	mov    ebx,eax
c0002fa4:	83 ec 1c             	sub    esp,0x1c
c0002fa7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa9:	31 c0                	xor    eax,eax
c0002fab:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fae:	0f 94 c0             	sete   al
c0002fb1:	48                   	dec    eax
c0002fb2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb7:	05 00 00 00 10       	add    eax,0x10000000
c0002fbc:	39 d0                	cmp    eax,edx
c0002fbe:	77 0a                	ja     c0002fca <dir_sdi+0x2c>
c0002fc0:	b8 02 00 00 00       	mov    eax,0x2
c0002fc5:	e9 c4 00 00 00       	jmp    c000308e <dir_sdi+0xf0>
c0002fca:	89 d6                	mov    esi,edx
c0002fcc:	f6 c2 1f             	test   dl,0x1f
c0002fcf:	75 ef                	jne    c0002fc0 <dir_sdi+0x22>
c0002fd1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd4:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd7:	85 c9                	test   ecx,ecx
c0002fd9:	75 2d                	jne    c0003008 <dir_sdi+0x6a>
c0002fdb:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fde:	77 1b                	ja     c0002ffb <dir_sdi+0x5d>
c0002fe0:	89 f2                	mov    edx,esi
c0002fe2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe6:	c1 ea 05             	shr    edx,0x5
c0002fe9:	39 c2                	cmp    edx,eax
c0002feb:	73 d3                	jae    c0002fc0 <dir_sdi+0x22>
c0002fed:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff9:	eb 4b                	jmp    c0003046 <dir_sdi+0xa8>
c0002ffb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffe:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003002:	85 c0                	test   eax,eax
c0003004:	74 da                	je     c0002fe0 <dir_sdi+0x42>
c0003006:	89 c1                	mov    ecx,eax
c0003008:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000300c:	c1 e5 09             	shl    ebp,0x9
c000300f:	89 ca                	mov    edx,ecx
c0003011:	39 ee                	cmp    esi,ebp
c0003013:	72 1c                	jb     c0003031 <dir_sdi+0x93>
c0003015:	89 d8                	mov    eax,ebx
c0003017:	e8 8c fd ff ff       	call   c0002da8 <get_fat>
c000301c:	89 c1                	mov    ecx,eax
c000301e:	83 f8 ff             	cmp    eax,0xffffffff
c0003021:	74 66                	je     c0003089 <dir_sdi+0xeb>
c0003023:	83 f8 01             	cmp    eax,0x1
c0003026:	76 98                	jbe    c0002fc0 <dir_sdi+0x22>
c0003028:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000302b:	76 93                	jbe    c0002fc0 <dir_sdi+0x22>
c000302d:	29 ee                	sub    esi,ebp
c000302f:	eb de                	jmp    c000300f <dir_sdi+0x71>
c0003031:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003035:	89 f8                	mov    eax,edi
c0003037:	e8 9f ec ff ff       	call   c0001cdb <clst2sect>
c000303c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003040:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003043:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003046:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003049:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000304f:	89 d1                	mov    ecx,edx
c0003051:	09 c1                	or     ecx,eax
c0003053:	0f 84 67 ff ff ff    	je     c0002fc0 <dir_sdi+0x22>
c0003059:	89 f1                	mov    ecx,esi
c000305b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003063:	c1 e9 09             	shr    ecx,0x9
c0003066:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000306a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003072:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003075:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000307b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003082:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003085:	31 c0                	xor    eax,eax
c0003087:	eb 05                	jmp    c000308e <dir_sdi+0xf0>
c0003089:	b8 01 00 00 00       	mov    eax,0x1
c000308e:	83 c4 1c             	add    esp,0x1c
c0003091:	5b                   	pop    ebx
c0003092:	5e                   	pop    esi
c0003093:	5f                   	pop    edi
c0003094:	5d                   	pop    ebp
c0003095:	c3                   	ret    

c0003096 <create_chain>:
c0003096:	55                   	push   ebp
c0003097:	89 c5                	mov    ebp,eax
c0003099:	57                   	push   edi
c000309a:	56                   	push   esi
c000309b:	53                   	push   ebx
c000309c:	83 ec 1c             	sub    esp,0x1c
c000309f:	85 d2                	test   edx,edx
c00030a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a5:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a7:	75 0e                	jne    c00030b7 <create_chain+0x21>
c00030a9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030ac:	85 ff                	test   edi,edi
c00030ae:	74 39                	je     c00030e9 <create_chain+0x53>
c00030b0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b3:	77 39                	ja     c00030ee <create_chain+0x58>
c00030b5:	eb 32                	jmp    c00030e9 <create_chain+0x53>
c00030b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030bb:	e8 e8 fc ff ff       	call   c0002da8 <get_fat>
c00030c0:	89 c3                	mov    ebx,eax
c00030c2:	83 f8 01             	cmp    eax,0x1
c00030c5:	77 0a                	ja     c00030d1 <create_chain+0x3b>
c00030c7:	bb 01 00 00 00       	mov    ebx,0x1
c00030cc:	e9 ba 01 00 00       	jmp    c000328b <create_chain+0x1f5>
c00030d1:	83 f8 ff             	cmp    eax,0xffffffff
c00030d4:	0f 84 62 01 00 00    	je     c000323c <create_chain+0x1a6>
c00030da:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030dd:	0f 87 a8 01 00 00    	ja     c000328b <create_chain+0x1f5>
c00030e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e7:	eb 05                	jmp    c00030ee <create_chain+0x58>
c00030e9:	bf 01 00 00 00       	mov    edi,0x1
c00030ee:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f2:	75 07                	jne    c00030fb <create_chain+0x65>
c00030f4:	31 db                	xor    ebx,ebx
c00030f6:	e9 90 01 00 00       	jmp    c000328b <create_chain+0x1f5>
c00030fb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fe:	75 74                	jne    c0003174 <create_chain+0xde>
c0003100:	b9 01 00 00 00       	mov    ecx,0x1
c0003105:	89 fa                	mov    edx,edi
c0003107:	89 f0                	mov    eax,esi
c0003109:	e8 2d f9 ff ff       	call   c0002a3b <find_bitmap>
c000310e:	89 c3                	mov    ebx,eax
c0003110:	8d 40 ff             	lea    eax,[eax-0x1]
c0003113:	83 f8 fd             	cmp    eax,0xfffffffd
c0003116:	0f 87 6f 01 00 00    	ja     c000328b <create_chain+0x1f5>
c000311c:	83 ec 0c             	sub    esp,0xc
c000311f:	b9 01 00 00 00       	mov    ecx,0x1
c0003124:	6a 01                	push   0x1
c0003126:	89 da                	mov    edx,ebx
c0003128:	89 f0                	mov    eax,esi
c000312a:	e8 bf f9 ff ff       	call   c0002aee <change_bitmap>
c000312f:	83 c4 10             	add    esp,0x10
c0003132:	83 f8 02             	cmp    eax,0x2
c0003135:	74 90                	je     c00030c7 <create_chain+0x31>
c0003137:	83 f8 01             	cmp    eax,0x1
c000313a:	0f 84 fc 00 00 00    	je     c000323c <create_chain+0x1a6>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	75 09                	jne    c0003150 <create_chain+0xba>
c0003147:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000314b:	e9 0c 01 00 00       	jmp    c000325c <create_chain+0x1c6>
c0003150:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003154:	0f 85 e7 00 00 00    	jne    c0003241 <create_chain+0x1ab>
c000315a:	8d 57 01             	lea    edx,[edi+0x1]
c000315d:	39 da                	cmp    edx,ebx
c000315f:	0f 84 f7 00 00 00    	je     c000325c <create_chain+0x1c6>
c0003165:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003168:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000316c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316f:	e9 cd 00 00 00       	jmp    c0003241 <create_chain+0x1ab>
c0003174:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003178:	75 41                	jne    c00031bb <create_chain+0x125>
c000317a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003180:	77 05                	ja     c0003187 <create_chain+0xf1>
c0003182:	bb 02 00 00 00       	mov    ebx,0x2
c0003187:	89 da                	mov    edx,ebx
c0003189:	89 e8                	mov    eax,ebp
c000318b:	e8 18 fc ff ff       	call   c0002da8 <get_fat>
c0003190:	83 f8 01             	cmp    eax,0x1
c0003193:	0f 84 2e ff ff ff    	je     c00030c7 <create_chain+0x31>
c0003199:	83 f8 ff             	cmp    eax,0xffffffff
c000319c:	0f 84 9a 00 00 00    	je     c000323c <create_chain+0x1a6>
c00031a2:	85 c0                	test   eax,eax
c00031a4:	74 11                	je     c00031b7 <create_chain+0x121>
c00031a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a9:	83 f8 01             	cmp    eax,0x1
c00031ac:	76 0d                	jbe    c00031bb <create_chain+0x125>
c00031ae:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b1:	76 08                	jbe    c00031bb <create_chain+0x125>
c00031b3:	89 c7                	mov    edi,eax
c00031b5:	eb 04                	jmp    c00031bb <create_chain+0x125>
c00031b7:	85 db                	test   ebx,ebx
c00031b9:	75 38                	jne    c00031f3 <create_chain+0x15d>
c00031bb:	89 fb                	mov    ebx,edi
c00031bd:	43                   	inc    ebx
c00031be:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c1:	77 0e                	ja     c00031d1 <create_chain+0x13b>
c00031c3:	83 ff 01             	cmp    edi,0x1
c00031c6:	0f 86 28 ff ff ff    	jbe    c00030f4 <create_chain+0x5e>
c00031cc:	bb 02 00 00 00       	mov    ebx,0x2
c00031d1:	89 da                	mov    edx,ebx
c00031d3:	89 e8                	mov    eax,ebp
c00031d5:	e8 ce fb ff ff       	call   c0002da8 <get_fat>
c00031da:	85 c0                	test   eax,eax
c00031dc:	74 15                	je     c00031f3 <create_chain+0x15d>
c00031de:	83 f8 01             	cmp    eax,0x1
c00031e1:	0f 84 e0 fe ff ff    	je     c00030c7 <create_chain+0x31>
c00031e7:	40                   	inc    eax
c00031e8:	74 52                	je     c000323c <create_chain+0x1a6>
c00031ea:	39 fb                	cmp    ebx,edi
c00031ec:	75 cf                	jne    c00031bd <create_chain+0x127>
c00031ee:	e9 01 ff ff ff       	jmp    c00030f4 <create_chain+0x5e>
c00031f3:	83 c9 ff             	or     ecx,0xffffffff
c00031f6:	89 da                	mov    edx,ebx
c00031f8:	89 f0                	mov    eax,esi
c00031fa:	e8 a4 f9 ff ff       	call   c0002ba3 <put_fat>
c00031ff:	85 c0                	test   eax,eax
c0003201:	75 32                	jne    c0003235 <create_chain+0x19f>
c0003203:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003208:	74 11                	je     c000321b <create_chain+0x185>
c000320a:	89 d9                	mov    ecx,ebx
c000320c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003210:	89 f0                	mov    eax,esi
c0003212:	e8 8c f9 ff ff       	call   c0002ba3 <put_fat>
c0003217:	85 c0                	test   eax,eax
c0003219:	75 1a                	jne    c0003235 <create_chain+0x19f>
c000321b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003221:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003224:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003227:	39 d0                	cmp    eax,edx
c0003229:	77 04                	ja     c000322f <create_chain+0x199>
c000322b:	48                   	dec    eax
c000322c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003233:	eb 56                	jmp    c000328b <create_chain+0x1f5>
c0003235:	48                   	dec    eax
c0003236:	0f 85 8b fe ff ff    	jne    c00030c7 <create_chain+0x31>
c000323c:	83 cb ff             	or     ebx,0xffffffff
c000323f:	eb 4a                	jmp    c000328b <create_chain+0x1f5>
c0003241:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003245:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003248:	41                   	inc    ecx
c0003249:	39 d9                	cmp    ecx,ebx
c000324b:	75 19                	jne    c0003266 <create_chain+0x1d0>
c000324d:	b9 02 00 00 00       	mov    ecx,0x2
c0003252:	85 d2                	test   edx,edx
c0003254:	74 03                	je     c0003259 <create_chain+0x1c3>
c0003256:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003259:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325c:	85 c0                	test   eax,eax
c000325e:	0f 85 63 fe ff ff    	jne    c00030c7 <create_chain+0x31>
c0003264:	eb b5                	jmp    c000321b <create_chain+0x185>
c0003266:	85 d2                	test   edx,edx
c0003268:	75 07                	jne    c0003271 <create_chain+0x1db>
c000326a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003271:	89 d9                	mov    ecx,ebx
c0003273:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003277:	89 e8                	mov    eax,ebp
c0003279:	e8 bb fa ff ff       	call   c0002d39 <fill_last_frag>
c000327e:	85 c0                	test   eax,eax
c0003280:	75 b3                	jne    c0003235 <create_chain+0x19f>
c0003282:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003289:	eb 90                	jmp    c000321b <create_chain+0x185>
c000328b:	83 c4 1c             	add    esp,0x1c
c000328e:	89 d8                	mov    eax,ebx
c0003290:	5b                   	pop    ebx
c0003291:	5e                   	pop    esi
c0003292:	5f                   	pop    edi
c0003293:	5d                   	pop    ebp
c0003294:	c3                   	ret    

c0003295 <remove_chain>:
c0003295:	55                   	push   ebp
c0003296:	57                   	push   edi
c0003297:	56                   	push   esi
c0003298:	53                   	push   ebx
c0003299:	83 ec 1c             	sub    esp,0x1c
c000329c:	83 fa 01             	cmp    edx,0x1
c000329f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a5:	77 0a                	ja     c00032b1 <remove_chain+0x1c>
c00032a7:	b8 02 00 00 00       	mov    eax,0x2
c00032ac:	e9 24 01 00 00       	jmp    c00033d5 <remove_chain+0x140>
c00032b1:	89 d6                	mov    esi,edx
c00032b3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b6:	76 ef                	jbe    c00032a7 <remove_chain+0x12>
c00032b8:	89 c7                	mov    edi,eax
c00032ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032bf:	75 06                	jne    c00032c7 <remove_chain+0x32>
c00032c1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c5:	eb 54                	jmp    c000331b <remove_chain+0x86>
c00032c7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ca:	75 06                	jne    c00032d2 <remove_chain+0x3d>
c00032cc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d0:	74 ef                	je     c00032c1 <remove_chain+0x2c>
c00032d2:	83 c9 ff             	or     ecx,0xffffffff
c00032d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d9:	89 d8                	mov    eax,ebx
c00032db:	e8 c3 f8 ff ff       	call   c0002ba3 <put_fat>
c00032e0:	85 c0                	test   eax,eax
c00032e2:	74 dd                	je     c00032c1 <remove_chain+0x2c>
c00032e4:	e9 ec 00 00 00       	jmp    c00033d5 <remove_chain+0x140>
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	74 b9                	je     c00032a7 <remove_chain+0x12>
c00032ee:	83 f8 ff             	cmp    eax,0xffffffff
c00032f1:	74 6d                	je     c0003360 <remove_chain+0xcb>
c00032f3:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f6:	75 6f                	jne    c0003367 <remove_chain+0xd2>
c00032f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032fb:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fe:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003301:	39 d0                	cmp    eax,edx
c0003303:	73 08                	jae    c000330d <remove_chain+0x78>
c0003305:	40                   	inc    eax
c0003306:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000330a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003310:	39 e9                	cmp    ecx,ebp
c0003312:	75 64                	jne    c0003378 <remove_chain+0xe3>
c0003314:	89 ee                	mov    esi,ebp
c0003316:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003319:	76 0f                	jbe    c000332a <remove_chain+0x95>
c000331b:	89 f2                	mov    edx,esi
c000331d:	89 f8                	mov    eax,edi
c000331f:	e8 84 fa ff ff       	call   c0002da8 <get_fat>
c0003324:	89 c5                	mov    ebp,eax
c0003326:	85 c0                	test   eax,eax
c0003328:	75 bf                	jne    c00032e9 <remove_chain+0x54>
c000332a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332d:	0f 85 a0 00 00 00    	jne    c00033d3 <remove_chain+0x13e>
c0003333:	eb 6c                	jmp    c00033a1 <remove_chain+0x10c>
c0003335:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003338:	84 c0                	test   al,al
c000333a:	75 7d                	jne    c00033b9 <remove_chain+0x124>
c000333c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003343:	0f 84 86 00 00 00    	je     c00033cf <remove_chain+0x13a>
c0003349:	89 da                	mov    edx,ebx
c000334b:	89 f8                	mov    eax,edi
c000334d:	e8 56 fa ff ff       	call   c0002da8 <get_fat>
c0003352:	83 f8 01             	cmp    eax,0x1
c0003355:	0f 86 4c ff ff ff    	jbe    c00032a7 <remove_chain+0x12>
c000335b:	83 f8 ff             	cmp    eax,0xffffffff
c000335e:	75 4e                	jne    c00033ae <remove_chain+0x119>
c0003360:	b8 01 00 00 00       	mov    eax,0x1
c0003365:	eb 6e                	jmp    c00033d5 <remove_chain+0x140>
c0003367:	31 c9                	xor    ecx,ecx
c0003369:	89 f2                	mov    edx,esi
c000336b:	89 d8                	mov    eax,ebx
c000336d:	e8 31 f8 ff ff       	call   c0002ba3 <put_fat>
c0003372:	85 c0                	test   eax,eax
c0003374:	74 82                	je     c00032f8 <remove_chain+0x63>
c0003376:	eb 5d                	jmp    c00033d5 <remove_chain+0x140>
c0003378:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000337b:	75 1b                	jne    c0003398 <remove_chain+0x103>
c000337d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003381:	89 d8                	mov    eax,ebx
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	6a 00                	push   0x0
c0003388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338c:	e8 5d f7 ff ff       	call   c0002aee <change_bitmap>
c0003391:	83 c4 10             	add    esp,0x10
c0003394:	85 c0                	test   eax,eax
c0003396:	75 3d                	jne    c00033d5 <remove_chain+0x140>
c0003398:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339c:	e9 73 ff ff ff       	jmp    c0003314 <remove_chain+0x7f>
c00033a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a6:	75 8d                	jne    c0003335 <remove_chain+0xa0>
c00033a8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033ac:	eb 25                	jmp    c00033d3 <remove_chain+0x13e>
c00033ae:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b1:	89 c3                	mov    ebx,eax
c00033b3:	39 c2                	cmp    edx,eax
c00033b5:	74 88                	je     c000333f <remove_chain+0xaa>
c00033b7:	eb 1a                	jmp    c00033d3 <remove_chain+0x13e>
c00033b9:	3c 03                	cmp    al,0x3
c00033bb:	75 16                	jne    c00033d3 <remove_chain+0x13e>
c00033bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c4:	77 0d                	ja     c00033d3 <remove_chain+0x13e>
c00033c6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cd:	72 04                	jb     c00033d3 <remove_chain+0x13e>
c00033cf:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d3:	31 c0                	xor    eax,eax
c00033d5:	83 c4 1c             	add    esp,0x1c
c00033d8:	5b                   	pop    ebx
c00033d9:	5e                   	pop    esi
c00033da:	5f                   	pop    edi
c00033db:	5d                   	pop    ebp
c00033dc:	c3                   	ret    

c00033dd <dir_clear>:
c00033dd:	55                   	push   ebp
c00033de:	57                   	push   edi
c00033df:	56                   	push   esi
c00033e0:	89 c6                	mov    esi,eax
c00033e2:	53                   	push   ebx
c00033e3:	83 ec 1c             	sub    esp,0x1c
c00033e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ea:	e8 9d ed ff ff       	call   c000218c <sync_window>
c00033ef:	85 c0                	test   eax,eax
c00033f1:	0f 85 de 00 00 00    	jne    c00034d5 <dir_clear+0xf8>
c00033f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033fb:	89 f0                	mov    eax,esi
c00033fd:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003400:	e8 d6 e8 ff ff       	call   c0001cdb <clst2sect>
c0003405:	b9 00 02 00 00       	mov    ecx,0x200
c000340a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003412:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003415:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003418:	89 e8                	mov    eax,ebp
c000341a:	31 d2                	xor    edx,edx
c000341c:	e8 b5 e6 ff ff       	call   c0001ad6 <mem_set>
c0003421:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003425:	c1 e3 09             	shl    ebx,0x9
c0003428:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342e:	76 1f                	jbe    c000344f <dir_clear+0x72>
c0003430:	bb 00 80 00 00       	mov    ebx,0x8000
c0003435:	eb 18                	jmp    c000344f <dir_clear+0x72>
c0003437:	83 ec 0c             	sub    esp,0xc
c000343a:	53                   	push   ebx
c000343b:	e8 35 4e 00 00       	call   c0008275 <ff_memalloc>
c0003440:	83 c4 10             	add    esp,0x10
c0003443:	89 c7                	mov    edi,eax
c0003445:	85 c0                	test   eax,eax
c0003447:	0f 85 8f 00 00 00    	jne    c00034dc <dir_clear+0xff>
c000344d:	d1 eb                	shr    ebx,1
c000344f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003455:	77 e0                	ja     c0003437 <dir_clear+0x5a>
c0003457:	31 db                	xor    ebx,ebx
c0003459:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345d:	39 d8                	cmp    eax,ebx
c000345f:	76 66                	jbe    c00034c7 <dir_clear+0xea>
c0003461:	83 ec 0c             	sub    esp,0xc
c0003464:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003468:	6a 01                	push   0x1
c000346a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003472:	55                   	push   ebp
c0003473:	50                   	push   eax
c0003474:	e8 94 e5 ff ff       	call   c0001a0d <disk_write>
c0003479:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003483:	83 c4 20             	add    esp,0x20
c0003486:	85 c0                	test   eax,eax
c0003488:	75 3d                	jne    c00034c7 <dir_clear+0xea>
c000348a:	43                   	inc    ebx
c000348b:	eb cc                	jmp    c0003459 <dir_clear+0x7c>
c000348d:	83 ec 0c             	sub    esp,0xc
c0003490:	31 d2                	xor    edx,edx
c0003492:	55                   	push   ebp
c0003493:	89 d8                	mov    eax,ebx
c0003495:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003499:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349d:	52                   	push   edx
c000349e:	50                   	push   eax
c000349f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a3:	57                   	push   edi
c00034a4:	50                   	push   eax
c00034a5:	e8 63 e5 ff ff       	call   c0001a0d <disk_write>
c00034aa:	83 c4 20             	add    esp,0x20
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 0a                	jne    c00034bb <dir_clear+0xde>
c00034b1:	01 eb                	add    ebx,ebp
c00034b3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b7:	39 d8                	cmp    eax,ebx
c00034b9:	77 d2                	ja     c000348d <dir_clear+0xb0>
c00034bb:	83 ec 0c             	sub    esp,0xc
c00034be:	57                   	push   edi
c00034bf:	e8 c7 4d 00 00       	call   c000828b <ff_memfree>
c00034c4:	83 c4 10             	add    esp,0x10
c00034c7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034cb:	39 d8                	cmp    eax,ebx
c00034cd:	0f 95 c0             	setne  al
c00034d0:	0f b6 c0             	movzx  eax,al
c00034d3:	eb 19                	jmp    c00034ee <dir_clear+0x111>
c00034d5:	b8 01 00 00 00       	mov    eax,0x1
c00034da:	eb 12                	jmp    c00034ee <dir_clear+0x111>
c00034dc:	89 d9                	mov    ecx,ebx
c00034de:	31 d2                	xor    edx,edx
c00034e0:	c1 eb 09             	shr    ebx,0x9
c00034e3:	e8 ee e5 ff ff       	call   c0001ad6 <mem_set>
c00034e8:	89 dd                	mov    ebp,ebx
c00034ea:	31 db                	xor    ebx,ebx
c00034ec:	eb c5                	jmp    c00034b3 <dir_clear+0xd6>
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_next>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	53                   	push   ebx
c00034fa:	89 c3                	mov    ebx,eax
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003505:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003508:	8d 78 20             	lea    edi,[eax+0x20]
c000350b:	31 c0                	xor    eax,eax
c000350d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003511:	0f 94 c0             	sete   al
c0003514:	48                   	dec    eax
c0003515:	25 00 00 20 f0       	and    eax,0xf0200000
c000351a:	05 00 00 00 10       	add    eax,0x10000000
c000351f:	39 f8                	cmp    eax,edi
c0003521:	77 0e                	ja     c0003531 <dir_next+0x3b>
c0003523:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000352a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003531:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003534:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003537:	b8 04 00 00 00       	mov    eax,0x4
c000353c:	89 ce                	mov    esi,ecx
c000353e:	09 d6                	or     esi,edx
c0003540:	0f 84 da 00 00 00    	je     c0003620 <dir_next+0x12a>
c0003546:	89 f8                	mov    eax,edi
c0003548:	25 ff 01 00 00       	and    eax,0x1ff
c000354d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003551:	0f 85 b9 00 00 00    	jne    c0003610 <dir_next+0x11a>
c0003557:	83 c2 01             	add    edx,0x1
c000355a:	83 d1 00             	adc    ecx,0x0
c000355d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003560:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003563:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003566:	85 d2                	test   edx,edx
c0003568:	75 29                	jne    c0003593 <dir_next+0x9d>
c000356a:	89 fa                	mov    edx,edi
c000356c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003570:	c1 ea 05             	shr    edx,0x5
c0003573:	39 c2                	cmp    edx,eax
c0003575:	0f 82 95 00 00 00    	jb     c0003610 <dir_next+0x11a>
c000357b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003582:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003589:	b8 04 00 00 00       	mov    eax,0x4
c000358e:	e9 8d 00 00 00       	jmp    c0003620 <dir_next+0x12a>
c0003593:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003597:	89 f9                	mov    ecx,edi
c0003599:	48                   	dec    eax
c000359a:	c1 e9 09             	shr    ecx,0x9
c000359d:	85 c8                	test   eax,ecx
c000359f:	75 6f                	jne    c0003610 <dir_next+0x11a>
c00035a1:	89 d8                	mov    eax,ebx
c00035a3:	e8 00 f8 ff ff       	call   c0002da8 <get_fat>
c00035a8:	89 c6                	mov    esi,eax
c00035aa:	83 f8 01             	cmp    eax,0x1
c00035ad:	77 07                	ja     c00035b6 <dir_next+0xc0>
c00035af:	b8 02 00 00 00       	mov    eax,0x2
c00035b4:	eb 6a                	jmp    c0003620 <dir_next+0x12a>
c00035b6:	83 f8 ff             	cmp    eax,0xffffffff
c00035b9:	75 07                	jne    c00035c2 <dir_next+0xcc>
c00035bb:	b8 01 00 00 00       	mov    eax,0x1
c00035c0:	eb 5e                	jmp    c0003620 <dir_next+0x12a>
c00035c2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c5:	77 37                	ja     c00035fe <dir_next+0x108>
c00035c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035cc:	74 ad                	je     c000357b <dir_next+0x85>
c00035ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	e8 be fa ff ff       	call   c0003096 <create_chain>
c00035d8:	89 c6                	mov    esi,eax
c00035da:	b8 07 00 00 00       	mov    eax,0x7
c00035df:	85 f6                	test   esi,esi
c00035e1:	74 3d                	je     c0003620 <dir_next+0x12a>
c00035e3:	83 fe 01             	cmp    esi,0x1
c00035e6:	74 c7                	je     c00035af <dir_next+0xb9>
c00035e8:	83 fe ff             	cmp    esi,0xffffffff
c00035eb:	74 ce                	je     c00035bb <dir_next+0xc5>
c00035ed:	89 f2                	mov    edx,esi
c00035ef:	89 e8                	mov    eax,ebp
c00035f1:	e8 e7 fd ff ff       	call   c00033dd <dir_clear>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 c1                	jne    c00035bb <dir_next+0xc5>
c00035fa:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fe:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003601:	89 f2                	mov    edx,esi
c0003603:	89 e8                	mov    eax,ebp
c0003605:	e8 d1 e6 ff ff       	call   c0001cdb <clst2sect>
c000360a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003614:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003617:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000361b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361e:	31 c0                	xor    eax,eax
c0003620:	83 c4 1c             	add    esp,0x1c
c0003623:	5b                   	pop    ebx
c0003624:	5e                   	pop    esi
c0003625:	5f                   	pop    edi
c0003626:	5d                   	pop    ebp
c0003627:	c3                   	ret    

c0003628 <load_xdir>:
c0003628:	55                   	push   ebp
c0003629:	57                   	push   edi
c000362a:	56                   	push   esi
c000362b:	89 c6                	mov    esi,eax
c000362d:	53                   	push   ebx
c000362e:	83 ec 1c             	sub    esp,0x1c
c0003631:	8b 00                	mov    eax,DWORD PTR [eax]
c0003633:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003636:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003639:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363c:	e8 df eb ff ff       	call   c0002220 <move_window>
c0003641:	89 c3                	mov    ebx,eax
c0003643:	85 c0                	test   eax,eax
c0003645:	0f 85 0c 01 00 00    	jne    c0003757 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003651:	0f 85 fb 00 00 00    	jne    c0003752 <load_xdir+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	b9 20 00 00 00       	mov    ecx,0x20
c000365e:	e8 5e e4 ff ff       	call   c0001ac1 <mem_cpy>
c0003663:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003667:	40                   	inc    eax
c0003668:	c1 e0 05             	shl    eax,0x5
c000366b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366f:	83 e8 60             	sub    eax,0x60
c0003672:	3d 00 02 00 00       	cmp    eax,0x200
c0003677:	0f 87 d5 00 00 00    	ja     c0003752 <load_xdir+0x12a>
c000367d:	31 d2                	xor    edx,edx
c000367f:	89 f0                	mov    eax,esi
c0003681:	e8 70 fe ff ff       	call   c00034f6 <dir_next>
c0003686:	89 c3                	mov    ebx,eax
c0003688:	83 f8 04             	cmp    eax,0x4
c000368b:	0f 84 c1 00 00 00    	je     c0003752 <load_xdir+0x12a>
c0003691:	85 c0                	test   eax,eax
c0003693:	0f 85 be 00 00 00    	jne    c0003757 <load_xdir+0x12f>
c0003699:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369f:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a1:	e8 7a eb ff ff       	call   c0002220 <move_window>
c00036a6:	89 c3                	mov    ebx,eax
c00036a8:	85 c0                	test   eax,eax
c00036aa:	0f 85 a7 00 00 00    	jne    c0003757 <load_xdir+0x12f>
c00036b0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b6:	0f 85 96 00 00 00    	jne    c0003752 <load_xdir+0x12a>
c00036bc:	8d 47 20             	lea    eax,[edi+0x20]
c00036bf:	b9 20 00 00 00       	mov    ecx,0x20
c00036c4:	e8 f8 e3 ff ff       	call   c0001ac1 <mem_cpy>
c00036c9:	31 d2                	xor    edx,edx
c00036cb:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036cf:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d4:	83 c0 2c             	add    eax,0x2c
c00036d7:	f7 f1                	div    ecx
c00036d9:	c1 e0 05             	shl    eax,0x5
c00036dc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e0:	77 70                	ja     c0003752 <load_xdir+0x12a>
c00036e2:	bd 40 00 00 00       	mov    ebp,0x40
c00036e7:	31 d2                	xor    edx,edx
c00036e9:	89 f0                	mov    eax,esi
c00036eb:	e8 06 fe ff ff       	call   c00034f6 <dir_next>
c00036f0:	89 c3                	mov    ebx,eax
c00036f2:	83 f8 04             	cmp    eax,0x4
c00036f5:	74 5b                	je     c0003752 <load_xdir+0x12a>
c00036f7:	85 c0                	test   eax,eax
c00036f9:	75 5c                	jne    c0003757 <load_xdir+0x12f>
c00036fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fe:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003701:	8b 06                	mov    eax,DWORD PTR [esi]
c0003703:	e8 18 eb ff ff       	call   c0002220 <move_window>
c0003708:	89 c3                	mov    ebx,eax
c000370a:	85 c0                	test   eax,eax
c000370c:	75 49                	jne    c0003757 <load_xdir+0x12f>
c000370e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003711:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003714:	75 3c                	jne    c0003752 <load_xdir+0x12a>
c0003716:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371c:	77 0d                	ja     c000372b <load_xdir+0x103>
c000371e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003721:	b9 20 00 00 00       	mov    ecx,0x20
c0003726:	e8 96 e3 ff ff       	call   c0001ac1 <mem_cpy>
c000372b:	83 c5 20             	add    ebp,0x20
c000372e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003732:	77 b3                	ja     c00036e7 <load_xdir+0xbf>
c0003734:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000373a:	77 1b                	ja     c0003757 <load_xdir+0x12f>
c000373c:	89 f8                	mov    eax,edi
c000373e:	e8 cd e7 ff ff       	call   c0001f10 <xdir_sum>
c0003743:	89 c1                	mov    ecx,eax
c0003745:	8d 47 02             	lea    eax,[edi+0x2]
c0003748:	e8 f5 e2 ff ff       	call   c0001a42 <ld_word>
c000374d:	66 39 c1             	cmp    cx,ax
c0003750:	74 05                	je     c0003757 <load_xdir+0x12f>
c0003752:	bb 02 00 00 00       	mov    ebx,0x2
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	89 d8                	mov    eax,ebx
c000375c:	5b                   	pop    ebx
c000375d:	5e                   	pop    esi
c000375e:	5f                   	pop    edi
c000375f:	5d                   	pop    ebp
c0003760:	c3                   	ret    

c0003761 <load_obj_xdir>:
c0003761:	53                   	push   ebx
c0003762:	89 c3                	mov    ebx,eax
c0003764:	83 ec 08             	sub    esp,0x8
c0003767:	8b 02                	mov    eax,DWORD PTR [edx]
c0003769:	89 03                	mov    DWORD PTR [ebx],eax
c000376b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003771:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003774:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003777:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003781:	30 c0                	xor    al,al
c0003783:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000378a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378d:	89 d8                	mov    eax,ebx
c000378f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003792:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003795:	e8 04 f8 ff ff       	call   c0002f9e <dir_sdi>
c000379a:	85 c0                	test   eax,eax
c000379c:	75 0b                	jne    c00037a9 <load_obj_xdir+0x48>
c000379e:	89 d8                	mov    eax,ebx
c00037a0:	83 c4 08             	add    esp,0x8
c00037a3:	5b                   	pop    ebx
c00037a4:	e9 7f fe ff ff       	jmp    c0003628 <load_xdir>
c00037a9:	83 c4 08             	add    esp,0x8
c00037ac:	5b                   	pop    ebx
c00037ad:	c3                   	ret    

c00037ae <dir_read>:
c00037ae:	55                   	push   ebp
c00037af:	bd 04 00 00 00       	mov    ebp,0x4
c00037b4:	57                   	push   edi
c00037b5:	56                   	push   esi
c00037b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00037bb:	53                   	push   ebx
c00037bc:	89 c3                	mov    ebx,eax
c00037be:	83 ec 1c             	sub    esp,0x1c
c00037c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c5:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037cc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037cf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d2:	89 c8                	mov    eax,ecx
c00037d4:	09 d0                	or     eax,edx
c00037d6:	0f 84 25 01 00 00    	je     c0003901 <dir_read+0x153>
c00037dc:	89 f8                	mov    eax,edi
c00037de:	e8 3d ea ff ff       	call   c0002220 <move_window>
c00037e3:	89 c5                	mov    ebp,eax
c00037e5:	85 c0                	test   eax,eax
c00037e7:	0f 85 23 01 00 00    	jne    c0003910 <dir_read+0x162>
c00037ed:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f0:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f2:	84 c9                	test   cl,cl
c00037f4:	0f 84 11 01 00 00    	je     c000390b <dir_read+0x15d>
c00037fa:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fd:	75 48                	jne    c0003847 <dir_read+0x99>
c00037ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003804:	74 10                	je     c0003816 <dir_read+0x68>
c0003806:	80 f9 83             	cmp    cl,0x83
c0003809:	0f 85 dd 00 00 00    	jne    c00038ec <dir_read+0x13e>
c000380f:	31 ed                	xor    ebp,ebp
c0003811:	e9 08 01 00 00       	jmp    c000391e <dir_read+0x170>
c0003816:	80 f9 85             	cmp    cl,0x85
c0003819:	0f 85 cd 00 00 00    	jne    c00038ec <dir_read+0x13e>
c000381f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003822:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003825:	89 d8                	mov    eax,ebx
c0003827:	e8 fc fd ff ff       	call   c0003628 <load_xdir>
c000382c:	89 c5                	mov    ebp,eax
c000382e:	85 c0                	test   eax,eax
c0003830:	0f 85 da 00 00 00    	jne    c0003910 <dir_read+0x162>
c0003836:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003839:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383c:	83 e0 3f             	and    eax,0x3f
c000383f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003842:	e9 d7 00 00 00       	jmp    c000391e <dir_read+0x170>
c0003847:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000384a:	83 e0 3f             	and    eax,0x3f
c000384d:	80 f9 2e             	cmp    cl,0x2e
c0003850:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003854:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003857:	0f 84 8a 00 00 00    	je     c00038e7 <dir_read+0x139>
c000385d:	80 f9 e5             	cmp    cl,0xe5
c0003860:	0f 84 81 00 00 00    	je     c00038e7 <dir_read+0x139>
c0003866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000386a:	83 e0 1f             	and    eax,0x1f
c000386d:	83 f8 08             	cmp    eax,0x8
c0003870:	0f 94 c0             	sete   al
c0003873:	0f b6 c0             	movzx  eax,al
c0003876:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000387a:	75 6b                	jne    c00038e7 <dir_read+0x139>
c000387c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003881:	75 44                	jne    c00038c7 <dir_read+0x119>
c0003883:	f6 c1 40             	test   cl,0x40
c0003886:	74 12                	je     c000389a <dir_read+0xec>
c0003888:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000388b:	83 e1 bf             	and    ecx,0xffffffbf
c000388e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003892:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003895:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003898:	eb 06                	jmp    c00038a0 <dir_read+0xf2>
c000389a:	89 f0                	mov    eax,esi
c000389c:	38 c8                	cmp    al,cl
c000389e:	75 47                	jne    c00038e7 <dir_read+0x139>
c00038a0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038ac:	75 3e                	jne    c00038ec <dir_read+0x13e>
c00038ae:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b5:	e8 8a e4 ff ff       	call   c0001d44 <pick_lfn>
c00038ba:	85 c0                	test   eax,eax
c00038bc:	74 2e                	je     c00038ec <dir_read+0x13e>
c00038be:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c2:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c5:	eb 25                	jmp    c00038ec <dir_read+0x13e>
c00038c7:	89 f0                	mov    eax,esi
c00038c9:	84 c0                	test   al,al
c00038cb:	75 11                	jne    c00038de <dir_read+0x130>
c00038cd:	89 d0                	mov    eax,edx
c00038cf:	e8 2a e6 ff ff       	call   c0001efe <sum_sfn>
c00038d4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d8:	0f 84 31 ff ff ff    	je     c000380f <dir_read+0x61>
c00038de:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e5:	eb 37                	jmp    c000391e <dir_read+0x170>
c00038e7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ec:	31 d2                	xor    edx,edx
c00038ee:	89 d8                	mov    eax,ebx
c00038f0:	e8 01 fc ff ff       	call   c00034f6 <dir_next>
c00038f5:	89 c5                	mov    ebp,eax
c00038f7:	85 c0                	test   eax,eax
c00038f9:	0f 84 cd fe ff ff    	je     c00037cc <dir_read+0x1e>
c00038ff:	eb 0f                	jmp    c0003910 <dir_read+0x162>
c0003901:	85 ed                	test   ebp,ebp
c0003903:	0f 84 06 ff ff ff    	je     c000380f <dir_read+0x61>
c0003909:	eb 05                	jmp    c0003910 <dir_read+0x162>
c000390b:	bd 04 00 00 00       	mov    ebp,0x4
c0003910:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003917:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391e:	83 c4 1c             	add    esp,0x1c
c0003921:	89 e8                	mov    eax,ebp
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	5f                   	pop    edi
c0003926:	5d                   	pop    ebp
c0003927:	c3                   	ret    

c0003928 <dir_alloc>:
c0003928:	55                   	push   ebp
c0003929:	89 d5                	mov    ebp,edx
c000392b:	57                   	push   edi
c000392c:	31 d2                	xor    edx,edx
c000392e:	56                   	push   esi
c000392f:	53                   	push   ebx
c0003930:	89 c3                	mov    ebx,eax
c0003932:	83 ec 0c             	sub    esp,0xc
c0003935:	8b 38                	mov    edi,DWORD PTR [eax]
c0003937:	e8 62 f6 ff ff       	call   c0002f9e <dir_sdi>
c000393c:	85 c0                	test   eax,eax
c000393e:	75 4e                	jne    c000398e <dir_alloc+0x66>
c0003940:	31 f6                	xor    esi,esi
c0003942:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003945:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003948:	89 f8                	mov    eax,edi
c000394a:	e8 d1 e8 ff ff       	call   c0002220 <move_window>
c000394f:	85 c0                	test   eax,eax
c0003951:	75 3b                	jne    c000398e <dir_alloc+0x66>
c0003953:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003956:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003959:	8a 12                	mov    dl,BYTE PTR [edx]
c000395b:	75 07                	jne    c0003964 <dir_alloc+0x3c>
c000395d:	f7 d2                	not    edx
c000395f:	c0 ea 07             	shr    dl,0x7
c0003962:	eb 0d                	jmp    c0003971 <dir_alloc+0x49>
c0003964:	84 d2                	test   dl,dl
c0003966:	0f 94 c1             	sete   cl
c0003969:	80 fa e5             	cmp    dl,0xe5
c000396c:	0f 94 c2             	sete   dl
c000396f:	09 ca                	or     edx,ecx
c0003971:	84 d2                	test   dl,dl
c0003973:	74 07                	je     c000397c <dir_alloc+0x54>
c0003975:	46                   	inc    esi
c0003976:	39 ee                	cmp    esi,ebp
c0003978:	75 04                	jne    c000397e <dir_alloc+0x56>
c000397a:	eb 1c                	jmp    c0003998 <dir_alloc+0x70>
c000397c:	31 f6                	xor    esi,esi
c000397e:	ba 01 00 00 00       	mov    edx,0x1
c0003983:	89 d8                	mov    eax,ebx
c0003985:	e8 6c fb ff ff       	call   c00034f6 <dir_next>
c000398a:	85 c0                	test   eax,eax
c000398c:	74 b4                	je     c0003942 <dir_alloc+0x1a>
c000398e:	83 f8 04             	cmp    eax,0x4
c0003991:	75 05                	jne    c0003998 <dir_alloc+0x70>
c0003993:	b8 07 00 00 00       	mov    eax,0x7
c0003998:	83 c4 0c             	add    esp,0xc
c000399b:	5b                   	pop    ebx
c000399c:	5e                   	pop    esi
c000399d:	5f                   	pop    edi
c000399e:	5d                   	pop    ebp
c000399f:	c3                   	ret    

c00039a0 <store_xdir>:
c00039a0:	55                   	push   ebp
c00039a1:	57                   	push   edi
c00039a2:	89 c7                	mov    edi,eax
c00039a4:	56                   	push   esi
c00039a5:	53                   	push   ebx
c00039a6:	83 ec 0c             	sub    esp,0xc
c00039a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00039ab:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039ae:	89 e8                	mov    eax,ebp
c00039b0:	e8 5b e5 ff ff       	call   c0001f10 <xdir_sum>
c00039b5:	0f b7 d0             	movzx  edx,ax
c00039b8:	8d 45 02             	lea    eax,[ebp+0x2]
c00039bb:	e8 f4 e0 ff ff       	call   c0001ab4 <st_word>
c00039c0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c7:	89 f8                	mov    eax,edi
c00039c9:	e8 d0 f5 ff ff       	call   c0002f9e <dir_sdi>
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	85 f6                	test   esi,esi
c00039d2:	75 3d                	jne    c0003a11 <store_xdir+0x71>
c00039d4:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d7:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039da:	8b 07                	mov    eax,DWORD PTR [edi]
c00039dc:	e8 3f e8 ff ff       	call   c0002220 <move_window>
c00039e1:	89 c6                	mov    esi,eax
c00039e3:	85 c0                	test   eax,eax
c00039e5:	75 2a                	jne    c0003a11 <store_xdir+0x71>
c00039e7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ea:	b9 20 00 00 00       	mov    ecx,0x20
c00039ef:	89 ea                	mov    edx,ebp
c00039f1:	e8 cb e0 ff ff       	call   c0001ac1 <mem_cpy>
c00039f6:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f8:	85 db                	test   ebx,ebx
c00039fa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fe:	74 11                	je     c0003a11 <store_xdir+0x71>
c0003a00:	31 d2                	xor    edx,edx
c0003a02:	89 f8                	mov    eax,edi
c0003a04:	83 c5 20             	add    ebp,0x20
c0003a07:	e8 ea fa ff ff       	call   c00034f6 <dir_next>
c0003a0c:	4b                   	dec    ebx
c0003a0d:	89 c6                	mov    esi,eax
c0003a0f:	eb bf                	jmp    c00039d0 <store_xdir+0x30>
c0003a11:	89 f0                	mov    eax,esi
c0003a13:	83 fe 02             	cmp    esi,0x2
c0003a16:	76 05                	jbe    c0003a1d <store_xdir+0x7d>
c0003a18:	b8 02 00 00 00       	mov    eax,0x2
c0003a1d:	83 c4 0c             	add    esp,0xc
c0003a20:	5b                   	pop    ebx
c0003a21:	5e                   	pop    esi
c0003a22:	5f                   	pop    edi
c0003a23:	5d                   	pop    ebp
c0003a24:	c3                   	ret    

c0003a25 <dir_remove>:
c0003a25:	57                   	push   edi
c0003a26:	56                   	push   esi
c0003a27:	53                   	push   ebx
c0003a28:	89 c3                	mov    ebx,eax
c0003a2a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a32:	83 fa ff             	cmp    edx,0xffffffff
c0003a35:	74 09                	je     c0003a40 <dir_remove+0x1b>
c0003a37:	e8 62 f5 ff ff       	call   c0002f9e <dir_sdi>
c0003a3c:	85 c0                	test   eax,eax
c0003a3e:	75 41                	jne    c0003a81 <dir_remove+0x5c>
c0003a40:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a43:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 d3 e7 ff ff       	call   c0002220 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 26                	jne    c0003a77 <dir_remove+0x52>
c0003a51:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a57:	75 05                	jne    c0003a5e <dir_remove+0x39>
c0003a59:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5c:	eb 03                	jmp    c0003a61 <dir_remove+0x3c>
c0003a5e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a65:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a68:	73 17                	jae    c0003a81 <dir_remove+0x5c>
c0003a6a:	31 d2                	xor    edx,edx
c0003a6c:	89 d8                	mov    eax,ebx
c0003a6e:	e8 83 fa ff ff       	call   c00034f6 <dir_next>
c0003a73:	85 c0                	test   eax,eax
c0003a75:	74 c9                	je     c0003a40 <dir_remove+0x1b>
c0003a77:	83 f8 04             	cmp    eax,0x4
c0003a7a:	75 05                	jne    c0003a81 <dir_remove+0x5c>
c0003a7c:	b8 02 00 00 00       	mov    eax,0x2
c0003a81:	5b                   	pop    ebx
c0003a82:	5e                   	pop    esi
c0003a83:	5f                   	pop    edi
c0003a84:	c3                   	ret    

c0003a85 <create_name>:
c0003a85:	55                   	push   ebp
c0003a86:	89 d5                	mov    ebp,edx
c0003a88:	57                   	push   edi
c0003a89:	89 c7                	mov    edi,eax
c0003a8b:	56                   	push   esi
c0003a8c:	31 f6                	xor    esi,esi
c0003a8e:	53                   	push   ebx
c0003a8f:	83 ec 3c             	sub    esp,0x3c
c0003a92:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a98:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa5:	e8 72 e0 ff ff       	call   c0001b1c <tchar2uni>
c0003aaa:	89 c3                	mov    ebx,eax
c0003aac:	83 f8 ff             	cmp    eax,0xffffffff
c0003aaf:	75 0a                	jne    c0003abb <create_name+0x36>
c0003ab1:	b8 06 00 00 00       	mov    eax,0x6
c0003ab6:	e9 9e 02 00 00       	jmp    c0003d59 <create_name+0x2d4>
c0003abb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac0:	76 0c                	jbe    c0003ace <create_name+0x49>
c0003ac2:	c1 e8 10             	shr    eax,0x10
c0003ac5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ac9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003acd:	46                   	inc    esi
c0003ace:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad2:	76 4f                	jbe    c0003b23 <create_name+0x9e>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 35                	je     c0003b0f <create_name+0x8a>
c0003ada:	66 83 fb 2f          	cmp    bx,0x2f
c0003ade:	74 2f                	je     c0003b0f <create_name+0x8a>
c0003ae0:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae4:	77 11                	ja     c0003af7 <create_name+0x72>
c0003ae6:	0f b7 d3             	movzx  edx,bx
c0003ae9:	b8 d2 8b 02 c0       	mov    eax,0xc0028bd2
c0003aee:	e8 11 e0 ff ff       	call   c0001b04 <chk_chr>
c0003af3:	85 c0                	test   eax,eax
c0003af5:	75 ba                	jne    c0003ab1 <create_name+0x2c>
c0003af7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003afd:	77 b2                	ja     c0003ab1 <create_name+0x2c>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b07:	46                   	inc    esi
c0003b08:	eb 97                	jmp    c0003aa1 <create_name+0x1c>
c0003b0a:	40                   	inc    eax
c0003b0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b13:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b15:	80 fa 2f             	cmp    dl,0x2f
c0003b18:	74 f0                	je     c0003b0a <create_name+0x85>
c0003b1a:	80 fa 5c             	cmp    dl,0x5c
c0003b1d:	74 eb                	je     c0003b0a <create_name+0x85>
c0003b1f:	31 db                	xor    ebx,ebx
c0003b21:	eb 02                	jmp    c0003b25 <create_name+0xa0>
c0003b23:	b3 04                	mov    bl,0x4
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xc3>
c0003b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc0>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xc3>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xa7>
c0003b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b54:	85 f6                	test   esi,esi
c0003b56:	0f 84 55 ff ff ff    	je     c0003ab1 <create_name+0x2c>
c0003b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xec>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xd7>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xf6>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0xfe>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0xfe>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x10a>
c0003b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0xfb>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 35 df ff ff       	call   c0001ad6 <mem_set>
c0003ba1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 30 01 00 00    	je     c0003cf8 <create_name+0x273>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 10                	je     c0003bde <create_name+0x159>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 13                	jne    c0003be7 <create_name+0x162>
c0003bd4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd8:	0f 84 6b 01 00 00    	je     c0003d49 <create_name+0x2c4>
c0003bde:	83 cb 03             	or     ebx,0x3
c0003be1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003be5:	eb c9                	jmp    c0003bb0 <create_name+0x12b>
c0003be7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003beb:	73 0b                	jae    c0003bf8 <create_name+0x173>
c0003bed:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf1:	75 47                	jne    c0003c3a <create_name+0x1b5>
c0003bf3:	e9 51 01 00 00       	jmp    c0003d49 <create_name+0x2c4>
c0003bf8:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bfd:	75 10                	jne    c0003c0f <create_name+0x18a>
c0003bff:	83 cb 03             	or     ebx,0x3
c0003c02:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c0a:	e9 e9 00 00 00       	jmp    c0003cf8 <create_name+0x273>
c0003c0f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c13:	74 0d                	je     c0003c22 <create_name+0x19d>
c0003c15:	83 cb 03             	or     ebx,0x3
c0003c18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1c:	0f 87 d6 00 00 00    	ja     c0003cf8 <create_name+0x273>
c0003c22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c27:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c33:	b9 08 00 00 00       	mov    ecx,0x8
c0003c38:	eb a7                	jmp    c0003be1 <create_name+0x15c>
c0003c3a:	66 83 fd 7f          	cmp    bp,0x7f
c0003c3e:	76 68                	jbe    c0003ca8 <create_name+0x223>
c0003c40:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c44:	88 da                	mov    dl,bl
c0003c46:	83 ca 02             	or     edx,0x2
c0003c49:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c4d:	50                   	push   eax
c0003c4e:	50                   	push   eax
c0003c4f:	68 b5 01 00 00       	push   0x1b5
c0003c54:	55                   	push   ebp
c0003c55:	e8 48 46 00 00       	call   c00082a2 <ff_uni2oem>
c0003c5a:	83 c4 10             	add    esp,0x10
c0003c5d:	89 c5                	mov    ebp,eax
c0003c5f:	a8 80                	test   al,0x80
c0003c61:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c69:	74 0c                	je     c0003c77 <create_name+0x1f2>
c0003c6b:	83 e5 7f             	and    ebp,0x7f
c0003c6e:	0f b6 ad 20 8b 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd74e0]
c0003c75:	eb 2a                	jmp    c0003ca1 <create_name+0x21c>
c0003c77:	66 3d ff 00          	cmp    ax,0xff
c0003c7b:	76 24                	jbe    c0003ca1 <create_name+0x21c>
c0003c7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c81:	48                   	dec    eax
c0003c82:	39 c8                	cmp    eax,ecx
c0003c84:	77 0c                	ja     c0003c92 <create_name+0x20d>
c0003c86:	83 cb 03             	or     ebx,0x3
c0003c89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c8d:	e9 4f ff ff ff       	jmp    c0003be1 <create_name+0x15c>
c0003c92:	89 e8                	mov    eax,ebp
c0003c94:	88 d3                	mov    bl,dl
c0003c96:	66 c1 e8 08          	shr    ax,0x8
c0003c9a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c9e:	41                   	inc    ecx
c0003c9f:	eb 4b                	jmp    c0003cec <create_name+0x267>
c0003ca1:	88 d3                	mov    bl,dl
c0003ca3:	66 85 ed             	test   bp,bp
c0003ca6:	74 19                	je     c0003cc1 <create_name+0x23c>
c0003ca8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cac:	0f b7 d5             	movzx  edx,bp
c0003caf:	b8 db 8b 02 c0       	mov    eax,0xc0028bdb
c0003cb4:	e8 4b de ff ff       	call   c0001b04 <chk_chr>
c0003cb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cbd:	85 c0                	test   eax,eax
c0003cbf:	74 0a                	je     c0003ccb <create_name+0x246>
c0003cc1:	83 cb 03             	or     ebx,0x3
c0003cc4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc9:	eb 21                	jmp    c0003cec <create_name+0x267>
c0003ccb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cce:	66 83 f8 19          	cmp    ax,0x19
c0003cd2:	77 07                	ja     c0003cdb <create_name+0x256>
c0003cd4:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cd9:	eb 11                	jmp    c0003cec <create_name+0x267>
c0003cdb:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cde:	66 83 f8 19          	cmp    ax,0x19
c0003ce2:	77 08                	ja     c0003cec <create_name+0x267>
c0003ce4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ce9:	83 ed 20             	sub    ebp,0x20
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf2:	41                   	inc    ecx
c0003cf3:	e9 e9 fe ff ff       	jmp    c0003be1 <create_name+0x15c>
c0003cf8:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cfc:	75 04                	jne    c0003d02 <create_name+0x27d>
c0003cfe:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d02:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d07:	75 05                	jne    c0003d0e <create_name+0x289>
c0003d09:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d12:	83 e0 0c             	and    eax,0xc
c0003d15:	3c 0c                	cmp    al,0xc
c0003d17:	74 0b                	je     c0003d24 <create_name+0x29f>
c0003d19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1d:	83 e0 03             	and    eax,0x3
c0003d20:	3c 03                	cmp    al,0x3
c0003d22:	75 05                	jne    c0003d29 <create_name+0x2a4>
c0003d24:	83 cb 02             	or     ebx,0x2
c0003d27:	eb 19                	jmp    c0003d42 <create_name+0x2bd>
c0003d29:	f6 c3 02             	test   bl,0x2
c0003d2c:	75 14                	jne    c0003d42 <create_name+0x2bd>
c0003d2e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d33:	74 03                	je     c0003d38 <create_name+0x2b3>
c0003d35:	83 cb 10             	or     ebx,0x10
c0003d38:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d3d:	74 03                	je     c0003d42 <create_name+0x2bd>
c0003d3f:	83 cb 08             	or     ebx,0x8
c0003d42:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d45:	31 c0                	xor    eax,eax
c0003d47:	eb 10                	jmp    c0003d59 <create_name+0x2d4>
c0003d49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d4e:	0f 85 ce fe ff ff    	jne    c0003c22 <create_name+0x19d>
c0003d54:	e9 a6 fe ff ff       	jmp    c0003bff <create_name+0x17a>
c0003d59:	83 c4 3c             	add    esp,0x3c
c0003d5c:	5b                   	pop    ebx
c0003d5d:	5e                   	pop    esi
c0003d5e:	5f                   	pop    edi
c0003d5f:	5d                   	pop    ebp
c0003d60:	c3                   	ret    

c0003d61 <xname_sum>:
c0003d61:	56                   	push   esi
c0003d62:	53                   	push   ebx
c0003d63:	89 c6                	mov    esi,eax
c0003d65:	51                   	push   ecx
c0003d66:	31 db                	xor    ebx,ebx
c0003d68:	83 c6 02             	add    esi,0x2
c0003d6b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d6f:	66 85 c0             	test   ax,ax
c0003d72:	74 1f                	je     c0003d93 <xname_sum+0x32>
c0003d74:	83 ec 0c             	sub    esp,0xc
c0003d77:	66 d1 cb             	ror    bx,1
c0003d7a:	50                   	push   eax
c0003d7b:	e8 1e 46 00 00       	call   c000839e <ff_wtoupper>
c0003d80:	83 c4 10             	add    esp,0x10
c0003d83:	0f b6 d0             	movzx  edx,al
c0003d86:	66 c1 e8 08          	shr    ax,0x8
c0003d8a:	01 d3                	add    ebx,edx
c0003d8c:	66 d1 cb             	ror    bx,1
c0003d8f:	01 c3                	add    ebx,eax
c0003d91:	eb d5                	jmp    c0003d68 <xname_sum+0x7>
c0003d93:	89 d8                	mov    eax,ebx
c0003d95:	5a                   	pop    edx
c0003d96:	5b                   	pop    ebx
c0003d97:	5e                   	pop    esi
c0003d98:	c3                   	ret    

c0003d99 <create_xdir>:
c0003d99:	55                   	push   ebp
c0003d9a:	b9 40 00 00 00       	mov    ecx,0x40
c0003d9f:	57                   	push   edi
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	56                   	push   esi
c0003da6:	31 ff                	xor    edi,edi
c0003da8:	53                   	push   ebx
c0003da9:	be 40 00 00 00       	mov    esi,0x40
c0003dae:	89 c3                	mov    ebx,eax
c0003db0:	83 ec 1c             	sub    esp,0x1c
c0003db3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003db7:	31 d2                	xor    edx,edx
c0003db9:	e8 18 dd ff ff       	call   c0001ad6 <mem_set>
c0003dbe:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dc5:	31 c9                	xor    ecx,ecx
c0003dc7:	8d 46 01             	lea    eax,[esi+0x1]
c0003dca:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dce:	83 c6 02             	add    esi,0x2
c0003dd1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	74 12                	je     c0003dec <create_xdir+0x53>
c0003dda:	0f b6 c1             	movzx  eax,cl
c0003ddd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003de5:	66 83 fd 01          	cmp    bp,0x1
c0003de9:	80 d9 ff             	sbb    cl,0xff
c0003dec:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003def:	0f b7 d5             	movzx  edx,bp
c0003df2:	83 c6 02             	add    esi,0x2
c0003df5:	e8 ba dc ff ff       	call   c0001ab4 <st_word>
c0003dfa:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e00:	75 d3                	jne    c0003dd5 <create_xdir+0x3c>
c0003e02:	8d 47 01             	lea    eax,[edi+0x1]
c0003e05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e0d:	0f b6 c1             	movzx  eax,cl
c0003e10:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e15:	74 07                	je     c0003e1e <create_xdir+0x85>
c0003e17:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e1c:	eb a9                	jmp    c0003dc7 <create_xdir+0x2e>
c0003e1e:	8d 47 02             	lea    eax,[edi+0x2]
c0003e21:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e24:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e27:	89 d0                	mov    eax,edx
c0003e29:	e8 33 ff ff ff       	call   c0003d61 <xname_sum>
c0003e2e:	83 c4 1c             	add    esp,0x1c
c0003e31:	0f b7 d0             	movzx  edx,ax
c0003e34:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e37:	5b                   	pop    ebx
c0003e38:	5e                   	pop    esi
c0003e39:	5f                   	pop    edi
c0003e3a:	5d                   	pop    ebp
c0003e3b:	e9 74 dc ff ff       	jmp    c0001ab4 <st_word>

c0003e40 <cmp_lfn>:
c0003e40:	55                   	push   ebp
c0003e41:	57                   	push   edi
c0003e42:	89 d7                	mov    edi,edx
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	83 ec 1c             	sub    esp,0x1c
c0003e49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e4d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e50:	e8 ed db ff ff       	call   c0001a42 <ld_word>
c0003e55:	66 85 c0             	test   ax,ax
c0003e58:	74 07                	je     c0003e61 <cmp_lfn+0x21>
c0003e5a:	31 c0                	xor    eax,eax
c0003e5c:	e9 9a 00 00 00       	jmp    c0003efb <cmp_lfn+0xbb>
c0003e61:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e63:	bd 01 00 00 00       	mov    ebp,0x1
c0003e68:	83 e3 3f             	and    ebx,0x3f
c0003e6b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e73:	4b                   	dec    ebx
c0003e74:	6b db 0d             	imul   ebx,ebx,0xd
c0003e77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e7b:	0f b6 80 a0 8b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7460]
c0003e82:	01 f8                	add    eax,edi
c0003e84:	e8 b9 db ff ff       	call   c0001a42 <ld_word>
c0003e89:	66 85 ed             	test   bp,bp
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	74 3c                	je     c0003ecc <cmp_lfn+0x8c>
c0003e90:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e96:	77 c2                	ja     c0003e5a <cmp_lfn+0x1a>
c0003e98:	83 ec 0c             	sub    esp,0xc
c0003e9b:	0f b7 c0             	movzx  eax,ax
c0003e9e:	50                   	push   eax
c0003e9f:	e8 fa 44 00 00       	call   c000839e <ff_wtoupper>
c0003ea4:	89 c5                	mov    ebp,eax
c0003ea6:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ea9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eb8:	e8 e1 44 00 00       	call   c000839e <ff_wtoupper>
c0003ebd:	83 c4 10             	add    esp,0x10
c0003ec0:	39 c5                	cmp    ebp,eax
c0003ec2:	75 96                	jne    c0003e5a <cmp_lfn+0x1a>
c0003ec4:	89 f5                	mov    ebp,esi
c0003ec6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eca:	eb 04                	jmp    c0003ed0 <cmp_lfn+0x90>
c0003ecc:	66 46                	inc    si
c0003ece:	75 8a                	jne    c0003e5a <cmp_lfn+0x1a>
c0003ed0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ed4:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ed9:	75 9c                	jne    c0003e77 <cmp_lfn+0x37>
c0003edb:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ede:	74 16                	je     c0003ef6 <cmp_lfn+0xb6>
c0003ee0:	66 85 ed             	test   bp,bp
c0003ee3:	74 11                	je     c0003ef6 <cmp_lfn+0xb6>
c0003ee5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ee9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eee:	0f 94 c0             	sete   al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	eb 05                	jmp    c0003efb <cmp_lfn+0xbb>
c0003ef6:	b8 01 00 00 00       	mov    eax,0x1
c0003efb:	83 c4 1c             	add    esp,0x1c
c0003efe:	5b                   	pop    ebx
c0003eff:	5e                   	pop    esi
c0003f00:	5f                   	pop    edi
c0003f01:	5d                   	pop    ebp
c0003f02:	c3                   	ret    

c0003f03 <dir_find>:
c0003f03:	55                   	push   ebp
c0003f04:	31 d2                	xor    edx,edx
c0003f06:	57                   	push   edi
c0003f07:	56                   	push   esi
c0003f08:	53                   	push   ebx
c0003f09:	89 c3                	mov    ebx,eax
c0003f0b:	83 ec 1c             	sub    esp,0x1c
c0003f0e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f10:	e8 89 f0 ff ff       	call   c0002f9e <dir_sdi>
c0003f15:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f18:	85 c0                	test   eax,eax
c0003f1a:	0f 85 9e 01 00 00    	jne    c00040be <dir_find+0x1bb>
c0003f20:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f23:	0f 85 8d 00 00 00    	jne    c0003fb6 <dir_find+0xb3>
c0003f29:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f2c:	e8 30 fe ff ff       	call   c0003d61 <xname_sum>
c0003f31:	89 c7                	mov    edi,eax
c0003f33:	31 d2                	xor    edx,edx
c0003f35:	89 d8                	mov    eax,ebx
c0003f37:	e8 72 f8 ff ff       	call   c00037ae <dir_read>
c0003f3c:	85 c0                	test   eax,eax
c0003f3e:	0f 85 5e 01 00 00    	jne    c00040a2 <dir_find+0x19f>
c0003f44:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f47:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f4a:	e8 f3 da ff ff       	call   c0001a42 <ld_word>
c0003f4f:	66 39 f8             	cmp    ax,di
c0003f52:	75 df                	jne    c0003f33 <dir_find+0x30>
c0003f54:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f57:	31 ed                	xor    ebp,ebp
c0003f59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f5d:	ba 40 00 00 00       	mov    edx,0x40
c0003f62:	89 e9                	mov    ecx,ebp
c0003f64:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f68:	0f 84 42 01 00 00    	je     c00040b0 <dir_find+0x1ad>
c0003f6e:	f6 c2 1f             	test   dl,0x1f
c0003f71:	75 03                	jne    c0003f76 <dir_find+0x73>
c0003f73:	83 c2 02             	add    edx,0x2
c0003f76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f7a:	89 d0                	mov    eax,edx
c0003f7c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f7f:	e8 be da ff ff       	call   c0001a42 <ld_word>
c0003f84:	83 ec 0c             	sub    esp,0xc
c0003f87:	0f b7 c0             	movzx  eax,ax
c0003f8a:	50                   	push   eax
c0003f8b:	e8 0e 44 00 00       	call   c000839e <ff_wtoupper>
c0003f90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f94:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f97:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f9e:	e8 fb 43 00 00       	call   c000839e <ff_wtoupper>
c0003fa3:	83 c4 10             	add    esp,0x10
c0003fa6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003faa:	75 87                	jne    c0003f33 <dir_find+0x30>
c0003fac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb0:	45                   	inc    ebp
c0003fb1:	83 c2 02             	add    edx,0x2
c0003fb4:	eb ac                	jmp    c0003f62 <dir_find+0x5f>
c0003fb6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fbd:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fc2:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fca:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fcd:	89 f0                	mov    eax,esi
c0003fcf:	e8 4c e2 ff ff       	call   c0002220 <move_window>
c0003fd4:	85 c0                	test   eax,eax
c0003fd6:	0f 85 c6 00 00 00    	jne    c00040a2 <dir_find+0x19f>
c0003fdc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fdf:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fe2:	84 c9                	test   cl,cl
c0003fe4:	0f 84 bd 00 00 00    	je     c00040a7 <dir_find+0x1a4>
c0003fea:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fed:	88 d0                	mov    al,dl
c0003fef:	83 e0 3f             	and    eax,0x3f
c0003ff2:	80 f9 e5             	cmp    cl,0xe5
c0003ff5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ff8:	0f 84 87 00 00 00    	je     c0004085 <dir_find+0x182>
c0003ffe:	80 e2 08             	and    dl,0x8
c0004001:	74 06                	je     c0004009 <dir_find+0x106>
c0004003:	3c 0f                	cmp    al,0xf
c0004005:	75 7e                	jne    c0004085 <dir_find+0x182>
c0004007:	eb 04                	jmp    c000400d <dir_find+0x10a>
c0004009:	3c 0f                	cmp    al,0xf
c000400b:	75 4c                	jne    c0004059 <dir_find+0x156>
c000400d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004011:	75 7e                	jne    c0004091 <dir_find+0x18e>
c0004013:	f6 c1 40             	test   cl,0x40
c0004016:	74 12                	je     c000402a <dir_find+0x127>
c0004018:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000401b:	83 e1 bf             	and    ecx,0xffffffbf
c000401e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004022:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004025:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004028:	eb 06                	jmp    c0004030 <dir_find+0x12d>
c000402a:	89 f8                	mov    eax,edi
c000402c:	38 c8                	cmp    al,cl
c000402e:	75 5c                	jne    c000408c <dir_find+0x189>
c0004030:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004034:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004039:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000403c:	75 53                	jne    c0004091 <dir_find+0x18e>
c000403e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	89 ea                	mov    edx,ebp
c0004047:	e8 f4 fd ff ff       	call   c0003e40 <cmp_lfn>
c000404c:	85 c0                	test   eax,eax
c000404e:	74 41                	je     c0004091 <dir_find+0x18e>
c0004050:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004054:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004057:	eb 38                	jmp    c0004091 <dir_find+0x18e>
c0004059:	89 f8                	mov    eax,edi
c000405b:	84 c0                	test   al,al
c000405d:	75 0d                	jne    c000406c <dir_find+0x169>
c000405f:	89 e8                	mov    eax,ebp
c0004061:	e8 98 de ff ff       	call   c0001efe <sum_sfn>
c0004066:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000406a:	74 52                	je     c00040be <dir_find+0x1bb>
c000406c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004070:	75 13                	jne    c0004085 <dir_find+0x182>
c0004072:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004075:	b9 0b 00 00 00       	mov    ecx,0xb
c000407a:	89 e8                	mov    eax,ebp
c000407c:	e8 60 da ff ff       	call   c0001ae1 <mem_cmp>
c0004081:	85 c0                	test   eax,eax
c0004083:	74 39                	je     c00040be <dir_find+0x1bb>
c0004085:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000408c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004091:	31 d2                	xor    edx,edx
c0004093:	89 d8                	mov    eax,ebx
c0004095:	e8 5c f4 ff ff       	call   c00034f6 <dir_next>
c000409a:	85 c0                	test   eax,eax
c000409c:	0f 84 25 ff ff ff    	je     c0003fc7 <dir_find+0xc4>
c00040a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00040a5:	eb 17                	jmp    c00040be <dir_find+0x1bb>
c00040a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040ae:	eb 0e                	jmp    c00040be <dir_find+0x1bb>
c00040b0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040b8:	0f 85 75 fe ff ff    	jne    c0003f33 <dir_find+0x30>
c00040be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c1:	83 c4 1c             	add    esp,0x1c
c00040c4:	5b                   	pop    ebx
c00040c5:	5e                   	pop    esi
c00040c6:	5f                   	pop    edi
c00040c7:	5d                   	pop    ebp
c00040c8:	c3                   	ret    

c00040c9 <dir_register>:
c00040c9:	55                   	push   ebp
c00040ca:	57                   	push   edi
c00040cb:	56                   	push   esi
c00040cc:	be 06 00 00 00       	mov    esi,0x6
c00040d1:	53                   	push   ebx
c00040d2:	83 ec 6c             	sub    esp,0x6c
c00040d5:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040d9:	0f 85 62 02 00 00    	jne    c0004341 <dir_register+0x278>
c00040df:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e1:	31 ff                	xor    edi,edi
c00040e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040e6:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040eb:	74 03                	je     c00040f0 <dir_register+0x27>
c00040ed:	47                   	inc    edi
c00040ee:	eb f6                	jmp    c00040e6 <dir_register+0x1d>
c00040f0:	89 c3                	mov    ebx,eax
c00040f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040f6:	0f 85 e1 00 00 00    	jne    c00041dd <dir_register+0x114>
c00040fc:	83 c7 0e             	add    edi,0xe
c00040ff:	b9 0f 00 00 00       	mov    ecx,0xf
c0004104:	89 f8                	mov    eax,edi
c0004106:	31 d2                	xor    edx,edx
c0004108:	f7 f1                	div    ecx
c000410a:	8d 50 02             	lea    edx,[eax+0x2]
c000410d:	89 c7                	mov    edi,eax
c000410f:	89 d8                	mov    eax,ebx
c0004111:	e8 12 f8 ff ff       	call   c0003928 <dir_alloc>
c0004116:	89 c6                	mov    esi,eax
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 21 02 00 00    	jne    c0004341 <dir_register+0x278>
c0004120:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004126:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004129:	c1 e7 05             	shl    edi,0x5
c000412c:	29 f8                	sub    eax,edi
c000412e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004131:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004134:	a8 04                	test   al,0x4
c0004136:	0f 84 91 00 00 00    	je     c00041cd <dir_register+0x104>
c000413c:	83 e0 fb             	and    eax,0xfffffffb
c000413f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004142:	89 d8                	mov    eax,ebx
c0004144:	e8 25 ec ff ff       	call   c0002d6e <fill_first_frag>
c0004149:	85 c0                	test   eax,eax
c000414b:	0f 85 ee 01 00 00    	jne    c000433f <dir_register+0x276>
c0004151:	83 c9 ff             	or     ecx,0xffffffff
c0004154:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004157:	89 d8                	mov    eax,ebx
c0004159:	e8 db eb ff ff       	call   c0002d39 <fill_last_frag>
c000415e:	85 c0                	test   eax,eax
c0004160:	0f 85 d9 01 00 00    	jne    c000433f <dir_register+0x276>
c0004166:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416a:	74 61                	je     c00041cd <dir_register+0x104>
c000416c:	89 da                	mov    edx,ebx
c000416e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004172:	e8 ea f5 ff ff       	call   c0003761 <load_obj_xdir>
c0004177:	85 c0                	test   eax,eax
c0004179:	0f 85 c0 01 00 00    	jne    c000433f <dir_register+0x276>
c000417f:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004183:	31 c9                	xor    ecx,ecx
c0004185:	c1 e2 09             	shl    edx,0x9
c0004188:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000418b:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000418e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004191:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004194:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004197:	83 c0 38             	add    eax,0x38
c000419a:	e8 1c d9 ff ff       	call   c0001abb <st_qword>
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041a5:	83 c0 28             	add    eax,0x28
c00041a8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041ab:	e8 0b d9 ff ff       	call   c0001abb <st_qword>
c00041b0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041b6:	83 c8 01             	or     eax,0x1
c00041b9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c0:	e8 db f7 ff ff       	call   c00039a0 <store_xdir>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	0f 85 72 01 00 00    	jne    c000433f <dir_register+0x276>
c00041cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d3:	e8 c1 fb ff ff       	call   c0003d99 <create_xdir>
c00041d8:	e9 64 01 00 00       	jmp    c0004341 <dir_register+0x278>
c00041dd:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e0:	b9 0c 00 00 00       	mov    ecx,0xc
c00041e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041e9:	89 c2                	mov    edx,eax
c00041eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ef:	e8 cd d8 ff ff       	call   c0001ac1 <mem_cpy>
c00041f4:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041f9:	74 58                	je     c0004253 <dir_register+0x18a>
c00041fb:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004207:	83 ec 0c             	sub    esp,0xc
c000420a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000420d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004211:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004219:	e8 24 dc ff ff       	call   c0001e42 <gen_numname>
c000421e:	89 d8                	mov    eax,ebx
c0004220:	e8 de fc ff ff       	call   c0003f03 <dir_find>
c0004225:	83 c4 10             	add    esp,0x10
c0004228:	89 c6                	mov    esi,eax
c000422a:	85 c0                	test   eax,eax
c000422c:	75 15                	jne    c0004243 <dir_register+0x17a>
c000422e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004232:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004237:	75 ce                	jne    c0004207 <dir_register+0x13e>
c0004239:	be 07 00 00 00       	mov    esi,0x7
c000423e:	e9 fe 00 00 00       	jmp    c0004341 <dir_register+0x278>
c0004243:	83 f8 04             	cmp    eax,0x4
c0004246:	0f 85 f5 00 00 00    	jne    c0004341 <dir_register+0x278>
c000424c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004250:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004253:	b9 01 00 00 00       	mov    ecx,0x1
c0004258:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000425d:	74 0f                	je     c000426e <dir_register+0x1a5>
c000425f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004264:	8d 47 0c             	lea    eax,[edi+0xc]
c0004267:	31 d2                	xor    edx,edx
c0004269:	f7 f1                	div    ecx
c000426b:	8d 48 01             	lea    ecx,[eax+0x1]
c000426e:	89 ca                	mov    edx,ecx
c0004270:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004274:	89 d8                	mov    eax,ebx
c0004276:	e8 ad f6 ff ff       	call   c0003928 <dir_alloc>
c000427b:	89 c6                	mov    esi,eax
c000427d:	85 c0                	test   eax,eax
c000427f:	0f 85 bc 00 00 00    	jne    c0004341 <dir_register+0x278>
c0004285:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004289:	49                   	dec    ecx
c000428a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000428e:	74 6a                	je     c00042fa <dir_register+0x231>
c0004290:	89 c8                	mov    eax,ecx
c0004292:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004295:	c1 e0 05             	shl    eax,0x5
c0004298:	29 c2                	sub    edx,eax
c000429a:	89 d8                	mov    eax,ebx
c000429c:	e8 fd ec ff ff       	call   c0002f9e <dir_sdi>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	0f 85 96 00 00 00    	jne    c0004341 <dir_register+0x278>
c00042ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042af:	e8 4a dc ff ff       	call   c0001efe <sum_sfn>
c00042b4:	0f b6 f8             	movzx  edi,al
c00042b7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042ba:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042bd:	89 e8                	mov    eax,ebp
c00042bf:	e8 5c df ff ff       	call   c0002220 <move_window>
c00042c4:	89 c6                	mov    esi,eax
c00042c6:	85 c0                	test   eax,eax
c00042c8:	75 77                	jne    c0004341 <dir_register+0x278>
c00042ca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042cf:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d2:	83 ec 0c             	sub    esp,0xc
c00042d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042d8:	57                   	push   edi
c00042d9:	e8 e0 da ff ff       	call   c0001dbe <put_lfn>
c00042de:	31 d2                	xor    edx,edx
c00042e0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042e4:	89 d8                	mov    eax,ebx
c00042e6:	e8 0b f2 ff ff       	call   c00034f6 <dir_next>
c00042eb:	83 c4 10             	add    esp,0x10
c00042ee:	89 c6                	mov    esi,eax
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 4d                	jne    c0004341 <dir_register+0x278>
c00042f4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042f8:	75 bd                	jne    c00042b7 <dir_register+0x1ee>
c00042fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004300:	89 e8                	mov    eax,ebp
c0004302:	e8 19 df ff ff       	call   c0002220 <move_window>
c0004307:	89 c6                	mov    esi,eax
c0004309:	85 c0                	test   eax,eax
c000430b:	75 34                	jne    c0004341 <dir_register+0x278>
c000430d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004310:	b9 20 00 00 00       	mov    ecx,0x20
c0004315:	31 d2                	xor    edx,edx
c0004317:	e8 ba d7 ff ff       	call   c0001ad6 <mem_set>
c000431c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000431f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004323:	b9 0b 00 00 00       	mov    ecx,0xb
c0004328:	e8 94 d7 ff ff       	call   c0001ac1 <mem_cpy>
c000432d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004330:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004333:	83 e0 18             	and    eax,0x18
c0004336:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004339:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000433d:	eb 02                	jmp    c0004341 <dir_register+0x278>
c000433f:	89 c6                	mov    esi,eax
c0004341:	83 c4 6c             	add    esp,0x6c
c0004344:	89 f0                	mov    eax,esi
c0004346:	5b                   	pop    ebx
c0004347:	5e                   	pop    esi
c0004348:	5f                   	pop    edi
c0004349:	5d                   	pop    ebp
c000434a:	c3                   	ret    

c000434b <sync_fs>:
c000434b:	56                   	push   esi
c000434c:	53                   	push   ebx
c000434d:	53                   	push   ebx
c000434e:	89 c3                	mov    ebx,eax
c0004350:	e8 37 de ff ff       	call   c000218c <sync_window>
c0004355:	85 c0                	test   eax,eax
c0004357:	0f 85 b1 00 00 00    	jne    c000440e <sync_fs+0xc3>
c000435d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004360:	0f 85 8e 00 00 00    	jne    c00043f4 <sync_fs+0xa9>
c0004366:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000436a:	0f 85 84 00 00 00    	jne    c00043f4 <sync_fs+0xa9>
c0004370:	b9 00 02 00 00       	mov    ecx,0x200
c0004375:	8d 73 54             	lea    esi,[ebx+0x54]
c0004378:	31 d2                	xor    edx,edx
c000437a:	89 f0                	mov    eax,esi
c000437c:	e8 55 d7 ff ff       	call   c0001ad6 <mem_set>
c0004381:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004387:	ba 55 aa 00 00       	mov    edx,0xaa55
c000438c:	e8 23 d7 ff ff       	call   c0001ab4 <st_word>
c0004391:	ba 52 52 61 41       	mov    edx,0x41615252
c0004396:	89 f0                	mov    eax,esi
c0004398:	e8 1b d7 ff ff       	call   c0001ab8 <st_dword>
c000439d:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043a3:	ba 72 72 41 61       	mov    edx,0x61417272
c00043a8:	e8 0b d7 ff ff       	call   c0001ab8 <st_dword>
c00043ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043b6:	e8 fd d6 ff ff       	call   c0001ab8 <st_dword>
c00043bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043be:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043c4:	e8 ef d6 ff ff       	call   c0001ab8 <st_dword>
c00043c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043cf:	83 c0 01             	add    eax,0x1
c00043d2:	83 d2 00             	adc    edx,0x0
c00043d5:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d8:	83 ec 0c             	sub    esp,0xc
c00043db:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043de:	6a 01                	push   0x1
c00043e0:	52                   	push   edx
c00043e1:	50                   	push   eax
c00043e2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e6:	56                   	push   esi
c00043e7:	50                   	push   eax
c00043e8:	e8 20 d6 ff ff       	call   c0001a0d <disk_write>
c00043ed:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f1:	83 c4 20             	add    esp,0x20
c00043f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f8:	51                   	push   ecx
c00043f9:	6a 00                	push   0x0
c00043fb:	6a 00                	push   0x0
c00043fd:	50                   	push   eax
c00043fe:	e8 20 d6 ff ff       	call   c0001a23 <disk_ioctl>
c0004403:	83 c4 10             	add    esp,0x10
c0004406:	85 c0                	test   eax,eax
c0004408:	0f 95 c0             	setne  al
c000440b:	0f b6 c0             	movzx  eax,al
c000440e:	5a                   	pop    edx
c000440f:	5b                   	pop    ebx
c0004410:	5e                   	pop    esi
c0004411:	c3                   	ret    

c0004412 <create_partition>:
c0004412:	55                   	push   ebp
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	57                   	push   edi
c0004417:	56                   	push   esi
c0004418:	53                   	push   ebx
c0004419:	83 ec 60             	sub    esp,0x60
c000441c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004420:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004424:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004428:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000442c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004430:	50                   	push   eax
c0004431:	6a 01                	push   0x1
c0004433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004437:	e8 e7 d5 ff ff       	call   c0001a23 <disk_ioctl>
c000443c:	83 c4 10             	add    esp,0x10
c000443f:	85 c0                	test   eax,eax
c0004441:	74 0a                	je     c000444d <create_partition+0x3b>
c0004443:	b8 01 00 00 00       	mov    eax,0x1
c0004448:	e9 67 05 00 00       	jmp    c00049b4 <create_partition+0x5a2>
c000444d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004451:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004459:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000445d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004462:	0f 86 ed 03 00 00    	jbe    c0004855 <create_partition+0x443>
c0004468:	83 c0 df             	add    eax,0xffffffdf
c000446b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004473:	83 d2 ff             	adc    edx,0xffffffff
c0004476:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000447a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004486:	83 c0 bd             	add    eax,0xffffffbd
c0004489:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004490:	83 d2 ff             	adc    edx,0xffffffff
c0004493:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004497:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000449b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044a3:	be 22 00 00 00       	mov    esi,0x22
c00044a8:	31 ff                	xor    edi,edi
c00044aa:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044b2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044ba:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044c2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044c6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044cc:	75 0e                	jne    c00044dc <create_partition+0xca>
c00044ce:	b9 00 02 00 00       	mov    ecx,0x200
c00044d3:	31 d2                	xor    edx,edx
c00044d5:	89 d8                	mov    eax,ebx
c00044d7:	e8 fa d5 ff ff       	call   c0001ad6 <mem_set>
c00044dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044e8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044eb:	0f 84 23 01 00 00    	je     c0004614 <create_partition+0x202>
c00044f1:	89 f0                	mov    eax,esi
c00044f3:	89 fa                	mov    edx,edi
c00044f5:	05 ff 07 00 00       	add    eax,0x7ff
c00044fa:	83 d2 00             	adc    edx,0x0
c00044fd:	89 c1                	mov    ecx,eax
c00044ff:	89 d7                	mov    edi,edx
c0004501:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004507:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000450b:	89 ce                	mov    esi,ecx
c000450d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004511:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004515:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004519:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000451c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004520:	89 04 24             	mov    DWORD PTR [esp],eax
c0004523:	b8 64 00 00 00       	mov    eax,0x64
c0004528:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000452b:	b8 00 00 00 00       	mov    eax,0x0
c0004530:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004534:	72 41                	jb     c0004577 <create_partition+0x165>
c0004536:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000453a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000453e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004542:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004547:	01 c1                	add    ecx,eax
c0004549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000454d:	f7 24 24             	mul    DWORD PTR [esp]
c0004550:	6a 00                	push   0x0
c0004552:	01 ca                	add    edx,ecx
c0004554:	6a 64                	push   0x64
c0004556:	52                   	push   edx
c0004557:	50                   	push   eax
c0004558:	e8 af 1b 02 00       	call   c002610c <__udivdi3>
c000455d:	83 c4 10             	add    esp,0x10
c0004560:	05 ff 07 00 00       	add    eax,0x7ff
c0004565:	83 d2 00             	adc    edx,0x0
c0004568:	89 c1                	mov    ecx,eax
c000456a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000456e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004574:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004577:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000457a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000457e:	01 f0                	add    eax,esi
c0004580:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004584:	11 fa                	adc    edx,edi
c0004586:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000458a:	19 d1                	sbb    ecx,edx
c000458c:	73 2e                	jae    c00045bc <create_partition+0x1aa>
c000458e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004592:	89 f8                	mov    eax,edi
c0004594:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000459b:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000459f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045a7:	73 6b                	jae    c0004614 <create_partition+0x202>
c00045a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b1:	29 f0                	sub    eax,esi
c00045b3:	19 fa                	sbb    edx,edi
c00045b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00045b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045c3:	74 4f                	je     c0004614 <create_partition+0x202>
c00045c5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045c8:	b9 10 00 00 00       	mov    ecx,0x10
c00045cd:	ba b0 8b 02 c0       	mov    edx,0xc0028bb0
c00045d2:	e8 ea d4 ff ff       	call   c0001ac1 <mem_cpy>
c00045d7:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045db:	b9 10 00 00 00       	mov    ecx,0x10
c00045e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045e4:	e8 2c db ff ff       	call   c0002115 <make_rand>
c00045e9:	89 f2                	mov    edx,esi
c00045eb:	89 f9                	mov    ecx,edi
c00045ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f1:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045f5:	e8 c1 d4 ff ff       	call   c0001abb <st_qword>
c00045fa:	03 34 24             	add    esi,DWORD PTR [esp]
c00045fd:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004601:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004605:	89 f2                	mov    edx,esi
c0004607:	89 f9                	mov    ecx,edi
c0004609:	83 c2 ff             	add    edx,0xffffffff
c000460c:	83 d1 ff             	adc    ecx,0xffffffff
c000460f:	e8 a7 d4 ff ff       	call   c0001abb <st_qword>
c0004614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004618:	83 e8 80             	sub    eax,0xffffff80
c000461b:	89 c5                	mov    ebp,eax
c000461d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004621:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004627:	75 6b                	jne    c0004694 <create_partition+0x282>
c0004629:	45                   	inc    ebp
c000462a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000462e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004633:	e8 39 da ff ff       	call   c0002071 <crc32>
c0004638:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000463e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004642:	75 e5                	jne    c0004629 <create_partition+0x217>
c0004644:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004648:	31 d2                	xor    edx,edx
c000464a:	83 ec 0c             	sub    esp,0xc
c000464d:	c1 ed 09             	shr    ebp,0x9
c0004650:	6a 01                	push   0x1
c0004652:	8d 45 02             	lea    eax,[ebp+0x2]
c0004655:	52                   	push   edx
c0004656:	50                   	push   eax
c0004657:	53                   	push   ebx
c0004658:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000465c:	e8 ac d3 ff ff       	call   c0001a0d <disk_write>
c0004661:	83 c4 20             	add    esp,0x20
c0004664:	85 c0                	test   eax,eax
c0004666:	0f 85 d7 fd ff ff    	jne    c0004443 <create_partition+0x31>
c000466c:	83 ec 0c             	sub    esp,0xc
c000466f:	31 d2                	xor    edx,edx
c0004671:	6a 01                	push   0x1
c0004673:	89 e8                	mov    eax,ebp
c0004675:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004679:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000467d:	52                   	push   edx
c000467e:	50                   	push   eax
c000467f:	53                   	push   ebx
c0004680:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004684:	e8 84 d3 ff ff       	call   c0001a0d <disk_write>
c0004689:	83 c4 20             	add    esp,0x20
c000468c:	85 c0                	test   eax,eax
c000468e:	0f 85 af fd ff ff    	jne    c0004443 <create_partition+0x31>
c0004694:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004698:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000469c:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a1:	74 0d                	je     c00046b0 <create_partition+0x29e>
c00046a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046ab:	e9 12 fe ff ff       	jmp    c00044c2 <create_partition+0xb0>
c00046b0:	31 d2                	xor    edx,edx
c00046b2:	b9 00 02 00 00       	mov    ecx,0x200
c00046b7:	89 d8                	mov    eax,ebx
c00046b9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046bc:	e8 15 d4 ff ff       	call   c0001ad6 <mem_set>
c00046c1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c4:	b9 10 00 00 00       	mov    ecx,0x10
c00046c9:	ba a0 8a 02 c0       	mov    edx,0xc0028aa0
c00046ce:	89 d8                	mov    eax,ebx
c00046d0:	e8 ec d3 ff ff       	call   c0001ac1 <mem_cpy>
c00046d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046d9:	8d 43 58             	lea    eax,[ebx+0x58]
c00046dc:	f7 d2                	not    edx
c00046de:	e8 d5 d3 ff ff       	call   c0001ab8 <st_dword>
c00046e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00046e6:	31 c9                	xor    ecx,ecx
c00046e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00046eb:	ba 01 00 00 00       	mov    edx,0x1
c00046f0:	e8 c6 d3 ff ff       	call   c0001abb <st_qword>
c00046f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fd:	83 c2 ff             	add    edx,0xffffffff
c0004700:	89 e8                	mov    eax,ebp
c0004702:	83 d1 ff             	adc    ecx,0xffffffff
c0004705:	e8 b1 d3 ff ff       	call   c0001abb <st_qword>
c000470a:	31 c9                	xor    ecx,ecx
c000470c:	8d 43 28             	lea    eax,[ebx+0x28]
c000470f:	ba 22 00 00 00       	mov    edx,0x22
c0004714:	e8 a2 d3 ff ff       	call   c0001abb <st_qword>
c0004719:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000471d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004721:	83 c2 de             	add    edx,0xffffffde
c0004724:	8d 43 30             	lea    eax,[ebx+0x30]
c0004727:	83 d1 ff             	adc    ecx,0xffffffff
c000472a:	31 f6                	xor    esi,esi
c000472c:	e8 8a d3 ff ff       	call   c0001abb <st_qword>
c0004731:	8d 43 54             	lea    eax,[ebx+0x54]
c0004734:	ba 80 00 00 00       	mov    edx,0x80
c0004739:	e8 7a d3 ff ff       	call   c0001ab8 <st_dword>
c000473e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004741:	ba 80 00 00 00       	mov    edx,0x80
c0004746:	e8 6d d3 ff ff       	call   c0001ab8 <st_dword>
c000474b:	ba 02 00 00 00       	mov    edx,0x2
c0004750:	89 f8                	mov    eax,edi
c0004752:	e8 61 d3 ff ff       	call   c0001ab8 <st_dword>
c0004757:	8d 53 38             	lea    edx,[ebx+0x38]
c000475a:	b9 10 00 00 00       	mov    ecx,0x10
c000475f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004763:	e8 ad d9 ff ff       	call   c0002115 <make_rand>
c0004768:	83 c8 ff             	or     eax,0xffffffff
c000476b:	46                   	inc    esi
c000476c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004771:	e8 fb d8 ff ff       	call   c0002071 <crc32>
c0004776:	83 fe 5c             	cmp    esi,0x5c
c0004779:	75 f0                	jne    c000476b <create_partition+0x359>
c000477b:	f7 d0                	not    eax
c000477d:	8d 73 10             	lea    esi,[ebx+0x10]
c0004780:	89 c2                	mov    edx,eax
c0004782:	89 f0                	mov    eax,esi
c0004784:	e8 2f d3 ff ff       	call   c0001ab8 <st_dword>
c0004789:	83 ec 0c             	sub    esp,0xc
c000478c:	6a 01                	push   0x1
c000478e:	6a 00                	push   0x0
c0004790:	6a 01                	push   0x1
c0004792:	53                   	push   ebx
c0004793:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <disk_write>
c000479c:	83 c4 20             	add    esp,0x20
c000479f:	85 c0                	test   eax,eax
c00047a1:	0f 85 9c fc ff ff    	jne    c0004443 <create_partition+0x31>
c00047a7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047af:	83 c2 ff             	add    edx,0xffffffff
c00047b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047b5:	83 d1 ff             	adc    ecx,0xffffffff
c00047b8:	e8 fe d2 ff ff       	call   c0001abb <st_qword>
c00047bd:	ba 01 00 00 00       	mov    edx,0x1
c00047c2:	31 c9                	xor    ecx,ecx
c00047c4:	89 e8                	mov    eax,ebp
c00047c6:	e8 f0 d2 ff ff       	call   c0001abb <st_qword>
c00047cb:	89 f8                	mov    eax,edi
c00047cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047d5:	31 ff                	xor    edi,edi
c00047d7:	e8 df d2 ff ff       	call   c0001abb <st_qword>
c00047dc:	89 f0                	mov    eax,esi
c00047de:	31 d2                	xor    edx,edx
c00047e0:	e8 d3 d2 ff ff       	call   c0001ab8 <st_dword>
c00047e5:	83 c8 ff             	or     eax,0xffffffff
c00047e8:	47                   	inc    edi
c00047e9:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ee:	e8 7e d8 ff ff       	call   c0002071 <crc32>
c00047f3:	83 ff 5c             	cmp    edi,0x5c
c00047f6:	75 f0                	jne    c00047e8 <create_partition+0x3d6>
c00047f8:	f7 d0                	not    eax
c00047fa:	89 c2                	mov    edx,eax
c00047fc:	89 f0                	mov    eax,esi
c00047fe:	e8 b5 d2 ff ff       	call   c0001ab8 <st_dword>
c0004803:	83 ec 0c             	sub    esp,0xc
c0004806:	6a 01                	push   0x1
c0004808:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000480c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004810:	83 c0 ff             	add    eax,0xffffffff
c0004813:	83 d2 ff             	adc    edx,0xffffffff
c0004816:	52                   	push   edx
c0004817:	50                   	push   eax
c0004818:	53                   	push   ebx
c0004819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000481d:	e8 eb d1 ff ff       	call   c0001a0d <disk_write>
c0004822:	83 c4 20             	add    esp,0x20
c0004825:	85 c0                	test   eax,eax
c0004827:	0f 85 16 fc ff ff    	jne    c0004443 <create_partition+0x31>
c000482d:	31 d2                	xor    edx,edx
c000482f:	89 d8                	mov    eax,ebx
c0004831:	b9 00 02 00 00       	mov    ecx,0x200
c0004836:	e8 9b d2 ff ff       	call   c0001ad6 <mem_set>
c000483b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004841:	b9 10 00 00 00       	mov    ecx,0x10
c0004846:	ba b0 8a 02 c0       	mov    edx,0xc0028ab0
c000484b:	e8 71 d2 ff ff       	call   c0001ac1 <mem_cpy>
c0004850:	e9 21 01 00 00       	jmp    c0004976 <create_partition+0x564>
c0004855:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004859:	b9 05 00 00 00       	mov    ecx,0x5
c000485e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004861:	bf 08 00 00 00       	mov    edi,0x8
c0004866:	89 f8                	mov    eax,edi
c0004868:	31 d2                	xor    edx,edx
c000486a:	0f b6 f0             	movzx  esi,al
c000486d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004870:	f7 f6                	div    esi
c0004872:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004877:	76 0a                	jbe    c0004883 <create_partition+0x471>
c0004879:	d1 e7                	shl    edi,1
c000487b:	49                   	dec    ecx
c000487c:	75 e8                	jne    c0004866 <create_partition+0x454>
c000487e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004883:	b9 00 02 00 00       	mov    ecx,0x200
c0004888:	31 d2                	xor    edx,edx
c000488a:	89 d8                	mov    eax,ebx
c000488c:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004892:	e8 3f d2 ff ff       	call   c0001ad6 <mem_set>
c0004897:	b9 64 00 00 00       	mov    ecx,0x64
c000489c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489f:	31 d2                	xor    edx,edx
c00048a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048a9:	f7 f1                	div    ecx
c00048ab:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b4:	89 f8                	mov    eax,edi
c00048b6:	0f b6 c0             	movzx  eax,al
c00048b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048bd:	e9 80 00 00 00       	jmp    c0004942 <create_partition+0x530>
c00048c2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048c5:	29 cf                	sub    edi,ecx
c00048c7:	89 ca                	mov    edx,ecx
c00048c9:	89 f0                	mov    eax,esi
c00048cb:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d0:	e8 e3 d1 ff ff       	call   c0001ab8 <st_dword>
c00048d5:	8d 46 04             	lea    eax,[esi+0x4]
c00048d8:	89 fa                	mov    edx,edi
c00048da:	83 c6 10             	add    esi,0x10
c00048dd:	e8 d6 d1 ff ff       	call   c0001ab8 <st_dword>
c00048e2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048e6:	31 d2                	xor    edx,edx
c00048e8:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048eb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ef:	89 c8                	mov    eax,ecx
c00048f1:	01 f9                	add    ecx,edi
c00048f3:	f7 f5                	div    ebp
c00048f5:	89 d5                	mov    ebp,edx
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	45                   	inc    ebp
c00048fa:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048fe:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004901:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004904:	89 c2                	mov    edx,eax
c0004906:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004909:	c1 ea 02             	shr    edx,0x2
c000490c:	83 e2 c0             	and    edx,0xffffffc0
c000490f:	09 ea                	or     edx,ebp
c0004911:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004916:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004919:	31 d2                	xor    edx,edx
c000491b:	f7 f5                	div    ebp
c000491d:	89 d7                	mov    edi,edx
c000491f:	31 d2                	xor    edx,edx
c0004921:	47                   	inc    edi
c0004922:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004926:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004929:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000492c:	89 c5                	mov    ebp,eax
c000492e:	c1 ed 02             	shr    ebp,0x2
c0004931:	83 e5 c0             	and    ebp,0xffffffc0
c0004934:	09 ef                	or     edi,ebp
c0004936:	89 fa                	mov    edx,edi
c0004938:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000493b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004940:	74 34                	je     c0004976 <create_partition+0x564>
c0004942:	85 c9                	test   ecx,ecx
c0004944:	74 30                	je     c0004976 <create_partition+0x564>
c0004946:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004949:	76 2b                	jbe    c0004976 <create_partition+0x564>
c000494b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000494f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004953:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004956:	83 ff 64             	cmp    edi,0x64
c0004959:	76 4b                	jbe    c00049a6 <create_partition+0x594>
c000495b:	89 f8                	mov    eax,edi
c000495d:	01 c8                	add    eax,ecx
c000495f:	0f 82 5d ff ff ff    	jb     c00048c2 <create_partition+0x4b0>
c0004965:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004968:	0f 87 54 ff ff ff    	ja     c00048c2 <create_partition+0x4b0>
c000496e:	85 ff                	test   edi,edi
c0004970:	0f 85 51 ff ff ff    	jne    c00048c7 <create_partition+0x4b5>
c0004976:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000497c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004981:	e8 2e d1 ff ff       	call   c0001ab4 <st_word>
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	6a 01                	push   0x1
c000498b:	6a 00                	push   0x0
c000498d:	6a 00                	push   0x0
c000498f:	53                   	push   ebx
c0004990:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004994:	e8 74 d0 ff ff       	call   c0001a0d <disk_write>
c0004999:	83 c4 20             	add    esp,0x20
c000499c:	85 c0                	test   eax,eax
c000499e:	0f 95 c0             	setne  al
c00049a1:	0f b6 c0             	movzx  eax,al
c00049a4:	eb 0e                	jmp    c00049b4 <create_partition+0x5a2>
c00049a6:	74 07                	je     c00049af <create_partition+0x59d>
c00049a8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049ad:	eb ac                	jmp    c000495b <create_partition+0x549>
c00049af:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049b2:	eb a7                	jmp    c000495b <create_partition+0x549>
c00049b4:	83 c4 5c             	add    esp,0x5c
c00049b7:	5b                   	pop    ebx
c00049b8:	5e                   	pop    esi
c00049b9:	5f                   	pop    edi
c00049ba:	5d                   	pop    ebp
c00049bb:	c3                   	ret    

c00049bc <get_fileinfo>:
c00049bc:	55                   	push   ebp
c00049bd:	57                   	push   edi
c00049be:	56                   	push   esi
c00049bf:	53                   	push   ebx
c00049c0:	83 ec 1c             	sub    esp,0x1c
c00049c3:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049c9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049cd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d0:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d3:	0f 84 dc 01 00 00    	je     c0004bb5 <get_fileinfo+0x1f9>
c00049d9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049dc:	75 0f                	jne    c00049ed <get_fileinfo+0x31>
c00049de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e1:	83 c4 1c             	add    esp,0x1c
c00049e4:	5b                   	pop    ebx
c00049e5:	5e                   	pop    esi
c00049e6:	5f                   	pop    edi
c00049e7:	5d                   	pop    ebp
c00049e8:	e9 58 d5 ff ff       	jmp    c0001f45 <get_xfileinfo>
c00049ed:	89 d3                	mov    ebx,edx
c00049ef:	89 c6                	mov    esi,eax
c00049f1:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f5:	74 6a                	je     c0004a61 <get_fileinfo+0xa5>
c00049f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ff:	31 ed                	xor    ebp,ebp
c0004a01:	31 ff                	xor    edi,edi
c0004a03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a0e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a12:	66 85 d2             	test   dx,dx
c0004a15:	74 3e                	je     c0004a55 <get_fileinfo+0x99>
c0004a17:	66 85 ed             	test   bp,bp
c0004a1a:	75 0c                	jne    c0004a28 <get_fileinfo+0x6c>
c0004a1c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a22:	66 3d ff 07          	cmp    ax,0x7ff
c0004a26:	76 22                	jbe    c0004a4a <get_fileinfo+0x8e>
c0004a28:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	29 f9                	sub    ecx,edi
c0004a31:	c1 e0 10             	shl    eax,0x10
c0004a34:	09 d0                	or     eax,edx
c0004a36:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a3a:	e8 a3 d1 ff ff       	call   c0001be2 <put_utf>
c0004a3f:	84 c0                	test   al,al
c0004a41:	74 10                	je     c0004a53 <get_fileinfo+0x97>
c0004a43:	0f b6 c0             	movzx  eax,al
c0004a46:	31 d2                	xor    edx,edx
c0004a48:	01 c7                	add    edi,eax
c0004a4a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a4f:	89 d5                	mov    ebp,edx
c0004a51:	eb b0                	jmp    c0004a03 <get_fileinfo+0x47>
c0004a53:	31 ff                	xor    edi,edi
c0004a55:	66 85 ed             	test   bp,bp
c0004a58:	74 02                	je     c0004a5c <get_fileinfo+0xa0>
c0004a5a:	31 ff                	xor    edi,edi
c0004a5c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a61:	31 ff                	xor    edi,edi
c0004a63:	31 c9                	xor    ecx,ecx
c0004a65:	83 f9 0a             	cmp    ecx,0xa
c0004a68:	0f 87 ad 00 00 00    	ja     c0004b1b <get_fileinfo+0x15f>
c0004a6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a71:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a74:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a78:	66 83 fa 20          	cmp    dx,0x20
c0004a7c:	0f 84 92 00 00 00    	je     c0004b14 <get_fileinfo+0x158>
c0004a82:	66 83 fa 05          	cmp    dx,0x5
c0004a86:	75 05                	jne    c0004a8d <get_fileinfo+0xd1>
c0004a88:	ba e5 00 00 00       	mov    edx,0xe5
c0004a8d:	83 ff 0b             	cmp    edi,0xb
c0004a90:	77 0b                	ja     c0004a9d <get_fileinfo+0xe1>
c0004a92:	83 fd 09             	cmp    ebp,0x9
c0004a95:	75 06                	jne    c0004a9d <get_fileinfo+0xe1>
c0004a97:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a9c:	47                   	inc    edi
c0004a9d:	0f b7 c2             	movzx  eax,dx
c0004aa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa4:	e8 6d d0 ff ff       	call   c0001b16 <dbc_1st>
c0004aa9:	85 c0                	test   eax,eax
c0004aab:	74 2f                	je     c0004adc <get_fileinfo+0x120>
c0004aad:	83 fd 08             	cmp    ebp,0x8
c0004ab0:	74 2a                	je     c0004adc <get_fileinfo+0x120>
c0004ab2:	83 fd 0b             	cmp    ebp,0xb
c0004ab5:	74 25                	je     c0004adc <get_fileinfo+0x120>
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004abe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac2:	e8 52 d0 ff ff       	call   c0001b19 <dbc_2nd>
c0004ac7:	85 c0                	test   eax,eax
c0004ac9:	74 11                	je     c0004adc <get_fileinfo+0x120>
c0004acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004acf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ad4:	c1 e2 08             	shl    edx,0x8
c0004ad7:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ada:	09 c2                	or     edx,eax
c0004adc:	0f b7 d2             	movzx  edx,dx
c0004adf:	50                   	push   eax
c0004ae0:	50                   	push   eax
c0004ae1:	68 b5 01 00 00       	push   0x1b5
c0004ae6:	52                   	push   edx
c0004ae7:	e8 46 38 00 00       	call   c0008332 <ff_oem2uni>
c0004aec:	83 c4 10             	add    esp,0x10
c0004aef:	66 85 c0             	test   ax,ax
c0004af2:	75 04                	jne    c0004af8 <get_fileinfo+0x13c>
c0004af4:	31 ff                	xor    edi,edi
c0004af6:	eb 23                	jmp    c0004b1b <get_fileinfo+0x15f>
c0004af8:	b9 0c 00 00 00       	mov    ecx,0xc
c0004afd:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b01:	29 f9                	sub    ecx,edi
c0004b03:	0f b7 c0             	movzx  eax,ax
c0004b06:	e8 d7 d0 ff ff       	call   c0001be2 <put_utf>
c0004b0b:	84 c0                	test   al,al
c0004b0d:	74 e5                	je     c0004af4 <get_fileinfo+0x138>
c0004b0f:	0f b6 c0             	movzx  eax,al
c0004b12:	01 c7                	add    edi,eax
c0004b14:	89 e9                	mov    ecx,ebp
c0004b16:	e9 4a ff ff ff       	jmp    c0004a65 <get_fileinfo+0xa9>
c0004b1b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b20:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b24:	75 54                	jne    c0004b7a <get_fileinfo+0x1be>
c0004b26:	85 ff                	test   edi,edi
c0004b28:	75 0b                	jne    c0004b35 <get_fileinfo+0x179>
c0004b2a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b2e:	ba 01 00 00 00       	mov    edx,0x1
c0004b33:	eb 33                	jmp    c0004b68 <get_fileinfo+0x1ac>
c0004b35:	b1 08                	mov    cl,0x8
c0004b37:	31 d2                	xor    edx,edx
c0004b39:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b3f:	84 c0                	test   al,al
c0004b41:	74 25                	je     c0004b68 <get_fileinfo+0x1ac>
c0004b43:	66 83 f8 2e          	cmp    ax,0x2e
c0004b47:	74 16                	je     c0004b5f <get_fileinfo+0x1a3>
c0004b49:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b4c:	66 83 ff 19          	cmp    di,0x19
c0004b50:	77 0f                	ja     c0004b61 <get_fileinfo+0x1a5>
c0004b52:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b55:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b58:	74 07                	je     c0004b61 <get_fileinfo+0x1a5>
c0004b5a:	83 c0 20             	add    eax,0x20
c0004b5d:	eb 02                	jmp    c0004b61 <get_fileinfo+0x1a5>
c0004b5f:	b1 10                	mov    cl,0x10
c0004b61:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b65:	42                   	inc    edx
c0004b66:	eb d1                	jmp    c0004b39 <get_fileinfo+0x17d>
c0004b68:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b6d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b70:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b74:	75 04                	jne    c0004b7a <get_fileinfo+0x1be>
c0004b76:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b7a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b80:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b86:	83 c0 1c             	add    eax,0x1c
c0004b89:	e8 c1 ce ff ff       	call   c0001a4f <ld_dword>
c0004b8e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b95:	89 03                	mov    DWORD PTR [ebx],eax
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	83 c0 16             	add    eax,0x16
c0004b9d:	e8 a0 ce ff ff       	call   c0001a42 <ld_word>
c0004ba2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba9:	83 c0 18             	add    eax,0x18
c0004bac:	e8 91 ce ff ff       	call   c0001a42 <ld_word>
c0004bb1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb5:	83 c4 1c             	add    esp,0x1c
c0004bb8:	5b                   	pop    ebx
c0004bb9:	5e                   	pop    esi
c0004bba:	5f                   	pop    edi
c0004bbb:	5d                   	pop    ebp
c0004bbc:	c3                   	ret    

c0004bbd <ld_clust.isra.0>:
c0004bbd:	56                   	push   esi
c0004bbe:	89 c6                	mov    esi,eax
c0004bc0:	53                   	push   ebx
c0004bc1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc4:	89 d3                	mov    ebx,edx
c0004bc6:	e8 77 ce ff ff       	call   c0001a42 <ld_word>
c0004bcb:	0f b7 c8             	movzx  ecx,ax
c0004bce:	89 f0                	mov    eax,esi
c0004bd0:	3c 03                	cmp    al,0x3
c0004bd2:	75 0d                	jne    c0004be1 <ld_clust.isra.0+0x24>
c0004bd4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd7:	e8 66 ce ff ff       	call   c0001a42 <ld_word>
c0004bdc:	c1 e0 10             	shl    eax,0x10
c0004bdf:	09 c1                	or     ecx,eax
c0004be1:	89 c8                	mov    eax,ecx
c0004be3:	5b                   	pop    ebx
c0004be4:	5e                   	pop    esi
c0004be5:	c3                   	ret    

c0004be6 <st_clust.isra.1>:
c0004be6:	56                   	push   esi
c0004be7:	89 c6                	mov    esi,eax
c0004be9:	53                   	push   ebx
c0004bea:	89 d3                	mov    ebx,edx
c0004bec:	0f b7 d1             	movzx  edx,cx
c0004bef:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf2:	e8 bd ce ff ff       	call   c0001ab4 <st_word>
c0004bf7:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bfa:	75 0f                	jne    c0004c0b <st_clust.isra.1+0x25>
c0004bfc:	c1 e9 10             	shr    ecx,0x10
c0004bff:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c02:	89 ca                	mov    edx,ecx
c0004c04:	5b                   	pop    ebx
c0004c05:	5e                   	pop    esi
c0004c06:	e9 a9 ce ff ff       	jmp    c0001ab4 <st_word>
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	c3                   	ret    

c0004c0e <init_alloc_info.isra.2>:
c0004c0e:	56                   	push   esi
c0004c0f:	53                   	push   ebx
c0004c10:	89 c6                	mov    esi,eax
c0004c12:	89 d3                	mov    ebx,edx
c0004c14:	51                   	push   ecx
c0004c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c17:	83 c0 34             	add    eax,0x34
c0004c1a:	e8 30 ce ff ff       	call   c0001a4f <ld_dword>
c0004c1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c22:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c24:	83 c0 38             	add    eax,0x38
c0004c27:	e8 3b ce ff ff       	call   c0001a67 <ld_qword>
c0004c2c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c2f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c32:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c34:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c37:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3e:	83 e0 02             	and    eax,0x2
c0004c41:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c44:	5b                   	pop    ebx
c0004c45:	5b                   	pop    ebx
c0004c46:	5e                   	pop    esi
c0004c47:	c3                   	ret    

c0004c48 <follow_path>:
c0004c48:	56                   	push   esi
c0004c49:	53                   	push   ebx
c0004c4a:	89 c3                	mov    ebx,eax
c0004c4c:	83 ec 14             	sub    esp,0x14
c0004c4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c53:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c59:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c5b:	80 fa 5c             	cmp    dl,0x5c
c0004c5e:	75 07                	jne    c0004c67 <follow_path+0x1f>
c0004c60:	40                   	inc    eax
c0004c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c65:	eb ee                	jmp    c0004c55 <follow_path+0xd>
c0004c67:	80 fa 2f             	cmp    dl,0x2f
c0004c6a:	74 f4                	je     c0004c60 <follow_path+0x18>
c0004c6c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c73:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c7d:	77 52                	ja     c0004cd1 <follow_path+0x89>
c0004c7f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c83:	31 d2                	xor    edx,edx
c0004c85:	89 d8                	mov    eax,ebx
c0004c87:	e8 12 e3 ff ff       	call   c0002f9e <dir_sdi>
c0004c8c:	eb 7c                	jmp    c0004d0a <follow_path+0xc2>
c0004c8e:	89 d8                	mov    eax,ebx
c0004c90:	e8 6e f2 ff ff       	call   c0003f03 <dir_find>
c0004c95:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c98:	85 c0                	test   eax,eax
c0004c9a:	75 46                	jne    c0004ce2 <follow_path+0x9a>
c0004c9c:	80 e2 04             	and    dl,0x4
c0004c9f:	75 69                	jne    c0004d0a <follow_path+0xc2>
c0004ca1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca5:	74 5e                	je     c0004d05 <follow_path+0xbd>
c0004ca7:	8a 06                	mov    al,BYTE PTR [esi]
c0004ca9:	3c 04                	cmp    al,0x4
c0004cab:	75 41                	jne    c0004cee <follow_path+0xa6>
c0004cad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cb7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cba:	30 c0                	xor    al,al
c0004cbc:	09 d0                	or     eax,edx
c0004cbe:	89 da                	mov    edx,ebx
c0004cc0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cc9:	8d 46 10             	lea    eax,[esi+0x10]
c0004ccc:	e8 3d ff ff ff       	call   c0004c0e <init_alloc_info.isra.2>
c0004cd1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	e8 a9 ed ff ff       	call   c0003a85 <create_name>
c0004cdc:	85 c0                	test   eax,eax
c0004cde:	74 ae                	je     c0004c8e <follow_path+0x46>
c0004ce0:	eb 28                	jmp    c0004d0a <follow_path+0xc2>
c0004ce2:	83 f8 04             	cmp    eax,0x4
c0004ce5:	75 23                	jne    c0004d0a <follow_path+0xc2>
c0004ce7:	80 e2 04             	and    dl,0x4
c0004cea:	74 19                	je     c0004d05 <follow_path+0xbd>
c0004cec:	eb 1c                	jmp    c0004d0a <follow_path+0xc2>
c0004cee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf1:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cf7:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cfb:	e8 bd fe ff ff       	call   c0004bbd <ld_clust.isra.0>
c0004d00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d03:	eb cc                	jmp    c0004cd1 <follow_path+0x89>
c0004d05:	b8 05 00 00 00       	mov    eax,0x5
c0004d0a:	83 c4 14             	add    esp,0x14
c0004d0d:	5b                   	pop    ebx
c0004d0e:	5e                   	pop    esi
c0004d0f:	c3                   	ret    

c0004d10 <f_mount>:
c0004d10:	53                   	push   ebx
c0004d11:	83 ec 18             	sub    esp,0x18
c0004d14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d18:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d24:	e8 fb d2 ff ff       	call   c0002024 <get_ldnumber>
c0004d29:	89 c2                	mov    edx,eax
c0004d2b:	b8 0b 00 00 00       	mov    eax,0xb
c0004d30:	85 d2                	test   edx,edx
c0004d32:	78 39                	js     c0004d6d <f_mount+0x5d>
c0004d34:	8b 04 95 e0 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2620]
c0004d3b:	85 c0                	test   eax,eax
c0004d3d:	74 03                	je     c0004d42 <f_mount+0x32>
c0004d3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d46:	85 c0                	test   eax,eax
c0004d48:	74 03                	je     c0004d4d <f_mount+0x3d>
c0004d4a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d51:	89 04 95 e0 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2620],eax
c0004d58:	31 c0                	xor    eax,eax
c0004d5a:	84 db                	test   bl,bl
c0004d5c:	74 0f                	je     c0004d6d <f_mount+0x5d>
c0004d5e:	31 c9                	xor    ecx,ecx
c0004d60:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d64:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d68:	e8 65 d7 ff ff       	call   c00024d2 <mount_volume>
c0004d6d:	83 c4 18             	add    esp,0x18
c0004d70:	5b                   	pop    ebx
c0004d71:	c3                   	ret    

c0004d72 <f_open>:
c0004d72:	55                   	push   ebp
c0004d73:	bd 09 00 00 00       	mov    ebp,0x9
c0004d78:	57                   	push   edi
c0004d79:	56                   	push   esi
c0004d7a:	53                   	push   ebx
c0004d7b:	83 ec 7c             	sub    esp,0x7c
c0004d7e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d85:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 10 04 00 00    	je     c00051a4 <f_open+0x432>
c0004d94:	89 fe                	mov    esi,edi
c0004d96:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d9a:	83 e6 3f             	and    esi,0x3f
c0004d9d:	89 f0                	mov    eax,esi
c0004d9f:	0f b6 c8             	movzx  ecx,al
c0004da2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004da9:	e8 24 d7 ff ff       	call   c00024d2 <mount_volume>
c0004dae:	89 c5                	mov    ebp,eax
c0004db0:	85 c0                	test   eax,eax
c0004db2:	0f 85 e6 03 00 00    	jne    c000519e <f_open+0x42c>
c0004db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dbc:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc5:	83 ec 0c             	sub    esp,0xc
c0004dc8:	68 60 04 00 00       	push   0x460
c0004dcd:	e8 a3 34 00 00       	call   c0008275 <ff_memalloc>
c0004dd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd6:	83 c4 10             	add    esp,0x10
c0004dd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dde:	0f 84 c0 03 00 00    	je     c00051a4 <f_open+0x432>
c0004de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dec:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df2:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004df8:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e03:	e8 40 fe ff ff       	call   c0004c48 <follow_path>
c0004e08:	89 c5                	mov    ebp,eax
c0004e0a:	85 c0                	test   eax,eax
c0004e0c:	75 0c                	jne    c0004e1a <f_open+0xa8>
c0004e0e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e13:	79 05                	jns    c0004e1a <f_open+0xa8>
c0004e15:	bd 06 00 00 00       	mov    ebp,0x6
c0004e1a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e20:	0f 84 84 01 00 00    	je     c0004faa <f_open+0x238>
c0004e26:	85 ed                	test   ebp,ebp
c0004e28:	74 20                	je     c0004e4a <f_open+0xd8>
c0004e2a:	83 fd 04             	cmp    ebp,0x4
c0004e2d:	0f 85 58 03 00 00    	jne    c000518b <f_open+0x419>
c0004e33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e37:	83 ce 08             	or     esi,0x8
c0004e3a:	e8 8a f2 ff ff       	call   c00040c9 <dir_register>
c0004e3f:	89 c5                	mov    ebp,eax
c0004e41:	85 c0                	test   eax,eax
c0004e43:	74 2f                	je     c0004e74 <f_open+0x102>
c0004e45:	e9 41 03 00 00       	jmp    c000518b <f_open+0x419>
c0004e4a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e4f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e54:	0f 85 31 03 00 00    	jne    c000518b <f_open+0x419>
c0004e5a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e5f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e65:	0f 85 20 03 00 00    	jne    c000518b <f_open+0x419>
c0004e6b:	83 e7 08             	and    edi,0x8
c0004e6e:	0f 84 65 01 00 00    	je     c0004fd9 <f_open+0x267>
c0004e74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e78:	8a 02                	mov    al,BYTE PTR [edx]
c0004e7a:	3c 04                	cmp    al,0x4
c0004e7c:	0f 85 97 00 00 00    	jne    c0004f19 <f_open+0x1a7>
c0004e82:	8d 42 10             	lea    eax,[edx+0x10]
c0004e85:	89 13                	mov    DWORD PTR [ebx],edx
c0004e87:	89 da                	mov    edx,ebx
c0004e89:	e8 80 fd ff ff       	call   c0004c0e <init_alloc_info.isra.2>
c0004e8e:	31 d2                	xor    edx,edx
c0004e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e94:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 02             	add    eax,0x2
c0004e9f:	e8 32 cc ff ff       	call   c0001ad6 <mem_set>
c0004ea4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea9:	31 d2                	xor    edx,edx
c0004eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eaf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb2:	83 c0 26             	add    eax,0x26
c0004eb5:	e8 1c cc ff ff       	call   c0001ad6 <mem_set>
c0004eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecd:	83 c0 08             	add    eax,0x8
c0004ed0:	e8 e3 cb ff ff       	call   c0001ab8 <st_dword>
c0004ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edc:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee4:	e8 b7 ea ff ff       	call   c00039a0 <store_xdir>
c0004ee9:	89 c5                	mov    ebp,eax
c0004eeb:	85 c0                	test   eax,eax
c0004eed:	0f 85 98 02 00 00    	jne    c000518b <f_open+0x419>
c0004ef3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef6:	85 d2                	test   edx,edx
c0004ef8:	0f 84 db 00 00 00    	je     c0004fd9 <f_open+0x267>
c0004efe:	31 c9                	xor    ecx,ecx
c0004f00:	89 d8                	mov    eax,ebx
c0004f02:	e8 8e e3 ff ff       	call   c0003295 <remove_chain>
c0004f07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f0b:	89 c5                	mov    ebp,eax
c0004f0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f10:	48                   	dec    eax
c0004f11:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f14:	e9 b8 00 00 00       	jmp    c0004fd1 <f_open+0x25f>
c0004f19:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f1d:	89 ea                	mov    edx,ebp
c0004f1f:	e8 99 fc ff ff       	call   c0004bbd <ld_clust.isra.0>
c0004f24:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f29:	89 c7                	mov    edi,eax
c0004f2b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f2e:	e8 85 cb ff ff       	call   c0001ab8 <st_dword>
c0004f33:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f41:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f45:	e8 9c fc ff ff       	call   c0004be6 <st_clust.isra.1>
c0004f4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4e:	31 d2                	xor    edx,edx
c0004f50:	83 c0 1c             	add    eax,0x1c
c0004f53:	e8 60 cb ff ff       	call   c0001ab8 <st_dword>
c0004f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5c:	85 ff                	test   edi,edi
c0004f5e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f62:	74 75                	je     c0004fd9 <f_open+0x267>
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	31 c9                	xor    ecx,ecx
c0004f6a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f6d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f78:	89 fa                	mov    edx,edi
c0004f7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7e:	e8 12 e3 ff ff       	call   c0003295 <remove_chain>
c0004f83:	89 c5                	mov    ebp,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	0f 85 fe 01 00 00    	jne    c000518b <f_open+0x419>
c0004f8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f99:	4f                   	dec    edi
c0004f9a:	e8 81 d2 ff ff       	call   c0002220 <move_window>
c0004f9f:	89 c5                	mov    ebp,eax
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fa8:	eb 27                	jmp    c0004fd1 <f_open+0x25f>
c0004faa:	85 ed                	test   ebp,ebp
c0004fac:	0f 85 d9 01 00 00    	jne    c000518b <f_open+0x419>
c0004fb2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb6:	bd 04 00 00 00       	mov    ebp,0x4
c0004fbb:	a8 10                	test   al,0x10
c0004fbd:	0f 85 c8 01 00 00    	jne    c000518b <f_open+0x419>
c0004fc3:	83 e7 02             	and    edi,0x2
c0004fc6:	74 11                	je     c0004fd9 <f_open+0x267>
c0004fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0004fcd:	a8 01                	test   al,0x1
c0004fcf:	eb 02                	jmp    c0004fd3 <f_open+0x261>
c0004fd1:	85 ed                	test   ebp,ebp
c0004fd3:	0f 85 b2 01 00 00    	jne    c000518b <f_open+0x419>
c0004fd9:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fdf:	74 03                	je     c0004fe4 <f_open+0x272>
c0004fe1:	83 ce 40             	or     esi,0x40
c0004fe4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fe8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004feb:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fee:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff1:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ff4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff8:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ffb:	8a 02                	mov    al,BYTE PTR [edx]
c0004ffd:	3c 04                	cmp    al,0x4
c0004fff:	75 2a                	jne    c000502b <f_open+0x2b9>
c0005001:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005005:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000500a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000500d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005011:	30 c0                	xor    al,al
c0005013:	09 c8                	or     eax,ecx
c0005015:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005018:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000501c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000501f:	8d 42 10             	lea    eax,[edx+0x10]
c0005022:	89 da                	mov    edx,ebx
c0005024:	e8 e5 fb ff ff       	call   c0004c0e <init_alloc_info.isra.2>
c0005029:	eb 1c                	jmp    c0005047 <f_open+0x2d5>
c000502b:	89 fa                	mov    edx,edi
c000502d:	e8 8b fb ff ff       	call   c0004bbd <ld_clust.isra.0>
c0005032:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005035:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005038:	e8 12 ca ff ff       	call   c0001a4f <ld_dword>
c000503d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005044:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000504b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005052:	89 03                	mov    DWORD PTR [ebx],eax
c0005054:	31 d2                	xor    edx,edx
c0005056:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000505a:	b9 00 02 00 00       	mov    ecx,0x200
c000505f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005063:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005067:	89 f0                	mov    eax,esi
c0005069:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005070:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005073:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000507a:	8d 43 50             	lea    eax,[ebx+0x50]
c000507d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005084:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000508b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000508f:	e8 42 ca ff ff       	call   c0001ad6 <mem_set>
c0005094:	83 e6 20             	and    esi,0x20
c0005097:	75 07                	jne    c00050a0 <f_open+0x32e>
c0005099:	31 ed                	xor    ebp,ebp
c000509b:	e9 eb 00 00 00       	jmp    c000518b <f_open+0x419>
c00050a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b6:	74 e1                	je     c0005099 <f_open+0x327>
c00050b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ca:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050cd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d1:	31 ff                	xor    edi,edi
c00050d3:	c1 e5 09             	shl    ebp,0x9
c00050d6:	89 ee                	mov    esi,ebp
c00050d8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050dc:	89 f8                	mov    eax,edi
c00050de:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e2:	73 22                	jae    c0005106 <f_open+0x394>
c00050e4:	89 d8                	mov    eax,ebx
c00050e6:	e8 bd dc ff ff       	call   c0002da8 <get_fat>
c00050eb:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ef:	89 c2                	mov    edx,eax
c00050f1:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f5:	83 f8 01             	cmp    eax,0x1
c00050f8:	76 10                	jbe    c000510a <f_open+0x398>
c00050fa:	83 f8 ff             	cmp    eax,0xffffffff
c00050fd:	75 d9                	jne    c00050d8 <f_open+0x366>
c00050ff:	bd 01 00 00 00       	mov    ebp,0x1
c0005104:	eb 09                	jmp    c000510f <f_open+0x39d>
c0005106:	31 ed                	xor    ebp,ebp
c0005108:	eb 05                	jmp    c000510f <f_open+0x39d>
c000510a:	bd 02 00 00 00       	mov    ebp,0x2
c000510f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005112:	85 ed                	test   ebp,ebp
c0005114:	75 75                	jne    c000518b <f_open+0x419>
c0005116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000511a:	25 ff 01 00 00       	and    eax,0x1ff
c000511f:	0f 84 74 ff ff ff    	je     c0005099 <f_open+0x327>
c0005125:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005129:	bd 02 00 00 00       	mov    ebp,0x2
c000512e:	89 c8                	mov    eax,ecx
c0005130:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005134:	e8 a2 cb ff ff       	call   c0001cdb <clst2sect>
c0005139:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000513d:	89 d7                	mov    edi,edx
c000513f:	09 c7                	or     edi,eax
c0005141:	74 48                	je     c000518b <f_open+0x419>
c0005143:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005147:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000514b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005153:	0f ac fe 09          	shrd   esi,edi,0x9
c0005157:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000515b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000515f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005162:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005166:	83 ec 0c             	sub    esp,0xc
c0005169:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000516c:	6a 01                	push   0x1
c000516e:	52                   	push   edx
c000516f:	50                   	push   eax
c0005170:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005174:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005178:	50                   	push   eax
c0005179:	e8 79 c8 ff ff       	call   c00019f7 <disk_read>
c000517e:	83 c4 20             	add    esp,0x20
c0005181:	85 c0                	test   eax,eax
c0005183:	0f 95 c0             	setne  al
c0005186:	0f b6 c0             	movzx  eax,al
c0005189:	89 c5                	mov    ebp,eax
c000518b:	83 ec 0c             	sub    esp,0xc
c000518e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005192:	e8 f4 30 00 00       	call   c000828b <ff_memfree>
c0005197:	83 c4 10             	add    esp,0x10
c000519a:	85 ed                	test   ebp,ebp
c000519c:	74 06                	je     c00051a4 <f_open+0x432>
c000519e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a4:	83 c4 7c             	add    esp,0x7c
c00051a7:	89 e8                	mov    eax,ebp
c00051a9:	5b                   	pop    ebx
c00051aa:	5e                   	pop    esi
c00051ab:	5f                   	pop    edi
c00051ac:	5d                   	pop    ebp
c00051ad:	c3                   	ret    

c00051ae <f_read>:
c00051ae:	55                   	push   ebp
c00051af:	57                   	push   edi
c00051b0:	56                   	push   esi
c00051b1:	53                   	push   ebx
c00051b2:	83 ec 2c             	sub    esp,0x2c
c00051b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c7:	89 d8                	mov    eax,ebx
c00051c9:	e8 77 cf ff ff       	call   c0002145 <validate>
c00051ce:	89 c5                	mov    ebp,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 4c 02 00 00    	jne    c0005424 <f_read+0x276>
c00051d8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051dc:	85 ed                	test   ebp,ebp
c00051de:	0f 85 40 02 00 00    	jne    c0005424 <f_read+0x276>
c00051e4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051e8:	0f 84 31 02 00 00    	je     c000541f <f_read+0x271>
c00051ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051f7:	bf 00 00 00 00       	mov    edi,0x0
c00051fc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ff:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005203:	89 d1                	mov    ecx,edx
c0005205:	19 f9                	sbb    ecx,edi
c0005207:	0f 83 cf 00 00 00    	jae    c00052dc <f_read+0x12e>
c000520d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005211:	e9 c6 00 00 00       	jmp    c00052dc <f_read+0x12e>
c0005216:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005219:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000521c:	89 d0                	mov    eax,edx
c000521e:	25 ff 01 00 00       	and    eax,0x1ff
c0005223:	0f 85 c9 01 00 00    	jne    c00053f2 <f_read+0x244>
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	89 d6                	mov    esi,edx
c000522f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005233:	89 cf                	mov    edi,ecx
c0005235:	48                   	dec    eax
c0005236:	0f ac fe 09          	shrd   esi,edi,0x9
c000523a:	21 f0                	and    eax,esi
c000523c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005240:	0f 84 a6 00 00 00    	je     c00052ec <f_read+0x13e>
c0005246:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000524d:	89 c8                	mov    eax,ecx
c000524f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005252:	e8 84 ca ff ff       	call   c0001cdb <clst2sect>
c0005257:	89 d7                	mov    edi,edx
c0005259:	09 c7                	or     edi,eax
c000525b:	0f 84 b4 00 00 00    	je     c0005315 <f_read+0x167>
c0005261:	31 ff                	xor    edi,edi
c0005263:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005267:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000526a:	01 c6                	add    esi,eax
c000526c:	11 d7                	adc    edi,edx
c000526e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005276:	0f 86 fd 00 00 00    	jbe    c0005379 <f_read+0x1cb>
c000527c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005280:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005284:	c1 e8 09             	shr    eax,0x9
c0005287:	89 04 24             	mov    DWORD PTR [esp],eax
c000528a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000528e:	03 14 24             	add    edx,DWORD PTR [esp]
c0005291:	39 c2                	cmp    edx,eax
c0005293:	76 07                	jbe    c000529c <f_read+0xee>
c0005295:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005299:	89 04 24             	mov    DWORD PTR [esp],eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a3:	57                   	push   edi
c00052a4:	56                   	push   esi
c00052a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ad:	50                   	push   eax
c00052ae:	e8 44 c7 ff ff       	call   c00019f7 <disk_read>
c00052b3:	83 c4 20             	add    esp,0x20
c00052b6:	85 c0                	test   eax,eax
c00052b8:	75 6e                	jne    c0005328 <f_read+0x17a>
c00052ba:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052be:	78 7e                	js     c000533e <f_read+0x190>
c00052c0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c3:	c1 e6 09             	shl    esi,0x9
c00052c6:	31 ff                	xor    edi,edi
c00052c8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d4:	01 30                	add    DWORD PTR [eax],esi
c00052d6:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052d9:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052dc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e1:	0f 85 2f ff ff ff    	jne    c0005216 <f_read+0x68>
c00052e7:	e9 38 01 00 00       	jmp    c0005424 <f_read+0x276>
c00052ec:	89 c8                	mov    eax,ecx
c00052ee:	09 d0                	or     eax,edx
c00052f0:	75 05                	jne    c00052f7 <f_read+0x149>
c00052f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f5:	eb 19                	jmp    c0005310 <f_read+0x162>
c00052f7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052fb:	74 09                	je     c0005306 <f_read+0x158>
c00052fd:	89 d8                	mov    eax,ebx
c00052ff:	e8 f8 c9 ff ff       	call   c0001cfc <clmt_clust>
c0005304:	eb 0a                	jmp    c0005310 <f_read+0x162>
c0005306:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005309:	89 d8                	mov    eax,ebx
c000530b:	e8 98 da ff ff       	call   c0002da8 <get_fat>
c0005310:	83 f8 01             	cmp    eax,0x1
c0005313:	77 0e                	ja     c0005323 <f_read+0x175>
c0005315:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005319:	bd 02 00 00 00       	mov    ebp,0x2
c000531e:	e9 01 01 00 00       	jmp    c0005424 <f_read+0x276>
c0005323:	83 f8 ff             	cmp    eax,0xffffffff
c0005326:	75 0e                	jne    c0005336 <f_read+0x188>
c0005328:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000532c:	bd 01 00 00 00       	mov    ebp,0x1
c0005331:	e9 ee 00 00 00       	jmp    c0005424 <f_read+0x276>
c0005336:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005339:	e9 08 ff ff ff       	jmp    c0005246 <f_read+0x98>
c000533e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005341:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005344:	29 f0                	sub    eax,esi
c0005346:	19 fa                	sbb    edx,edi
c0005348:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000534b:	89 d7                	mov    edi,edx
c000534d:	ba 00 00 00 00       	mov    edx,0x0
c0005352:	89 f9                	mov    ecx,edi
c0005354:	19 d1                	sbb    ecx,edx
c0005356:	0f 83 64 ff ff ff    	jae    c00052c0 <f_read+0x112>
c000535c:	89 c7                	mov    edi,eax
c000535e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005361:	c1 e7 09             	shl    edi,0x9
c0005364:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005368:	b9 00 02 00 00       	mov    ecx,0x200
c000536d:	01 f8                	add    eax,edi
c000536f:	e8 4d c7 ff ff       	call   c0001ac1 <mem_cpy>
c0005374:	e9 47 ff ff ff       	jmp    c00052c0 <f_read+0x112>
c0005379:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000537c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005382:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005386:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000538a:	75 05                	jne    c0005391 <f_read+0x1e3>
c000538c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000538f:	74 5b                	je     c00053ec <f_read+0x23e>
c0005391:	8d 43 50             	lea    eax,[ebx+0x50]
c0005394:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005398:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000539c:	79 2a                	jns    c00053c8 <f_read+0x21a>
c000539e:	83 ec 0c             	sub    esp,0xc
c00053a1:	6a 01                	push   0x1
c00053a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b3:	50                   	push   eax
c00053b4:	e8 54 c6 ff ff       	call   c0001a0d <disk_write>
c00053b9:	83 c4 20             	add    esp,0x20
c00053bc:	85 c0                	test   eax,eax
c00053be:	0f 85 64 ff ff ff    	jne    c0005328 <f_read+0x17a>
c00053c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053c8:	83 ec 0c             	sub    esp,0xc
c00053cb:	6a 01                	push   0x1
c00053cd:	57                   	push   edi
c00053ce:	56                   	push   esi
c00053cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053db:	50                   	push   eax
c00053dc:	e8 16 c6 ff ff       	call   c00019f7 <disk_read>
c00053e1:	83 c4 20             	add    esp,0x20
c00053e4:	85 c0                	test   eax,eax
c00053e6:	0f 85 3c ff ff ff    	jne    c0005328 <f_read+0x17a>
c00053ec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ef:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f5:	ba 00 02 00 00       	mov    edx,0x200
c00053fa:	25 ff 01 00 00       	and    eax,0x1ff
c00053ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005403:	29 c2                	sub    edx,eax
c0005405:	39 d6                	cmp    esi,edx
c0005407:	76 02                	jbe    c000540b <f_read+0x25d>
c0005409:	89 d6                	mov    esi,edx
c000540b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000540f:	89 f1                	mov    ecx,esi
c0005411:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005415:	e8 a7 c6 ff ff       	call   c0001ac1 <mem_cpy>
c000541a:	e9 a7 fe ff ff       	jmp    c00052c6 <f_read+0x118>
c000541f:	bd 07 00 00 00       	mov    ebp,0x7
c0005424:	83 c4 2c             	add    esp,0x2c
c0005427:	89 e8                	mov    eax,ebp
c0005429:	5b                   	pop    ebx
c000542a:	5e                   	pop    esi
c000542b:	5f                   	pop    edi
c000542c:	5d                   	pop    ebp
c000542d:	c3                   	ret    

c000542e <f_write>:
c000542e:	55                   	push   ebp
c000542f:	57                   	push   edi
c0005430:	56                   	push   esi
c0005431:	53                   	push   ebx
c0005432:	83 ec 2c             	sub    esp,0x2c
c0005435:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005439:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000543d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005443:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005447:	89 d8                	mov    eax,ebx
c0005449:	e8 f7 cc ff ff       	call   c0002145 <validate>
c000544e:	89 c5                	mov    ebp,eax
c0005450:	85 c0                	test   eax,eax
c0005452:	0f 85 86 02 00 00    	jne    c00056de <f_write+0x2b0>
c0005458:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000545c:	85 ed                	test   ebp,ebp
c000545e:	0f 85 7a 02 00 00    	jne    c00056de <f_write+0x2b0>
c0005464:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005468:	0f 84 6b 02 00 00    	je     c00056d9 <f_write+0x2ab>
c000546e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005472:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005475:	0f 84 43 01 00 00    	je     c00055be <f_write+0x190>
c000547b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000547e:	89 c1                	mov    ecx,eax
c0005480:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005484:	0f 83 34 01 00 00    	jae    c00055be <f_write+0x190>
c000548a:	f7 d0                	not    eax
c000548c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005490:	e9 29 01 00 00       	jmp    c00055be <f_write+0x190>
c0005495:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005498:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000549b:	89 d0                	mov    eax,edx
c000549d:	25 ff 01 00 00       	and    eax,0x1ff
c00054a2:	0f 85 00 02 00 00    	jne    c00056a8 <f_write+0x27a>
c00054a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054ac:	89 d6                	mov    esi,edx
c00054ae:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b2:	89 cf                	mov    edi,ecx
c00054b4:	48                   	dec    eax
c00054b5:	0f ac fe 09          	shrd   esi,edi,0x9
c00054b9:	21 f0                	and    eax,esi
c00054bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054bf:	0f 84 06 01 00 00    	je     c00055cb <f_write+0x19d>
c00054c5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c9:	0f 88 6e 01 00 00    	js     c000563d <f_write+0x20f>
c00054cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d6:	89 c8                	mov    eax,ecx
c00054d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054dc:	e8 fa c7 ff ff       	call   c0001cdb <clst2sect>
c00054e1:	89 d1                	mov    ecx,edx
c00054e3:	09 c1                	or     ecx,eax
c00054e5:	0f 84 1c 01 00 00    	je     c0005607 <f_write+0x1d9>
c00054eb:	31 ff                	xor    edi,edi
c00054ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054f5:	01 c6                	add    esi,eax
c00054f7:	11 d7                	adc    edi,edx
c00054f9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005501:	0f 86 63 01 00 00    	jbe    c000566a <f_write+0x23c>
c0005507:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000550b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000550f:	c1 e8 09             	shr    eax,0x9
c0005512:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005516:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000551a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000551e:	39 c2                	cmp    edx,eax
c0005520:	76 08                	jbe    c000552a <f_write+0xfc>
c0005522:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000552a:	83 ec 0c             	sub    esp,0xc
c000552d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005531:	57                   	push   edi
c0005532:	56                   	push   esi
c0005533:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005537:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000553b:	50                   	push   eax
c000553c:	e8 cc c4 ff ff       	call   c0001a0d <disk_write>
c0005541:	83 c4 20             	add    esp,0x20
c0005544:	85 c0                	test   eax,eax
c0005546:	0f 85 ce 00 00 00    	jne    c000561a <f_write+0x1ec>
c000554c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005552:	29 f0                	sub    eax,esi
c0005554:	19 fa                	sbb    edx,edi
c0005556:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000555a:	89 d7                	mov    edi,edx
c000555c:	ba 00 00 00 00       	mov    edx,0x0
c0005561:	89 f9                	mov    ecx,edi
c0005563:	19 d1                	sbb    ecx,edx
c0005565:	73 1c                	jae    c0005583 <f_write+0x155>
c0005567:	89 c7                	mov    edi,eax
c0005569:	b9 00 02 00 00       	mov    ecx,0x200
c000556e:	c1 e7 09             	shl    edi,0x9
c0005571:	8d 43 50             	lea    eax,[ebx+0x50]
c0005574:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005578:	89 fa                	mov    edx,edi
c000557a:	e8 42 c5 ff ff       	call   c0001ac1 <mem_cpy>
c000557f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005583:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005587:	c1 e6 09             	shl    esi,0x9
c000558a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000558e:	31 ff                	xor    edi,edi
c0005590:	01 30                	add    DWORD PTR [eax],esi
c0005592:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005596:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000559a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000559d:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a6:	89 c1                	mov    ecx,eax
c00055a8:	39 f2                	cmp    edx,esi
c00055aa:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055ad:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b0:	19 f9                	sbb    ecx,edi
c00055b2:	73 04                	jae    c00055b8 <f_write+0x18a>
c00055b4:	89 f2                	mov    edx,esi
c00055b6:	89 f8                	mov    eax,edi
c00055b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055bb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055be:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c3:	0f 85 cc fe ff ff    	jne    c0005495 <f_write+0x67>
c00055c9:	eb 2e                	jmp    c00055f9 <f_write+0x1cb>
c00055cb:	89 c8                	mov    eax,ecx
c00055cd:	09 d0                	or     eax,edx
c00055cf:	75 0b                	jne    c00055dc <f_write+0x1ae>
c00055d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d4:	31 d2                	xor    edx,edx
c00055d6:	85 c0                	test   eax,eax
c00055d8:	75 28                	jne    c0005602 <f_write+0x1d4>
c00055da:	eb 12                	jmp    c00055ee <f_write+0x1c0>
c00055dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e0:	74 09                	je     c00055eb <f_write+0x1bd>
c00055e2:	89 d8                	mov    eax,ebx
c00055e4:	e8 13 c7 ff ff       	call   c0001cfc <clmt_clust>
c00055e9:	eb 0a                	jmp    c00055f5 <f_write+0x1c7>
c00055eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ee:	89 d8                	mov    eax,ebx
c00055f0:	e8 a1 da ff ff       	call   c0003096 <create_chain>
c00055f5:	85 c0                	test   eax,eax
c00055f7:	75 09                	jne    c0005602 <f_write+0x1d4>
c00055f9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055fd:	e9 dc 00 00 00       	jmp    c00056de <f_write+0x2b0>
c0005602:	83 f8 01             	cmp    eax,0x1
c0005605:	75 0e                	jne    c0005615 <f_write+0x1e7>
c0005607:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000560b:	bd 02 00 00 00       	mov    ebp,0x2
c0005610:	e9 c9 00 00 00       	jmp    c00056de <f_write+0x2b0>
c0005615:	83 f8 ff             	cmp    eax,0xffffffff
c0005618:	75 0e                	jne    c0005628 <f_write+0x1fa>
c000561a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000561e:	bd 01 00 00 00       	mov    ebp,0x1
c0005623:	e9 b6 00 00 00       	jmp    c00056de <f_write+0x2b0>
c0005628:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000562b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000562f:	0f 85 90 fe ff ff    	jne    c00054c5 <f_write+0x97>
c0005635:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005638:	e9 88 fe ff ff       	jmp    c00054c5 <f_write+0x97>
c000563d:	83 ec 0c             	sub    esp,0xc
c0005640:	8d 43 50             	lea    eax,[ebx+0x50]
c0005643:	6a 01                	push   0x1
c0005645:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005648:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000564b:	50                   	push   eax
c000564c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005650:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 b3 c3 ff ff       	call   c0001a0d <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	75 b9                	jne    c000561a <f_write+0x1ec>
c0005661:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005665:	e9 65 fe ff ff       	jmp    c00054cf <f_write+0xa1>
c000566a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000566d:	75 05                	jne    c0005674 <f_write+0x246>
c000566f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005672:	74 2e                	je     c00056a2 <f_write+0x274>
c0005674:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005677:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000567a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000567d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005680:	73 20                	jae    c00056a2 <f_write+0x274>
c0005682:	83 ec 0c             	sub    esp,0xc
c0005685:	8d 43 50             	lea    eax,[ebx+0x50]
c0005688:	6a 01                	push   0x1
c000568a:	57                   	push   edi
c000568b:	56                   	push   esi
c000568c:	50                   	push   eax
c000568d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005691:	50                   	push   eax
c0005692:	e8 60 c3 ff ff       	call   c00019f7 <disk_read>
c0005697:	83 c4 20             	add    esp,0x20
c000569a:	85 c0                	test   eax,eax
c000569c:	0f 85 78 ff ff ff    	jne    c000561a <f_write+0x1ec>
c00056a2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056a8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056ab:	ba 00 02 00 00       	mov    edx,0x200
c00056b0:	25 ff 01 00 00       	and    eax,0x1ff
c00056b5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056b9:	29 c2                	sub    edx,eax
c00056bb:	39 d6                	cmp    esi,edx
c00056bd:	76 02                	jbe    c00056c1 <f_write+0x293>
c00056bf:	89 d6                	mov    esi,edx
c00056c1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c5:	89 f1                	mov    ecx,esi
c00056c7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056cb:	e8 f1 c3 ff ff       	call   c0001ac1 <mem_cpy>
c00056d0:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d4:	e9 b1 fe ff ff       	jmp    c000558a <f_write+0x15c>
c00056d9:	bd 07 00 00 00       	mov    ebp,0x7
c00056de:	83 c4 2c             	add    esp,0x2c
c00056e1:	89 e8                	mov    eax,ebp
c00056e3:	5b                   	pop    ebx
c00056e4:	5e                   	pop    esi
c00056e5:	5f                   	pop    edi
c00056e6:	5d                   	pop    ebp
c00056e7:	c3                   	ret    

c00056e8 <f_sync>:
c00056e8:	56                   	push   esi
c00056e9:	53                   	push   ebx
c00056ea:	83 ec 64             	sub    esp,0x64
c00056ed:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f5:	89 d8                	mov    eax,ebx
c00056f7:	e8 49 ca ff ff       	call   c0002145 <validate>
c00056fc:	85 c0                	test   eax,eax
c00056fe:	0f 85 ba 01 00 00    	jne    c00058be <f_sync+0x1d6>
c0005704:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005707:	f6 c2 40             	test   dl,0x40
c000570a:	0f 84 ae 01 00 00    	je     c00058be <f_sync+0x1d6>
c0005710:	84 d2                	test   dl,dl
c0005712:	79 33                	jns    c0005747 <f_sync+0x5f>
c0005714:	83 ec 0c             	sub    esp,0xc
c0005717:	8d 43 50             	lea    eax,[ebx+0x50]
c000571a:	6a 01                	push   0x1
c000571c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000571f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005722:	50                   	push   eax
c0005723:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005727:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000572b:	50                   	push   eax
c000572c:	e8 dc c2 ff ff       	call   c0001a0d <disk_write>
c0005731:	83 c4 20             	add    esp,0x20
c0005734:	89 c2                	mov    edx,eax
c0005736:	b8 01 00 00 00       	mov    eax,0x1
c000573b:	85 d2                	test   edx,edx
c000573d:	0f 85 7b 01 00 00    	jne    c00058be <f_sync+0x1d6>
c0005743:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000574e:	0f 85 11 01 00 00    	jne    c0005865 <f_sync+0x17d>
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 13 d6 ff ff       	call   c0002d6e <fill_first_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 5b 01 00 00    	jne    c00058be <f_sync+0x1d6>
c0005763:	83 c9 ff             	or     ecx,0xffffffff
c0005766:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005769:	89 d8                	mov    eax,ebx
c000576b:	e8 c9 d5 ff ff       	call   c0002d39 <fill_last_frag>
c0005770:	85 c0                	test   eax,eax
c0005772:	0f 85 46 01 00 00    	jne    c00058be <f_sync+0x1d6>
c0005778:	83 ec 0c             	sub    esp,0xc
c000577b:	68 60 04 00 00       	push   0x460
c0005780:	e8 f0 2a 00 00       	call   c0008275 <ff_memalloc>
c0005785:	83 c4 10             	add    esp,0x10
c0005788:	89 c6                	mov    esi,eax
c000578a:	b8 11 00 00 00       	mov    eax,0x11
c000578f:	85 f6                	test   esi,esi
c0005791:	0f 84 27 01 00 00    	je     c00058be <f_sync+0x1d6>
c0005797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000579b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a7:	89 da                	mov    edx,ebx
c00057a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057ad:	e8 af df ff ff       	call   c0003761 <load_obj_xdir>
c00057b2:	85 c0                	test   eax,eax
c00057b4:	0f 85 95 00 00 00    	jne    c000584f <f_sync+0x167>
c00057ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057c8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057cb:	83 ca 01             	or     edx,0x1
c00057ce:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d7:	83 c0 34             	add    eax,0x34
c00057da:	e8 d9 c2 ff ff       	call   c0001ab8 <st_dword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ec:	83 c0 38             	add    eax,0x38
c00057ef:	e8 c7 c2 ff ff       	call   c0001abb <st_qword>
c00057f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005801:	83 c0 28             	add    eax,0x28
c0005804:	e8 b2 c2 ff ff       	call   c0001abb <st_qword>
c0005809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005812:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005815:	83 c0 0c             	add    eax,0xc
c0005818:	e8 9b c2 ff ff       	call   c0001ab8 <st_dword>
c000581d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005821:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005824:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005828:	31 d2                	xor    edx,edx
c000582a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582d:	83 c0 10             	add    eax,0x10
c0005830:	e8 83 c2 ff ff       	call   c0001ab8 <st_dword>
c0005835:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005839:	e8 62 e1 ff ff       	call   c00039a0 <store_xdir>
c000583e:	85 c0                	test   eax,eax
c0005840:	75 0d                	jne    c000584f <f_sync+0x167>
c0005842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005846:	e8 00 eb ff ff       	call   c000434b <sync_fs>
c000584b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000584f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005853:	83 ec 0c             	sub    esp,0xc
c0005856:	56                   	push   esi
c0005857:	e8 2f 2a 00 00       	call   c000828b <ff_memfree>
c000585c:	83 c4 10             	add    esp,0x10
c000585f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005863:	eb 59                	jmp    c00058be <f_sync+0x1d6>
c0005865:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005868:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000586b:	e8 b0 c9 ff ff       	call   c0002220 <move_window>
c0005870:	85 c0                	test   eax,eax
c0005872:	75 4a                	jne    c00058be <f_sync+0x1d6>
c0005874:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005877:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000587b:	89 f2                	mov    edx,esi
c000587d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005880:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005882:	e8 5f f3 ff ff       	call   c0004be6 <st_clust.isra.1>
c0005887:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000588a:	8d 46 1c             	lea    eax,[esi+0x1c]
c000588d:	e8 26 c2 ff ff       	call   c0001ab8 <st_dword>
c0005892:	8d 46 16             	lea    eax,[esi+0x16]
c0005895:	ba 00 00 21 50       	mov    edx,0x50210000
c000589a:	e8 19 c2 ff ff       	call   c0001ab8 <st_dword>
c000589f:	8d 46 12             	lea    eax,[esi+0x12]
c00058a2:	31 d2                	xor    edx,edx
c00058a4:	e8 0b c2 ff ff       	call   c0001ab4 <st_word>
c00058a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	e8 91 ea ff ff       	call   c000434b <sync_fs>
c00058ba:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058be:	83 c4 64             	add    esp,0x64
c00058c1:	5b                   	pop    ebx
c00058c2:	5e                   	pop    esi
c00058c3:	c3                   	ret    

c00058c4 <f_close>:
c00058c4:	53                   	push   ebx
c00058c5:	83 ec 24             	sub    esp,0x24
c00058c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058cc:	53                   	push   ebx
c00058cd:	e8 16 fe ff ff       	call   c00056e8 <f_sync>
c00058d2:	83 c4 10             	add    esp,0x10
c00058d5:	85 c0                	test   eax,eax
c00058d7:	75 15                	jne    c00058ee <f_close+0x2a>
c00058d9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058dd:	89 d8                	mov    eax,ebx
c00058df:	e8 61 c8 ff ff       	call   c0002145 <validate>
c00058e4:	85 c0                	test   eax,eax
c00058e6:	75 06                	jne    c00058ee <f_close+0x2a>
c00058e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ee:	83 c4 18             	add    esp,0x18
c00058f1:	5b                   	pop    ebx
c00058f2:	c3                   	ret    

c00058f3 <f_lseek>:
c00058f3:	55                   	push   ebp
c00058f4:	57                   	push   edi
c00058f5:	56                   	push   esi
c00058f6:	53                   	push   ebx
c00058f7:	83 ec 3c             	sub    esp,0x3c
c00058fa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058fe:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005902:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005906:	89 04 24             	mov    DWORD PTR [esp],eax
c0005909:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000590d:	89 d8                	mov    eax,ebx
c000590f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005913:	e8 2d c8 ff ff       	call   c0002145 <validate>
c0005918:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591c:	85 c0                	test   eax,eax
c000591e:	0f 85 7a 04 00 00    	jne    c0005d9e <f_lseek+0x4ab>
c0005924:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005928:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592c:	85 c0                	test   eax,eax
c000592e:	0f 85 6a 04 00 00    	jne    c0005d9e <f_lseek+0x4ab>
c0005934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005938:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000593b:	74 0c                	je     c0005949 <f_lseek+0x56>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	85 c0                	test   eax,eax
c0005942:	75 1f                	jne    c0005963 <f_lseek+0x70>
c0005944:	e9 b5 01 00 00       	jmp    c0005afe <f_lseek+0x20b>
c0005949:	83 c9 ff             	or     ecx,0xffffffff
c000594c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594f:	89 d8                	mov    eax,ebx
c0005951:	e8 e3 d3 ff ff       	call   c0002d39 <fill_last_frag>
c0005956:	85 c0                	test   eax,eax
c0005958:	74 e3                	je     c000593d <f_lseek+0x4a>
c000595a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595e:	e9 3b 04 00 00       	jmp    c0005d9e <f_lseek+0x4ab>
c0005963:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005968:	0f 85 ac 00 00 00    	jne    c0005a1a <f_lseek+0x127>
c000596e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005972:	0f 85 a2 00 00 00    	jne    c0005a1a <f_lseek+0x127>
c0005978:	8d 78 04             	lea    edi,[eax+0x4]
c000597b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000597e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005980:	be 02 00 00 00       	mov    esi,0x2
c0005985:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005989:	85 ed                	test   ebp,ebp
c000598b:	74 73                	je     c0005a00 <f_lseek+0x10d>
c000598d:	89 e9                	mov    ecx,ebp
c000598f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005996:	ff 04 24             	inc    DWORD PTR [esp]
c0005999:	89 ca                	mov    edx,ecx
c000599b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000599f:	89 d8                	mov    eax,ebx
c00059a1:	e8 02 d4 ff ff       	call   c0002da8 <get_fat>
c00059a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059aa:	83 f8 01             	cmp    eax,0x1
c00059ad:	77 11                	ja     c00059c0 <f_lseek+0xcd>
c00059af:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059bb:	e9 de 03 00 00       	jmp    c0005d9e <f_lseek+0x4ab>
c00059c0:	83 f8 ff             	cmp    eax,0xffffffff
c00059c3:	75 11                	jne    c00059d6 <f_lseek+0xe3>
c00059c5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059c9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d1:	e9 c8 03 00 00       	jmp    c0005d9e <f_lseek+0x4ab>
c00059d6:	8d 51 01             	lea    edx,[ecx+0x1]
c00059d9:	89 c1                	mov    ecx,eax
c00059db:	39 c2                	cmp    edx,eax
c00059dd:	74 b7                	je     c0005996 <f_lseek+0xa3>
c00059df:	83 c6 02             	add    esi,0x2
c00059e2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059e6:	72 0b                	jb     c00059f3 <f_lseek+0x100>
c00059e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059eb:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ee:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f0:	83 c7 08             	add    edi,0x8
c00059f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059f7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059fa:	76 04                	jbe    c0005a00 <f_lseek+0x10d>
c00059fc:	89 c5                	mov    ebp,eax
c00059fe:	eb 8d                	jmp    c000598d <f_lseek+0x9a>
c0005a00:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a03:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a07:	89 30                	mov    DWORD PTR [eax],esi
c0005a09:	0f 87 87 03 00 00    	ja     c0005d96 <f_lseek+0x4a3>
c0005a0f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a15:	e9 84 03 00 00       	jmp    c0005d9e <f_lseek+0x4ab>
c0005a1a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a1d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a2c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a33:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a37:	73 0f                	jae    c0005a48 <f_lseek+0x155>
c0005a39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a53:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a5a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a5e:	0f 84 3a 03 00 00    	je     c0005d9e <f_lseek+0x4ab>
c0005a64:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a6c:	83 c6 ff             	add    esi,0xffffffff
c0005a6f:	89 d8                	mov    eax,ebx
c0005a71:	83 d7 ff             	adc    edi,0xffffffff
c0005a74:	89 f2                	mov    edx,esi
c0005a76:	89 f9                	mov    ecx,edi
c0005a78:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a7c:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a7f:	e8 78 c2 ff ff       	call   c0001cfc <clmt_clust>
c0005a84:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a88:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a8b:	89 c2                	mov    edx,eax
c0005a8d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a91:	89 c8                	mov    eax,ecx
c0005a93:	e8 43 c2 ff ff       	call   c0001cdb <clst2sect>
c0005a98:	89 d7                	mov    edi,edx
c0005a9a:	09 c7                	or     edi,eax
c0005a9c:	0f 84 0d ff ff ff    	je     c00059af <f_lseek+0xbc>
c0005aa2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aa6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005aac:	0f 84 ec 02 00 00    	je     c0005d9e <f_lseek+0x4ab>
c0005ab2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ab6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005aba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005abd:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ac5:	4d                   	dec    ebp
c0005ac6:	31 ff                	xor    edi,edi
c0005ac8:	21 ee                	and    esi,ebp
c0005aca:	01 c6                	add    esi,eax
c0005acc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005acf:	11 d7                	adc    edi,edx
c0005ad1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ad4:	39 fa                	cmp    edx,edi
c0005ad6:	75 08                	jne    c0005ae0 <f_lseek+0x1ed>
c0005ad8:	39 f0                	cmp    eax,esi
c0005ada:	0f 84 be 02 00 00    	je     c0005d9e <f_lseek+0x4ab>
c0005ae0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ae3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ae7:	0f 89 80 02 00 00    	jns    c0005d6d <f_lseek+0x47a>
c0005aed:	83 ec 0c             	sub    esp,0xc
c0005af0:	6a 01                	push   0x1
c0005af2:	52                   	push   edx
c0005af3:	50                   	push   eax
c0005af4:	55                   	push   ebp
c0005af5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005af9:	e9 5a 02 00 00       	jmp    c0005d58 <f_lseek+0x465>
c0005afe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b02:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b05:	74 16                	je     c0005b1d <f_lseek+0x22a>
c0005b07:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b0c:	76 0f                	jbe    c0005b1d <f_lseek+0x22a>
c0005b0e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b1d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b23:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b26:	89 c7                	mov    edi,eax
c0005b28:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b2c:	73 0d                	jae    c0005b3b <f_lseek+0x248>
c0005b2e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b32:	75 07                	jne    c0005b3b <f_lseek+0x248>
c0005b34:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b3b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b3e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b45:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b4c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b53:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b56:	75 09                	jne    c0005b61 <f_lseek+0x26e>
c0005b58:	31 f6                	xor    esi,esi
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	e9 af 01 00 00       	jmp    c0005d10 <f_lseek+0x41d>
c0005b61:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b65:	89 d7                	mov    edi,edx
c0005b67:	c1 e1 09             	shl    ecx,0x9
c0005b6a:	09 c7                	or     edi,eax
c0005b6c:	89 cd                	mov    ebp,ecx
c0005b6e:	74 6d                	je     c0005bdd <f_lseek+0x2ea>
c0005b70:	83 c0 ff             	add    eax,0xffffffff
c0005b73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b77:	83 d2 ff             	adc    edx,0xffffffff
c0005b7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b81:	83 c0 ff             	add    eax,0xffffffff
c0005b84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b88:	83 d2 ff             	adc    edx,0xffffffff
c0005b8b:	31 ff                	xor    edi,edi
c0005b8d:	57                   	push   edi
c0005b8e:	51                   	push   ecx
c0005b8f:	52                   	push   edx
c0005b90:	50                   	push   eax
c0005b91:	e8 76 05 02 00       	call   c002610c <__udivdi3>
c0005b96:	83 c4 10             	add    esp,0x10
c0005b99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba1:	57                   	push   edi
c0005ba2:	55                   	push   ebp
c0005ba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bab:	e8 5c 05 02 00       	call   c002610c <__udivdi3>
c0005bb0:	83 c4 10             	add    esp,0x10
c0005bb3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bbb:	19 d1                	sbb    ecx,edx
c0005bbd:	72 1e                	jb     c0005bdd <f_lseek+0x2ea>
c0005bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bc3:	89 e9                	mov    ecx,ebp
c0005bc5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bc8:	f7 d9                	neg    ecx
c0005bca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bcd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd1:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bd4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bd7:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bdb:	eb 28                	jmp    c0005c05 <f_lseek+0x312>
c0005bdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be0:	85 c0                	test   eax,eax
c0005be2:	75 1e                	jne    c0005c02 <f_lseek+0x30f>
c0005be4:	31 d2                	xor    edx,edx
c0005be6:	89 d8                	mov    eax,ebx
c0005be8:	e8 a9 d4 ff ff       	call   c0003096 <create_chain>
c0005bed:	83 f8 01             	cmp    eax,0x1
c0005bf0:	0f 84 b9 fd ff ff    	je     c00059af <f_lseek+0xbc>
c0005bf6:	83 f8 ff             	cmp    eax,0xffffffff
c0005bf9:	0f 84 c6 fd ff ff    	je     c00059c5 <f_lseek+0xd2>
c0005bff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	85 c0                	test   eax,eax
c0005c07:	0f 84 4b ff ff ff    	je     c0005b58 <f_lseek+0x265>
c0005c0d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c19:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c20:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c23:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c26:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c2a:	0f 83 9d 00 00 00    	jae    c0005ccd <f_lseek+0x3da>
c0005c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c34:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c38:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c3b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c3f:	01 f2                	add    edx,esi
c0005c41:	11 f9                	adc    ecx,edi
c0005c43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c4b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c4e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c51:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c54:	f6 c1 02             	test   cl,0x2
c0005c57:	74 35                	je     c0005c8e <f_lseek+0x39b>
c0005c59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c5d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c60:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c63:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c67:	73 16                	jae    c0005c7f <f_lseek+0x38c>
c0005c69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c71:	88 ca                	mov    dl,cl
c0005c73:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c76:	83 ca 40             	or     edx,0x40
c0005c79:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c7c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c7f:	89 c2                	mov    edx,eax
c0005c81:	89 d8                	mov    eax,ebx
c0005c83:	e8 0e d4 ff ff       	call   c0003096 <create_chain>
c0005c88:	85 c0                	test   eax,eax
c0005c8a:	75 0b                	jne    c0005c97 <f_lseek+0x3a4>
c0005c8c:	eb 30                	jmp    c0005cbe <f_lseek+0x3cb>
c0005c8e:	89 c2                	mov    edx,eax
c0005c90:	89 d8                	mov    eax,ebx
c0005c92:	e8 11 d1 ff ff       	call   c0002da8 <get_fat>
c0005c97:	83 f8 ff             	cmp    eax,0xffffffff
c0005c9a:	0f 84 25 fd ff ff    	je     c00059c5 <f_lseek+0xd2>
c0005ca0:	83 f8 01             	cmp    eax,0x1
c0005ca3:	0f 86 06 fd ff ff    	jbe    c00059af <f_lseek+0xbc>
c0005ca9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cad:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb0:	0f 86 f9 fc ff ff    	jbe    c00059af <f_lseek+0xbc>
c0005cb6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb9:	e9 5b ff ff ff       	jmp    c0005c19 <f_lseek+0x326>
c0005cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cc5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ccd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cd4:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cd7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cda:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cdd:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ce3:	0f 84 6f fe ff ff    	je     c0005b58 <f_lseek+0x265>
c0005ce9:	89 c2                	mov    edx,eax
c0005ceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cef:	e8 e7 bf ff ff       	call   c0001cdb <clst2sect>
c0005cf4:	89 d7                	mov    edi,edx
c0005cf6:	09 c7                	or     edi,eax
c0005cf8:	0f 84 b1 fc ff ff    	je     c00059af <f_lseek+0xbc>
c0005cfe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d05:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d09:	c1 ef 09             	shr    edi,0x9
c0005d0c:	01 c6                	add    esi,eax
c0005d0e:	11 d7                	adc    edi,edx
c0005d10:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d16:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d19:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d1c:	19 d1                	sbb    ecx,edx
c0005d1e:	73 0a                	jae    c0005d2a <f_lseek+0x437>
c0005d20:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d23:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d26:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d2a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d2f:	74 6d                	je     c0005d9e <f_lseek+0x4ab>
c0005d31:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d37:	39 fa                	cmp    edx,edi
c0005d39:	75 04                	jne    c0005d3f <f_lseek+0x44c>
c0005d3b:	39 f0                	cmp    eax,esi
c0005d3d:	74 5f                	je     c0005d9e <f_lseek+0x4ab>
c0005d3f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d42:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d46:	79 25                	jns    c0005d6d <f_lseek+0x47a>
c0005d48:	83 ec 0c             	sub    esp,0xc
c0005d4b:	6a 01                	push   0x1
c0005d4d:	52                   	push   edx
c0005d4e:	50                   	push   eax
c0005d4f:	55                   	push   ebp
c0005d50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d54:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d58:	50                   	push   eax
c0005d59:	e8 af bc ff ff       	call   c0001a0d <disk_write>
c0005d5e:	83 c4 20             	add    esp,0x20
c0005d61:	85 c0                	test   eax,eax
c0005d63:	0f 85 5c fc ff ff    	jne    c00059c5 <f_lseek+0xd2>
c0005d69:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d6d:	83 ec 0c             	sub    esp,0xc
c0005d70:	6a 01                	push   0x1
c0005d72:	57                   	push   edi
c0005d73:	56                   	push   esi
c0005d74:	55                   	push   ebp
c0005d75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d79:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d7d:	50                   	push   eax
c0005d7e:	e8 74 bc ff ff       	call   c00019f7 <disk_read>
c0005d83:	83 c4 20             	add    esp,0x20
c0005d86:	85 c0                	test   eax,eax
c0005d88:	0f 85 37 fc ff ff    	jne    c00059c5 <f_lseek+0xd2>
c0005d8e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d91:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d94:	eb 08                	jmp    c0005d9e <f_lseek+0x4ab>
c0005d96:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da2:	83 c4 3c             	add    esp,0x3c
c0005da5:	5b                   	pop    ebx
c0005da6:	5e                   	pop    esi
c0005da7:	5f                   	pop    edi
c0005da8:	5d                   	pop    ebp
c0005da9:	c3                   	ret    

c0005daa <f_opendir>:
c0005daa:	56                   	push   esi
c0005dab:	b8 09 00 00 00       	mov    eax,0x9
c0005db0:	53                   	push   ebx
c0005db1:	83 ec 24             	sub    esp,0x24
c0005db4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005db8:	85 db                	test   ebx,ebx
c0005dba:	0f 84 e6 00 00 00    	je     c0005ea6 <f_opendir+0xfc>
c0005dc0:	31 c9                	xor    ecx,ecx
c0005dc2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dca:	e8 03 c7 ff ff       	call   c00024d2 <mount_volume>
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	0f 85 c9 00 00 00    	jne    c0005ea0 <f_opendir+0xf6>
c0005dd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ddb:	83 ec 0c             	sub    esp,0xc
c0005dde:	89 03                	mov    DWORD PTR [ebx],eax
c0005de0:	68 60 04 00 00       	push   0x460
c0005de5:	e8 8b 24 00 00       	call   c0008275 <ff_memalloc>
c0005dea:	83 c4 10             	add    esp,0x10
c0005ded:	89 c6                	mov    esi,eax
c0005def:	b8 11 00 00 00       	mov    eax,0x11
c0005df4:	85 f6                	test   esi,esi
c0005df6:	0f 84 aa 00 00 00    	je     c0005ea6 <f_opendir+0xfc>
c0005dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e06:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e09:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e10:	89 d8                	mov    eax,ebx
c0005e12:	e8 31 ee ff ff       	call   c0004c48 <follow_path>
c0005e17:	85 c0                	test   eax,eax
c0005e19:	75 61                	jne    c0005e7c <f_opendir+0xd2>
c0005e1b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e1f:	78 46                	js     c0005e67 <f_opendir+0xbd>
c0005e21:	b8 05 00 00 00       	mov    eax,0x5
c0005e26:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e2a:	74 50                	je     c0005e7c <f_opendir+0xd2>
c0005e2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e30:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e32:	3c 04                	cmp    al,0x4
c0005e34:	75 26                	jne    c0005e5c <f_opendir+0xb2>
c0005e36:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e39:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e3c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e3f:	30 d2                	xor    dl,dl
c0005e41:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e45:	09 c2                	or     edx,eax
c0005e47:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e4a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e4d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e50:	89 da                	mov    edx,ebx
c0005e52:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e55:	e8 b4 ed ff ff       	call   c0004c0e <init_alloc_info.isra.2>
c0005e5a:	eb 0b                	jmp    c0005e67 <f_opendir+0xbd>
c0005e5c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e5f:	e8 59 ed ff ff       	call   c0004bbd <ld_clust.isra.0>
c0005e64:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	31 d2                	xor    edx,edx
c0005e6d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e71:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 22 d1 ff ff       	call   c0002f9e <dir_sdi>
c0005e7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e80:	83 ec 0c             	sub    esp,0xc
c0005e83:	56                   	push   esi
c0005e84:	e8 02 24 00 00       	call   c000828b <ff_memfree>
c0005e89:	83 c4 10             	add    esp,0x10
c0005e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e90:	83 f8 04             	cmp    eax,0x4
c0005e93:	74 06                	je     c0005e9b <f_opendir+0xf1>
c0005e95:	85 c0                	test   eax,eax
c0005e97:	74 0d                	je     c0005ea6 <f_opendir+0xfc>
c0005e99:	eb 05                	jmp    c0005ea0 <f_opendir+0xf6>
c0005e9b:	b8 05 00 00 00       	mov    eax,0x5
c0005ea0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ea6:	83 c4 24             	add    esp,0x24
c0005ea9:	5b                   	pop    ebx
c0005eaa:	5e                   	pop    esi
c0005eab:	c3                   	ret    

c0005eac <f_closedir>:
c0005eac:	53                   	push   ebx
c0005ead:	83 ec 18             	sub    esp,0x18
c0005eb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005eb4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005eb8:	89 d8                	mov    eax,ebx
c0005eba:	e8 86 c2 ff ff       	call   c0002145 <validate>
c0005ebf:	85 c0                	test   eax,eax
c0005ec1:	75 06                	jne    c0005ec9 <f_closedir+0x1d>
c0005ec3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ec9:	83 c4 18             	add    esp,0x18
c0005ecc:	5b                   	pop    ebx
c0005ecd:	c3                   	ret    

c0005ece <f_readdir>:
c0005ece:	57                   	push   edi
c0005ecf:	56                   	push   esi
c0005ed0:	53                   	push   ebx
c0005ed1:	83 ec 20             	sub    esp,0x20
c0005ed4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005edc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee0:	89 d8                	mov    eax,ebx
c0005ee2:	e8 5e c2 ff ff       	call   c0002145 <validate>
c0005ee7:	85 c0                	test   eax,eax
c0005ee9:	75 77                	jne    c0005f62 <f_readdir+0x94>
c0005eeb:	85 ff                	test   edi,edi
c0005eed:	75 0b                	jne    c0005efa <f_readdir+0x2c>
c0005eef:	31 d2                	xor    edx,edx
c0005ef1:	89 d8                	mov    eax,ebx
c0005ef3:	e8 a6 d0 ff ff       	call   c0002f9e <dir_sdi>
c0005ef8:	eb 68                	jmp    c0005f62 <f_readdir+0x94>
c0005efa:	83 ec 0c             	sub    esp,0xc
c0005efd:	68 60 04 00 00       	push   0x460
c0005f02:	e8 6e 23 00 00       	call   c0008275 <ff_memalloc>
c0005f07:	83 c4 10             	add    esp,0x10
c0005f0a:	89 c6                	mov    esi,eax
c0005f0c:	b8 11 00 00 00       	mov    eax,0x11
c0005f11:	85 f6                	test   esi,esi
c0005f13:	74 4d                	je     c0005f62 <f_readdir+0x94>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	31 d2                	xor    edx,edx
c0005f27:	89 d8                	mov    eax,ebx
c0005f29:	e8 80 d8 ff ff       	call   c00037ae <dir_read>
c0005f2e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f33:	75 19                	jne    c0005f4e <f_readdir+0x80>
c0005f35:	89 fa                	mov    edx,edi
c0005f37:	89 d8                	mov    eax,ebx
c0005f39:	e8 7e ea ff ff       	call   c00049bc <get_fileinfo>
c0005f3e:	31 d2                	xor    edx,edx
c0005f40:	89 d8                	mov    eax,ebx
c0005f42:	e8 af d5 ff ff       	call   c00034f6 <dir_next>
c0005f47:	83 f8 04             	cmp    eax,0x4
c0005f4a:	75 02                	jne    c0005f4e <f_readdir+0x80>
c0005f4c:	31 c0                	xor    eax,eax
c0005f4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	56                   	push   esi
c0005f56:	e8 30 23 00 00       	call   c000828b <ff_memfree>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f62:	83 c4 20             	add    esp,0x20
c0005f65:	5b                   	pop    ebx
c0005f66:	5e                   	pop    esi
c0005f67:	5f                   	pop    edi
c0005f68:	c3                   	ret    

c0005f69 <f_stat>:
c0005f69:	57                   	push   edi
c0005f6a:	31 c9                	xor    ecx,ecx
c0005f6c:	56                   	push   esi
c0005f6d:	53                   	push   ebx
c0005f6e:	83 ec 50             	sub    esp,0x50
c0005f71:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f75:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f79:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f7d:	e8 50 c5 ff ff       	call   c00024d2 <mount_volume>
c0005f82:	89 c3                	mov    ebx,eax
c0005f84:	85 c0                	test   eax,eax
c0005f86:	75 67                	jne    c0005fef <f_stat+0x86>
c0005f88:	83 ec 0c             	sub    esp,0xc
c0005f8b:	bb 11 00 00 00       	mov    ebx,0x11
c0005f90:	68 60 04 00 00       	push   0x460
c0005f95:	e8 db 22 00 00       	call   c0008275 <ff_memalloc>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	89 c6                	mov    esi,eax
c0005f9f:	85 c0                	test   eax,eax
c0005fa1:	74 4c                	je     c0005fef <f_stat+0x86>
c0005fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fa7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fb3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fb7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fbb:	e8 88 ec ff ff       	call   c0004c48 <follow_path>
c0005fc0:	89 c3                	mov    ebx,eax
c0005fc2:	85 c0                	test   eax,eax
c0005fc4:	75 1d                	jne    c0005fe3 <f_stat+0x7a>
c0005fc6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fcb:	78 11                	js     c0005fde <f_stat+0x75>
c0005fcd:	85 ff                	test   edi,edi
c0005fcf:	74 12                	je     c0005fe3 <f_stat+0x7a>
c0005fd1:	89 fa                	mov    edx,edi
c0005fd3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fd7:	e8 e0 e9 ff ff       	call   c00049bc <get_fileinfo>
c0005fdc:	eb 05                	jmp    c0005fe3 <f_stat+0x7a>
c0005fde:	bb 06 00 00 00       	mov    ebx,0x6
c0005fe3:	83 ec 0c             	sub    esp,0xc
c0005fe6:	56                   	push   esi
c0005fe7:	e8 9f 22 00 00       	call   c000828b <ff_memfree>
c0005fec:	83 c4 10             	add    esp,0x10
c0005fef:	83 c4 50             	add    esp,0x50
c0005ff2:	89 d8                	mov    eax,ebx
c0005ff4:	5b                   	pop    ebx
c0005ff5:	5e                   	pop    esi
c0005ff6:	5f                   	pop    edi
c0005ff7:	c3                   	ret    

c0005ff8 <f_getfree>:
c0005ff8:	55                   	push   ebp
c0005ff9:	31 c9                	xor    ecx,ecx
c0005ffb:	57                   	push   edi
c0005ffc:	56                   	push   esi
c0005ffd:	53                   	push   ebx
c0005ffe:	83 ec 5c             	sub    esp,0x5c
c0006001:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006005:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006009:	e8 c4 c4 ff ff       	call   c00024d2 <mount_volume>
c000600e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006012:	85 c0                	test   eax,eax
c0006014:	0f 85 9d 01 00 00    	jne    c00061b7 <f_getfree+0x1bf>
c000601a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000601e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006022:	89 02                	mov    DWORD PTR [edx],eax
c0006024:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006027:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000602a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000602d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006031:	39 f2                	cmp    edx,esi
c0006033:	77 0b                	ja     c0006040 <f_getfree+0x48>
c0006035:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006039:	89 10                	mov    DWORD PTR [eax],edx
c000603b:	e9 77 01 00 00       	jmp    c00061b7 <f_getfree+0x1bf>
c0006040:	8a 10                	mov    dl,BYTE PTR [eax]
c0006042:	80 fa 01             	cmp    dl,0x1
c0006045:	75 3a                	jne    c0006081 <f_getfree+0x89>
c0006047:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000604b:	be 02 00 00 00       	mov    esi,0x2
c0006050:	31 db                	xor    ebx,ebx
c0006052:	89 f2                	mov    edx,esi
c0006054:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006058:	e8 4b cd ff ff       	call   c0002da8 <get_fat>
c000605d:	83 f8 ff             	cmp    eax,0xffffffff
c0006060:	0f 84 28 01 00 00    	je     c000618e <f_getfree+0x196>
c0006066:	83 f8 01             	cmp    eax,0x1
c0006069:	0f 84 29 01 00 00    	je     c0006198 <f_getfree+0x1a0>
c000606f:	83 d3 00             	adc    ebx,0x0
c0006072:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006076:	46                   	inc    esi
c0006077:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000607a:	77 d6                	ja     c0006052 <f_getfree+0x5a>
c000607c:	e9 25 01 00 00       	jmp    c00061a6 <f_getfree+0x1ae>
c0006081:	80 fa 04             	cmp    dl,0x4
c0006084:	0f 85 88 00 00 00    	jne    c0006112 <f_getfree+0x11a>
c000608a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000608d:	31 ed                	xor    ebp,ebp
c000608f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006092:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006096:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609a:	31 db                	xor    ebx,ebx
c000609c:	85 ed                	test   ebp,ebp
c000609e:	75 3f                	jne    c00060df <f_getfree+0xe7>
c00060a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060a8:	83 c0 01             	add    eax,0x1
c00060ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060af:	83 d2 00             	adc    edx,0x0
c00060b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060c2:	e8 59 c1 ff ff       	call   c0002220 <move_window>
c00060c7:	85 c0                	test   eax,eax
c00060c9:	0f 85 d3 00 00 00    	jne    c00061a2 <f_getfree+0x1aa>
c00060cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e3:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060e6:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ea:	89 cf                	mov    edi,ecx
c00060ec:	85 f6                	test   esi,esi
c00060ee:	74 12                	je     c0006102 <f_getfree+0x10a>
c00060f0:	88 c1                	mov    cl,al
c00060f2:	83 e1 01             	and    ecx,0x1
c00060f5:	80 f9 01             	cmp    cl,0x1
c00060f8:	83 d3 00             	adc    ebx,0x0
c00060fb:	d0 e8                	shr    al,1
c00060fd:	4e                   	dec    esi
c00060fe:	39 fe                	cmp    esi,edi
c0006100:	75 ea                	jne    c00060ec <f_getfree+0xf4>
c0006102:	45                   	inc    ebp
c0006103:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006109:	85 f6                	test   esi,esi
c000610b:	75 8f                	jne    c000609c <f_getfree+0xa4>
c000610d:	e9 94 00 00 00       	jmp    c00061a6 <f_getfree+0x1ae>
c0006112:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006115:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006118:	31 f6                	xor    esi,esi
c000611a:	31 db                	xor    ebx,ebx
c000611c:	85 f6                	test   esi,esi
c000611e:	75 1b                	jne    c000613b <f_getfree+0x143>
c0006120:	89 d7                	mov    edi,edx
c0006122:	89 cd                	mov    ebp,ecx
c0006124:	83 c7 01             	add    edi,0x1
c0006127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612b:	83 d5 00             	adc    ebp,0x0
c000612e:	e8 ed c0 ff ff       	call   c0002220 <move_window>
c0006133:	85 c0                	test   eax,eax
c0006135:	75 6b                	jne    c00061a2 <f_getfree+0x1aa>
c0006137:	89 fa                	mov    edx,edi
c0006139:	89 e9                	mov    ecx,ebp
c000613b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006143:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006147:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000614a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000614e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006152:	75 11                	jne    c0006165 <f_getfree+0x16d>
c0006154:	e8 e9 b8 ff ff       	call   c0001a42 <ld_word>
c0006159:	66 83 f8 01          	cmp    ax,0x1
c000615d:	83 d3 00             	adc    ebx,0x0
c0006160:	83 c6 02             	add    esi,0x2
c0006163:	eb 13                	jmp    c0006178 <f_getfree+0x180>
c0006165:	e8 e5 b8 ff ff       	call   c0001a4f <ld_dword>
c000616a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000616f:	83 f8 01             	cmp    eax,0x1
c0006172:	83 d3 00             	adc    ebx,0x0
c0006175:	83 c6 04             	add    esi,0x4
c0006178:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000617e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006182:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006186:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000618a:	75 90                	jne    c000611c <f_getfree+0x124>
c000618c:	eb 18                	jmp    c00061a6 <f_getfree+0x1ae>
c000618e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006196:	eb 0e                	jmp    c00061a6 <f_getfree+0x1ae>
c0006198:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a0:	eb 04                	jmp    c00061a6 <f_getfree+0x1ae>
c00061a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061a6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061aa:	89 18                	mov    DWORD PTR [eax],ebx
c00061ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061b3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061bb:	83 c4 5c             	add    esp,0x5c
c00061be:	5b                   	pop    ebx
c00061bf:	5e                   	pop    esi
c00061c0:	5f                   	pop    edi
c00061c1:	5d                   	pop    ebp
c00061c2:	c3                   	ret    

c00061c3 <f_truncate>:
c00061c3:	56                   	push   esi
c00061c4:	53                   	push   ebx
c00061c5:	83 ec 14             	sub    esp,0x14
c00061c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061cc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d0:	89 d8                	mov    eax,ebx
c00061d2:	e8 6e bf ff ff       	call   c0002145 <validate>
c00061d7:	89 c6                	mov    esi,eax
c00061d9:	85 c0                	test   eax,eax
c00061db:	0f 85 d2 00 00 00    	jne    c00062b3 <f_truncate+0xf0>
c00061e1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061e5:	85 f6                	test   esi,esi
c00061e7:	0f 85 c6 00 00 00    	jne    c00062b3 <f_truncate+0xf0>
c00061ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f1:	0f 84 b7 00 00 00    	je     c00062ae <f_truncate+0xeb>
c00061f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006200:	89 d1                	mov    ecx,edx
c0006202:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006205:	0f 83 a8 00 00 00    	jae    c00062b3 <f_truncate+0xf0>
c000620b:	09 c2                	or     edx,eax
c000620d:	75 15                	jne    c0006224 <f_truncate+0x61>
c000620f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006212:	31 c9                	xor    ecx,ecx
c0006214:	89 d8                	mov    eax,ebx
c0006216:	e8 7a d0 ff ff       	call   c0003295 <remove_chain>
c000621b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006222:	eb 35                	jmp    c0006259 <f_truncate+0x96>
c0006224:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006227:	89 d8                	mov    eax,ebx
c0006229:	e8 7a cb ff ff       	call   c0002da8 <get_fat>
c000622e:	89 c2                	mov    edx,eax
c0006230:	b8 01 00 00 00       	mov    eax,0x1
c0006235:	83 fa ff             	cmp    edx,0xffffffff
c0006238:	74 1f                	je     c0006259 <f_truncate+0x96>
c000623a:	b8 02 00 00 00       	mov    eax,0x2
c000623f:	83 fa 01             	cmp    edx,0x1
c0006242:	74 15                	je     c0006259 <f_truncate+0x96>
c0006244:	31 c0                	xor    eax,eax
c0006246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000624a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000624d:	76 0a                	jbe    c0006259 <f_truncate+0x96>
c000624f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006252:	89 d8                	mov    eax,ebx
c0006254:	e8 3c d0 ff ff       	call   c0003295 <remove_chain>
c0006259:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000625c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000625f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006262:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006265:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006268:	83 ca 40             	or     edx,0x40
c000626b:	85 c0                	test   eax,eax
c000626d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006270:	75 35                	jne    c00062a7 <f_truncate+0xe4>
c0006272:	84 d2                	test   dl,dl
c0006274:	79 3d                	jns    c00062b3 <f_truncate+0xf0>
c0006276:	83 ec 0c             	sub    esp,0xc
c0006279:	8d 43 50             	lea    eax,[ebx+0x50]
c000627c:	6a 01                	push   0x1
c000627e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006281:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006284:	50                   	push   eax
c0006285:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006289:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000628d:	50                   	push   eax
c000628e:	e8 7a b7 ff ff       	call   c0001a0d <disk_write>
c0006293:	83 c4 20             	add    esp,0x20
c0006296:	85 c0                	test   eax,eax
c0006298:	75 08                	jne    c00062a2 <f_truncate+0xdf>
c000629a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000629e:	31 f6                	xor    esi,esi
c00062a0:	eb 11                	jmp    c00062b3 <f_truncate+0xf0>
c00062a2:	b8 01 00 00 00       	mov    eax,0x1
c00062a7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062aa:	89 c6                	mov    esi,eax
c00062ac:	eb 05                	jmp    c00062b3 <f_truncate+0xf0>
c00062ae:	be 07 00 00 00       	mov    esi,0x7
c00062b3:	89 f0                	mov    eax,esi
c00062b5:	83 c4 14             	add    esp,0x14
c00062b8:	5b                   	pop    ebx
c00062b9:	5e                   	pop    esi
c00062ba:	c3                   	ret    

c00062bb <f_unlink>:
c00062bb:	56                   	push   esi
c00062bc:	b9 02 00 00 00       	mov    ecx,0x2
c00062c1:	53                   	push   ebx
c00062c2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062cc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062d3:	e8 fa c1 ff ff       	call   c00024d2 <mount_volume>
c00062d8:	85 c0                	test   eax,eax
c00062da:	0f 85 55 01 00 00    	jne    c0006435 <f_unlink+0x17a>
c00062e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e4:	83 ec 0c             	sub    esp,0xc
c00062e7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062eb:	68 60 04 00 00       	push   0x460
c00062f0:	e8 80 1f 00 00       	call   c0008275 <ff_memalloc>
c00062f5:	83 c4 10             	add    esp,0x10
c00062f8:	89 c3                	mov    ebx,eax
c00062fa:	b8 11 00 00 00       	mov    eax,0x11
c00062ff:	85 db                	test   ebx,ebx
c0006301:	0f 84 2e 01 00 00    	je     c0006435 <f_unlink+0x17a>
c0006307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000630b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006311:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006314:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006317:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000631e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006322:	e8 21 e9 ff ff       	call   c0004c48 <follow_path>
c0006327:	85 c0                	test   eax,eax
c0006329:	0f 85 f2 00 00 00    	jne    c0006421 <f_unlink+0x166>
c000632f:	b8 06 00 00 00       	mov    eax,0x6
c0006334:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000633c:	0f 88 df 00 00 00    	js     c0006421 <f_unlink+0x166>
c0006342:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006347:	74 0a                	je     c0006353 <f_unlink+0x98>
c0006349:	b8 07 00 00 00       	mov    eax,0x7
c000634e:	e9 ce 00 00 00       	jmp    c0006421 <f_unlink+0x166>
c0006353:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006357:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000635b:	8a 02                	mov    al,BYTE PTR [edx]
c000635d:	3c 04                	cmp    al,0x4
c000635f:	75 12                	jne    c0006373 <f_unlink+0xb8>
c0006361:	8d 42 10             	lea    eax,[edx+0x10]
c0006364:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006368:	e8 a1 e8 ff ff       	call   c0004c0e <init_alloc_info.isra.2>
c000636d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006371:	eb 0e                	jmp    c0006381 <f_unlink+0xc6>
c0006373:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000637a:	e8 3e e8 ff ff       	call   c0004bbd <ld_clust.isra.0>
c000637f:	89 c6                	mov    esi,eax
c0006381:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006386:	75 12                	jne    c000639a <f_unlink+0xdf>
c0006388:	8d 44 24 48          	lea    eax,[esp+0x48]
c000638c:	e8 94 d6 ff ff       	call   c0003a25 <dir_remove>
c0006391:	85 c0                	test   eax,eax
c0006393:	74 6c                	je     c0006401 <f_unlink+0x146>
c0006395:	e9 87 00 00 00       	jmp    c0006421 <f_unlink+0x166>
c000639a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000639e:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063a5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063ac:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063af:	75 21                	jne    c00063d2 <f_unlink+0x117>
c00063b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063b9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063c7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063cb:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063d2:	31 d2                	xor    edx,edx
c00063d4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063db:	e8 be cb ff ff       	call   c0002f9e <dir_sdi>
c00063e0:	85 c0                	test   eax,eax
c00063e2:	75 3d                	jne    c0006421 <f_unlink+0x166>
c00063e4:	31 d2                	xor    edx,edx
c00063e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ed:	e8 bc d3 ff ff       	call   c00037ae <dir_read>
c00063f2:	85 c0                	test   eax,eax
c00063f4:	0f 84 4f ff ff ff    	je     c0006349 <f_unlink+0x8e>
c00063fa:	83 f8 04             	cmp    eax,0x4
c00063fd:	75 22                	jne    c0006421 <f_unlink+0x166>
c00063ff:	eb 87                	jmp    c0006388 <f_unlink+0xcd>
c0006401:	85 f6                	test   esi,esi
c0006403:	75 0b                	jne    c0006410 <f_unlink+0x155>
c0006405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006409:	e8 3d df ff ff       	call   c000434b <sync_fs>
c000640e:	eb 11                	jmp    c0006421 <f_unlink+0x166>
c0006410:	31 c9                	xor    ecx,ecx
c0006412:	89 f2                	mov    edx,esi
c0006414:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006418:	e8 78 ce ff ff       	call   c0003295 <remove_chain>
c000641d:	85 c0                	test   eax,eax
c000641f:	74 e4                	je     c0006405 <f_unlink+0x14a>
c0006421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006425:	83 ec 0c             	sub    esp,0xc
c0006428:	53                   	push   ebx
c0006429:	e8 5d 1e 00 00       	call   c000828b <ff_memfree>
c000642e:	83 c4 10             	add    esp,0x10
c0006431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006435:	81 c4 e4 00 00 00    	add    esp,0xe4
c000643b:	5b                   	pop    ebx
c000643c:	5e                   	pop    esi
c000643d:	c3                   	ret    

c000643e <f_mkdir>:
c000643e:	57                   	push   edi
c000643f:	b9 02 00 00 00       	mov    ecx,0x2
c0006444:	56                   	push   esi
c0006445:	53                   	push   ebx
c0006446:	83 c4 80             	add    esp,0xffffff80
c0006449:	8d 54 24 08          	lea    edx,[esp+0x8]
c000644d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006454:	e8 79 c0 ff ff       	call   c00024d2 <mount_volume>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	85 c0                	test   eax,eax
c000645d:	0f 85 fe 01 00 00    	jne    c0006661 <f_mkdir+0x223>
c0006463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006467:	bb 11 00 00 00       	mov    ebx,0x11
c000646c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006470:	83 ec 0c             	sub    esp,0xc
c0006473:	68 60 04 00 00       	push   0x460
c0006478:	e8 f8 1d 00 00       	call   c0008275 <ff_memalloc>
c000647d:	83 c4 10             	add    esp,0x10
c0006480:	89 c7                	mov    edi,eax
c0006482:	85 c0                	test   eax,eax
c0006484:	0f 84 d7 01 00 00    	je     c0006661 <f_mkdir+0x223>
c000648a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006494:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006497:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000649a:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064a5:	e8 9e e7 ff ff       	call   c0004c48 <follow_path>
c00064aa:	89 c3                	mov    ebx,eax
c00064ac:	85 c0                	test   eax,eax
c00064ae:	74 3e                	je     c00064ee <f_mkdir+0xb0>
c00064b0:	83 f8 04             	cmp    eax,0x4
c00064b3:	75 3e                	jne    c00064f3 <f_mkdir+0xb5>
c00064b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b9:	31 d2                	xor    edx,edx
c00064bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064c3:	e8 ce cb ff ff       	call   c0003096 <create_chain>
c00064c8:	89 c6                	mov    esi,eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	74 0c                	je     c00064da <f_mkdir+0x9c>
c00064ce:	bb 02 00 00 00       	mov    ebx,0x2
c00064d3:	83 f8 01             	cmp    eax,0x1
c00064d6:	74 07                	je     c00064df <f_mkdir+0xa1>
c00064d8:	eb 2a                	jmp    c0006504 <f_mkdir+0xc6>
c00064da:	bb 07 00 00 00       	mov    ebx,0x7
c00064df:	31 c9                	xor    ecx,ecx
c00064e1:	89 f2                	mov    edx,esi
c00064e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064e7:	e8 a9 cd ff ff       	call   c0003295 <remove_chain>
c00064ec:	eb 05                	jmp    c00064f3 <f_mkdir+0xb5>
c00064ee:	bb 08 00 00 00       	mov    ebx,0x8
c00064f3:	83 ec 0c             	sub    esp,0xc
c00064f6:	57                   	push   edi
c00064f7:	e8 8f 1d 00 00       	call   c000828b <ff_memfree>
c00064fc:	83 c4 10             	add    esp,0x10
c00064ff:	e9 5d 01 00 00       	jmp    c0006661 <f_mkdir+0x223>
c0006504:	bb 01 00 00 00       	mov    ebx,0x1
c0006509:	83 f8 ff             	cmp    eax,0xffffffff
c000650c:	74 d1                	je     c00064df <f_mkdir+0xa1>
c000650e:	89 f2                	mov    edx,esi
c0006510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006514:	e8 c4 ce ff ff       	call   c00033dd <dir_clear>
c0006519:	89 c3                	mov    ebx,eax
c000651b:	85 c0                	test   eax,eax
c000651d:	75 c0                	jne    c00064df <f_mkdir+0xa1>
c000651f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006523:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006526:	74 69                	je     c0006591 <f_mkdir+0x153>
c0006528:	b9 0b 00 00 00       	mov    ecx,0xb
c000652d:	83 c0 54             	add    eax,0x54
c0006530:	ba 20 00 00 00       	mov    edx,0x20
c0006535:	e8 9c b5 ff ff       	call   c0001ad6 <mem_set>
c000653a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006543:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006547:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000654b:	83 c0 6a             	add    eax,0x6a
c000654e:	e8 65 b5 ff ff       	call   c0001ab8 <st_dword>
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	89 f1                	mov    ecx,esi
c0006559:	8d 50 54             	lea    edx,[eax+0x54]
c000655c:	e8 85 e6 ff ff       	call   c0004be6 <st_clust.isra.1>
c0006561:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006565:	b9 20 00 00 00       	mov    ecx,0x20
c000656a:	8d 50 54             	lea    edx,[eax+0x54]
c000656d:	83 c0 74             	add    eax,0x74
c0006570:	e8 4c b5 ff ff       	call   c0001ac1 <mem_cpy>
c0006575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006579:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000657d:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006581:	8d 50 74             	lea    edx,[eax+0x74]
c0006584:	e8 5d e6 ff ff       	call   c0004be6 <st_clust.isra.1>
c0006589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006591:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006595:	e8 2f db ff ff       	call   c00040c9 <dir_register>
c000659a:	89 c3                	mov    ebx,eax
c000659c:	85 c0                	test   eax,eax
c000659e:	0f 85 3b ff ff ff    	jne    c00064df <f_mkdir+0xa1>
c00065a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ab:	75 74                	jne    c0006621 <f_mkdir+0x1e3>
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	ba 00 00 21 50       	mov    edx,0x50210000
c00065b5:	83 c0 0c             	add    eax,0xc
c00065b8:	e8 fb b4 ff ff       	call   c0001ab8 <st_dword>
c00065bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c1:	89 f2                	mov    edx,esi
c00065c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c6:	83 c0 34             	add    eax,0x34
c00065c9:	e8 ea b4 ff ff       	call   c0001ab8 <st_dword>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d9:	c1 e2 09             	shl    edx,0x9
c00065dc:	83 c0 38             	add    eax,0x38
c00065df:	e8 d4 b4 ff ff       	call   c0001ab8 <st_dword>
c00065e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ef:	c1 e2 09             	shl    edx,0x9
c00065f2:	83 c0 28             	add    eax,0x28
c00065f5:	e8 be b4 ff ff       	call   c0001ab8 <st_dword>
c00065fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006601:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006605:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006608:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000660c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006610:	e8 8b d3 ff ff       	call   c00039a0 <store_xdir>
c0006615:	89 c3                	mov    ebx,eax
c0006617:	85 c0                	test   eax,eax
c0006619:	0f 85 d4 fe ff ff    	jne    c00064f3 <f_mkdir+0xb5>
c000661f:	eb 30                	jmp    c0006651 <f_mkdir+0x213>
c0006621:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006625:	ba 00 00 21 50       	mov    edx,0x50210000
c000662a:	83 c0 16             	add    eax,0x16
c000662d:	e8 86 b4 ff ff       	call   c0001ab8 <st_dword>
c0006632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006636:	89 f1                	mov    ecx,esi
c0006638:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000663c:	e8 a5 e5 ff ff       	call   c0004be6 <st_clust.isra.1>
c0006641:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006645:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006649:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	e8 f1 dc ff ff       	call   c000434b <sync_fs>
c000665a:	89 c3                	mov    ebx,eax
c000665c:	e9 92 fe ff ff       	jmp    c00064f3 <f_mkdir+0xb5>
c0006661:	83 ec 80             	sub    esp,0xffffff80
c0006664:	89 d8                	mov    eax,ebx
c0006666:	5b                   	pop    ebx
c0006667:	5e                   	pop    esi
c0006668:	5f                   	pop    edi
c0006669:	c3                   	ret    

c000666a <f_rename>:
c000666a:	55                   	push   ebp
c000666b:	57                   	push   edi
c000666c:	56                   	push   esi
c000666d:	53                   	push   ebx
c000666e:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006674:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000667b:	e8 a4 b9 ff ff       	call   c0002024 <get_ldnumber>
c0006680:	b9 02 00 00 00       	mov    ecx,0x2
c0006685:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006689:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006690:	e8 3d be ff ff       	call   c00024d2 <mount_volume>
c0006695:	85 c0                	test   eax,eax
c0006697:	0f 85 b5 02 00 00    	jne    c0006952 <f_rename+0x2e8>
c000669d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a1:	83 ec 0c             	sub    esp,0xc
c00066a4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066a8:	68 60 04 00 00       	push   0x460
c00066ad:	e8 c3 1b 00 00       	call   c0008275 <ff_memalloc>
c00066b2:	83 c4 10             	add    esp,0x10
c00066b5:	89 c3                	mov    ebx,eax
c00066b7:	b8 11 00 00 00       	mov    eax,0x11
c00066bc:	85 db                	test   ebx,ebx
c00066be:	0f 84 8e 02 00 00    	je     c0006952 <f_rename+0x2e8>
c00066c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066ce:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066d4:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066db:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066df:	e8 64 e5 ff ff       	call   c0004c48 <follow_path>
c00066e4:	85 c0                	test   eax,eax
c00066e6:	0f 85 52 02 00 00    	jne    c000693e <f_rename+0x2d4>
c00066ec:	b8 06 00 00 00       	mov    eax,0x6
c00066f1:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066f9:	0f 85 3f 02 00 00    	jne    c000693e <f_rename+0x2d4>
c00066ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006703:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006706:	0f 85 05 01 00 00    	jne    c0006811 <f_rename+0x1a7>
c000670c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000670f:	b9 40 00 00 00       	mov    ecx,0x40
c0006714:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006718:	e8 a4 b3 ff ff       	call   c0001ac1 <mem_cpy>
c000671d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006722:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006726:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000672d:	e8 8f b3 ff ff       	call   c0001ac1 <mem_cpy>
c0006732:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006739:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006740:	e8 03 e5 ff ff       	call   c0004c48 <follow_path>
c0006745:	85 c0                	test   eax,eax
c0006747:	75 29                	jne    c0006772 <f_rename+0x108>
c0006749:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000674d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006754:	74 0a                	je     c0006760 <f_rename+0xf6>
c0006756:	b8 08 00 00 00       	mov    eax,0x8
c000675b:	e9 de 01 00 00       	jmp    c000693e <f_rename+0x2d4>
c0006760:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006767:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000676e:	75 e6                	jne    c0006756 <f_rename+0xec>
c0006770:	eb 09                	jmp    c000677b <f_rename+0x111>
c0006772:	83 f8 04             	cmp    eax,0x4
c0006775:	0f 85 c3 01 00 00    	jne    c000693e <f_rename+0x2d4>
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 42 d9 ff ff       	call   c00040c9 <dir_register>
c0006787:	85 c0                	test   eax,eax
c0006789:	0f 85 af 01 00 00    	jne    c000693e <f_rename+0x2d4>
c000678f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006793:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006796:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006799:	89 c5                	mov    ebp,eax
c000679b:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000679e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067a2:	8d 46 24             	lea    eax,[esi+0x24]
c00067a5:	e8 98 b2 ff ff       	call   c0001a42 <ld_word>
c00067aa:	b9 40 00 00 00       	mov    ecx,0x40
c00067af:	89 c7                	mov    edi,eax
c00067b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067b5:	89 f0                	mov    eax,esi
c00067b7:	e8 05 b3 ff ff       	call   c0001ac1 <mem_cpy>
c00067bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c0:	89 e9                	mov    ecx,ebp
c00067c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067d3:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067d6:	0f b7 d7             	movzx  edx,di
c00067d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067dc:	83 c0 24             	add    eax,0x24
c00067df:	e8 d0 b2 ff ff       	call   c0001ab4 <st_word>
c00067e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067eb:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ee:	a8 10                	test   al,0x10
c00067f0:	75 06                	jne    c00067f8 <f_rename+0x18e>
c00067f2:	83 c8 20             	or     eax,0x20
c00067f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ff:	e8 9c d1 ff ff       	call   c00039a0 <store_xdir>
c0006804:	85 c0                	test   eax,eax
c0006806:	0f 84 1c 01 00 00    	je     c0006928 <f_rename+0x2be>
c000680c:	e9 2d 01 00 00       	jmp    c000693e <f_rename+0x2d4>
c0006811:	b9 20 00 00 00       	mov    ecx,0x20
c0006816:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000681d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006821:	e8 9b b2 ff ff       	call   c0001ac1 <mem_cpy>
c0006826:	b9 4c 00 00 00       	mov    ecx,0x4c
c000682b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000682f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006836:	e8 86 b2 ff ff       	call   c0001ac1 <mem_cpy>
c000683b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006842:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006849:	e8 fa e3 ff ff       	call   c0004c48 <follow_path>
c000684e:	85 c0                	test   eax,eax
c0006850:	75 27                	jne    c0006879 <f_rename+0x20f>
c0006852:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006856:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000685d:	0f 85 f3 fe ff ff    	jne    c0006756 <f_rename+0xec>
c0006863:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000686a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006871:	0f 85 df fe ff ff    	jne    c0006756 <f_rename+0xec>
c0006877:	eb 09                	jmp    c0006882 <f_rename+0x218>
c0006879:	83 f8 04             	cmp    eax,0x4
c000687c:	0f 85 bc 00 00 00    	jne    c000693e <f_rename+0x2d4>
c0006882:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006889:	e8 3b d8 ff ff       	call   c00040c9 <dir_register>
c000688e:	85 c0                	test   eax,eax
c0006890:	0f 85 a8 00 00 00    	jne    c000693e <f_rename+0x2d4>
c0006896:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000689d:	b9 13 00 00 00       	mov    ecx,0x13
c00068a2:	8d 46 0d             	lea    eax,[esi+0xd]
c00068a5:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068a9:	e8 13 b2 ff ff       	call   c0001ac1 <mem_cpy>
c00068ae:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068b2:	a8 10                	test   al,0x10
c00068b4:	75 03                	jne    c00068b9 <f_rename+0x24f>
c00068b6:	83 c8 20             	or     eax,0x20
c00068b9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068c4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068c8:	74 5e                	je     c0006928 <f_rename+0x2be>
c00068ca:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d1:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068d5:	74 51                	je     c0006928 <f_rename+0x2be>
c00068d7:	89 f2                	mov    edx,esi
c00068d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068dd:	8a 07                	mov    al,BYTE PTR [edi]
c00068df:	e8 d9 e2 ff ff       	call   c0004bbd <ld_clust.isra.0>
c00068e4:	89 c2                	mov    edx,eax
c00068e6:	89 f8                	mov    eax,edi
c00068e8:	e8 ee b3 ff ff       	call   c0001cdb <clst2sect>
c00068ed:	89 c6                	mov    esi,eax
c00068ef:	89 d1                	mov    ecx,edx
c00068f1:	b8 02 00 00 00       	mov    eax,0x2
c00068f6:	09 f2                	or     edx,esi
c00068f8:	74 44                	je     c000693e <f_rename+0x2d4>
c00068fa:	89 f2                	mov    edx,esi
c00068fc:	89 f8                	mov    eax,edi
c00068fe:	e8 1d b9 ff ff       	call   c0002220 <move_window>
c0006903:	85 c0                	test   eax,eax
c0006905:	75 37                	jne    c000693e <f_rename+0x2d4>
c0006907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000690f:	75 17                	jne    c0006928 <f_rename+0x2be>
c0006911:	8d 50 74             	lea    edx,[eax+0x74]
c0006914:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000691b:	e8 c6 e2 ff ff       	call   c0004be6 <st_clust.isra.1>
c0006920:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006924:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006928:	8d 44 24 58          	lea    eax,[esp+0x58]
c000692c:	e8 f4 d0 ff ff       	call   c0003a25 <dir_remove>
c0006931:	85 c0                	test   eax,eax
c0006933:	75 09                	jne    c000693e <f_rename+0x2d4>
c0006935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006939:	e8 0d da ff ff       	call   c000434b <sync_fs>
c000693e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006942:	83 ec 0c             	sub    esp,0xc
c0006945:	53                   	push   ebx
c0006946:	e8 40 19 00 00       	call   c000828b <ff_memfree>
c000694b:	83 c4 10             	add    esp,0x10
c000694e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006952:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006958:	5b                   	pop    ebx
c0006959:	5e                   	pop    esi
c000695a:	5f                   	pop    edi
c000695b:	5d                   	pop    ebp
c000695c:	c3                   	ret    

c000695d <f_chmod>:
c000695d:	57                   	push   edi
c000695e:	b9 02 00 00 00       	mov    ecx,0x2
c0006963:	56                   	push   esi
c0006964:	53                   	push   ebx
c0006965:	83 ec 60             	sub    esp,0x60
c0006968:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000696c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006970:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006974:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006978:	e8 55 bb ff ff       	call   c00024d2 <mount_volume>
c000697d:	85 c0                	test   eax,eax
c000697f:	0f 85 af 00 00 00    	jne    c0006a34 <f_chmod+0xd7>
c0006985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006989:	83 ec 0c             	sub    esp,0xc
c000698c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006990:	68 60 04 00 00       	push   0x460
c0006995:	e8 db 18 00 00       	call   c0008275 <ff_memalloc>
c000699a:	83 c4 10             	add    esp,0x10
c000699d:	89 c6                	mov    esi,eax
c000699f:	b8 11 00 00 00       	mov    eax,0x11
c00069a4:	85 f6                	test   esi,esi
c00069a6:	0f 84 88 00 00 00    	je     c0006a34 <f_chmod+0xd7>
c00069ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069b6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069b9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069bc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c4:	e8 7f e2 ff ff       	call   c0004c48 <follow_path>
c00069c9:	85 c0                	test   eax,eax
c00069cb:	75 53                	jne    c0006a20 <f_chmod+0xc3>
c00069cd:	b8 06 00 00 00       	mov    eax,0x6
c00069d2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069d7:	75 47                	jne    c0006a20 <f_chmod+0xc3>
c00069d9:	89 f9                	mov    ecx,edi
c00069db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069df:	83 e1 27             	and    ecx,0x27
c00069e2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069e5:	75 1d                	jne    c0006a04 <f_chmod+0xa7>
c00069e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ea:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ed:	21 cb                	and    ebx,ecx
c00069ef:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f2:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f9:	e8 a2 cf ff ff       	call   c00039a0 <store_xdir>
c00069fe:	85 c0                	test   eax,eax
c0006a00:	75 1e                	jne    c0006a20 <f_chmod+0xc3>
c0006a02:	eb 13                	jmp    c0006a17 <f_chmod+0xba>
c0006a04:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a08:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a0b:	21 cb                	and    ebx,ecx
c0006a0d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a10:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a1b:	e8 2b d9 ff ff       	call   c000434b <sync_fs>
c0006a20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a24:	83 ec 0c             	sub    esp,0xc
c0006a27:	56                   	push   esi
c0006a28:	e8 5e 18 00 00       	call   c000828b <ff_memfree>
c0006a2d:	83 c4 10             	add    esp,0x10
c0006a30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a34:	83 c4 60             	add    esp,0x60
c0006a37:	5b                   	pop    ebx
c0006a38:	5e                   	pop    esi
c0006a39:	5f                   	pop    edi
c0006a3a:	c3                   	ret    

c0006a3b <f_utime>:
c0006a3b:	56                   	push   esi
c0006a3c:	b9 02 00 00 00       	mov    ecx,0x2
c0006a41:	53                   	push   ebx
c0006a42:	83 ec 64             	sub    esp,0x64
c0006a45:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a4d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a51:	e8 7c ba ff ff       	call   c00024d2 <mount_volume>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	0f 85 b5 00 00 00    	jne    c0006b13 <f_utime+0xd8>
c0006a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a62:	83 ec 0c             	sub    esp,0xc
c0006a65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a69:	68 60 04 00 00       	push   0x460
c0006a6e:	e8 02 18 00 00       	call   c0008275 <ff_memalloc>
c0006a73:	83 c4 10             	add    esp,0x10
c0006a76:	89 c3                	mov    ebx,eax
c0006a78:	b8 11 00 00 00       	mov    eax,0x11
c0006a7d:	85 db                	test   ebx,ebx
c0006a7f:	0f 84 8e 00 00 00    	je     c0006b13 <f_utime+0xd8>
c0006a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a89:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a8f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a95:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 a6 e1 ff ff       	call   c0004c48 <follow_path>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	75 59                	jne    c0006aff <f_utime+0xc4>
c0006aa6:	b8 06 00 00 00       	mov    eax,0x6
c0006aab:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab0:	75 4d                	jne    c0006aff <f_utime+0xc4>
c0006ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006aba:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006abe:	c1 e2 10             	shl    edx,0x10
c0006ac1:	09 ca                	or     edx,ecx
c0006ac3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac6:	75 1a                	jne    c0006ae2 <f_utime+0xa7>
c0006ac8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006acb:	83 c0 0c             	add    eax,0xc
c0006ace:	e8 e5 af ff ff       	call   c0001ab8 <st_dword>
c0006ad3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad7:	e8 c4 ce ff ff       	call   c00039a0 <store_xdir>
c0006adc:	85 c0                	test   eax,eax
c0006ade:	75 1f                	jne    c0006aff <f_utime+0xc4>
c0006ae0:	eb 14                	jmp    c0006af6 <f_utime+0xbb>
c0006ae2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ae6:	83 c0 16             	add    eax,0x16
c0006ae9:	e8 ca af ff ff       	call   c0001ab8 <st_dword>
c0006aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	e8 4c d8 ff ff       	call   c000434b <sync_fs>
c0006aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b03:	83 ec 0c             	sub    esp,0xc
c0006b06:	53                   	push   ebx
c0006b07:	e8 7f 17 00 00       	call   c000828b <ff_memfree>
c0006b0c:	83 c4 10             	add    esp,0x10
c0006b0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b13:	83 c4 64             	add    esp,0x64
c0006b16:	5b                   	pop    ebx
c0006b17:	5e                   	pop    esi
c0006b18:	c3                   	ret    

c0006b19 <f_getlabel>:
c0006b19:	55                   	push   ebp
c0006b1a:	31 c9                	xor    ecx,ecx
c0006b1c:	57                   	push   edi
c0006b1d:	56                   	push   esi
c0006b1e:	53                   	push   ebx
c0006b1f:	83 ec 6c             	sub    esp,0x6c
c0006b22:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b2d:	e8 a0 b9 ff ff       	call   c00024d2 <mount_volume>
c0006b32:	89 c6                	mov    esi,eax
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 c1 01 00 00    	jne    c0006cfd <f_getlabel+0x1e4>
c0006b3c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b44:	0f 84 5f 01 00 00    	je     c0006ca9 <f_getlabel+0x190>
c0006b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b4e:	31 d2                	xor    edx,edx
c0006b50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b60:	e8 39 c4 ff ff       	call   c0002f9e <dir_sdi>
c0006b65:	85 c0                	test   eax,eax
c0006b67:	0f 85 2d 01 00 00    	jne    c0006c9a <f_getlabel+0x181>
c0006b6d:	ba 01 00 00 00       	mov    edx,0x1
c0006b72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b76:	e8 33 cc ff ff       	call   c00037ae <dir_read>
c0006b7b:	85 c0                	test   eax,eax
c0006b7d:	0f 85 17 01 00 00    	jne    c0006c9a <f_getlabel+0x181>
c0006b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b87:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b8a:	74 09                	je     c0006b95 <f_getlabel+0x7c>
c0006b8c:	31 db                	xor    ebx,ebx
c0006b8e:	31 c9                	xor    ecx,ecx
c0006b90:	e9 c8 00 00 00       	jmp    c0006c5d <f_getlabel+0x144>
c0006b95:	31 ed                	xor    ebp,ebp
c0006b97:	31 db                	xor    ebx,ebx
c0006b99:	31 ff                	xor    edi,edi
c0006b9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b9f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ba3:	39 fa                	cmp    edx,edi
c0006ba5:	76 4b                	jbe    c0006bf2 <f_getlabel+0xd9>
c0006ba7:	47                   	inc    edi
c0006ba8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bab:	01 d0                	add    eax,edx
c0006bad:	e8 90 ae ff ff       	call   c0001a42 <ld_word>
c0006bb2:	66 85 ed             	test   bp,bp
c0006bb5:	75 0d                	jne    c0006bc4 <f_getlabel+0xab>
c0006bb7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bbd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bc2:	76 28                	jbe    c0006bec <f_getlabel+0xd3>
c0006bc4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bcb:	89 e9                	mov    ecx,ebp
c0006bcd:	01 da                	add    edx,ebx
c0006bcf:	c1 e1 10             	shl    ecx,0x10
c0006bd2:	0f b7 c0             	movzx  eax,ax
c0006bd5:	09 c8                	or     eax,ecx
c0006bd7:	b9 04 00 00 00       	mov    ecx,0x4
c0006bdc:	e8 01 b0 ff ff       	call   c0001be2 <put_utf>
c0006be1:	84 c0                	test   al,al
c0006be3:	74 0b                	je     c0006bf0 <f_getlabel+0xd7>
c0006be5:	0f b6 c0             	movzx  eax,al
c0006be8:	01 c3                	add    ebx,eax
c0006bea:	31 c0                	xor    eax,eax
c0006bec:	89 c5                	mov    ebp,eax
c0006bee:	eb ab                	jmp    c0006b9b <f_getlabel+0x82>
c0006bf0:	31 db                	xor    ebx,ebx
c0006bf2:	66 85 ed             	test   bp,bp
c0006bf5:	74 02                	je     c0006bf9 <f_getlabel+0xe0>
c0006bf7:	31 db                	xor    ebx,ebx
c0006bf9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c00:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c04:	e9 a0 00 00 00       	jmp    c0006ca9 <f_getlabel+0x190>
c0006c09:	83 ff 0b             	cmp    edi,0xb
c0006c0c:	74 11                	je     c0006c1f <f_getlabel+0x106>
c0006c0e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c17:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c1a:	c1 e0 08             	shl    eax,0x8
c0006c1d:	09 c2                	or     edx,eax
c0006c1f:	0f b7 d2             	movzx  edx,dx
c0006c22:	50                   	push   eax
c0006c23:	50                   	push   eax
c0006c24:	68 b5 01 00 00       	push   0x1b5
c0006c29:	52                   	push   edx
c0006c2a:	e8 03 17 00 00       	call   c0008332 <ff_oem2uni>
c0006c2f:	83 c4 10             	add    esp,0x10
c0006c32:	66 85 c0             	test   ax,ax
c0006c35:	74 46                	je     c0006c7d <f_getlabel+0x164>
c0006c37:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c3e:	0f b7 c0             	movzx  eax,ax
c0006c41:	01 da                	add    edx,ebx
c0006c43:	b9 04 00 00 00       	mov    ecx,0x4
c0006c48:	e8 95 af ff ff       	call   c0001be2 <put_utf>
c0006c4d:	84 c0                	test   al,al
c0006c4f:	74 2c                	je     c0006c7d <f_getlabel+0x164>
c0006c51:	0f b6 c0             	movzx  eax,al
c0006c54:	01 c3                	add    ebx,eax
c0006c56:	83 ff 0b             	cmp    edi,0xb
c0006c59:	74 24                	je     c0006c7f <f_getlabel+0x166>
c0006c5b:	89 f9                	mov    ecx,edi
c0006c5d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c61:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c64:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c69:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c72:	e8 9f ae ff ff       	call   c0001b16 <dbc_1st>
c0006c77:	85 c0                	test   eax,eax
c0006c79:	74 a4                	je     c0006c1f <f_getlabel+0x106>
c0006c7b:	eb 8c                	jmp    c0006c09 <f_getlabel+0xf0>
c0006c7d:	31 db                	xor    ebx,ebx
c0006c7f:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c86:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c89:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c90:	74 17                	je     c0006ca9 <f_getlabel+0x190>
c0006c92:	4b                   	dec    ebx
c0006c93:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c96:	74 ee                	je     c0006c86 <f_getlabel+0x16d>
c0006c98:	eb 0f                	jmp    c0006ca9 <f_getlabel+0x190>
c0006c9a:	83 f8 04             	cmp    eax,0x4
c0006c9d:	75 5c                	jne    c0006cfb <f_getlabel+0x1e2>
c0006c9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ca6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ca9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb1:	74 4a                	je     c0006cfd <f_getlabel+0x1e4>
c0006cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cba:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cbd:	e8 5e b5 ff ff       	call   c0002220 <move_window>
c0006cc2:	89 c6                	mov    esi,eax
c0006cc4:	85 c0                	test   eax,eax
c0006cc6:	75 35                	jne    c0006cfd <f_getlabel+0x1e4>
c0006cc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ccc:	b8 43 00 00 00       	mov    eax,0x43
c0006cd1:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cd3:	80 f9 03             	cmp    cl,0x3
c0006cd6:	74 0f                	je     c0006ce7 <f_getlabel+0x1ce>
c0006cd8:	31 c0                	xor    eax,eax
c0006cda:	80 f9 04             	cmp    cl,0x4
c0006cdd:	0f 94 c0             	sete   al
c0006ce0:	48                   	dec    eax
c0006ce1:	83 e0 c3             	and    eax,0xffffffc3
c0006ce4:	83 c0 64             	add    eax,0x64
c0006ce7:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ceb:	e8 5f ad ff ff       	call   c0001a4f <ld_dword>
c0006cf0:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cf7:	89 07                	mov    DWORD PTR [edi],eax
c0006cf9:	eb 02                	jmp    c0006cfd <f_getlabel+0x1e4>
c0006cfb:	89 c6                	mov    esi,eax
c0006cfd:	83 c4 6c             	add    esp,0x6c
c0006d00:	89 f0                	mov    eax,esi
c0006d02:	5b                   	pop    ebx
c0006d03:	5e                   	pop    esi
c0006d04:	5f                   	pop    edi
c0006d05:	5d                   	pop    ebp
c0006d06:	c3                   	ret    

c0006d07 <f_setlabel>:
c0006d07:	56                   	push   esi
c0006d08:	b9 02 00 00 00       	mov    ecx,0x2
c0006d0d:	53                   	push   ebx
c0006d0e:	83 ec 74             	sub    esp,0x74
c0006d11:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d15:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1c:	e8 b1 b7 ff ff       	call   c00024d2 <mount_volume>
c0006d21:	89 c6                	mov    esi,eax
c0006d23:	85 c0                	test   eax,eax
c0006d25:	0f 85 41 02 00 00    	jne    c0006f6c <f_setlabel+0x265>
c0006d2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d2f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d32:	0f 85 8e 00 00 00    	jne    c0006dc6 <f_setlabel+0xbf>
c0006d38:	b9 16 00 00 00       	mov    ecx,0x16
c0006d3d:	31 d2                	xor    edx,edx
c0006d3f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d43:	31 db                	xor    ebx,ebx
c0006d45:	e8 8c ad ff ff       	call   c0001ad6 <mem_set>
c0006d4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d51:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d54:	0f 86 0a 01 00 00    	jbe    c0006e64 <f_setlabel+0x15d>
c0006d5a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d61:	e8 b6 ad ff ff       	call   c0001b1c <tchar2uni>
c0006d66:	89 c6                	mov    esi,eax
c0006d68:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d6d:	76 2a                	jbe    c0006d99 <f_setlabel+0x92>
c0006d6f:	83 f8 ff             	cmp    eax,0xffffffff
c0006d72:	74 05                	je     c0006d79 <f_setlabel+0x72>
c0006d74:	83 fb 09             	cmp    ebx,0x9
c0006d77:	76 0a                	jbe    c0006d83 <f_setlabel+0x7c>
c0006d79:	be 06 00 00 00       	mov    esi,0x6
c0006d7e:	e9 e9 01 00 00       	jmp    c0006f6c <f_setlabel+0x265>
c0006d83:	89 c2                	mov    edx,eax
c0006d85:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d89:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d8c:	c1 ea 10             	shr    edx,0x10
c0006d8f:	01 c8                	add    eax,ecx
c0006d91:	43                   	inc    ebx
c0006d92:	e8 1d ad ff ff       	call   c0001ab4 <st_word>
c0006d97:	eb 04                	jmp    c0006d9d <f_setlabel+0x96>
c0006d99:	85 c0                	test   eax,eax
c0006d9b:	74 dc                	je     c0006d79 <f_setlabel+0x72>
c0006d9d:	89 f2                	mov    edx,esi
c0006d9f:	b8 f7 8a 02 c0       	mov    eax,0xc0028af7
c0006da4:	e8 5b ad ff ff       	call   c0001b04 <chk_chr>
c0006da9:	85 c0                	test   eax,eax
c0006dab:	75 cc                	jne    c0006d79 <f_setlabel+0x72>
c0006dad:	83 fb 0a             	cmp    ebx,0xa
c0006db0:	77 c7                	ja     c0006d79 <f_setlabel+0x72>
c0006db2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db9:	0f b7 d6             	movzx  edx,si
c0006dbc:	01 c8                	add    eax,ecx
c0006dbe:	43                   	inc    ebx
c0006dbf:	e8 f0 ac ff ff       	call   c0001ab4 <st_word>
c0006dc4:	eb 84                	jmp    c0006d4a <f_setlabel+0x43>
c0006dc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dcb:	ba 20 00 00 00       	mov    edx,0x20
c0006dd0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dd4:	31 db                	xor    ebx,ebx
c0006dd6:	e8 fb ac ff ff       	call   c0001ad6 <mem_set>
c0006ddb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006de2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006de5:	76 60                	jbe    c0006e47 <f_setlabel+0x140>
c0006de7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dee:	e8 29 ad ff ff       	call   c0001b1c <tchar2uni>
c0006df3:	3d ff ff 00 00       	cmp    eax,0xffff
c0006df8:	0f 87 7b ff ff ff    	ja     c0006d79 <f_setlabel+0x72>
c0006dfe:	83 ec 0c             	sub    esp,0xc
c0006e01:	50                   	push   eax
c0006e02:	e8 97 15 00 00       	call   c000839e <ff_wtoupper>
c0006e07:	5a                   	pop    edx
c0006e08:	59                   	pop    ecx
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	50                   	push   eax
c0006e0f:	e8 8e 14 00 00       	call   c00082a2 <ff_uni2oem>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	89 c6                	mov    esi,eax
c0006e19:	66 85 c0             	test   ax,ax
c0006e1c:	0f 84 57 ff ff ff    	je     c0006d79 <f_setlabel+0x72>
c0006e22:	0f b7 d0             	movzx  edx,ax
c0006e25:	b8 f0 8a 02 c0       	mov    eax,0xc0028af0
c0006e2a:	e8 d5 ac ff ff       	call   c0001b04 <chk_chr>
c0006e2f:	85 c0                	test   eax,eax
c0006e31:	0f 85 42 ff ff ff    	jne    c0006d79 <f_setlabel+0x72>
c0006e37:	66 81 fe ff 00       	cmp    si,0xff
c0006e3c:	0f 87 14 01 00 00    	ja     c0006f56 <f_setlabel+0x24f>
c0006e42:	e9 fa 00 00 00       	jmp    c0006f41 <f_setlabel+0x23a>
c0006e47:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e4c:	0f 84 27 ff ff ff    	je     c0006d79 <f_setlabel+0x72>
c0006e52:	85 db                	test   ebx,ebx
c0006e54:	74 0e                	je     c0006e64 <f_setlabel+0x15d>
c0006e56:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e59:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e5e:	75 04                	jne    c0006e64 <f_setlabel+0x15d>
c0006e60:	89 c3                	mov    ebx,eax
c0006e62:	eb ee                	jmp    c0006e52 <f_setlabel+0x14b>
c0006e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e68:	31 d2                	xor    edx,edx
c0006e6a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e6e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e7a:	e8 1f c1 ff ff       	call   c0002f9e <dir_sdi>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	85 c0                	test   eax,eax
c0006e83:	0f 85 e3 00 00 00    	jne    c0006f6c <f_setlabel+0x265>
c0006e89:	ba 01 00 00 00       	mov    edx,0x1
c0006e8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e92:	e8 17 c9 ff ff       	call   c00037ae <dir_read>
c0006e97:	85 c0                	test   eax,eax
c0006e99:	75 21                	jne    c0006ebc <f_setlabel+0x1b5>
c0006e9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e9f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ea6:	74 5d                	je     c0006f05 <f_setlabel+0x1fe>
c0006ea8:	85 db                	test   ebx,ebx
c0006eaa:	74 0b                	je     c0006eb7 <f_setlabel+0x1b0>
c0006eac:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006eb5:	eb 70                	jmp    c0006f27 <f_setlabel+0x220>
c0006eb7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eba:	eb 70                	jmp    c0006f2c <f_setlabel+0x225>
c0006ebc:	83 f8 04             	cmp    eax,0x4
c0006ebf:	75 7c                	jne    c0006f3d <f_setlabel+0x236>
c0006ec1:	85 db                	test   ebx,ebx
c0006ec3:	0f 84 a3 00 00 00    	je     c0006f6c <f_setlabel+0x265>
c0006ec9:	ba 01 00 00 00       	mov    edx,0x1
c0006ece:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ed2:	e8 51 ca ff ff       	call   c0003928 <dir_alloc>
c0006ed7:	89 c6                	mov    esi,eax
c0006ed9:	85 c0                	test   eax,eax
c0006edb:	0f 85 8b 00 00 00    	jne    c0006f6c <f_setlabel+0x265>
c0006ee1:	31 d2                	xor    edx,edx
c0006ee3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee7:	b9 20 00 00 00       	mov    ecx,0x20
c0006eec:	e8 e5 ab ff ff       	call   c0001ad6 <mem_set>
c0006ef1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ef8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006efc:	75 18                	jne    c0006f16 <f_setlabel+0x20f>
c0006efe:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f05:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f08:	b9 16 00 00 00       	mov    ecx,0x16
c0006f0d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f11:	83 c0 02             	add    eax,0x2
c0006f14:	eb 9b                	jmp    c0006eb1 <f_setlabel+0x1aa>
c0006f16:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f1a:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f1f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f23:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f27:	e8 95 ab ff ff       	call   c0001ac1 <mem_cpy>
c0006f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f30:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	e8 0e d4 ff ff       	call   c000434b <sync_fs>
c0006f3d:	89 c6                	mov    esi,eax
c0006f3f:	eb 2b                	jmp    c0006f6c <f_setlabel+0x265>
c0006f41:	83 fb 0a             	cmp    ebx,0xa
c0006f44:	0f 87 2f fe ff ff    	ja     c0006d79 <f_setlabel+0x72>
c0006f4a:	89 f0                	mov    eax,esi
c0006f4c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f50:	43                   	inc    ebx
c0006f51:	e9 85 fe ff ff       	jmp    c0006ddb <f_setlabel+0xd4>
c0006f56:	83 fb 09             	cmp    ebx,0x9
c0006f59:	0f 87 1a fe ff ff    	ja     c0006d79 <f_setlabel+0x72>
c0006f5f:	89 f0                	mov    eax,esi
c0006f61:	66 c1 e8 08          	shr    ax,0x8
c0006f65:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f69:	43                   	inc    ebx
c0006f6a:	eb de                	jmp    c0006f4a <f_setlabel+0x243>
c0006f6c:	89 f0                	mov    eax,esi
c0006f6e:	83 c4 74             	add    esp,0x74
c0006f71:	5b                   	pop    ebx
c0006f72:	5e                   	pop    esi
c0006f73:	c3                   	ret    

c0006f74 <f_forward>:
c0006f74:	55                   	push   ebp
c0006f75:	57                   	push   edi
c0006f76:	56                   	push   esi
c0006f77:	53                   	push   ebx
c0006f78:	83 ec 2c             	sub    esp,0x2c
c0006f7b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f7f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f89:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f8d:	89 d8                	mov    eax,ebx
c0006f8f:	e8 b1 b1 ff ff       	call   c0002145 <validate>
c0006f94:	89 c5                	mov    ebp,eax
c0006f96:	85 c0                	test   eax,eax
c0006f98:	0f 85 aa 01 00 00    	jne    c0007148 <f_forward+0x1d4>
c0006f9e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fa2:	85 ed                	test   ebp,ebp
c0006fa4:	0f 85 9e 01 00 00    	jne    c0007148 <f_forward+0x1d4>
c0006faa:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fae:	0f 84 8f 01 00 00    	je     c0007143 <f_forward+0x1cf>
c0006fb4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fb7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fba:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fbd:	bf 00 00 00 00       	mov    edi,0x0
c0006fc2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fc5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fc9:	89 d1                	mov    ecx,edx
c0006fcb:	19 f9                	sbb    ecx,edi
c0006fcd:	0f 83 cf 00 00 00    	jae    c00070a2 <f_forward+0x12e>
c0006fd3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fd7:	e9 c6 00 00 00       	jmp    c00070a2 <f_forward+0x12e>
c0006fdc:	50                   	push   eax
c0006fdd:	50                   	push   eax
c0006fde:	6a 00                	push   0x0
c0006fe0:	6a 00                	push   0x0
c0006fe2:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fe6:	83 c4 10             	add    esp,0x10
c0006fe9:	85 c0                	test   eax,eax
c0006feb:	0f 84 57 01 00 00    	je     c0007148 <f_forward+0x1d4>
c0006ff1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ff4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006ffb:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fff:	89 d7                	mov    edi,edx
c0007001:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007004:	89 c6                	mov    esi,eax
c0007006:	0f ac fe 09          	shrd   esi,edi,0x9
c000700a:	21 ce                	and    esi,ecx
c000700c:	89 c1                	mov    ecx,eax
c000700e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007014:	0f 84 98 00 00 00    	je     c00070b2 <f_forward+0x13e>
c000701a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000701e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007021:	89 c8                	mov    eax,ecx
c0007023:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007027:	e8 af ac ff ff       	call   c0001cdb <clst2sect>
c000702c:	89 d7                	mov    edi,edx
c000702e:	09 c7                	or     edi,eax
c0007030:	0f 84 9e 00 00 00    	je     c00070d4 <f_forward+0x160>
c0007036:	31 ff                	xor    edi,edi
c0007038:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000703b:	01 c6                	add    esi,eax
c000703d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007041:	11 d7                	adc    edi,edx
c0007043:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007046:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000704d:	39 fa                	cmp    edx,edi
c000704f:	0f 85 a2 00 00 00    	jne    c00070f7 <f_forward+0x183>
c0007055:	39 f0                	cmp    eax,esi
c0007057:	0f 85 9a 00 00 00    	jne    c00070f7 <f_forward+0x183>
c000705d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007060:	ba 00 02 00 00       	mov    edx,0x200
c0007065:	25 ff 01 00 00       	and    eax,0x1ff
c000706a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000706e:	29 c2                	sub    edx,eax
c0007070:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007073:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007076:	39 d1                	cmp    ecx,edx
c0007078:	76 02                	jbe    c000707c <f_forward+0x108>
c000707a:	89 d1                	mov    ecx,edx
c000707c:	8d 73 50             	lea    esi,[ebx+0x50]
c000707f:	52                   	push   edx
c0007080:	01 c6                	add    esi,eax
c0007082:	52                   	push   edx
c0007083:	51                   	push   ecx
c0007084:	56                   	push   esi
c0007085:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007089:	83 c4 10             	add    esp,0x10
c000708c:	85 c0                	test   eax,eax
c000708e:	74 44                	je     c00070d4 <f_forward+0x160>
c0007090:	31 ff                	xor    edi,edi
c0007092:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007095:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007098:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000709c:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a0:	01 07                	add    DWORD PTR [edi],eax
c00070a2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070a7:	0f 85 2f ff ff ff    	jne    c0006fdc <f_forward+0x68>
c00070ad:	e9 96 00 00 00       	jmp    c0007148 <f_forward+0x1d4>
c00070b2:	85 f6                	test   esi,esi
c00070b4:	0f 85 60 ff ff ff    	jne    c000701a <f_forward+0xa6>
c00070ba:	89 d7                	mov    edi,edx
c00070bc:	09 c7                	or     edi,eax
c00070be:	75 05                	jne    c00070c5 <f_forward+0x151>
c00070c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070c3:	eb 0a                	jmp    c00070cf <f_forward+0x15b>
c00070c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070c8:	89 d8                	mov    eax,ebx
c00070ca:	e8 d9 bc ff ff       	call   c0002da8 <get_fat>
c00070cf:	83 f8 01             	cmp    eax,0x1
c00070d2:	77 0b                	ja     c00070df <f_forward+0x16b>
c00070d4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070d8:	bd 02 00 00 00       	mov    ebp,0x2
c00070dd:	eb 69                	jmp    c0007148 <f_forward+0x1d4>
c00070df:	83 f8 ff             	cmp    eax,0xffffffff
c00070e2:	75 0b                	jne    c00070ef <f_forward+0x17b>
c00070e4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070e8:	bd 01 00 00 00       	mov    ebp,0x1
c00070ed:	eb 59                	jmp    c0007148 <f_forward+0x1d4>
c00070ef:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070f2:	e9 23 ff ff ff       	jmp    c000701a <f_forward+0xa6>
c00070f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070fb:	79 20                	jns    c000711d <f_forward+0x1a9>
c00070fd:	83 ec 0c             	sub    esp,0xc
c0007100:	6a 01                	push   0x1
c0007102:	52                   	push   edx
c0007103:	50                   	push   eax
c0007104:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007108:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000710c:	50                   	push   eax
c000710d:	e8 fb a8 ff ff       	call   c0001a0d <disk_write>
c0007112:	83 c4 20             	add    esp,0x20
c0007115:	85 c0                	test   eax,eax
c0007117:	75 cb                	jne    c00070e4 <f_forward+0x170>
c0007119:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000711d:	83 ec 0c             	sub    esp,0xc
c0007120:	6a 01                	push   0x1
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007128:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000712c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007130:	50                   	push   eax
c0007131:	e8 c1 a8 ff ff       	call   c00019f7 <disk_read>
c0007136:	83 c4 20             	add    esp,0x20
c0007139:	85 c0                	test   eax,eax
c000713b:	0f 84 1c ff ff ff    	je     c000705d <f_forward+0xe9>
c0007141:	eb a1                	jmp    c00070e4 <f_forward+0x170>
c0007143:	bd 07 00 00 00       	mov    ebp,0x7
c0007148:	83 c4 2c             	add    esp,0x2c
c000714b:	89 e8                	mov    eax,ebp
c000714d:	5b                   	pop    ebx
c000714e:	5e                   	pop    esi
c000714f:	5f                   	pop    edi
c0007150:	5d                   	pop    ebp
c0007151:	c3                   	ret    

c0007152 <f_mkfs>:
c0007152:	55                   	push   ebp
c0007153:	57                   	push   edi
c0007154:	56                   	push   esi
c0007155:	53                   	push   ebx
c0007156:	bb 0b 00 00 00       	mov    ebx,0xb
c000715b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007161:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007168:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000716f:	e8 b0 ae ff ff       	call   c0002024 <get_ldnumber>
c0007174:	85 c0                	test   eax,eax
c0007176:	0f 88 ec 10 00 00    	js     c0008268 <f_mkfs+0x1116>
c000717c:	8b 14 85 e0 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2620]
c0007183:	85 d2                	test   edx,edx
c0007185:	74 03                	je     c000718a <f_mkfs+0x38>
c0007187:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000718a:	85 f6                	test   esi,esi
c000718c:	75 05                	jne    c0007193 <f_mkfs+0x41>
c000718e:	be e0 8a 02 c0       	mov    esi,0xc0028ae0
c0007193:	83 ec 0c             	sub    esp,0xc
c0007196:	0f b6 c0             	movzx  eax,al
c0007199:	bb 03 00 00 00       	mov    ebx,0x3
c000719e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a6:	e8 49 a8 ff ff       	call   c00019f4 <disk_initialize>
c00071ab:	83 c4 10             	add    esp,0x10
c00071ae:	a8 01                	test   al,0x1
c00071b0:	0f 85 b2 10 00 00    	jne    c0008268 <f_mkfs+0x1116>
c00071b6:	bb 0a 00 00 00       	mov    ebx,0xa
c00071bb:	a8 04                	test   al,0x4
c00071bd:	0f 85 a5 10 00 00    	jne    c0008268 <f_mkfs+0x1116>
c00071c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071c6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071ca:	85 c0                	test   eax,eax
c00071cc:	75 20                	jne    c00071ee <f_mkfs+0x9c>
c00071ce:	51                   	push   ecx
c00071cf:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071d3:	50                   	push   eax
c00071d4:	6a 03                	push   0x3
c00071d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071da:	e8 44 a8 ff ff       	call   c0001a23 <disk_ioctl>
c00071df:	83 c4 10             	add    esp,0x10
c00071e2:	85 c0                	test   eax,eax
c00071e4:	74 08                	je     c00071ee <f_mkfs+0x9c>
c00071e6:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ee:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071f2:	8d 42 ff             	lea    eax,[edx-0x1]
c00071f5:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071fa:	77 04                	ja     c0007200 <f_mkfs+0xae>
c00071fc:	85 c2                	test   edx,eax
c00071fe:	74 08                	je     c0007208 <f_mkfs+0xb6>
c0007200:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007208:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000720b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000720f:	48                   	dec    eax
c0007210:	3c 01                	cmp    al,0x1
c0007212:	76 05                	jbe    c0007219 <f_mkfs+0xc7>
c0007214:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007219:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000721c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007220:	48                   	dec    eax
c0007221:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007226:	77 07                	ja     c000722f <f_mkfs+0xdd>
c0007228:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000722d:	74 08                	je     c0007237 <f_mkfs+0xe5>
c000722f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007237:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000723a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007240:	77 07                	ja     c0007249 <f_mkfs+0xf7>
c0007242:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007245:	85 d8                	test   eax,ebx
c0007247:	74 02                	je     c000724b <f_mkfs+0xf9>
c0007249:	31 db                	xor    ebx,ebx
c000724b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007256:	77 0a                	ja     c0007262 <f_mkfs+0x110>
c0007258:	bb 11 00 00 00       	mov    ebx,0x11
c000725d:	e9 06 10 00 00       	jmp    c0008268 <f_mkfs+0x1116>
c0007262:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007269:	8b 36                	mov    esi,DWORD PTR [esi]
c000726b:	85 ed                	test   ebp,ebp
c000726d:	75 1e                	jne    c000728d <f_mkfs+0x13b>
c000726f:	83 ec 0c             	sub    esp,0xc
c0007272:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007279:	25 00 fe ff ff       	and    eax,0xfffffe00
c000727e:	50                   	push   eax
c000727f:	e8 f1 0f 00 00       	call   c0008275 <ff_memalloc>
c0007284:	83 c4 10             	add    esp,0x10
c0007287:	89 c5                	mov    ebp,eax
c0007289:	85 c0                	test   eax,eax
c000728b:	74 cb                	je     c0007258 <f_mkfs+0x106>
c000728d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007295:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000729d:	52                   	push   edx
c000729e:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072a2:	50                   	push   eax
c00072a3:	6a 01                	push   0x1
c00072a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072a9:	e8 75 a7 ff ff       	call   c0001a23 <disk_ioctl>
c00072ae:	83 c4 10             	add    esp,0x10
c00072b1:	85 c0                	test   eax,eax
c00072b3:	0f 85 4a 0f 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c00072b9:	89 f1                	mov    ecx,esi
c00072bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072c3:	83 e1 0f             	and    ecx,0xf
c00072c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ce:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072d2:	83 e6 08             	and    esi,0x8
c00072d5:	75 56                	jne    c000732d <f_mkfs+0x1db>
c00072d7:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072db:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072df:	83 ff 00             	cmp    edi,0x0
c00072e2:	76 20                	jbe    c0007304 <f_mkfs+0x1b2>
c00072e4:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072e9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072f7:	83 d7 ff             	adc    edi,0xffffffff
c00072fa:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072fe:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007302:	eb 21                	jmp    c0007325 <f_mkfs+0x1d3>
c0007304:	ba 3f 00 00 00       	mov    edx,0x3f
c0007309:	39 f2                	cmp    edx,esi
c000730b:	19 f8                	sbb    eax,edi
c000730d:	73 1e                	jae    c000732d <f_mkfs+0x1db>
c000730f:	83 c6 c1             	add    esi,0xffffffc1
c0007312:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000731a:	83 d7 ff             	adc    edi,0xffffffff
c000731d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007321:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007325:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000732d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007331:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007335:	89 04 24             	mov    DWORD PTR [esp],eax
c0007338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000733c:	31 c0                	xor    eax,eax
c000733e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007343:	89 c7                	mov    edi,eax
c0007345:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007348:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000734c:	0f 83 c5 0a 00 00    	jae    c0007e17 <f_mkfs+0xcc5>
c0007352:	89 df                	mov    edi,ebx
c0007354:	c1 ef 09             	shr    edi,0x9
c0007357:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000735b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007362:	c1 ef 09             	shr    edi,0x9
c0007365:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000736a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000736e:	74 29                	je     c0007399 <f_mkfs+0x247>
c0007370:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007376:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000737b:	0f 97 c2             	seta   dl
c000737e:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007381:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007385:	0f 92 c0             	setb   al
c0007388:	08 c2                	or     dl,al
c000738a:	75 5b                	jne    c00073e7 <f_mkfs+0x295>
c000738c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007390:	83 e0 07             	and    eax,0x7
c0007393:	3c 04                	cmp    al,0x4
c0007395:	74 50                	je     c00073e7 <f_mkfs+0x295>
c0007397:	eb 1b                	jmp    c00073b4 <f_mkfs+0x262>
c0007399:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000739e:	0f 87 73 0a 00 00    	ja     c0007e17 <f_mkfs+0xcc5>
c00073a4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073aa:	76 08                	jbe    c00073b4 <f_mkfs+0x262>
c00073ac:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073b4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073b8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073bc:	83 e0 01             	and    eax,0x1
c00073bf:	80 e1 02             	and    cl,0x2
c00073c2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073c6:	74 0d                	je     c00073d5 <f_mkfs+0x283>
c00073c8:	84 c0                	test   al,al
c00073ca:	0f 84 53 09 00 00    	je     c0007d23 <f_mkfs+0xbd1>
c00073d0:	e9 12 08 00 00       	jmp    c0007be7 <f_mkfs+0xa95>
c00073d5:	bb 13 00 00 00       	mov    ebx,0x13
c00073da:	84 c0                	test   al,al
c00073dc:	0f 85 05 08 00 00    	jne    c0007be7 <f_mkfs+0xa95>
c00073e2:	e9 39 0e 00 00       	jmp    c0008220 <f_mkfs+0x10ce>
c00073e7:	31 c0                	xor    eax,eax
c00073e9:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ee:	89 c7                	mov    edi,eax
c00073f0:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073f3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073f7:	0f 83 1a 0a 00 00    	jae    c0007e17 <f_mkfs+0xcc5>
c00073fd:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007403:	77 39                	ja     c000743e <f_mkfs+0x2ec>
c0007405:	ba ff ff 07 00       	mov    edx,0x7ffff
c000740a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007412:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007415:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007419:	73 08                	jae    c0007423 <f_mkfs+0x2d1>
c000741b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007423:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007428:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000742b:	b8 00 00 00 00       	mov    eax,0x0
c0007430:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007434:	73 08                	jae    c000743e <f_mkfs+0x2ec>
c0007436:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000743e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007442:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007446:	83 c0 20             	add    eax,0x20
c0007449:	83 d2 00             	adc    edx,0x0
c000744c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007450:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007458:	31 d2                	xor    edx,edx
c000745a:	31 ff                	xor    edi,edi
c000745c:	52                   	push   edx
c000745d:	89 fb                	mov    ebx,edi
c000745f:	50                   	push   eax
c0007460:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007464:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007468:	e8 9f ec 01 00       	call   c002610c <__udivdi3>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	c1 e0 02             	shl    eax,0x2
c0007473:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007477:	05 07 02 00 00       	add    eax,0x207
c000747c:	89 f1                	mov    ecx,esi
c000747e:	c1 e8 09             	shr    eax,0x9
c0007481:	83 c1 ff             	add    ecx,0xffffffff
c0007484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007488:	83 d3 ff             	adc    ebx,0xffffffff
c000748b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000748f:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007493:	31 d2                	xor    edx,edx
c0007495:	01 c8                	add    eax,ecx
c0007497:	11 da                	adc    edx,ebx
c0007499:	89 c1                	mov    ecx,eax
c000749b:	f7 de                	neg    esi
c000749d:	89 d0                	mov    eax,edx
c000749f:	83 d7 00             	adc    edi,0x0
c00074a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074a6:	f7 df                	neg    edi
c00074a8:	21 f1                	and    ecx,esi
c00074aa:	21 f8                	and    eax,edi
c00074ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074bc:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074c7:	0f ac d0 01          	shrd   eax,edx,0x1
c00074cb:	89 df                	mov    edi,ebx
c00074cd:	d1 ea                	shr    edx,1
c00074cf:	39 c1                	cmp    ecx,eax
c00074d1:	19 d7                	sbb    edi,edx
c00074d3:	0f 83 3e 09 00 00    	jae    c0007e17 <f_mkfs+0xcc5>
c00074d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074dd:	31 d2                	xor    edx,edx
c00074df:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ee:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074f2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074f6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074fe:	83 f8 0f             	cmp    eax,0xf
c0007501:	0f 86 10 09 00 00    	jbe    c0007e17 <f_mkfs+0xcc5>
c0007507:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000750f:	0f 87 02 09 00 00    	ja     c0007e17 <f_mkfs+0xcc5>
c0007515:	31 d2                	xor    edx,edx
c0007517:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000751b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007523:	83 c0 07             	add    eax,0x7
c0007526:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000752e:	c1 e8 03             	shr    eax,0x3
c0007531:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007538:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000753c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007540:	c1 e0 09             	shl    eax,0x9
c0007543:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007547:	48                   	dec    eax
c0007548:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000754c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007550:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007554:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007558:	31 d2                	xor    edx,edx
c000755a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000755e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007569:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000756e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007572:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007576:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000757a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000757e:	31 ff                	xor    edi,edi
c0007580:	31 f6                	xor    esi,esi
c0007582:	31 db                	xor    ebx,ebx
c0007584:	85 ff                	test   edi,edi
c0007586:	74 05                	je     c000758d <f_mkfs+0x43b>
c0007588:	4f                   	dec    edi
c0007589:	74 44                	je     c00075cf <f_mkfs+0x47d>
c000758b:	eb 4f                	jmp    c00075dc <f_mkfs+0x48a>
c000758d:	83 ec 0c             	sub    esp,0xc
c0007590:	0f b7 c3             	movzx  eax,bx
c0007593:	50                   	push   eax
c0007594:	e8 05 0e 00 00       	call   c000839e <ff_wtoupper>
c0007599:	83 c4 10             	add    esp,0x10
c000759c:	89 c1                	mov    ecx,eax
c000759e:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a1:	66 39 c3             	cmp    bx,ax
c00075a4:	75 3e                	jne    c00075e4 <f_mkfs+0x492>
c00075a6:	be 01 00 00 00       	mov    esi,0x1
c00075ab:	89 df                	mov    edi,ebx
c00075ad:	66 01 f7             	add    di,si
c00075b0:	75 07                	jne    c00075b9 <f_mkfs+0x467>
c00075b2:	83 fe 7f             	cmp    esi,0x7f
c00075b5:	77 31                	ja     c00075e8 <f_mkfs+0x496>
c00075b7:	eb 16                	jmp    c00075cf <f_mkfs+0x47d>
c00075b9:	83 ec 0c             	sub    esp,0xc
c00075bc:	0f b7 ff             	movzx  edi,di
c00075bf:	57                   	push   edi
c00075c0:	e8 d9 0d 00 00       	call   c000839e <ff_wtoupper>
c00075c5:	83 c4 10             	add    esp,0x10
c00075c8:	39 c7                	cmp    edi,eax
c00075ca:	75 e6                	jne    c00075b2 <f_mkfs+0x460>
c00075cc:	46                   	inc    esi
c00075cd:	eb dc                	jmp    c00075ab <f_mkfs+0x459>
c00075cf:	31 c0                	xor    eax,eax
c00075d1:	89 d9                	mov    ecx,ebx
c00075d3:	4e                   	dec    esi
c00075d4:	0f 95 c0             	setne  al
c00075d7:	43                   	inc    ebx
c00075d8:	89 c7                	mov    edi,eax
c00075da:	eb 14                	jmp    c00075f0 <f_mkfs+0x49e>
c00075dc:	89 f1                	mov    ecx,esi
c00075de:	01 f3                	add    ebx,esi
c00075e0:	31 ff                	xor    edi,edi
c00075e2:	eb 0c                	jmp    c00075f0 <f_mkfs+0x49e>
c00075e4:	89 d3                	mov    ebx,edx
c00075e6:	eb 08                	jmp    c00075f0 <f_mkfs+0x49e>
c00075e8:	bf 02 00 00 00       	mov    edi,0x2
c00075ed:	83 c9 ff             	or     ecx,0xffffffff
c00075f0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f7:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075fb:	0f b6 c1             	movzx  eax,cl
c00075fe:	e8 3a a9 ff ff       	call   c0001f3d <xsum32>
c0007603:	66 c1 e9 08          	shr    cx,0x8
c0007607:	89 c2                	mov    edx,eax
c0007609:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000760c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007610:	0f b7 c1             	movzx  eax,cx
c0007613:	e8 25 a9 ff ff       	call   c0001f3d <xsum32>
c0007618:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000761d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007621:	66 85 db             	test   bx,bx
c0007624:	74 1f                	je     c0007645 <f_mkfs+0x4f3>
c0007626:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007629:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007630:	83 c0 02             	add    eax,0x2
c0007633:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007639:	39 c2                	cmp    edx,eax
c000763b:	74 08                	je     c0007645 <f_mkfs+0x4f3>
c000763d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007640:	e9 3f ff ff ff       	jmp    c0007584 <f_mkfs+0x432>
c0007645:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007648:	83 ec 0c             	sub    esp,0xc
c000764b:	05 01 02 00 00       	add    eax,0x201
c0007650:	c1 e8 09             	shr    eax,0x9
c0007653:	50                   	push   eax
c0007654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007658:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000765c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007660:	55                   	push   ebp
c0007661:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007665:	e8 a3 a3 ff ff       	call   c0001a0d <disk_write>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	85 c0                	test   eax,eax
c000766f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007672:	0f 85 8b 0b 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007678:	89 d0                	mov    eax,edx
c000767a:	31 d2                	xor    edx,edx
c000767c:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007680:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007684:	66 85 db             	test   bx,bx
c0007687:	74 04                	je     c000768d <f_mkfs+0x53b>
c0007689:	31 c0                	xor    eax,eax
c000768b:	eb b0                	jmp    c000763d <f_mkfs+0x4eb>
c000768d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007691:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007695:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007699:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000769f:	31 d2                	xor    edx,edx
c00076a1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b0:	c1 eb 09             	shr    ebx,0x9
c00076b3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076be:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076c6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076ca:	8d 70 01             	lea    esi,[eax+0x1]
c00076cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076d5:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076dc:	31 d2                	xor    edx,edx
c00076de:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e6:	89 c1                	mov    ecx,eax
c00076e8:	89 e8                	mov    eax,ebp
c00076ea:	e8 e7 a3 ff ff       	call   c0001ad6 <mem_set>
c00076ef:	31 c0                	xor    eax,eax
c00076f1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076f4:	76 10                	jbe    c0007706 <f_mkfs+0x5b4>
c00076f6:	83 fe 07             	cmp    esi,0x7
c00076f9:	76 0b                	jbe    c0007706 <f_mkfs+0x5b4>
c00076fb:	40                   	inc    eax
c00076fc:	83 ee 08             	sub    esi,0x8
c00076ff:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007704:	eb eb                	jmp    c00076f1 <f_mkfs+0x59f>
c0007706:	b2 01                	mov    dl,0x1
c0007708:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000770c:	85 f6                	test   esi,esi
c000770e:	74 0c                	je     c000771c <f_mkfs+0x5ca>
c0007710:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007713:	76 07                	jbe    c000771c <f_mkfs+0x5ca>
c0007715:	08 11                	or     BYTE PTR [ecx],dl
c0007717:	4e                   	dec    esi
c0007718:	d1 e2                	shl    edx,1
c000771a:	eb f0                	jmp    c000770c <f_mkfs+0x5ba>
c000771c:	89 df                	mov    edi,ebx
c000771e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007722:	76 04                	jbe    c0007728 <f_mkfs+0x5d6>
c0007724:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007728:	83 ec 0c             	sub    esp,0xc
c000772b:	57                   	push   edi
c000772c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007730:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007734:	55                   	push   ebp
c0007735:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007739:	e8 cf a2 ff ff       	call   c0001a0d <disk_write>
c000773e:	83 c4 20             	add    esp,0x20
c0007741:	85 c0                	test   eax,eax
c0007743:	0f 85 ba 0a 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007749:	31 d2                	xor    edx,edx
c000774b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000774f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007753:	29 fb                	sub    ebx,edi
c0007755:	0f 85 7a ff ff ff    	jne    c00076d5 <f_mkfs+0x583>
c000775b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000775f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007767:	31 f6                	xor    esi,esi
c0007769:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000776d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007770:	31 d2                	xor    edx,edx
c0007772:	89 e8                	mov    eax,ebp
c0007774:	e8 5d a3 ff ff       	call   c0001ad6 <mem_set>
c0007779:	31 c9                	xor    ecx,ecx
c000777b:	85 db                	test   ebx,ebx
c000777d:	75 40                	jne    c00077bf <f_mkfs+0x66d>
c000777f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007784:	89 e8                	mov    eax,ebp
c0007786:	bb 02 00 00 00       	mov    ebx,0x2
c000778b:	e8 28 a3 ff ff       	call   c0001ab8 <st_dword>
c0007790:	8d 45 04             	lea    eax,[ebp+0x4]
c0007793:	83 ca ff             	or     edx,0xffffffff
c0007796:	e8 1d a3 ff ff       	call   c0001ab8 <st_dword>
c000779b:	b9 08 00 00 00       	mov    ecx,0x8
c00077a0:	eb 1d                	jmp    c00077bf <f_mkfs+0x66d>
c00077a2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a5:	76 3b                	jbe    c00077e2 <f_mkfs+0x690>
c00077a7:	43                   	inc    ebx
c00077a8:	83 fe 01             	cmp    esi,0x1
c00077ab:	89 da                	mov    edx,ebx
c00077ad:	77 03                	ja     c00077b2 <f_mkfs+0x660>
c00077af:	83 ca ff             	or     edx,0xffffffff
c00077b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077b6:	4e                   	dec    esi
c00077b7:	e8 fc a2 ff ff       	call   c0001ab8 <st_dword>
c00077bc:	83 c1 04             	add    ecx,0x4
c00077bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077c3:	85 f6                	test   esi,esi
c00077c5:	75 db                	jne    c00077a2 <f_mkfs+0x650>
c00077c7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077cc:	77 14                	ja     c00077e2 <f_mkfs+0x690>
c00077ce:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077d9:	85 f6                	test   esi,esi
c00077db:	74 05                	je     c00077e2 <f_mkfs+0x690>
c00077dd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e0:	77 dd                	ja     c00077bf <f_mkfs+0x66d>
c00077e2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ea:	39 cf                	cmp    edi,ecx
c00077ec:	76 02                	jbe    c00077f0 <f_mkfs+0x69e>
c00077ee:	89 cf                	mov    edi,ecx
c00077f0:	83 ec 0c             	sub    esp,0xc
c00077f3:	57                   	push   edi
c00077f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077fc:	55                   	push   ebp
c00077fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007801:	e8 07 a2 ff ff       	call   c0001a0d <disk_write>
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	85 c0                	test   eax,eax
c000780b:	0f 85 f2 09 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007811:	31 d2                	xor    edx,edx
c0007813:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007817:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000781b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000781f:	0f 85 48 ff ff ff    	jne    c000776d <f_mkfs+0x61b>
c0007825:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007828:	31 d2                	xor    edx,edx
c000782a:	89 e8                	mov    eax,ebp
c000782c:	31 ff                	xor    edi,edi
c000782e:	e8 a3 a2 ff ff       	call   c0001ad6 <mem_set>
c0007833:	8d 45 34             	lea    eax,[ebp+0x34]
c0007836:	ba 02 00 00 00       	mov    edx,0x2
c000783b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000783f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007843:	e8 70 a2 ff ff       	call   c0001ab8 <st_dword>
c0007848:	8d 45 38             	lea    eax,[ebp+0x38]
c000784b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000784f:	e8 64 a2 ff ff       	call   c0001ab8 <st_dword>
c0007854:	8d 45 44             	lea    eax,[ebp+0x44]
c0007857:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000785f:	e8 54 a2 ff ff       	call   c0001ab8 <st_dword>
c0007864:	8d 45 54             	lea    eax,[ebp+0x54]
c0007867:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000786b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000786f:	83 c2 02             	add    edx,0x2
c0007872:	e8 41 a2 ff ff       	call   c0001ab8 <st_dword>
c0007877:	8d 45 58             	lea    eax,[ebp+0x58]
c000787a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000787e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007882:	e8 31 a2 ff ff       	call   c0001ab8 <st_dword>
c0007887:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007890:	89 c6                	mov    esi,eax
c0007892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007896:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000789a:	89 04 24             	mov    DWORD PTR [esp],eax
c000789d:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078a8:	39 cb                	cmp    ebx,ecx
c00078aa:	76 02                	jbe    c00078ae <f_mkfs+0x75c>
c00078ac:	89 cb                	mov    ebx,ecx
c00078ae:	83 ec 0c             	sub    esp,0xc
c00078b1:	53                   	push   ebx
c00078b2:	57                   	push   edi
c00078b3:	56                   	push   esi
c00078b4:	55                   	push   ebp
c00078b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078b9:	e8 4f a1 ff ff       	call   c0001a0d <disk_write>
c00078be:	83 c4 20             	add    esp,0x20
c00078c1:	85 c0                	test   eax,eax
c00078c3:	0f 85 3a 09 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c00078c9:	31 d2                	xor    edx,edx
c00078cb:	b9 00 02 00 00       	mov    ecx,0x200
c00078d0:	89 e8                	mov    eax,ebp
c00078d2:	e8 ff a1 ff ff       	call   c0001ad6 <mem_set>
c00078d7:	31 d2                	xor    edx,edx
c00078d9:	01 de                	add    esi,ebx
c00078db:	11 d7                	adc    edi,edx
c00078dd:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e0:	75 bf                	jne    c00078a1 <f_mkfs+0x74f>
c00078e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ea:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078f2:	b9 00 02 00 00       	mov    ecx,0x200
c00078f7:	31 d2                	xor    edx,edx
c00078f9:	89 e8                	mov    eax,ebp
c00078fb:	e8 d6 a1 ff ff       	call   c0001ad6 <mem_set>
c0007900:	b9 0b 00 00 00       	mov    ecx,0xb
c0007905:	ba c0 8b 02 c0       	mov    edx,0xc0028bc0
c000790a:	89 e8                	mov    eax,ebp
c000790c:	e8 b0 a1 ff ff       	call   c0001ac1 <mem_cpy>
c0007911:	8d 45 40             	lea    eax,[ebp+0x40]
c0007914:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007918:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000791c:	e8 9a a1 ff ff       	call   c0001abb <st_qword>
c0007921:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007925:	8d 45 48             	lea    eax,[ebp+0x48]
c0007928:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000792c:	e8 8a a1 ff ff       	call   c0001abb <st_qword>
c0007931:	8d 45 50             	lea    eax,[ebp+0x50]
c0007934:	ba 20 00 00 00       	mov    edx,0x20
c0007939:	e8 7a a1 ff ff       	call   c0001ab8 <st_dword>
c000793e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007942:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007946:	e8 6d a1 ff ff       	call   c0001ab8 <st_dword>
c000794b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000794f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007953:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007957:	e8 5c a1 ff ff       	call   c0001ab8 <st_dword>
c000795c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000795f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007963:	e8 50 a1 ff ff       	call   c0001ab8 <st_dword>
c0007968:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000796c:	8d 50 02             	lea    edx,[eax+0x2]
c000796f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007972:	e8 41 a1 ff ff       	call   c0001ab8 <st_dword>
c0007977:	8d 45 64             	lea    eax,[ebp+0x64]
c000797a:	ba 00 00 21 50       	mov    edx,0x50210000
c000797f:	e8 34 a1 ff ff       	call   c0001ab8 <st_dword>
c0007984:	8d 45 68             	lea    eax,[ebp+0x68]
c0007987:	ba 00 01 00 00       	mov    edx,0x100
c000798c:	e8 23 a1 ff ff       	call   c0001ab4 <st_word>
c0007991:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007995:	b8 0a 00 00 00       	mov    eax,0xa
c000799a:	48                   	dec    eax
c000799b:	74 05                	je     c00079a2 <f_mkfs+0x850>
c000799d:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a0:	eb f8                	jmp    c000799a <f_mkfs+0x848>
c00079a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079a6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079ae:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079b2:	74 05                	je     c00079b9 <f_mkfs+0x867>
c00079b4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079b7:	eb f5                	jmp    c00079ae <f_mkfs+0x85c>
c00079b9:	8d 45 78             	lea    eax,[ebp+0x78]
c00079bc:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079c7:	31 db                	xor    ebx,ebx
c00079c9:	e8 e6 a0 ff ff       	call   c0001ab4 <st_word>
c00079ce:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079d4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00079dc:	e8 d3 a0 ff ff       	call   c0001ab4 <st_word>
c00079e1:	31 c9                	xor    ecx,ecx
c00079e3:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079e6:	83 f8 01             	cmp    eax,0x1
c00079e9:	76 13                	jbe    c00079fe <f_mkfs+0x8ac>
c00079eb:	83 f9 70             	cmp    ecx,0x70
c00079ee:	74 0e                	je     c00079fe <f_mkfs+0x8ac>
c00079f0:	89 da                	mov    edx,ebx
c00079f2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079f7:	e8 41 a5 ff ff       	call   c0001f3d <xsum32>
c00079fc:	89 c3                	mov    ebx,eax
c00079fe:	41                   	inc    ecx
c00079ff:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a05:	75 dc                	jne    c00079e3 <f_mkfs+0x891>
c0007a07:	89 f0                	mov    eax,esi
c0007a09:	89 fa                	mov    edx,edi
c0007a0b:	83 c0 01             	add    eax,0x1
c0007a0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a12:	83 d2 00             	adc    edx,0x0
c0007a15:	83 ec 0c             	sub    esp,0xc
c0007a18:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a1c:	6a 01                	push   0x1
c0007a1e:	57                   	push   edi
c0007a1f:	56                   	push   esi
c0007a20:	55                   	push   ebp
c0007a21:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a25:	e8 e3 9f ff ff       	call   c0001a0d <disk_write>
c0007a2a:	83 c4 20             	add    esp,0x20
c0007a2d:	85 c0                	test   eax,eax
c0007a2f:	0f 85 ce 07 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007a35:	31 d2                	xor    edx,edx
c0007a37:	b9 00 02 00 00       	mov    ecx,0x200
c0007a3c:	89 e8                	mov    eax,ebp
c0007a3e:	e8 93 a0 ff ff       	call   c0001ad6 <mem_set>
c0007a43:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a4b:	e8 64 a0 ff ff       	call   c0001ab4 <st_word>
c0007a50:	89 f0                	mov    eax,esi
c0007a52:	89 fa                	mov    edx,edi
c0007a54:	83 c0 09             	add    eax,0x9
c0007a57:	83 d2 00             	adc    edx,0x0
c0007a5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a61:	31 c9                	xor    ecx,ecx
c0007a63:	41                   	inc    ecx
c0007a64:	89 da                	mov    edx,ebx
c0007a66:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a6b:	e8 cd a4 ff ff       	call   c0001f3d <xsum32>
c0007a70:	89 c3                	mov    ebx,eax
c0007a72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a78:	75 e9                	jne    c0007a63 <f_mkfs+0x911>
c0007a7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a82:	83 c0 01             	add    eax,0x1
c0007a85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a89:	83 d2 00             	adc    edx,0x0
c0007a8c:	83 ec 0c             	sub    esp,0xc
c0007a8f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a93:	6a 01                	push   0x1
c0007a95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a9d:	55                   	push   ebp
c0007a9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aa2:	e8 66 9f ff ff       	call   c0001a0d <disk_write>
c0007aa7:	83 c4 20             	add    esp,0x20
c0007aaa:	85 c0                	test   eax,eax
c0007aac:	0f 85 51 07 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ab6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007aba:	75 09                	jne    c0007ac5 <f_mkfs+0x973>
c0007abc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007abf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ac3:	74 12                	je     c0007ad7 <f_mkfs+0x985>
c0007ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007acd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ad5:	eb 8a                	jmp    c0007a61 <f_mkfs+0x90f>
c0007ad7:	31 d2                	xor    edx,edx
c0007ad9:	b9 00 02 00 00       	mov    ecx,0x200
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 f1 9f ff ff       	call   c0001ad6 <mem_set>
c0007ae5:	83 c6 0b             	add    esi,0xb
c0007ae8:	83 d7 00             	adc    edi,0x0
c0007aeb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aef:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007af3:	31 c9                	xor    ecx,ecx
c0007af5:	41                   	inc    ecx
c0007af6:	89 da                	mov    edx,ebx
c0007af8:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007afd:	e8 3b a4 ff ff       	call   c0001f3d <xsum32>
c0007b02:	89 c3                	mov    ebx,eax
c0007b04:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b0a:	75 e9                	jne    c0007af5 <f_mkfs+0x9a3>
c0007b0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b13:	83 c6 01             	add    esi,0x1
c0007b16:	83 d7 00             	adc    edi,0x0
c0007b19:	83 ec 0c             	sub    esp,0xc
c0007b1c:	6a 01                	push   0x1
c0007b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b26:	55                   	push   ebp
c0007b27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b2b:	e8 dd 9e ff ff       	call   c0001a0d <disk_write>
c0007b30:	83 c4 20             	add    esp,0x20
c0007b33:	85 c0                	test   eax,eax
c0007b35:	0f 85 c8 06 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007b3b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b3f:	75 06                	jne    c0007b47 <f_mkfs+0x9f5>
c0007b41:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b45:	74 09                	je     c0007b50 <f_mkfs+0x9fe>
c0007b47:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b4a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b4e:	eb a3                	jmp    c0007af3 <f_mkfs+0x9a1>
c0007b50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b54:	89 da                	mov    edx,ebx
c0007b56:	01 e8                	add    eax,ebp
c0007b58:	e8 5b 9f ff ff       	call   c0001ab8 <st_dword>
c0007b5d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b62:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b6a:	75 e4                	jne    c0007b50 <f_mkfs+0x9fe>
c0007b6c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b73:	83 c6 02             	add    esi,0x2
c0007b76:	83 d7 00             	adc    edi,0x0
c0007b79:	83 ec 0c             	sub    esp,0xc
c0007b7c:	6a 01                	push   0x1
c0007b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b86:	55                   	push   ebp
c0007b87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b8b:	e8 7d 9e ff ff       	call   c0001a0d <disk_write>
c0007b90:	83 c4 20             	add    esp,0x20
c0007b93:	85 c0                	test   eax,eax
c0007b95:	0f 85 68 06 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007b9b:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba0:	74 0d                	je     c0007baf <f_mkfs+0xa5d>
c0007ba2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007baa:	e9 43 fd ff ff       	jmp    c00078f2 <f_mkfs+0x7a0>
c0007baf:	b1 07                	mov    cl,0x7
c0007bb1:	e9 e3 05 00 00       	jmp    c0008199 <f_mkfs+0x1047>
c0007bb6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bbb:	0f 85 4f 02 00 00    	jne    c0007e10 <f_mkfs+0xcbe>
c0007bc1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bc6:	0f 86 22 02 00 00    	jbe    c0007dee <f_mkfs+0xc9c>
c0007bcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd1:	0f 85 81 06 00 00    	jne    c0008258 <f_mkfs+0x1106>
c0007bd7:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bde:	83 f8 40             	cmp    eax,0x40
c0007be1:	0f 87 51 06 00 00    	ja     c0008238 <f_mkfs+0x10e6>
c0007be7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007beb:	85 ff                	test   edi,edi
c0007bed:	75 1c                	jne    c0007c0b <f_mkfs+0xab9>
c0007bef:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bf2:	ba c0 8a 02 c0       	mov    edx,0xc0028ac0
c0007bf7:	c1 e9 0c             	shr    ecx,0xc
c0007bfa:	bf 01 00 00 00       	mov    edi,0x1
c0007bff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c02:	66 85 c0             	test   ax,ax
c0007c05:	0f 85 95 01 00 00    	jne    c0007da0 <f_mkfs+0xc4e>
c0007c0b:	31 d2                	xor    edx,edx
c0007c0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c10:	f7 f7                	div    edi
c0007c12:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c17:	0f 86 95 01 00 00    	jbe    c0007db2 <f_mkfs+0xc60>
c0007c1d:	83 c0 02             	add    eax,0x2
c0007c20:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c25:	01 c0                	add    eax,eax
c0007c27:	05 ff 01 00 00       	add    eax,0x1ff
c0007c2c:	be 01 00 00 00       	mov    esi,0x1
c0007c31:	c1 e8 09             	shr    eax,0x9
c0007c34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c3c:	c1 e0 05             	shl    eax,0x5
c0007c3f:	c1 e8 09             	shr    eax,0x9
c0007c42:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c46:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c4b:	31 d2                	xor    edx,edx
c0007c4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c51:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c55:	89 f0                	mov    eax,esi
c0007c57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c5b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c6b:	31 d2                	xor    edx,edx
c0007c6d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c72:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c76:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c7a:	31 db                	xor    ebx,ebx
c0007c7c:	01 c8                	add    eax,ecx
c0007c7e:	11 da                	adc    edx,ebx
c0007c80:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c8c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c90:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c94:	f7 da                	neg    edx
c0007c96:	21 d1                	and    ecx,edx
c0007c98:	29 d9                	sub    ecx,ebx
c0007c9a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c9f:	0f 85 20 01 00 00    	jne    c0007dc5 <f_mkfs+0xc73>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	01 ce                	add    esi,ecx
c0007ca9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cad:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb1:	31 d2                	xor    edx,edx
c0007cb3:	89 f8                	mov    eax,edi
c0007cb5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cb9:	c1 e0 04             	shl    eax,0x4
c0007cbc:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cc4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cc8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ccc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ccf:	19 d3                	sbb    ebx,edx
c0007cd1:	0f 82 40 01 00 00    	jb     c0007e17 <f_mkfs+0xcc5>
c0007cd7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cda:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cde:	89 c8                	mov    eax,ecx
c0007ce0:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ce5:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ce9:	29 f0                	sub    eax,esi
c0007ceb:	29 d0                	sub    eax,edx
c0007ced:	31 d2                	xor    edx,edx
c0007cef:	f7 f7                	div    edi
c0007cf1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cf6:	89 c3                	mov    ebx,eax
c0007cf8:	0f 85 b8 fe ff ff    	jne    c0007bb6 <f_mkfs+0xa64>
c0007cfe:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d03:	0f 87 1d 01 00 00    	ja     c0007e26 <f_mkfs+0xcd4>
c0007d09:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d0e:	0f 85 03 01 00 00    	jne    c0007e17 <f_mkfs+0xcc5>
c0007d14:	83 ff 01             	cmp    edi,0x1
c0007d17:	0f 86 fa 00 00 00    	jbe    c0007e17 <f_mkfs+0xcc5>
c0007d1d:	d1 ef                	shr    edi,1
c0007d1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d23:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d27:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d2a:	85 db                	test   ebx,ebx
c0007d2c:	75 2d                	jne    c0007d5b <f_mkfs+0xc09>
c0007d2e:	89 cb                	mov    ebx,ecx
c0007d30:	ba d0 8a 02 c0       	mov    edx,0xc0028ad0
c0007d35:	c1 eb 11             	shr    ebx,0x11
c0007d38:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d40:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d43:	66 85 c0             	test   ax,ax
c0007d46:	74 11                	je     c0007d59 <f_mkfs+0xc07>
c0007d48:	83 c2 02             	add    edx,0x2
c0007d4b:	39 d8                	cmp    eax,ebx
c0007d4d:	77 0a                	ja     c0007d59 <f_mkfs+0xc07>
c0007d4f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d53:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d57:	eb e7                	jmp    c0007d40 <f_mkfs+0xbee>
c0007d59:	31 db                	xor    ebx,ebx
c0007d5b:	31 d2                	xor    edx,edx
c0007d5d:	89 c8                	mov    eax,ecx
c0007d5f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d63:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d6a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d6f:	c1 ea 09             	shr    edx,0x9
c0007d72:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	0f 87 96 00 00 00    	ja     c0007e17 <f_mkfs+0xcc5>
c0007d81:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d85:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d8d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d91:	be 20 00 00 00       	mov    esi,0x20
c0007d96:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d9b:	e9 a6 fe ff ff       	jmp    c0007c46 <f_mkfs+0xaf4>
c0007da0:	83 c2 02             	add    edx,0x2
c0007da3:	39 c8                	cmp    eax,ecx
c0007da5:	0f 87 60 fe ff ff    	ja     c0007c0b <f_mkfs+0xab9>
c0007dab:	01 ff                	add    edi,edi
c0007dad:	e9 4d fe ff ff       	jmp    c0007bff <f_mkfs+0xaad>
c0007db2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007db5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dba:	40                   	inc    eax
c0007dbb:	d1 e8                	shr    eax,1
c0007dbd:	83 c0 03             	add    eax,0x3
c0007dc0:	e9 62 fe ff ff       	jmp    c0007c27 <f_mkfs+0xad5>
c0007dc5:	31 d2                	xor    edx,edx
c0007dc7:	89 c8                	mov    eax,ecx
c0007dc9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dcd:	85 d2                	test   edx,edx
c0007dcf:	74 0c                	je     c0007ddd <f_mkfs+0xc8b>
c0007dd1:	49                   	dec    ecx
c0007dd2:	46                   	inc    esi
c0007dd3:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dd8:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ddd:	89 c8                	mov    eax,ecx
c0007ddf:	31 d2                	xor    edx,edx
c0007de1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007de5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007de9:	e9 c3 fe ff ff       	jmp    c0007cb1 <f_mkfs+0xb5f>
c0007dee:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007df3:	77 31                	ja     c0007e26 <f_mkfs+0xcd4>
c0007df5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dfa:	75 1b                	jne    c0007e17 <f_mkfs+0xcc5>
c0007dfc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e03:	3d 80 00 00 00       	cmp    eax,0x80
c0007e08:	0f 86 d9 fd ff ff    	jbe    c0007be7 <f_mkfs+0xa95>
c0007e0e:	eb 07                	jmp    c0007e17 <f_mkfs+0xcc5>
c0007e10:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e15:	76 0a                	jbe    c0007e21 <f_mkfs+0xccf>
c0007e17:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e1c:	e9 ff 03 00 00       	jmp    c0008220 <f_mkfs+0x10ce>
c0007e21:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 a2 9c ff ff       	call   c0001ad6 <mem_set>
c0007e34:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e39:	ba e2 8b 02 c0       	mov    edx,0xc0028be2
c0007e3e:	89 e8                	mov    eax,ebp
c0007e40:	e8 7c 9c ff ff       	call   c0001ac1 <mem_cpy>
c0007e45:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e48:	ba 00 02 00 00       	mov    edx,0x200
c0007e4d:	e8 62 9c ff ff       	call   c0001ab4 <st_word>
c0007e52:	89 f8                	mov    eax,edi
c0007e54:	0f b7 d6             	movzx  edx,si
c0007e57:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e5a:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e5d:	e8 52 9c ff ff       	call   c0001ab4 <st_word>
c0007e62:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e66:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e6b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e6e:	75 08                	jne    c0007e78 <f_mkfs+0xd26>
c0007e70:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e78:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e7f:	e8 30 9c ff ff       	call   c0001ab4 <st_word>
c0007e84:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e89:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e8d:	39 d0                	cmp    eax,edx
c0007e8f:	b8 00 00 00 00       	mov    eax,0x0
c0007e94:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e98:	72 0a                	jb     c0007ea4 <f_mkfs+0xd52>
c0007e9a:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e9d:	e8 12 9c ff ff       	call   c0001ab4 <st_word>
c0007ea2:	eb 08                	jmp    c0007eac <f_mkfs+0xd5a>
c0007ea4:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ea7:	e8 0c 9c ff ff       	call   c0001ab8 <st_dword>
c0007eac:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eaf:	ba 3f 00 00 00       	mov    edx,0x3f
c0007eb4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007eb8:	e8 f7 9b ff ff       	call   c0001ab4 <st_word>
c0007ebd:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec0:	ba ff 00 00 00       	mov    edx,0xff
c0007ec5:	e8 ea 9b ff ff       	call   c0001ab4 <st_word>
c0007eca:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ecd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed1:	e8 e2 9b ff ff       	call   c0001ab8 <st_dword>
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	75 57                	jne    c0007f34 <f_mkfs+0xde2>
c0007edd:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee0:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ee5:	e8 ce 9b ff ff       	call   c0001ab8 <st_dword>
c0007eea:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef1:	e8 c2 9b ff ff       	call   c0001ab8 <st_dword>
c0007ef6:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ef9:	ba 02 00 00 00       	mov    edx,0x2
c0007efe:	e8 b5 9b ff ff       	call   c0001ab8 <st_dword>
c0007f03:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f06:	ba 01 00 00 00       	mov    edx,0x1
c0007f0b:	e8 a4 9b ff ff       	call   c0001ab4 <st_word>
c0007f10:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f13:	ba 06 00 00 00       	mov    edx,0x6
c0007f18:	e8 97 9b ff ff       	call   c0001ab4 <st_word>
c0007f1d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f21:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f25:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba ee 8b 02 c0       	mov    edx,0xc0028bee
c0007f32:	eb 2f                	jmp    c0007f63 <f_mkfs+0xe11>
c0007f34:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f37:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f3c:	e8 77 9b ff ff       	call   c0001ab8 <st_dword>
c0007f41:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f46:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f49:	e8 66 9b ff ff       	call   c0001ab4 <st_word>
c0007f4e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f52:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f56:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f59:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5e:	ba 02 8c 02 c0       	mov    edx,0xc0028c02
c0007f63:	e8 59 9b ff ff       	call   c0001ac1 <mem_cpy>
c0007f68:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f6e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f73:	89 f0                	mov    eax,esi
c0007f75:	e8 3a 9b ff ff       	call   c0001ab4 <st_word>
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	6a 01                	push   0x1
c0007f7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f87:	55                   	push   ebp
c0007f88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f8c:	e8 7c 9a ff ff       	call   c0001a0d <disk_write>
c0007f91:	83 c4 20             	add    esp,0x20
c0007f94:	85 c0                	test   eax,eax
c0007f96:	0f 85 67 02 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0007f9c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa1:	0f 85 b7 00 00 00    	jne    c000805e <f_mkfs+0xf0c>
c0007fa7:	83 ec 0c             	sub    esp,0xc
c0007faa:	6a 01                	push   0x1
c0007fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fb4:	83 c0 06             	add    eax,0x6
c0007fb7:	83 d2 00             	adc    edx,0x0
c0007fba:	52                   	push   edx
c0007fbb:	50                   	push   eax
c0007fbc:	55                   	push   ebp
c0007fbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc1:	e8 47 9a ff ff       	call   c0001a0d <disk_write>
c0007fc6:	83 c4 20             	add    esp,0x20
c0007fc9:	b9 00 02 00 00       	mov    ecx,0x200
c0007fce:	31 d2                	xor    edx,edx
c0007fd0:	89 e8                	mov    eax,ebp
c0007fd2:	e8 ff 9a ff ff       	call   c0001ad6 <mem_set>
c0007fd7:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fdc:	89 e8                	mov    eax,ebp
c0007fde:	e8 d5 9a ff ff       	call   c0001ab8 <st_dword>
c0007fe3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fe9:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fee:	e8 c5 9a ff ff       	call   c0001ab8 <st_dword>
c0007ff3:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ff6:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007ffc:	e8 b7 9a ff ff       	call   c0001ab8 <st_dword>
c0008001:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008007:	ba 02 00 00 00       	mov    edx,0x2
c000800c:	e8 a7 9a ff ff       	call   c0001ab8 <st_dword>
c0008011:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008016:	89 f0                	mov    eax,esi
c0008018:	e8 97 9a ff ff       	call   c0001ab4 <st_word>
c000801d:	83 ec 0c             	sub    esp,0xc
c0008020:	6a 01                	push   0x1
c0008022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008026:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000802a:	83 c0 07             	add    eax,0x7
c000802d:	83 d2 00             	adc    edx,0x0
c0008030:	52                   	push   edx
c0008031:	50                   	push   eax
c0008032:	55                   	push   ebp
c0008033:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008037:	e8 d1 99 ff ff       	call   c0001a0d <disk_write>
c000803c:	83 c4 14             	add    esp,0x14
c000803f:	6a 01                	push   0x1
c0008041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008045:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008049:	83 c0 01             	add    eax,0x1
c000804c:	83 d2 00             	adc    edx,0x0
c000804f:	52                   	push   edx
c0008050:	50                   	push   eax
c0008051:	55                   	push   ebp
c0008052:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008056:	e8 b2 99 ff ff       	call   c0001a0d <disk_write>
c000805b:	83 c4 20             	add    esp,0x20
c000805e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008065:	31 d2                	xor    edx,edx
c0008067:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000806d:	31 db                	xor    ebx,ebx
c000806f:	89 e8                	mov    eax,ebp
c0008071:	e8 60 9a ff ff       	call   c0001ad6 <mem_set>
c0008076:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000807b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008082:	0f 94 c3             	sete   bl
c0008085:	4b                   	dec    ebx
c0008086:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000808c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008092:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008097:	75 21                	jne    c00080ba <f_mkfs+0xf68>
c0008099:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000809e:	89 e8                	mov    eax,ebp
c00080a0:	e8 13 9a ff ff       	call   c0001ab8 <st_dword>
c00080a5:	8d 45 04             	lea    eax,[ebp+0x4]
c00080a8:	83 ca ff             	or     edx,0xffffffff
c00080ab:	e8 08 9a ff ff       	call   c0001ab8 <st_dword>
c00080b0:	8d 45 08             	lea    eax,[ebp+0x8]
c00080b3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080b8:	eb 04                	jmp    c00080be <f_mkfs+0xf6c>
c00080ba:	89 da                	mov    edx,ebx
c00080bc:	89 e8                	mov    eax,ebp
c00080be:	e8 f5 99 ff ff       	call   c0001ab8 <st_dword>
c00080c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080d3:	39 ce                	cmp    esi,ecx
c00080d5:	76 02                	jbe    c00080d9 <f_mkfs+0xf87>
c00080d7:	89 ce                	mov    esi,ecx
c00080d9:	83 ec 0c             	sub    esp,0xc
c00080dc:	56                   	push   esi
c00080dd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e5:	55                   	push   ebp
c00080e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ea:	e8 1e 99 ff ff       	call   c0001a0d <disk_write>
c00080ef:	83 c4 20             	add    esp,0x20
c00080f2:	85 c0                	test   eax,eax
c00080f4:	0f 85 09 01 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c00080fa:	31 d2                	xor    edx,edx
c00080fc:	b9 00 02 00 00       	mov    ecx,0x200
c0008101:	89 e8                	mov    eax,ebp
c0008103:	e8 ce 99 ff ff       	call   c0001ad6 <mem_set>
c0008108:	31 d2                	xor    edx,edx
c000810a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000810e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008112:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008116:	75 b3                	jne    c00080cb <f_mkfs+0xf79>
c0008118:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000811b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008122:	40                   	inc    eax
c0008123:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008127:	0f 87 65 ff ff ff    	ja     c0008092 <f_mkfs+0xf40>
c000812d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008132:	74 04                	je     c0008138 <f_mkfs+0xfe6>
c0008134:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008138:	89 fb                	mov    ebx,edi
c000813a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000813e:	76 04                	jbe    c0008144 <f_mkfs+0xff2>
c0008140:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008144:	83 ec 0c             	sub    esp,0xc
c0008147:	53                   	push   ebx
c0008148:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000814c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008150:	55                   	push   ebp
c0008151:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008155:	e8 b3 98 ff ff       	call   c0001a0d <disk_write>
c000815a:	83 c4 20             	add    esp,0x20
c000815d:	85 c0                	test   eax,eax
c000815f:	0f 85 9e 00 00 00    	jne    c0008203 <f_mkfs+0x10b1>
c0008165:	31 d2                	xor    edx,edx
c0008167:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000816b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000816f:	29 df                	sub    edi,ebx
c0008171:	75 c5                	jne    c0008138 <f_mkfs+0xfe6>
c0008173:	b1 0c                	mov    cl,0xc
c0008175:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000817a:	74 1d                	je     c0008199 <f_mkfs+0x1047>
c000817c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008181:	b1 06                	mov    cl,0x6
c0008183:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008187:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000818b:	72 0c                	jb     c0008199 <f_mkfs+0x1047>
c000818d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008192:	0f 94 c1             	sete   cl
c0008195:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008199:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000819e:	75 4c                	jne    c00081ec <f_mkfs+0x109a>
c00081a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081a8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081af:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081b6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081cc:	0f b6 c9             	movzx  ecx,cl
c00081cf:	83 ec 0c             	sub    esp,0xc
c00081d2:	55                   	push   ebp
c00081d3:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081de:	e8 2f c2 ff ff       	call   c0004412 <create_partition>
c00081e3:	83 c4 10             	add    esp,0x10
c00081e6:	89 c3                	mov    ebx,eax
c00081e8:	85 c0                	test   eax,eax
c00081ea:	75 34                	jne    c0008220 <f_mkfs+0x10ce>
c00081ec:	31 db                	xor    ebx,ebx
c00081ee:	50                   	push   eax
c00081ef:	6a 00                	push   0x0
c00081f1:	6a 00                	push   0x0
c00081f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081f7:	e8 27 98 ff ff       	call   c0001a23 <disk_ioctl>
c00081fc:	83 c4 10             	add    esp,0x10
c00081ff:	85 c0                	test   eax,eax
c0008201:	74 1d                	je     c0008220 <f_mkfs+0x10ce>
c0008203:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000820b:	75 0c                	jne    c0008219 <f_mkfs+0x10c7>
c000820d:	83 ec 0c             	sub    esp,0xc
c0008210:	55                   	push   ebp
c0008211:	e8 75 00 00 00       	call   c000828b <ff_memfree>
c0008216:	83 c4 10             	add    esp,0x10
c0008219:	bb 01 00 00 00       	mov    ebx,0x1
c000821e:	eb 48                	jmp    c0008268 <f_mkfs+0x1116>
c0008220:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008228:	75 3e                	jne    c0008268 <f_mkfs+0x1116>
c000822a:	83 ec 0c             	sub    esp,0xc
c000822d:	55                   	push   ebp
c000822e:	e8 58 00 00 00       	call   c000828b <ff_memfree>
c0008233:	83 c4 10             	add    esp,0x10
c0008236:	eb 30                	jmp    c0008268 <f_mkfs+0x1116>
c0008238:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000823d:	0f 85 eb fa ff ff    	jne    c0007d2e <f_mkfs+0xbdc>
c0008243:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008247:	81 ff 80 00 00 00    	cmp    edi,0x80
c000824d:	0f 86 b8 f9 ff ff    	jbe    c0007c0b <f_mkfs+0xab9>
c0008253:	e9 bf fb ff ff       	jmp    c0007e17 <f_mkfs+0xcc5>
c0008258:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000825d:	0f 85 c0 fa ff ff    	jne    c0007d23 <f_mkfs+0xbd1>
c0008263:	e9 af fb ff ff       	jmp    c0007e17 <f_mkfs+0xcc5>
c0008268:	81 c4 9c 00 00 00    	add    esp,0x9c
c000826e:	89 d8                	mov    eax,ebx
c0008270:	5b                   	pop    ebx
c0008271:	5e                   	pop    esi
c0008272:	5f                   	pop    edi
c0008273:	5d                   	pop    ebp
c0008274:	c3                   	ret    

c0008275 <ff_memalloc>:
c0008275:	83 ec 0c             	sub    esp,0xc
c0008278:	83 ec 0c             	sub    esp,0xc
c000827b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827f:	e8 98 73 00 00       	call   c000f61c <malloc>
c0008284:	83 c4 10             	add    esp,0x10
c0008287:	83 c4 0c             	add    esp,0xc
c000828a:	c3                   	ret    

c000828b <ff_memfree>:
c000828b:	83 ec 0c             	sub    esp,0xc
c000828e:	83 ec 0c             	sub    esp,0xc
c0008291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008295:	e8 92 73 00 00       	call   c000f62c <free>
c000829a:	83 c4 10             	add    esp,0x10
c000829d:	90                   	nop
c000829e:	83 c4 0c             	add    esp,0xc
c00082a1:	c3                   	ret    

c00082a2 <ff_uni2oem>:
c00082a2:	83 ec 14             	sub    esp,0x14
c00082a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082a9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082ad:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b4:	c7 44 24 0c 20 8f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028f20
c00082bc:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c1:	77 0b                	ja     c00082ce <ff_uni2oem+0x2c>
c00082c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082c7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082cc:	eb 5b                	jmp    c0008329 <ff_uni2oem+0x87>
c00082ce:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082d6:	77 51                	ja     c0008329 <ff_uni2oem+0x87>
c00082d8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082de:	75 49                	jne    c0008329 <ff_uni2oem+0x87>
c00082e0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e7:	eb 0b                	jmp    c00082f4 <ff_uni2oem+0x52>
c00082e9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ee:	40                   	inc    eax
c00082ef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082fa:	77 1b                	ja     c0008317 <ff_uni2oem+0x75>
c00082fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008301:	01 c0                	add    eax,eax
c0008303:	89 c2                	mov    edx,eax
c0008305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008309:	01 d0                	add    eax,edx
c000830b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000830e:	0f b7 c0             	movzx  eax,ax
c0008311:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008315:	75 d2                	jne    c00082e9 <ff_uni2oem+0x47>
c0008317:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000831c:	83 e8 80             	sub    eax,0xffffff80
c000831f:	25 ff 00 00 00       	and    eax,0xff
c0008324:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008329:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832e:	83 c4 14             	add    esp,0x14
c0008331:	c3                   	ret    

c0008332 <ff_oem2uni>:
c0008332:	83 ec 18             	sub    esp,0x18
c0008335:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000833d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008342:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008346:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000834d:	c7 44 24 10 20 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f20
c0008355:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000835b:	77 0b                	ja     c0008368 <ff_oem2uni+0x36>
c000835d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008361:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008366:	eb 2d                	jmp    c0008395 <ff_oem2uni+0x63>
c0008368:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000836e:	75 25                	jne    c0008395 <ff_oem2uni+0x63>
c0008370:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008377:	77 1c                	ja     c0008395 <ff_oem2uni+0x63>
c0008379:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000837e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008383:	01 c0                	add    eax,eax
c0008385:	89 c2                	mov    edx,eax
c0008387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000838b:	01 d0                	add    eax,edx
c000838d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008390:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008395:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000839a:	83 c4 18             	add    esp,0x18
c000839d:	c3                   	ret    

c000839e <ff_wtoupper>:
c000839e:	83 ec 10             	sub    esp,0x10
c00083a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083a9:	0f 87 3e 01 00 00    	ja     c00084ed <ff_wtoupper+0x14f>
c00083af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083b3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083b8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083bf:	77 07                	ja     c00083c8 <ff_wtoupper+0x2a>
c00083c1:	b8 20 8d 02 c0       	mov    eax,0xc0028d20
c00083c6:	eb 05                	jmp    c00083cd <ff_wtoupper+0x2f>
c00083c8:	b8 60 8c 02 c0       	mov    eax,0xc0028c60
c00083cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d5:	8d 50 02             	lea    edx,[eax+0x2]
c00083d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083dc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083e4:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ea:	0f 84 f4 00 00 00    	je     c00084e4 <ff_wtoupper+0x146>
c00083f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f5:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083fa:	0f 82 e4 00 00 00    	jb     c00084e4 <ff_wtoupper+0x146>
c0008400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008404:	8d 50 02             	lea    edx,[eax+0x2]
c0008407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000840b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008413:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008418:	66 c1 e8 08          	shr    ax,0x8
c000841c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008421:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008428:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000842d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008432:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008437:	01 ca                	add    edx,ecx
c0008439:	39 d0                	cmp    eax,edx
c000843b:	0f 8d 86 00 00 00    	jge    c00084c7 <ff_wtoupper+0x129>
c0008441:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008446:	83 f8 08             	cmp    eax,0x8
c0008449:	0f 87 94 00 00 00    	ja     c00084e3 <ff_wtoupper+0x145>
c000844f:	8b 04 85 20 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73e0]
c0008456:	ff e0                	jmp    eax
c0008458:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000845d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008462:	29 c2                	sub    edx,eax
c0008464:	89 d0                	mov    eax,edx
c0008466:	01 c0                	add    eax,eax
c0008468:	89 c2                	mov    edx,eax
c000846a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000846e:	01 d0                	add    eax,edx
c0008470:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008473:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008478:	eb 4b                	jmp    c00084c5 <ff_wtoupper+0x127>
c000847a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000847f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008483:	83 e0 01             	and    eax,0x1
c0008486:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000848b:	eb 38                	jmp    c00084c5 <ff_wtoupper+0x127>
c000848d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008493:	eb 30                	jmp    c00084c5 <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000849b:	eb 28                	jmp    c00084c5 <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084a3:	eb 20                	jmp    c00084c5 <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084ab:	eb 18                	jmp    c00084c5 <ff_wtoupper+0x127>
c00084ad:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084b3:	eb 10                	jmp    c00084c5 <ff_wtoupper+0x127>
c00084b5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084bb:	eb 08                	jmp    c00084c5 <ff_wtoupper+0x127>
c00084bd:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084c4:	90                   	nop
c00084c5:	eb 1c                	jmp    c00084e3 <ff_wtoupper+0x145>
c00084c7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084cd:	0f 85 fe fe ff ff    	jne    c00083d1 <ff_wtoupper+0x33>
c00084d3:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d8:	01 c0                	add    eax,eax
c00084da:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084de:	e9 ee fe ff ff       	jmp    c00083d1 <ff_wtoupper+0x33>
c00084e3:	90                   	nop
c00084e4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	c3                   	ret    

c00084f5 <psrc_set_converter>:
c00084f5:	56                   	push   esi
c00084f6:	89 d6                	mov    esi,edx
c00084f8:	53                   	push   ebx
c00084f9:	89 c3                	mov    ebx,eax
c00084fb:	83 ec 0c             	sub    esp,0xc
c00084fe:	52                   	push   edx
c00084ff:	50                   	push   eax
c0008500:	e8 6f 55 00 00       	call   c000da74 <sinc_set_converter>
c0008505:	83 c4 10             	add    esp,0x10
c0008508:	85 c0                	test   eax,eax
c000850a:	74 25                	je     c0008531 <psrc_set_converter+0x3c>
c000850c:	50                   	push   eax
c000850d:	50                   	push   eax
c000850e:	56                   	push   esi
c000850f:	53                   	push   ebx
c0008510:	e8 17 5d 00 00       	call   c000e22c <zoh_set_converter>
c0008515:	83 c4 10             	add    esp,0x10
c0008518:	85 c0                	test   eax,eax
c000851a:	74 15                	je     c0008531 <psrc_set_converter+0x3c>
c000851c:	51                   	push   ecx
c000851d:	51                   	push   ecx
c000851e:	56                   	push   esi
c000851f:	53                   	push   ebx
c0008520:	e8 0f 11 00 00       	call   c0009634 <linear_set_converter>
c0008525:	83 c4 10             	add    esp,0x10
c0008528:	ba 0a 00 00 00       	mov    edx,0xa
c000852d:	85 c0                	test   eax,eax
c000852f:	75 02                	jne    c0008533 <psrc_set_converter+0x3e>
c0008531:	31 d2                	xor    edx,edx
c0008533:	89 d0                	mov    eax,edx
c0008535:	5a                   	pop    edx
c0008536:	5b                   	pop    ebx
c0008537:	5e                   	pop    esi
c0008538:	c3                   	ret    

c0008539 <src_delete>:
c0008539:	53                   	push   ebx
c000853a:	83 ec 08             	sub    esp,0x8
c000853d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008541:	85 db                	test   ebx,ebx
c0008543:	74 29                	je     c000856e <src_delete+0x35>
c0008545:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008548:	85 c0                	test   eax,eax
c000854a:	74 0c                	je     c0008558 <src_delete+0x1f>
c000854c:	83 ec 0c             	sub    esp,0xc
c000854f:	50                   	push   eax
c0008550:	e8 d7 70 00 00       	call   c000f62c <free>
c0008555:	83 c4 10             	add    esp,0x10
c0008558:	50                   	push   eax
c0008559:	6a 3c                	push   0x3c
c000855b:	6a 00                	push   0x0
c000855d:	53                   	push   ebx
c000855e:	e8 59 81 ff ff       	call   c00006bc <memset>
c0008563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008566:	e8 c1 70 00 00       	call   c000f62c <free>
c000856b:	83 c4 10             	add    esp,0x10
c000856e:	31 c0                	xor    eax,eax
c0008570:	83 c4 08             	add    esp,0x8
c0008573:	5b                   	pop    ebx
c0008574:	c3                   	ret    

c0008575 <src_process>:
c0008575:	55                   	push   ebp
c0008576:	57                   	push   edi
c0008577:	56                   	push   esi
c0008578:	53                   	push   ebx
c0008579:	83 ec 1c             	sub    esp,0x1c
c000857c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008580:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008584:	85 ed                	test   ebp,ebp
c0008586:	0f 84 6f 01 00 00    	je     c00086fb <src_process+0x186>
c000858c:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008590:	0f 84 6c 01 00 00    	je     c0008702 <src_process+0x18d>
c0008596:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000859a:	0f 84 62 01 00 00    	je     c0008702 <src_process+0x18d>
c00085a0:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085a7:	0f 85 5c 01 00 00    	jne    c0008709 <src_process+0x194>
c00085ad:	85 db                	test   ebx,ebx
c00085af:	0f 84 5b 01 00 00    	je     c0008710 <src_process+0x19b>
c00085b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085b7:	85 f6                	test   esi,esi
c00085b9:	0f 84 58 01 00 00    	je     c0008717 <src_process+0x1a2>
c00085bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085c2:	85 ff                	test   edi,edi
c00085c4:	0f 84 4d 01 00 00    	je     c0008717 <src_process+0x1a2>
c00085ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085d8:	68 00 00 70 3f       	push   0x3f700000
c00085dd:	6a 00                	push   0x0
c00085df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085e7:	e8 f3 f5 01 00       	call   c0027bdf <__ltdf2>
c00085ec:	83 c4 10             	add    esp,0x10
c00085ef:	85 c0                	test   eax,eax
c00085f1:	0f 88 27 01 00 00    	js     c000871e <src_process+0x1a9>
c00085f7:	68 00 00 70 40       	push   0x40700000
c00085fc:	6a 00                	push   0x0
c00085fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008606:	e8 b6 f5 01 00       	call   c0027bc1 <__gtdf2>
c000860b:	83 c4 10             	add    esp,0x10
c000860e:	85 c0                	test   eax,eax
c0008610:	0f 8f 08 01 00 00    	jg     c000871e <src_process+0x1a9>
c0008616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000861a:	79 07                	jns    c0008623 <src_process+0xae>
c000861c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008623:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008626:	85 c0                	test   eax,eax
c0008628:	79 50                	jns    c000867a <src_process+0x105>
c000862a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008631:	39 fe                	cmp    esi,edi
c0008633:	72 37                	jb     c000866c <src_process+0xf7>
c0008635:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000863c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008643:	68 00 00 70 3f       	push   0x3f700000
c0008648:	6a 00                	push   0x0
c000864a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000864d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008650:	e8 8a f5 01 00       	call   c0027bdf <__ltdf2>
c0008655:	83 c4 10             	add    esp,0x10
c0008658:	85 c0                	test   eax,eax
c000865a:	79 37                	jns    c0008693 <src_process+0x11e>
c000865c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008660:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008664:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008667:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000866a:	eb 27                	jmp    c0008693 <src_process+0x11e>
c000866c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000866f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008673:	8d 04 86             	lea    eax,[esi+eax*4]
c0008676:	39 c7                	cmp    edi,eax
c0008678:	eb 0d                	jmp    c0008687 <src_process+0x112>
c000867a:	39 fe                	cmp    esi,edi
c000867c:	72 ee                	jb     c000866c <src_process+0xf7>
c000867e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008682:	8d 04 87             	lea    eax,[edi+eax*4]
c0008685:	39 c6                	cmp    esi,eax
c0008687:	73 ac                	jae    c0008635 <src_process+0xc0>
c0008689:	b8 10 00 00 00       	mov    eax,0x10
c000868e:	e9 90 00 00 00       	jmp    c0008723 <src_process+0x1ae>
c0008693:	83 ec 10             	sub    esp,0x10
c0008696:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008699:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000869c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000869f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086a2:	e8 3d ec 01 00       	call   c00272e4 <__subdf3>
c00086a7:	83 c4 18             	add    esp,0x18
c00086aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086b2:	52                   	push   edx
c00086b3:	50                   	push   eax
c00086b4:	e8 b7 f6 01 00       	call   c0027d70 <fabs>
c00086b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c1:	83 c4 10             	add    esp,0x10
c00086c4:	68 af 03 d2 3c       	push   0x3cd203af
c00086c9:	68 16 56 e7 9e       	push   0x9ee75616
c00086ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086d6:	e8 04 f5 01 00       	call   c0027bdf <__ltdf2>
c00086db:	83 c4 10             	add    esp,0x10
c00086de:	85 c0                	test   eax,eax
c00086e0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086e4:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086e8:	79 05                	jns    c00086ef <src_process+0x17a>
c00086ea:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ed:	eb 03                	jmp    c00086f2 <src_process+0x17d>
c00086ef:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	ff e0                	jmp    eax
c00086fb:	b8 02 00 00 00       	mov    eax,0x2
c0008700:	eb 21                	jmp    c0008723 <src_process+0x1ae>
c0008702:	b8 07 00 00 00       	mov    eax,0x7
c0008707:	eb 1a                	jmp    c0008723 <src_process+0x1ae>
c0008709:	b8 12 00 00 00       	mov    eax,0x12
c000870e:	eb 13                	jmp    c0008723 <src_process+0x1ae>
c0008710:	b8 03 00 00 00       	mov    eax,0x3
c0008715:	eb 0c                	jmp    c0008723 <src_process+0x1ae>
c0008717:	b8 04 00 00 00       	mov    eax,0x4
c000871c:	eb 05                	jmp    c0008723 <src_process+0x1ae>
c000871e:	b8 06 00 00 00       	mov    eax,0x6
c0008723:	83 c4 1c             	add    esp,0x1c
c0008726:	5b                   	pop    ebx
c0008727:	5e                   	pop    esi
c0008728:	5f                   	pop    edi
c0008729:	5d                   	pop    ebp
c000872a:	c3                   	ret    

c000872b <src_callback_read>:
c000872b:	55                   	push   ebp
c000872c:	57                   	push   edi
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	83 ec 3c             	sub    esp,0x3c
c0008732:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008736:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000873a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000873e:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008742:	85 ed                	test   ebp,ebp
c0008744:	0f 8e 52 01 00 00    	jle    c000889c <src_callback_read+0x171>
c000874a:	85 db                	test   ebx,ebx
c000874c:	0f 84 4a 01 00 00    	je     c000889c <src_callback_read+0x171>
c0008752:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008759:	74 0c                	je     c0008767 <src_callback_read+0x3c>
c000875b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008762:	e9 35 01 00 00       	jmp    c000889c <src_callback_read+0x171>
c0008767:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000876b:	75 0c                	jne    c0008779 <src_callback_read+0x4e>
c000876d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008774:	e9 23 01 00 00       	jmp    c000889c <src_callback_read+0x171>
c0008779:	51                   	push   ecx
c000877a:	6a 24                	push   0x24
c000877c:	6a 00                	push   0x0
c000877e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008782:	50                   	push   eax
c0008783:	e8 34 7f ff ff       	call   c00006bc <memset>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	68 00 00 70 3f       	push   0x3f700000
c0008790:	6a 00                	push   0x0
c0008792:	57                   	push   edi
c0008793:	56                   	push   esi
c0008794:	e8 46 f4 01 00       	call   c0027bdf <__ltdf2>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	78 3e                	js     c00087de <src_callback_read+0xb3>
c00087a0:	68 00 00 70 40       	push   0x40700000
c00087a5:	6a 00                	push   0x0
c00087a7:	57                   	push   edi
c00087a8:	56                   	push   esi
c00087a9:	e8 13 f4 01 00       	call   c0027bc1 <__gtdf2>
c00087ae:	83 c4 10             	add    esp,0x10
c00087b1:	85 c0                	test   eax,eax
c00087b3:	7f 29                	jg     c00087de <src_callback_read+0xb3>
c00087b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087b9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087c8:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d0:	31 f6                	xor    esi,esi
c00087d2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087d9:	e9 97 00 00 00       	jmp    c0008875 <src_callback_read+0x14a>
c00087de:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087e5:	e9 b2 00 00 00       	jmp    c000889c <src_callback_read+0x171>
c00087ea:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f2:	52                   	push   edx
c00087f3:	52                   	push   edx
c00087f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087f8:	50                   	push   eax
c00087f9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087fc:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008803:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008807:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	75 08                	jne    c000881a <src_callback_read+0xef>
c0008812:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000881a:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008821:	50                   	push   eax
c0008822:	50                   	push   eax
c0008823:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008827:	50                   	push   eax
c0008828:	53                   	push   ebx
c0008829:	e8 47 fd ff ff       	call   c0008575 <src_process>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008838:	85 c0                	test   eax,eax
c000883a:	75 49                	jne    c0008885 <src_callback_read+0x15a>
c000883c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008840:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008843:	89 f9                	mov    ecx,edi
c0008845:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008849:	0f af ca             	imul   ecx,edx
c000884c:	c1 e1 02             	shl    ecx,0x2
c000884f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008853:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008857:	0f af d1             	imul   edx,ecx
c000885a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000885e:	c1 e2 02             	shl    edx,0x2
c0008861:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008865:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008868:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000886d:	74 12                	je     c0008881 <src_callback_read+0x156>
c000886f:	39 d5                	cmp    ebp,edx
c0008871:	7e 14                	jle    c0008887 <src_callback_read+0x15c>
c0008873:	89 d6                	mov    esi,edx
c0008875:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000887a:	75 9e                	jne    c000881a <src_callback_read+0xef>
c000887c:	e9 69 ff ff ff       	jmp    c00087ea <src_callback_read+0xbf>
c0008881:	85 c9                	test   ecx,ecx
c0008883:	75 ea                	jne    c000886f <src_callback_read+0x144>
c0008885:	89 f2                	mov    edx,esi
c0008887:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000888b:	85 c0                	test   eax,eax
c000888d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008890:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008894:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008897:	74 05                	je     c000889e <src_callback_read+0x173>
c0008899:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000889c:	31 d2                	xor    edx,edx
c000889e:	83 c4 3c             	add    esp,0x3c
c00088a1:	89 d0                	mov    eax,edx
c00088a3:	5b                   	pop    ebx
c00088a4:	5e                   	pop    esi
c00088a5:	5f                   	pop    edi
c00088a6:	5d                   	pop    ebp
c00088a7:	c3                   	ret    

c00088a8 <src_set_ratio>:
c00088a8:	57                   	push   edi
c00088a9:	ba 02 00 00 00       	mov    edx,0x2
c00088ae:	56                   	push   esi
c00088af:	53                   	push   ebx
c00088b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088bc:	85 db                	test   ebx,ebx
c00088be:	74 4c                	je     c000890c <src_set_ratio+0x64>
c00088c0:	ba 07 00 00 00       	mov    edx,0x7
c00088c5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088c9:	74 41                	je     c000890c <src_set_ratio+0x64>
c00088cb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088cf:	74 3b                	je     c000890c <src_set_ratio+0x64>
c00088d1:	68 00 00 70 3f       	push   0x3f700000
c00088d6:	6a 00                	push   0x0
c00088d8:	57                   	push   edi
c00088d9:	56                   	push   esi
c00088da:	e8 00 f3 01 00       	call   c0027bdf <__ltdf2>
c00088df:	83 c4 10             	add    esp,0x10
c00088e2:	ba 06 00 00 00       	mov    edx,0x6
c00088e7:	85 c0                	test   eax,eax
c00088e9:	78 21                	js     c000890c <src_set_ratio+0x64>
c00088eb:	68 00 00 70 40       	push   0x40700000
c00088f0:	6a 00                	push   0x0
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	e8 c8 f2 01 00       	call   c0027bc1 <__gtdf2>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	ba 06 00 00 00       	mov    edx,0x6
c0008901:	85 c0                	test   eax,eax
c0008903:	7f 07                	jg     c000890c <src_set_ratio+0x64>
c0008905:	89 33                	mov    DWORD PTR [ebx],esi
c0008907:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000890a:	31 d2                	xor    edx,edx
c000890c:	5b                   	pop    ebx
c000890d:	89 d0                	mov    eax,edx
c000890f:	5e                   	pop    esi
c0008910:	5f                   	pop    edi
c0008911:	c3                   	ret    

c0008912 <src_get_channels>:
c0008912:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008916:	b8 02 00 00 00       	mov    eax,0x2
c000891b:	85 d2                	test   edx,edx
c000891d:	74 14                	je     c0008933 <src_get_channels+0x21>
c000891f:	b8 07 00 00 00       	mov    eax,0x7
c0008924:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008928:	74 09                	je     c0008933 <src_get_channels+0x21>
c000892a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000892e:	74 03                	je     c0008933 <src_get_channels+0x21>
c0008930:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008933:	c3                   	ret    

c0008934 <src_reset>:
c0008934:	53                   	push   ebx
c0008935:	b8 02 00 00 00       	mov    eax,0x2
c000893a:	83 ec 08             	sub    esp,0x8
c000893d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008941:	85 db                	test   ebx,ebx
c0008943:	74 36                	je     c000897b <src_reset+0x47>
c0008945:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008948:	85 c0                	test   eax,eax
c000894a:	74 09                	je     c0008955 <src_reset+0x21>
c000894c:	83 ec 0c             	sub    esp,0xc
c000894f:	53                   	push   ebx
c0008950:	ff d0                	call   eax
c0008952:	83 c4 10             	add    esp,0x10
c0008955:	31 c0                	xor    eax,eax
c0008957:	31 d2                	xor    edx,edx
c0008959:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000895c:	89 03                	mov    DWORD PTR [ebx],eax
c000895e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008961:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008964:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000896b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008972:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008979:	31 c0                	xor    eax,eax
c000897b:	83 c4 08             	add    esp,0x8
c000897e:	5b                   	pop    ebx
c000897f:	c3                   	ret    

c0008980 <src_new>:
c0008980:	57                   	push   edi
c0008981:	56                   	push   esi
c0008982:	53                   	push   ebx
c0008983:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008987:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000898b:	85 f6                	test   esi,esi
c000898d:	74 73                	je     c0008a02 <src_new+0x82>
c000898f:	85 ff                	test   edi,edi
c0008991:	7f 08                	jg     c000899b <src_new+0x1b>
c0008993:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008999:	eb 1e                	jmp    c00089b9 <src_new+0x39>
c000899b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a1:	50                   	push   eax
c00089a2:	50                   	push   eax
c00089a3:	6a 3c                	push   0x3c
c00089a5:	6a 01                	push   0x1
c00089a7:	e8 a0 6c 00 00       	call   c000f64c <calloc>
c00089ac:	83 c4 10             	add    esp,0x10
c00089af:	89 c3                	mov    ebx,eax
c00089b1:	85 c0                	test   eax,eax
c00089b3:	75 10                	jne    c00089c5 <src_new+0x45>
c00089b5:	85 f6                	test   esi,esi
c00089b7:	75 04                	jne    c00089bd <src_new+0x3d>
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	eb 4b                	jmp    c0008a08 <src_new+0x88>
c00089bd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089c3:	eb 43                	jmp    c0008a08 <src_new+0x88>
c00089c5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089c8:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089d3:	e8 1d fb ff ff       	call   c00084f5 <psrc_set_converter>
c00089d8:	85 c0                	test   eax,eax
c00089da:	74 18                	je     c00089f4 <src_new+0x74>
c00089dc:	85 f6                	test   esi,esi
c00089de:	74 06                	je     c00089e6 <src_new+0x66>
c00089e0:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089e6:	83 ec 0c             	sub    esp,0xc
c00089e9:	53                   	push   ebx
c00089ea:	31 db                	xor    ebx,ebx
c00089ec:	e8 3b 6c 00 00       	call   c000f62c <free>
c00089f1:	83 c4 10             	add    esp,0x10
c00089f4:	83 ec 0c             	sub    esp,0xc
c00089f7:	53                   	push   ebx
c00089f8:	e8 37 ff ff ff       	call   c0008934 <src_reset>
c00089fd:	83 c4 10             	add    esp,0x10
c0008a00:	eb 06                	jmp    c0008a08 <src_new+0x88>
c0008a02:	85 ff                	test   edi,edi
c0008a04:	7f 9b                	jg     c00089a1 <src_new+0x21>
c0008a06:	eb b1                	jmp    c00089b9 <src_new+0x39>
c0008a08:	89 d8                	mov    eax,ebx
c0008a0a:	5b                   	pop    ebx
c0008a0b:	5e                   	pop    esi
c0008a0c:	5f                   	pop    edi
c0008a0d:	c3                   	ret    

c0008a0e <src_callback_new>:
c0008a0e:	56                   	push   esi
c0008a0f:	53                   	push   ebx
c0008a10:	53                   	push   ebx
c0008a11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a19:	85 f6                	test   esi,esi
c0008a1b:	75 0e                	jne    c0008a2b <src_callback_new+0x1d>
c0008a1d:	31 db                	xor    ebx,ebx
c0008a1f:	85 c0                	test   eax,eax
c0008a21:	74 47                	je     c0008a6a <src_callback_new+0x5c>
c0008a23:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a29:	eb 3f                	jmp    c0008a6a <src_callback_new+0x5c>
c0008a2b:	85 c0                	test   eax,eax
c0008a2d:	74 06                	je     c0008a35 <src_callback_new+0x27>
c0008a2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a35:	51                   	push   ecx
c0008a36:	50                   	push   eax
c0008a37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a3f:	e8 3c ff ff ff       	call   c0008980 <src_new>
c0008a44:	83 c4 10             	add    esp,0x10
c0008a47:	89 c3                	mov    ebx,eax
c0008a49:	85 c0                	test   eax,eax
c0008a4b:	74 1d                	je     c0008a6a <src_callback_new+0x5c>
c0008a4d:	83 ec 0c             	sub    esp,0xc
c0008a50:	50                   	push   eax
c0008a51:	e8 de fe ff ff       	call   c0008934 <src_reset>
c0008a56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a5a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a61:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a64:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a67:	83 c4 10             	add    esp,0x10
c0008a6a:	89 d8                	mov    eax,ebx
c0008a6c:	5a                   	pop    edx
c0008a6d:	5b                   	pop    ebx
c0008a6e:	5e                   	pop    esi
c0008a6f:	c3                   	ret    

c0008a70 <src_get_name>:
c0008a70:	53                   	push   ebx
c0008a71:	83 ec 14             	sub    esp,0x14
c0008a74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a78:	53                   	push   ebx
c0008a79:	e8 d0 4f 00 00       	call   c000da4e <sinc_get_name>
c0008a7e:	83 c4 10             	add    esp,0x10
c0008a81:	85 c0                	test   eax,eax
c0008a83:	75 1d                	jne    c0008aa2 <src_get_name+0x32>
c0008a85:	83 ec 0c             	sub    esp,0xc
c0008a88:	53                   	push   ebx
c0008a89:	e8 80 57 00 00       	call   c000e20e <zoh_get_name>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	85 c0                	test   eax,eax
c0008a93:	75 0d                	jne    c0008aa2 <src_get_name+0x32>
c0008a95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a99:	83 c4 08             	add    esp,0x8
c0008a9c:	5b                   	pop    ebx
c0008a9d:	e9 74 0b 00 00       	jmp    c0009616 <linear_get_name>
c0008aa2:	83 c4 08             	add    esp,0x8
c0008aa5:	5b                   	pop    ebx
c0008aa6:	c3                   	ret    

c0008aa7 <src_get_description>:
c0008aa7:	53                   	push   ebx
c0008aa8:	83 ec 14             	sub    esp,0x14
c0008aab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008aaf:	53                   	push   ebx
c0008ab0:	e8 ac 4f 00 00       	call   c000da61 <sinc_get_description>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	85 c0                	test   eax,eax
c0008aba:	75 1d                	jne    c0008ad9 <src_get_description+0x32>
c0008abc:	83 ec 0c             	sub    esp,0xc
c0008abf:	53                   	push   ebx
c0008ac0:	e8 58 57 00 00       	call   c000e21d <zoh_get_description>
c0008ac5:	83 c4 10             	add    esp,0x10
c0008ac8:	85 c0                	test   eax,eax
c0008aca:	75 0d                	jne    c0008ad9 <src_get_description+0x32>
c0008acc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad0:	83 c4 08             	add    esp,0x8
c0008ad3:	5b                   	pop    ebx
c0008ad4:	e9 4c 0b 00 00       	jmp    c0009625 <linear_get_description>
c0008ad9:	83 c4 08             	add    esp,0x8
c0008adc:	5b                   	pop    ebx
c0008add:	c3                   	ret    

c0008ade <src_get_version>:
c0008ade:	b8 20 90 02 c0       	mov    eax,0xc0029020
c0008ae3:	c3                   	ret    

c0008ae4 <src_is_valid_ratio>:
c0008ae4:	83 ec 1c             	sub    esp,0x1c
c0008ae7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008aef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008af3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008af7:	68 00 00 70 3f       	push   0x3f700000
c0008afc:	6a 00                	push   0x0
c0008afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b06:	e8 d4 f0 01 00       	call   c0027bdf <__ltdf2>
c0008b0b:	83 c4 10             	add    esp,0x10
c0008b0e:	31 d2                	xor    edx,edx
c0008b10:	85 c0                	test   eax,eax
c0008b12:	78 1e                	js     c0008b32 <src_is_valid_ratio+0x4e>
c0008b14:	68 00 00 70 40       	push   0x40700000
c0008b19:	6a 00                	push   0x0
c0008b1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b23:	e8 99 f0 01 00       	call   c0027bc1 <__gtdf2>
c0008b28:	31 d2                	xor    edx,edx
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	0f 9e c2             	setle  dl
c0008b32:	89 d0                	mov    eax,edx
c0008b34:	83 c4 1c             	add    esp,0x1c
c0008b37:	c3                   	ret    

c0008b38 <src_error>:
c0008b38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3c:	31 c0                	xor    eax,eax
c0008b3e:	85 d2                	test   edx,edx
c0008b40:	74 03                	je     c0008b45 <src_error+0xd>
c0008b42:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b45:	c3                   	ret    

c0008b46 <src_strerror>:
c0008b46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b4a:	31 c0                	xor    eax,eax
c0008b4c:	83 fa 17             	cmp    edx,0x17
c0008b4f:	77 07                	ja     c0008b58 <src_strerror+0x12>
c0008b51:	8b 04 95 80 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b80]
c0008b58:	c3                   	ret    

c0008b59 <src_simple>:
c0008b59:	56                   	push   esi
c0008b5a:	53                   	push   ebx
c0008b5b:	83 ec 18             	sub    esp,0x18
c0008b5e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b66:	50                   	push   eax
c0008b67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b6f:	e8 0c fe ff ff       	call   c0008980 <src_new>
c0008b74:	83 c4 10             	add    esp,0x10
c0008b77:	85 c0                	test   eax,eax
c0008b79:	75 06                	jne    c0008b81 <src_simple+0x28>
c0008b7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b7f:	eb 25                	jmp    c0008ba6 <src_simple+0x4d>
c0008b81:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b88:	89 c3                	mov    ebx,eax
c0008b8a:	50                   	push   eax
c0008b8b:	50                   	push   eax
c0008b8c:	56                   	push   esi
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 e2 f9 ff ff       	call   c0008575 <src_process>
c0008b93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b9a:	e8 9a f9 ff ff       	call   c0008539 <src_delete>
c0008b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	83 c4 14             	add    esp,0x14
c0008ba9:	5b                   	pop    ebx
c0008baa:	5e                   	pop    esi
c0008bab:	c3                   	ret    

c0008bac <src_short_to_float_array>:
c0008bac:	53                   	push   ebx
c0008bad:	83 ec 18             	sub    esp,0x18
c0008bb0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bb4:	85 db                	test   ebx,ebx
c0008bb6:	74 54                	je     c0008c0c <src_short_to_float_array+0x60>
c0008bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bbc:	4b                   	dec    ebx
c0008bbd:	83 ec 0c             	sub    esp,0xc
c0008bc0:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bc4:	50                   	push   eax
c0008bc5:	e8 a9 ed 01 00       	call   c0027973 <__floatsidf>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bd5:	68 00 00 00 3f       	push   0x3f000000
c0008bda:	6a 00                	push   0x0
c0008bdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be4:	e8 27 e7 01 00       	call   c0027310 <__muldf3>
c0008be9:	59                   	pop    ecx
c0008bea:	59                   	pop    ecx
c0008beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfb:	e8 e3 ef 01 00       	call   c0027be3 <__truncdfsf2>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c07:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c0a:	eb a8                	jmp    c0008bb4 <src_short_to_float_array+0x8>
c0008c0c:	83 c4 18             	add    esp,0x18
c0008c0f:	5b                   	pop    ebx
c0008c10:	c3                   	ret    

c0008c11 <src_float_to_short_array>:
c0008c11:	56                   	push   esi
c0008c12:	53                   	push   ebx
c0008c13:	83 ec 14             	sub    esp,0x14
c0008c16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c1a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c1e:	85 db                	test   ebx,ebx
c0008c20:	0f 84 a4 00 00 00    	je     c0008cca <src_float_to_short_array+0xb9>
c0008c26:	83 ec 0c             	sub    esp,0xc
c0008c29:	4b                   	dec    ebx
c0008c2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c2e:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c31:	e8 d1 f0 01 00       	call   c0027d07 <__extendsfdf2>
c0008c36:	83 c4 10             	add    esp,0x10
c0008c39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c41:	68 00 00 e0 41       	push   0x41e00000
c0008c46:	6a 00                	push   0x0
c0008c48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c50:	e8 bb e6 01 00       	call   c0027310 <__muldf3>
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c60:	68 ff ff df 41       	push   0x41dfffff
c0008c65:	68 00 00 c0 ff       	push   0xffc00000
c0008c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c72:	e8 66 ef 01 00       	call   c0027bdd <__gedf2>
c0008c77:	83 c4 10             	add    esp,0x10
c0008c7a:	85 c0                	test   eax,eax
c0008c7c:	78 08                	js     c0008c86 <src_float_to_short_array+0x75>
c0008c7e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c84:	eb 98                	jmp    c0008c1e <src_float_to_short_array+0xd>
c0008c86:	68 00 00 e0 c1       	push   0xc1e00000
c0008c8b:	6a 00                	push   0x0
c0008c8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c95:	e8 47 ef 01 00       	call   c0027be1 <__ledf2>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	7f 0b                	jg     c0008cac <src_float_to_short_array+0x9b>
c0008ca1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ca7:	e9 72 ff ff ff       	jmp    c0008c1e <src_float_to_short_array+0xd>
c0008cac:	50                   	push   eax
c0008cad:	50                   	push   eax
c0008cae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb6:	e8 d5 f0 01 00       	call   c0027d90 <lrint>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	c1 f8 10             	sar    eax,0x10
c0008cc1:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008cc5:	e9 54 ff ff ff       	jmp    c0008c1e <src_float_to_short_array+0xd>
c0008cca:	83 c4 14             	add    esp,0x14
c0008ccd:	5b                   	pop    ebx
c0008cce:	5e                   	pop    esi
c0008ccf:	c3                   	ret    

c0008cd0 <src_int_to_float_array>:
c0008cd0:	53                   	push   ebx
c0008cd1:	83 ec 18             	sub    esp,0x18
c0008cd4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cd8:	85 db                	test   ebx,ebx
c0008cda:	74 52                	je     c0008d2e <src_int_to_float_array+0x5e>
c0008cdc:	83 ec 0c             	sub    esp,0xc
c0008cdf:	4b                   	dec    ebx
c0008ce0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ce4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ce7:	e8 87 ec 01 00       	call   c0027973 <__floatsidf>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf7:	68 00 00 00 3e       	push   0x3e000000
c0008cfc:	6a 00                	push   0x0
c0008cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d06:	e8 05 e6 01 00       	call   c0027310 <__muldf3>
c0008d0b:	59                   	pop    ecx
c0008d0c:	59                   	pop    ecx
c0008d0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1d:	e8 c1 ee 01 00       	call   c0027be3 <__truncdfsf2>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d29:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d2c:	eb aa                	jmp    c0008cd8 <src_int_to_float_array+0x8>
c0008d2e:	83 c4 18             	add    esp,0x18
c0008d31:	5b                   	pop    ebx
c0008d32:	c3                   	ret    

c0008d33 <src_float_to_int_array>:
c0008d33:	56                   	push   esi
c0008d34:	53                   	push   ebx
c0008d35:	83 ec 14             	sub    esp,0x14
c0008d38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d3c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d40:	85 db                	test   ebx,ebx
c0008d42:	0f 84 a2 00 00 00    	je     c0008dea <src_float_to_int_array+0xb7>
c0008d48:	83 ec 0c             	sub    esp,0xc
c0008d4b:	4b                   	dec    ebx
c0008d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d50:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d53:	e8 af ef 01 00       	call   c0027d07 <__extendsfdf2>
c0008d58:	83 c4 10             	add    esp,0x10
c0008d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d63:	68 00 00 e0 41       	push   0x41e00000
c0008d68:	6a 00                	push   0x0
c0008d6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d72:	e8 99 e5 01 00       	call   c0027310 <__muldf3>
c0008d77:	83 c4 10             	add    esp,0x10
c0008d7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d82:	68 ff ff df 41       	push   0x41dfffff
c0008d87:	68 00 00 c0 ff       	push   0xffc00000
c0008d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d94:	e8 44 ee 01 00       	call   c0027bdd <__gedf2>
c0008d99:	83 c4 10             	add    esp,0x10
c0008d9c:	85 c0                	test   eax,eax
c0008d9e:	78 09                	js     c0008da9 <src_float_to_int_array+0x76>
c0008da0:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008da7:	eb 97                	jmp    c0008d40 <src_float_to_int_array+0xd>
c0008da9:	68 00 00 e0 c1       	push   0xc1e00000
c0008dae:	6a 00                	push   0x0
c0008db0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db8:	e8 24 ee 01 00       	call   c0027be1 <__ledf2>
c0008dbd:	83 c4 10             	add    esp,0x10
c0008dc0:	85 c0                	test   eax,eax
c0008dc2:	7f 0c                	jg     c0008dd0 <src_float_to_int_array+0x9d>
c0008dc4:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dcb:	e9 70 ff ff ff       	jmp    c0008d40 <src_float_to_int_array+0xd>
c0008dd0:	50                   	push   eax
c0008dd1:	50                   	push   eax
c0008dd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dda:	e8 b1 ef 01 00       	call   c0027d90 <lrint>
c0008ddf:	83 c4 10             	add    esp,0x10
c0008de2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008de5:	e9 56 ff ff ff       	jmp    c0008d40 <src_float_to_int_array+0xd>
c0008dea:	83 c4 14             	add    esp,0x14
c0008ded:	5b                   	pop    ebx
c0008dee:	5e                   	pop    esi
c0008def:	c3                   	ret    

c0008df0 <linear_vari_process>:
c0008df0:	55                   	push   ebp
c0008df1:	31 d2                	xor    edx,edx
c0008df3:	57                   	push   edi
c0008df4:	56                   	push   esi
c0008df5:	53                   	push   ebx
c0008df6:	83 ec 3c             	sub    esp,0x3c
c0008df9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dfd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e01:	0f 8e d3 07 00 00    	jle    c00095da <linear_vari_process+0x7ea>
c0008e07:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e0b:	ba 05 00 00 00       	mov    edx,0x5
c0008e10:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e13:	85 db                	test   ebx,ebx
c0008e15:	0f 84 bf 07 00 00    	je     c00095da <linear_vari_process+0x7ea>
c0008e1b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e1e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e22:	74 19                	je     c0008e3d <linear_vari_process+0x4d>
c0008e24:	31 d2                	xor    edx,edx
c0008e26:	39 c2                	cmp    edx,eax
c0008e28:	7d 0c                	jge    c0008e36 <linear_vari_process+0x46>
c0008e2a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e2c:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e2f:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e33:	42                   	inc    edx
c0008e34:	eb f0                	jmp    c0008e26 <linear_vari_process+0x36>
c0008e36:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e3d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e40:	0f af d0             	imul   edx,eax
c0008e43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e46:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e4a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e51:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e54:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e5f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e62:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e6c:	68 00 00 70 3f       	push   0x3f700000
c0008e71:	6a 00                	push   0x0
c0008e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7b:	e8 5f ed 01 00       	call   c0027bdf <__ltdf2>
c0008e80:	83 c4 10             	add    esp,0x10
c0008e83:	ba 16 00 00 00       	mov    edx,0x16
c0008e88:	85 c0                	test   eax,eax
c0008e8a:	0f 88 4a 07 00 00    	js     c00095da <linear_vari_process+0x7ea>
c0008e90:	68 00 00 70 40       	push   0x40700000
c0008e95:	6a 00                	push   0x0
c0008e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e9f:	e8 1d ed 01 00       	call   c0027bc1 <__gtdf2>
c0008ea4:	83 c4 10             	add    esp,0x10
c0008ea7:	ba 16 00 00 00       	mov    edx,0x16
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 8f 26 07 00 00    	jg     c00095da <linear_vari_process+0x7ea>
c0008eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eb8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ebb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ec6:	68 00 00 f0 3f       	push   0x3ff00000
c0008ecb:	6a 00                	push   0x0
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 05 ed 01 00       	call   c0027bdf <__ltdf2>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	85 c0                	test   eax,eax
c0008edf:	0f 89 89 02 00 00    	jns    c000916e <linear_vari_process+0x37e>
c0008ee5:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ee8:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eeb:	0f 8d 7d 02 00 00    	jge    c000916e <linear_vari_process+0x37e>
c0008ef1:	83 ec 0c             	sub    esp,0xc
c0008ef4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ef7:	e8 77 ea 01 00       	call   c0027973 <__floatsidf>
c0008efc:	83 c4 10             	add    esp,0x10
c0008eff:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f06:	68 00 00 f0 3f       	push   0x3ff00000
c0008f0b:	6a 00                	push   0x0
c0008f0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f15:	e8 79 dd 01 00       	call   c0026c93 <__adddf3>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f21:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f25:	52                   	push   edx
c0008f26:	50                   	push   eax
c0008f27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f2f:	e8 dc e3 01 00       	call   c0027310 <__muldf3>
c0008f34:	5d                   	pop    ebp
c0008f35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f39:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f3d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f40:	e8 2e ea 01 00       	call   c0027973 <__floatsidf>
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f4c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f50:	52                   	push   edx
c0008f51:	50                   	push   eax
c0008f52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5a:	e8 34 dd 01 00       	call   c0026c93 <__adddf3>
c0008f5f:	59                   	pop    ecx
c0008f60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f68:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f6b:	e8 03 ea 01 00       	call   c0027973 <__floatsidf>
c0008f70:	83 c4 10             	add    esp,0x10
c0008f73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f7b:	52                   	push   edx
c0008f7c:	50                   	push   eax
c0008f7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f85:	e8 53 ec 01 00       	call   c0027bdd <__gedf2>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	85 c0                	test   eax,eax
c0008f8f:	0f 89 d9 01 00 00    	jns    c000916e <linear_vari_process+0x37e>
c0008f95:	85 ff                	test   edi,edi
c0008f97:	0f 8e f4 00 00 00    	jle    c0009091 <linear_vari_process+0x2a1>
c0008f9d:	83 ec 10             	sub    esp,0x10
c0008fa0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fa3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fa6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008faa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fad:	ff 30                	push   DWORD PTR [eax]
c0008faf:	e8 30 e3 01 00       	call   c00272e4 <__subdf3>
c0008fb4:	83 c4 18             	add    esp,0x18
c0008fb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fbf:	52                   	push   edx
c0008fc0:	50                   	push   eax
c0008fc1:	e8 aa ed 01 00       	call   c0027d70 <fabs>
c0008fc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fd6:	68 23 42 92 0c       	push   0xc924223
c0008fdb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fdf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe3:	e8 d9 eb 01 00       	call   c0027bc1 <__gtdf2>
c0008fe8:	83 c4 10             	add    esp,0x10
c0008feb:	85 c0                	test   eax,eax
c0008fed:	0f 8e 9e 00 00 00    	jle    c0009091 <linear_vari_process+0x2a1>
c0008ff3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008ffa:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ffc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009000:	89 04 24             	mov    DWORD PTR [esp],eax
c0009003:	52                   	push   edx
c0009004:	50                   	push   eax
c0009005:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009008:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000900b:	e8 d4 e2 01 00       	call   c00272e4 <__subdf3>
c0009010:	59                   	pop    ecx
c0009011:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009015:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009019:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000901c:	e8 52 e9 01 00       	call   c0027973 <__floatsidf>
c0009021:	83 c4 10             	add    esp,0x10
c0009024:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009028:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000902c:	52                   	push   edx
c000902d:	50                   	push   eax
c000902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009036:	e8 d5 e2 01 00       	call   c0027310 <__muldf3>
c000903b:	5f                   	pop    edi
c000903c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009044:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009047:	e8 27 e9 01 00       	call   c0027973 <__floatsidf>
c000904c:	83 c4 10             	add    esp,0x10
c000904f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009053:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009057:	52                   	push   edx
c0009058:	50                   	push   eax
c0009059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009061:	e8 8e e5 01 00       	call   c00275f4 <__divdf3>
c0009066:	83 c4 10             	add    esp,0x10
c0009069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009071:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009075:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009081:	e8 0d dc 01 00       	call   c0026c93 <__adddf3>
c0009086:	83 c4 10             	add    esp,0x10
c0009089:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009091:	31 ff                	xor    edi,edi
c0009093:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009096:	0f 8e 9d 00 00 00    	jle    c0009139 <linear_vari_process+0x349>
c000909c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000909f:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090a6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00090af:	52                   	push   edx
c00090b0:	52                   	push   edx
c00090b1:	55                   	push   ebp
c00090b2:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090b5:	47                   	inc    edi
c00090b6:	e8 6d d5 01 00       	call   c0026628 <__subsf3>
c00090bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00090be:	e8 44 ec 01 00       	call   c0027d07 <__extendsfdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090de:	e8 2d e2 01 00       	call   c0027310 <__muldf3>
c00090e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ee:	e8 14 ec 01 00       	call   c0027d07 <__extendsfdf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090fe:	52                   	push   edx
c00090ff:	50                   	push   eax
c0009100:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009104:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009108:	e8 86 db 01 00       	call   c0026c93 <__adddf3>
c000910d:	59                   	pop    ecx
c000910e:	5d                   	pop    ebp
c000910f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009113:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009117:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911f:	e8 bf ea 01 00       	call   c0027be3 <__truncdfsf2>
c0009124:	83 c4 10             	add    esp,0x10
c0009127:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000912a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000912e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009131:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009134:	e9 5a ff ff ff       	jmp    c0009093 <linear_vari_process+0x2a3>
c0009139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009141:	68 00 00 f0 3f       	push   0x3ff00000
c0009146:	6a 00                	push   0x0
c0009148:	e8 a7 e4 01 00       	call   c00275f4 <__divdf3>
c000914d:	83 c4 10             	add    esp,0x10
c0009150:	89 04 24             	mov    DWORD PTR [esp],eax
c0009153:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009157:	52                   	push   edx
c0009158:	50                   	push   eax
c0009159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000915d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009161:	e8 2d db 01 00       	call   c0026c93 <__adddf3>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	e9 50 fd ff ff       	jmp    c0008ebe <linear_vari_process+0xce>
c000916e:	50                   	push   eax
c000916f:	50                   	push   eax
c0009170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009178:	e8 13 ec 01 00       	call   c0027d90 <lrint>
c000917d:	83 ec 0c             	sub    esp,0xc
c0009180:	50                   	push   eax
c0009181:	e8 ed e7 01 00       	call   c0027973 <__floatsidf>
c0009186:	83 c4 10             	add    esp,0x10
c0009189:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000918d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009191:	52                   	push   edx
c0009192:	50                   	push   eax
c0009193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919b:	e8 44 e1 01 00       	call   c00272e4 <__subdf3>
c00091a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a8:	83 c4 20             	add    esp,0x20
c00091ab:	6a 00                	push   0x0
c00091ad:	6a 00                	push   0x0
c00091af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b7:	e8 23 ea 01 00       	call   c0027bdf <__ltdf2>
c00091bc:	83 c4 10             	add    esp,0x10
c00091bf:	85 c0                	test   eax,eax
c00091c1:	79 1e                	jns    c00091e1 <linear_vari_process+0x3f1>
c00091c3:	68 00 00 f0 3f       	push   0x3ff00000
c00091c8:	6a 00                	push   0x0
c00091ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d2:	e8 bc da 01 00       	call   c0026c93 <__adddf3>
c00091d7:	83 c4 10             	add    esp,0x10
c00091da:	89 04 24             	mov    DWORD PTR [esp],eax
c00091dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091e4:	83 ec 10             	sub    esp,0x10
c00091e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091f7:	e8 e8 e0 01 00       	call   c00272e4 <__subdf3>
c00091fc:	83 c4 18             	add    esp,0x18
c00091ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009203:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009207:	52                   	push   edx
c0009208:	50                   	push   eax
c0009209:	e8 82 eb 01 00       	call   c0027d90 <lrint>
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	0f af f8             	imul   edi,eax
c0009214:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009217:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000921a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000921d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009220:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009223:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009227:	0f 8d 13 03 00 00    	jge    c0009540 <linear_vari_process+0x750>
c000922d:	83 ec 0c             	sub    esp,0xc
c0009230:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009233:	e8 3b e7 01 00       	call   c0027973 <__floatsidf>
c0009238:	83 c4 10             	add    esp,0x10
c000923b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000923f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009243:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009247:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009253:	e8 b8 e0 01 00       	call   c0027310 <__muldf3>
c0009258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000925b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009263:	e8 0b e7 01 00       	call   c0027973 <__floatsidf>
c0009268:	83 c4 10             	add    esp,0x10
c000926b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009273:	52                   	push   edx
c0009274:	50                   	push   eax
c0009275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927d:	e8 11 da 01 00       	call   c0026c93 <__adddf3>
c0009282:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009285:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009289:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000928d:	e8 e1 e6 01 00       	call   c0027973 <__floatsidf>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009299:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929d:	52                   	push   edx
c000929e:	50                   	push   eax
c000929f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a7:	e8 33 e9 01 00       	call   c0027bdf <__ltdf2>
c00092ac:	83 c4 10             	add    esp,0x10
c00092af:	85 c0                	test   eax,eax
c00092b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092b5:	0f 89 85 02 00 00    	jns    c0009540 <linear_vari_process+0x750>
c00092bb:	85 c9                	test   ecx,ecx
c00092bd:	0f 8e f5 00 00 00    	jle    c00093b8 <linear_vari_process+0x5c8>
c00092c3:	83 ec 10             	sub    esp,0x10
c00092c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092d3:	ff 30                	push   DWORD PTR [eax]
c00092d5:	e8 0a e0 01 00       	call   c00272e4 <__subdf3>
c00092da:	83 c4 18             	add    esp,0x18
c00092dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092e5:	52                   	push   edx
c00092e6:	50                   	push   eax
c00092e7:	e8 84 ea 01 00       	call   c0027d70 <fabs>
c00092ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092fc:	68 23 42 92 0c       	push   0xc924223
c0009301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009309:	e8 b3 e8 01 00       	call   c0027bc1 <__gtdf2>
c000930e:	83 c4 10             	add    esp,0x10
c0009311:	85 c0                	test   eax,eax
c0009313:	0f 8e 9f 00 00 00    	jle    c00093b8 <linear_vari_process+0x5c8>
c0009319:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000931d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009320:	8b 00                	mov    eax,DWORD PTR [eax]
c0009322:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009326:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000932a:	52                   	push   edx
c000932b:	50                   	push   eax
c000932c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000932f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009332:	e8 ad df 01 00       	call   c00272e4 <__subdf3>
c0009337:	5f                   	pop    edi
c0009338:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000933c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009340:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009343:	e8 2b e6 01 00       	call   c0027973 <__floatsidf>
c0009348:	83 c4 10             	add    esp,0x10
c000934b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000934f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009353:	52                   	push   edx
c0009354:	50                   	push   eax
c0009355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935d:	e8 ae df 01 00       	call   c0027310 <__muldf3>
c0009362:	5d                   	pop    ebp
c0009363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000936b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000936e:	e8 00 e6 01 00       	call   c0027973 <__floatsidf>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000937a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009388:	e8 67 e2 01 00       	call   c00275f4 <__divdf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009394:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a8:	e8 e6 d8 01 00       	call   c0026c93 <__adddf3>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	31 ff                	xor    edi,edi
c00093ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093bd:	39 f8                	cmp    eax,edi
c00093bf:	0f 8e ac 00 00 00    	jle    c0009471 <linear_vari_process+0x681>
c00093c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00093c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093ca:	29 c1                	sub    ecx,eax
c00093cc:	89 c8                	mov    eax,ecx
c00093ce:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d1:	01 f8                	add    eax,edi
c00093d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093d7:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093e4:	51                   	push   ecx
c00093e5:	01 f8                	add    eax,edi
c00093e7:	51                   	push   ecx
c00093e8:	47                   	inc    edi
c00093e9:	55                   	push   ebp
c00093ea:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ed:	e8 36 d2 01 00       	call   c0026628 <__subsf3>
c00093f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093f5:	e8 0d e9 01 00       	call   c0027d07 <__extendsfdf2>
c00093fa:	83 c4 10             	add    esp,0x10
c00093fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009401:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009405:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009409:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000940d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009411:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009415:	e8 f6 de 01 00       	call   c0027310 <__muldf3>
c000941a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000941d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009421:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009425:	e8 dd e8 01 00       	call   c0027d07 <__extendsfdf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009431:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009435:	52                   	push   edx
c0009436:	50                   	push   eax
c0009437:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943f:	e8 4f d8 01 00       	call   c0026c93 <__adddf3>
c0009444:	5d                   	pop    ebp
c0009445:	59                   	pop    ecx
c0009446:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000944a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000944e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009452:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009456:	e8 88 e7 01 00       	call   c0027be3 <__truncdfsf2>
c000945b:	83 c4 10             	add    esp,0x10
c000945e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009462:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009466:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009469:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000946c:	e9 49 ff ff ff       	jmp    c00093ba <linear_vari_process+0x5ca>
c0009471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009479:	68 00 00 f0 3f       	push   0x3ff00000
c000947e:	6a 00                	push   0x0
c0009480:	e8 6f e1 01 00       	call   c00275f4 <__divdf3>
c0009485:	83 c4 10             	add    esp,0x10
c0009488:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000948c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	e8 ee d7 01 00       	call   c0026c93 <__adddf3>
c00094a5:	59                   	pop    ecx
c00094a6:	5f                   	pop    edi
c00094a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b7:	e8 d4 e8 01 00       	call   c0027d90 <lrint>
c00094bc:	83 ec 0c             	sub    esp,0xc
c00094bf:	50                   	push   eax
c00094c0:	e8 ae e4 01 00       	call   c0027973 <__floatsidf>
c00094c5:	83 c4 10             	add    esp,0x10
c00094c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d0:	52                   	push   edx
c00094d1:	50                   	push   eax
c00094d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094da:	e8 05 de 01 00       	call   c00272e4 <__subdf3>
c00094df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094e7:	83 c4 20             	add    esp,0x20
c00094ea:	6a 00                	push   0x0
c00094ec:	6a 00                	push   0x0
c00094ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f6:	e8 e4 e6 01 00       	call   c0027bdf <__ltdf2>
c00094fb:	83 c4 10             	add    esp,0x10
c00094fe:	85 c0                	test   eax,eax
c0009500:	79 1e                	jns    c0009520 <linear_vari_process+0x730>
c0009502:	68 00 00 f0 3f       	push   0x3ff00000
c0009507:	6a 00                	push   0x0
c0009509:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000950d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009511:	e8 7d d7 01 00       	call   c0026c93 <__adddf3>
c0009516:	83 c4 10             	add    esp,0x10
c0009519:	89 04 24             	mov    DWORD PTR [esp],eax
c000951c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009520:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009523:	83 ec 10             	sub    esp,0x10
c0009526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	e8 a9 dd 01 00       	call   c00272e4 <__subdf3>
c000953b:	e9 bc fc ff ff       	jmp    c00091fc <linear_vari_process+0x40c>
c0009540:	39 fd                	cmp    ebp,edi
c0009542:	7d 38                	jge    c000957c <linear_vari_process+0x78c>
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	89 f8                	mov    eax,edi
c0009549:	29 e8                	sub    eax,ebp
c000954b:	99                   	cdq    
c000954c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000954f:	50                   	push   eax
c0009550:	e8 1e e4 01 00       	call   c0027973 <__floatsidf>
c0009555:	83 c4 10             	add    esp,0x10
c0009558:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000955c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009560:	52                   	push   edx
c0009561:	50                   	push   eax
c0009562:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009566:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956a:	e8 24 d7 01 00       	call   c0026c93 <__adddf3>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009575:	89 04 24             	mov    DWORD PTR [esp],eax
c0009578:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000957c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009580:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009587:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000958a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000958d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009590:	85 c0                	test   eax,eax
c0009592:	7f 29                	jg     c00095bd <linear_vari_process+0x7cd>
c0009594:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000959c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a0:	89 01                	mov    DWORD PTR [ecx],eax
c00095a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095a8:	99                   	cdq    
c00095a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095ac:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095b2:	99                   	cdq    
c00095b3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b6:	31 d2                	xor    edx,edx
c00095b8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095bb:	eb 1d                	jmp    c00095da <linear_vari_process+0x7ea>
c00095bd:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c0:	31 d2                	xor    edx,edx
c00095c2:	29 c8                	sub    eax,ecx
c00095c4:	c1 e0 02             	shl    eax,0x2
c00095c7:	39 d1                	cmp    ecx,edx
c00095c9:	7e c9                	jle    c0009594 <linear_vari_process+0x7a4>
c00095cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095cd:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d0:	83 c0 04             	add    eax,0x4
c00095d3:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095d7:	42                   	inc    edx
c00095d8:	eb ed                	jmp    c00095c7 <linear_vari_process+0x7d7>
c00095da:	83 c4 3c             	add    esp,0x3c
c00095dd:	89 d0                	mov    eax,edx
c00095df:	5b                   	pop    ebx
c00095e0:	5e                   	pop    esi
c00095e1:	5f                   	pop    edi
c00095e2:	5d                   	pop    ebp
c00095e3:	c3                   	ret    

c00095e4 <linear_reset>:
c00095e4:	83 ec 0c             	sub    esp,0xc
c00095e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095ee:	85 c0                	test   eax,eax
c00095f0:	74 20                	je     c0009612 <linear_reset+0x2e>
c00095f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095f5:	83 c0 1c             	add    eax,0x1c
c00095f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009602:	c1 e2 02             	shl    edx,0x2
c0009605:	51                   	push   ecx
c0009606:	52                   	push   edx
c0009607:	6a 00                	push   0x0
c0009609:	50                   	push   eax
c000960a:	e8 ad 70 ff ff       	call   c00006bc <memset>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	83 c4 0c             	add    esp,0xc
c0009615:	c3                   	ret    

c0009616 <linear_get_name>:
c0009616:	31 c0                	xor    eax,eax
c0009618:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000961d:	75 05                	jne    c0009624 <linear_get_name+0xe>
c000961f:	b8 e0 94 02 c0       	mov    eax,0xc00294e0
c0009624:	c3                   	ret    

c0009625 <linear_get_description>:
c0009625:	31 c0                	xor    eax,eax
c0009627:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000962c:	75 05                	jne    c0009633 <linear_get_description+0xe>
c000962e:	b8 f4 94 02 c0       	mov    eax,0xc00294f4
c0009633:	c3                   	ret    

c0009634 <linear_set_converter>:
c0009634:	53                   	push   ebx
c0009635:	b8 0a 00 00 00       	mov    eax,0xa
c000963a:	83 ec 08             	sub    esp,0x8
c000963d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009641:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009646:	75 6e                	jne    c00096b6 <linear_set_converter+0x82>
c0009648:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000964b:	85 c0                	test   eax,eax
c000964d:	74 13                	je     c0009662 <linear_set_converter+0x2e>
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	50                   	push   eax
c0009653:	e8 d4 5f 00 00       	call   c000f62c <free>
c0009658:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000965f:	83 c4 10             	add    esp,0x10
c0009662:	50                   	push   eax
c0009663:	50                   	push   eax
c0009664:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009667:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000966e:	50                   	push   eax
c000966f:	6a 01                	push   0x1
c0009671:	e8 d6 5f 00 00       	call   c000f64c <calloc>
c0009676:	83 c4 10             	add    esp,0x10
c0009679:	89 c2                	mov    edx,eax
c000967b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000967e:	85 d2                	test   edx,edx
c0009680:	b8 01 00 00 00       	mov    eax,0x1
c0009685:	74 2f                	je     c00096b6 <linear_set_converter+0x82>
c0009687:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000968a:	83 ec 0c             	sub    esp,0xc
c000968d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009690:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009696:	c7 43 24 f0 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df0
c000969d:	c7 43 20 f0 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df0
c00096a4:	c7 43 28 e4 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095e4
c00096ab:	53                   	push   ebx
c00096ac:	e8 33 ff ff ff       	call   c00095e4 <linear_reset>
c00096b1:	83 c4 10             	add    esp,0x10
c00096b4:	31 c0                	xor    eax,eax
c00096b6:	83 c4 08             	add    esp,0x8
c00096b9:	5b                   	pop    ebx
c00096ba:	c3                   	ret    

c00096bb <int_to_fp>:
c00096bb:	c1 e0 0c             	shl    eax,0xc
c00096be:	c3                   	ret    

c00096bf <fp_to_int>:
c00096bf:	c1 f8 0c             	sar    eax,0xc
c00096c2:	c3                   	ret    

c00096c3 <fp_fraction_part>:
c00096c3:	25 ff 0f 00 00       	and    eax,0xfff
c00096c8:	c3                   	ret    

c00096c9 <fp_to_double>:
c00096c9:	83 ec 1c             	sub    esp,0x1c
c00096cc:	e8 f2 ff ff ff       	call   c00096c3 <fp_fraction_part>
c00096d1:	83 ec 0c             	sub    esp,0xc
c00096d4:	50                   	push   eax
c00096d5:	e8 99 e2 01 00       	call   c0027973 <__floatsidf>
c00096da:	83 c4 10             	add    esp,0x10
c00096dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096e5:	68 00 00 30 3f       	push   0x3f300000
c00096ea:	6a 00                	push   0x0
c00096ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f4:	e8 17 dc 01 00       	call   c0027310 <__muldf3>
c00096f9:	83 c4 2c             	add    esp,0x2c
c00096fc:	c3                   	ret    

c00096fd <calc_output_single>:
c00096fd:	55                   	push   ebp
c00096fe:	57                   	push   edi
c00096ff:	56                   	push   esi
c0009700:	89 c6                	mov    esi,eax
c0009702:	53                   	push   ebx
c0009703:	89 d3                	mov    ebx,edx
c0009705:	83 ec 4c             	sub    esp,0x4c
c0009708:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000970c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000970f:	e8 a7 ff ff ff       	call   c00096bb <int_to_fp>
c0009714:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009717:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000971b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000971f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009723:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009726:	99                   	cdq    
c0009727:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000972f:	f7 fb                	idiv   ebx
c0009731:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009739:	89 da                	mov    edx,ebx
c000973b:	0f af d0             	imul   edx,eax
c000973e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009742:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009746:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000974a:	29 c2                	sub    edx,eax
c000974c:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000974f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009753:	83 c5 04             	add    ebp,0x4
c0009756:	e8 6e ff ff ff       	call   c00096c9 <fp_to_double>
c000975b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000975f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009767:	e8 53 ff ff ff       	call   c00096bf <fp_to_int>
c000976c:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000976f:	52                   	push   edx
c0009770:	52                   	push   edx
c0009771:	51                   	push   ecx
c0009772:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009776:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000977a:	e8 a9 ce 01 00       	call   c0026628 <__subsf3>
c000977f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009782:	e8 80 e5 01 00       	call   c0027d07 <__extendsfdf2>
c0009787:	83 c4 10             	add    esp,0x10
c000978a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000978e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009796:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000979e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a2:	e8 69 db 01 00       	call   c0027310 <__muldf3>
c00097a7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097b6:	e8 4c e5 01 00       	call   c0027d07 <__extendsfdf2>
c00097bb:	83 c4 10             	add    esp,0x10
c00097be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c6:	52                   	push   edx
c00097c7:	50                   	push   eax
c00097c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d0:	e8 be d4 01 00       	call   c0026c93 <__adddf3>
c00097d5:	59                   	pop    ecx
c00097d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097de:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097e4:	e8 1e e5 01 00       	call   c0027d07 <__extendsfdf2>
c00097e9:	83 c4 10             	add    esp,0x10
c00097ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097f4:	52                   	push   edx
c00097f5:	50                   	push   eax
c00097f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097fe:	e8 0d db 01 00       	call   c0027310 <__muldf3>
c0009803:	83 c4 10             	add    esp,0x10
c0009806:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000980a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000980e:	52                   	push   edx
c000980f:	50                   	push   eax
c0009810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009818:	e8 76 d4 01 00       	call   c0026c93 <__adddf3>
c000981d:	83 c4 10             	add    esp,0x10
c0009820:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009824:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009828:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000982c:	0f 89 1d ff ff ff    	jns    c000974f <calc_output_single+0x52>
c0009832:	89 d9                	mov    ecx,ebx
c0009834:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009838:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000983c:	89 dd                	mov    ebp,ebx
c000983e:	29 c8                	sub    eax,ecx
c0009840:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009848:	99                   	cdq    
c0009849:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009851:	f7 fb                	idiv   ebx
c0009853:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009857:	0f af e8             	imul   ebp,eax
c000985a:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000985e:	01 cd                	add    ebp,ecx
c0009860:	8d 34 86             	lea    esi,[esi+eax*4]
c0009863:	89 e8                	mov    eax,ebp
c0009865:	83 ee 04             	sub    esi,0x4
c0009868:	e8 5c fe ff ff       	call   c00096c9 <fp_to_double>
c000986d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009871:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009875:	89 e8                	mov    eax,ebp
c0009877:	29 dd                	sub    ebp,ebx
c0009879:	e8 41 fe ff ff       	call   c00096bf <fp_to_int>
c000987e:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009881:	52                   	push   edx
c0009882:	52                   	push   edx
c0009883:	51                   	push   ecx
c0009884:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009888:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000988c:	e8 97 cd 01 00       	call   c0026628 <__subsf3>
c0009891:	89 04 24             	mov    DWORD PTR [esp],eax
c0009894:	e8 6e e4 01 00       	call   c0027d07 <__extendsfdf2>
c0009899:	83 c4 10             	add    esp,0x10
c000989c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b4:	e8 57 da 01 00       	call   c0027310 <__muldf3>
c00098b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098c8:	e8 3a e4 01 00       	call   c0027d07 <__extendsfdf2>
c00098cd:	83 c4 10             	add    esp,0x10
c00098d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d8:	52                   	push   edx
c00098d9:	50                   	push   eax
c00098da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e2:	e8 ac d3 01 00       	call   c0026c93 <__adddf3>
c00098e7:	59                   	pop    ecx
c00098e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f0:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098f6:	e8 0c e4 01 00       	call   c0027d07 <__extendsfdf2>
c00098fb:	83 c4 10             	add    esp,0x10
c00098fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009906:	52                   	push   edx
c0009907:	50                   	push   eax
c0009908:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000990c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009910:	e8 fb d9 01 00       	call   c0027310 <__muldf3>
c0009915:	83 c4 10             	add    esp,0x10
c0009918:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000991c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992a:	e8 64 d3 01 00       	call   c0026c93 <__adddf3>
c000992f:	83 c4 10             	add    esp,0x10
c0009932:	85 ed                	test   ebp,ebp
c0009934:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009938:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000993c:	0f 8f 21 ff ff ff    	jg     c0009863 <calc_output_single+0x166>
c0009942:	52                   	push   edx
c0009943:	50                   	push   eax
c0009944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009948:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000994c:	e8 42 d3 01 00       	call   c0026c93 <__adddf3>
c0009951:	83 c4 5c             	add    esp,0x5c
c0009954:	5b                   	pop    ebx
c0009955:	5e                   	pop    esi
c0009956:	5f                   	pop    edi
c0009957:	5d                   	pop    ebp
c0009958:	c3                   	ret    

c0009959 <calc_output_stereo>:
c0009959:	55                   	push   ebp
c000995a:	89 cd                	mov    ebp,ecx
c000995c:	57                   	push   edi
c000995d:	56                   	push   esi
c000995e:	53                   	push   ebx
c000995f:	89 c3                	mov    ebx,eax
c0009961:	83 ec 6c             	sub    esp,0x6c
c0009964:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009968:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000996f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009976:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000997a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000997e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009981:	e8 35 fd ff ff       	call   c00096bb <int_to_fp>
c0009986:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000998e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009992:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000999a:	29 c8                	sub    eax,ecx
c000999c:	99                   	cdq    
c000999d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a5:	0f af d0             	imul   edx,eax
c00099a8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099ab:	31 d2                	xor    edx,edx
c00099ad:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099b5:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099b8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099bc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099c3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099c7:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099cf:	29 c1                	sub    ecx,eax
c00099d1:	31 c0                	xor    eax,eax
c00099d3:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099de:	83 c7 08             	add    edi,0x8
c00099e1:	e8 e3 fc ff ff       	call   c00096c9 <fp_to_double>
c00099e6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099ea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099f2:	e8 c8 fc ff ff       	call   c00096bf <fp_to_int>
c00099f7:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099fa:	52                   	push   edx
c00099fb:	52                   	push   edx
c00099fc:	51                   	push   ecx
c00099fd:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a05:	e8 1e cc 01 00       	call   c0026628 <__subsf3>
c0009a0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a0d:	e8 f5 e2 01 00       	call   c0027d07 <__extendsfdf2>
c0009a12:	83 c4 10             	add    esp,0x10
c0009a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a19:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a29:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a2d:	e8 de d8 01 00       	call   c0027310 <__muldf3>
c0009a32:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a3d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a41:	e8 c1 e2 01 00       	call   c0027d07 <__extendsfdf2>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a51:	52                   	push   edx
c0009a52:	50                   	push   eax
c0009a53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5b:	e8 33 d2 01 00       	call   c0026c93 <__adddf3>
c0009a60:	59                   	pop    ecx
c0009a61:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a65:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a69:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a6f:	e8 93 e2 01 00       	call   c0027d07 <__extendsfdf2>
c0009a74:	83 c4 10             	add    esp,0x10
c0009a77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a7b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a8b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a8f:	e8 7c d8 01 00       	call   c0027310 <__muldf3>
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a9b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9f:	52                   	push   edx
c0009aa0:	50                   	push   eax
c0009aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa9:	e8 e5 d1 01 00       	call   c0026c93 <__adddf3>
c0009aae:	59                   	pop    ecx
c0009aaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ab3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ab7:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009abd:	e8 45 e2 01 00       	call   c0027d07 <__extendsfdf2>
c0009ac2:	83 c4 10             	add    esp,0x10
c0009ac5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ac9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009acd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ad9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009add:	e8 2e d8 01 00       	call   c0027310 <__muldf3>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ae9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aed:	52                   	push   edx
c0009aee:	50                   	push   eax
c0009aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af7:	e8 97 d1 01 00       	call   c0026c93 <__adddf3>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b0b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b0f:	0f 89 c5 fe ff ff    	jns    c00099da <calc_output_stereo+0x81>
c0009b15:	29 e9                	sub    ecx,ebp
c0009b17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b1b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b1f:	29 c8                	sub    eax,ecx
c0009b21:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b29:	99                   	cdq    
c0009b2a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b2e:	31 d2                	xor    edx,edx
c0009b30:	0f af f8             	imul   edi,eax
c0009b33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b37:	40                   	inc    eax
c0009b38:	01 cf                	add    edi,ecx
c0009b3a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b3f:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b43:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b4b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b4e:	31 c0                	xor    eax,eax
c0009b50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b54:	89 f8                	mov    eax,edi
c0009b56:	83 eb 08             	sub    ebx,0x8
c0009b59:	e8 6b fb ff ff       	call   c00096c9 <fp_to_double>
c0009b5e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b66:	89 f8                	mov    eax,edi
c0009b68:	e8 52 fb ff ff       	call   c00096bf <fp_to_int>
c0009b6d:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b70:	52                   	push   edx
c0009b71:	52                   	push   edx
c0009b72:	55                   	push   ebp
c0009b73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b77:	e8 ac ca 01 00       	call   c0026628 <__subsf3>
c0009b7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7f:	e8 83 e1 01 00       	call   c0027d07 <__extendsfdf2>
c0009b84:	83 c4 10             	add    esp,0x10
c0009b87:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b9f:	e8 6c d7 01 00       	call   c0027310 <__muldf3>
c0009ba4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ba7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009baf:	e8 53 e1 01 00       	call   c0027d07 <__extendsfdf2>
c0009bb4:	83 c4 10             	add    esp,0x10
c0009bb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbf:	52                   	push   edx
c0009bc0:	50                   	push   eax
c0009bc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bc9:	e8 c5 d0 01 00       	call   c0026c93 <__adddf3>
c0009bce:	59                   	pop    ecx
c0009bcf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bd3:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bd7:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bdd:	e8 25 e1 01 00       	call   c0027d07 <__extendsfdf2>
c0009be2:	83 c4 10             	add    esp,0x10
c0009be5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bfd:	e8 0e d7 01 00       	call   c0027310 <__muldf3>
c0009c02:	83 c4 10             	add    esp,0x10
c0009c05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c09:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0d:	52                   	push   edx
c0009c0e:	50                   	push   eax
c0009c0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c17:	e8 77 d0 01 00       	call   c0026c93 <__adddf3>
c0009c1c:	5d                   	pop    ebp
c0009c1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c21:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c25:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c2b:	e8 d7 e0 01 00       	call   c0027d07 <__extendsfdf2>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4b:	e8 c0 d6 01 00       	call   c0027310 <__muldf3>
c0009c50:	83 c4 10             	add    esp,0x10
c0009c53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c5b:	52                   	push   edx
c0009c5c:	50                   	push   eax
c0009c5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c65:	e8 29 d0 01 00       	call   c0026c93 <__adddf3>
c0009c6a:	83 c4 10             	add    esp,0x10
c0009c6d:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c79:	85 ff                	test   edi,edi
c0009c7b:	0f 8f d3 fe ff ff    	jg     c0009b54 <calc_output_stereo+0x1fb>
c0009c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	e8 fd cf 01 00       	call   c0026c93 <__adddf3>
c0009c96:	83 c4 10             	add    esp,0x10
c0009c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb1:	e8 5a d6 01 00       	call   c0027310 <__muldf3>
c0009cb6:	59                   	pop    ecx
c0009cb7:	5b                   	pop    ebx
c0009cb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc8:	e8 16 df 01 00       	call   c0027be3 <__truncdfsf2>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cd7:	89 03                	mov    DWORD PTR [ebx],eax
c0009cd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	e8 a5 cf 01 00       	call   c0026c93 <__adddf3>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d09:	e8 02 d6 01 00       	call   c0027310 <__muldf3>
c0009d0e:	5e                   	pop    esi
c0009d0f:	5f                   	pop    edi
c0009d10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d20:	e8 be de 01 00       	call   c0027be3 <__truncdfsf2>
c0009d25:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d2f:	83 c4 7c             	add    esp,0x7c
c0009d32:	5b                   	pop    ebx
c0009d33:	5e                   	pop    esi
c0009d34:	5f                   	pop    edi
c0009d35:	5d                   	pop    ebp
c0009d36:	c3                   	ret    

c0009d37 <calc_output_quad>:
c0009d37:	55                   	push   ebp
c0009d38:	57                   	push   edi
c0009d39:	56                   	push   esi
c0009d3a:	89 c6                	mov    esi,eax
c0009d3c:	53                   	push   ebx
c0009d3d:	83 ec 7c             	sub    esp,0x7c
c0009d40:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d44:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d48:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d4f:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d5e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d61:	e8 55 f9 ff ff       	call   c00096bb <int_to_fp>
c0009d66:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d69:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d6c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d70:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d78:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d7c:	99                   	cdq    
c0009d7d:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d81:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d85:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d88:	31 d2                	xor    edx,edx
c0009d8a:	0f af d8             	imul   ebx,eax
c0009d8d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d95:	0f af c7             	imul   eax,edi
c0009d98:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d9c:	29 c1                	sub    ecx,eax
c0009d9e:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009da6:	31 c0                	xor    eax,eax
c0009da8:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009dab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009daf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009db3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dc3:	89 d8                	mov    eax,ebx
c0009dc5:	83 c7 10             	add    edi,0x10
c0009dc8:	e8 fc f8 ff ff       	call   c00096c9 <fp_to_double>
c0009dcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dd5:	89 d8                	mov    eax,ebx
c0009dd7:	e8 e3 f8 ff ff       	call   c00096bf <fp_to_int>
c0009ddc:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de0:	52                   	push   edx
c0009de1:	52                   	push   edx
c0009de2:	51                   	push   ecx
c0009de3:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009de7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009deb:	e8 38 c8 01 00       	call   c0026628 <__subsf3>
c0009df0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009df3:	e8 0f df 01 00       	call   c0027d07 <__extendsfdf2>
c0009df8:	83 c4 10             	add    esp,0x10
c0009dfb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e0f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e13:	e8 f8 d4 01 00       	call   c0027310 <__muldf3>
c0009e18:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e20:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e23:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e27:	e8 db de 01 00       	call   c0027d07 <__extendsfdf2>
c0009e2c:	83 c4 10             	add    esp,0x10
c0009e2f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e33:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e37:	52                   	push   edx
c0009e38:	50                   	push   eax
c0009e39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e41:	e8 4d ce 01 00       	call   c0026c93 <__adddf3>
c0009e46:	59                   	pop    ecx
c0009e47:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e4b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4f:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e55:	e8 ad de 01 00       	call   c0027d07 <__extendsfdf2>
c0009e5a:	83 c4 10             	add    esp,0x10
c0009e5d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e61:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e75:	e8 96 d4 01 00       	call   c0027310 <__muldf3>
c0009e7a:	83 c4 10             	add    esp,0x10
c0009e7d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e81:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e85:	52                   	push   edx
c0009e86:	50                   	push   eax
c0009e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e8f:	e8 ff cd 01 00       	call   c0026c93 <__adddf3>
c0009e94:	59                   	pop    ecx
c0009e95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e9d:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009ea3:	e8 5f de 01 00       	call   c0027d07 <__extendsfdf2>
c0009ea8:	83 c4 10             	add    esp,0x10
c0009eab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eaf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ebf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec3:	e8 48 d4 01 00       	call   c0027310 <__muldf3>
c0009ec8:	83 c4 10             	add    esp,0x10
c0009ecb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed3:	52                   	push   edx
c0009ed4:	50                   	push   eax
c0009ed5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009edd:	e8 b1 cd 01 00       	call   c0026c93 <__adddf3>
c0009ee2:	59                   	pop    ecx
c0009ee3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ee7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eeb:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef1:	e8 11 de 01 00       	call   c0027d07 <__extendsfdf2>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009efd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f09:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f0d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f11:	e8 fa d3 01 00       	call   c0027310 <__muldf3>
c0009f16:	83 c4 10             	add    esp,0x10
c0009f19:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f21:	52                   	push   edx
c0009f22:	50                   	push   eax
c0009f23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2b:	e8 63 cd 01 00       	call   c0026c93 <__adddf3>
c0009f30:	59                   	pop    ecx
c0009f31:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f35:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f39:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f3f:	e8 c3 dd 01 00       	call   c0027d07 <__extendsfdf2>
c0009f44:	83 c4 10             	add    esp,0x10
c0009f47:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f4b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f57:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f5b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f5f:	e8 ac d3 01 00       	call   c0027310 <__muldf3>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f6f:	52                   	push   edx
c0009f70:	50                   	push   eax
c0009f71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f79:	e8 15 cd 01 00       	call   c0026c93 <__adddf3>
c0009f7e:	83 c4 10             	add    esp,0x10
c0009f81:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f85:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f89:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f8d:	0f 89 30 fe ff ff    	jns    c0009dc3 <calc_output_quad+0x8c>
c0009f93:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f9b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fa3:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fab:	29 c8                	sub    eax,ecx
c0009fad:	99                   	cdq    
c0009fae:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fb2:	31 d2                	xor    edx,edx
c0009fb4:	0f af d8             	imul   ebx,eax
c0009fb7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fbb:	40                   	inc    eax
c0009fbc:	01 cb                	add    ebx,ecx
c0009fbe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fc3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fc7:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fcf:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fd2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fda:	31 c0                	xor    eax,eax
c0009fdc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fe8:	89 d8                	mov    eax,ebx
c0009fea:	83 ee 10             	sub    esi,0x10
c0009fed:	e8 d7 f6 ff ff       	call   c00096c9 <fp_to_double>
c0009ff2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffa:	89 d8                	mov    eax,ebx
c0009ffc:	e8 be f6 ff ff       	call   c00096bf <fp_to_int>
c000a001:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a005:	52                   	push   edx
c000a006:	52                   	push   edx
c000a007:	57                   	push   edi
c000a008:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00c:	e8 17 c6 01 00       	call   c0026628 <__subsf3>
c000a011:	89 04 24             	mov    DWORD PTR [esp],eax
c000a014:	e8 ee dc 01 00       	call   c0027d07 <__extendsfdf2>
c000a019:	83 c4 10             	add    esp,0x10
c000a01c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a020:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a030:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a034:	e8 d7 d2 01 00       	call   c0027310 <__muldf3>
c000a039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a040:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a044:	e8 be dc 01 00       	call   c0027d07 <__extendsfdf2>
c000a049:	83 c4 10             	add    esp,0x10
c000a04c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a050:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a054:	52                   	push   edx
c000a055:	50                   	push   eax
c000a056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05e:	e8 30 cc 01 00       	call   c0026c93 <__adddf3>
c000a063:	59                   	pop    ecx
c000a064:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a068:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06c:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a072:	e8 90 dc 01 00       	call   c0027d07 <__extendsfdf2>
c000a077:	83 c4 10             	add    esp,0x10
c000a07a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a07e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a092:	e8 79 d2 01 00       	call   c0027310 <__muldf3>
c000a097:	83 c4 10             	add    esp,0x10
c000a09a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a2:	52                   	push   edx
c000a0a3:	50                   	push   eax
c000a0a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0ac:	e8 e2 cb 01 00       	call   c0026c93 <__adddf3>
c000a0b1:	5f                   	pop    edi
c000a0b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0b6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0ba:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c0:	e8 42 dc 01 00       	call   c0027d07 <__extendsfdf2>
c000a0c5:	83 c4 10             	add    esp,0x10
c000a0c8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0cc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e0:	e8 2b d2 01 00       	call   c0027310 <__muldf3>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f0:	52                   	push   edx
c000a0f1:	50                   	push   eax
c000a0f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fa:	e8 94 cb 01 00       	call   c0026c93 <__adddf3>
c000a0ff:	59                   	pop    ecx
c000a100:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a104:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a108:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a10e:	e8 f4 db 01 00       	call   c0027d07 <__extendsfdf2>
c000a113:	83 c4 10             	add    esp,0x10
c000a116:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a126:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12e:	e8 dd d1 01 00       	call   c0027310 <__muldf3>
c000a133:	83 c4 10             	add    esp,0x10
c000a136:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13e:	52                   	push   edx
c000a13f:	50                   	push   eax
c000a140:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a144:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a148:	e8 46 cb 01 00       	call   c0026c93 <__adddf3>
c000a14d:	5f                   	pop    edi
c000a14e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a152:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a156:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a15c:	e8 a6 db 01 00       	call   c0027d07 <__extendsfdf2>
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a168:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a174:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a178:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17c:	e8 8f d1 01 00       	call   c0027310 <__muldf3>
c000a181:	83 c4 10             	add    esp,0x10
c000a184:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a188:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18c:	52                   	push   edx
c000a18d:	50                   	push   eax
c000a18e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a192:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a196:	e8 f8 ca 01 00       	call   c0026c93 <__adddf3>
c000a19b:	83 c4 10             	add    esp,0x10
c000a19e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1a2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1a6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1aa:	85 db                	test   ebx,ebx
c000a1ac:	0f 8f 36 fe ff ff    	jg     c0009fe8 <calc_output_quad+0x2b1>
c000a1b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	e8 cc ca 01 00       	call   c0026c93 <__adddf3>
c000a1c7:	83 c4 10             	add    esp,0x10
c000a1ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	e8 29 d1 01 00       	call   c0027310 <__muldf3>
c000a1e7:	59                   	pop    ecx
c000a1e8:	5b                   	pop    ebx
c000a1e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f9:	e8 e5 d9 01 00       	call   c0027be3 <__truncdfsf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a208:	89 06                	mov    DWORD PTR [esi],eax
c000a20a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a20e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a212:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a216:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21a:	e8 74 ca 01 00       	call   c0026c93 <__adddf3>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	e8 d1 d0 01 00       	call   c0027310 <__muldf3>
c000a23f:	5e                   	pop    esi
c000a240:	5f                   	pop    edi
c000a241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a251:	e8 8d d9 01 00       	call   c0027be3 <__truncdfsf2>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a260:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a263:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a267:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a26f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a273:	e8 1b ca 01 00       	call   c0026c93 <__adddf3>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a27f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a283:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	e8 78 d0 01 00       	call   c0027310 <__muldf3>
c000a298:	5d                   	pop    ebp
c000a299:	59                   	pop    ecx
c000a29a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a29e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2aa:	e8 34 d9 01 00       	call   c0027be3 <__truncdfsf2>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2b9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	e8 c2 c9 01 00       	call   c0026c93 <__adddf3>
c000a2d1:	83 c4 10             	add    esp,0x10
c000a2d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	e8 1f d0 01 00       	call   c0027310 <__muldf3>
c000a2f1:	5b                   	pop    ebx
c000a2f2:	5e                   	pop    esi
c000a2f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a303:	e8 db d8 01 00       	call   c0027be3 <__truncdfsf2>
c000a308:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a30f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a312:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a318:	5b                   	pop    ebx
c000a319:	5e                   	pop    esi
c000a31a:	5f                   	pop    edi
c000a31b:	5d                   	pop    ebp
c000a31c:	c3                   	ret    

c000a31d <calc_output_hex>:
c000a31d:	55                   	push   ebp
c000a31e:	89 cd                	mov    ebp,ecx
c000a320:	57                   	push   edi
c000a321:	56                   	push   esi
c000a322:	53                   	push   ebx
c000a323:	89 c3                	mov    ebx,eax
c000a325:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a32b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a32e:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a335:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a33c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a340:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a344:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a347:	e8 6f f3 ff ff       	call   c00096bb <int_to_fp>
c000a34c:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a34f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a353:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a356:	29 c8                	sub    eax,ecx
c000a358:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a35c:	99                   	cdq    
c000a35d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a365:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a368:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a370:	0f af f8             	imul   edi,eax
c000a373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a376:	01 cf                	add    edi,ecx
c000a378:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a37c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a37f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a383:	0f af c2             	imul   eax,edx
c000a386:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a38a:	29 c1                	sub    ecx,eax
c000a38c:	31 d2                	xor    edx,edx
c000a38e:	31 c0                	xor    eax,eax
c000a390:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a393:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a39b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a39f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3a7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3ab:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3bb:	89 f8                	mov    eax,edi
c000a3bd:	e8 07 f3 ff ff       	call   c00096c9 <fp_to_double>
c000a3c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3ca:	89 f8                	mov    eax,edi
c000a3cc:	e8 ee f2 ff ff       	call   c00096bf <fp_to_int>
c000a3d1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3d5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3d8:	52                   	push   edx
c000a3d9:	52                   	push   edx
c000a3da:	51                   	push   ecx
c000a3db:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3df:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3e6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3ea:	e8 39 c2 01 00       	call   c0026628 <__subsf3>
c000a3ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f2:	e8 10 d9 01 00       	call   c0027d07 <__extendsfdf2>
c000a3f7:	83 c4 10             	add    esp,0x10
c000a3fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a40e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a412:	e8 f9 ce 01 00       	call   c0027310 <__muldf3>
c000a417:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a41b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a41f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a422:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a426:	e8 dc d8 01 00       	call   c0027d07 <__extendsfdf2>
c000a42b:	83 c4 10             	add    esp,0x10
c000a42e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a432:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a436:	52                   	push   edx
c000a437:	50                   	push   eax
c000a438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a440:	e8 4e c8 01 00       	call   c0026c93 <__adddf3>
c000a445:	59                   	pop    ecx
c000a446:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a44a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a44e:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a454:	e8 ae d8 01 00       	call   c0027d07 <__extendsfdf2>
c000a459:	83 c4 10             	add    esp,0x10
c000a45c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a460:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a470:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a474:	e8 97 ce 01 00       	call   c0027310 <__muldf3>
c000a479:	83 c4 10             	add    esp,0x10
c000a47c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a480:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a484:	52                   	push   edx
c000a485:	50                   	push   eax
c000a486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a48a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a48e:	e8 00 c8 01 00       	call   c0026c93 <__adddf3>
c000a493:	59                   	pop    ecx
c000a494:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a498:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a49c:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4a2:	e8 60 d8 01 00       	call   c0027d07 <__extendsfdf2>
c000a4a7:	83 c4 10             	add    esp,0x10
c000a4aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c2:	e8 49 ce 01 00       	call   c0027310 <__muldf3>
c000a4c7:	83 c4 10             	add    esp,0x10
c000a4ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4d2:	52                   	push   edx
c000a4d3:	50                   	push   eax
c000a4d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4dc:	e8 b2 c7 01 00       	call   c0026c93 <__adddf3>
c000a4e1:	59                   	pop    ecx
c000a4e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4e6:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4ea:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f0:	e8 12 d8 01 00       	call   c0027d07 <__extendsfdf2>
c000a4f5:	83 c4 10             	add    esp,0x10
c000a4f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a508:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a50c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a510:	e8 fb cd 01 00       	call   c0027310 <__muldf3>
c000a515:	83 c4 10             	add    esp,0x10
c000a518:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a51c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a520:	52                   	push   edx
c000a521:	50                   	push   eax
c000a522:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a526:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52a:	e8 64 c7 01 00       	call   c0026c93 <__adddf3>
c000a52f:	59                   	pop    ecx
c000a530:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a534:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a538:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a53e:	e8 c4 d7 01 00       	call   c0027d07 <__extendsfdf2>
c000a543:	83 c4 10             	add    esp,0x10
c000a546:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a54a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a54e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a552:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a556:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a55a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a55e:	e8 ad cd 01 00       	call   c0027310 <__muldf3>
c000a563:	83 c4 10             	add    esp,0x10
c000a566:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a56a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56e:	52                   	push   edx
c000a56f:	50                   	push   eax
c000a570:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a574:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a578:	e8 16 c7 01 00       	call   c0026c93 <__adddf3>
c000a57d:	59                   	pop    ecx
c000a57e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a582:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a586:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a58c:	e8 76 d7 01 00       	call   c0027d07 <__extendsfdf2>
c000a591:	83 c4 10             	add    esp,0x10
c000a594:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a598:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a59c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ac:	e8 5f cd 01 00       	call   c0027310 <__muldf3>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	83 c6 18             	add    esi,0x18
c000a5b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bf:	52                   	push   edx
c000a5c0:	50                   	push   eax
c000a5c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5c9:	e8 c5 c6 01 00       	call   c0026c93 <__adddf3>
c000a5ce:	59                   	pop    ecx
c000a5cf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5d3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5d7:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5dd:	e8 25 d7 01 00       	call   c0027d07 <__extendsfdf2>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5fd:	e8 0e cd 01 00       	call   c0027310 <__muldf3>
c000a602:	83 c4 10             	add    esp,0x10
c000a605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a609:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a60d:	52                   	push   edx
c000a60e:	50                   	push   eax
c000a60f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a613:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a617:	e8 77 c6 01 00       	call   c0026c93 <__adddf3>
c000a61c:	83 c4 10             	add    esp,0x10
c000a61f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a623:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a627:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a62a:	0f 89 8b fd ff ff    	jns    c000a3bb <calc_output_hex+0x9e>
c000a630:	31 f6                	xor    esi,esi
c000a632:	31 ff                	xor    edi,edi
c000a634:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a638:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a63b:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a63f:	29 e9                	sub    ecx,ebp
c000a641:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a645:	29 c8                	sub    eax,ecx
c000a647:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a64a:	99                   	cdq    
c000a64b:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a64f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a652:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a656:	0f af e8             	imul   ebp,eax
c000a659:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a65d:	40                   	inc    eax
c000a65e:	01 cd                	add    ebp,ecx
c000a660:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a665:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a669:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a66d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a671:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a674:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a678:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a67c:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a680:	89 e8                	mov    eax,ebp
c000a682:	e8 42 f0 ff ff       	call   c00096c9 <fp_to_double>
c000a687:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a68b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a68f:	89 e8                	mov    eax,ebp
c000a691:	e8 29 f0 ff ff       	call   c00096bf <fp_to_int>
c000a696:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a69a:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a69d:	52                   	push   edx
c000a69e:	52                   	push   edx
c000a69f:	51                   	push   ecx
c000a6a0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6a7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6ae:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6b2:	e8 71 bf 01 00       	call   c0026628 <__subsf3>
c000a6b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6ba:	e8 48 d6 01 00       	call   c0027d07 <__extendsfdf2>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6c6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6d6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6da:	e8 31 cc 01 00       	call   c0027310 <__muldf3>
c000a6df:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f1:	e8 11 d6 01 00       	call   c0027d07 <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a701:	52                   	push   edx
c000a702:	50                   	push   eax
c000a703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70b:	e8 83 c5 01 00       	call   c0026c93 <__adddf3>
c000a710:	59                   	pop    ecx
c000a711:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a715:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a719:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a71f:	e8 e3 d5 01 00       	call   c0027d07 <__extendsfdf2>
c000a724:	83 c4 10             	add    esp,0x10
c000a727:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a72b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a72f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a73b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a73f:	e8 cc cb 01 00       	call   c0027310 <__muldf3>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a74b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74f:	52                   	push   edx
c000a750:	50                   	push   eax
c000a751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a755:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a759:	e8 35 c5 01 00       	call   c0026c93 <__adddf3>
c000a75e:	59                   	pop    ecx
c000a75f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a763:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a767:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a76d:	e8 95 d5 01 00       	call   c0027d07 <__extendsfdf2>
c000a772:	83 c4 10             	add    esp,0x10
c000a775:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a779:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a77d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a789:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a78d:	e8 7e cb 01 00       	call   c0027310 <__muldf3>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a799:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7a7:	e8 e7 c4 01 00       	call   c0026c93 <__adddf3>
c000a7ac:	59                   	pop    ecx
c000a7ad:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b1:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7b5:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7bb:	e8 47 d5 01 00       	call   c0027d07 <__extendsfdf2>
c000a7c0:	83 c4 10             	add    esp,0x10
c000a7c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7db:	e8 30 cb 01 00       	call   c0027310 <__muldf3>
c000a7e0:	83 c4 10             	add    esp,0x10
c000a7e3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7eb:	52                   	push   edx
c000a7ec:	50                   	push   eax
c000a7ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f5:	e8 99 c4 01 00       	call   c0026c93 <__adddf3>
c000a7fa:	59                   	pop    ecx
c000a7fb:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ff:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a803:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a809:	e8 f9 d4 01 00       	call   c0027d07 <__extendsfdf2>
c000a80e:	83 c4 10             	add    esp,0x10
c000a811:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a815:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a825:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a829:	e8 e2 ca 01 00       	call   c0027310 <__muldf3>
c000a82e:	83 c4 10             	add    esp,0x10
c000a831:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a835:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a839:	52                   	push   edx
c000a83a:	50                   	push   eax
c000a83b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a83f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a843:	e8 4b c4 01 00       	call   c0026c93 <__adddf3>
c000a848:	59                   	pop    ecx
c000a849:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a84d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a851:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a857:	e8 ab d4 01 00       	call   c0027d07 <__extendsfdf2>
c000a85c:	83 c4 10             	add    esp,0x10
c000a85f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a863:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a867:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a86b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a86f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a873:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a877:	e8 94 ca 01 00       	call   c0027310 <__muldf3>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	83 eb 18             	sub    ebx,0x18
c000a882:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a886:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a88a:	52                   	push   edx
c000a88b:	50                   	push   eax
c000a88c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a890:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a894:	e8 fa c3 01 00       	call   c0026c93 <__adddf3>
c000a899:	59                   	pop    ecx
c000a89a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a89e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8a2:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8a8:	e8 5a d4 01 00       	call   c0027d07 <__extendsfdf2>
c000a8ad:	83 c4 10             	add    esp,0x10
c000a8b0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8b4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8c4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8c8:	e8 43 ca 01 00       	call   c0027310 <__muldf3>
c000a8cd:	83 c4 10             	add    esp,0x10
c000a8d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8d8:	52                   	push   edx
c000a8d9:	50                   	push   eax
c000a8da:	57                   	push   edi
c000a8db:	56                   	push   esi
c000a8dc:	e8 b2 c3 01 00       	call   c0026c93 <__adddf3>
c000a8e1:	83 c4 10             	add    esp,0x10
c000a8e4:	89 c6                	mov    esi,eax
c000a8e6:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8e9:	89 d7                	mov    edi,edx
c000a8eb:	85 ed                	test   ebp,ebp
c000a8ed:	0f 8f 8d fd ff ff    	jg     c000a680 <calc_output_hex+0x363>
c000a8f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	e8 8b c3 01 00       	call   c0026c93 <__adddf3>
c000a908:	83 c4 10             	add    esp,0x10
c000a90b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a90e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a912:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a916:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	e8 e9 c9 01 00       	call   c0027310 <__muldf3>
c000a927:	59                   	pop    ecx
c000a928:	5b                   	pop    ebx
c000a929:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a92d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a931:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a935:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a939:	e8 a5 d2 01 00       	call   c0027be3 <__truncdfsf2>
c000a93e:	83 c4 10             	add    esp,0x10
c000a941:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a948:	89 03                	mov    DWORD PTR [ebx],eax
c000a94a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a94e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a952:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a956:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95a:	e8 34 c3 01 00       	call   c0026c93 <__adddf3>
c000a95f:	83 c4 10             	add    esp,0x10
c000a962:	89 04 24             	mov    DWORD PTR [esp],eax
c000a965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a969:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	e8 92 c9 01 00       	call   c0027310 <__muldf3>
c000a97e:	5d                   	pop    ebp
c000a97f:	59                   	pop    ecx
c000a980:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a984:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a988:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a990:	e8 4e d2 01 00       	call   c0027be3 <__truncdfsf2>
c000a995:	83 c4 10             	add    esp,0x10
c000a998:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a99f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9a2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9a6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b2:	e8 dc c2 01 00       	call   c0026c93 <__adddf3>
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	e8 3a c9 01 00       	call   c0027310 <__muldf3>
c000a9d6:	5b                   	pop    ebx
c000a9d7:	5d                   	pop    ebp
c000a9d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e8:	e8 f6 d1 01 00       	call   c0027be3 <__truncdfsf2>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9f7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0a:	e8 84 c2 01 00       	call   c0026c93 <__adddf3>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	e8 e2 c8 01 00       	call   c0027310 <__muldf3>
c000aa2e:	59                   	pop    ecx
c000aa2f:	5b                   	pop    ebx
c000aa30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa40:	e8 9e d1 01 00       	call   c0027be3 <__truncdfsf2>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa4f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa62:	e8 2c c2 01 00       	call   c0026c93 <__adddf3>
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	e8 8a c8 01 00       	call   c0027310 <__muldf3>
c000aa86:	5d                   	pop    ebp
c000aa87:	59                   	pop    ecx
c000aa88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa98:	e8 46 d1 01 00       	call   c0027be3 <__truncdfsf2>
c000aa9d:	83 c4 10             	add    esp,0x10
c000aaa0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaa7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aaaa:	57                   	push   edi
c000aaab:	56                   	push   esi
c000aaac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab4:	e8 da c1 01 00       	call   c0026c93 <__adddf3>
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	89 04 24             	mov    DWORD PTR [esp],eax
c000aabf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	e8 38 c8 01 00       	call   c0027310 <__muldf3>
c000aad8:	5b                   	pop    ebx
c000aad9:	5e                   	pop    esi
c000aada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aae2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aae6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaea:	e8 f4 d0 01 00       	call   c0027be3 <__truncdfsf2>
c000aaef:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aaf6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaf9:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aaff:	5b                   	pop    ebx
c000ab00:	5e                   	pop    esi
c000ab01:	5f                   	pop    edi
c000ab02:	5d                   	pop    ebp
c000ab03:	c3                   	ret    

c000ab04 <sinc_reset>:
c000ab04:	56                   	push   esi
c000ab05:	53                   	push   ebx
c000ab06:	51                   	push   ecx
c000ab07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab0e:	85 db                	test   ebx,ebx
c000ab10:	74 59                	je     c000ab6b <sinc_reset+0x67>
c000ab12:	31 d2                	xor    edx,edx
c000ab14:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab1b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab1e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab21:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab28:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab2f:	31 c0                	xor    eax,eax
c000ab31:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab37:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab3a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab3d:	52                   	push   edx
c000ab3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab41:	c1 e0 02             	shl    eax,0x2
c000ab44:	50                   	push   eax
c000ab45:	6a 00                	push   0x0
c000ab47:	56                   	push   esi
c000ab48:	e8 6f 5b ff ff       	call   c00006bc <memset>
c000ab4d:	83 c4 0c             	add    esp,0xc
c000ab50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab53:	c1 e0 02             	shl    eax,0x2
c000ab56:	50                   	push   eax
c000ab57:	68 aa 00 00 00       	push   0xaa
c000ab5c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab5f:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab62:	50                   	push   eax
c000ab63:	e8 54 5b ff ff       	call   c00006bc <memset>
c000ab68:	83 c4 10             	add    esp,0x10
c000ab6b:	58                   	pop    eax
c000ab6c:	5b                   	pop    ebx
c000ab6d:	5e                   	pop    esi
c000ab6e:	c3                   	ret    

c000ab6f <calc_output_multi>:
c000ab6f:	55                   	push   ebp
c000ab70:	57                   	push   edi
c000ab71:	56                   	push   esi
c000ab72:	89 c6                	mov    esi,eax
c000ab74:	53                   	push   ebx
c000ab75:	83 ec 4c             	sub    esp,0x4c
c000ab78:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab7c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab80:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab84:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab94:	8d 46 44             	lea    eax,[esi+0x44]
c000ab97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab9a:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aba4:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000aba7:	e8 0f eb ff ff       	call   c00096bb <int_to_fp>
c000abac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abaf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abb3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abb7:	99                   	cdq    
c000abb8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc0:	0f af d0             	imul   edx,eax
c000abc3:	0f af c3             	imul   eax,ebx
c000abc6:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abca:	29 c1                	sub    ecx,eax
c000abcc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abd4:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abdf:	57                   	push   edi
c000abe0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abe4:	6a 00                	push   0x0
c000abe6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abea:	e8 cd 5a ff ff       	call   c00006bc <memset>
c000abef:	83 c4 10             	add    esp,0x10
c000abf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abf6:	89 df                	mov    edi,ebx
c000abf8:	e8 cc ea ff ff       	call   c00096c9 <fp_to_double>
c000abfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac09:	e8 b1 ea ff ff       	call   c00096bf <fp_to_int>
c000ac0e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac11:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac14:	51                   	push   ecx
c000ac15:	51                   	push   ecx
c000ac16:	55                   	push   ebp
c000ac17:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac1b:	e8 08 ba 01 00       	call   c0026628 <__subsf3>
c000ac20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac23:	e8 df d0 01 00       	call   c0027d07 <__extendsfdf2>
c000ac28:	83 c4 10             	add    esp,0x10
c000ac2b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac43:	e8 c8 c6 01 00       	call   c0027310 <__muldf3>
c000ac48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac4f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac53:	e8 af d0 01 00       	call   c0027d07 <__extendsfdf2>
c000ac58:	83 c4 10             	add    esp,0x10
c000ac5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac63:	52                   	push   edx
c000ac64:	50                   	push   eax
c000ac65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac6d:	e8 21 c0 01 00       	call   c0026c93 <__adddf3>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac7d:	89 f8                	mov    eax,edi
c000ac7f:	b9 08 00 00 00       	mov    ecx,0x8
c000ac84:	99                   	cdq    
c000ac85:	f7 f9                	idiv   ecx
c000ac87:	4a                   	dec    edx
c000ac88:	83 fa 06             	cmp    edx,0x6
c000ac8b:	77 07                	ja     c000ac94 <calc_output_multi+0x125>
c000ac8d:	ff 24 95 24 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6adc]
c000ac94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac97:	4f                   	dec    edi
c000ac98:	83 ec 0c             	sub    esp,0xc
c000ac9b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aca9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acad:	e8 55 d0 01 00       	call   c0027d07 <__extendsfdf2>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acb9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000accd:	e8 3e c6 01 00       	call   c0027310 <__muldf3>
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdd:	52                   	push   edx
c000acde:	50                   	push   eax
c000acdf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ace2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ace5:	e8 a9 bf 01 00       	call   c0026c93 <__adddf3>
c000acea:	83 c4 10             	add    esp,0x10
c000aced:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acf3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf6:	4f                   	dec    edi
c000acf7:	83 ec 0c             	sub    esp,0xc
c000acfa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad01:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad08:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad0c:	e8 f6 cf 01 00       	call   c0027d07 <__extendsfdf2>
c000ad11:	83 c4 10             	add    esp,0x10
c000ad14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad18:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad2c:	e8 df c5 01 00       	call   c0027310 <__muldf3>
c000ad31:	83 c4 10             	add    esp,0x10
c000ad34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3c:	52                   	push   edx
c000ad3d:	50                   	push   eax
c000ad3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad41:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad44:	e8 4a bf 01 00       	call   c0026c93 <__adddf3>
c000ad49:	83 c4 10             	add    esp,0x10
c000ad4c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad4f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad55:	4f                   	dec    edi
c000ad56:	83 ec 0c             	sub    esp,0xc
c000ad59:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad60:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad67:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad6b:	e8 97 cf 01 00       	call   c0027d07 <__extendsfdf2>
c000ad70:	83 c4 10             	add    esp,0x10
c000ad73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8b:	e8 80 c5 01 00       	call   c0027310 <__muldf3>
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9b:	52                   	push   edx
c000ad9c:	50                   	push   eax
c000ad9d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ada3:	e8 eb be 01 00       	call   c0026c93 <__adddf3>
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adb4:	4f                   	dec    edi
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adc6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adca:	e8 38 cf 01 00       	call   c0027d07 <__extendsfdf2>
c000adcf:	83 c4 10             	add    esp,0x10
c000add2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adea:	e8 21 c5 01 00       	call   c0027310 <__muldf3>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adfa:	52                   	push   edx
c000adfb:	50                   	push   eax
c000adfc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae02:	e8 8c be 01 00       	call   c0026c93 <__adddf3>
c000ae07:	83 c4 10             	add    esp,0x10
c000ae0a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae0d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae13:	4f                   	dec    edi
c000ae14:	83 ec 0c             	sub    esp,0xc
c000ae17:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae1e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae25:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae29:	e8 d9 ce 01 00       	call   c0027d07 <__extendsfdf2>
c000ae2e:	83 c4 10             	add    esp,0x10
c000ae31:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae35:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae49:	e8 c2 c4 01 00       	call   c0027310 <__muldf3>
c000ae4e:	83 c4 10             	add    esp,0x10
c000ae51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae55:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae59:	52                   	push   edx
c000ae5a:	50                   	push   eax
c000ae5b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae5e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae61:	e8 2d be 01 00       	call   c0026c93 <__adddf3>
c000ae66:	83 c4 10             	add    esp,0x10
c000ae69:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae6c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae72:	4f                   	dec    edi
c000ae73:	83 ec 0c             	sub    esp,0xc
c000ae76:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae7d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae84:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae88:	e8 7a ce 01 00       	call   c0027d07 <__extendsfdf2>
c000ae8d:	83 c4 10             	add    esp,0x10
c000ae90:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae94:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea8:	e8 63 c4 01 00       	call   c0027310 <__muldf3>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb8:	52                   	push   edx
c000aeb9:	50                   	push   eax
c000aeba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aebd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec0:	e8 ce bd 01 00       	call   c0026c93 <__adddf3>
c000aec5:	83 c4 10             	add    esp,0x10
c000aec8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aecb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aece:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed1:	4f                   	dec    edi
c000aed2:	83 ec 0c             	sub    esp,0xc
c000aed5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aedc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aee3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee7:	e8 1b ce 01 00       	call   c0027d07 <__extendsfdf2>
c000aeec:	83 c4 10             	add    esp,0x10
c000aeef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af07:	e8 04 c4 01 00       	call   c0027310 <__muldf3>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af17:	52                   	push   edx
c000af18:	50                   	push   eax
c000af19:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af1c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af1f:	e8 6f bd 01 00       	call   c0026c93 <__adddf3>
c000af24:	83 c4 10             	add    esp,0x10
c000af27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af30:	4f                   	dec    edi
c000af31:	83 ec 0c             	sub    esp,0xc
c000af34:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af3b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af46:	e8 bc cd 01 00       	call   c0027d07 <__extendsfdf2>
c000af4b:	83 c4 10             	add    esp,0x10
c000af4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af52:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af66:	e8 a5 c3 01 00       	call   c0027310 <__muldf3>
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af76:	52                   	push   edx
c000af77:	50                   	push   eax
c000af78:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af7b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af7e:	e8 10 bd 01 00       	call   c0026c93 <__adddf3>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af89:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af8c:	85 ff                	test   edi,edi
c000af8e:	0f 8f e9 fc ff ff    	jg     c000ac7d <calc_output_multi+0x10e>
c000af94:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af9c:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa0:	0f 89 4c fc ff ff    	jns    c000abf2 <calc_output_multi+0x83>
c000afa6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afae:	29 c8                	sub    eax,ecx
c000afb0:	99                   	cdq    
c000afb1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afb9:	0f af d0             	imul   edx,eax
c000afbc:	40                   	inc    eax
c000afbd:	01 d1                	add    ecx,edx
c000afbf:	0f af c3             	imul   eax,ebx
c000afc2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afc6:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afcd:	55                   	push   ebp
c000afce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afd2:	6a 00                	push   0x0
c000afd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afd8:	e8 df 56 ff ff       	call   c00006bc <memset>
c000afdd:	83 c4 10             	add    esp,0x10
c000afe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afe4:	e8 e0 e6 ff ff       	call   c00096c9 <fp_to_double>
c000afe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aff5:	e8 c5 e6 ff ff       	call   c00096bf <fp_to_int>
c000affa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000affd:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b000:	57                   	push   edi
c000b001:	57                   	push   edi
c000b002:	89 df                	mov    edi,ebx
c000b004:	55                   	push   ebp
c000b005:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b009:	e8 1a b6 01 00       	call   c0026628 <__subsf3>
c000b00e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b011:	e8 f1 cc 01 00       	call   c0027d07 <__extendsfdf2>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b025:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b029:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b02d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b031:	e8 da c2 01 00       	call   c0027310 <__muldf3>
c000b036:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b039:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b03d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b041:	e8 c1 cc 01 00       	call   c0027d07 <__extendsfdf2>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b04d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b051:	52                   	push   edx
c000b052:	50                   	push   eax
c000b053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05b:	e8 33 bc 01 00       	call   c0026c93 <__adddf3>
c000b060:	83 c4 10             	add    esp,0x10
c000b063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b067:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b06b:	89 f8                	mov    eax,edi
c000b06d:	b9 08 00 00 00       	mov    ecx,0x8
c000b072:	99                   	cdq    
c000b073:	f7 f9                	idiv   ecx
c000b075:	4a                   	dec    edx
c000b076:	83 fa 06             	cmp    edx,0x6
c000b079:	77 07                	ja     c000b082 <calc_output_multi+0x513>
c000b07b:	ff 24 95 40 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6ac0]
c000b082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b086:	4f                   	dec    edi
c000b087:	83 ec 0c             	sub    esp,0xc
c000b08a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b08d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b091:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b098:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b09c:	e8 66 cc 01 00       	call   c0027d07 <__extendsfdf2>
c000b0a1:	83 c4 10             	add    esp,0x10
c000b0a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0bc:	e8 4f c2 01 00       	call   c0027310 <__muldf3>
c000b0c1:	83 c4 10             	add    esp,0x10
c000b0c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cc:	52                   	push   edx
c000b0cd:	50                   	push   eax
c000b0ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0d4:	e8 ba bb 01 00       	call   c0026c93 <__adddf3>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0df:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	4f                   	dec    edi
c000b0e7:	83 ec 0c             	sub    esp,0xc
c000b0ea:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0fc:	e8 06 cc 01 00       	call   c0027d07 <__extendsfdf2>
c000b101:	83 c4 10             	add    esp,0x10
c000b104:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b108:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b11c:	e8 ef c1 01 00       	call   c0027310 <__muldf3>
c000b121:	83 c4 10             	add    esp,0x10
c000b124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b128:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12c:	52                   	push   edx
c000b12d:	50                   	push   eax
c000b12e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b131:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b134:	e8 5a bb 01 00       	call   c0026c93 <__adddf3>
c000b139:	83 c4 10             	add    esp,0x10
c000b13c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b13f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b146:	4f                   	dec    edi
c000b147:	83 ec 0c             	sub    esp,0xc
c000b14a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b14d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b151:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b158:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b15c:	e8 a6 cb 01 00       	call   c0027d07 <__extendsfdf2>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b168:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b16c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b17c:	e8 8f c1 01 00       	call   c0027310 <__muldf3>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b188:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18c:	52                   	push   edx
c000b18d:	50                   	push   eax
c000b18e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b191:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b194:	e8 fa ba 01 00       	call   c0026c93 <__adddf3>
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b19f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a6:	4f                   	dec    edi
c000b1a7:	83 ec 0c             	sub    esp,0xc
c000b1aa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1bc:	e8 46 cb 01 00       	call   c0027d07 <__extendsfdf2>
c000b1c1:	83 c4 10             	add    esp,0x10
c000b1c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1dc:	e8 2f c1 01 00       	call   c0027310 <__muldf3>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ec:	52                   	push   edx
c000b1ed:	50                   	push   eax
c000b1ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1f4:	e8 9a ba 01 00       	call   c0026c93 <__adddf3>
c000b1f9:	83 c4 10             	add    esp,0x10
c000b1fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b206:	4f                   	dec    edi
c000b207:	83 ec 0c             	sub    esp,0xc
c000b20a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b20d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b211:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b218:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b21c:	e8 e6 ca 01 00       	call   c0027d07 <__extendsfdf2>
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b228:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b234:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b238:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23c:	e8 cf c0 01 00       	call   c0027310 <__muldf3>
c000b241:	83 c4 10             	add    esp,0x10
c000b244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b248:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24c:	52                   	push   edx
c000b24d:	50                   	push   eax
c000b24e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b251:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b254:	e8 3a ba 01 00       	call   c0026c93 <__adddf3>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b25f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b266:	4f                   	dec    edi
c000b267:	83 ec 0c             	sub    esp,0xc
c000b26a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b26d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b271:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b278:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b27c:	e8 86 ca 01 00       	call   c0027d07 <__extendsfdf2>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b288:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b28c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b294:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b298:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29c:	e8 6f c0 01 00       	call   c0027310 <__muldf3>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ac:	52                   	push   edx
c000b2ad:	50                   	push   eax
c000b2ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b4:	e8 da b9 01 00       	call   c0026c93 <__adddf3>
c000b2b9:	83 c4 10             	add    esp,0x10
c000b2bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2bf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c6:	4f                   	dec    edi
c000b2c7:	83 ec 0c             	sub    esp,0xc
c000b2ca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2dc:	e8 26 ca 01 00       	call   c0027d07 <__extendsfdf2>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fc:	e8 0f c0 01 00       	call   c0027310 <__muldf3>
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b308:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30c:	52                   	push   edx
c000b30d:	50                   	push   eax
c000b30e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b311:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b314:	e8 7a b9 01 00       	call   c0026c93 <__adddf3>
c000b319:	83 c4 10             	add    esp,0x10
c000b31c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b31f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b326:	4f                   	dec    edi
c000b327:	83 ec 0c             	sub    esp,0xc
c000b32a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b32d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b331:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b338:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33c:	e8 c6 c9 01 00       	call   c0027d07 <__extendsfdf2>
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b350:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b354:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b358:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35c:	e8 af bf 01 00       	call   c0027310 <__muldf3>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b368:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36c:	52                   	push   edx
c000b36d:	50                   	push   eax
c000b36e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b371:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b374:	e8 1a b9 01 00       	call   c0026c93 <__adddf3>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b37f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b382:	85 ff                	test   edi,edi
c000b384:	0f 8f e1 fc ff ff    	jg     c000b06b <calc_output_multi+0x4fc>
c000b38a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b38e:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b392:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b396:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b39b:	0f 8f 3f fc ff ff    	jg     c000afe0 <calc_output_multi+0x471>
c000b3a1:	be 08 00 00 00       	mov    esi,0x8
c000b3a6:	89 d8                	mov    eax,ebx
c000b3a8:	99                   	cdq    
c000b3a9:	f7 fe                	idiv   esi
c000b3ab:	4a                   	dec    edx
c000b3ac:	83 fa 06             	cmp    edx,0x6
c000b3af:	77 07                	ja     c000b3b8 <calc_output_multi+0x849>
c000b3b1:	ff 24 95 5c 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6aa4]
c000b3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3bc:	4b                   	dec    ebx
c000b3bd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3c8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3cc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cf:	e8 bf b8 01 00       	call   c0026c93 <__adddf3>
c000b3d4:	83 c4 10             	add    esp,0x10
c000b3d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	e8 1c bf 01 00       	call   c0027310 <__muldf3>
c000b3f4:	5d                   	pop    ebp
c000b3f5:	59                   	pop    ecx
c000b3f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b406:	e8 d8 c7 01 00       	call   c0027be3 <__truncdfsf2>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b412:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b419:	4b                   	dec    ebx
c000b41a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b41e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b425:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b429:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b42c:	e8 62 b8 01 00       	call   c0026c93 <__adddf3>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44c:	e8 bf be 01 00       	call   c0027310 <__muldf3>
c000b451:	59                   	pop    ecx
c000b452:	5f                   	pop    edi
c000b453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b457:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b45b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b463:	e8 7b c7 01 00       	call   c0027be3 <__truncdfsf2>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b46f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b476:	4b                   	dec    ebx
c000b477:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b47b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b47e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b482:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b486:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b489:	e8 05 b8 01 00       	call   c0026c93 <__adddf3>
c000b48e:	83 c4 10             	add    esp,0x10
c000b491:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b495:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a9:	e8 62 be 01 00       	call   c0027310 <__muldf3>
c000b4ae:	5f                   	pop    edi
c000b4af:	5d                   	pop    ebp
c000b4b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c0:	e8 1e c7 01 00       	call   c0027be3 <__truncdfsf2>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4cc:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d3:	4b                   	dec    ebx
c000b4d4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4df:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e6:	e8 a8 b7 01 00       	call   c0026c93 <__adddf3>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b506:	e8 05 be 01 00       	call   c0027310 <__muldf3>
c000b50b:	5d                   	pop    ebp
c000b50c:	59                   	pop    ecx
c000b50d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b511:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51d:	e8 c1 c6 01 00       	call   c0027be3 <__truncdfsf2>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b529:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b530:	4b                   	dec    ebx
c000b531:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b535:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b53c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b540:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b543:	e8 4b b7 01 00       	call   c0026c93 <__adddf3>
c000b548:	83 c4 10             	add    esp,0x10
c000b54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b557:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b563:	e8 a8 bd 01 00       	call   c0027310 <__muldf3>
c000b568:	59                   	pop    ecx
c000b569:	5f                   	pop    edi
c000b56a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b56e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57a:	e8 64 c6 01 00       	call   c0027be3 <__truncdfsf2>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b586:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58d:	4b                   	dec    ebx
c000b58e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b592:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b599:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a0:	e8 ee b6 01 00       	call   c0026c93 <__adddf3>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c0:	e8 4b bd 01 00       	call   c0027310 <__muldf3>
c000b5c5:	5f                   	pop    edi
c000b5c6:	5d                   	pop    ebp
c000b5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d7:	e8 07 c6 01 00       	call   c0027be3 <__truncdfsf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5e3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ea:	4b                   	dec    ebx
c000b5eb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ef:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5fa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fd:	e8 91 b6 01 00       	call   c0026c93 <__adddf3>
c000b602:	83 c4 10             	add    esp,0x10
c000b605:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b609:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b615:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b619:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61d:	e8 ee bc 01 00       	call   c0027310 <__muldf3>
c000b622:	5d                   	pop    ebp
c000b623:	59                   	pop    ecx
c000b624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b628:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b634:	e8 aa c5 01 00       	call   c0027be3 <__truncdfsf2>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b640:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b647:	4b                   	dec    ebx
c000b648:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b64c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b653:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b657:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b65a:	e8 34 b6 01 00       	call   c0026c93 <__adddf3>
c000b65f:	83 c4 10             	add    esp,0x10
c000b662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b666:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67a:	e8 91 bc 01 00       	call   c0027310 <__muldf3>
c000b67f:	59                   	pop    ecx
c000b680:	5f                   	pop    edi
c000b681:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b685:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b691:	e8 4d c5 01 00       	call   c0027be3 <__truncdfsf2>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	85 db                	test   ebx,ebx
c000b69b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b69f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6a2:	0f 8f fe fc ff ff    	jg     c000b3a6 <calc_output_multi+0x837>
c000b6a8:	83 c4 4c             	add    esp,0x4c
c000b6ab:	5b                   	pop    ebx
c000b6ac:	5e                   	pop    esi
c000b6ad:	5f                   	pop    edi
c000b6ae:	5d                   	pop    ebp
c000b6af:	c3                   	ret    

c000b6b0 <double_to_fp>:
c000b6b0:	83 ec 0c             	sub    esp,0xc
c000b6b3:	68 00 00 b0 40       	push   0x40b00000
c000b6b8:	6a 00                	push   0x0
c000b6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c2:	e8 49 bc 01 00       	call   c0027310 <__muldf3>
c000b6c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6cf:	83 c4 1c             	add    esp,0x1c
c000b6d2:	e9 b9 c6 01 00       	jmp    c0027d90 <lrint>

c000b6d7 <prepare_data>:
c000b6d7:	55                   	push   ebp
c000b6d8:	57                   	push   edi
c000b6d9:	56                   	push   esi
c000b6da:	53                   	push   ebx
c000b6db:	83 ec 1c             	sub    esp,0x1c
c000b6de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6e6:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6ea:	0f 89 57 01 00 00    	jns    c000b847 <prepare_data+0x170>
c000b6f0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6f6:	85 d2                	test   edx,edx
c000b6f8:	75 0d                	jne    c000b707 <prepare_data+0x30>
c000b6fa:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b700:	29 d0                	sub    eax,edx
c000b702:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b705:	eb 44                	jmp    c000b74b <prepare_data+0x74>
c000b707:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b70a:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b70d:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b710:	39 c1                	cmp    ecx,eax
c000b712:	7d 04                	jge    c000b718 <prepare_data+0x41>
c000b714:	29 d0                	sub    eax,edx
c000b716:	eb 2d                	jmp    c000b745 <prepare_data+0x6e>
c000b718:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b71e:	29 d7                	sub    edi,edx
c000b720:	01 f7                	add    edi,esi
c000b722:	51                   	push   ecx
c000b723:	29 f2                	sub    edx,esi
c000b725:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b72c:	8d 14 90             	lea    edx,[eax+edx*4]
c000b72f:	51                   	push   ecx
c000b730:	52                   	push   edx
c000b731:	50                   	push   eax
c000b732:	e8 31 4f ff ff       	call   c0000668 <memmove>
c000b737:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b73a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b73d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b740:	29 f0                	sub    eax,esi
c000b742:	83 c4 10             	add    esp,0x10
c000b745:	29 f0                	sub    eax,esi
c000b747:	79 02                	jns    c000b74b <prepare_data+0x74>
c000b749:	31 c0                	xor    eax,eax
c000b74b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b74e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b751:	29 ef                	sub    edi,ebp
c000b753:	39 c7                	cmp    edi,eax
c000b755:	7e 02                	jle    c000b759 <prepare_data+0x82>
c000b757:	89 c7                	mov    edi,eax
c000b759:	89 f8                	mov    eax,edi
c000b75b:	99                   	cdq    
c000b75c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b75f:	b8 15 00 00 00       	mov    eax,0x15
c000b764:	29 d7                	sub    edi,edx
c000b766:	0f 88 dd 00 00 00    	js     c000b849 <prepare_data+0x172>
c000b76c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b76f:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b772:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b775:	0f 8f ce 00 00 00    	jg     c000b849 <prepare_data+0x172>
c000b77b:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b781:	50                   	push   eax
c000b782:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b789:	50                   	push   eax
c000b78a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b78e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b790:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b793:	50                   	push   eax
c000b794:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b797:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b79b:	50                   	push   eax
c000b79c:	e8 ff 4e ff ff       	call   c00006a0 <memcpy>
c000b7a1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7a4:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7a7:	01 fd                	add    ebp,edi
c000b7a9:	01 f9                	add    ecx,edi
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b1:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7b4:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7bb:	0f 85 86 00 00 00    	jne    c000b847 <prepare_data+0x170>
c000b7c1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7c4:	89 e8                	mov    eax,ebp
c000b7c6:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7c9:	29 c8                	sub    eax,ecx
c000b7cb:	39 f8                	cmp    eax,edi
c000b7cd:	7d 78                	jge    c000b847 <prepare_data+0x170>
c000b7cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7d3:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7d7:	74 6e                	je     c000b847 <prepare_data+0x170>
c000b7d9:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7dc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7e3:	29 ef                	sub    edi,ebp
c000b7e5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7e9:	7c 29                	jl     c000b814 <prepare_data+0x13d>
c000b7eb:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7ee:	29 f1                	sub    ecx,esi
c000b7f0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7f7:	55                   	push   ebp
c000b7f8:	50                   	push   eax
c000b7f9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7fc:	50                   	push   eax
c000b7fd:	52                   	push   edx
c000b7fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b802:	e8 61 4e ff ff       	call   c0000668 <memmove>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b80d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b810:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b814:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b817:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b81a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b81d:	83 c6 05             	add    esi,0x5
c000b820:	78 07                	js     c000b829 <prepare_data+0x152>
c000b822:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b825:	39 cf                	cmp    edi,ecx
c000b827:	7e 04                	jle    c000b82d <prepare_data+0x156>
c000b829:	89 ce                	mov    esi,ecx
c000b82b:	29 c6                	sub    esi,eax
c000b82d:	8d 04 82             	lea    eax,[edx+eax*4]
c000b830:	51                   	push   ecx
c000b831:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b838:	51                   	push   ecx
c000b839:	6a 00                	push   0x0
c000b83b:	50                   	push   eax
c000b83c:	e8 7b 4e ff ff       	call   c00006bc <memset>
c000b841:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	31 c0                	xor    eax,eax
c000b849:	83 c4 1c             	add    esp,0x1c
c000b84c:	5b                   	pop    ebx
c000b84d:	5e                   	pop    esi
c000b84e:	5f                   	pop    edi
c000b84f:	5d                   	pop    ebp
c000b850:	c3                   	ret    

c000b851 <sinc_multichan_vari_process>:
c000b851:	55                   	push   ebp
c000b852:	ba 05 00 00 00       	mov    edx,0x5
c000b857:	57                   	push   edi
c000b858:	56                   	push   esi
c000b859:	53                   	push   ebx
c000b85a:	83 ec 4c             	sub    esp,0x4c
c000b85d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b861:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b865:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b868:	85 db                	test   ebx,ebx
c000b86a:	0f 84 9b 06 00 00    	je     c000bf0b <sinc_multichan_vari_process+0x6ba>
c000b870:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b873:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b876:	0f af c5             	imul   eax,ebp
c000b879:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b87c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b87f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b886:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b88d:	0f af c5             	imul   eax,ebp
c000b890:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b893:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b896:	8b 06                	mov    eax,DWORD PTR [esi]
c000b898:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b89c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a0:	68 00 00 70 3f       	push   0x3f700000
c000b8a5:	6a 00                	push   0x0
c000b8a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8af:	e8 2b c3 01 00       	call   c0027bdf <__ltdf2>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	ba 16 00 00 00       	mov    edx,0x16
c000b8bc:	85 c0                	test   eax,eax
c000b8be:	0f 88 47 06 00 00    	js     c000bf0b <sinc_multichan_vari_process+0x6ba>
c000b8c4:	68 00 00 70 40       	push   0x40700000
c000b8c9:	6a 00                	push   0x0
c000b8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d3:	e8 e9 c2 01 00       	call   c0027bc1 <__gtdf2>
c000b8d8:	83 c4 10             	add    esp,0x10
c000b8db:	ba 16 00 00 00       	mov    edx,0x16
c000b8e0:	85 c0                	test   eax,eax
c000b8e2:	0f 8f 23 06 00 00    	jg     c000bf0b <sinc_multichan_vari_process+0x6ba>
c000b8e8:	83 ec 0c             	sub    esp,0xc
c000b8eb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8ee:	e8 80 c0 01 00       	call   c0027973 <__floatsidf>
c000b8f3:	83 c4 10             	add    esp,0x10
c000b8f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8fe:	68 00 00 00 40       	push   0x40000000
c000b903:	6a 00                	push   0x0
c000b905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b90d:	e8 81 b3 01 00       	call   c0026c93 <__adddf3>
c000b912:	59                   	pop    ecx
c000b913:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b917:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b91b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b91e:	e8 50 c0 01 00       	call   c0027973 <__floatsidf>
c000b923:	83 c4 10             	add    esp,0x10
c000b926:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b92a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b92e:	52                   	push   edx
c000b92f:	50                   	push   eax
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 b7 bc 01 00       	call   c00275f4 <__divdf3>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b944:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b948:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b94b:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b94e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b952:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	e8 56 c2 01 00       	call   c0027bc1 <__gtdf2>
c000b96b:	83 c4 10             	add    esp,0x10
c000b96e:	85 c0                	test   eax,eax
c000b970:	7e 2d                	jle    c000b99f <sinc_multichan_vari_process+0x14e>
c000b972:	68 00 00 f0 3f       	push   0x3ff00000
c000b977:	6a 00                	push   0x0
c000b979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b981:	e8 59 c2 01 00       	call   c0027bdf <__ltdf2>
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	85 c0                	test   eax,eax
c000b98b:	79 4d                	jns    c000b9da <sinc_multichan_vari_process+0x189>
c000b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b991:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b995:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b99d:	eb 1b                	jmp    c000b9ba <sinc_multichan_vari_process+0x169>
c000b99f:	68 00 00 f0 3f       	push   0x3ff00000
c000b9a4:	6a 00                	push   0x0
c000b9a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ae:	e8 2c c2 01 00       	call   c0027bdf <__ltdf2>
c000b9b3:	83 c4 10             	add    esp,0x10
c000b9b6:	85 c0                	test   eax,eax
c000b9b8:	79 20                	jns    c000b9da <sinc_multichan_vari_process+0x189>
c000b9ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ca:	e8 25 bc 01 00       	call   c00275f4 <__divdf3>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9da:	50                   	push   eax
c000b9db:	50                   	push   eax
c000b9dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e4:	e8 a7 c3 01 00       	call   c0027d90 <lrint>
c000b9e9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ec:	40                   	inc    eax
c000b9ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f1:	0f af c5             	imul   eax,ebp
c000b9f4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9f8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ff:	58                   	pop    eax
c000ba00:	5a                   	pop    edx
c000ba01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba09:	e8 82 c3 01 00       	call   c0027d90 <lrint>
c000ba0e:	83 ec 0c             	sub    esp,0xc
c000ba11:	50                   	push   eax
c000ba12:	e8 5c bf 01 00       	call   c0027973 <__floatsidf>
c000ba17:	83 c4 10             	add    esp,0x10
c000ba1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba22:	52                   	push   edx
c000ba23:	50                   	push   eax
c000ba24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba2c:	e8 b3 b8 01 00       	call   c00272e4 <__subdf3>
c000ba31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba39:	83 c4 20             	add    esp,0x20
c000ba3c:	6a 00                	push   0x0
c000ba3e:	6a 00                	push   0x0
c000ba40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba48:	e8 92 c1 01 00       	call   c0027bdf <__ltdf2>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	85 c0                	test   eax,eax
c000ba52:	79 1f                	jns    c000ba73 <sinc_multichan_vari_process+0x222>
c000ba54:	68 00 00 f0 3f       	push   0x3ff00000
c000ba59:	6a 00                	push   0x0
c000ba5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba63:	e8 2b b2 01 00       	call   c0026c93 <__adddf3>
c000ba68:	83 c4 10             	add    esp,0x10
c000ba6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba73:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba76:	83 ec 10             	sub    esp,0x10
c000ba79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba7d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba90:	e8 4f b8 01 00       	call   c00272e4 <__subdf3>
c000ba95:	83 c4 18             	add    esp,0x18
c000ba98:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa0:	52                   	push   edx
c000baa1:	50                   	push   eax
c000baa2:	e8 e9 c2 01 00       	call   c0027d90 <lrint>
c000baa7:	0f af e8             	imul   ebp,eax
c000baaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000baae:	01 e8                	add    eax,ebp
c000bab0:	99                   	cdq    
c000bab1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bab4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000babb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000babf:	68 00 00 f0 3f       	push   0x3ff00000
c000bac4:	6a 00                	push   0x0
c000bac6:	e8 29 bb 01 00       	call   c00275f4 <__divdf3>
c000bacb:	83 c4 10             	add    esp,0x10
c000bace:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000badb:	68 23 42 92 0c       	push   0xc924223
c000bae0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae8:	e8 a6 b1 01 00       	call   c0026c93 <__adddf3>
c000baed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000baf5:	83 c4 20             	add    esp,0x20
c000baf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb00:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb0b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb0e:	7d 50                	jge    c000bb60 <sinc_multichan_vari_process+0x30f>
c000bb10:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb13:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb16:	01 c8                	add    eax,ecx
c000bb18:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb1b:	99                   	cdq    
c000bb1c:	f7 f9                	idiv   ecx
c000bb1e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb22:	7d 0c                	jge    c000bb30 <sinc_multichan_vari_process+0x2df>
c000bb24:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb27:	85 ed                	test   ebp,ebp
c000bb29:	79 6b                	jns    c000bb96 <sinc_multichan_vari_process+0x345>
c000bb2b:	e9 e6 00 00 00       	jmp    c000bc16 <sinc_multichan_vari_process+0x3c5>
c000bb30:	50                   	push   eax
c000bb31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb35:	57                   	push   edi
c000bb36:	53                   	push   ebx
c000bb37:	e8 9b fb ff ff       	call   c000b6d7 <prepare_data>
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	89 c2                	mov    edx,eax
c000bb41:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb44:	85 c0                	test   eax,eax
c000bb46:	0f 85 bf 03 00 00    	jne    c000bf0b <sinc_multichan_vari_process+0x6ba>
c000bb4c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb4f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb52:	01 c8                	add    eax,ecx
c000bb54:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb57:	99                   	cdq    
c000bb58:	f7 f9                	idiv   ecx
c000bb5a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb5e:	7c c4                	jl     c000bb24 <sinc_multichan_vari_process+0x2d3>
c000bb60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb76:	89 06                	mov    DWORD PTR [esi],eax
c000bb78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb7e:	99                   	cdq    
c000bb7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb82:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb88:	99                   	cdq    
c000bb89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8c:	31 d2                	xor    edx,edx
c000bb8e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb91:	e9 75 03 00 00       	jmp    c000bf0b <sinc_multichan_vari_process+0x6ba>
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb9c:	e8 d2 bd 01 00       	call   c0027973 <__floatsidf>
c000bba1:	83 c4 10             	add    esp,0x10
c000bba4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bba8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbbc:	e8 d2 b0 01 00       	call   c0026c93 <__adddf3>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbc8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbdc:	e8 b2 b0 01 00       	call   c0026c93 <__adddf3>
c000bbe1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbe4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbe8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbec:	e8 82 bd 01 00       	call   c0027973 <__floatsidf>
c000bbf1:	83 c4 10             	add    esp,0x10
c000bbf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfc:	52                   	push   edx
c000bbfd:	50                   	push   eax
c000bbfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc06:	e8 d2 bf 01 00       	call   c0027bdd <__gedf2>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	85 c0                	test   eax,eax
c000bc10:	0f 89 4a ff ff ff    	jns    c000bb60 <sinc_multichan_vari_process+0x30f>
c000bc16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc1a:	0f 8e ed 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x4bc>
c000bc20:	83 ec 10             	sub    esp,0x10
c000bc23:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc26:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc2c:	ff 36                	push   DWORD PTR [esi]
c000bc2e:	e8 b1 b6 01 00       	call   c00272e4 <__subdf3>
c000bc33:	83 c4 18             	add    esp,0x18
c000bc36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	e8 2b c1 01 00       	call   c0027d70 <fabs>
c000bc45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc62:	e8 5a bf 01 00       	call   c0027bc1 <__gtdf2>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 8e 9b 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x4bc>
c000bc72:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc84:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc87:	e8 58 b6 01 00       	call   c00272e4 <__subdf3>
c000bc8c:	59                   	pop    ecx
c000bc8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc91:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc98:	e8 d6 bc 01 00       	call   c0027973 <__floatsidf>
c000bc9d:	83 c4 10             	add    esp,0x10
c000bca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca8:	52                   	push   edx
c000bca9:	50                   	push   eax
c000bcaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb2:	e8 59 b6 01 00       	call   c0027310 <__muldf3>
c000bcb7:	5d                   	pop    ebp
c000bcb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcbc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcc3:	e8 ab bc 01 00       	call   c0027973 <__floatsidf>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bccf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcdd:	e8 12 b9 01 00       	call   c00275f4 <__divdf3>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bce9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcfd:	e8 91 af 01 00       	call   c0026c93 <__adddf3>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd0d:	83 ec 0c             	sub    esp,0xc
c000bd10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd13:	e8 5b bc 01 00       	call   c0027973 <__floatsidf>
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	e8 a7 be 01 00       	call   c0027bdf <__ltdf2>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	85 c0                	test   eax,eax
c000bd3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd45:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd49:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd4d:	78 10                	js     c000bd5f <sinc_multichan_vari_process+0x50e>
c000bd4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6f:	e8 9c b5 01 00       	call   c0027310 <__muldf3>
c000bd74:	59                   	pop    ecx
c000bd75:	5d                   	pop    ebp
c000bd76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd86:	e8 25 f9 ff ff       	call   c000b6b0 <double_to_fp>
c000bd8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd8f:	89 c5                	mov    ebp,eax
c000bd91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd9d:	e8 6e b5 01 00       	call   c0027310 <__muldf3>
c000bda2:	83 c4 18             	add    esp,0x18
c000bda5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bda9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdad:	52                   	push   edx
c000bdae:	50                   	push   eax
c000bdaf:	e8 fc f8 ff ff       	call   c000b6b0 <double_to_fp>
c000bdb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdbb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc1:	50                   	push   eax
c000bdc2:	50                   	push   eax
c000bdc3:	50                   	push   eax
c000bdc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdc7:	e8 a7 bb 01 00       	call   c0027973 <__floatsidf>
c000bdcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	e8 0b b8 01 00       	call   c00275f4 <__divdf3>
c000bde9:	83 c4 1c             	add    esp,0x1c
c000bdec:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdf4:	52                   	push   edx
c000bdf5:	89 ea                	mov    edx,ebp
c000bdf7:	50                   	push   eax
c000bdf8:	89 d8                	mov    eax,ebx
c000bdfa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdfd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be01:	e8 69 ed ff ff       	call   c000ab6f <calc_output_multi>
c000be06:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be09:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be1c:	e8 d3 b7 01 00       	call   c00275f4 <__divdf3>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be28:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be3c:	e8 52 ae 01 00       	call   c0026c93 <__adddf3>
c000be41:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be45:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be49:	83 c4 28             	add    esp,0x28
c000be4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be54:	e8 37 bf 01 00       	call   c0027d90 <lrint>
c000be59:	83 ec 0c             	sub    esp,0xc
c000be5c:	50                   	push   eax
c000be5d:	e8 11 bb 01 00       	call   c0027973 <__floatsidf>
c000be62:	83 c4 10             	add    esp,0x10
c000be65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be6d:	52                   	push   edx
c000be6e:	50                   	push   eax
c000be6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be77:	e8 68 b4 01 00       	call   c00272e4 <__subdf3>
c000be7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be84:	83 c4 20             	add    esp,0x20
c000be87:	6a 00                	push   0x0
c000be89:	6a 00                	push   0x0
c000be8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be93:	e8 47 bd 01 00       	call   c0027bdf <__ltdf2>
c000be98:	83 c4 10             	add    esp,0x10
c000be9b:	85 c0                	test   eax,eax
c000be9d:	79 20                	jns    c000bebf <sinc_multichan_vari_process+0x66e>
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beaf:	e8 df ad 01 00       	call   c0026c93 <__adddf3>
c000beb4:	83 c4 10             	add    esp,0x10
c000beb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bebb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bebf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bec2:	83 ec 10             	sub    esp,0x10
c000bec5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bec9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000becc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bed8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bedc:	e8 03 b4 01 00       	call   c00272e4 <__subdf3>
c000bee1:	83 c4 18             	add    esp,0x18
c000bee4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beec:	52                   	push   edx
c000beed:	50                   	push   eax
c000beee:	e8 9d be 01 00       	call   c0027d90 <lrint>
c000bef3:	0f af e8             	imul   ebp,eax
c000bef6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	01 e8                	add    eax,ebp
c000beff:	99                   	cdq    
c000bf00:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf03:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf06:	e9 fd fb ff ff       	jmp    c000bb08 <sinc_multichan_vari_process+0x2b7>
c000bf0b:	83 c4 4c             	add    esp,0x4c
c000bf0e:	89 d0                	mov    eax,edx
c000bf10:	5b                   	pop    ebx
c000bf11:	5e                   	pop    esi
c000bf12:	5f                   	pop    edi
c000bf13:	5d                   	pop    ebp
c000bf14:	c3                   	ret    

c000bf15 <sinc_hex_vari_process>:
c000bf15:	55                   	push   ebp
c000bf16:	ba 05 00 00 00       	mov    edx,0x5
c000bf1b:	57                   	push   edi
c000bf1c:	56                   	push   esi
c000bf1d:	53                   	push   ebx
c000bf1e:	83 ec 4c             	sub    esp,0x4c
c000bf21:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf25:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf29:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf2c:	85 db                	test   ebx,ebx
c000bf2e:	0f 84 9c 06 00 00    	je     c000c5d0 <sinc_hex_vari_process+0x6bb>
c000bf34:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf37:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf3a:	0f af c7             	imul   eax,edi
c000bf3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf40:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf43:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf4a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf51:	0f af c7             	imul   eax,edi
c000bf54:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf57:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf5a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf5d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf65:	68 00 00 70 3f       	push   0x3f700000
c000bf6a:	6a 00                	push   0x0
c000bf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf74:	e8 66 bc 01 00       	call   c0027bdf <__ltdf2>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	ba 16 00 00 00       	mov    edx,0x16
c000bf81:	85 c0                	test   eax,eax
c000bf83:	0f 88 47 06 00 00    	js     c000c5d0 <sinc_hex_vari_process+0x6bb>
c000bf89:	68 00 00 70 40       	push   0x40700000
c000bf8e:	6a 00                	push   0x0
c000bf90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf98:	e8 24 bc 01 00       	call   c0027bc1 <__gtdf2>
c000bf9d:	83 c4 10             	add    esp,0x10
c000bfa0:	ba 16 00 00 00       	mov    edx,0x16
c000bfa5:	85 c0                	test   eax,eax
c000bfa7:	0f 8f 23 06 00 00    	jg     c000c5d0 <sinc_hex_vari_process+0x6bb>
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfb3:	e8 bb b9 01 00       	call   c0027973 <__floatsidf>
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfc3:	68 00 00 00 40       	push   0x40000000
c000bfc8:	6a 00                	push   0x0
c000bfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd2:	e8 bc ac 01 00       	call   c0026c93 <__adddf3>
c000bfd7:	59                   	pop    ecx
c000bfd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfdc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe3:	e8 8b b9 01 00       	call   c0027973 <__floatsidf>
c000bfe8:	83 c4 10             	add    esp,0x10
c000bfeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bff3:	52                   	push   edx
c000bff4:	50                   	push   eax
c000bff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffd:	e8 f2 b5 01 00       	call   c00275f4 <__divdf3>
c000c002:	83 c4 10             	add    esp,0x10
c000c005:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c009:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c00d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c010:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c017:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c01b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c01f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	e8 91 bb 01 00       	call   c0027bc1 <__gtdf2>
c000c030:	83 c4 10             	add    esp,0x10
c000c033:	85 c0                	test   eax,eax
c000c035:	7e 2d                	jle    c000c064 <sinc_hex_vari_process+0x14f>
c000c037:	68 00 00 f0 3f       	push   0x3ff00000
c000c03c:	6a 00                	push   0x0
c000c03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c046:	e8 94 bb 01 00       	call   c0027bdf <__ltdf2>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	85 c0                	test   eax,eax
c000c050:	79 4d                	jns    c000c09f <sinc_hex_vari_process+0x18a>
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c05a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c05e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c062:	eb 1b                	jmp    c000c07f <sinc_hex_vari_process+0x16a>
c000c064:	68 00 00 f0 3f       	push   0x3ff00000
c000c069:	6a 00                	push   0x0
c000c06b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c06f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c073:	e8 67 bb 01 00       	call   c0027bdf <__ltdf2>
c000c078:	83 c4 10             	add    esp,0x10
c000c07b:	85 c0                	test   eax,eax
c000c07d:	79 20                	jns    c000c09f <sinc_hex_vari_process+0x18a>
c000c07f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c083:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08f:	e8 60 b5 01 00       	call   c00275f4 <__divdf3>
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c09b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c09f:	50                   	push   eax
c000c0a0:	50                   	push   eax
c000c0a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0a9:	e8 e2 bc 01 00       	call   c0027d90 <lrint>
c000c0ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b1:	40                   	inc    eax
c000c0b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b6:	0f af c7             	imul   eax,edi
c000c0b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c4:	58                   	pop    eax
c000c0c5:	5a                   	pop    edx
c000c0c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ce:	e8 bd bc 01 00       	call   c0027d90 <lrint>
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	50                   	push   eax
c000c0d7:	e8 97 b8 01 00       	call   c0027973 <__floatsidf>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0e7:	52                   	push   edx
c000c0e8:	50                   	push   eax
c000c0e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f1:	e8 ee b1 01 00       	call   c00272e4 <__subdf3>
c000c0f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0fe:	83 c4 20             	add    esp,0x20
c000c101:	6a 00                	push   0x0
c000c103:	6a 00                	push   0x0
c000c105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10d:	e8 cd ba 01 00       	call   c0027bdf <__ltdf2>
c000c112:	83 c4 10             	add    esp,0x10
c000c115:	85 c0                	test   eax,eax
c000c117:	79 1f                	jns    c000c138 <sinc_hex_vari_process+0x223>
c000c119:	68 00 00 f0 3f       	push   0x3ff00000
c000c11e:	6a 00                	push   0x0
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c128:	e8 66 ab 01 00       	call   c0026c93 <__adddf3>
c000c12d:	83 c4 10             	add    esp,0x10
c000c130:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c134:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c138:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c13b:	83 ec 10             	sub    esp,0x10
c000c13e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c151:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c155:	e8 8a b1 01 00       	call   c00272e4 <__subdf3>
c000c15a:	83 c4 18             	add    esp,0x18
c000c15d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c161:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c165:	52                   	push   edx
c000c166:	50                   	push   eax
c000c167:	e8 24 bc 01 00       	call   c0027d90 <lrint>
c000c16c:	0f af f8             	imul   edi,eax
c000c16f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c173:	01 f8                	add    eax,edi
c000c175:	99                   	cdq    
c000c176:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c179:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c17c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c184:	68 00 00 f0 3f       	push   0x3ff00000
c000c189:	6a 00                	push   0x0
c000c18b:	e8 64 b4 01 00       	call   c00275f4 <__divdf3>
c000c190:	83 c4 10             	add    esp,0x10
c000c193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c19b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a0:	68 23 42 92 0c       	push   0xc924223
c000c1a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1ad:	e8 e1 aa 01 00       	call   c0026c93 <__adddf3>
c000c1b2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1b6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1ba:	83 c4 20             	add    esp,0x20
c000c1bd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1c5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1d3:	7d 50                	jge    c000c225 <sinc_hex_vari_process+0x310>
c000c1d5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1db:	01 c8                	add    eax,ecx
c000c1dd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e0:	99                   	cdq    
c000c1e1:	f7 f9                	idiv   ecx
c000c1e3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e7:	7d 0c                	jge    c000c1f5 <sinc_hex_vari_process+0x2e0>
c000c1e9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ec:	85 ff                	test   edi,edi
c000c1ee:	79 6c                	jns    c000c25c <sinc_hex_vari_process+0x347>
c000c1f0:	e9 e7 00 00 00       	jmp    c000c2dc <sinc_hex_vari_process+0x3c7>
c000c1f5:	50                   	push   eax
c000c1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1fa:	56                   	push   esi
c000c1fb:	53                   	push   ebx
c000c1fc:	e8 d6 f4 ff ff       	call   c000b6d7 <prepare_data>
c000c201:	83 c4 10             	add    esp,0x10
c000c204:	89 c2                	mov    edx,eax
c000c206:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c209:	85 c0                	test   eax,eax
c000c20b:	0f 85 bf 03 00 00    	jne    c000c5d0 <sinc_hex_vari_process+0x6bb>
c000c211:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c214:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c217:	01 c8                	add    eax,ecx
c000c219:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c21c:	99                   	cdq    
c000c21d:	f7 f9                	idiv   ecx
c000c21f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c223:	7c c4                	jl     c000c1e9 <sinc_hex_vari_process+0x2d4>
c000c225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c229:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c22d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c230:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c237:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c23e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c241:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c244:	99                   	cdq    
c000c245:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c248:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c24b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c24e:	99                   	cdq    
c000c24f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c252:	31 d2                	xor    edx,edx
c000c254:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c257:	e9 74 03 00 00       	jmp    c000c5d0 <sinc_hex_vari_process+0x6bb>
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c262:	e8 0c b7 01 00       	call   c0027973 <__floatsidf>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c26e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c276:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c27e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c282:	e8 0c aa 01 00       	call   c0026c93 <__adddf3>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c28e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c296:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a2:	e8 ec a9 01 00       	call   c0026c93 <__adddf3>
c000c2a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2b2:	e8 bc b6 01 00       	call   c0027973 <__floatsidf>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c2:	52                   	push   edx
c000c2c3:	50                   	push   eax
c000c2c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2cc:	e8 0c b9 01 00       	call   c0027bdd <__gedf2>
c000c2d1:	83 c4 10             	add    esp,0x10
c000c2d4:	85 c0                	test   eax,eax
c000c2d6:	0f 89 49 ff ff ff    	jns    c000c225 <sinc_hex_vari_process+0x310>
c000c2dc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e0:	0f 8e ef 00 00 00    	jle    c000c3d5 <sinc_hex_vari_process+0x4c0>
c000c2e6:	83 ec 10             	sub    esp,0x10
c000c2e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ec:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2f5:	e8 ea af 01 00       	call   c00272e4 <__subdf3>
c000c2fa:	83 c4 18             	add    esp,0x18
c000c2fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c301:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c305:	52                   	push   edx
c000c306:	50                   	push   eax
c000c307:	e8 64 ba 01 00       	call   c0027d70 <fabs>
c000c30c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c310:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c31c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c329:	e8 93 b8 01 00       	call   c0027bc1 <__gtdf2>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	85 c0                	test   eax,eax
c000c333:	0f 8e 9c 00 00 00    	jle    c000c3d5 <sinc_hex_vari_process+0x4c0>
c000c339:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c33c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c33f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c343:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c347:	52                   	push   edx
c000c348:	50                   	push   eax
c000c349:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c34c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c34f:	e8 90 af 01 00       	call   c00272e4 <__subdf3>
c000c354:	59                   	pop    ecx
c000c355:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c359:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c35d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c360:	e8 0e b6 01 00       	call   c0027973 <__floatsidf>
c000c365:	83 c4 10             	add    esp,0x10
c000c368:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c36c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c370:	52                   	push   edx
c000c371:	50                   	push   eax
c000c372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37a:	e8 91 af 01 00       	call   c0027310 <__muldf3>
c000c37f:	5f                   	pop    edi
c000c380:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c384:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c388:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c38b:	e8 e3 b5 01 00       	call   c0027973 <__floatsidf>
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39b:	52                   	push   edx
c000c39c:	50                   	push   eax
c000c39d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a5:	e8 4a b2 01 00       	call   c00275f4 <__divdf3>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c5:	e8 c9 a8 01 00       	call   c0026c93 <__adddf3>
c000c3ca:	83 c4 10             	add    esp,0x10
c000c3cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3d5:	83 ec 0c             	sub    esp,0xc
c000c3d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3db:	e8 93 b5 01 00       	call   c0027973 <__floatsidf>
c000c3e0:	83 c4 10             	add    esp,0x10
c000c3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	e8 df b7 01 00       	call   c0027bdf <__ltdf2>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	85 c0                	test   eax,eax
c000c405:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c409:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c40d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c411:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c415:	78 10                	js     c000c427 <sinc_hex_vari_process+0x512>
c000c417:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c41b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c41f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c423:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c433:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c437:	e8 d4 ae 01 00       	call   c0027310 <__muldf3>
c000c43c:	59                   	pop    ecx
c000c43d:	5f                   	pop    edi
c000c43e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c442:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c446:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c44a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c44e:	e8 5d f2 ff ff       	call   c000b6b0 <double_to_fp>
c000c453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c457:	89 c7                	mov    edi,eax
c000c459:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c461:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c465:	e8 a6 ae 01 00       	call   c0027310 <__muldf3>
c000c46a:	83 c4 18             	add    esp,0x18
c000c46d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c471:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c475:	52                   	push   edx
c000c476:	50                   	push   eax
c000c477:	e8 34 f2 ff ff       	call   c000b6b0 <double_to_fp>
c000c47c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c47f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c483:	83 c4 0c             	add    esp,0xc
c000c486:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c489:	8d 04 90             	lea    eax,[eax+edx*4]
c000c48c:	50                   	push   eax
c000c48d:	50                   	push   eax
c000c48e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c491:	e8 dd b4 01 00       	call   c0027973 <__floatsidf>
c000c496:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c49a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c49e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	e8 41 b1 01 00       	call   c00275f4 <__divdf3>
c000c4b3:	83 c4 18             	add    esp,0x18
c000c4b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4be:	52                   	push   edx
c000c4bf:	89 fa                	mov    edx,edi
c000c4c1:	50                   	push   eax
c000c4c2:	89 d8                	mov    eax,ebx
c000c4c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4c8:	e8 50 de ff ff       	call   c000a31d <calc_output_hex>
c000c4cd:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e1:	e8 0e b1 01 00       	call   c00275f4 <__divdf3>
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c501:	e8 8d a7 01 00       	call   c0026c93 <__adddf3>
c000c506:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c50a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c50e:	83 c4 18             	add    esp,0x18
c000c511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c519:	e8 72 b8 01 00       	call   c0027d90 <lrint>
c000c51e:	83 ec 0c             	sub    esp,0xc
c000c521:	50                   	push   eax
c000c522:	e8 4c b4 01 00       	call   c0027973 <__floatsidf>
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c52e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c532:	52                   	push   edx
c000c533:	50                   	push   eax
c000c534:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c538:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c53c:	e8 a3 ad 01 00       	call   c00272e4 <__subdf3>
c000c541:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c545:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c549:	83 c4 20             	add    esp,0x20
c000c54c:	6a 00                	push   0x0
c000c54e:	6a 00                	push   0x0
c000c550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c558:	e8 82 b6 01 00       	call   c0027bdf <__ltdf2>
c000c55d:	83 c4 10             	add    esp,0x10
c000c560:	85 c0                	test   eax,eax
c000c562:	79 20                	jns    c000c584 <sinc_hex_vari_process+0x66f>
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c56c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c570:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c574:	e8 1a a7 01 00       	call   c0026c93 <__adddf3>
c000c579:	83 c4 10             	add    esp,0x10
c000c57c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c580:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c584:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c587:	83 ec 10             	sub    esp,0x10
c000c58a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c58e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c599:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c59d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a1:	e8 3e ad 01 00       	call   c00272e4 <__subdf3>
c000c5a6:	83 c4 18             	add    esp,0x18
c000c5a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b1:	52                   	push   edx
c000c5b2:	50                   	push   eax
c000c5b3:	e8 d8 b7 01 00       	call   c0027d90 <lrint>
c000c5b8:	0f af f8             	imul   edi,eax
c000c5bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5bf:	83 c4 10             	add    esp,0x10
c000c5c2:	01 f8                	add    eax,edi
c000c5c4:	99                   	cdq    
c000c5c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5cb:	e9 fd fb ff ff       	jmp    c000c1cd <sinc_hex_vari_process+0x2b8>
c000c5d0:	83 c4 4c             	add    esp,0x4c
c000c5d3:	89 d0                	mov    eax,edx
c000c5d5:	5b                   	pop    ebx
c000c5d6:	5e                   	pop    esi
c000c5d7:	5f                   	pop    edi
c000c5d8:	5d                   	pop    ebp
c000c5d9:	c3                   	ret    

c000c5da <sinc_quad_vari_process>:
c000c5da:	55                   	push   ebp
c000c5db:	ba 05 00 00 00       	mov    edx,0x5
c000c5e0:	57                   	push   edi
c000c5e1:	56                   	push   esi
c000c5e2:	53                   	push   ebx
c000c5e3:	83 ec 4c             	sub    esp,0x4c
c000c5e6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5ea:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5ee:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f1:	85 db                	test   ebx,ebx
c000c5f3:	0f 84 9c 06 00 00    	je     c000cc95 <sinc_quad_vari_process+0x6bb>
c000c5f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ff:	0f af c7             	imul   eax,edi
c000c602:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c605:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c608:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c60f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c616:	0f af c7             	imul   eax,edi
c000c619:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c61c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c61f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c622:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c62a:	68 00 00 70 3f       	push   0x3f700000
c000c62f:	6a 00                	push   0x0
c000c631:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c639:	e8 a1 b5 01 00       	call   c0027bdf <__ltdf2>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	ba 16 00 00 00       	mov    edx,0x16
c000c646:	85 c0                	test   eax,eax
c000c648:	0f 88 47 06 00 00    	js     c000cc95 <sinc_quad_vari_process+0x6bb>
c000c64e:	68 00 00 70 40       	push   0x40700000
c000c653:	6a 00                	push   0x0
c000c655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c65d:	e8 5f b5 01 00       	call   c0027bc1 <__gtdf2>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	ba 16 00 00 00       	mov    edx,0x16
c000c66a:	85 c0                	test   eax,eax
c000c66c:	0f 8f 23 06 00 00    	jg     c000cc95 <sinc_quad_vari_process+0x6bb>
c000c672:	83 ec 0c             	sub    esp,0xc
c000c675:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c678:	e8 f6 b2 01 00       	call   c0027973 <__floatsidf>
c000c67d:	83 c4 10             	add    esp,0x10
c000c680:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c684:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c688:	68 00 00 00 40       	push   0x40000000
c000c68d:	6a 00                	push   0x0
c000c68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c697:	e8 f7 a5 01 00       	call   c0026c93 <__adddf3>
c000c69c:	59                   	pop    ecx
c000c69d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6a8:	e8 c6 b2 01 00       	call   c0027973 <__floatsidf>
c000c6ad:	83 c4 10             	add    esp,0x10
c000c6b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6b8:	52                   	push   edx
c000c6b9:	50                   	push   eax
c000c6ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c2:	e8 2d af 01 00       	call   c00275f4 <__divdf3>
c000c6c7:	83 c4 10             	add    esp,0x10
c000c6ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6d2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6d5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	e8 cc b4 01 00       	call   c0027bc1 <__gtdf2>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	85 c0                	test   eax,eax
c000c6fa:	7e 2d                	jle    c000c729 <sinc_quad_vari_process+0x14f>
c000c6fc:	68 00 00 f0 3f       	push   0x3ff00000
c000c701:	6a 00                	push   0x0
c000c703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70b:	e8 cf b4 01 00       	call   c0027bdf <__ltdf2>
c000c710:	83 c4 10             	add    esp,0x10
c000c713:	85 c0                	test   eax,eax
c000c715:	79 4d                	jns    c000c764 <sinc_quad_vari_process+0x18a>
c000c717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c71b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c71f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c723:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c727:	eb 1b                	jmp    c000c744 <sinc_quad_vari_process+0x16a>
c000c729:	68 00 00 f0 3f       	push   0x3ff00000
c000c72e:	6a 00                	push   0x0
c000c730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c738:	e8 a2 b4 01 00       	call   c0027bdf <__ltdf2>
c000c73d:	83 c4 10             	add    esp,0x10
c000c740:	85 c0                	test   eax,eax
c000c742:	79 20                	jns    c000c764 <sinc_quad_vari_process+0x18a>
c000c744:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c748:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c750:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c754:	e8 9b ae 01 00       	call   c00275f4 <__divdf3>
c000c759:	83 c4 10             	add    esp,0x10
c000c75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c764:	50                   	push   eax
c000c765:	50                   	push   eax
c000c766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c76a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c76e:	e8 1d b6 01 00       	call   c0027d90 <lrint>
c000c773:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c776:	40                   	inc    eax
c000c777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c77b:	0f af c7             	imul   eax,edi
c000c77e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c785:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c789:	58                   	pop    eax
c000c78a:	5a                   	pop    edx
c000c78b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c78f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c793:	e8 f8 b5 01 00       	call   c0027d90 <lrint>
c000c798:	83 ec 0c             	sub    esp,0xc
c000c79b:	50                   	push   eax
c000c79c:	e8 d2 b1 01 00       	call   c0027973 <__floatsidf>
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7ac:	52                   	push   edx
c000c7ad:	50                   	push   eax
c000c7ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7b6:	e8 29 ab 01 00       	call   c00272e4 <__subdf3>
c000c7bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7c3:	83 c4 20             	add    esp,0x20
c000c7c6:	6a 00                	push   0x0
c000c7c8:	6a 00                	push   0x0
c000c7ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d2:	e8 08 b4 01 00       	call   c0027bdf <__ltdf2>
c000c7d7:	83 c4 10             	add    esp,0x10
c000c7da:	85 c0                	test   eax,eax
c000c7dc:	79 1f                	jns    c000c7fd <sinc_quad_vari_process+0x223>
c000c7de:	68 00 00 f0 3f       	push   0x3ff00000
c000c7e3:	6a 00                	push   0x0
c000c7e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ed:	e8 a1 a4 01 00       	call   c0026c93 <__adddf3>
c000c7f2:	83 c4 10             	add    esp,0x10
c000c7f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7fd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c800:	83 ec 10             	sub    esp,0x10
c000c803:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c807:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c816:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81a:	e8 c5 aa 01 00       	call   c00272e4 <__subdf3>
c000c81f:	83 c4 18             	add    esp,0x18
c000c822:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c826:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c82a:	52                   	push   edx
c000c82b:	50                   	push   eax
c000c82c:	e8 5f b5 01 00       	call   c0027d90 <lrint>
c000c831:	0f af f8             	imul   edi,eax
c000c834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c838:	01 f8                	add    eax,edi
c000c83a:	99                   	cdq    
c000c83b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c83e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c841:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c845:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c849:	68 00 00 f0 3f       	push   0x3ff00000
c000c84e:	6a 00                	push   0x0
c000c850:	e8 9f ad 01 00       	call   c00275f4 <__divdf3>
c000c855:	83 c4 10             	add    esp,0x10
c000c858:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c85c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c860:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c865:	68 23 42 92 0c       	push   0xc924223
c000c86a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	e8 1c a4 01 00       	call   c0026c93 <__adddf3>
c000c877:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c87b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c87f:	83 c4 20             	add    esp,0x20
c000c882:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c88a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c892:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c895:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c898:	7d 50                	jge    c000c8ea <sinc_quad_vari_process+0x310>
c000c89a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c89d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a0:	01 c8                	add    eax,ecx
c000c8a2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a5:	99                   	cdq    
c000c8a6:	f7 f9                	idiv   ecx
c000c8a8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8ac:	7d 0c                	jge    c000c8ba <sinc_quad_vari_process+0x2e0>
c000c8ae:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b1:	85 ff                	test   edi,edi
c000c8b3:	79 6c                	jns    c000c921 <sinc_quad_vari_process+0x347>
c000c8b5:	e9 e7 00 00 00       	jmp    c000c9a1 <sinc_quad_vari_process+0x3c7>
c000c8ba:	50                   	push   eax
c000c8bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bf:	56                   	push   esi
c000c8c0:	53                   	push   ebx
c000c8c1:	e8 11 ee ff ff       	call   c000b6d7 <prepare_data>
c000c8c6:	83 c4 10             	add    esp,0x10
c000c8c9:	89 c2                	mov    edx,eax
c000c8cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8ce:	85 c0                	test   eax,eax
c000c8d0:	0f 85 bf 03 00 00    	jne    c000cc95 <sinc_quad_vari_process+0x6bb>
c000c8d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8dc:	01 c8                	add    eax,ecx
c000c8de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e1:	99                   	cdq    
c000c8e2:	f7 f9                	idiv   ecx
c000c8e4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8e8:	7c c4                	jl     c000c8ae <sinc_quad_vari_process+0x2d4>
c000c8ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8f2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8f5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c900:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c903:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c906:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c909:	99                   	cdq    
c000c90a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c90d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c910:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c913:	99                   	cdq    
c000c914:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c917:	31 d2                	xor    edx,edx
c000c919:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c91c:	e9 74 03 00 00       	jmp    c000cc95 <sinc_quad_vari_process+0x6bb>
c000c921:	83 ec 0c             	sub    esp,0xc
c000c924:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c927:	e8 47 b0 01 00       	call   c0027973 <__floatsidf>
c000c92c:	83 c4 10             	add    esp,0x10
c000c92f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c933:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c937:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c93b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c93f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c947:	e8 47 a3 01 00       	call   c0026c93 <__adddf3>
c000c94c:	83 c4 10             	add    esp,0x10
c000c94f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c953:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c95f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c963:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c967:	e8 27 a3 01 00       	call   c0026c93 <__adddf3>
c000c96c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c977:	e8 f7 af 01 00       	call   c0027973 <__floatsidf>
c000c97c:	83 c4 10             	add    esp,0x10
c000c97f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c983:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c987:	52                   	push   edx
c000c988:	50                   	push   eax
c000c989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c98d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c991:	e8 47 b2 01 00       	call   c0027bdd <__gedf2>
c000c996:	83 c4 10             	add    esp,0x10
c000c999:	85 c0                	test   eax,eax
c000c99b:	0f 89 49 ff ff ff    	jns    c000c8ea <sinc_quad_vari_process+0x310>
c000c9a1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9a5:	0f 8e ef 00 00 00    	jle    c000ca9a <sinc_quad_vari_process+0x4c0>
c000c9ab:	83 ec 10             	sub    esp,0x10
c000c9ae:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9b4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9b7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9ba:	e8 25 a9 01 00       	call   c00272e4 <__subdf3>
c000c9bf:	83 c4 18             	add    esp,0x18
c000c9c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ca:	52                   	push   edx
c000c9cb:	50                   	push   eax
c000c9cc:	e8 9f b3 01 00       	call   c0027d70 <fabs>
c000c9d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d9:	83 c4 10             	add    esp,0x10
c000c9dc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ee:	e8 ce b1 01 00       	call   c0027bc1 <__gtdf2>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	85 c0                	test   eax,eax
c000c9f8:	0f 8e 9c 00 00 00    	jle    c000ca9a <sinc_quad_vari_process+0x4c0>
c000c9fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca01:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca0c:	52                   	push   edx
c000ca0d:	50                   	push   eax
c000ca0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca14:	e8 cb a8 01 00       	call   c00272e4 <__subdf3>
c000ca19:	59                   	pop    ecx
c000ca1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca1e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca22:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca25:	e8 49 af 01 00       	call   c0027973 <__floatsidf>
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca35:	52                   	push   edx
c000ca36:	50                   	push   eax
c000ca37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca3f:	e8 cc a8 01 00       	call   c0027310 <__muldf3>
c000ca44:	5f                   	pop    edi
c000ca45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca49:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca4d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca50:	e8 1e af 01 00       	call   c0027973 <__floatsidf>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca60:	52                   	push   edx
c000ca61:	50                   	push   eax
c000ca62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6a:	e8 85 ab 01 00       	call   c00275f4 <__divdf3>
c000ca6f:	83 c4 10             	add    esp,0x10
c000ca72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8a:	e8 04 a2 01 00       	call   c0026c93 <__adddf3>
c000ca8f:	83 c4 10             	add    esp,0x10
c000ca92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca9a:	83 ec 0c             	sub    esp,0xc
c000ca9d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa0:	e8 ce ae 01 00       	call   c0027973 <__floatsidf>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000caac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	e8 1a b1 01 00       	call   c0027bdf <__ltdf2>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	85 c0                	test   eax,eax
c000caca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cad2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cad6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cada:	78 10                	js     c000caec <sinc_quad_vari_process+0x512>
c000cadc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cae4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cae8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cafc:	e8 0f a8 01 00       	call   c0027310 <__muldf3>
c000cb01:	59                   	pop    ecx
c000cb02:	5f                   	pop    edi
c000cb03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb13:	e8 98 eb ff ff       	call   c000b6b0 <double_to_fp>
c000cb18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb1c:	89 c7                	mov    edi,eax
c000cb1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2a:	e8 e1 a7 01 00       	call   c0027310 <__muldf3>
c000cb2f:	83 c4 18             	add    esp,0x18
c000cb32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb3a:	52                   	push   edx
c000cb3b:	50                   	push   eax
c000cb3c:	e8 6f eb ff ff       	call   c000b6b0 <double_to_fp>
c000cb41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb48:	83 c4 0c             	add    esp,0xc
c000cb4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb4e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb51:	50                   	push   eax
c000cb52:	50                   	push   eax
c000cb53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb56:	e8 18 ae 01 00       	call   c0027973 <__floatsidf>
c000cb5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	e8 7c aa 01 00       	call   c00275f4 <__divdf3>
c000cb78:	83 c4 18             	add    esp,0x18
c000cb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb83:	52                   	push   edx
c000cb84:	89 fa                	mov    edx,edi
c000cb86:	50                   	push   eax
c000cb87:	89 d8                	mov    eax,ebx
c000cb89:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb8d:	e8 a5 d1 ff ff       	call   c0009d37 <calc_output_quad>
c000cb92:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba6:	e8 49 aa 01 00       	call   c00275f4 <__divdf3>
c000cbab:	83 c4 10             	add    esp,0x10
c000cbae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc6:	e8 c8 a0 01 00       	call   c0026c93 <__adddf3>
c000cbcb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbcf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbd3:	83 c4 18             	add    esp,0x18
c000cbd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbde:	e8 ad b1 01 00       	call   c0027d90 <lrint>
c000cbe3:	83 ec 0c             	sub    esp,0xc
c000cbe6:	50                   	push   eax
c000cbe7:	e8 87 ad 01 00       	call   c0027973 <__floatsidf>
c000cbec:	83 c4 10             	add    esp,0x10
c000cbef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbf3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbf7:	52                   	push   edx
c000cbf8:	50                   	push   eax
c000cbf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc01:	e8 de a6 01 00       	call   c00272e4 <__subdf3>
c000cc06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc0e:	83 c4 20             	add    esp,0x20
c000cc11:	6a 00                	push   0x0
c000cc13:	6a 00                	push   0x0
c000cc15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1d:	e8 bd af 01 00       	call   c0027bdf <__ltdf2>
c000cc22:	83 c4 10             	add    esp,0x10
c000cc25:	85 c0                	test   eax,eax
c000cc27:	79 20                	jns    c000cc49 <sinc_quad_vari_process+0x66f>
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc39:	e8 55 a0 01 00       	call   c0026c93 <__adddf3>
c000cc3e:	83 c4 10             	add    esp,0x10
c000cc41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc49:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc4c:	83 ec 10             	sub    esp,0x10
c000cc4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc66:	e8 79 a6 01 00       	call   c00272e4 <__subdf3>
c000cc6b:	83 c4 18             	add    esp,0x18
c000cc6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc76:	52                   	push   edx
c000cc77:	50                   	push   eax
c000cc78:	e8 13 b1 01 00       	call   c0027d90 <lrint>
c000cc7d:	0f af f8             	imul   edi,eax
c000cc80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	01 f8                	add    eax,edi
c000cc89:	99                   	cdq    
c000cc8a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc8d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc90:	e9 fd fb ff ff       	jmp    c000c892 <sinc_quad_vari_process+0x2b8>
c000cc95:	83 c4 4c             	add    esp,0x4c
c000cc98:	89 d0                	mov    eax,edx
c000cc9a:	5b                   	pop    ebx
c000cc9b:	5e                   	pop    esi
c000cc9c:	5f                   	pop    edi
c000cc9d:	5d                   	pop    ebp
c000cc9e:	c3                   	ret    

c000cc9f <sinc_stereo_vari_process>:
c000cc9f:	55                   	push   ebp
c000cca0:	ba 05 00 00 00       	mov    edx,0x5
c000cca5:	57                   	push   edi
c000cca6:	56                   	push   esi
c000cca7:	53                   	push   ebx
c000cca8:	83 ec 4c             	sub    esp,0x4c
c000ccab:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccaf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccb3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccb6:	85 db                	test   ebx,ebx
c000ccb8:	0f 84 9c 06 00 00    	je     c000d35a <sinc_stereo_vari_process+0x6bb>
c000ccbe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ccc4:	0f af c7             	imul   eax,edi
c000ccc7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccca:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cccd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccd4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccdb:	0f af c7             	imul   eax,edi
c000ccde:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cce4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cce7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccef:	68 00 00 70 3f       	push   0x3f700000
c000ccf4:	6a 00                	push   0x0
c000ccf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfe:	e8 dc ae 01 00       	call   c0027bdf <__ltdf2>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	ba 16 00 00 00       	mov    edx,0x16
c000cd0b:	85 c0                	test   eax,eax
c000cd0d:	0f 88 47 06 00 00    	js     c000d35a <sinc_stereo_vari_process+0x6bb>
c000cd13:	68 00 00 70 40       	push   0x40700000
c000cd18:	6a 00                	push   0x0
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd22:	e8 9a ae 01 00       	call   c0027bc1 <__gtdf2>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	ba 16 00 00 00       	mov    edx,0x16
c000cd2f:	85 c0                	test   eax,eax
c000cd31:	0f 8f 23 06 00 00    	jg     c000d35a <sinc_stereo_vari_process+0x6bb>
c000cd37:	83 ec 0c             	sub    esp,0xc
c000cd3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd3d:	e8 31 ac 01 00       	call   c0027973 <__floatsidf>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd4d:	68 00 00 00 40       	push   0x40000000
c000cd52:	6a 00                	push   0x0
c000cd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd5c:	e8 32 9f 01 00       	call   c0026c93 <__adddf3>
c000cd61:	59                   	pop    ecx
c000cd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd6a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd6d:	e8 01 ac 01 00       	call   c0027973 <__floatsidf>
c000cd72:	83 c4 10             	add    esp,0x10
c000cd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd7d:	52                   	push   edx
c000cd7e:	50                   	push   eax
c000cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd87:	e8 68 a8 01 00       	call   c00275f4 <__divdf3>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd97:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd9a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cda5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	e8 07 ae 01 00       	call   c0027bc1 <__gtdf2>
c000cdba:	83 c4 10             	add    esp,0x10
c000cdbd:	85 c0                	test   eax,eax
c000cdbf:	7e 2d                	jle    c000cdee <sinc_stereo_vari_process+0x14f>
c000cdc1:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc6:	6a 00                	push   0x0
c000cdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd0:	e8 0a ae 01 00       	call   c0027bdf <__ltdf2>
c000cdd5:	83 c4 10             	add    esp,0x10
c000cdd8:	85 c0                	test   eax,eax
c000cdda:	79 4d                	jns    c000ce29 <sinc_stereo_vari_process+0x18a>
c000cddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cde4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cde8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdec:	eb 1b                	jmp    c000ce09 <sinc_stereo_vari_process+0x16a>
c000cdee:	68 00 00 f0 3f       	push   0x3ff00000
c000cdf3:	6a 00                	push   0x0
c000cdf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfd:	e8 dd ad 01 00       	call   c0027bdf <__ltdf2>
c000ce02:	83 c4 10             	add    esp,0x10
c000ce05:	85 c0                	test   eax,eax
c000ce07:	79 20                	jns    c000ce29 <sinc_stereo_vari_process+0x18a>
c000ce09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce19:	e8 d6 a7 01 00       	call   c00275f4 <__divdf3>
c000ce1e:	83 c4 10             	add    esp,0x10
c000ce21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce29:	50                   	push   eax
c000ce2a:	50                   	push   eax
c000ce2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce33:	e8 58 af 01 00       	call   c0027d90 <lrint>
c000ce38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce3b:	40                   	inc    eax
c000ce3c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce40:	0f af c7             	imul   eax,edi
c000ce43:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4e:	58                   	pop    eax
c000ce4f:	5a                   	pop    edx
c000ce50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce58:	e8 33 af 01 00       	call   c0027d90 <lrint>
c000ce5d:	83 ec 0c             	sub    esp,0xc
c000ce60:	50                   	push   eax
c000ce61:	e8 0d ab 01 00       	call   c0027973 <__floatsidf>
c000ce66:	83 c4 10             	add    esp,0x10
c000ce69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce71:	52                   	push   edx
c000ce72:	50                   	push   eax
c000ce73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7b:	e8 64 a4 01 00       	call   c00272e4 <__subdf3>
c000ce80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce88:	83 c4 20             	add    esp,0x20
c000ce8b:	6a 00                	push   0x0
c000ce8d:	6a 00                	push   0x0
c000ce8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce97:	e8 43 ad 01 00       	call   c0027bdf <__ltdf2>
c000ce9c:	83 c4 10             	add    esp,0x10
c000ce9f:	85 c0                	test   eax,eax
c000cea1:	79 1f                	jns    c000cec2 <sinc_stereo_vari_process+0x223>
c000cea3:	68 00 00 f0 3f       	push   0x3ff00000
c000cea8:	6a 00                	push   0x0
c000ceaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb2:	e8 dc 9d 01 00       	call   c0026c93 <__adddf3>
c000ceb7:	83 c4 10             	add    esp,0x10
c000ceba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cec5:	83 ec 10             	sub    esp,0x10
c000cec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cecc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cedb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cedf:	e8 00 a4 01 00       	call   c00272e4 <__subdf3>
c000cee4:	83 c4 18             	add    esp,0x18
c000cee7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceef:	52                   	push   edx
c000cef0:	50                   	push   eax
c000cef1:	e8 9a ae 01 00       	call   c0027d90 <lrint>
c000cef6:	0f af f8             	imul   edi,eax
c000cef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cefd:	01 f8                	add    eax,edi
c000ceff:	99                   	cdq    
c000cf00:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf03:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0e:	68 00 00 f0 3f       	push   0x3ff00000
c000cf13:	6a 00                	push   0x0
c000cf15:	e8 da a6 01 00       	call   c00275f4 <__divdf3>
c000cf1a:	83 c4 10             	add    esp,0x10
c000cf1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf25:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf2a:	68 23 42 92 0c       	push   0xc924223
c000cf2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	e8 57 9d 01 00       	call   c0026c93 <__adddf3>
c000cf3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf44:	83 c4 20             	add    esp,0x20
c000cf47:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf4f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf5a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf5d:	7d 50                	jge    c000cfaf <sinc_stereo_vari_process+0x310>
c000cf5f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf62:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf65:	01 c8                	add    eax,ecx
c000cf67:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf6a:	99                   	cdq    
c000cf6b:	f7 f9                	idiv   ecx
c000cf6d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf71:	7d 0c                	jge    c000cf7f <sinc_stereo_vari_process+0x2e0>
c000cf73:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf76:	85 ff                	test   edi,edi
c000cf78:	79 6c                	jns    c000cfe6 <sinc_stereo_vari_process+0x347>
c000cf7a:	e9 e7 00 00 00       	jmp    c000d066 <sinc_stereo_vari_process+0x3c7>
c000cf7f:	50                   	push   eax
c000cf80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf84:	56                   	push   esi
c000cf85:	53                   	push   ebx
c000cf86:	e8 4c e7 ff ff       	call   c000b6d7 <prepare_data>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	89 c2                	mov    edx,eax
c000cf90:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf93:	85 c0                	test   eax,eax
c000cf95:	0f 85 bf 03 00 00    	jne    c000d35a <sinc_stereo_vari_process+0x6bb>
c000cf9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf9e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa1:	01 c8                	add    eax,ecx
c000cfa3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfa6:	99                   	cdq    
c000cfa7:	f7 f9                	idiv   ecx
c000cfa9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfad:	7c c4                	jl     c000cf73 <sinc_stereo_vari_process+0x2d4>
c000cfaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfb7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfba:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfc8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfcb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfce:	99                   	cdq    
c000cfcf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfd2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfd5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfd8:	99                   	cdq    
c000cfd9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfdc:	31 d2                	xor    edx,edx
c000cfde:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe1:	e9 74 03 00 00       	jmp    c000d35a <sinc_stereo_vari_process+0x6bb>
c000cfe6:	83 ec 0c             	sub    esp,0xc
c000cfe9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfec:	e8 82 a9 01 00       	call   c0027973 <__floatsidf>
c000cff1:	83 c4 10             	add    esp,0x10
c000cff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cff8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cffc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d000:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d00c:	e8 82 9c 01 00       	call   c0026c93 <__adddf3>
c000d011:	83 c4 10             	add    esp,0x10
c000d014:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d018:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d01c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d020:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d02c:	e8 62 9c 01 00       	call   c0026c93 <__adddf3>
c000d031:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d034:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d038:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d03c:	e8 32 a9 01 00       	call   c0027973 <__floatsidf>
c000d041:	83 c4 10             	add    esp,0x10
c000d044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04c:	52                   	push   edx
c000d04d:	50                   	push   eax
c000d04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d056:	e8 82 ab 01 00       	call   c0027bdd <__gedf2>
c000d05b:	83 c4 10             	add    esp,0x10
c000d05e:	85 c0                	test   eax,eax
c000d060:	0f 89 49 ff ff ff    	jns    c000cfaf <sinc_stereo_vari_process+0x310>
c000d066:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d06a:	0f 8e ef 00 00 00    	jle    c000d15f <sinc_stereo_vari_process+0x4c0>
c000d070:	83 ec 10             	sub    esp,0x10
c000d073:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d076:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d079:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d07c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d07f:	e8 60 a2 01 00       	call   c00272e4 <__subdf3>
c000d084:	83 c4 18             	add    esp,0x18
c000d087:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d08b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08f:	52                   	push   edx
c000d090:	50                   	push   eax
c000d091:	e8 da ac 01 00       	call   c0027d70 <fabs>
c000d096:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d09a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d09e:	83 c4 10             	add    esp,0x10
c000d0a1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0a6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b3:	e8 09 ab 01 00       	call   c0027bc1 <__gtdf2>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	85 c0                	test   eax,eax
c000d0bd:	0f 8e 9c 00 00 00    	jle    c000d15f <sinc_stereo_vari_process+0x4c0>
c000d0c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d1:	52                   	push   edx
c000d0d2:	50                   	push   eax
c000d0d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0d6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0d9:	e8 06 a2 01 00       	call   c00272e4 <__subdf3>
c000d0de:	59                   	pop    ecx
c000d0df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0e3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0ea:	e8 84 a8 01 00       	call   c0027973 <__floatsidf>
c000d0ef:	83 c4 10             	add    esp,0x10
c000d0f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0fa:	52                   	push   edx
c000d0fb:	50                   	push   eax
c000d0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d104:	e8 07 a2 01 00       	call   c0027310 <__muldf3>
c000d109:	5f                   	pop    edi
c000d10a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d10e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d112:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d115:	e8 59 a8 01 00       	call   c0027973 <__floatsidf>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d121:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d125:	52                   	push   edx
c000d126:	50                   	push   eax
c000d127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d12b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d12f:	e8 c0 a4 01 00       	call   c00275f4 <__divdf3>
c000d134:	83 c4 10             	add    esp,0x10
c000d137:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d13b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d147:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d14b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d14f:	e8 3f 9b 01 00       	call   c0026c93 <__adddf3>
c000d154:	83 c4 10             	add    esp,0x10
c000d157:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d15b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d15f:	83 ec 0c             	sub    esp,0xc
c000d162:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d165:	e8 09 a8 01 00       	call   c0027973 <__floatsidf>
c000d16a:	83 c4 10             	add    esp,0x10
c000d16d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d171:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	e8 55 aa 01 00       	call   c0027bdf <__ltdf2>
c000d18a:	83 c4 10             	add    esp,0x10
c000d18d:	85 c0                	test   eax,eax
c000d18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d193:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d19b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d19f:	78 10                	js     c000d1b1 <sinc_stereo_vari_process+0x512>
c000d1a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c1:	e8 4a a1 01 00       	call   c0027310 <__muldf3>
c000d1c6:	59                   	pop    ecx
c000d1c7:	5f                   	pop    edi
c000d1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1d8:	e8 d3 e4 ff ff       	call   c000b6b0 <double_to_fp>
c000d1dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e1:	89 c7                	mov    edi,eax
c000d1e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ef:	e8 1c a1 01 00       	call   c0027310 <__muldf3>
c000d1f4:	83 c4 18             	add    esp,0x18
c000d1f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ff:	52                   	push   edx
c000d200:	50                   	push   eax
c000d201:	e8 aa e4 ff ff       	call   c000b6b0 <double_to_fp>
c000d206:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d209:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d20d:	83 c4 0c             	add    esp,0xc
c000d210:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d213:	8d 04 90             	lea    eax,[eax+edx*4]
c000d216:	50                   	push   eax
c000d217:	50                   	push   eax
c000d218:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d21b:	e8 53 a7 01 00       	call   c0027973 <__floatsidf>
c000d220:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d224:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d228:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d22c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	e8 b7 a3 01 00       	call   c00275f4 <__divdf3>
c000d23d:	83 c4 18             	add    esp,0x18
c000d240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d248:	52                   	push   edx
c000d249:	89 fa                	mov    edx,edi
c000d24b:	50                   	push   eax
c000d24c:	89 d8                	mov    eax,ebx
c000d24e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d252:	e8 02 c7 ff ff       	call   c0009959 <calc_output_stereo>
c000d257:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d25f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26b:	e8 84 a3 01 00       	call   c00275f4 <__divdf3>
c000d270:	83 c4 10             	add    esp,0x10
c000d273:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d277:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d27b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d287:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28b:	e8 03 9a 01 00       	call   c0026c93 <__adddf3>
c000d290:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d294:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d298:	83 c4 18             	add    esp,0x18
c000d29b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d29f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a3:	e8 e8 aa 01 00       	call   c0027d90 <lrint>
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	50                   	push   eax
c000d2ac:	e8 c2 a6 01 00       	call   c0027973 <__floatsidf>
c000d2b1:	83 c4 10             	add    esp,0x10
c000d2b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2bc:	52                   	push   edx
c000d2bd:	50                   	push   eax
c000d2be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2c6:	e8 19 a0 01 00       	call   c00272e4 <__subdf3>
c000d2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d3:	83 c4 20             	add    esp,0x20
c000d2d6:	6a 00                	push   0x0
c000d2d8:	6a 00                	push   0x0
c000d2da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e2:	e8 f8 a8 01 00       	call   c0027bdf <__ltdf2>
c000d2e7:	83 c4 10             	add    esp,0x10
c000d2ea:	85 c0                	test   eax,eax
c000d2ec:	79 20                	jns    c000d30e <sinc_stereo_vari_process+0x66f>
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2fe:	e8 90 99 01 00       	call   c0026c93 <__adddf3>
c000d303:	83 c4 10             	add    esp,0x10
c000d306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d30a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d30e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d311:	83 ec 10             	sub    esp,0x10
c000d314:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d318:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d31b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d323:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d327:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32b:	e8 b4 9f 01 00       	call   c00272e4 <__subdf3>
c000d330:	83 c4 18             	add    esp,0x18
c000d333:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33b:	52                   	push   edx
c000d33c:	50                   	push   eax
c000d33d:	e8 4e aa 01 00       	call   c0027d90 <lrint>
c000d342:	0f af f8             	imul   edi,eax
c000d345:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	01 f8                	add    eax,edi
c000d34e:	99                   	cdq    
c000d34f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d352:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d355:	e9 fd fb ff ff       	jmp    c000cf57 <sinc_stereo_vari_process+0x2b8>
c000d35a:	83 c4 4c             	add    esp,0x4c
c000d35d:	89 d0                	mov    eax,edx
c000d35f:	5b                   	pop    ebx
c000d360:	5e                   	pop    esi
c000d361:	5f                   	pop    edi
c000d362:	5d                   	pop    ebp
c000d363:	c3                   	ret    

c000d364 <sinc_mono_vari_process>:
c000d364:	55                   	push   ebp
c000d365:	ba 05 00 00 00       	mov    edx,0x5
c000d36a:	57                   	push   edi
c000d36b:	56                   	push   esi
c000d36c:	53                   	push   ebx
c000d36d:	83 ec 4c             	sub    esp,0x4c
c000d370:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d374:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d378:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d37b:	85 db                	test   ebx,ebx
c000d37d:	0f 84 c1 06 00 00    	je     c000da44 <sinc_mono_vari_process+0x6e0>
c000d383:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d386:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d389:	0f af c7             	imul   eax,edi
c000d38c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d38f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d392:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d399:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a0:	0f af c7             	imul   eax,edi
c000d3a3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3a6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3b7:	68 00 00 70 3f       	push   0x3f700000
c000d3bc:	6a 00                	push   0x0
c000d3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c6:	e8 14 a8 01 00       	call   c0027bdf <__ltdf2>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	ba 16 00 00 00       	mov    edx,0x16
c000d3d3:	85 c0                	test   eax,eax
c000d3d5:	0f 88 69 06 00 00    	js     c000da44 <sinc_mono_vari_process+0x6e0>
c000d3db:	68 00 00 70 40       	push   0x40700000
c000d3e0:	6a 00                	push   0x0
c000d3e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ea:	e8 d2 a7 01 00       	call   c0027bc1 <__gtdf2>
c000d3ef:	83 c4 10             	add    esp,0x10
c000d3f2:	ba 16 00 00 00       	mov    edx,0x16
c000d3f7:	85 c0                	test   eax,eax
c000d3f9:	0f 8f 45 06 00 00    	jg     c000da44 <sinc_mono_vari_process+0x6e0>
c000d3ff:	83 ec 0c             	sub    esp,0xc
c000d402:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d405:	e8 69 a5 01 00       	call   c0027973 <__floatsidf>
c000d40a:	83 c4 10             	add    esp,0x10
c000d40d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d415:	68 00 00 00 40       	push   0x40000000
c000d41a:	6a 00                	push   0x0
c000d41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d424:	e8 6a 98 01 00       	call   c0026c93 <__adddf3>
c000d429:	59                   	pop    ecx
c000d42a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d42e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d432:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d435:	e8 39 a5 01 00       	call   c0027973 <__floatsidf>
c000d43a:	83 c4 10             	add    esp,0x10
c000d43d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d441:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d445:	52                   	push   edx
c000d446:	50                   	push   eax
c000d447:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44f:	e8 a0 a1 01 00       	call   c00275f4 <__divdf3>
c000d454:	83 c4 10             	add    esp,0x10
c000d457:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d45b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d45f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d462:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d465:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	e8 3f a7 01 00       	call   c0027bc1 <__gtdf2>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	85 c0                	test   eax,eax
c000d487:	7e 2d                	jle    c000d4b6 <sinc_mono_vari_process+0x152>
c000d489:	68 00 00 f0 3f       	push   0x3ff00000
c000d48e:	6a 00                	push   0x0
c000d490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d498:	e8 42 a7 01 00       	call   c0027bdf <__ltdf2>
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	85 c0                	test   eax,eax
c000d4a2:	79 4d                	jns    c000d4f1 <sinc_mono_vari_process+0x18d>
c000d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4b4:	eb 1b                	jmp    c000d4d1 <sinc_mono_vari_process+0x16d>
c000d4b6:	68 00 00 f0 3f       	push   0x3ff00000
c000d4bb:	6a 00                	push   0x0
c000d4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c5:	e8 15 a7 01 00       	call   c0027bdf <__ltdf2>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	85 c0                	test   eax,eax
c000d4cf:	79 20                	jns    c000d4f1 <sinc_mono_vari_process+0x18d>
c000d4d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	e8 0e a1 01 00       	call   c00275f4 <__divdf3>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f1:	50                   	push   eax
c000d4f2:	50                   	push   eax
c000d4f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fb:	e8 90 a8 01 00       	call   c0027d90 <lrint>
c000d500:	40                   	inc    eax
c000d501:	0f af c7             	imul   eax,edi
c000d504:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d508:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d50c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d50f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d516:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51a:	58                   	pop    eax
c000d51b:	5a                   	pop    edx
c000d51c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d520:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d524:	e8 67 a8 01 00       	call   c0027d90 <lrint>
c000d529:	83 ec 0c             	sub    esp,0xc
c000d52c:	50                   	push   eax
c000d52d:	e8 41 a4 01 00       	call   c0027973 <__floatsidf>
c000d532:	83 c4 10             	add    esp,0x10
c000d535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d539:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d53d:	52                   	push   edx
c000d53e:	50                   	push   eax
c000d53f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d543:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d547:	e8 98 9d 01 00       	call   c00272e4 <__subdf3>
c000d54c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d550:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d554:	83 c4 20             	add    esp,0x20
c000d557:	6a 00                	push   0x0
c000d559:	6a 00                	push   0x0
c000d55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d563:	e8 77 a6 01 00       	call   c0027bdf <__ltdf2>
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	85 c0                	test   eax,eax
c000d56d:	79 1f                	jns    c000d58e <sinc_mono_vari_process+0x22a>
c000d56f:	68 00 00 f0 3f       	push   0x3ff00000
c000d574:	6a 00                	push   0x0
c000d576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d57e:	e8 10 97 01 00       	call   c0026c93 <__adddf3>
c000d583:	83 c4 10             	add    esp,0x10
c000d586:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d58a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d58e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d591:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d594:	83 ec 10             	sub    esp,0x10
c000d597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a7:	e8 38 9d 01 00       	call   c00272e4 <__subdf3>
c000d5ac:	83 c4 18             	add    esp,0x18
c000d5af:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5b7:	52                   	push   edx
c000d5b8:	50                   	push   eax
c000d5b9:	e8 d2 a7 01 00       	call   c0027d90 <lrint>
c000d5be:	0f af f8             	imul   edi,eax
c000d5c1:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5c4:	31 ff                	xor    edi,edi
c000d5c6:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5cb:	99                   	cdq    
c000d5cc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5da:	55                   	push   ebp
c000d5db:	57                   	push   edi
c000d5dc:	e8 13 a0 01 00       	call   c00275f4 <__divdf3>
c000d5e1:	83 c4 10             	add    esp,0x10
c000d5e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f1:	68 23 42 92 0c       	push   0xc924223
c000d5f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fe:	e8 90 96 01 00       	call   c0026c93 <__adddf3>
c000d603:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d607:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d60b:	83 c4 20             	add    esp,0x20
c000d60e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d612:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d616:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d619:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d61c:	7d 54                	jge    c000d672 <sinc_mono_vari_process+0x30e>
c000d61e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d621:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d624:	01 c8                	add    eax,ecx
c000d626:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d629:	99                   	cdq    
c000d62a:	f7 f9                	idiv   ecx
c000d62c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d630:	7d 0c                	jge    c000d63e <sinc_mono_vari_process+0x2da>
c000d632:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d635:	85 ff                	test   edi,edi
c000d637:	79 73                	jns    c000d6ac <sinc_mono_vari_process+0x348>
c000d639:	e9 ee 00 00 00       	jmp    c000d72c <sinc_mono_vari_process+0x3c8>
c000d63e:	50                   	push   eax
c000d63f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d643:	56                   	push   esi
c000d644:	53                   	push   ebx
c000d645:	e8 8d e0 ff ff       	call   c000b6d7 <prepare_data>
c000d64a:	89 c2                	mov    edx,eax
c000d64c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d650:	83 c4 10             	add    esp,0x10
c000d653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d656:	85 d2                	test   edx,edx
c000d658:	0f 85 e6 03 00 00    	jne    c000da44 <sinc_mono_vari_process+0x6e0>
c000d65e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d661:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d664:	01 c8                	add    eax,ecx
c000d666:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d669:	99                   	cdq    
c000d66a:	f7 f9                	idiv   ecx
c000d66c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d670:	7c c0                	jl     c000d632 <sinc_mono_vari_process+0x2ce>
c000d672:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d67a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d67e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d681:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d68c:	89 01                	mov    DWORD PTR [ecx],eax
c000d68e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d691:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d694:	99                   	cdq    
c000d695:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d698:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d69b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d69e:	99                   	cdq    
c000d69f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a2:	31 d2                	xor    edx,edx
c000d6a4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6a7:	e9 98 03 00 00       	jmp    c000da44 <sinc_mono_vari_process+0x6e0>
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6b2:	e8 bc a2 01 00       	call   c0027973 <__floatsidf>
c000d6b7:	83 c4 10             	add    esp,0x10
c000d6ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d2:	e8 bc 95 01 00       	call   c0026c93 <__adddf3>
c000d6d7:	83 c4 10             	add    esp,0x10
c000d6da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f2:	e8 9c 95 01 00       	call   c0026c93 <__adddf3>
c000d6f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6fe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d702:	e8 6c a2 01 00       	call   c0027973 <__floatsidf>
c000d707:	83 c4 10             	add    esp,0x10
c000d70a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d70e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d712:	52                   	push   edx
c000d713:	50                   	push   eax
c000d714:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d718:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d71c:	e8 a0 a4 01 00       	call   c0027bc1 <__gtdf2>
c000d721:	83 c4 10             	add    esp,0x10
c000d724:	85 c0                	test   eax,eax
c000d726:	0f 8f 46 ff ff ff    	jg     c000d672 <sinc_mono_vari_process+0x30e>
c000d72c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d730:	0f 8e f5 00 00 00    	jle    c000d82b <sinc_mono_vari_process+0x4c7>
c000d736:	83 ec 10             	sub    esp,0x10
c000d739:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d73c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d73f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d743:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d746:	ff 30                	push   DWORD PTR [eax]
c000d748:	e8 97 9b 01 00       	call   c00272e4 <__subdf3>
c000d74d:	83 c4 18             	add    esp,0x18
c000d750:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d754:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d758:	52                   	push   edx
c000d759:	50                   	push   eax
c000d75a:	e8 11 a6 01 00       	call   c0027d70 <fabs>
c000d75f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d763:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d76f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d774:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d778:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d77c:	e8 40 a4 01 00       	call   c0027bc1 <__gtdf2>
c000d781:	83 c4 10             	add    esp,0x10
c000d784:	85 c0                	test   eax,eax
c000d786:	0f 8e 9f 00 00 00    	jle    c000d82b <sinc_mono_vari_process+0x4c7>
c000d78c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d790:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d793:	8b 00                	mov    eax,DWORD PTR [eax]
c000d795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d799:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d79d:	52                   	push   edx
c000d79e:	50                   	push   eax
c000d79f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7a5:	e8 3a 9b 01 00       	call   c00272e4 <__subdf3>
c000d7aa:	5f                   	pop    edi
c000d7ab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7af:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7b6:	e8 b8 a1 01 00       	call   c0027973 <__floatsidf>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c6:	52                   	push   edx
c000d7c7:	50                   	push   eax
c000d7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d0:	e8 3b 9b 01 00       	call   c0027310 <__muldf3>
c000d7d5:	5d                   	pop    ebp
c000d7d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7de:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e1:	e8 8d a1 01 00       	call   c0027973 <__floatsidf>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f1:	52                   	push   edx
c000d7f2:	50                   	push   eax
c000d7f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fb:	e8 f4 9d 01 00       	call   c00275f4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d813:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d817:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81b:	e8 73 94 01 00       	call   c0026c93 <__adddf3>
c000d820:	83 c4 10             	add    esp,0x10
c000d823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d827:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d82b:	83 ec 0c             	sub    esp,0xc
c000d82e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d831:	e8 3d a1 01 00       	call   c0027973 <__floatsidf>
c000d836:	83 c4 10             	add    esp,0x10
c000d839:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d83d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	e8 89 a3 01 00       	call   c0027bdf <__ltdf2>
c000d856:	83 c4 10             	add    esp,0x10
c000d859:	85 c0                	test   eax,eax
c000d85b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d85f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d863:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d867:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d86b:	78 10                	js     c000d87d <sinc_mono_vari_process+0x519>
c000d86d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d871:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d875:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d879:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d885:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d889:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d88d:	e8 7e 9a 01 00       	call   c0027310 <__muldf3>
c000d892:	59                   	pop    ecx
c000d893:	5f                   	pop    edi
c000d894:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d898:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d89c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a4:	e8 07 de ff ff       	call   c000b6b0 <double_to_fp>
c000d8a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8ad:	89 c7                	mov    edi,eax
c000d8af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bb:	e8 50 9a 01 00       	call   c0027310 <__muldf3>
c000d8c0:	83 c4 18             	add    esp,0x18
c000d8c3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8c7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8cb:	52                   	push   edx
c000d8cc:	50                   	push   eax
c000d8cd:	e8 de dd ff ff       	call   c000b6b0 <double_to_fp>
c000d8d2:	83 ec 0c             	sub    esp,0xc
c000d8d5:	89 c5                	mov    ebp,eax
c000d8d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8da:	e8 94 a0 01 00       	call   c0027973 <__floatsidf>
c000d8df:	83 c4 10             	add    esp,0x10
c000d8e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8e6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8ea:	52                   	push   edx
c000d8eb:	50                   	push   eax
c000d8ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f4:	e8 fb 9c 01 00       	call   c00275f4 <__divdf3>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	89 e9                	mov    ecx,ebp
c000d8fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d902:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d906:	89 d8                	mov    eax,ebx
c000d908:	89 fa                	mov    edx,edi
c000d90a:	e8 ee bd ff ff       	call   c00096fd <calc_output_single>
c000d90f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d912:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d919:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d91d:	52                   	push   edx
c000d91e:	50                   	push   eax
c000d91f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d923:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d927:	e8 e4 99 01 00       	call   c0027310 <__muldf3>
c000d92c:	59                   	pop    ecx
c000d92d:	59                   	pop    ecx
c000d92e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d932:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d936:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93e:	e8 a0 a2 01 00       	call   c0027be3 <__truncdfsf2>
c000d943:	83 c4 10             	add    esp,0x10
c000d946:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d949:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d950:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d954:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d958:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95c:	e8 93 9c 01 00       	call   c00275f4 <__divdf3>
c000d961:	83 c4 10             	add    esp,0x10
c000d964:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d968:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d96c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d974:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d978:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d97c:	e8 12 93 01 00       	call   c0026c93 <__adddf3>
c000d981:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d985:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d989:	83 c4 18             	add    esp,0x18
c000d98c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d990:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d994:	e8 f7 a3 01 00       	call   c0027d90 <lrint>
c000d999:	83 ec 0c             	sub    esp,0xc
c000d99c:	50                   	push   eax
c000d99d:	e8 d1 9f 01 00       	call   c0027973 <__floatsidf>
c000d9a2:	83 c4 10             	add    esp,0x10
c000d9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9ad:	52                   	push   edx
c000d9ae:	50                   	push   eax
c000d9af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b7:	e8 28 99 01 00       	call   c00272e4 <__subdf3>
c000d9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9c4:	83 c4 20             	add    esp,0x20
c000d9c7:	6a 00                	push   0x0
c000d9c9:	6a 00                	push   0x0
c000d9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d3:	e8 07 a2 01 00       	call   c0027bdf <__ltdf2>
c000d9d8:	83 c4 10             	add    esp,0x10
c000d9db:	85 c0                	test   eax,eax
c000d9dd:	79 20                	jns    c000d9ff <sinc_mono_vari_process+0x69b>
c000d9df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ef:	e8 9f 92 01 00       	call   c0026c93 <__adddf3>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ff:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da02:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da05:	83 ec 10             	sub    esp,0x10
c000da08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da18:	e8 c7 98 01 00       	call   c00272e4 <__subdf3>
c000da1d:	83 c4 18             	add    esp,0x18
c000da20:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da28:	52                   	push   edx
c000da29:	50                   	push   eax
c000da2a:	e8 61 a3 01 00       	call   c0027d90 <lrint>
c000da2f:	83 c4 10             	add    esp,0x10
c000da32:	0f af f8             	imul   edi,eax
c000da35:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da38:	99                   	cdq    
c000da39:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da3c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da3f:	e9 d2 fb ff ff       	jmp    c000d616 <sinc_mono_vari_process+0x2b2>
c000da44:	83 c4 4c             	add    esp,0x4c
c000da47:	89 d0                	mov    eax,edx
c000da49:	5b                   	pop    ebx
c000da4a:	5e                   	pop    esi
c000da4b:	5f                   	pop    edi
c000da4c:	5d                   	pop    ebp
c000da4d:	c3                   	ret    

c000da4e <sinc_get_name>:
c000da4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da52:	31 c0                	xor    eax,eax
c000da54:	83 fa 02             	cmp    edx,0x2
c000da57:	77 07                	ja     c000da60 <sinc_get_name+0x12>
c000da59:	8b 04 95 84 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a7c]
c000da60:	c3                   	ret    

c000da61 <sinc_get_description>:
c000da61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da65:	31 c0                	xor    eax,eax
c000da67:	83 fa 02             	cmp    edx,0x2
c000da6a:	77 07                	ja     c000da73 <sinc_get_description+0x12>
c000da6c:	8b 04 95 78 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a88]
c000da73:	c3                   	ret    

c000da74 <sinc_set_converter>:
c000da74:	53                   	push   ebx
c000da75:	81 ec 58 08 00 00    	sub    esp,0x858
c000da7b:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da85:	85 c0                	test   eax,eax
c000da87:	74 13                	je     c000da9c <sinc_set_converter+0x28>
c000da89:	83 ec 0c             	sub    esp,0xc
c000da8c:	50                   	push   eax
c000da8d:	e8 9a 1b 00 00       	call   c000f62c <free>
c000da92:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	50                   	push   eax
c000da9d:	68 44 08 00 00       	push   0x844
c000daa2:	6a 00                	push   0x0
c000daa4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000daa8:	50                   	push   eax
c000daa9:	e8 0e 2c ff ff       	call   c00006bc <memset>
c000daae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	b8 0b 00 00 00       	mov    eax,0xb
c000dab9:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dabf:	7f 6e                	jg     c000db2f <sinc_set_converter+0xbb>
c000dac1:	83 fa 01             	cmp    edx,0x1
c000dac4:	75 10                	jne    c000dad6 <sinc_set_converter+0x62>
c000dac6:	c7 43 24 64 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d364
c000dacd:	c7 43 20 64 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d364
c000dad4:	eb 4d                	jmp    c000db23 <sinc_set_converter+0xaf>
c000dad6:	83 fa 02             	cmp    edx,0x2
c000dad9:	75 10                	jne    c000daeb <sinc_set_converter+0x77>
c000dadb:	c7 43 24 9f cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc9f
c000dae2:	c7 43 20 9f cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc9f
c000dae9:	eb 38                	jmp    c000db23 <sinc_set_converter+0xaf>
c000daeb:	83 fa 04             	cmp    edx,0x4
c000daee:	75 10                	jne    c000db00 <sinc_set_converter+0x8c>
c000daf0:	c7 43 24 da c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5da
c000daf7:	c7 43 20 da c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5da
c000dafe:	eb 23                	jmp    c000db23 <sinc_set_converter+0xaf>
c000db00:	83 fa 06             	cmp    edx,0x6
c000db03:	75 10                	jne    c000db15 <sinc_set_converter+0xa1>
c000db05:	c7 43 24 15 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf15
c000db0c:	c7 43 20 15 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf15
c000db13:	eb 0e                	jmp    c000db23 <sinc_set_converter+0xaf>
c000db15:	c7 43 24 51 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b851
c000db1c:	c7 43 20 51 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b851
c000db23:	c7 43 28 04 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab04
c000db2a:	b8 0a 00 00 00       	mov    eax,0xa
c000db2f:	81 c4 58 08 00 00    	add    esp,0x858
c000db35:	5b                   	pop    ebx
c000db36:	c3                   	ret    

c000db37 <zoh_vari_process>:
c000db37:	55                   	push   ebp
c000db38:	31 d2                	xor    edx,edx
c000db3a:	57                   	push   edi
c000db3b:	56                   	push   esi
c000db3c:	53                   	push   ebx
c000db3d:	83 ec 3c             	sub    esp,0x3c
c000db40:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db44:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db48:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db4c:	0f 8e 80 06 00 00    	jle    c000e1d2 <zoh_vari_process+0x69b>
c000db52:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db55:	ba 05 00 00 00       	mov    edx,0x5
c000db5a:	85 db                	test   ebx,ebx
c000db5c:	0f 84 70 06 00 00    	je     c000e1d2 <zoh_vari_process+0x69b>
c000db62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db65:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db69:	74 19                	je     c000db84 <zoh_vari_process+0x4d>
c000db6b:	31 d2                	xor    edx,edx
c000db6d:	39 c2                	cmp    edx,eax
c000db6f:	7d 0c                	jge    c000db7d <zoh_vari_process+0x46>
c000db71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db73:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db76:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db7a:	42                   	inc    edx
c000db7b:	eb f0                	jmp    c000db6d <zoh_vari_process+0x36>
c000db7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db84:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db87:	0f af d0             	imul   edx,eax
c000db8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db8d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db91:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db98:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db9b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dba2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dba5:	8b 07                	mov    eax,DWORD PTR [edi]
c000dba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbaf:	68 00 00 70 3f       	push   0x3f700000
c000dbb4:	6a 00                	push   0x0
c000dbb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbbe:	e8 1c a0 01 00       	call   c0027bdf <__ltdf2>
c000dbc3:	83 c4 10             	add    esp,0x10
c000dbc6:	ba 16 00 00 00       	mov    edx,0x16
c000dbcb:	85 c0                	test   eax,eax
c000dbcd:	0f 88 ff 05 00 00    	js     c000e1d2 <zoh_vari_process+0x69b>
c000dbd3:	68 00 00 70 40       	push   0x40700000
c000dbd8:	6a 00                	push   0x0
c000dbda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe2:	e8 da 9f 01 00       	call   c0027bc1 <__gtdf2>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	ba 16 00 00 00       	mov    edx,0x16
c000dbef:	85 c0                	test   eax,eax
c000dbf1:	0f 8f db 05 00 00    	jg     c000e1d2 <zoh_vari_process+0x69b>
c000dbf7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbfa:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc05:	68 00 00 f0 3f       	push   0x3ff00000
c000dc0a:	6a 00                	push   0x0
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc14:	e8 c6 9f 01 00       	call   c0027bdf <__ltdf2>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	85 c0                	test   eax,eax
c000dc1e:	0f 89 da 01 00 00    	jns    c000ddfe <zoh_vari_process+0x2c7>
c000dc24:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc27:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc2a:	0f 8d ce 01 00 00    	jge    c000ddfe <zoh_vari_process+0x2c7>
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc36:	e8 38 9d 01 00       	call   c0027973 <__floatsidf>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc55:	e8 b6 96 01 00       	call   c0027310 <__muldf3>
c000dc5a:	59                   	pop    ecx
c000dc5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc5f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc63:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc66:	e8 08 9d 01 00       	call   c0027973 <__floatsidf>
c000dc6b:	83 c4 10             	add    esp,0x10
c000dc6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc76:	52                   	push   edx
c000dc77:	50                   	push   eax
c000dc78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc80:	e8 0e 90 01 00       	call   c0026c93 <__adddf3>
c000dc85:	59                   	pop    ecx
c000dc86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc8e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc91:	e8 dd 9c 01 00       	call   c0027973 <__floatsidf>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca1:	52                   	push   edx
c000dca2:	50                   	push   eax
c000dca3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dca7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcab:	e8 2d 9f 01 00       	call   c0027bdd <__gedf2>
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	85 c0                	test   eax,eax
c000dcb5:	0f 89 43 01 00 00    	jns    c000ddfe <zoh_vari_process+0x2c7>
c000dcbb:	85 ed                	test   ebp,ebp
c000dcbd:	0f 8e ec 00 00 00    	jle    c000ddaf <zoh_vari_process+0x278>
c000dcc3:	83 ec 10             	sub    esp,0x10
c000dcc6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcc9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dccc:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dccf:	ff 37                	push   DWORD PTR [edi]
c000dcd1:	e8 0e 96 01 00       	call   c00272e4 <__subdf3>
c000dcd6:	83 c4 18             	add    esp,0x18
c000dcd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce1:	52                   	push   edx
c000dce2:	50                   	push   eax
c000dce3:	e8 88 a0 01 00       	call   c0027d70 <fabs>
c000dce8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf0:	83 c4 10             	add    esp,0x10
c000dcf3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcf8:	68 23 42 92 0c       	push   0xc924223
c000dcfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd05:	e8 b7 9e 01 00       	call   c0027bc1 <__gtdf2>
c000dd0a:	83 c4 10             	add    esp,0x10
c000dd0d:	85 c0                	test   eax,eax
c000dd0f:	0f 8e 9a 00 00 00    	jle    c000ddaf <zoh_vari_process+0x278>
c000dd15:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd17:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd21:	52                   	push   edx
c000dd22:	50                   	push   eax
c000dd23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd26:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd29:	e8 b6 95 01 00       	call   c00272e4 <__subdf3>
c000dd2e:	59                   	pop    ecx
c000dd2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd37:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd3a:	e8 34 9c 01 00       	call   c0027973 <__floatsidf>
c000dd3f:	83 c4 10             	add    esp,0x10
c000dd42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd4a:	52                   	push   edx
c000dd4b:	50                   	push   eax
c000dd4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd54:	e8 b7 95 01 00       	call   c0027310 <__muldf3>
c000dd59:	5d                   	pop    ebp
c000dd5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd62:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd65:	e8 09 9c 01 00       	call   c0027973 <__floatsidf>
c000dd6a:	83 c4 10             	add    esp,0x10
c000dd6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd75:	52                   	push   edx
c000dd76:	50                   	push   eax
c000dd77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd7f:	e8 70 98 01 00       	call   c00275f4 <__divdf3>
c000dd84:	83 c4 10             	add    esp,0x10
c000dd87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	e8 ef 8e 01 00       	call   c0026c93 <__adddf3>
c000dda4:	83 c4 10             	add    esp,0x10
c000dda7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddaf:	31 c0                	xor    eax,eax
c000ddb1:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddb4:	7e 13                	jle    c000ddc9 <zoh_vari_process+0x292>
c000ddb6:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddbd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc0:	40                   	inc    eax
c000ddc1:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddc4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddc7:	eb e8                	jmp    c000ddb1 <zoh_vari_process+0x27a>
c000ddc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd1:	68 00 00 f0 3f       	push   0x3ff00000
c000ddd6:	6a 00                	push   0x0
c000ddd8:	e8 17 98 01 00       	call   c00275f4 <__divdf3>
c000dddd:	83 c4 10             	add    esp,0x10
c000dde0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dde3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dde7:	52                   	push   edx
c000dde8:	50                   	push   eax
c000dde9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dded:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf1:	e8 9d 8e 01 00       	call   c0026c93 <__adddf3>
c000ddf6:	83 c4 10             	add    esp,0x10
c000ddf9:	e9 ff fd ff ff       	jmp    c000dbfd <zoh_vari_process+0xc6>
c000ddfe:	55                   	push   ebp
c000ddff:	55                   	push   ebp
c000de00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de08:	e8 83 9f 01 00       	call   c0027d90 <lrint>
c000de0d:	83 ec 0c             	sub    esp,0xc
c000de10:	50                   	push   eax
c000de11:	e8 5d 9b 01 00       	call   c0027973 <__floatsidf>
c000de16:	83 c4 10             	add    esp,0x10
c000de19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de21:	52                   	push   edx
c000de22:	50                   	push   eax
c000de23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2b:	e8 b4 94 01 00       	call   c00272e4 <__subdf3>
c000de30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de38:	83 c4 20             	add    esp,0x20
c000de3b:	6a 00                	push   0x0
c000de3d:	6a 00                	push   0x0
c000de3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de43:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de47:	e8 93 9d 01 00       	call   c0027bdf <__ltdf2>
c000de4c:	83 c4 10             	add    esp,0x10
c000de4f:	85 c0                	test   eax,eax
c000de51:	79 1e                	jns    c000de71 <zoh_vari_process+0x33a>
c000de53:	68 00 00 f0 3f       	push   0x3ff00000
c000de58:	6a 00                	push   0x0
c000de5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de62:	e8 2c 8e 01 00       	call   c0026c93 <__adddf3>
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000de6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de71:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de74:	83 ec 10             	sub    esp,0x10
c000de77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de87:	e8 58 94 01 00       	call   c00272e4 <__subdf3>
c000de8c:	83 c4 18             	add    esp,0x18
c000de8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de97:	52                   	push   edx
c000de98:	50                   	push   eax
c000de99:	e8 f2 9e 01 00       	call   c0027d90 <lrint>
c000de9e:	83 c4 10             	add    esp,0x10
c000dea1:	0f af e8             	imul   ebp,eax
c000dea4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dea7:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deaa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb1:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000deb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deb8:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000debb:	0f 8d 7a 02 00 00    	jge    c000e13b <zoh_vari_process+0x604>
c000dec1:	83 ec 0c             	sub    esp,0xc
c000dec4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dec7:	e8 a7 9a 01 00       	call   c0027973 <__floatsidf>
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ded3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ded7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dedb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dedf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee7:	e8 24 94 01 00       	call   c0027310 <__muldf3>
c000deec:	59                   	pop    ecx
c000deed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000def5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def9:	e8 75 9a 01 00       	call   c0027973 <__floatsidf>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df05:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df09:	52                   	push   edx
c000df0a:	50                   	push   eax
c000df0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df13:	e8 7b 8d 01 00       	call   c0026c93 <__adddf3>
c000df18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df23:	e8 4b 9a 01 00       	call   c0027973 <__floatsidf>
c000df28:	83 c4 10             	add    esp,0x10
c000df2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df2f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df33:	52                   	push   edx
c000df34:	50                   	push   eax
c000df35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df3d:	e8 9f 9c 01 00       	call   c0027be1 <__ledf2>
c000df42:	83 c4 10             	add    esp,0x10
c000df45:	85 c0                	test   eax,eax
c000df47:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df4b:	0f 8f ea 01 00 00    	jg     c000e13b <zoh_vari_process+0x604>
c000df51:	85 c9                	test   ecx,ecx
c000df53:	0f 8e ed 00 00 00    	jle    c000e046 <zoh_vari_process+0x50f>
c000df59:	83 ec 10             	sub    esp,0x10
c000df5c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df5f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df62:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df65:	ff 37                	push   DWORD PTR [edi]
c000df67:	e8 78 93 01 00       	call   c00272e4 <__subdf3>
c000df6c:	83 c4 18             	add    esp,0x18
c000df6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df77:	52                   	push   edx
c000df78:	50                   	push   eax
c000df79:	e8 f2 9d 01 00       	call   c0027d70 <fabs>
c000df7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df86:	83 c4 10             	add    esp,0x10
c000df89:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df8e:	68 23 42 92 0c       	push   0xc924223
c000df93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9b:	e8 21 9c 01 00       	call   c0027bc1 <__gtdf2>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	85 c0                	test   eax,eax
c000dfa5:	0f 8e 9b 00 00 00    	jle    c000e046 <zoh_vari_process+0x50f>
c000dfab:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfad:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb8:	52                   	push   edx
c000dfb9:	50                   	push   eax
c000dfba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc0:	e8 1f 93 01 00       	call   c00272e4 <__subdf3>
c000dfc5:	5d                   	pop    ebp
c000dfc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd1:	e8 9d 99 01 00       	call   c0027973 <__floatsidf>
c000dfd6:	83 c4 10             	add    esp,0x10
c000dfd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe1:	52                   	push   edx
c000dfe2:	50                   	push   eax
c000dfe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfeb:	e8 20 93 01 00       	call   c0027310 <__muldf3>
c000dff0:	59                   	pop    ecx
c000dff1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dff5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dff9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dffc:	e8 72 99 01 00       	call   c0027973 <__floatsidf>
c000e001:	83 c4 10             	add    esp,0x10
c000e004:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e008:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e00c:	52                   	push   edx
c000e00d:	50                   	push   eax
c000e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	e8 d9 95 01 00       	call   c00275f4 <__divdf3>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e022:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e026:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e036:	e8 58 8c 01 00       	call   c0026c93 <__adddf3>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e042:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e046:	31 d2                	xor    edx,edx
c000e048:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e04b:	39 d0                	cmp    eax,edx
c000e04d:	7e 1d                	jle    c000e06c <zoh_vari_process+0x535>
c000e04f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e052:	29 c1                	sub    ecx,eax
c000e054:	89 c8                	mov    eax,ecx
c000e056:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e058:	01 d0                	add    eax,edx
c000e05a:	42                   	inc    edx
c000e05b:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e05e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e061:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e064:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e067:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e06a:	eb dc                	jmp    c000e048 <zoh_vari_process+0x511>
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e074:	68 00 00 f0 3f       	push   0x3ff00000
c000e079:	6a 00                	push   0x0
c000e07b:	e8 74 95 01 00       	call   c00275f4 <__divdf3>
c000e080:	83 c4 10             	add    esp,0x10
c000e083:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e087:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e08f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09b:	e8 f3 8b 01 00       	call   c0026c93 <__adddf3>
c000e0a0:	5d                   	pop    ebp
c000e0a1:	59                   	pop    ecx
c000e0a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b2:	e8 d9 9c 01 00       	call   c0027d90 <lrint>
c000e0b7:	83 ec 0c             	sub    esp,0xc
c000e0ba:	50                   	push   eax
c000e0bb:	e8 b3 98 01 00       	call   c0027973 <__floatsidf>
c000e0c0:	83 c4 10             	add    esp,0x10
c000e0c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0cb:	52                   	push   edx
c000e0cc:	50                   	push   eax
c000e0cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d5:	e8 0a 92 01 00       	call   c00272e4 <__subdf3>
c000e0da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0de:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0e2:	83 c4 20             	add    esp,0x20
c000e0e5:	6a 00                	push   0x0
c000e0e7:	6a 00                	push   0x0
c000e0e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f1:	e8 e9 9a 01 00       	call   c0027bdf <__ltdf2>
c000e0f6:	83 c4 10             	add    esp,0x10
c000e0f9:	85 c0                	test   eax,eax
c000e0fb:	79 1e                	jns    c000e11b <zoh_vari_process+0x5e4>
c000e0fd:	68 00 00 f0 3f       	push   0x3ff00000
c000e102:	6a 00                	push   0x0
c000e104:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e108:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e10c:	e8 82 8b 01 00       	call   c0026c93 <__adddf3>
c000e111:	83 c4 10             	add    esp,0x10
c000e114:	89 04 24             	mov    DWORD PTR [esp],eax
c000e117:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e11b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e11e:	83 ec 10             	sub    esp,0x10
c000e121:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e125:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e129:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e12d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e131:	e8 ae 91 01 00       	call   c00272e4 <__subdf3>
c000e136:	e9 51 fd ff ff       	jmp    c000de8c <zoh_vari_process+0x355>
c000e13b:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e13f:	7d 3a                	jge    c000e17b <zoh_vari_process+0x644>
c000e141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e145:	83 ec 0c             	sub    esp,0xc
c000e148:	29 e8                	sub    eax,ebp
c000e14a:	99                   	cdq    
c000e14b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e14e:	50                   	push   eax
c000e14f:	e8 1f 98 01 00       	call   c0027973 <__floatsidf>
c000e154:	83 c4 10             	add    esp,0x10
c000e157:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e15b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e15f:	52                   	push   edx
c000e160:	50                   	push   eax
c000e161:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e169:	e8 25 8b 01 00       	call   c0026c93 <__adddf3>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e174:	89 04 24             	mov    DWORD PTR [esp],eax
c000e177:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e17b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e17e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e182:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e185:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e188:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e18b:	85 c0                	test   eax,eax
c000e18d:	7f 25                	jg     c000e1b4 <zoh_vari_process+0x67d>
c000e18f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e193:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e197:	89 07                	mov    DWORD PTR [edi],eax
c000e199:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e19f:	99                   	cdq    
c000e1a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1a3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1a9:	99                   	cdq    
c000e1aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ad:	31 d2                	xor    edx,edx
c000e1af:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1b2:	eb 1e                	jmp    c000e1d2 <zoh_vari_process+0x69b>
c000e1b4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1b7:	31 d2                	xor    edx,edx
c000e1b9:	29 c8                	sub    eax,ecx
c000e1bb:	c1 e0 02             	shl    eax,0x2
c000e1be:	39 d1                	cmp    ecx,edx
c000e1c0:	7e cd                	jle    c000e18f <zoh_vari_process+0x658>
c000e1c2:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1c4:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1c8:	83 c0 04             	add    eax,0x4
c000e1cb:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1cf:	42                   	inc    edx
c000e1d0:	eb ec                	jmp    c000e1be <zoh_vari_process+0x687>
c000e1d2:	83 c4 3c             	add    esp,0x3c
c000e1d5:	89 d0                	mov    eax,edx
c000e1d7:	5b                   	pop    ebx
c000e1d8:	5e                   	pop    esi
c000e1d9:	5f                   	pop    edi
c000e1da:	5d                   	pop    ebp
c000e1db:	c3                   	ret    

c000e1dc <zoh_reset>:
c000e1dc:	83 ec 0c             	sub    esp,0xc
c000e1df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1e3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1e6:	85 c0                	test   eax,eax
c000e1e8:	74 20                	je     c000e20a <zoh_reset+0x2e>
c000e1ea:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ed:	83 c0 1c             	add    eax,0x1c
c000e1f0:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1f3:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1fa:	c1 e2 02             	shl    edx,0x2
c000e1fd:	51                   	push   ecx
c000e1fe:	52                   	push   edx
c000e1ff:	6a 00                	push   0x0
c000e201:	50                   	push   eax
c000e202:	e8 b5 24 ff ff       	call   c00006bc <memset>
c000e207:	83 c4 10             	add    esp,0x10
c000e20a:	83 c4 0c             	add    esp,0xc
c000e20d:	c3                   	ret    

c000e20e <zoh_get_name>:
c000e20e:	31 c0                	xor    eax,eax
c000e210:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e215:	75 05                	jne    c000e21c <zoh_get_name+0xe>
c000e217:	b8 9e 96 02 c0       	mov    eax,0xc002969e
c000e21c:	c3                   	ret    

c000e21d <zoh_get_description>:
c000e21d:	31 c0                	xor    eax,eax
c000e21f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e224:	75 05                	jne    c000e22b <zoh_get_description+0xe>
c000e226:	b8 af 96 02 c0       	mov    eax,0xc00296af
c000e22b:	c3                   	ret    

c000e22c <zoh_set_converter>:
c000e22c:	53                   	push   ebx
c000e22d:	b8 0a 00 00 00       	mov    eax,0xa
c000e232:	83 ec 08             	sub    esp,0x8
c000e235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e239:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e23e:	75 6e                	jne    c000e2ae <zoh_set_converter+0x82>
c000e240:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e243:	85 c0                	test   eax,eax
c000e245:	74 13                	je     c000e25a <zoh_set_converter+0x2e>
c000e247:	83 ec 0c             	sub    esp,0xc
c000e24a:	50                   	push   eax
c000e24b:	e8 dc 13 00 00       	call   c000f62c <free>
c000e250:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e257:	83 c4 10             	add    esp,0x10
c000e25a:	50                   	push   eax
c000e25b:	50                   	push   eax
c000e25c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e25f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e266:	50                   	push   eax
c000e267:	6a 01                	push   0x1
c000e269:	e8 de 13 00 00       	call   c000f64c <calloc>
c000e26e:	83 c4 10             	add    esp,0x10
c000e271:	89 c2                	mov    edx,eax
c000e273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e276:	85 d2                	test   edx,edx
c000e278:	b8 01 00 00 00       	mov    eax,0x1
c000e27d:	74 2f                	je     c000e2ae <zoh_set_converter+0x82>
c000e27f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e282:	83 ec 0c             	sub    esp,0xc
c000e285:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e288:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e28e:	c7 43 24 37 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db37
c000e295:	c7 43 20 37 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db37
c000e29c:	c7 43 28 dc e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1dc
c000e2a3:	53                   	push   ebx
c000e2a4:	e8 33 ff ff ff       	call   c000e1dc <zoh_reset>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	31 c0                	xor    eax,eax
c000e2ae:	83 c4 08             	add    esp,0x8
c000e2b1:	5b                   	pop    ebx
c000e2b2:	c3                   	ret    

c000e2b3 <CPU::current()>:
c000e2b3:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c000e2b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2be:	90                   	nop
c000e2bf:	c3                   	ret    

c000e2c0 <operator new(unsigned long)>:
c000e2c0:	83 ec 0c             	sub    esp,0xc
c000e2c3:	83 ec 0c             	sub    esp,0xc
c000e2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ca:	e8 4d 13 00 00       	call   c000f61c <malloc>
c000e2cf:	83 c4 10             	add    esp,0x10
c000e2d2:	83 c4 0c             	add    esp,0xc
c000e2d5:	c3                   	ret    

c000e2d6 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	83 ec 08             	sub    esp,0x8
c000e2dc:	68 e6 96 02 c0       	push   0xc00296e6
c000e2e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2e5:	e8 c2 24 ff ff       	call   c00007ac <strcmp>
c000e2ea:	83 c4 10             	add    esp,0x10
c000e2ed:	85 c0                	test   eax,eax
c000e2ef:	0f 94 c0             	sete   al
c000e2f2:	84 c0                	test   al,al
c000e2f4:	74 0a                	je     c000e300 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2f6:	b8 48 da 02 c0       	mov    eax,0xc002da48
c000e2fb:	e9 e3 00 00 00       	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e300:	83 ec 08             	sub    esp,0x8
c000e303:	68 ef 96 02 c0       	push   0xc00296ef
c000e308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e30c:	e8 9b 24 ff ff       	call   c00007ac <strcmp>
c000e311:	83 c4 10             	add    esp,0x10
c000e314:	85 c0                	test   eax,eax
c000e316:	0f 94 c0             	sete   al
c000e319:	84 c0                	test   al,al
c000e31b:	74 0a                	je     c000e327 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e31d:	b8 0c 61 02 c0       	mov    eax,0xc002610c
c000e322:	e9 bc 00 00 00       	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e327:	83 ec 08             	sub    esp,0x8
c000e32a:	68 f9 96 02 c0       	push   0xc00296f9
c000e32f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e333:	e8 74 24 ff ff       	call   c00007ac <strcmp>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	85 c0                	test   eax,eax
c000e33d:	0f 94 c0             	sete   al
c000e340:	84 c0                	test   al,al
c000e342:	74 0a                	je     c000e34e <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e344:	b8 40 5e 02 c0       	mov    eax,0xc0025e40
c000e349:	e9 95 00 00 00       	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e34e:	83 ec 08             	sub    esp,0x8
c000e351:	68 02 97 02 c0       	push   0xc0029702
c000e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35a:	e8 4d 24 ff ff       	call   c00007ac <strcmp>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	85 c0                	test   eax,eax
c000e364:	0f 94 c0             	sete   al
c000e367:	84 c0                	test   al,al
c000e369:	74 07                	je     c000e372 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e36b:	b8 0c 62 02 c0       	mov    eax,0xc002620c
c000e370:	eb 71                	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e372:	83 ec 08             	sub    esp,0x8
c000e375:	68 0c 97 02 c0       	push   0xc002970c
c000e37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e37e:	e8 29 24 ff ff       	call   c00007ac <strcmp>
c000e383:	83 c4 10             	add    esp,0x10
c000e386:	85 c0                	test   eax,eax
c000e388:	0f 94 c0             	sete   al
c000e38b:	84 c0                	test   al,al
c000e38d:	74 07                	je     c000e396 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e38f:	b8 8c 5f 02 c0       	mov    eax,0xc0025f8c
c000e394:	eb 4d                	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e396:	83 ec 08             	sub    esp,0x8
c000e399:	68 15 97 02 c0       	push   0xc0029715
c000e39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a2:	e8 05 24 ff ff       	call   c00007ac <strcmp>
c000e3a7:	83 c4 10             	add    esp,0x10
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	0f 94 c0             	sete   al
c000e3af:	84 c0                	test   al,al
c000e3b1:	74 07                	je     c000e3ba <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3b3:	b8 4c da 02 c0       	mov    eax,0xc002da4c
c000e3b8:	eb 29                	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3ba:	83 ec 08             	sub    esp,0x8
c000e3bd:	68 22 97 02 c0       	push   0xc0029722
c000e3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3c6:	e8 e1 23 ff ff       	call   c00007ac <strcmp>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	85 c0                	test   eax,eax
c000e3d0:	0f 94 c0             	sete   al
c000e3d3:	84 c0                	test   al,al
c000e3d5:	74 07                	je     c000e3de <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3d7:	b8 4d da 02 c0       	mov    eax,0xc002da4d
c000e3dc:	eb 05                	jmp    c000e3e3 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3de:	b8 00 00 00 00       	mov    eax,0x0
c000e3e3:	83 c4 0c             	add    esp,0xc
c000e3e6:	c3                   	ret    
c000e3e7:	90                   	nop

c000e3e8 <Computer::close(int, int, void*)>:
c000e3e8:	57                   	push   edi
c000e3e9:	56                   	push   esi
c000e3ea:	53                   	push   ebx
c000e3eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3f7:	83 ec 0c             	sub    esp,0xc
c000e3fa:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e400:	e8 83 5a 00 00       	call   c0013e88 <Device::closeAll()>
c000e405:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e40b:	83 c4 10             	add    esp,0x10
c000e40e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e410:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e414:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e41c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e420:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e424:	5b                   	pop    ebx
c000e425:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e428:	5e                   	pop    esi
c000e429:	5f                   	pop    edi
c000e42a:	ff e0                	jmp    eax

c000e42c <Krnl::firstTask()>:
c000e42c:	53                   	push   ebx
c000e42d:	83 ec 14             	sub    esp,0x14
c000e430:	fb                   	sti    
c000e431:	68 3f 07 00 00       	push   0x73f
c000e436:	e8 e1 11 00 00       	call   c000f61c <malloc>
c000e43b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e442:	89 c3                	mov    ebx,eax
c000e444:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c000e44a:	68 2f 97 02 c0       	push   0xc002972f
c000e44f:	6a 01                	push   0x1
c000e451:	50                   	push   eax
c000e452:	e8 97 ee 00 00       	call   c001d2ee <Process::Process(bool, char const*, Process*, char**)>
c000e457:	83 c4 20             	add    esp,0x20
c000e45a:	68 ff 00 00 00       	push   0xff
c000e45f:	6a 00                	push   0x0
c000e461:	68 b1 ef 00 c0       	push   0xc000efb1
c000e466:	53                   	push   ebx
c000e467:	e8 80 f1 00 00       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c000e46c:	6a 7a                	push   0x7a
c000e46e:	6a 00                	push   0x0
c000e470:	68 4a de 01 c0       	push   0xc001de4a
c000e475:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c000e47b:	e8 6c f1 00 00       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c000e480:	83 c4 20             	add    esp,0x20
c000e483:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c000e488:	c6 05 4d da 02 c0 01 	mov    BYTE PTR ds:0xc002da4d,0x1
c000e48f:	e8 37 fd 00 00       	call   c001e1cb <Vm::initialise8086()>
c000e494:	e8 d7 47 00 00       	call   c0012c70 <Fs::initVFS()>
c000e499:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c000e49e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4a6:	6a 00                	push   0x0
c000e4a8:	6a 00                	push   0x0
c000e4aa:	6a 00                	push   0x0
c000e4ac:	50                   	push   eax
c000e4ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b0:	e8 27 d8 00 00       	call   c001bcdc <Sys::loadSyscalls()>
c000e4b5:	e8 6c b8 00 00       	call   c0019d26 <Krnl::loadSystemEnv()>
c000e4ba:	83 c4 0c             	add    esp,0xc
c000e4bd:	6a 3a                	push   0x3a
c000e4bf:	68 3c 97 02 c0       	push   0xc002973c
c000e4c4:	68 45 97 02 c0       	push   0xc0029745
c000e4c9:	e8 7e c5 00 00       	call   c001aa4c <Reg::readIntWithDefault(char*, char*, int)>
c000e4ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d1:	e8 82 52 00 00       	call   c0013758 <User::loadClockSettings(int)>
c000e4d6:	58                   	pop    eax
c000e4d7:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c000e4dc:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4e2:	e8 75 59 00 00       	call   c0013e5c <Device::loadDriversForAll()>
c000e4e7:	5a                   	pop    edx
c000e4e8:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c000e4ee:	59                   	pop    ecx
c000e4ef:	6a 01                	push   0x1
c000e4f1:	68 4d 97 02 c0       	push   0xc002974d
c000e4f6:	e8 4c e9 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c000e4fb:	5a                   	pop    edx
c000e4fc:	59                   	pop    ecx
c000e4fd:	53                   	push   ebx
c000e4fe:	50                   	push   eax
c000e4ff:	e8 52 eb 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	83 ec 0c             	sub    esp,0xc
c000e50a:	6a 02                	push   0x2
c000e50c:	e8 3f f4 00 00       	call   c001d950 <blockTask(TaskState)>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	eb f1                	jmp    c000e507 <Krnl::firstTask()+0xdb>

c000e516 <Computer::Computer()>:
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51d:	83 ec 08             	sub    esp,0x8
c000e520:	68 69 97 02 c0       	push   0xc0029769
c000e525:	50                   	push   eax
c000e526:	e8 d7 59 00 00       	call   c0013f02 <Device::Device(char const*)>
c000e52b:	83 c4 10             	add    esp,0x10
c000e52e:	ba 08 99 02 c0       	mov    edx,0xc0029908
c000e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e537:	89 10                	mov    DWORD PTR [eax],edx
c000e539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e559:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e55f:	83 ca 04             	or     edx,0x4
c000e562:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e572:	0f b6 d0             	movzx  edx,al
c000e575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e579:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e584:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e58a:	0f b6 d0             	movzx  edx,al
c000e58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e591:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a0:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5a7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5ad:	0f b6 d0             	movzx  edx,al
c000e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5b8:	83 e1 3f             	and    ecx,0x3f
c000e5bb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5c9:	0f b6 d0             	movzx  edx,al
c000e5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d0:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e1:	0f b6 d0             	movzx  edx,al
c000e5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e604:	0f b6 d0             	movzx  edx,al
c000e607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e60f:	83 e1 3f             	and    ecx,0x3f
c000e612:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e620:	0f b6 d0             	movzx  edx,al
c000e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e627:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e632:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e638:	0f b6 d0             	movzx  edx,al
c000e63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e648:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e64e:	8d 50 01             	lea    edx,[eax+0x1]
c000e651:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e655:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e65b:	0f b6 d0             	movzx  edx,al
c000e65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e662:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e666:	83 e1 3f             	and    ecx,0x3f
c000e669:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e66d:	90                   	nop
c000e66e:	83 c4 0c             	add    esp,0xc
c000e671:	c3                   	ret    

c000e672 <Computer::setBootMessage(char const*)>:
c000e672:	c3                   	ret    
c000e673:	90                   	nop

c000e674 <Computer::detectFeatures()>:
c000e674:	55                   	push   ebp
c000e675:	57                   	push   edi
c000e676:	56                   	push   esi
c000e677:	53                   	push   ebx
c000e678:	83 ec 1c             	sub    esp,0x1c
c000e67b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e67f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e689:	e8 56 1c ff ff       	call   c00002e4 <detectCPUID>
c000e68e:	85 c0                	test   eax,eax
c000e690:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e696:	0f 95 c2             	setne  dl
c000e699:	83 e0 fd             	and    eax,0xfffffffd
c000e69c:	d1 e2                	shl    edx,1
c000e69e:	09 d0                	or     eax,edx
c000e6a0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6a6:	a8 02                	test   al,0x2
c000e6a8:	75 46                	jne    c000e6f0 <Computer::detectFeatures()+0x7c>
c000e6aa:	f6 05 61 da 02 c0 04 	test   BYTE PTR ds:0xc002da61,0x4
c000e6b1:	74 07                	je     c000e6ba <Computer::detectFeatures()+0x46>
c000e6b3:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6ba:	e8 17 77 01 00       	call   c0025dd6 <x87Detect>
c000e6bf:	83 e0 01             	and    eax,0x1
c000e6c2:	c1 e0 04             	shl    eax,0x4
c000e6c5:	88 c2                	mov    dl,al
c000e6c7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cd:	83 e0 ef             	and    eax,0xffffffef
c000e6d0:	09 d0                	or     eax,edx
c000e6d2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6d8:	a8 10                	test   al,0x10
c000e6da:	0f 85 2a 01 00 00    	jne    c000e80a <Computer::detectFeatures()+0x196>
c000e6e0:	84 c0                	test   al,al
c000e6e2:	0f 88 45 01 00 00    	js     c000e82d <Computer::detectFeatures()+0x1b9>
c000e6e8:	83 c4 1c             	add    esp,0x1c
c000e6eb:	5b                   	pop    ebx
c000e6ec:	5e                   	pop    esi
c000e6ed:	5f                   	pop    edi
c000e6ee:	5d                   	pop    ebp
c000e6ef:	c3                   	ret    
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	6a 20                	push   0x20
c000e6f5:	e8 ee 9f 00 00       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c000e6fa:	83 e0 01             	and    eax,0x1
c000e6fd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e704:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e70a:	83 e0 f7             	and    eax,0xfffffff7
c000e70d:	09 d0                	or     eax,edx
c000e70f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e715:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e71c:	e8 c7 9f 00 00       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c000e721:	83 e0 01             	and    eax,0x1
c000e724:	88 c2                	mov    dl,al
c000e726:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e72c:	83 e0 fe             	and    eax,0xfffffffe
c000e72f:	09 d0                	or     eax,edx
c000e731:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e737:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e73e:	e8 a5 9f 00 00       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c000e743:	c1 e0 07             	shl    eax,0x7
c000e746:	88 c2                	mov    dl,al
c000e748:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e74e:	83 e0 7f             	and    eax,0x7f
c000e751:	09 d0                	or     eax,edx
c000e753:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e759:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e760:	e8 83 9f 00 00       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c000e765:	83 c4 10             	add    esp,0x10
c000e768:	83 e0 01             	and    eax,0x1
c000e76b:	c1 e0 05             	shl    eax,0x5
c000e76e:	88 c2                	mov    dl,al
c000e770:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e776:	83 e0 df             	and    eax,0xffffffdf
c000e779:	09 d0                	or     eax,edx
c000e77b:	f7 05 60 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002da60,0x401
c000e785:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e78b:	0f 84 c2 00 00 00    	je     c000e853 <Computer::detectFeatures()+0x1df>
c000e791:	83 e0 fe             	and    eax,0xfffffffe
c000e794:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e79a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a0:	88 c2                	mov    dl,al
c000e7a2:	83 e2 09             	and    edx,0x9
c000e7a5:	fe ca                	dec    dl
c000e7a7:	75 09                	jne    c000e7b2 <Computer::detectFeatures()+0x13e>
c000e7a9:	83 e0 fe             	and    eax,0xfffffffe
c000e7ac:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7b2:	83 ec 0c             	sub    esp,0xc
c000e7b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7b9:	50                   	push   eax
c000e7ba:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7be:	55                   	push   ebp
c000e7bf:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7c3:	57                   	push   edi
c000e7c4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7c8:	56                   	push   esi
c000e7c9:	68 00 00 00 80       	push   0x80000000
c000e7ce:	e8 91 9e 00 00       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7d3:	83 c4 20             	add    esp,0x20
c000e7d6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e1:	0f 86 c3 fe ff ff    	jbe    c000e6aa <Computer::detectFeatures()+0x36>
c000e7e7:	83 ec 0c             	sub    esp,0xc
c000e7ea:	50                   	push   eax
c000e7eb:	55                   	push   ebp
c000e7ec:	57                   	push   edi
c000e7ed:	56                   	push   esi
c000e7ee:	68 01 00 00 80       	push   0x80000001
c000e7f3:	e8 6c 9e 00 00       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7f8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e802:	83 c4 20             	add    esp,0x20
c000e805:	e9 a0 fe ff ff       	jmp    c000e6aa <Computer::detectFeatures()+0x36>
c000e80a:	e8 81 75 01 00       	call   c0025d90 <absolutelyNoChanceInHell>
c000e80f:	88 c2                	mov    dl,al
c000e811:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e817:	c1 e2 07             	shl    edx,0x7
c000e81a:	83 e0 7f             	and    eax,0x7f
c000e81d:	09 d0                	or     eax,edx
c000e81f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e825:	84 c0                	test   al,al
c000e827:	0f 89 bb fe ff ff    	jns    c000e6e8 <Computer::detectFeatures()+0x74>
c000e82d:	e8 3e 75 01 00       	call   c0025d70 <avxDetect>
c000e832:	83 e0 01             	and    eax,0x1
c000e835:	c1 e0 05             	shl    eax,0x5
c000e838:	88 c2                	mov    dl,al
c000e83a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e840:	83 e0 df             	and    eax,0xffffffdf
c000e843:	09 d0                	or     eax,edx
c000e845:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e84b:	83 c4 1c             	add    esp,0x1c
c000e84e:	5b                   	pop    ebx
c000e84f:	5e                   	pop    esi
c000e850:	5f                   	pop    edi
c000e851:	5d                   	pop    ebp
c000e852:	c3                   	ret    
c000e853:	83 ec 0c             	sub    esp,0xc
c000e856:	68 00 02 00 00       	push   0x200
c000e85b:	e8 88 9e 00 00       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	83 e0 01             	and    eax,0x1
c000e866:	88 c2                	mov    dl,al
c000e868:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e86e:	83 e0 fe             	and    eax,0xfffffffe
c000e871:	09 d0                	or     eax,edx
c000e873:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e879:	e9 1c ff ff ff       	jmp    c000e79a <Computer::detectFeatures()+0x126>

c000e87e <Computer::displayFeatures()>:
c000e87e:	53                   	push   ebx
c000e87f:	83 ec 14             	sub    esp,0x14
c000e882:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e886:	68 79 97 02 c0       	push   0xc0029779
c000e88b:	e8 5b 40 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e890:	83 c4 10             	add    esp,0x10
c000e893:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e89a:	0f 85 73 02 00 00    	jne    c000eb13 <Computer::displayFeatures()+0x295>
c000e8a0:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e8a5:	83 ec 08             	sub    esp,0x8
c000e8a8:	50                   	push   eax
c000e8a9:	68 8c 97 02 c0       	push   0xc002978c
c000e8ae:	e8 38 40 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e8b3:	83 c4 10             	add    esp,0x10
c000e8b6:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8bd:	0f 85 8c 02 00 00    	jne    c000eb4f <Computer::displayFeatures()+0x2d1>
c000e8c3:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e8c8:	83 ec 08             	sub    esp,0x8
c000e8cb:	50                   	push   eax
c000e8cc:	68 9d 97 02 c0       	push   0xc002979d
c000e8d1:	e8 15 40 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e8d6:	83 c4 10             	add    esp,0x10
c000e8d9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e0:	0f 85 5f 02 00 00    	jne    c000eb45 <Computer::displayFeatures()+0x2c7>
c000e8e6:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e8eb:	83 ec 08             	sub    esp,0x8
c000e8ee:	50                   	push   eax
c000e8ef:	68 ae 97 02 c0       	push   0xc00297ae
c000e8f4:	e8 f2 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e8f9:	83 c4 10             	add    esp,0x10
c000e8fc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e903:	0f 85 32 02 00 00    	jne    c000eb3b <Computer::displayFeatures()+0x2bd>
c000e909:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e90e:	83 ec 08             	sub    esp,0x8
c000e911:	50                   	push   eax
c000e912:	68 bf 97 02 c0       	push   0xc00297bf
c000e917:	e8 cf 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e91c:	83 c4 10             	add    esp,0x10
c000e91f:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e926:	0f 85 05 02 00 00    	jne    c000eb31 <Computer::displayFeatures()+0x2b3>
c000e92c:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e931:	83 ec 08             	sub    esp,0x8
c000e934:	50                   	push   eax
c000e935:	68 d0 97 02 c0       	push   0xc00297d0
c000e93a:	e8 ac 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e93f:	83 c4 10             	add    esp,0x10
c000e942:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e949:	0f 85 d8 01 00 00    	jne    c000eb27 <Computer::displayFeatures()+0x2a9>
c000e94f:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e954:	83 ec 08             	sub    esp,0x8
c000e957:	50                   	push   eax
c000e958:	68 e1 97 02 c0       	push   0xc00297e1
c000e95d:	e8 89 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e962:	83 c4 10             	add    esp,0x10
c000e965:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e96c:	0f 85 ab 01 00 00    	jne    c000eb1d <Computer::displayFeatures()+0x29f>
c000e972:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e977:	83 ec 08             	sub    esp,0x8
c000e97a:	50                   	push   eax
c000e97b:	68 f2 97 02 c0       	push   0xc00297f2
c000e980:	e8 66 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e985:	83 c4 10             	add    esp,0x10
c000e988:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e98f:	0f 88 1b 02 00 00    	js     c000ebb0 <Computer::displayFeatures()+0x332>
c000e995:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e99a:	83 ec 08             	sub    esp,0x8
c000e99d:	50                   	push   eax
c000e99e:	68 03 98 02 c0       	push   0xc0029803
c000e9a3:	e8 43 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e9a8:	83 c4 10             	add    esp,0x10
c000e9ab:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9b2:	0f 85 a1 01 00 00    	jne    c000eb59 <Computer::displayFeatures()+0x2db>
c000e9b8:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e9bd:	83 ec 08             	sub    esp,0x8
c000e9c0:	50                   	push   eax
c000e9c1:	68 14 98 02 c0       	push   0xc0029814
c000e9c6:	e8 20 3f 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9d5:	0f 85 cb 01 00 00    	jne    c000eba6 <Computer::displayFeatures()+0x328>
c000e9db:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000e9e0:	83 ec 08             	sub    esp,0x8
c000e9e3:	50                   	push   eax
c000e9e4:	68 25 98 02 c0       	push   0xc0029825
c000e9e9:	e8 fd 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000e9ee:	83 c4 10             	add    esp,0x10
c000e9f1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e9f8:	0f 85 9e 01 00 00    	jne    c000eb9c <Computer::displayFeatures()+0x31e>
c000e9fe:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ea03:	83 ec 08             	sub    esp,0x8
c000ea06:	50                   	push   eax
c000ea07:	68 36 98 02 c0       	push   0xc0029836
c000ea0c:	e8 da 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea1b:	0f 85 71 01 00 00    	jne    c000eb92 <Computer::displayFeatures()+0x314>
c000ea21:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ea26:	83 ec 08             	sub    esp,0x8
c000ea29:	50                   	push   eax
c000ea2a:	68 47 98 02 c0       	push   0xc0029847
c000ea2f:	e8 b7 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ea34:	83 c4 10             	add    esp,0x10
c000ea37:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea3e:	0f 85 44 01 00 00    	jne    c000eb88 <Computer::displayFeatures()+0x30a>
c000ea44:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ea49:	83 ec 08             	sub    esp,0x8
c000ea4c:	50                   	push   eax
c000ea4d:	68 58 98 02 c0       	push   0xc0029858
c000ea52:	e8 94 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ea57:	83 c4 10             	add    esp,0x10
c000ea5a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea61:	0f 85 17 01 00 00    	jne    c000eb7e <Computer::displayFeatures()+0x300>
c000ea67:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ea6c:	83 ec 08             	sub    esp,0x8
c000ea6f:	50                   	push   eax
c000ea70:	68 69 98 02 c0       	push   0xc0029869
c000ea75:	e8 71 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ea7a:	83 c4 10             	add    esp,0x10
c000ea7d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea84:	0f 85 ea 00 00 00    	jne    c000eb74 <Computer::displayFeatures()+0x2f6>
c000ea8a:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ea8f:	83 ec 08             	sub    esp,0x8
c000ea92:	50                   	push   eax
c000ea93:	68 7a 98 02 c0       	push   0xc002987a
c000ea98:	e8 4e 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ea9d:	83 c4 10             	add    esp,0x10
c000eaa0:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaa7:	0f 88 0d 01 00 00    	js     c000ebba <Computer::displayFeatures()+0x33c>
c000eaad:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000eab2:	83 ec 08             	sub    esp,0x8
c000eab5:	50                   	push   eax
c000eab6:	68 8b 98 02 c0       	push   0xc002988b
c000eabb:	e8 2b 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eac0:	83 c4 10             	add    esp,0x10
c000eac3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000eaca:	0f 85 9a 00 00 00    	jne    c000eb6a <Computer::displayFeatures()+0x2ec>
c000ead0:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000ead5:	83 ec 08             	sub    esp,0x8
c000ead8:	50                   	push   eax
c000ead9:	68 9c 98 02 c0       	push   0xc002989c
c000eade:	e8 08 3e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eae3:	83 c4 10             	add    esp,0x10
c000eae6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaed:	75 74                	jne    c000eb63 <Computer::displayFeatures()+0x2e5>
c000eaef:	b8 76 97 02 c0       	mov    eax,0xc0029776
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 ad 98 02 c0       	push   0xc00298ad
c000eafd:	e8 e9 3d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000eb02:	c7 44 24 20 fb b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b1fb
c000eb0a:	83 c4 18             	add    esp,0x18
c000eb0d:	5b                   	pop    ebx
c000eb0e:	e9 d8 3d 00 00       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>
c000eb13:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb18:	e9 88 fd ff ff       	jmp    c000e8a5 <Computer::displayFeatures()+0x27>
c000eb1d:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb22:	e9 50 fe ff ff       	jmp    c000e977 <Computer::displayFeatures()+0xf9>
c000eb27:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb2c:	e9 23 fe ff ff       	jmp    c000e954 <Computer::displayFeatures()+0xd6>
c000eb31:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb36:	e9 f6 fd ff ff       	jmp    c000e931 <Computer::displayFeatures()+0xb3>
c000eb3b:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb40:	e9 c9 fd ff ff       	jmp    c000e90e <Computer::displayFeatures()+0x90>
c000eb45:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb4a:	e9 9c fd ff ff       	jmp    c000e8eb <Computer::displayFeatures()+0x6d>
c000eb4f:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb54:	e9 6f fd ff ff       	jmp    c000e8c8 <Computer::displayFeatures()+0x4a>
c000eb59:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb5e:	e9 5a fe ff ff       	jmp    c000e9bd <Computer::displayFeatures()+0x13f>
c000eb63:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb68:	eb 8a                	jmp    c000eaf4 <Computer::displayFeatures()+0x276>
c000eb6a:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb6f:	e9 61 ff ff ff       	jmp    c000ead5 <Computer::displayFeatures()+0x257>
c000eb74:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb79:	e9 11 ff ff ff       	jmp    c000ea8f <Computer::displayFeatures()+0x211>
c000eb7e:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb83:	e9 e4 fe ff ff       	jmp    c000ea6c <Computer::displayFeatures()+0x1ee>
c000eb88:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb8d:	e9 b7 fe ff ff       	jmp    c000ea49 <Computer::displayFeatures()+0x1cb>
c000eb92:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eb97:	e9 8a fe ff ff       	jmp    c000ea26 <Computer::displayFeatures()+0x1a8>
c000eb9c:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000eba1:	e9 5d fe ff ff       	jmp    c000ea03 <Computer::displayFeatures()+0x185>
c000eba6:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000ebab:	e9 30 fe ff ff       	jmp    c000e9e0 <Computer::displayFeatures()+0x162>
c000ebb0:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000ebb5:	e9 e0 fd ff ff       	jmp    c000e99a <Computer::displayFeatures()+0x11c>
c000ebba:	b8 72 97 02 c0       	mov    eax,0xc0029772
c000ebbf:	e9 ee fe ff ff       	jmp    c000eab2 <Computer::displayFeatures()+0x234>

c000ebc4 <Computer::rdmsr(unsigned int)>:
c000ebc4:	83 ec 0c             	sub    esp,0xc
c000ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebcb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebd2:	74 0a                	je     c000ebde <Computer::rdmsr(unsigned int)+0x1a>
c000ebd4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebd8:	0f 32                	rdmsr  
c000ebda:	83 c4 0c             	add    esp,0xc
c000ebdd:	c3                   	ret    
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	68 be 98 02 c0       	push   0xc00298be
c000ebe6:	e8 74 b2 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	eb e4                	jmp    c000ebd4 <Computer::rdmsr(unsigned int)+0x10>

c000ebf0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf0:	57                   	push   edi
c000ebf1:	56                   	push   esi
c000ebf2:	52                   	push   edx
c000ebf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ebfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ebff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec06:	74 0e                	je     c000ec16 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec0c:	89 f0                	mov    eax,esi
c000ec0e:	89 fa                	mov    edx,edi
c000ec10:	0f 30                	wrmsr  
c000ec12:	58                   	pop    eax
c000ec13:	5e                   	pop    esi
c000ec14:	5f                   	pop    edi
c000ec15:	c3                   	ret    
c000ec16:	83 ec 0c             	sub    esp,0xc
c000ec19:	68 c4 98 02 c0       	push   0xc00298c4
c000ec1e:	e8 3c b2 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	eb e0                	jmp    c000ec08 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec28 <Computer::nmiEnabled()>:
c000ec28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec2c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec32:	c3                   	ret    
c000ec33:	90                   	nop

c000ec34 <Computer::readCMOS(unsigned char)>:
c000ec34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec38:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec3f:	19 c0                	sbb    eax,eax
c000ec41:	83 e0 80             	and    eax,0xffffff80
c000ec44:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec48:	e6 70                	out    0x70,al
c000ec4a:	e4 71                	in     al,0x71
c000ec4c:	c3                   	ret    
c000ec4d:	90                   	nop

c000ec4e <Computer::enableNMI(bool)>:
c000ec4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec56:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec5c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec64:	eb ce                	jmp    c000ec34 <Computer::readCMOS(unsigned char)>

c000ec66 <Computer::open(int, int, void*)>:
c000ec66:	56                   	push   esi
c000ec67:	53                   	push   ebx
c000ec68:	83 ec 10             	sub    esp,0x10
c000ec6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec6f:	f6 05 60 da 02 c0 04 	test   BYTE PTR ds:0xc002da60,0x4
c000ec76:	68 68 12 00 00       	push   0x1268
c000ec7b:	0f 94 05 84 c9 02 c0 	sete   BYTE PTR ds:0xc002c984
c000ec82:	e8 95 09 00 00       	call   c000f61c <malloc>
c000ec87:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec8a:	89 c6                	mov    esi,eax
c000ec8c:	e8 27 8f 00 00       	call   c0017bb8 <ACPI::ACPI()>
c000ec91:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec97:	58                   	pop    eax
c000ec98:	5a                   	pop    edx
c000ec99:	56                   	push   esi
c000ec9a:	53                   	push   ebx
c000ec9b:	e8 72 50 00 00       	call   c0013d12 <Device::addChild(Device*)>
c000eca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eca3:	e8 cc f9 ff ff       	call   c000e674 <Computer::detectFeatures()>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 ce fb ff ff       	call   c000e87e <Computer::displayFeatures()>
c000ecb0:	59                   	pop    ecx
c000ecb1:	5e                   	pop    esi
c000ecb2:	6a 01                	push   0x1
c000ecb4:	53                   	push   ebx
c000ecb5:	e8 94 ff ff ff       	call   c000ec4e <Computer::enableNMI(bool)>
c000ecba:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc1:	e8 56 09 00 00       	call   c000f61c <malloc>
c000ecc6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecc9:	89 c6                	mov    esi,eax
c000eccb:	e8 d0 9a 00 00       	call   c00187a0 <CPU::CPU()>
c000ecd0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecd6:	58                   	pop    eax
c000ecd7:	5a                   	pop    edx
c000ecd8:	56                   	push   esi
c000ecd9:	53                   	push   ebx
c000ecda:	e8 33 50 00 00       	call   c0013d12 <Device::addChild(Device*)>
c000ecdf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ece5:	8b 10                	mov    edx,DWORD PTR [eax]
c000ece7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eceb:	6a 00                	push   0x0
c000eced:	6a 00                	push   0x0
c000ecef:	50                   	push   eax
c000ecf0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecf3:	83 c4 20             	add    esp,0x20
c000ecf6:	e8 9d 55 00 00       	call   c0014298 <setupFPU()>
c000ecfb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed01:	85 c0                	test   eax,eax
c000ed03:	74 1f                	je     c000ed24 <Computer::open(int, int, void*)+0xbe>
c000ed05:	83 ec 08             	sub    esp,0x8
c000ed08:	50                   	push   eax
c000ed09:	53                   	push   ebx
c000ed0a:	e8 03 50 00 00       	call   c0013d12 <Device::addChild(Device*)>
c000ed0f:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed15:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed17:	6a 00                	push   0x0
c000ed19:	6a 00                	push   0x0
c000ed1b:	6a 00                	push   0x0
c000ed1d:	50                   	push   eax
c000ed1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed21:	83 c4 20             	add    esp,0x20
c000ed24:	83 ec 0c             	sub    esp,0xc
c000ed27:	68 2c e4 00 c0       	push   0xc000e42c
c000ed2c:	e8 bb e9 00 00       	call   c001d6ec <setupMultitasking(void (*)())>
c000ed31:	83 c4 14             	add    esp,0x14
c000ed34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed39:	5b                   	pop    ebx
c000ed3a:	5e                   	pop    esi
c000ed3b:	c3                   	ret    

c000ed3c <Computer::disableNMI()>:
c000ed3c:	6a 00                	push   0x0
c000ed3e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed42:	e8 07 ff ff ff       	call   c000ec4e <Computer::enableNMI(bool)>
c000ed47:	58                   	pop    eax
c000ed48:	5a                   	pop    edx
c000ed49:	c3                   	ret    

c000ed4a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed55:	19 c0                	sbb    eax,eax
c000ed57:	83 e0 80             	and    eax,0xffffff80
c000ed5a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed5e:	e6 70                	out    0x70,al
c000ed60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed64:	e6 71                	out    0x71,al
c000ed66:	c3                   	ret    
c000ed67:	90                   	nop

c000ed68 <Computer::handleNMI()>:
c000ed68:	56                   	push   esi
c000ed69:	53                   	push   ebx
c000ed6a:	83 ec 10             	sub    esp,0x10
c000ed6d:	e4 92                	in     al,0x92
c000ed6f:	89 c6                	mov    esi,eax
c000ed71:	e4 61                	in     al,0x61
c000ed73:	68 ca 98 02 c0       	push   0xc00298ca
c000ed78:	88 c3                	mov    bl,al
c000ed7a:	e8 6c 3b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ed7f:	83 c4 10             	add    esp,0x10
c000ed82:	83 e6 10             	and    esi,0x10
c000ed85:	75 0d                	jne    c000ed94 <Computer::handleNMI()+0x2c>
c000ed87:	f6 c3 40             	test   bl,0x40
c000ed8a:	75 1d                	jne    c000eda9 <Computer::handleNMI()+0x41>
c000ed8c:	84 db                	test   bl,bl
c000ed8e:	78 2d                	js     c000edbd <Computer::handleNMI()+0x55>
c000ed90:	58                   	pop    eax
c000ed91:	5b                   	pop    ebx
c000ed92:	5e                   	pop    esi
c000ed93:	c3                   	ret    
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	68 db 98 02 c0       	push   0xc00298db
c000ed9c:	e8 be b0 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	f6 c3 40             	test   bl,0x40
c000eda7:	74 e3                	je     c000ed8c <Computer::handleNMI()+0x24>
c000eda9:	83 ec 0c             	sub    esp,0xc
c000edac:	68 e8 98 02 c0       	push   0xc00298e8
c000edb1:	e8 a9 b0 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000edb6:	83 c4 10             	add    esp,0x10
c000edb9:	84 db                	test   bl,bl
c000edbb:	79 d3                	jns    c000ed90 <Computer::handleNMI()+0x28>
c000edbd:	c7 44 24 10 f2 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298f2
c000edc5:	5a                   	pop    edx
c000edc6:	5b                   	pop    ebx
c000edc7:	5e                   	pop    esi
c000edc8:	e9 92 b0 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c000edcd:	90                   	nop

c000edce <Computer::setDiskActivityLight(int, bool)>:
c000edce:	56                   	push   esi
c000edcf:	53                   	push   ebx
c000edd0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000edd4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000edd9:	77 1b                	ja     c000edf6 <Computer::setDiskActivityLight(int, bool)+0x28>
c000eddb:	e4 92                	in     al,0x92
c000eddd:	bb 40 00 00 00       	mov    ebx,0x40
c000ede2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ede6:	89 da                	mov    edx,ebx
c000ede8:	d3 e2                	shl    edx,cl
c000edea:	89 f1                	mov    ecx,esi
c000edec:	f7 d2                	not    edx
c000edee:	d3 e3                	shl    ebx,cl
c000edf0:	21 d0                	and    eax,edx
c000edf2:	09 d8                	or     eax,ebx
c000edf4:	e6 92                	out    0x92,al
c000edf6:	5b                   	pop    ebx
c000edf7:	5e                   	pop    esi
c000edf8:	c3                   	ret    
c000edf9:	90                   	nop

c000edfa <GDTEntry::setBase(unsigned int)>:
c000edfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee02:	89 c1                	mov    ecx,eax
c000ee04:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee08:	c1 e9 10             	shr    ecx,0x10
c000ee0b:	c1 e8 18             	shr    eax,0x18
c000ee0e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee11:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee14:	c3                   	ret    
c000ee15:	90                   	nop

c000ee16 <GDTEntry::setLimit(unsigned int)>:
c000ee16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee1e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee21:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee24:	83 e2 f0             	and    edx,0xfffffff0
c000ee27:	c1 e8 10             	shr    eax,0x10
c000ee2a:	83 e0 0f             	and    eax,0xf
c000ee2d:	09 d0                	or     eax,edx
c000ee2f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee32:	c3                   	ret    
c000ee33:	90                   	nop

c000ee34 <GDT::GDT()>:
c000ee34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee48:	90                   	nop
c000ee49:	c3                   	ret    

c000ee4a <GDT::addEntry(GDTEntry)>:
c000ee4a:	53                   	push   ebx
c000ee4b:	83 ec 0c             	sub    esp,0xc
c000ee4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee52:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee54:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee5b:	52                   	push   edx
c000ee5c:	50                   	push   eax
c000ee5d:	68 2c 99 02 c0       	push   0xc002992c
c000ee62:	e8 84 3a 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ee67:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee71:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee75:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee79:	8d 50 01             	lea    edx,[eax+0x1]
c000ee7c:	c1 e0 03             	shl    eax,0x3
c000ee7f:	89 13                	mov    DWORD PTR [ebx],edx
c000ee81:	83 c4 18             	add    esp,0x18
c000ee84:	5b                   	pop    ebx
c000ee85:	c3                   	ret    

c000ee86 <GDT::getNumberOfEntries()>:
c000ee86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee8c:	c3                   	ret    
c000ee8d:	90                   	nop

c000ee8e <GDT::flush()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee94:	83 c0 04             	add    eax,0x4
c000ee97:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee9e:	a3 52 da 02 c0       	mov    ds:0xc002da52,eax
c000eea3:	66 89 15 50 da 02 c0 	mov    WORD PTR ds:0xc002da50,dx
c000eeaa:	e9 99 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeaf:	90                   	nop

c000eeb0 <GDT::setup()>:
c000eeb0:	55                   	push   ebp
c000eeb1:	57                   	push   edi
c000eeb2:	56                   	push   esi
c000eeb3:	53                   	push   ebx
c000eeb4:	83 ec 3c             	sub    esp,0x3c
c000eeb7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eebb:	6a 00                	push   0x0
c000eebd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec1:	53                   	push   ebx
c000eec2:	e8 33 ff ff ff       	call   c000edfa <GDTEntry::setBase(unsigned int)>
c000eec7:	6a 00                	push   0x0
c000eec9:	53                   	push   ebx
c000eeca:	e8 47 ff ff ff       	call   c000ee16 <GDTEntry::setLimit(unsigned int)>
c000eecf:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eed7:	6a 00                	push   0x0
c000eed9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eedd:	53                   	push   ebx
c000eede:	e8 17 ff ff ff       	call   c000edfa <GDTEntry::setBase(unsigned int)>
c000eee3:	68 ff ff ff 00       	push   0xffffff
c000eee8:	53                   	push   ebx
c000eee9:	e8 28 ff ff ff       	call   c000ee16 <GDTEntry::setLimit(unsigned int)>
c000eeee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eef2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eef7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eefc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef00:	83 c4 20             	add    esp,0x20
c000ef03:	6a 00                	push   0x0
c000ef05:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef09:	53                   	push   ebx
c000ef0a:	e8 eb fe ff ff       	call   c000edfa <GDTEntry::setBase(unsigned int)>
c000ef0f:	68 ff ff ff 00       	push   0xffffff
c000ef14:	53                   	push   ebx
c000ef15:	e8 fc fe ff ff       	call   c000ee16 <GDTEntry::setLimit(unsigned int)>
c000ef1a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef22:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef26:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef2a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef2e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef33:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef38:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef3c:	89 d8                	mov    eax,ebx
c000ef3e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef42:	80 cc 60             	or     ah,0x60
c000ef45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef49:	83 c4 0c             	add    esp,0xc
c000ef4c:	89 f8                	mov    eax,edi
c000ef4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef52:	80 cc 60             	or     ah,0x60
c000ef55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef59:	89 c7                	mov    edi,eax
c000ef5b:	55                   	push   ebp
c000ef5c:	e8 e9 fe ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c000ef61:	83 c4 0c             	add    esp,0xc
c000ef64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef6c:	55                   	push   ebp
c000ef6d:	e8 d8 fe ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c000ef72:	83 c4 0c             	add    esp,0xc
c000ef75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef7d:	55                   	push   ebp
c000ef7e:	e8 c7 fe ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c000ef83:	83 c4 0c             	add    esp,0xc
c000ef86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef8e:	53                   	push   ebx
c000ef8f:	51                   	push   ecx
c000ef90:	55                   	push   ebp
c000ef91:	e8 b4 fe ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c000ef96:	83 c4 0c             	add    esp,0xc
c000ef99:	57                   	push   edi
c000ef9a:	56                   	push   esi
c000ef9b:	55                   	push   ebp
c000ef9c:	e8 a9 fe ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c000efa1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efa4:	e8 e5 fe ff ff       	call   c000ee8e <GDT::flush()>
c000efa9:	83 c4 4c             	add    esp,0x4c
c000efac:	5b                   	pop    ebx
c000efad:	5e                   	pop    esi
c000efae:	5f                   	pop    edi
c000efaf:	5d                   	pop    ebp
c000efb0:	c3                   	ret    

c000efb1 <idleFunction(void*)>:
c000efb1:	53                   	push   ebx
c000efb2:	83 ec 08             	sub    esp,0x8
c000efb5:	e8 02 e5 00 00       	call   c001d4bc <unlockScheduler()>
c000efba:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c000efbf:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efc5:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efcc:	74 3c                	je     c000f00a <idleFunction(void*)+0x59>
c000efce:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efd5:	74 33                	je     c000f00a <idleFunction(void*)+0x59>
c000efd7:	31 db                	xor    ebx,ebx
c000efd9:	52                   	push   edx
c000efda:	52                   	push   edx
c000efdb:	68 e1 00 00 00       	push   0xe1
c000efe0:	50                   	push   eax
c000efe1:	e8 de fb ff ff       	call   c000ebc4 <Computer::rdmsr(unsigned int)>
c000efe6:	53                   	push   ebx
c000efe7:	83 e0 02             	and    eax,0x2
c000efea:	50                   	push   eax
c000efeb:	68 e1 00 00 00       	push   0xe1
c000eff0:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c000eff6:	e8 f5 fb ff ff       	call   c000ebf0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000effb:	83 c4 20             	add    esp,0x20
c000effe:	e8 7c 12 ff ff       	call   c000027f <doTPAUSE>
c000f003:	e8 08 8e 01 00       	call   c0027e10 <idleCommon()>
c000f008:	eb f4                	jmp    c000effe <idleFunction(void*)+0x4d>
c000f00a:	fb                   	sti    
c000f00b:	f4                   	hlt    
c000f00c:	e8 ff 8d 01 00       	call   c0027e10 <idleCommon()>
c000f011:	eb f7                	jmp    c000f00a <idleFunction(void*)+0x59>
c000f013:	90                   	nop

c000f014 <IDTEntry::IDTEntry(bool)>:
c000f014:	83 ec 04             	sub    esp,0x4
c000f017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f01b:	88 04 24             	mov    BYTE PTR [esp],al
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f037:	83 e2 f0             	and    edx,0xfffffff0
c000f03a:	83 ca 0e             	or     edx,0xe
c000f03d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f044:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f047:	83 e2 ef             	and    edx,0xffffffef
c000f04a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f04d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f051:	74 04                	je     c000f057 <IDTEntry::IDTEntry(bool)+0x43>
c000f053:	b2 03                	mov    dl,0x3
c000f055:	eb 02                	jmp    c000f059 <IDTEntry::IDTEntry(bool)+0x45>
c000f057:	b2 00                	mov    dl,0x0
c000f059:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f05d:	83 e2 03             	and    edx,0x3
c000f060:	88 d1                	mov    cl,dl
c000f062:	c1 e1 05             	shl    ecx,0x5
c000f065:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f068:	83 e2 9f             	and    edx,0xffffff9f
c000f06b:	09 ca                	or     edx,ecx
c000f06d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f074:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f077:	83 ca 80             	or     edx,0xffffff80
c000f07a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f07d:	90                   	nop
c000f07e:	83 c4 04             	add    esp,0x4
c000f081:	c3                   	ret    

c000f082 <IDTEntry::setOffset(unsigned int)>:
c000f082:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08a:	66 89 02             	mov    WORD PTR [edx],ax
c000f08d:	c1 e8 10             	shr    eax,0x10
c000f090:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f094:	c3                   	ret    
c000f095:	90                   	nop

c000f096 <IDT::IDT()>:
c000f096:	90                   	nop
c000f097:	c3                   	ret    

c000f098 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09c:	83 c0 30             	add    eax,0x30
c000f09f:	c3                   	ret    

c000f0a0 <IDT::addEntry(IDTEntry, int)>:
c000f0a0:	53                   	push   ebx
c000f0a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0b4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0b8:	5b                   	pop    ebx
c000f0b9:	c3                   	ret    

c000f0ba <IDT::addEntry(int, void (*)(), bool)>:
c000f0ba:	53                   	push   ebx
c000f0bb:	83 ec 10             	sub    esp,0x10
c000f0be:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0c3:	50                   	push   eax
c000f0c4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0c8:	53                   	push   ebx
c000f0c9:	e8 46 ff ff ff       	call   c000f014 <IDTEntry::IDTEntry(bool)>
c000f0ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0d2:	53                   	push   ebx
c000f0d3:	e8 aa ff ff ff       	call   c000f082 <IDTEntry::setOffset(unsigned int)>
c000f0d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0e8:	e8 b3 ff ff ff       	call   c000f0a0 <IDT::addEntry(IDTEntry, int)>
c000f0ed:	83 c4 30             	add    esp,0x30
c000f0f0:	5b                   	pop    ebx
c000f0f1:	c3                   	ret    

c000f0f2 <IDT::flush()>:
c000f0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f6:	66 c7 05 58 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002da58,0x7ff
c000f0ff:	a3 5a da 02 c0       	mov    ds:0xc002da5a,eax
c000f104:	0f 01 1d 58 da 02 c0 	lidtd  ds:0xc002da58
c000f10b:	c3                   	ret    

c000f10c <IDT::setup()>:
c000f10c:	57                   	push   edi
c000f10d:	56                   	push   esi
c000f10e:	53                   	push   ebx
c000f10f:	83 ec 10             	sub    esp,0x10
c000f112:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f116:	6a 00                	push   0x0
c000f118:	68 68 04 00 c0       	push   0xc0000468
c000f11d:	6a 00                	push   0x0
c000f11f:	53                   	push   ebx
c000f120:	e8 95 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f125:	6a 00                	push   0x0
c000f127:	68 78 04 00 c0       	push   0xc0000478
c000f12c:	6a 01                	push   0x1
c000f12e:	53                   	push   ebx
c000f12f:	e8 86 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	6a 00                	push   0x0
c000f139:	68 82 04 00 c0       	push   0xc0000482
c000f13e:	6a 02                	push   0x2
c000f140:	53                   	push   ebx
c000f141:	e8 74 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f146:	6a 00                	push   0x0
c000f148:	68 8c 04 00 c0       	push   0xc000048c
c000f14d:	6a 03                	push   0x3
c000f14f:	53                   	push   ebx
c000f150:	e8 65 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	6a 00                	push   0x0
c000f15a:	68 96 04 00 c0       	push   0xc0000496
c000f15f:	6a 04                	push   0x4
c000f161:	53                   	push   ebx
c000f162:	e8 53 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f167:	6a 00                	push   0x0
c000f169:	68 a0 04 00 c0       	push   0xc00004a0
c000f16e:	6a 05                	push   0x5
c000f170:	53                   	push   ebx
c000f171:	e8 44 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f176:	83 c4 20             	add    esp,0x20
c000f179:	6a 00                	push   0x0
c000f17b:	68 aa 04 00 c0       	push   0xc00004aa
c000f180:	6a 06                	push   0x6
c000f182:	53                   	push   ebx
c000f183:	e8 32 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f188:	6a 00                	push   0x0
c000f18a:	68 b4 04 00 c0       	push   0xc00004b4
c000f18f:	6a 07                	push   0x7
c000f191:	53                   	push   ebx
c000f192:	e8 23 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f197:	83 c4 20             	add    esp,0x20
c000f19a:	6a 00                	push   0x0
c000f19c:	68 be 04 00 c0       	push   0xc00004be
c000f1a1:	6a 08                	push   0x8
c000f1a3:	53                   	push   ebx
c000f1a4:	e8 11 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b0:	6a 09                	push   0x9
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 02 ff ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	83 c4 20             	add    esp,0x20
c000f1bb:	6a 00                	push   0x0
c000f1bd:	68 d0 04 00 c0       	push   0xc00004d0
c000f1c2:	6a 0a                	push   0xa
c000f1c4:	53                   	push   ebx
c000f1c5:	e8 f0 fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d1:	6a 0b                	push   0xb
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 e1 fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	83 c4 20             	add    esp,0x20
c000f1dc:	6a 00                	push   0x0
c000f1de:	68 e0 04 00 c0       	push   0xc00004e0
c000f1e3:	6a 0c                	push   0xc
c000f1e5:	53                   	push   ebx
c000f1e6:	e8 cf fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 e8 04 00 c0       	push   0xc00004e8
c000f1f2:	6a 0d                	push   0xd
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 c0 fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	83 c4 20             	add    esp,0x20
c000f1fd:	6a 00                	push   0x0
c000f1ff:	68 f0 04 00 c0       	push   0xc00004f0
c000f204:	6a 0e                	push   0xe
c000f206:	53                   	push   ebx
c000f207:	e8 ae fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f20c:	6a 00                	push   0x0
c000f20e:	68 f8 04 00 c0       	push   0xc00004f8
c000f213:	6a 0f                	push   0xf
c000f215:	53                   	push   ebx
c000f216:	e8 9f fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	83 c4 20             	add    esp,0x20
c000f21e:	6a 00                	push   0x0
c000f220:	68 02 05 00 c0       	push   0xc0000502
c000f225:	6a 10                	push   0x10
c000f227:	53                   	push   ebx
c000f228:	e8 8d fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f22d:	6a 00                	push   0x0
c000f22f:	68 0c 05 00 c0       	push   0xc000050c
c000f234:	6a 11                	push   0x11
c000f236:	53                   	push   ebx
c000f237:	e8 7e fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	83 c4 20             	add    esp,0x20
c000f23f:	6a 00                	push   0x0
c000f241:	68 16 05 00 c0       	push   0xc0000516
c000f246:	6a 12                	push   0x12
c000f248:	53                   	push   ebx
c000f249:	e8 6c fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f24e:	6a 01                	push   0x1
c000f250:	68 b0 05 00 c0       	push   0xc00005b0
c000f255:	6a 60                	push   0x60
c000f257:	53                   	push   ebx
c000f258:	e8 5d fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	83 c4 20             	add    esp,0x20
c000f260:	6a 00                	push   0x0
c000f262:	68 b7 05 00 c0       	push   0xc00005b7
c000f267:	6a 20                	push   0x20
c000f269:	53                   	push   ebx
c000f26a:	e8 4b fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f26f:	6a 00                	push   0x0
c000f271:	68 a2 05 00 c0       	push   0xc00005a2
c000f276:	6a 21                	push   0x21
c000f278:	53                   	push   ebx
c000f279:	e8 3c fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	83 c4 20             	add    esp,0x20
c000f281:	6a 00                	push   0x0
c000f283:	68 a9 05 00 c0       	push   0xc00005a9
c000f288:	6a 22                	push   0x22
c000f28a:	53                   	push   ebx
c000f28b:	e8 2a fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f290:	6a 00                	push   0x0
c000f292:	68 20 05 00 c0       	push   0xc0000520
c000f297:	6a 23                	push   0x23
c000f299:	53                   	push   ebx
c000f29a:	e8 1b fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f29f:	83 c4 20             	add    esp,0x20
c000f2a2:	6a 00                	push   0x0
c000f2a4:	68 2a 05 00 c0       	push   0xc000052a
c000f2a9:	6a 24                	push   0x24
c000f2ab:	53                   	push   ebx
c000f2ac:	e8 09 fe ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f2b1:	6a 00                	push   0x0
c000f2b3:	68 34 05 00 c0       	push   0xc0000534
c000f2b8:	6a 25                	push   0x25
c000f2ba:	53                   	push   ebx
c000f2bb:	e8 fa fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f2c0:	83 c4 20             	add    esp,0x20
c000f2c3:	6a 00                	push   0x0
c000f2c5:	68 3e 05 00 c0       	push   0xc000053e
c000f2ca:	6a 26                	push   0x26
c000f2cc:	53                   	push   ebx
c000f2cd:	e8 e8 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f2d2:	6a 00                	push   0x0
c000f2d4:	68 48 05 00 c0       	push   0xc0000548
c000f2d9:	6a 27                	push   0x27
c000f2db:	53                   	push   ebx
c000f2dc:	e8 d9 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f2e1:	83 c4 20             	add    esp,0x20
c000f2e4:	6a 00                	push   0x0
c000f2e6:	68 52 05 00 c0       	push   0xc0000552
c000f2eb:	6a 28                	push   0x28
c000f2ed:	53                   	push   ebx
c000f2ee:	e8 c7 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f2f3:	6a 00                	push   0x0
c000f2f5:	68 5c 05 00 c0       	push   0xc000055c
c000f2fa:	6a 29                	push   0x29
c000f2fc:	53                   	push   ebx
c000f2fd:	e8 b8 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f302:	83 c4 20             	add    esp,0x20
c000f305:	6a 00                	push   0x0
c000f307:	68 66 05 00 c0       	push   0xc0000566
c000f30c:	6a 2a                	push   0x2a
c000f30e:	53                   	push   ebx
c000f30f:	e8 a6 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f314:	6a 00                	push   0x0
c000f316:	68 70 05 00 c0       	push   0xc0000570
c000f31b:	6a 2b                	push   0x2b
c000f31d:	53                   	push   ebx
c000f31e:	e8 97 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f323:	83 c4 20             	add    esp,0x20
c000f326:	6a 00                	push   0x0
c000f328:	68 7a 05 00 c0       	push   0xc000057a
c000f32d:	6a 2c                	push   0x2c
c000f32f:	53                   	push   ebx
c000f330:	e8 85 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f335:	6a 00                	push   0x0
c000f337:	68 84 05 00 c0       	push   0xc0000584
c000f33c:	6a 2d                	push   0x2d
c000f33e:	53                   	push   ebx
c000f33f:	e8 76 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f344:	83 c4 20             	add    esp,0x20
c000f347:	6a 00                	push   0x0
c000f349:	68 8e 05 00 c0       	push   0xc000058e
c000f34e:	6a 2e                	push   0x2e
c000f350:	53                   	push   ebx
c000f351:	e8 64 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f356:	6a 00                	push   0x0
c000f358:	68 98 05 00 c0       	push   0xc0000598
c000f35d:	6a 2f                	push   0x2f
c000f35f:	53                   	push   ebx
c000f360:	e8 55 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f365:	83 c4 20             	add    esp,0x20
c000f368:	6a 00                	push   0x0
c000f36a:	68 ed 05 00 c0       	push   0xc00005ed
c000f36f:	6a 30                	push   0x30
c000f371:	53                   	push   ebx
c000f372:	e8 43 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f377:	6a 00                	push   0x0
c000f379:	68 f7 05 00 c0       	push   0xc00005f7
c000f37e:	6a 31                	push   0x31
c000f380:	53                   	push   ebx
c000f381:	e8 34 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	6a 00                	push   0x0
c000f38b:	68 01 06 00 c0       	push   0xc0000601
c000f390:	6a 32                	push   0x32
c000f392:	53                   	push   ebx
c000f393:	e8 22 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f398:	6a 00                	push   0x0
c000f39a:	68 0b 06 00 c0       	push   0xc000060b
c000f39f:	6a 33                	push   0x33
c000f3a1:	53                   	push   ebx
c000f3a2:	e8 13 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f3a7:	83 c4 20             	add    esp,0x20
c000f3aa:	6a 00                	push   0x0
c000f3ac:	68 15 06 00 c0       	push   0xc0000615
c000f3b1:	6a 34                	push   0x34
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 01 fd ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f3b9:	6a 00                	push   0x0
c000f3bb:	68 1f 06 00 c0       	push   0xc000061f
c000f3c0:	6a 35                	push   0x35
c000f3c2:	53                   	push   ebx
c000f3c3:	e8 f2 fc ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f3c8:	83 c4 20             	add    esp,0x20
c000f3cb:	6a 00                	push   0x0
c000f3cd:	68 29 06 00 c0       	push   0xc0000629
c000f3d2:	6a 36                	push   0x36
c000f3d4:	53                   	push   ebx
c000f3d5:	e8 e0 fc ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f3da:	6a 00                	push   0x0
c000f3dc:	68 33 06 00 c0       	push   0xc0000633
c000f3e1:	6a 37                	push   0x37
c000f3e3:	53                   	push   ebx
c000f3e4:	e8 d1 fc ff ff       	call   c000f0ba <IDT::addEntry(int, void (*)(), bool)>
c000f3e9:	83 c4 20             	add    esp,0x20
c000f3ec:	e8 9a 26 00 00       	call   c0011a8b <Virt::getAKernelVAS()>
c000f3f1:	52                   	push   edx
c000f3f2:	6a 03                	push   0x3
c000f3f4:	6a 02                	push   0x2
c000f3f6:	50                   	push   eax
c000f3f7:	e8 ca 2c 00 00       	call   c00120c6 <VAS::allocatePages(int, int)>
c000f3fc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f403:	89 c6                	mov    esi,eax
c000f405:	e8 12 02 00 00       	call   c000f61c <malloc>
c000f40a:	81 c6 00 20 00 00    	add    esi,0x2000
c000f410:	89 04 24             	mov    DWORD PTR [esp],eax
c000f413:	89 c7                	mov    edi,eax
c000f415:	e8 12 1e 00 00       	call   c001122c <TSS::TSS()>
c000f41a:	83 c4 0c             	add    esp,0xc
c000f41d:	68 be 04 00 c0       	push   0xc00004be
c000f422:	56                   	push   esi
c000f423:	57                   	push   edi
c000f424:	e8 43 1e 00 00       	call   c001126c <TSS::setup(unsigned long, unsigned long)>
c000f429:	59                   	pop    ecx
c000f42a:	89 c6                	mov    esi,eax
c000f42c:	5f                   	pop    edi
c000f42d:	6a 00                	push   0x0
c000f42f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f433:	50                   	push   eax
c000f434:	e8 db fb ff ff       	call   c000f014 <IDTEntry::IDTEntry(bool)>
c000f439:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f43d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f442:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f449:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f44f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f453:	80 ce 05             	or     dh,0x5
c000f456:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f459:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f45d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f461:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f464:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f467:	e8 86 fc ff ff       	call   c000f0f2 <IDT::flush()>
c000f46c:	83 c4 20             	add    esp,0x20
c000f46f:	5b                   	pop    ebx
c000f470:	5e                   	pop    esi
c000f471:	5f                   	pop    edi
c000f472:	c3                   	ret    

c000f473 <sbrk>:
c000f473:	55                   	push   ebp
c000f474:	57                   	push   edi
c000f475:	56                   	push   esi
c000f476:	53                   	push   ebx
c000f477:	83 ec 1c             	sub    esp,0x1c
c000f47a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f47e:	85 c0                	test   eax,eax
c000f480:	74 3e                	je     c000f4c0 <sbrk+0x4d>
c000f482:	78 43                	js     c000f4c7 <sbrk+0x54>
c000f484:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c000f48a:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f490:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f496:	83 e2 01             	and    edx,0x1
c000f499:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f49d:	8b 0d 64 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c964
c000f4a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4a7:	05 ff 0f 00 00       	add    eax,0xfff
c000f4ac:	89 c2                	mov    edx,eax
c000f4ae:	78 2f                	js     c000f4df <sbrk+0x6c>
c000f4b0:	c1 fa 0c             	sar    edx,0xc
c000f4b3:	89 d7                	mov    edi,edx
c000f4b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4b9:	be 00 00 00 00       	mov    esi,0x0
c000f4be:	eb 36                	jmp    c000f4f6 <sbrk+0x83>
c000f4c0:	a1 64 c9 02 c0       	mov    eax,ds:0xc002c964
c000f4c5:	eb 74                	jmp    c000f53b <sbrk+0xc8>
c000f4c7:	83 ec 08             	sub    esp,0x8
c000f4ca:	50                   	push   eax
c000f4cb:	68 48 99 02 c0       	push   0xc0029948
c000f4d0:	e8 16 34 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4dd:	eb 5c                	jmp    c000f53b <sbrk+0xc8>
c000f4df:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4e5:	eb c9                	jmp    c000f4b0 <sbrk+0x3d>
c000f4e7:	81 05 64 c9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c964,0x1000
c000f4f1:	46                   	inc    esi
c000f4f2:	39 f7                	cmp    edi,esi
c000f4f4:	74 34                	je     c000f52a <sbrk+0xb7>
c000f4f6:	e8 90 25 00 00       	call   c0011a8b <Virt::getAKernelVAS()>
c000f4fb:	89 c3                	mov    ebx,eax
c000f4fd:	8b 2d 64 c9 02 c0    	mov    ebp,DWORD PTR ds:0xc002c964
c000f503:	e8 b1 07 00 00       	call   c000fcb9 <Phys::allocatePage()>
c000f508:	68 01 04 00 00       	push   0x401
c000f50d:	55                   	push   ebp
c000f50e:	50                   	push   eax
c000f50f:	53                   	push   ebx
c000f510:	e8 b1 2a 00 00       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f51d:	74 c8                	je     c000f4e7 <sbrk+0x74>
c000f51f:	8b 1d 64 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c964
c000f525:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f528:	eb bd                	jmp    c000f4e7 <sbrk+0x74>
c000f52a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f52f:	75 12                	jne    c000f543 <sbrk+0xd0>
c000f531:	0f 20 d8             	mov    eax,cr3
c000f534:	0f 22 d8             	mov    cr3,eax
c000f537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f53b:	83 c4 1c             	add    esp,0x1c
c000f53e:	5b                   	pop    ebx
c000f53f:	5e                   	pop    esi
c000f540:	5f                   	pop    edi
c000f541:	5d                   	pop    ebp
c000f542:	c3                   	ret    
c000f543:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f547:	89 cb                	mov    ebx,ecx
c000f549:	c1 eb 0a             	shr    ebx,0xa
c000f54c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f552:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f55c:	c1 e0 0c             	shl    eax,0xc
c000f55f:	01 c8                	add    eax,ecx
c000f561:	c1 e8 0a             	shr    eax,0xa
c000f564:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f569:	2d 00 00 40 00       	sub    eax,0x400000
c000f56e:	39 c3                	cmp    ebx,eax
c000f570:	77 c5                	ja     c000f537 <sbrk+0xc4>
c000f572:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f575:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f57b:	39 d8                	cmp    eax,ebx
c000f57d:	73 f3                	jae    c000f572 <sbrk+0xff>
c000f57f:	eb b6                	jmp    c000f537 <sbrk+0xc4>

c000f581 <mmap>:
c000f581:	83 ec 18             	sub    esp,0x18
c000f584:	68 78 99 02 c0       	push   0xc0029978
c000f589:	e8 d1 a8 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000f58e:	b8 00 00 00 00       	mov    eax,0x0
c000f593:	83 c4 1c             	add    esp,0x1c
c000f596:	c3                   	ret    

c000f597 <munmap>:
c000f597:	83 ec 18             	sub    esp,0x18
c000f59a:	68 7d 99 02 c0       	push   0xc002997d
c000f59f:	e8 bb a8 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000f5a4:	b8 00 00 00 00       	mov    eax,0x0
c000f5a9:	83 c4 1c             	add    esp,0x1c
c000f5ac:	c3                   	ret    

c000f5ad <liballoc_lock()>:
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	e8 05 df 00 00       	call   c001d4ba <lockScheduler()>
c000f5b5:	b8 00 00 00 00       	mov    eax,0x0
c000f5ba:	83 c4 0c             	add    esp,0xc
c000f5bd:	c3                   	ret    

c000f5be <liballoc_unlock()>:
c000f5be:	83 ec 0c             	sub    esp,0xc
c000f5c1:	e8 f6 de 00 00       	call   c001d4bc <unlockScheduler()>
c000f5c6:	b8 00 00 00 00       	mov    eax,0x0
c000f5cb:	83 c4 0c             	add    esp,0xc
c000f5ce:	c3                   	ret    

c000f5cf <liballoc_alloc(int)>:
c000f5cf:	83 ec 0c             	sub    esp,0xc
c000f5d2:	e8 b4 24 00 00       	call   c0011a8b <Virt::getAKernelVAS()>
c000f5d7:	83 ec 04             	sub    esp,0x4
c000f5da:	6a 01                	push   0x1
c000f5dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e0:	50                   	push   eax
c000f5e1:	e8 e0 2a 00 00       	call   c00120c6 <VAS::allocatePages(int, int)>
c000f5e6:	83 c4 1c             	add    esp,0x1c
c000f5e9:	c3                   	ret    

c000f5ea <liballoc_free(void*, int)>:
c000f5ea:	83 ec 0c             	sub    esp,0xc
c000f5ed:	e8 99 24 00 00       	call   c0011a8b <Virt::getAKernelVAS()>
c000f5f2:	83 ec 08             	sub    esp,0x8
c000f5f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5f9:	50                   	push   eax
c000f5fa:	e8 83 27 00 00       	call   c0011d82 <VAS::freeAllocatedPages(unsigned long)>
c000f5ff:	b8 00 00 00 00       	mov    eax,0x0
c000f604:	83 c4 1c             	add    esp,0x1c
c000f607:	c3                   	ret    

c000f608 <realloc>:
c000f608:	83 ec 14             	sub    esp,0x14
c000f60b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f60f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f613:	e8 1d 1e ff ff       	call   c0001435 <dlrealloc>
c000f618:	83 c4 1c             	add    esp,0x1c
c000f61b:	c3                   	ret    

c000f61c <malloc>:
c000f61c:	83 ec 18             	sub    esp,0x18
c000f61f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f623:	e8 d0 18 ff ff       	call   c0000ef8 <dlmalloc>
c000f628:	83 c4 1c             	add    esp,0x1c
c000f62b:	c3                   	ret    

c000f62c <free>:
c000f62c:	83 ec 18             	sub    esp,0x18
c000f62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f633:	e8 65 15 ff ff       	call   c0000b9d <dlfree>
c000f638:	83 c4 1c             	add    esp,0x1c
c000f63b:	c3                   	ret    

c000f63c <rfree>:
c000f63c:	83 ec 18             	sub    esp,0x18
c000f63f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f643:	e8 55 15 ff ff       	call   c0000b9d <dlfree>
c000f648:	83 c4 1c             	add    esp,0x1c
c000f64b:	c3                   	ret    

c000f64c <calloc>:
c000f64c:	56                   	push   esi
c000f64d:	53                   	push   ebx
c000f64e:	83 ec 10             	sub    esp,0x10
c000f651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f655:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f65a:	53                   	push   ebx
c000f65b:	e8 bc ff ff ff       	call   c000f61c <malloc>
c000f660:	89 c6                	mov    esi,eax
c000f662:	83 c4 0c             	add    esp,0xc
c000f665:	53                   	push   ebx
c000f666:	6a 00                	push   0x0
c000f668:	50                   	push   eax
c000f669:	e8 4e 10 ff ff       	call   c00006bc <memset>
c000f66e:	89 f0                	mov    eax,esi
c000f670:	83 c4 14             	add    esp,0x14
c000f673:	5b                   	pop    ebx
c000f674:	5e                   	pop    esi
c000f675:	c3                   	ret    

c000f676 <hwTextMode_loadInData(VgaText*)>:
c000f676:	55                   	push   ebp
c000f677:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c000f67c:	57                   	push   edi
c000f67d:	56                   	push   esi
c000f67e:	53                   	push   ebx
c000f67f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f683:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f689:	85 d2                	test   edx,edx
c000f68b:	7e 2f                	jle    c000f6bc <hwTextMode_loadInData(VgaText*)+0x46>
c000f68d:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f693:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f696:	31 f6                	xor    esi,esi
c000f698:	29 fd                	sub    ebp,edi
c000f69a:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f69d:	31 c0                	xor    eax,eax
c000f69f:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6a3:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6a7:	40                   	inc    eax
c000f6a8:	83 f8 50             	cmp    eax,0x50
c000f6ab:	75 f2                	jne    c000f69f <hwTextMode_loadInData(VgaText*)+0x29>
c000f6ad:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6b3:	46                   	inc    esi
c000f6b4:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6ba:	7f de                	jg     c000f69a <hwTextMode_loadInData(VgaText*)+0x24>
c000f6bc:	5b                   	pop    ebx
c000f6bd:	5e                   	pop    esi
c000f6be:	5f                   	pop    edi
c000f6bf:	5d                   	pop    ebp
c000f6c0:	c3                   	ret    

c000f6c1 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c1:	55                   	push   ebp
c000f6c2:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f6c9:	57                   	push   edi
c000f6ca:	56                   	push   esi
c000f6cb:	53                   	push   ebx
c000f6cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d0:	75 50                	jne    c000f722 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6d2:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6d8:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6de:	8b 15 80 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c980
c000f6e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6e8:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6ee:	eb 0e                	jmp    c000f6fe <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f0:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6f6:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6fc:	89 da                	mov    edx,ebx
c000f6fe:	83 e5 0f             	and    ebp,0xf
c000f701:	c1 e0 04             	shl    eax,0x4
c000f704:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f707:	0f b6 c0             	movzx  eax,al
c000f70a:	41                   	inc    ecx
c000f70b:	09 e8                	or     eax,ebp
c000f70d:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f711:	c1 e0 08             	shl    eax,0x8
c000f714:	09 e8                	or     eax,ebp
c000f716:	39 fb                	cmp    ebx,edi
c000f718:	66 89 02             	mov    WORD PTR [edx],ax
c000f71b:	75 d3                	jne    c000f6f0 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f71d:	5b                   	pop    ebx
c000f71e:	5e                   	pop    esi
c000f71f:	5f                   	pop    edi
c000f720:	5d                   	pop    ebp
c000f721:	c3                   	ret    
c000f722:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f72c:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f736:	31 c0                	xor    eax,eax
c000f738:	bd 02 00 00 00       	mov    ebp,0x2
c000f73d:	eb 9f                	jmp    c000f6de <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f73f <hwTextMode_showCursor(VgaText*, bool)>:
c000f73f:	56                   	push   esi
c000f740:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f747:	53                   	push   ebx
c000f748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74c:	75 39                	jne    c000f787 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f74e:	84 c0                	test   al,al
c000f750:	74 38                	je     c000f78a <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f752:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f757:	b0 0a                	mov    al,0xa
c000f759:	89 da                	mov    edx,ebx
c000f75b:	ee                   	out    dx,al
c000f75c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f761:	89 ca                	mov    edx,ecx
c000f763:	ec                   	in     al,dx
c000f764:	b2 0f                	mov    dl,0xf
c000f766:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f76a:	83 e0 c0             	and    eax,0xffffffc0
c000f76d:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f773:	09 d0                	or     eax,edx
c000f775:	89 ca                	mov    edx,ecx
c000f777:	ee                   	out    dx,al
c000f778:	b0 0b                	mov    al,0xb
c000f77a:	89 da                	mov    edx,ebx
c000f77c:	ee                   	out    dx,al
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ec                   	in     al,dx
c000f780:	83 e0 e0             	and    eax,0xffffffe0
c000f783:	83 c8 0f             	or     eax,0xf
c000f786:	ee                   	out    dx,al
c000f787:	5b                   	pop    ebx
c000f788:	5e                   	pop    esi
c000f789:	c3                   	ret    
c000f78a:	b0 0a                	mov    al,0xa
c000f78c:	ba d4 03 00 00       	mov    edx,0x3d4
c000f791:	ee                   	out    dx,al
c000f792:	b0 20                	mov    al,0x20
c000f794:	ba d5 03 00 00       	mov    edx,0x3d5
c000f799:	ee                   	out    dx,al
c000f79a:	5b                   	pop    ebx
c000f79b:	5e                   	pop    esi
c000f79c:	c3                   	ret    

c000f79d <hwTextMode_update(VgaText*)>:
c000f79d:	c3                   	ret    

c000f79e <hwTextMode_updateCursor(VgaText*)>:
c000f79e:	56                   	push   esi
c000f79f:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f7a6:	53                   	push   ebx
c000f7a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ab:	75 3f                	jne    c000f7ec <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7ad:	be d4 03 00 00       	mov    esi,0x3d4
c000f7b2:	b9 19 00 00 00       	mov    ecx,0x19
c000f7b7:	89 f2                	mov    edx,esi
c000f7b9:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7bf:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7c5:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7c8:	c1 e1 04             	shl    ecx,0x4
c000f7cb:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d1:	b0 0f                	mov    al,0xf
c000f7d3:	ee                   	out    dx,al
c000f7d4:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7d9:	88 c8                	mov    al,cl
c000f7db:	89 da                	mov    edx,ebx
c000f7dd:	ee                   	out    dx,al
c000f7de:	b0 0e                	mov    al,0xe
c000f7e0:	89 f2                	mov    edx,esi
c000f7e2:	ee                   	out    dx,al
c000f7e3:	89 c8                	mov    eax,ecx
c000f7e5:	89 da                	mov    edx,ebx
c000f7e7:	66 c1 e8 08          	shr    ax,0x8
c000f7eb:	ee                   	out    dx,al
c000f7ec:	5b                   	pop    ebx
c000f7ed:	5e                   	pop    esi
c000f7ee:	c3                   	ret    

c000f7ef <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7f3:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f7fa:	75 38                	jne    c000f834 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f7fc:	ba da 03 00 00       	mov    edx,0x3da
c000f801:	84 c0                	test   al,al
c000f803:	75 18                	jne    c000f81d <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f805:	ec                   	in     al,dx
c000f806:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f80b:	b0 30                	mov    al,0x30
c000f80d:	89 ca                	mov    edx,ecx
c000f80f:	ee                   	out    dx,al
c000f810:	ba c1 03 00 00       	mov    edx,0x3c1
c000f815:	ec                   	in     al,dx
c000f816:	83 c8 08             	or     eax,0x8
c000f819:	89 ca                	mov    edx,ecx
c000f81b:	ee                   	out    dx,al
c000f81c:	c3                   	ret    
c000f81d:	ec                   	in     al,dx
c000f81e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f823:	b0 30                	mov    al,0x30
c000f825:	89 ca                	mov    edx,ecx
c000f827:	ee                   	out    dx,al
c000f828:	ba c1 03 00 00       	mov    edx,0x3c1
c000f82d:	ec                   	in     al,dx
c000f82e:	83 e0 f7             	and    eax,0xfffffff7
c000f831:	89 ca                	mov    edx,ecx
c000f833:	ee                   	out    dx,al
c000f834:	c3                   	ret    

c000f835 <hwTextMode_scrollScreen(VgaText*)>:
c000f835:	55                   	push   ebp
c000f836:	57                   	push   edi
c000f837:	56                   	push   esi
c000f838:	53                   	push   ebx
c000f839:	83 ec 1c             	sub    esp,0x1c
c000f83c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f840:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f847:	74 14                	je     c000f85d <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f849:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f853:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f85d:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c000f862:	bd 02 00 00 00       	mov    ebp,0x2
c000f867:	05 a0 00 00 00       	add    eax,0xa0
c000f86c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f870:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f874:	31 c0                	xor    eax,eax
c000f876:	eb 0b                	jmp    c000f883 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f878:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f87e:	74 57                	je     c000f8d7 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f880:	43                   	inc    ebx
c000f881:	89 f0                	mov    eax,esi
c000f883:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f889:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f88f:	88 13                	mov    BYTE PTR [ebx],dl
c000f891:	8d 70 01             	lea    esi,[eax+0x1]
c000f894:	83 fd 18             	cmp    ebp,0x18
c000f897:	75 df                	jne    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f899:	a8 01                	test   al,0x1
c000f89b:	75 13                	jne    c000f8b0 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f89d:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a0:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8a6:	75 d8                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	5b                   	pop    ebx
c000f8ac:	5e                   	pop    esi
c000f8ad:	5f                   	pop    edi
c000f8ae:	5d                   	pop    ebp
c000f8af:	c3                   	ret    
c000f8b0:	83 ec 08             	sub    esp,0x8
c000f8b3:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8ba:	50                   	push   eax
c000f8bb:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8bf:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8c6:	50                   	push   eax
c000f8c7:	e8 32 0c 00 00       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c000f8cc:	83 c4 10             	add    esp,0x10
c000f8cf:	88 07                	mov    BYTE PTR [edi],al
c000f8d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8d5:	eb c9                	jmp    c000f8a0 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8d7:	45                   	inc    ebp
c000f8d8:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e0:	eb 8e                	jmp    c000f870 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8e2 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8e2:	57                   	push   edi
c000f8e3:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f8ea:	56                   	push   esi
c000f8eb:	53                   	push   ebx
c000f8ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8f4:	75 65                	jne    c000f95b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8f6:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f8fb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f900:	83 ec 08             	sub    esp,0x8
c000f903:	52                   	push   edx
c000f904:	50                   	push   eax
c000f905:	e8 f4 0b 00 00       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c000f90a:	5a                   	pop    edx
c000f90b:	0f b6 c0             	movzx  eax,al
c000f90e:	59                   	pop    ecx
c000f90f:	50                   	push   eax
c000f910:	0f be c3             	movsx  eax,bl
c000f913:	50                   	push   eax
c000f914:	e8 8b 0c 00 00       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	8b 35 80 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c980
c000f922:	80 3d e0 da 02 c0 00 	cmp    BYTE PTR ds:0xc002dae0,0x0
c000f929:	74 07                	je     c000f932 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f92b:	66 0f be c3          	movsx  ax,bl
c000f92f:	80 cc 02             	or     ah,0x2
c000f932:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f936:	ba 19 00 00 00       	mov    edx,0x19
c000f93b:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f941:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f944:	8d 14 92             	lea    edx,[edx+edx*4]
c000f947:	c1 e1 04             	shl    ecx,0x4
c000f94a:	c1 e2 04             	shl    edx,0x4
c000f94d:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f951:	01 ca                	add    edx,ecx
c000f953:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f957:	5b                   	pop    ebx
c000f958:	5e                   	pop    esi
c000f959:	5f                   	pop    edi
c000f95a:	c3                   	ret    
c000f95b:	b8 02 00 00 00       	mov    eax,0x2
c000f960:	31 d2                	xor    edx,edx
c000f962:	eb 9c                	jmp    c000f900 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f964 <setupTextMode()>:
c000f964:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f969:	83 e0 30             	and    eax,0x30
c000f96c:	66 83 f8 30          	cmp    ax,0x30
c000f970:	75 11                	jne    c000f983 <setupTextMode()+0x1f>
c000f972:	81 2d 80 c9 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002c980,0x8000
c000f97c:	c6 05 e0 da 02 c0 01 	mov    BYTE PTR ds:0xc002dae0,0x1
c000f983:	c7 05 18 db 02 c0 ef f7 00 c0 	mov    DWORD PTR ds:0xc002db18,0xc000f7ef
c000f98d:	c7 05 04 db 02 c0 76 f6 00 c0 	mov    DWORD PTR ds:0xc002db04,0xc000f676
c000f997:	c7 05 00 db 02 c0 c1 f6 00 c0 	mov    DWORD PTR ds:0xc002db00,0xc000f6c1
c000f9a1:	c7 05 0c db 02 c0 35 f8 00 c0 	mov    DWORD PTR ds:0xc002db0c,0xc000f835
c000f9ab:	c7 05 14 db 02 c0 3f f7 00 c0 	mov    DWORD PTR ds:0xc002db14,0xc000f73f
c000f9b5:	c7 05 08 db 02 c0 9d f7 00 c0 	mov    DWORD PTR ds:0xc002db08,0xc000f79d
c000f9bf:	c7 05 10 db 02 c0 9e f7 00 c0 	mov    DWORD PTR ds:0xc002db10,0xc000f79e
c000f9c9:	c7 05 1c db 02 c0 e2 f8 00 c0 	mov    DWORD PTR ds:0xc002db1c,0xc000f8e2
c000f9d3:	c3                   	ret    

c000f9d4 <kernel_main>:
c000f9d4:	57                   	push   edi
c000f9d5:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9da:	56                   	push   esi
c000f9db:	31 f6                	xor    esi,esi
c000f9dd:	53                   	push   ebx
c000f9de:	83 ec 10             	sub    esp,0x10
c000f9e1:	e8 72 09 00 00       	call   c0010358 <installVgaTextImplementation()>
c000f9e6:	e8 79 ff ff ff       	call   c000f964 <setupTextMode()>
c000f9eb:	89 f0                	mov    eax,esi
c000f9ed:	89 fa                	mov    edx,edi
c000f9ef:	ee                   	out    dx,al
c000f9f0:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9f5:	b0 80                	mov    al,0x80
c000f9f7:	89 da                	mov    edx,ebx
c000f9f9:	ee                   	out    dx,al
c000f9fa:	b1 03                	mov    cl,0x3
c000f9fc:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa01:	88 c8                	mov    al,cl
c000fa03:	ee                   	out    dx,al
c000fa04:	89 f0                	mov    eax,esi
c000fa06:	89 fa                	mov    edx,edi
c000fa08:	ee                   	out    dx,al
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	89 da                	mov    edx,ebx
c000fa0d:	ee                   	out    dx,al
c000fa0e:	b0 c7                	mov    al,0xc7
c000fa10:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 0b                	mov    al,0xb
c000fa18:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa1d:	ee                   	out    dx,al
c000fa1e:	83 ec 0c             	sub    esp,0xc
c000fa21:	68 84 99 02 c0       	push   0xc0029984
c000fa26:	e8 c0 2e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fa2b:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa30:	05 ff 0f 00 00       	add    eax,0xfff
c000fa35:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa3d:	e8 d1 03 00 00       	call   c000fe13 <Phys::physicalMemorySetup(unsigned int)>
c000fa42:	e8 c5 1f 00 00       	call   c0011a0c <Virt::virtualMemorySetup()>
c000fa47:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa4d:	83 c4 10             	add    esp,0x10
c000fa50:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa56:	75 0e                	jne    c000fa66 <kernel_main+0x92>
c000fa58:	89 d8                	mov    eax,ebx
c000fa5a:	25 48 03 00 00       	and    eax,0x348
c000fa5f:	3d 00 03 00 00       	cmp    eax,0x300
c000fa64:	74 10                	je     c000fa76 <kernel_main+0xa2>
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	68 fc b1 02 c0       	push   0xc002b1fc
c000fa6e:	e8 ec a3 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000fa73:	83 c4 10             	add    esp,0x10
c000fa76:	83 ec 0c             	sub    esp,0xc
c000fa79:	89 1d 60 da 02 c0    	mov    DWORD PTR ds:0xc002da60,ebx
c000fa7f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa83:	53                   	push   ebx
c000fa84:	e8 37 21 00 00       	call   c0011bc0 <VAS::VAS()>
c000fa89:	89 1d c4 db 02 c0    	mov    DWORD PTR ds:0xc002dbc4,ebx
c000fa8f:	e8 8c 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa94:	c7 04 24 9b 99 02 c0 	mov    DWORD PTR [esp],0xc002999b
c000fa9b:	e8 4b 2e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000faa0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faa7:	e8 70 fb ff ff       	call   c000f61c <malloc>
c000faac:	89 04 24             	mov    DWORD PTR [esp],eax
c000faaf:	89 c6                	mov    esi,eax
c000fab1:	e8 60 ea ff ff       	call   c000e516 <Computer::Computer()>
c000fab6:	58                   	pop    eax
c000fab7:	89 35 48 da 02 c0    	mov    DWORD PTR ds:0xc002da48,esi
c000fabd:	5a                   	pop    edx
c000fabe:	56                   	push   esi
c000fabf:	68 b8 99 02 c0       	push   0xc00299b8
c000fac4:	e8 22 2e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fac9:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c000face:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad0:	6a 00                	push   0x0
c000fad2:	6a 00                	push   0x0
c000fad4:	6a 00                	push   0x0
c000fad6:	50                   	push   eax
c000fad7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fada:	83 c4 14             	add    esp,0x14
c000fadd:	53                   	push   ebx
c000fade:	e8 77 23 00 00       	call   c0011e5a <VAS::~VAS()>
c000fae3:	c7 04 24 cb 99 02 c0 	mov    DWORD PTR [esp],0xc00299cb
c000faea:	e8 70 a3 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000faef:	83 c4 20             	add    esp,0x20
c000faf2:	5b                   	pop    ebx
c000faf3:	5e                   	pop    esi
c000faf4:	5f                   	pop    edi
c000faf5:	c3                   	ret    

c000faf6 <Phys::allocateDMA(unsigned long)>:
c000faf6:	55                   	push   ebp
c000faf7:	31 d2                	xor    edx,edx
c000faf9:	57                   	push   edi
c000fafa:	31 ed                	xor    ebp,ebp
c000fafc:	56                   	push   esi
c000fafd:	31 c9                	xor    ecx,ecx
c000faff:	53                   	push   ebx
c000fb00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb04:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb0a:	31 c0                	xor    eax,eax
c000fb0c:	c1 ee 0c             	shr    esi,0xc
c000fb0f:	eb 17                	jmp    c000fb28 <Phys::allocateDMA(unsigned long)+0x32>
c000fb11:	85 c9                	test   ecx,ecx
c000fb13:	75 04                	jne    c000fb19 <Phys::allocateDMA(unsigned long)+0x23>
c000fb15:	89 d5                	mov    ebp,edx
c000fb17:	89 d0                	mov    eax,edx
c000fb19:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb1c:	39 de                	cmp    esi,ebx
c000fb1e:	74 20                	je     c000fb40 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb20:	42                   	inc    edx
c000fb21:	89 d9                	mov    ecx,ebx
c000fb23:	83 fa 2f             	cmp    edx,0x2f
c000fb26:	7f 11                	jg     c000fb39 <Phys::allocateDMA(unsigned long)+0x43>
c000fb28:	80 ba a0 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2560],0x0
c000fb2f:	74 e0                	je     c000fb11 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb31:	31 c9                	xor    ecx,ecx
c000fb33:	42                   	inc    edx
c000fb34:	83 fa 2f             	cmp    edx,0x2f
c000fb37:	7e ef                	jle    c000fb28 <Phys::allocateDMA(unsigned long)+0x32>
c000fb39:	5b                   	pop    ebx
c000fb3a:	31 c0                	xor    eax,eax
c000fb3c:	5e                   	pop    esi
c000fb3d:	5f                   	pop    edi
c000fb3e:	5d                   	pop    ebp
c000fb3f:	c3                   	ret    
c000fb40:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb43:	89 d7                	mov    edi,edx
c000fb45:	4f                   	dec    edi
c000fb46:	79 03                	jns    c000fb4b <Phys::allocateDMA(unsigned long)+0x55>
c000fb48:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb4b:	c1 ff 04             	sar    edi,0x4
c000fb4e:	89 c2                	mov    edx,eax
c000fb50:	c1 fa 04             	sar    edx,0x4
c000fb53:	39 fa                	cmp    edx,edi
c000fb55:	75 2f                	jne    c000fb86 <Phys::allocateDMA(unsigned long)+0x90>
c000fb57:	85 db                	test   ebx,ebx
c000fb59:	74 1a                	je     c000fb75 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb5b:	be a0 da 02 c0       	mov    esi,0xc002daa0
c000fb60:	8d 90 a0 da 02 c0    	lea    edx,[eax-0x3ffd2560]
c000fb66:	f7 d6                	not    esi
c000fb68:	29 c6                	sub    esi,eax
c000fb6a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb6d:	42                   	inc    edx
c000fb6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb71:	39 d9                	cmp    ecx,ebx
c000fb73:	7f f5                	jg     c000fb6a <Phys::allocateDMA(unsigned long)+0x74>
c000fb75:	85 ff                	test   edi,edi
c000fb77:	74 13                	je     c000fb8c <Phys::allocateDMA(unsigned long)+0x96>
c000fb79:	5b                   	pop    ebx
c000fb7a:	05 50 20 0c 00       	add    eax,0xc2050
c000fb7f:	5e                   	pop    esi
c000fb80:	c1 e0 0c             	shl    eax,0xc
c000fb83:	5f                   	pop    edi
c000fb84:	5d                   	pop    ebp
c000fb85:	c3                   	ret    
c000fb86:	89 ea                	mov    edx,ebp
c000fb88:	31 c9                	xor    ecx,ecx
c000fb8a:	eb a7                	jmp    c000fb33 <Phys::allocateDMA(unsigned long)+0x3d>
c000fb8c:	5b                   	pop    ebx
c000fb8d:	c1 e0 0c             	shl    eax,0xc
c000fb90:	5e                   	pop    esi
c000fb91:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb96:	5f                   	pop    edi
c000fb97:	5d                   	pop    ebp
c000fb98:	c3                   	ret    

c000fb99 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fba1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fba7:	c1 e9 0c             	shr    ecx,0xc
c000fbaa:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbaf:	76 25                	jbe    c000fbd6 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbb1:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbb6:	c1 e8 0c             	shr    eax,0xc
c000fbb9:	8d 50 10             	lea    edx,[eax+0x10]
c000fbbc:	85 c9                	test   ecx,ecx
c000fbbe:	74 15                	je     c000fbd5 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbc0:	8d 82 a0 da 02 c0    	lea    eax,[edx-0x3ffd2560]
c000fbc6:	8d 94 11 a0 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2560]
c000fbcd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbd0:	40                   	inc    eax
c000fbd1:	39 d0                	cmp    eax,edx
c000fbd3:	75 f8                	jne    c000fbcd <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbd5:	c3                   	ret    
c000fbd6:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbdc:	c1 ea 0c             	shr    edx,0xc
c000fbdf:	eb db                	jmp    c000fbbc <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbe1 <Phys::setPageState(unsigned long, bool)>:
c000fbe1:	56                   	push   esi
c000fbe2:	ba 01 00 00 00       	mov    edx,0x1
c000fbe7:	53                   	push   ebx
c000fbe8:	8b 35 68 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c968
c000fbee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbf6:	89 c8                	mov    eax,ecx
c000fbf8:	83 e1 07             	and    ecx,0x7
c000fbfb:	c1 e8 03             	shr    eax,0x3
c000fbfe:	d3 e3                	shl    ebx,cl
c000fc00:	01 c6                	add    esi,eax
c000fc02:	d3 e2                	shl    edx,cl
c000fc04:	f7 d2                	not    edx
c000fc06:	20 16                	and    BYTE PTR [esi],dl
c000fc08:	03 05 68 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c968
c000fc0e:	08 18                	or     BYTE PTR [eax],bl
c000fc10:	5b                   	pop    ebx
c000fc11:	5e                   	pop    esi
c000fc12:	c3                   	ret    

c000fc13 <Phys::getPageState(unsigned long)>:
c000fc13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc17:	8b 15 68 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c968
c000fc1d:	89 c8                	mov    eax,ecx
c000fc1f:	83 e1 07             	and    ecx,0x7
c000fc22:	c1 e8 03             	shr    eax,0x3
c000fc25:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc29:	d3 f8                	sar    eax,cl
c000fc2b:	83 e0 01             	and    eax,0x1
c000fc2e:	c3                   	ret    

c000fc2f <Phys::freePage(unsigned long)>:
c000fc2f:	53                   	push   ebx
c000fc30:	83 ec 08             	sub    esp,0x8
c000fc33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc37:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc3d:	76 57                	jbe    c000fc96 <Phys::freePage(unsigned long)+0x67>
c000fc3f:	c1 eb 0c             	shr    ebx,0xc
c000fc42:	53                   	push   ebx
c000fc43:	e8 cb ff ff ff       	call   c000fc13 <Phys::getPageState(unsigned long)>
c000fc48:	5a                   	pop    edx
c000fc49:	84 c0                	test   al,al
c000fc4b:	74 5b                	je     c000fca8 <Phys::freePage(unsigned long)+0x79>
c000fc4d:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c000fc52:	48                   	dec    eax
c000fc53:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c000fc58:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc5b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc5e:	c1 e0 02             	shl    eax,0x2
c000fc61:	99                   	cdq    
c000fc62:	f7 3d 90 da 02 c0    	idiv   DWORD PTR ds:0xc002da90
c000fc68:	39 05 88 da 02 c0    	cmp    DWORD PTR ds:0xc002da88,eax
c000fc6e:	75 13                	jne    c000fc83 <Phys::freePage(unsigned long)+0x54>
c000fc70:	83 ec 08             	sub    esp,0x8
c000fc73:	6a 00                	push   0x0
c000fc75:	53                   	push   ebx
c000fc76:	e8 66 ff ff ff       	call   c000fbe1 <Phys::setPageState(unsigned long, bool)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	83 c4 08             	add    esp,0x8
c000fc81:	5b                   	pop    ebx
c000fc82:	c3                   	ret    
c000fc83:	83 ec 0c             	sub    esp,0xc
c000fc86:	a3 88 da 02 c0       	mov    ds:0xc002da88,eax
c000fc8b:	50                   	push   eax
c000fc8c:	e8 5b 0a 00 00       	call   c00106ec <VgaText::updateRAMUsageDisplay(int)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	eb da                	jmp    c000fc70 <Phys::freePage(unsigned long)+0x41>
c000fc96:	68 00 10 00 00       	push   0x1000
c000fc9b:	53                   	push   ebx
c000fc9c:	e8 f8 fe ff ff       	call   c000fb99 <Phys::freeDMA(unsigned long, unsigned long)>
c000fca1:	59                   	pop    ecx
c000fca2:	5b                   	pop    ebx
c000fca3:	83 c4 08             	add    esp,0x8
c000fca6:	5b                   	pop    ebx
c000fca7:	c3                   	ret    
c000fca8:	c7 44 24 10 e6 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc00299e6
c000fcb0:	83 c4 08             	add    esp,0x8
c000fcb3:	5b                   	pop    ebx
c000fcb4:	e9 a6 a1 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>

c000fcb9 <Phys::allocatePage()>:
c000fcb9:	56                   	push   esi
c000fcba:	53                   	push   ebx
c000fcbb:	51                   	push   ecx
c000fcbc:	8b 35 80 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da80
c000fcc2:	89 f3                	mov    ebx,esi
c000fcc4:	eb 0a                	jmp    c000fcd0 <Phys::allocatePage()+0x17>
c000fcc6:	89 1d 80 da 02 c0    	mov    DWORD PTR ds:0xc002da80,ebx
c000fccc:	39 de                	cmp    esi,ebx
c000fcce:	74 24                	je     c000fcf4 <Phys::allocatePage()+0x3b>
c000fcd0:	53                   	push   ebx
c000fcd1:	e8 3d ff ff ff       	call   c000fc13 <Phys::getPageState(unsigned long)>
c000fcd6:	5a                   	pop    edx
c000fcd7:	84 c0                	test   al,al
c000fcd9:	74 5a                	je     c000fd35 <Phys::allocatePage()+0x7c>
c000fcdb:	43                   	inc    ebx
c000fcdc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fce2:	75 e2                	jne    c000fcc6 <Phys::allocatePage()+0xd>
c000fce4:	31 db                	xor    ebx,ebx
c000fce6:	c7 05 80 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da80,0x0
c000fcf0:	39 de                	cmp    esi,ebx
c000fcf2:	75 dc                	jne    c000fcd0 <Phys::allocatePage()+0x17>
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	68 fc 99 02 c0       	push   0xc00299fc
c000fcfc:	e8 ea 2b 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fd01:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd08:	e8 e9 fd ff ff       	call   c000faf6 <Phys::allocateDMA(unsigned long)>
c000fd0d:	83 c4 10             	add    esp,0x10
c000fd10:	85 c0                	test   eax,eax
c000fd12:	75 56                	jne    c000fd6a <Phys::allocatePage()+0xb1>
c000fd14:	83 ec 0c             	sub    esp,0xc
c000fd17:	68 0d 9a 02 c0       	push   0xc0029a0d
c000fd1c:	e8 3e a1 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	8b 1d 80 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da80
c000fd2a:	53                   	push   ebx
c000fd2b:	e8 e3 fe ff ff       	call   c000fc13 <Phys::getPageState(unsigned long)>
c000fd30:	5a                   	pop    edx
c000fd31:	84 c0                	test   al,al
c000fd33:	75 a6                	jne    c000fcdb <Phys::allocatePage()+0x22>
c000fd35:	6a 01                	push   0x1
c000fd37:	53                   	push   ebx
c000fd38:	e8 a4 fe ff ff       	call   c000fbe1 <Phys::setPageState(unsigned long, bool)>
c000fd3d:	a1 8c da 02 c0       	mov    eax,ds:0xc002da8c
c000fd42:	59                   	pop    ecx
c000fd43:	40                   	inc    eax
c000fd44:	5b                   	pop    ebx
c000fd45:	a3 8c da 02 c0       	mov    ds:0xc002da8c,eax
c000fd4a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd4d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd50:	c1 e0 02             	shl    eax,0x2
c000fd53:	99                   	cdq    
c000fd54:	f7 3d 90 da 02 c0    	idiv   DWORD PTR ds:0xc002da90
c000fd5a:	39 05 88 da 02 c0    	cmp    DWORD PTR ds:0xc002da88,eax
c000fd60:	75 0c                	jne    c000fd6e <Phys::allocatePage()+0xb5>
c000fd62:	a1 80 da 02 c0       	mov    eax,ds:0xc002da80
c000fd67:	c1 e0 0c             	shl    eax,0xc
c000fd6a:	5a                   	pop    edx
c000fd6b:	5b                   	pop    ebx
c000fd6c:	5e                   	pop    esi
c000fd6d:	c3                   	ret    
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	a3 88 da 02 c0       	mov    ds:0xc002da88,eax
c000fd76:	50                   	push   eax
c000fd77:	e8 70 09 00 00       	call   c00106ec <VgaText::updateRAMUsageDisplay(int)>
c000fd7c:	83 c4 10             	add    esp,0x10
c000fd7f:	eb e1                	jmp    c000fd62 <Phys::allocatePage()+0xa9>

c000fd81 <Phys::allocateContiguousPages(int)>:
c000fd81:	57                   	push   edi
c000fd82:	56                   	push   esi
c000fd83:	53                   	push   ebx
c000fd84:	31 db                	xor    ebx,ebx
c000fd86:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd8a:	e8 2b d7 00 00       	call   c001d4ba <lockScheduler()>
c000fd8f:	85 db                	test   ebx,ebx
c000fd91:	75 11                	jne    c000fda4 <Phys::allocateContiguousPages(int)+0x23>
c000fd93:	e8 21 ff ff ff       	call   c000fcb9 <Phys::allocatePage()>
c000fd98:	83 ff 01             	cmp    edi,0x1
c000fd9b:	89 c6                	mov    esi,eax
c000fd9d:	74 21                	je     c000fdc0 <Phys::allocateContiguousPages(int)+0x3f>
c000fd9f:	bb 01 00 00 00       	mov    ebx,0x1
c000fda4:	e8 10 ff ff ff       	call   c000fcb9 <Phys::allocatePage()>
c000fda9:	89 da                	mov    edx,ebx
c000fdab:	c1 e2 0c             	shl    edx,0xc
c000fdae:	01 f2                	add    edx,esi
c000fdb0:	39 c2                	cmp    edx,eax
c000fdb2:	74 17                	je     c000fdcb <Phys::allocateContiguousPages(int)+0x4a>
c000fdb4:	bb 01 00 00 00       	mov    ebx,0x1
c000fdb9:	89 c6                	mov    esi,eax
c000fdbb:	83 ff 01             	cmp    edi,0x1
c000fdbe:	75 e4                	jne    c000fda4 <Phys::allocateContiguousPages(int)+0x23>
c000fdc0:	e8 f7 d6 00 00       	call   c001d4bc <unlockScheduler()>
c000fdc5:	89 f0                	mov    eax,esi
c000fdc7:	5b                   	pop    ebx
c000fdc8:	5e                   	pop    esi
c000fdc9:	5f                   	pop    edi
c000fdca:	c3                   	ret    
c000fdcb:	43                   	inc    ebx
c000fdcc:	39 fb                	cmp    ebx,edi
c000fdce:	75 bf                	jne    c000fd8f <Phys::allocateContiguousPages(int)+0xe>
c000fdd0:	e8 e7 d6 00 00       	call   c001d4bc <unlockScheduler()>
c000fdd5:	89 f0                	mov    eax,esi
c000fdd7:	5b                   	pop    ebx
c000fdd8:	5e                   	pop    esi
c000fdd9:	5f                   	pop    edi
c000fdda:	c3                   	ret    

c000fddb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fddb:	56                   	push   esi
c000fddc:	53                   	push   ebx
c000fddd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde1:	39 1d 84 da 02 c0    	cmp    DWORD PTR ds:0xc002da84,ebx
c000fde7:	73 06                	jae    c000fdef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fde9:	89 1d 84 da 02 c0    	mov    DWORD PTR ds:0xc002da84,ebx
c000fdef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdf3:	c1 eb 0c             	shr    ebx,0xc
c000fdf6:	c1 e8 0c             	shr    eax,0xc
c000fdf9:	39 d8                	cmp    eax,ebx
c000fdfb:	73 13                	jae    c000fe10 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fdfd:	6a 00                	push   0x0
c000fdff:	8d 70 01             	lea    esi,[eax+0x1]
c000fe02:	50                   	push   eax
c000fe03:	e8 d9 fd ff ff       	call   c000fbe1 <Phys::setPageState(unsigned long, bool)>
c000fe08:	5a                   	pop    edx
c000fe09:	89 f0                	mov    eax,esi
c000fe0b:	59                   	pop    ecx
c000fe0c:	39 f3                	cmp    ebx,esi
c000fe0e:	75 ed                	jne    c000fdfd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe10:	5b                   	pop    ebx
c000fe11:	5e                   	pop    esi
c000fe12:	c3                   	ret    

c000fe13 <Phys::physicalMemorySetup(unsigned int)>:
c000fe13:	55                   	push   ebp
c000fe14:	57                   	push   edi
c000fe15:	56                   	push   esi
c000fe16:	53                   	push   ebx
c000fe17:	31 db                	xor    ebx,ebx
c000fe19:	83 ec 40             	sub    esp,0x40
c000fe1c:	6a 30                	push   0x30
c000fe1e:	6a 00                	push   0x0
c000fe20:	68 a0 da 02 c0       	push   0xc002daa0
c000fe25:	e8 92 08 ff ff       	call   c00006bc <memset>
c000fe2a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe2e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe33:	05 00 10 00 00       	add    eax,0x1000
c000fe38:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	83 ec 08             	sub    esp,0x8
c000fe42:	6a 01                	push   0x1
c000fe44:	53                   	push   ebx
c000fe45:	43                   	inc    ebx
c000fe46:	e8 96 fd ff ff       	call   c000fbe1 <Phys::setPageState(unsigned long, bool)>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe54:	75 e9                	jne    c000fe3f <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe56:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe5d:	66 85 c0             	test   ax,ax
c000fe60:	0f 84 8e 01 00 00    	je     c000fff4 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe6a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe76:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe87:	eb 15                	jmp    c000fe9e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe89:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe8d:	83 c3 18             	add    ebx,0x18
c000fe90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe94:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe98:	0f 84 66 01 00 00    	je     c0010004 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fea1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fea4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feaf:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feb1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000feb4:	01 f0                	add    eax,esi
c000feb6:	55                   	push   ebp
c000feb7:	11 fa                	adc    edx,edi
c000feb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000febd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fec1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fec5:	56                   	push   esi
c000fec6:	68 48 9a 02 c0       	push   0xc0029a48
c000fecb:	e8 1b 2a 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000fed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fed4:	83 c4 10             	add    esp,0x10
c000fed7:	09 f8                	or     eax,edi
c000fed9:	0f 85 25 01 00 00    	jne    c0010004 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fedf:	4d                   	dec    ebp
c000fee0:	75 a7                	jne    c000fe89 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fee2:	ba 00 00 08 00       	mov    edx,0x80000
c000fee7:	89 c1                	mov    ecx,eax
c000fee9:	39 f2                	cmp    edx,esi
c000feeb:	19 f9                	sbb    ecx,edi
c000feed:	0f 82 a7 00 00 00    	jb     c000ff9a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fef3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fef7:	89 c1                	mov    ecx,eax
c000fef9:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fefd:	0f 83 97 00 00 00    	jae    c000ff9a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff03:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff08:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff0c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff10:	39 fa                	cmp    edx,edi
c000ff12:	19 e8                	sbb    eax,ebp
c000ff14:	0f 82 14 01 00 00    	jb     c001002e <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff1e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff22:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff28:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff2d:	83 d5 ff             	adc    ebp,0xffffffff
c000ff30:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff34:	31 c0                	xor    eax,eax
c000ff36:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff3a:	39 fa                	cmp    edx,edi
c000ff3c:	89 c1                	mov    ecx,eax
c000ff3e:	19 e9                	sbb    ecx,ebp
c000ff40:	0f 83 43 ff ff ff    	jae    c000fe89 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff46:	be 00 00 08 00       	mov    esi,0x80000
c000ff4b:	50                   	push   eax
c000ff4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff50:	57                   	push   edi
c000ff51:	56                   	push   esi
c000ff52:	68 6c 9a 02 c0       	push   0xc0029a6c
c000ff57:	e8 8f 29 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ff5c:	5a                   	pop    edx
c000ff5d:	59                   	pop    ecx
c000ff5e:	57                   	push   edi
c000ff5f:	56                   	push   esi
c000ff60:	e8 76 fe ff ff       	call   c000fddb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff6d:	83 c4 0c             	add    esp,0xc
c000ff70:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff74:	03 05 90 da 02 c0    	add    eax,DWORD PTR ds:0xc002da90
c000ff7a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff81:	a3 90 da 02 c0       	mov    ds:0xc002da90,eax
c000ff86:	52                   	push   edx
c000ff87:	50                   	push   eax
c000ff88:	68 29 9a 02 c0       	push   0xc0029a29
c000ff8d:	e8 59 29 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c000ff92:	83 c4 10             	add    esp,0x10
c000ff95:	e9 ef fe ff ff       	jmp    c000fe89 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff9a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffa6:	39 ea                	cmp    edx,ebp
c000ffa8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffac:	0f 82 d7 fe ff ff    	jb     c000fe89 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffb2:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffb7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffbb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffbf:	0f 83 c4 fe ff ff    	jae    c000fe89 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffc5:	39 ee                	cmp    esi,ebp
c000ffc7:	89 f8                	mov    eax,edi
c000ffc9:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffcd:	0f 83 78 ff ff ff    	jae    c000ff4b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffdb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffdf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffe3:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffef:	e9 57 ff ff ff       	jmp    c000ff4b <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	68 1b 9a 02 c0       	push   0xc0029a1b
c000fffc:	e8 5e 9e 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0010001:	83 c4 10             	add    esp,0x10
c0010004:	bb 40 01 00 00       	mov    ebx,0x140
c0010009:	83 ec 08             	sub    esp,0x8
c001000c:	6a 00                	push   0x0
c001000e:	53                   	push   ebx
c001000f:	43                   	inc    ebx
c0010010:	e8 cc fb ff ff       	call   c000fbe1 <Phys::setPageState(unsigned long, bool)>
c0010015:	ff 05 90 da 02 c0    	inc    DWORD PTR ds:0xc002da90
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010024:	75 e3                	jne    c0010009 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010026:	83 c4 3c             	add    esp,0x3c
c0010029:	5b                   	pop    ebx
c001002a:	5e                   	pop    esi
c001002b:	5f                   	pop    edi
c001002c:	5d                   	pop    ebp
c001002d:	c3                   	ret    
c001002e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010036:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001003e:	e9 d7 fe ff ff       	jmp    c000ff1a <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010043:	90                   	nop

c0010044 <Pipe::isAtty()>:
c0010044:	31 c0                	xor    eax,eax
c0010046:	c3                   	ret    
c0010047:	90                   	nop

c0010048 <Pipe::~Pipe()>:
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	ba d8 9a 02 c0       	mov    edx,0xc0029ad8
c0010050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010054:	89 10                	mov    DWORD PTR [eax],edx
c0010056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	50                   	push   eax
c001005e:	e8 37 16 00 00       	call   c001169a <UnixFile::~UnixFile()>
c0010063:	83 c4 10             	add    esp,0x10
c0010066:	90                   	nop
c0010067:	83 c4 0c             	add    esp,0xc
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <Pipe::~Pipe()>:
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	83 ec 0c             	sub    esp,0xc
c0010072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010076:	e8 cd ff ff ff       	call   c0010048 <Pipe::~Pipe()>
c001007b:	83 c4 10             	add    esp,0x10
c001007e:	83 ec 08             	sub    esp,0x8
c0010081:	6a 20                	push   0x20
c0010083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010087:	e8 7f 27 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	83 c4 0c             	add    esp,0xc
c0010092:	c3                   	ret    
c0010093:	90                   	nop

c0010094 <Pipe::read(unsigned long long, void*, int*)>:
c0010094:	55                   	push   ebp
c0010095:	57                   	push   edi
c0010096:	56                   	push   esi
c0010097:	53                   	push   ebx
c0010098:	83 ec 1c             	sub    esp,0x1c
c001009b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001009f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100a7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100aa:	89 c8                	mov    eax,ecx
c00100ac:	99                   	cdq    
c00100ad:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100b1:	74 19                	je     c00100cc <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100b3:	39 f9                	cmp    ecx,edi
c00100b5:	89 d1                	mov    ecx,edx
c00100b7:	19 f1                	sbb    ecx,esi
c00100b9:	73 11                	jae    c00100cc <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100bb:	e8 fa d3 00 00       	call   c001d4ba <lockScheduler()>
c00100c0:	e8 31 d7 00 00       	call   c001d7f6 <schedule()>
c00100c5:	e8 f2 d3 00 00       	call   c001d4bc <unlockScheduler()>
c00100ca:	eb db                	jmp    c00100a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100cc:	39 f8                	cmp    eax,edi
c00100ce:	89 d1                	mov    ecx,edx
c00100d0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100d4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100d8:	19 f1                	sbb    ecx,esi
c00100da:	73 08                	jae    c00100e4 <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100e7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100ea:	29 c6                	sub    esi,eax
c00100ec:	89 f1                	mov    ecx,esi
c00100ee:	c1 f9 1f             	sar    ecx,0x1f
c00100f1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100f5:	89 ca                	mov    edx,ecx
c00100f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100fb:	19 d1                	sbb    ecx,edx
c00100fd:	73 04                	jae    c0010103 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100ff:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010103:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010107:	89 fd                	mov    ebp,edi
c0010109:	29 f5                	sub    ebp,esi
c001010b:	85 f6                	test   esi,esi
c001010d:	74 12                	je     c0010121 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001010f:	52                   	push   edx
c0010110:	56                   	push   esi
c0010111:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010114:	50                   	push   eax
c0010115:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010119:	e8 82 05 ff ff       	call   c00006a0 <memcpy>
c001011e:	83 c4 10             	add    esp,0x10
c0010121:	85 ed                	test   ebp,ebp
c0010123:	74 12                	je     c0010137 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010125:	50                   	push   eax
c0010126:	55                   	push   ebp
c0010127:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001012a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001012e:	56                   	push   esi
c001012f:	e8 6c 05 ff ff       	call   c00006a0 <memcpy>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001013a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001013d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010140:	99                   	cdq    
c0010141:	89 f7                	mov    edi,esi
c0010143:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010147:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001014b:	c1 ff 1f             	sar    edi,0x1f
c001014e:	57                   	push   edi
c001014f:	56                   	push   esi
c0010150:	52                   	push   edx
c0010151:	50                   	push   eax
c0010152:	e8 b5 60 01 00       	call   c002620c <__umoddi3>
c0010157:	83 c4 10             	add    esp,0x10
c001015a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001015d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010162:	75 10                	jne    c0010174 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010164:	83 ec 0c             	sub    esp,0xc
c0010167:	68 95 9a 02 c0       	push   0xc0029a95
c001016c:	e8 ee 9c 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001017c:	89 10                	mov    DWORD PTR [eax],edx
c001017e:	83 c4 1c             	add    esp,0x1c
c0010181:	31 c0                	xor    eax,eax
c0010183:	5b                   	pop    ebx
c0010184:	5e                   	pop    esi
c0010185:	5f                   	pop    edi
c0010186:	5d                   	pop    ebp
c0010187:	c3                   	ret    

c0010188 <Pipe::write(unsigned long long, void*, int*)>:
c0010188:	55                   	push   ebp
c0010189:	57                   	push   edi
c001018a:	56                   	push   esi
c001018b:	53                   	push   ebx
c001018c:	83 ec 1c             	sub    esp,0x1c
c001018f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010193:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010197:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001019b:	89 04 24             	mov    DWORD PTR [esp],eax
c001019e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101a1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101a8:	89 de                	mov    esi,ebx
c00101aa:	89 df                	mov    edi,ebx
c00101ac:	c1 ff 1f             	sar    edi,0x1f
c00101af:	01 c6                	add    esi,eax
c00101b1:	89 c8                	mov    eax,ecx
c00101b3:	11 d7                	adc    edi,edx
c00101b5:	99                   	cdq    
c00101b6:	39 f1                	cmp    ecx,esi
c00101b8:	89 d0                	mov    eax,edx
c00101ba:	19 f8                	sbb    eax,edi
c00101bc:	b8 01 00 00 00       	mov    eax,0x1
c00101c1:	0f 82 80 00 00 00    	jb     c0010247 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101ca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101cd:	01 d8                	add    eax,ebx
c00101cf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101d3:	99                   	cdq    
c00101d4:	f7 f9                	idiv   ecx
c00101d6:	29 d1                	sub    ecx,edx
c00101d8:	89 d7                	mov    edi,edx
c00101da:	89 c8                	mov    eax,ecx
c00101dc:	99                   	cdq    
c00101dd:	39 ce                	cmp    esi,ecx
c00101df:	19 d3                	sbb    ebx,edx
c00101e1:	bb 00 00 00 00       	mov    ebx,0x0
c00101e6:	72 04                	jb     c00101ec <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101e8:	89 f3                	mov    ebx,esi
c00101ea:	29 cb                	sub    ebx,ecx
c00101ec:	89 f1                	mov    ecx,esi
c00101ee:	29 d9                	sub    ecx,ebx
c00101f0:	74 1a                	je     c001020c <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101f2:	52                   	push   edx
c00101f3:	51                   	push   ecx
c00101f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101fc:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101ff:	57                   	push   edi
c0010200:	e8 9b 04 ff ff       	call   c00006a0 <memcpy>
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001020c:	85 db                	test   ebx,ebx
c001020e:	74 12                	je     c0010222 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010210:	50                   	push   eax
c0010211:	53                   	push   ebx
c0010212:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010216:	51                   	push   ecx
c0010217:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001021a:	e8 81 04 ff ff       	call   c00006a0 <memcpy>
c001021f:	83 c4 10             	add    esp,0x10
c0010222:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010225:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001022a:	75 10                	jne    c001023c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001022c:	83 ec 0c             	sub    esp,0xc
c001022f:	68 b1 9a 02 c0       	push   0xc0029ab1
c0010234:	e8 26 9c 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010240:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010243:	89 38                	mov    DWORD PTR [eax],edi
c0010245:	31 c0                	xor    eax,eax
c0010247:	83 c4 1c             	add    esp,0x1c
c001024a:	5b                   	pop    ebx
c001024b:	5e                   	pop    esi
c001024c:	5f                   	pop    edi
c001024d:	5d                   	pop    ebp
c001024e:	c3                   	ret    
c001024f:	90                   	nop

c0010250 <Pipe::Pipe(int)>:
c0010250:	83 ec 0c             	sub    esp,0xc
c0010253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010257:	83 ec 08             	sub    esp,0x8
c001025a:	6a 00                	push   0x0
c001025c:	50                   	push   eax
c001025d:	e8 56 12 00 00       	call   c00114b8 <UnixFile::UnixFile(int)>
c0010262:	83 c4 10             	add    esp,0x10
c0010265:	ba d8 9a 02 c0       	mov    edx,0xc0029ad8
c001026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026e:	89 10                	mov    DWORD PTR [eax],edx
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010278:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001027b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001028a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010295:	83 ec 0c             	sub    esp,0xc
c0010298:	50                   	push   eax
c0010299:	e8 7e f3 ff ff       	call   c000f61c <malloc>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	89 c2                	mov    edx,eax
c00102a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ae:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102b2:	90                   	nop
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <VgaText::isAtty()>:
c00102b8:	b0 01                	mov    al,0x1
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <VgaText::~VgaText()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	ba 94 9b 02 c0       	mov    edx,0xc0029b94
c00102c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c8:	89 10                	mov    DWORD PTR [eax],edx
c00102ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ce:	83 ec 0c             	sub    esp,0xc
c00102d1:	50                   	push   eax
c00102d2:	e8 c3 13 00 00       	call   c001169a <UnixFile::~UnixFile()>
c00102d7:	83 c4 10             	add    esp,0x10
c00102da:	90                   	nop
c00102db:	83 c4 0c             	add    esp,0xc
c00102de:	c3                   	ret    
c00102df:	90                   	nop

c00102e0 <VgaText::~VgaText()>:
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	83 ec 0c             	sub    esp,0xc
c00102e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ea:	e8 cd ff ff ff       	call   c00102bc <VgaText::~VgaText()>
c00102ef:	83 c4 10             	add    esp,0x10
c00102f2:	83 ec 08             	sub    esp,0x8
c00102f5:	68 60 12 00 00       	push   0x1260
c00102fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fe:	e8 08 25 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c0010303:	83 c4 10             	add    esp,0x10
c0010306:	83 c4 0c             	add    esp,0xc
c0010309:	c3                   	ret    

c001030a <VgaText::read(unsigned long long, void*, int*)>:
c001030a:	83 ec 10             	sub    esp,0x10
c001030d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010319:	e8 1d 59 00 00       	call   c0015c3b <readKeyboard(VgaText*, char*, unsigned long)>
c001031e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010322:	89 02                	mov    DWORD PTR [edx],eax
c0010324:	31 c0                	xor    eax,eax
c0010326:	83 c4 1c             	add    esp,0x1c
c0010329:	c3                   	ret    

c001032a <setTerminalScrollLock(bool)>:
c001032a:	c3                   	ret    

c001032b <addToTerminalCycle(VgaText*)>:
c001032b:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c0010331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010335:	85 d2                	test   edx,edx
c0010337:	75 0c                	jne    c0010345 <addToTerminalCycle(VgaText*)+0x1a>
c0010339:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001033f:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0010344:	c3                   	ret    
c0010345:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001034b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010351:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010357:	c3                   	ret    

c0010358 <installVgaTextImplementation()>:
c0010358:	83 ec 10             	sub    esp,0x10
c001035b:	6a 20                	push   0x20
c001035d:	6a 00                	push   0x0
c001035f:	68 00 db 02 c0       	push   0xc002db00
c0010364:	e8 53 03 ff ff       	call   c00006bc <memset>
c0010369:	83 c4 1c             	add    esp,0x1c
c001036c:	c3                   	ret    

c001036d <scrollTerminalScrollLock(int)>:
c001036d:	c3                   	ret    

c001036e <VgaText::load()>:
c001036e:	53                   	push   ebx
c001036f:	31 c0                	xor    eax,eax
c0010371:	83 ec 58             	sub    esp,0x58
c0010374:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010378:	89 e2                	mov    edx,esp
c001037a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001037e:	40                   	inc    eax
c001037f:	83 f8 50             	cmp    eax,0x50
c0010382:	75 f6                	jne    c001037a <VgaText::load()+0xc>
c0010384:	31 c0                	xor    eax,eax
c0010386:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001038d:	84 c9                	test   cl,cl
c001038f:	74 06                	je     c0010397 <VgaText::load()+0x29>
c0010391:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010394:	40                   	inc    eax
c0010395:	eb ef                	jmp    c0010386 <VgaText::load()+0x18>
c0010397:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001039d:	85 c0                	test   eax,eax
c001039f:	74 09                	je     c00103aa <VgaText::load()+0x3c>
c00103a1:	51                   	push   ecx
c00103a2:	51                   	push   ecx
c00103a3:	52                   	push   edx
c00103a4:	53                   	push   ebx
c00103a5:	ff d0                	call   eax
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103b0:	85 c0                	test   eax,eax
c00103b2:	74 09                	je     c00103bd <VgaText::load()+0x4f>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	53                   	push   ebx
c00103b8:	ff d0                	call   eax
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	83 c4 58             	add    esp,0x58
c00103c0:	5b                   	pop    ebx
c00103c1:	c3                   	ret    

c00103c2 <VgaText::updateCursor()>:
c00103c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c6:	39 05 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,eax
c00103cc:	75 0c                	jne    c00103da <VgaText::updateCursor()+0x18>
c00103ce:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103d4:	85 c0                	test   eax,eax
c00103d6:	74 02                	je     c00103da <VgaText::updateCursor()+0x18>
c00103d8:	ff e0                	jmp    eax
c00103da:	c3                   	ret    
c00103db:	90                   	nop

c00103dc <VgaText::showCursor(bool)>:
c00103dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e4:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <VgaText::disableBlink(bool)>:
c00103ec:	56                   	push   esi
c00103ed:	53                   	push   ebx
c00103ee:	51                   	push   ecx
c00103ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f7:	39 1d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ebx
c00103fd:	75 18                	jne    c0010417 <VgaText::disableBlink(bool)+0x2b>
c00103ff:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010405:	85 c0                	test   eax,eax
c0010407:	74 0e                	je     c0010417 <VgaText::disableBlink(bool)+0x2b>
c0010409:	89 f1                	mov    ecx,esi
c001040b:	52                   	push   edx
c001040c:	52                   	push   edx
c001040d:	0f b6 d1             	movzx  edx,cl
c0010410:	52                   	push   edx
c0010411:	53                   	push   ebx
c0010412:	ff d0                	call   eax
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	89 f0                	mov    eax,esi
c0010419:	83 f0 01             	xor    eax,0x1
c001041c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010422:	58                   	pop    eax
c0010423:	5b                   	pop    ebx
c0010424:	5e                   	pop    esi
c0010425:	c3                   	ret    

c0010426 <VgaText::doANSI_SGR(int)>:
c0010426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001042a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042e:	85 d2                	test   edx,edx
c0010430:	75 14                	jne    c0010446 <VgaText::doANSI_SGR(int)+0x20>
c0010432:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010438:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001043e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010444:	eb 65                	jmp    c00104ab <VgaText::doANSI_SGR(int)+0x85>
c0010446:	83 fa 07             	cmp    edx,0x7
c0010449:	75 14                	jne    c001045f <VgaText::doANSI_SGR(int)+0x39>
c001044b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010451:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010457:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001045d:	eb 4c                	jmp    c00104ab <VgaText::doANSI_SGR(int)+0x85>
c001045f:	83 fa 1b             	cmp    edx,0x1b
c0010462:	74 ce                	je     c0010432 <VgaText::doANSI_SGR(int)+0xc>
c0010464:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010467:	83 f9 07             	cmp    ecx,0x7
c001046a:	77 09                	ja     c0010475 <VgaText::doANSI_SGR(int)+0x4f>
c001046c:	8b 14 8d a0 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3660]
c0010473:	eb 20                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x6f>
c0010475:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010478:	83 f9 07             	cmp    ecx,0x7
c001047b:	77 09                	ja     c0010486 <VgaText::doANSI_SGR(int)+0x60>
c001047d:	8b 14 8d a0 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3660]
c0010484:	eb 25                	jmp    c00104ab <VgaText::doANSI_SGR(int)+0x85>
c0010486:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010489:	83 f9 07             	cmp    ecx,0x7
c001048c:	77 0e                	ja     c001049c <VgaText::doANSI_SGR(int)+0x76>
c001048e:	8b 14 95 58 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37a8]
c0010495:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001049b:	c3                   	ret    
c001049c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001049f:	83 f9 07             	cmp    ecx,0x7
c00104a2:	77 0d                	ja     c00104b1 <VgaText::doANSI_SGR(int)+0x8b>
c00104a4:	8b 14 95 30 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37d0]
c00104ab:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b1:	c3                   	ret    

c00104b2 <VgaText::setDefaultBgColour(VgaColour)>:
c00104b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ba:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104c0:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104c6:	c3                   	ret    
c00104c7:	90                   	nop

c00104c8 <VgaText::setDefaultFgColour(VgaColour)>:
c00104c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d0:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104d6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop

c00104de <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104de:	53                   	push   ebx
c00104df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104eb:	51                   	push   ecx
c00104ec:	e8 c1 ff ff ff       	call   c00104b2 <VgaText::setDefaultBgColour(VgaColour)>
c00104f1:	58                   	pop    eax
c00104f2:	5a                   	pop    edx
c00104f3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104fb:	5b                   	pop    ebx
c00104fc:	eb ca                	jmp    c00104c8 <VgaText::setDefaultFgColour(VgaColour)>

c00104fe <VgaText::combineColours(unsigned char, unsigned char)>:
c00104fe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010502:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010507:	83 e0 0f             	and    eax,0xf
c001050a:	c1 e2 04             	shl    edx,0x4
c001050d:	09 d0                	or     eax,edx
c001050f:	c3                   	ret    

c0010510 <VgaText::scrollScreen()>:
c0010510:	57                   	push   edi
c0010511:	56                   	push   esi
c0010512:	be 01 00 00 00       	mov    esi,0x1
c0010517:	53                   	push   ebx
c0010518:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001051c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010522:	31 ff                	xor    edi,edi
c0010524:	01 d9                	add    ecx,ebx
c0010526:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010529:	83 fe 17             	cmp    esi,0x17
c001052c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010532:	75 28                	jne    c001055c <VgaText::scrollScreen()+0x4c>
c0010534:	f7 c7 01 00 00 00    	test   edi,0x1
c001053a:	74 1c                	je     c0010558 <VgaText::scrollScreen()+0x48>
c001053c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010543:	50                   	push   eax
c0010544:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001054b:	50                   	push   eax
c001054c:	e8 ad ff ff ff       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010551:	5a                   	pop    edx
c0010552:	5a                   	pop    edx
c0010553:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010556:	eb 04                	jmp    c001055c <VgaText::scrollScreen()+0x4c>
c0010558:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001055c:	47                   	inc    edi
c001055d:	41                   	inc    ecx
c001055e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010564:	75 c0                	jne    c0010526 <VgaText::scrollScreen()+0x16>
c0010566:	46                   	inc    esi
c0010567:	83 fe 18             	cmp    esi,0x18
c001056a:	75 b0                	jne    c001051c <VgaText::scrollScreen()+0xc>
c001056c:	39 1d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ebx
c0010572:	75 24                	jne    c0010598 <VgaText::scrollScreen()+0x88>
c0010574:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001057b:	74 08                	je     c0010585 <VgaText::scrollScreen()+0x75>
c001057d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010583:	eb 13                	jmp    c0010598 <VgaText::scrollScreen()+0x88>
c0010585:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001058b:	85 c0                	test   eax,eax
c001058d:	74 09                	je     c0010598 <VgaText::scrollScreen()+0x88>
c001058f:	83 ec 0c             	sub    esp,0xc
c0010592:	53                   	push   ebx
c0010593:	ff d0                	call   eax
c0010595:	83 c4 10             	add    esp,0x10
c0010598:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001059c:	5b                   	pop    ebx
c001059d:	5e                   	pop    esi
c001059e:	5f                   	pop    edi
c001059f:	e9 1e fe ff ff       	jmp    c00103c2 <VgaText::updateCursor()>

c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00105a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105a9:	c1 e0 08             	shl    eax,0x8
c00105ac:	89 c2                	mov    edx,eax
c00105ae:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105b3:	09 d0                	or     eax,edx
c00105b5:	c3                   	ret    

c00105b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105b6:	53                   	push   ebx
c00105b7:	83 ec 08             	sub    esp,0x8
c00105ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105be:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105c3:	50                   	push   eax
c00105c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105c9:	50                   	push   eax
c00105ca:	e8 2f ff ff ff       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c00105cf:	5a                   	pop    edx
c00105d0:	0f b6 c0             	movzx  eax,al
c00105d3:	5b                   	pop    ebx
c00105d4:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105d9:	50                   	push   eax
c00105da:	53                   	push   ebx
c00105db:	e8 c4 ff ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00105e0:	5a                   	pop    edx
c00105e1:	5a                   	pop    edx
c00105e2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105e8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105ec:	0f b7 d2             	movzx  edx,dx
c00105ef:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105f4:	39 0d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ecx
c00105fa:	75 14                	jne    c0010610 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105fc:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 0a                	je     c0010610 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010606:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001060a:	83 c4 08             	add    esp,0x8
c001060d:	5b                   	pop    ebx
c001060e:	ff e0                	jmp    eax
c0010610:	83 c4 08             	add    esp,0x8
c0010613:	5b                   	pop    ebx
c0010614:	c3                   	ret    
c0010615:	90                   	nop

c0010616 <VgaText::getCursorX()>:
c0010616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010620:	c3                   	ret    
c0010621:	90                   	nop

c0010622 <VgaText::getCursorY()>:
c0010622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010626:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001062c:	c3                   	ret    
c001062d:	90                   	nop

c001062e <VgaText::setCursor(int, int)>:
c001062e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010636:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001063c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010640:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010646:	e9 77 fd ff ff       	jmp    c00103c2 <VgaText::updateCursor()>
c001064b:	90                   	nop

c001064c <VgaText::setCursorX(int)>:
c001064c:	83 ec 10             	sub    esp,0x10
c001064f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010653:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001065d:	50                   	push   eax
c001065e:	e8 cb ff ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c0010663:	83 c4 1c             	add    esp,0x1c
c0010666:	c3                   	ret    
c0010667:	90                   	nop

c0010668 <VgaText::setCursorY(int)>:
c0010668:	83 ec 10             	sub    esp,0x10
c001066b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001066f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010673:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010679:	50                   	push   eax
c001067a:	e8 af ff ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c001067f:	83 c4 1c             	add    esp,0x1c
c0010682:	c3                   	ret    
c0010683:	90                   	nop

c0010684 <VgaText::incrementCursor(bool)>:
c0010684:	56                   	push   esi
c0010685:	53                   	push   ebx
c0010686:	51                   	push   ecx
c0010687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001068f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010695:	40                   	inc    eax
c0010696:	83 f8 50             	cmp    eax,0x50
c0010699:	74 08                	je     c00106a3 <VgaText::incrementCursor(bool)+0x1f>
c001069b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106a1:	eb 33                	jmp    c00106d6 <VgaText::incrementCursor(bool)+0x52>
c00106a3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106a9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106b3:	8d 50 01             	lea    edx,[eax+0x1]
c00106b6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106bc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106c2:	75 12                	jne    c00106d6 <VgaText::incrementCursor(bool)+0x52>
c00106c4:	83 ec 0c             	sub    esp,0xc
c00106c7:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106cd:	53                   	push   ebx
c00106ce:	e8 3d fe ff ff       	call   c0010510 <VgaText::scrollScreen()>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	89 f0                	mov    eax,esi
c00106d8:	84 c0                	test   al,al
c00106da:	74 0c                	je     c00106e8 <VgaText::incrementCursor(bool)+0x64>
c00106dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106e0:	5a                   	pop    edx
c00106e1:	5b                   	pop    ebx
c00106e2:	5e                   	pop    esi
c00106e3:	e9 da fc ff ff       	jmp    c00103c2 <VgaText::updateCursor()>
c00106e8:	58                   	pop    eax
c00106e9:	5b                   	pop    ebx
c00106ea:	5e                   	pop    esi
c00106eb:	c3                   	ret    

c00106ec <VgaText::updateRAMUsageDisplay(int)>:
c00106ec:	56                   	push   esi
c00106ed:	8b 35 80 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c980
c00106f3:	53                   	push   ebx
c00106f4:	bb 0a 00 00 00       	mov    ebx,0xa
c00106f9:	6a 0f                	push   0xf
c00106fb:	6a 00                	push   0x0
c00106fd:	e8 fc fd ff ff       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010702:	5a                   	pop    edx
c0010703:	59                   	pop    ecx
c0010704:	0f b6 c8             	movzx  ecx,al
c0010707:	51                   	push   ecx
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	99                   	cdq    
c001070d:	f7 fb                	idiv   ebx
c001070f:	89 d3                	mov    ebx,edx
c0010711:	83 c0 30             	add    eax,0x30
c0010714:	83 c3 30             	add    ebx,0x30
c0010717:	0f be c0             	movsx  eax,al
c001071a:	0f b6 db             	movzx  ebx,bl
c001071d:	50                   	push   eax
c001071e:	e8 81 fe ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010723:	5a                   	pop    edx
c0010724:	5a                   	pop    edx
c0010725:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001072c:	51                   	push   ecx
c001072d:	53                   	push   ebx
c001072e:	e8 71 fe ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010733:	5b                   	pop    ebx
c0010734:	5a                   	pop    edx
c0010735:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001073c:	51                   	push   ecx
c001073d:	6a 25                	push   0x25
c001073f:	e8 60 fe ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010744:	59                   	pop    ecx
c0010745:	5b                   	pop    ebx
c0010746:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001074d:	5b                   	pop    ebx
c001074e:	5e                   	pop    esi
c001074f:	c3                   	ret    

c0010750 <VgaText::updateDiskUsage()>:
c0010750:	55                   	push   ebp
c0010751:	bd 10 27 00 00       	mov    ebp,0x2710
c0010756:	57                   	push   edi
c0010757:	8b 3d 80 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c980
c001075d:	56                   	push   esi
c001075e:	53                   	push   ebx
c001075f:	6a 0f                	push   0xf
c0010761:	6a 00                	push   0x0
c0010763:	e8 96 fd ff ff       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010768:	5a                   	pop    edx
c0010769:	0f b6 d8             	movzx  ebx,al
c001076c:	59                   	pop    ecx
c001076d:	8b 35 a8 1d 03 c0    	mov    esi,DWORD PTR ds:0xc0031da8
c0010773:	53                   	push   ebx
c0010774:	b9 0a 00 00 00       	mov    ecx,0xa
c0010779:	89 f0                	mov    eax,esi
c001077b:	99                   	cdq    
c001077c:	f7 fd                	idiv   ebp
c001077e:	99                   	cdq    
c001077f:	f7 f9                	idiv   ecx
c0010781:	8d 42 30             	lea    eax,[edx+0x30]
c0010784:	0f b6 c0             	movzx  eax,al
c0010787:	50                   	push   eax
c0010788:	e8 17 fe ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c001078d:	5d                   	pop    ebp
c001078e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010793:	5a                   	pop    edx
c0010794:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010798:	53                   	push   ebx
c0010799:	89 f0                	mov    eax,esi
c001079b:	99                   	cdq    
c001079c:	f7 fd                	idiv   ebp
c001079e:	99                   	cdq    
c001079f:	f7 f9                	idiv   ecx
c00107a1:	8d 42 30             	lea    eax,[edx+0x30]
c00107a4:	0f b6 c0             	movzx  eax,al
c00107a7:	50                   	push   eax
c00107a8:	e8 f7 fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00107ad:	5d                   	pop    ebp
c00107ae:	bd 64 00 00 00       	mov    ebp,0x64
c00107b3:	5a                   	pop    edx
c00107b4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107bb:	53                   	push   ebx
c00107bc:	89 f0                	mov    eax,esi
c00107be:	99                   	cdq    
c00107bf:	f7 fd                	idiv   ebp
c00107c1:	99                   	cdq    
c00107c2:	f7 f9                	idiv   ecx
c00107c4:	8d 42 30             	lea    eax,[edx+0x30]
c00107c7:	0f b6 c0             	movzx  eax,al
c00107ca:	50                   	push   eax
c00107cb:	e8 d4 fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00107d0:	5d                   	pop    ebp
c00107d1:	5a                   	pop    edx
c00107d2:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107d9:	53                   	push   ebx
c00107da:	89 f0                	mov    eax,esi
c00107dc:	99                   	cdq    
c00107dd:	f7 f9                	idiv   ecx
c00107df:	89 d6                	mov    esi,edx
c00107e1:	99                   	cdq    
c00107e2:	f7 f9                	idiv   ecx
c00107e4:	8d 42 30             	lea    eax,[edx+0x30]
c00107e7:	0f b6 c0             	movzx  eax,al
c00107ea:	50                   	push   eax
c00107eb:	e8 b4 fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00107f0:	5d                   	pop    ebp
c00107f1:	5a                   	pop    edx
c00107f2:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107f9:	53                   	push   ebx
c00107fa:	8d 46 30             	lea    eax,[esi+0x30]
c00107fd:	0f b6 f0             	movzx  esi,al
c0010800:	56                   	push   esi
c0010801:	e8 9e fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010806:	5e                   	pop    esi
c0010807:	8b 35 a4 1d 03 c0    	mov    esi,DWORD PTR ds:0xc0031da4
c001080d:	5d                   	pop    ebp
c001080e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010815:	bd 10 27 00 00       	mov    ebp,0x2710
c001081a:	53                   	push   ebx
c001081b:	89 f0                	mov    eax,esi
c001081d:	99                   	cdq    
c001081e:	f7 fd                	idiv   ebp
c0010820:	99                   	cdq    
c0010821:	f7 f9                	idiv   ecx
c0010823:	8d 42 30             	lea    eax,[edx+0x30]
c0010826:	0f b6 c0             	movzx  eax,al
c0010829:	50                   	push   eax
c001082a:	e8 75 fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c001082f:	5a                   	pop    edx
c0010830:	5d                   	pop    ebp
c0010831:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010838:	bd e8 03 00 00       	mov    ebp,0x3e8
c001083d:	53                   	push   ebx
c001083e:	89 f0                	mov    eax,esi
c0010840:	99                   	cdq    
c0010841:	f7 fd                	idiv   ebp
c0010843:	99                   	cdq    
c0010844:	f7 f9                	idiv   ecx
c0010846:	8d 42 30             	lea    eax,[edx+0x30]
c0010849:	0f b6 c0             	movzx  eax,al
c001084c:	50                   	push   eax
c001084d:	e8 52 fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010852:	5a                   	pop    edx
c0010853:	5d                   	pop    ebp
c0010854:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001085b:	bd 64 00 00 00       	mov    ebp,0x64
c0010860:	53                   	push   ebx
c0010861:	89 f0                	mov    eax,esi
c0010863:	99                   	cdq    
c0010864:	f7 fd                	idiv   ebp
c0010866:	99                   	cdq    
c0010867:	f7 f9                	idiv   ecx
c0010869:	83 c2 30             	add    edx,0x30
c001086c:	0f b6 d2             	movzx  edx,dl
c001086f:	52                   	push   edx
c0010870:	e8 2f fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010875:	5a                   	pop    edx
c0010876:	5d                   	pop    ebp
c0010877:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001087e:	53                   	push   ebx
c001087f:	89 f0                	mov    eax,esi
c0010881:	99                   	cdq    
c0010882:	f7 f9                	idiv   ecx
c0010884:	89 d6                	mov    esi,edx
c0010886:	99                   	cdq    
c0010887:	f7 f9                	idiv   ecx
c0010889:	8d 42 30             	lea    eax,[edx+0x30]
c001088c:	0f b6 c0             	movzx  eax,al
c001088f:	50                   	push   eax
c0010890:	e8 0f fd ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010895:	5a                   	pop    edx
c0010896:	59                   	pop    ecx
c0010897:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001089e:	53                   	push   ebx
c001089f:	8d 46 30             	lea    eax,[esi+0x30]
c00108a2:	0f b6 f0             	movzx  esi,al
c00108a5:	56                   	push   esi
c00108a6:	e8 f9 fc ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c00108ab:	5b                   	pop    ebx
c00108ac:	5e                   	pop    esi
c00108ad:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108b4:	5b                   	pop    ebx
c00108b5:	5e                   	pop    esi
c00108b6:	5f                   	pop    edi
c00108b7:	5d                   	pop    ebp
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::updateTitle()>:
c00108ba:	53                   	push   ebx
c00108bb:	31 c0                	xor    eax,eax
c00108bd:	83 ec 58             	sub    esp,0x58
c00108c0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108c4:	89 e1                	mov    ecx,esp
c00108c6:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108ca:	40                   	inc    eax
c00108cb:	83 f8 50             	cmp    eax,0x50
c00108ce:	75 f6                	jne    c00108c6 <VgaText::updateTitle()+0xc>
c00108d0:	31 c0                	xor    eax,eax
c00108d2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108d9:	84 db                	test   bl,bl
c00108db:	74 06                	je     c00108e3 <VgaText::updateTitle()+0x29>
c00108dd:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108e0:	40                   	inc    eax
c00108e1:	eb ef                	jmp    c00108d2 <VgaText::updateTitle()+0x18>
c00108e3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108e9:	85 c0                	test   eax,eax
c00108eb:	74 09                	je     c00108f6 <VgaText::updateTitle()+0x3c>
c00108ed:	53                   	push   ebx
c00108ee:	53                   	push   ebx
c00108ef:	51                   	push   ecx
c00108f0:	52                   	push   edx
c00108f1:	ff d0                	call   eax
c00108f3:	83 c4 10             	add    esp,0x10
c00108f6:	e8 55 fe ff ff       	call   c0010750 <VgaText::updateDiskUsage()>
c00108fb:	83 c4 58             	add    esp,0x58
c00108fe:	5b                   	pop    ebx
c00108ff:	c3                   	ret    

c0010900 <VgaText::setTitleTextColour(VgaColour)>:
c0010900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010904:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010908:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001090e:	eb aa                	jmp    c00108ba <VgaText::updateTitle()>

c0010910 <VgaText::setTitleColour(VgaColour)>:
c0010910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010918:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001091e:	eb 9a                	jmp    c00108ba <VgaText::updateTitle()>

c0010920 <VgaText::setTitle(char*)>:
c0010920:	53                   	push   ebx
c0010921:	83 ec 10             	sub    esp,0x10
c0010924:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010932:	50                   	push   eax
c0010933:	e8 23 fe fe ff       	call   c000075b <strcpy>
c0010938:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001093c:	83 c4 18             	add    esp,0x18
c001093f:	5b                   	pop    ebx
c0010940:	e9 75 ff ff ff       	jmp    c00108ba <VgaText::updateTitle()>
c0010945:	90                   	nop

c0010946 <VgaText::decrementCursor(bool)>:
c0010946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001094a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001094e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010954:	85 c0                	test   eax,eax
c0010956:	74 07                	je     c001095f <VgaText::decrementCursor(bool)+0x19>
c0010958:	48                   	dec    eax
c0010959:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001095f:	84 c9                	test   cl,cl
c0010961:	74 09                	je     c001096c <VgaText::decrementCursor(bool)+0x26>
c0010963:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010967:	e9 56 fa ff ff       	jmp    c00103c2 <VgaText::updateCursor()>
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001096e:	53                   	push   ebx
c001096f:	83 ec 08             	sub    esp,0x8
c0010972:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010976:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001097a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001097e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010982:	3c 07                	cmp    al,0x7
c0010984:	75 2a                	jne    c00109b0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010986:	a1 cc db 02 c0       	mov    eax,ds:0xc002dbcc
c001098b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010993:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001099b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109a7:	83 c4 08             	add    esp,0x8
c00109aa:	5b                   	pop    ebx
c00109ab:	e9 3a 2d 00 00       	jmp    c00136ea <Buzzer::beep(int, int, bool)>
c00109b0:	3c 0d                	cmp    al,0xd
c00109b2:	75 0c                	jne    c00109c0 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109b4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109be:	eb 3b                	jmp    c00109fb <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109c0:	3c 0a                	cmp    al,0xa
c00109c2:	75 40                	jne    c0010a04 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109c4:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109ca:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109d4:	8d 50 01             	lea    edx,[eax+0x1]
c00109d7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109dd:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109e3:	75 12                	jne    c00109f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109e5:	83 ec 0c             	sub    esp,0xc
c00109e8:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109ee:	53                   	push   ebx
c00109ef:	e8 1c fb ff ff       	call   c0010510 <VgaText::scrollScreen()>
c00109f4:	83 c4 10             	add    esp,0x10
c00109f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109fb:	83 c4 08             	add    esp,0x8
c00109fe:	5b                   	pop    ebx
c00109ff:	e9 be f9 ff ff       	jmp    c00103c2 <VgaText::updateCursor()>
c0010a04:	3c 08                	cmp    al,0x8
c0010a06:	75 31                	jne    c0010a39 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a08:	50                   	push   eax
c0010a09:	50                   	push   eax
c0010a0a:	6a 01                	push   0x1
c0010a0c:	53                   	push   ebx
c0010a0d:	e8 34 ff ff ff       	call   c0010946 <VgaText::decrementCursor(bool)>
c0010a12:	5a                   	pop    edx
c0010a13:	59                   	pop    ecx
c0010a14:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a1a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a20:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a26:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a2c:	6a 20                	push   0x20
c0010a2e:	53                   	push   ebx
c0010a2f:	e8 82 fb ff ff       	call   c00105b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a34:	83 c4 28             	add    esp,0x28
c0010a37:	5b                   	pop    ebx
c0010a38:	c3                   	ret    
c0010a39:	83 ec 08             	sub    esp,0x8
c0010a3c:	0f be c0             	movsx  eax,al
c0010a3f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a45:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a4b:	51                   	push   ecx
c0010a4c:	52                   	push   edx
c0010a4d:	50                   	push   eax
c0010a4e:	53                   	push   ebx
c0010a4f:	e8 62 fb ff ff       	call   c00105b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a54:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a58:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a60:	83 c4 28             	add    esp,0x28
c0010a63:	5b                   	pop    ebx
c0010a64:	e9 1b fc ff ff       	jmp    c0010684 <VgaText::incrementCursor(bool)>
c0010a69:	90                   	nop

c0010a6a <VgaText::isShowingCursor()>:
c0010a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a6e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a74:	c3                   	ret    
c0010a75:	90                   	nop

c0010a76 <VgaText::isBlinkDisabled()>:
c0010a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a7a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a80:	83 f0 01             	xor    eax,0x1
c0010a83:	c3                   	ret    

c0010a84 <VgaText::setCursorHeight(int)>:
c0010a84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a8c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a92:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a9d:	e9 3a f9 ff ff       	jmp    c00103dc <VgaText::showCursor(bool)>

c0010aa2 <VgaText::getCursorHeight()>:
c0010aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010aac:	c3                   	ret    

c0010aad <setActiveTerminal(VgaText*)>:
c0010aad:	53                   	push   ebx
c0010aae:	83 ec 08             	sub    esp,0x8
c0010ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ab5:	85 db                	test   ebx,ebx
c0010ab7:	75 11                	jne    c0010aca <setActiveTerminal(VgaText*)+0x1d>
c0010ab9:	c7 44 24 10 ec 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029aec
c0010ac1:	83 c4 08             	add    esp,0x8
c0010ac4:	5b                   	pop    ebx
c0010ac5:	e9 95 93 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c0010aca:	50                   	push   eax
c0010acb:	50                   	push   eax
c0010acc:	53                   	push   ebx
c0010acd:	68 fa 9a 02 c0       	push   0xc0029afa
c0010ad2:	e8 14 1e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0010ad7:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	85 c0                	test   eax,eax
c0010ae1:	74 0c                	je     c0010aef <setActiveTerminal(VgaText*)+0x42>
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	50                   	push   eax
c0010ae7:	e8 d6 f8 ff ff       	call   c00103c2 <VgaText::updateCursor()>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	89 1d 24 db 02 c0    	mov    DWORD PTR ds:0xc002db24,ebx
c0010af5:	51                   	push   ecx
c0010af6:	51                   	push   ecx
c0010af7:	53                   	push   ebx
c0010af8:	68 12 9b 02 c0       	push   0xc0029b12
c0010afd:	e8 e9 1d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0010b02:	83 c4 0c             	add    esp,0xc
c0010b05:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b0b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b11:	53                   	push   ebx
c0010b12:	e8 17 fb ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c0010b17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b1a:	e8 57 ff ff ff       	call   c0010a76 <VgaText::isBlinkDisabled()>
c0010b1f:	5a                   	pop    edx
c0010b20:	0f b6 c0             	movzx  eax,al
c0010b23:	59                   	pop    ecx
c0010b24:	50                   	push   eax
c0010b25:	53                   	push   ebx
c0010b26:	e8 c1 f8 ff ff       	call   c00103ec <VgaText::disableBlink(bool)>
c0010b2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b2e:	e8 6f ff ff ff       	call   c0010aa2 <VgaText::getCursorHeight()>
c0010b33:	5a                   	pop    edx
c0010b34:	59                   	pop    ecx
c0010b35:	50                   	push   eax
c0010b36:	53                   	push   ebx
c0010b37:	e8 48 ff ff ff       	call   c0010a84 <VgaText::setCursorHeight(int)>
c0010b3c:	83 c4 10             	add    esp,0x10
c0010b3f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b46:	75 0a                	jne    c0010b52 <setActiveTerminal(VgaText*)+0xa5>
c0010b48:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b52:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b56:	83 c4 08             	add    esp,0x8
c0010b59:	5b                   	pop    ebx
c0010b5a:	e9 0f f8 ff ff       	jmp    c001036e <VgaText::load()>

c0010b5f <doTerminalCycle()>:
c0010b5f:	83 ec 18             	sub    esp,0x18
c0010b62:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c0010b67:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b6d:	50                   	push   eax
c0010b6e:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0010b73:	e8 35 ff ff ff       	call   c0010aad <setActiveTerminal(VgaText*)>
c0010b78:	83 c4 1c             	add    esp,0x1c
c0010b7b:	c3                   	ret    

c0010b7c <VgaText::doUpdate()>:
c0010b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b80:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b86:	85 c0                	test   eax,eax
c0010b88:	74 02                	je     c0010b8c <VgaText::doUpdate()+0x10>
c0010b8a:	ff e0                	jmp    eax
c0010b8c:	c3                   	ret    
c0010b8d:	90                   	nop

c0010b8e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b8e:	55                   	push   ebp
c0010b8f:	57                   	push   edi
c0010b90:	56                   	push   esi
c0010b91:	53                   	push   ebx
c0010b92:	83 ec 1c             	sub    esp,0x1c
c0010b95:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b99:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b9e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ba5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010ba8:	50                   	push   eax
c0010ba9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bae:	50                   	push   eax
c0010baf:	e8 4a f9 ff ff       	call   c00104fe <VgaText::combineColours(unsigned char, unsigned char)>
c0010bb4:	59                   	pop    ecx
c0010bb5:	0f b6 c0             	movzx  eax,al
c0010bb8:	5b                   	pop    ebx
c0010bb9:	31 c9                	xor    ecx,ecx
c0010bbb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bc3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bc7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bd1:	0f b7 db             	movzx  ebx,bx
c0010bd4:	01 db                	add    ebx,ebx
c0010bd6:	01 fb                	add    ebx,edi
c0010bd8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010bdb:	84 c0                	test   al,al
c0010bdd:	0f 84 38 01 00 00    	je     c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010be3:	3c 0d                	cmp    al,0xd
c0010be5:	75 0f                	jne    c0010bf6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010be7:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf1:	e9 1f 01 00 00       	jmp    c0010d15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bf6:	3c 0a                	cmp    al,0xa
c0010bf8:	75 5b                	jne    c0010c55 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010bfa:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c00:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c0d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c13:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c19:	75 12                	jne    c0010c2d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c1b:	83 ec 0c             	sub    esp,0xc
c0010c1e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c24:	55                   	push   ebp
c0010c25:	e8 e6 f8 ff ff       	call   c0010510 <VgaText::scrollScreen()>
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	83 ec 0c             	sub    esp,0xc
c0010c30:	55                   	push   ebp
c0010c31:	e8 8c f7 ff ff       	call   c00103c2 <VgaText::updateCursor()>
c0010c36:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c3e:	83 c4 10             	add    esp,0x10
c0010c41:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c47:	31 c9                	xor    ecx,ecx
c0010c49:	0f b7 db             	movzx  ebx,bx
c0010c4c:	01 db                	add    ebx,ebx
c0010c4e:	01 fb                	add    ebx,edi
c0010c50:	e9 c0 00 00 00       	jmp    c0010d15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c55:	3c 08                	cmp    al,0x8
c0010c57:	75 4e                	jne    c0010ca7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c59:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c5d:	53                   	push   ebx
c0010c5e:	53                   	push   ebx
c0010c5f:	6a 01                	push   0x1
c0010c61:	55                   	push   ebp
c0010c62:	e8 df fc ff ff       	call   c0010946 <VgaText::decrementCursor(bool)>
c0010c67:	58                   	pop    eax
c0010c68:	5a                   	pop    edx
c0010c69:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c6f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c75:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c7b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c81:	6a 20                	push   0x20
c0010c83:	55                   	push   ebp
c0010c84:	e8 2d f9 ff ff       	call   c00105b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c89:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c91:	83 c4 20             	add    esp,0x20
c0010c94:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c9a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c9e:	0f b7 db             	movzx  ebx,bx
c0010ca1:	01 db                	add    ebx,ebx
c0010ca3:	01 fb                	add    ebx,edi
c0010ca5:	eb 6e                	jmp    c0010d15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ca7:	51                   	push   ecx
c0010ca8:	51                   	push   ecx
c0010ca9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cad:	50                   	push   eax
c0010cae:	e8 f1 f8 ff ff       	call   c00105a4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cb9:	39 2d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ebp
c0010cbf:	75 2a                	jne    c0010ceb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc1:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010cc7:	85 c0                	test   eax,eax
c0010cc9:	74 20                	je     c0010ceb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ccb:	52                   	push   edx
c0010ccc:	52                   	push   edx
c0010ccd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cd3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010ce4:	51                   	push   ecx
c0010ce5:	55                   	push   ebp
c0010ce6:	ff d0                	call   eax
c0010ce8:	83 c4 20             	add    esp,0x20
c0010ceb:	83 c3 02             	add    ebx,0x2
c0010cee:	50                   	push   eax
c0010cef:	50                   	push   eax
c0010cf0:	6a 00                	push   0x0
c0010cf2:	55                   	push   ebp
c0010cf3:	e8 8c f9 ff ff       	call   c0010684 <VgaText::incrementCursor(bool)>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d02:	75 0f                	jne    c0010d13 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d04:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d0c:	0f b7 db             	movzx  ebx,bx
c0010d0f:	01 db                	add    ebx,ebx
c0010d11:	01 fb                	add    ebx,edi
c0010d13:	b1 01                	mov    cl,0x1
c0010d15:	46                   	inc    esi
c0010d16:	e9 bd fe ff ff       	jmp    c0010bd8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d1b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d1f:	83 ec 0c             	sub    esp,0xc
c0010d22:	55                   	push   ebp
c0010d23:	e8 9a f6 ff ff       	call   c00103c2 <VgaText::updateCursor()>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d2f:	84 c9                	test   cl,cl
c0010d31:	74 0c                	je     c0010d3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	55                   	push   ebp
c0010d37:	e8 40 fe ff ff       	call   c0010b7c <VgaText::doUpdate()>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d46:	83 c4 1c             	add    esp,0x1c
c0010d49:	5b                   	pop    ebx
c0010d4a:	5e                   	pop    esi
c0010d4b:	5f                   	pop    edi
c0010d4c:	5d                   	pop    ebp
c0010d4d:	c3                   	ret    

c0010d4e <VgaText::clearScreen()>:
c0010d4e:	57                   	push   edi
c0010d4f:	56                   	push   esi
c0010d50:	31 f6                	xor    esi,esi
c0010d52:	53                   	push   ebx
c0010d53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d57:	52                   	push   edx
c0010d58:	6a 00                	push   0x0
c0010d5a:	6a 00                	push   0x0
c0010d5c:	53                   	push   ebx
c0010d5d:	e8 cc f8 ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c0010d62:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d72:	7e 26                	jle    c0010d9a <VgaText::clearScreen()+0x4c>
c0010d74:	31 ff                	xor    edi,edi
c0010d76:	50                   	push   eax
c0010d77:	50                   	push   eax
c0010d78:	56                   	push   esi
c0010d79:	57                   	push   edi
c0010d7a:	47                   	inc    edi
c0010d7b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d81:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d87:	6a 20                	push   0x20
c0010d89:	53                   	push   ebx
c0010d8a:	e8 27 f8 ff ff       	call   c00105b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d8f:	83 c4 20             	add    esp,0x20
c0010d92:	83 ff 50             	cmp    edi,0x50
c0010d95:	75 df                	jne    c0010d76 <VgaText::clearScreen()+0x28>
c0010d97:	46                   	inc    esi
c0010d98:	eb d2                	jmp    c0010d6c <VgaText::clearScreen()+0x1e>
c0010d9a:	83 ec 0c             	sub    esp,0xc
c0010d9d:	53                   	push   ebx
c0010d9e:	e8 d9 fd ff ff       	call   c0010b7c <VgaText::doUpdate()>
c0010da3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010daa:	83 c4 10             	add    esp,0x10
c0010dad:	5b                   	pop    ebx
c0010dae:	5e                   	pop    esi
c0010daf:	5f                   	pop    edi
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <VgaText::putchar(char)>:
c0010db2:	56                   	push   esi
c0010db3:	53                   	push   ebx
c0010db4:	83 ec 14             	sub    esp,0x14
c0010db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dbb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dbf:	3c 5b                	cmp    al,0x5b
c0010dc1:	75 21                	jne    c0010de4 <VgaText::putchar(char)+0x32>
c0010dc3:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dca:	74 28                	je     c0010df4 <VgaText::putchar(char)+0x42>
c0010dcc:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010dd5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010ddf:	e9 e2 00 00 00       	jmp    c0010ec6 <VgaText::putchar(char)+0x114>
c0010de4:	3c 1b                	cmp    al,0x1b
c0010de6:	75 0c                	jne    c0010df4 <VgaText::putchar(char)+0x42>
c0010de8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010def:	e9 d2 00 00 00       	jmp    c0010ec6 <VgaText::putchar(char)+0x114>
c0010df4:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010dfa:	84 c9                	test   cl,cl
c0010dfc:	0f 84 ab 00 00 00    	je     c0010ead <VgaText::putchar(char)+0xfb>
c0010e02:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e05:	80 fa 3e             	cmp    dl,0x3e
c0010e08:	0f 87 82 00 00 00    	ja     c0010e90 <VgaText::putchar(char)+0xde>
c0010e0e:	3c 6d                	cmp    al,0x6d
c0010e10:	75 4d                	jne    c0010e5f <VgaText::putchar(char)+0xad>
c0010e12:	31 f6                	xor    esi,esi
c0010e14:	31 d2                	xor    edx,edx
c0010e16:	31 c0                	xor    eax,eax
c0010e18:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e1e:	7e 30                	jle    c0010e50 <VgaText::putchar(char)+0x9e>
c0010e20:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e28:	80 fa 3b             	cmp    dl,0x3b
c0010e2b:	75 17                	jne    c0010e44 <VgaText::putchar(char)+0x92>
c0010e2d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e31:	50                   	push   eax
c0010e32:	53                   	push   ebx
c0010e33:	e8 ee f5 ff ff       	call   c0010426 <VgaText::doANSI_SGR(int)>
c0010e38:	59                   	pop    ecx
c0010e39:	31 d2                	xor    edx,edx
c0010e3b:	58                   	pop    eax
c0010e3c:	31 c0                	xor    eax,eax
c0010e3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e42:	eb 09                	jmp    c0010e4d <VgaText::putchar(char)+0x9b>
c0010e44:	6b c0 0a             	imul   eax,eax,0xa
c0010e47:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e4b:	88 ca                	mov    dl,cl
c0010e4d:	46                   	inc    esi
c0010e4e:	eb c8                	jmp    c0010e18 <VgaText::putchar(char)+0x66>
c0010e50:	84 d2                	test   dl,dl
c0010e52:	74 31                	je     c0010e85 <VgaText::putchar(char)+0xd3>
c0010e54:	50                   	push   eax
c0010e55:	53                   	push   ebx
c0010e56:	e8 cb f5 ff ff       	call   c0010426 <VgaText::doANSI_SGR(int)>
c0010e5b:	58                   	pop    eax
c0010e5c:	5a                   	pop    edx
c0010e5d:	eb 26                	jmp    c0010e85 <VgaText::putchar(char)+0xd3>
c0010e5f:	3c 4a                	cmp    al,0x4a
c0010e61:	75 22                	jne    c0010e85 <VgaText::putchar(char)+0xd3>
c0010e63:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e6a:	75 19                	jne    c0010e85 <VgaText::putchar(char)+0xd3>
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	53                   	push   ebx
c0010e70:	e8 d9 fe ff ff       	call   c0010d4e <VgaText::clearScreen()>
c0010e75:	83 c4 0c             	add    esp,0xc
c0010e78:	6a 00                	push   0x0
c0010e7a:	6a 00                	push   0x0
c0010e7c:	53                   	push   ebx
c0010e7d:	e8 ac f7 ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e8e:	eb 36                	jmp    c0010ec6 <VgaText::putchar(char)+0x114>
c0010e90:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e96:	83 fa 0e             	cmp    edx,0xe
c0010e99:	7f 2b                	jg     c0010ec6 <VgaText::putchar(char)+0x114>
c0010e9b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e9e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010ea4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010eab:	eb 19                	jmp    c0010ec6 <VgaText::putchar(char)+0x114>
c0010ead:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010eb3:	0f be c0             	movsx  eax,al
c0010eb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ebc:	50                   	push   eax
c0010ebd:	53                   	push   ebx
c0010ebe:	e8 ab fa ff ff       	call   c001096e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	83 c4 14             	add    esp,0x14
c0010ec9:	5b                   	pop    ebx
c0010eca:	5e                   	pop    esi
c0010ecb:	c3                   	ret    

c0010ecc <VgaText::puts(char const*)>:
c0010ecc:	53                   	push   ebx
c0010ecd:	83 ec 08             	sub    esp,0x8
c0010ed0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ed4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ed7:	84 c0                	test   al,al
c0010ed9:	74 12                	je     c0010eed <VgaText::puts(char const*)+0x21>
c0010edb:	43                   	inc    ebx
c0010edc:	51                   	push   ecx
c0010edd:	51                   	push   ecx
c0010ede:	50                   	push   eax
c0010edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee3:	e8 ca fe ff ff       	call   c0010db2 <VgaText::putchar(char)>
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	eb e7                	jmp    c0010ed4 <VgaText::puts(char const*)+0x8>
c0010eed:	83 c4 08             	add    esp,0x8
c0010ef0:	5b                   	pop    ebx
c0010ef1:	c3                   	ret    

c0010ef2 <VgaText::putx(unsigned int)>:
c0010ef2:	57                   	push   edi
c0010ef3:	b9 11 00 00 00       	mov    ecx,0x11
c0010ef8:	56                   	push   esi
c0010ef9:	be 2e 9b 02 c0       	mov    esi,0xc0029b2e
c0010efe:	53                   	push   ebx
c0010eff:	83 ec 20             	sub    esp,0x20
c0010f02:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f06:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f0a:	fc                   	cld    
c0010f0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f0d:	be 08 00 00 00       	mov    esi,0x8
c0010f12:	50                   	push   eax
c0010f13:	50                   	push   eax
c0010f14:	89 d8                	mov    eax,ebx
c0010f16:	c1 e3 04             	shl    ebx,0x4
c0010f19:	c1 e8 1c             	shr    eax,0x1c
c0010f1c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f21:	50                   	push   eax
c0010f22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f26:	e8 87 fe ff ff       	call   c0010db2 <VgaText::putchar(char)>
c0010f2b:	83 c4 10             	add    esp,0x10
c0010f2e:	4e                   	dec    esi
c0010f2f:	75 e1                	jne    c0010f12 <VgaText::putx(unsigned int)+0x20>
c0010f31:	83 c4 20             	add    esp,0x20
c0010f34:	5b                   	pop    ebx
c0010f35:	5e                   	pop    esi
c0010f36:	5f                   	pop    edi
c0010f37:	c3                   	ret    

c0010f38 <VgaText::VgaText(char const*)>:
c0010f38:	57                   	push   edi
c0010f39:	56                   	push   esi
c0010f3a:	53                   	push   ebx
c0010f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3f:	83 ec 08             	sub    esp,0x8
c0010f42:	6a 00                	push   0x0
c0010f44:	50                   	push   eax
c0010f45:	e8 6e 05 00 00       	call   c00114b8 <UnixFile::UnixFile(int)>
c0010f4a:	83 c4 10             	add    esp,0x10
c0010f4d:	ba 94 9b 02 c0       	mov    edx,0xc0029b94
c0010f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f56:	89 10                	mov    DWORD PTR [eax],edx
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f78:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f83:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc0:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fc6:	bb 00 db 02 c0       	mov    ebx,0xc002db00
c0010fcb:	b8 08 00 00 00       	mov    eax,0x8
c0010fd0:	fc                   	cld    
c0010fd1:	89 d7                	mov    edi,edx
c0010fd3:	89 de                	mov    esi,ebx
c0010fd5:	89 c1                	mov    ecx,eax
c0010fd7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fdd:	05 1e 10 00 00       	add    eax,0x101e
c0010fe2:	83 ec 08             	sub    esp,0x8
c0010fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe9:	50                   	push   eax
c0010fea:	e8 6c f7 fe ff       	call   c000075b <strcpy>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff6:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011004:	83 c0 0c             	add    eax,0xc
c0011007:	83 ec 04             	sub    esp,0x4
c001100a:	68 00 0f 00 00       	push   0xf00
c001100f:	6a 00                	push   0x0
c0011011:	50                   	push   eax
c0011012:	e8 a5 f6 fe ff       	call   c00006bc <memset>
c0011017:	83 c4 10             	add    esp,0x10
c001101a:	83 ec 04             	sub    esp,0x4
c001101d:	6a 00                	push   0x0
c001101f:	6a 07                	push   0x7
c0011021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011025:	e8 b4 f4 ff ff       	call   c00104de <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	83 ec 08             	sub    esp,0x8
c0011030:	6a 02                	push   0x2
c0011032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011036:	e8 49 fa ff ff       	call   c0010a84 <VgaText::setCursorHeight(int)>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 ec 04             	sub    esp,0x4
c0011041:	6a 00                	push   0x0
c0011043:	6a 00                	push   0x0
c0011045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011049:	e8 e0 f5 ff ff       	call   c001062e <VgaText::setCursor(int, int)>
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	83 ec 08             	sub    esp,0x8
c0011054:	6a 01                	push   0x1
c0011056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105a:	e8 7d f3 ff ff       	call   c00103dc <VgaText::showCursor(bool)>
c001105f:	83 c4 10             	add    esp,0x10
c0011062:	83 ec 08             	sub    esp,0x8
c0011065:	6a 01                	push   0x1
c0011067:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106b:	e8 7c f3 ff ff       	call   c00103ec <VgaText::disableBlink(bool)>
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	83 ec 0c             	sub    esp,0xc
c0011076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001107a:	e8 cf fc ff ff       	call   c0010d4e <VgaText::clearScreen()>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011086:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001108d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011091:	05 9e 10 00 00       	add    eax,0x109e
c0011096:	83 ec 04             	sub    esp,0x4
c0011099:	68 96 00 00 00       	push   0x96
c001109e:	6a 00                	push   0x0
c00110a0:	50                   	push   eax
c00110a1:	e8 16 f6 fe ff       	call   c00006bc <memset>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ad:	05 34 11 00 00       	add    eax,0x1134
c00110b2:	83 ec 04             	sub    esp,0x4
c00110b5:	68 2c 01 00 00       	push   0x12c
c00110ba:	6a 00                	push   0x0
c00110bc:	50                   	push   eax
c00110bd:	e8 fa f5 fe ff       	call   c00006bc <memset>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	90                   	nop
c00110c6:	5b                   	pop    ebx
c00110c7:	5e                   	pop    esi
c00110c8:	5f                   	pop    edi
c00110c9:	c3                   	ret    

c00110ca <VgaText::receiveKey(unsigned char)>:
c00110ca:	55                   	push   ebp
c00110cb:	57                   	push   edi
c00110cc:	56                   	push   esi
c00110cd:	53                   	push   ebx
c00110ce:	83 ec 1c             	sub    esp,0x1c
c00110d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110d9:	84 db                	test   bl,bl
c00110db:	0f 84 c9 00 00 00    	je     c00111aa <VgaText::receiveKey(unsigned char)+0xe0>
c00110e1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110e7:	80 fb 08             	cmp    bl,0x8
c00110ea:	75 2c                	jne    c0011118 <VgaText::receiveKey(unsigned char)+0x4e>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	57                   	push   edi
c00110f0:	e8 e4 f5 fe ff       	call   c00006d9 <strlen>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	85 c0                	test   eax,eax
c00110fa:	74 41                	je     c001113d <VgaText::receiveKey(unsigned char)+0x73>
c00110fc:	50                   	push   eax
c00110fd:	50                   	push   eax
c00110fe:	6a 08                	push   0x8
c0011100:	56                   	push   esi
c0011101:	e8 ac fc ff ff       	call   c0010db2 <VgaText::putchar(char)>
c0011106:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011109:	e8 cb f5 fe ff       	call   c00006d9 <strlen>
c001110e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011116:	eb 22                	jmp    c001113a <VgaText::receiveKey(unsigned char)+0x70>
c0011118:	0f be c3             	movsx  eax,bl
c001111b:	52                   	push   edx
c001111c:	52                   	push   edx
c001111d:	50                   	push   eax
c001111e:	56                   	push   esi
c001111f:	e8 8e fc ff ff       	call   c0010db2 <VgaText::putchar(char)>
c0011124:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011128:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001112d:	59                   	pop    ecx
c001112e:	5d                   	pop    ebp
c001112f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011133:	50                   	push   eax
c0011134:	57                   	push   edi
c0011135:	e8 d8 f6 fe ff       	call   c0000812 <strcat>
c001113a:	83 c4 10             	add    esp,0x10
c001113d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011144:	75 05                	jne    c001114b <VgaText::receiveKey(unsigned char)+0x81>
c0011146:	80 fb 0a             	cmp    bl,0xa
c0011149:	75 53                	jne    c001119e <VgaText::receiveKey(unsigned char)+0xd4>
c001114b:	83 ec 0c             	sub    esp,0xc
c001114e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011154:	53                   	push   ebx
c0011155:	e8 7f f5 fe ff       	call   c00006d9 <strlen>
c001115a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001115d:	89 c5                	mov    ebp,eax
c001115f:	e8 75 f5 fe ff       	call   c00006d9 <strlen>
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001116b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011170:	76 10                	jbe    c0011182 <VgaText::receiveKey(unsigned char)+0xb8>
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	68 3f 9b 02 c0       	push   0xc0029b3f
c001117a:	e8 e0 8c 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	50                   	push   eax
c0011183:	50                   	push   eax
c0011184:	57                   	push   edi
c0011185:	53                   	push   ebx
c0011186:	e8 87 f6 fe ff       	call   c0000812 <strcat>
c001118b:	83 c4 0c             	add    esp,0xc
c001118e:	68 96 00 00 00       	push   0x96
c0011193:	6a 00                	push   0x0
c0011195:	57                   	push   edi
c0011196:	e8 21 f5 fe ff       	call   c00006bc <memset>
c001119b:	83 c4 10             	add    esp,0x10
c001119e:	83 ec 0c             	sub    esp,0xc
c00111a1:	56                   	push   esi
c00111a2:	e8 d5 f9 ff ff       	call   c0010b7c <VgaText::doUpdate()>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	83 c4 1c             	add    esp,0x1c
c00111ad:	5b                   	pop    ebx
c00111ae:	5e                   	pop    esi
c00111af:	5f                   	pop    edi
c00111b0:	5d                   	pop    ebp
c00111b1:	c3                   	ret    

c00111b2 <VgaText::write(unsigned long long, void*, int*)>:
c00111b2:	55                   	push   ebp
c00111b3:	57                   	push   edi
c00111b4:	56                   	push   esi
c00111b5:	53                   	push   ebx
c00111b6:	83 ec 0c             	sub    esp,0xc
c00111b9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111bd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111c5:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111cc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111cf:	39 eb                	cmp    ebx,ebp
c00111d1:	74 13                	je     c00111e6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111d3:	43                   	inc    ebx
c00111d4:	50                   	push   eax
c00111d5:	50                   	push   eax
c00111d6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111da:	50                   	push   eax
c00111db:	56                   	push   esi
c00111dc:	e8 d1 fb ff ff       	call   c0010db2 <VgaText::putchar(char)>
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	eb e9                	jmp    c00111cf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111e6:	83 ec 0c             	sub    esp,0xc
c00111e9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111f0:	56                   	push   esi
c00111f1:	e8 86 f9 ff ff       	call   c0010b7c <VgaText::doUpdate()>
c00111f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111fa:	89 38                	mov    DWORD PTR [eax],edi
c00111fc:	83 c4 1c             	add    esp,0x1c
c00111ff:	31 c0                	xor    eax,eax
c0011201:	5b                   	pop    ebx
c0011202:	5e                   	pop    esi
c0011203:	5f                   	pop    edi
c0011204:	5d                   	pop    ebp
c0011205:	c3                   	ret    

c0011206 <newTerminal(char*)>:
c0011206:	83 ec 28             	sub    esp,0x28
c0011209:	68 60 12 00 00       	push   0x1260
c001120e:	e8 09 e4 ff ff       	call   c000f61c <malloc>
c0011213:	5a                   	pop    edx
c0011214:	59                   	pop    ecx
c0011215:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011219:	50                   	push   eax
c001121a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001121e:	e8 15 fd ff ff       	call   c0010f38 <VgaText::VgaText(char const*)>
c0011223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011227:	83 c4 2c             	add    esp,0x2c
c001122a:	c3                   	ret    
c001122b:	90                   	nop

c001122c <TSS::TSS()>:
c001122c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011230:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011237:	90                   	nop
c0011238:	c3                   	ret    
c0011239:	90                   	nop

c001123a <TSS::setESP(unsigned long)>:
c001123a:	55                   	push   ebp
c001123b:	89 e5                	mov    ebp,esp
c001123d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011240:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011243:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011246:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011249:	90                   	nop
c001124a:	5d                   	pop    ebp
c001124b:	c3                   	ret    

c001124c <TSS::flush()>:
c001124c:	55                   	push   ebp
c001124d:	89 e5                	mov    ebp,esp
c001124f:	83 ec 10             	sub    esp,0x10
c0011252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011255:	8b 00                	mov    eax,DWORD PTR [eax]
c0011257:	83 c8 03             	or     eax,0x3
c001125a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001125e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011262:	66 89 d0             	mov    ax,dx
c0011265:	0f 00 d8             	ltr    ax
c0011268:	90                   	nop
c0011269:	c9                   	leave  
c001126a:	c3                   	ret    
c001126b:	90                   	nop

c001126c <TSS::setup(unsigned long, unsigned long)>:
c001126c:	55                   	push   ebp
c001126d:	89 e5                	mov    ebp,esp
c001126f:	83 ec 18             	sub    esp,0x18
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	6a 68                	push   0x68
c0011277:	e8 a0 e3 ff ff       	call   c000f61c <malloc>
c001127c:	83 c4 10             	add    esp,0x10
c001127f:	89 c2                	mov    edx,eax
c0011281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011284:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001128d:	83 ec 04             	sub    esp,0x4
c0011290:	6a 68                	push   0x68
c0011292:	6a 00                	push   0x0
c0011294:	50                   	push   eax
c0011295:	e8 22 f4 fe ff       	call   c00006bc <memset>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112af:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112df:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112eb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011303:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001130c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001130f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011312:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011318:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001131b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001131e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011327:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001132e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011331:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011334:	0f 20 da             	mov    edx,cr3
c0011337:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001133a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001133d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	83 ec 08             	sub    esp,0x8
c0011349:	50                   	push   eax
c001134a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001134d:	50                   	push   eax
c001134e:	e8 a7 da ff ff       	call   c000edfa <GDTEntry::setBase(unsigned int)>
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	83 ec 08             	sub    esp,0x8
c0011359:	6a 68                	push   0x68
c001135b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001135e:	50                   	push   eax
c001135f:	e8 b2 da ff ff       	call   c000ee16 <GDTEntry::setLimit(unsigned int)>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001136b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001136e:	83 e0 0f             	and    eax,0xf
c0011371:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011374:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011377:	83 c8 40             	or     eax,0x40
c001137a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001137d:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0011382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011388:	05 78 01 00 00       	add    eax,0x178
c001138d:	83 ec 04             	sub    esp,0x4
c0011390:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011393:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011396:	50                   	push   eax
c0011397:	e8 ae da ff ff       	call   c000ee4a <GDT::addEntry(GDTEntry)>
c001139c:	83 c4 10             	add    esp,0x10
c001139f:	89 c2                	mov    edx,eax
c00113a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113a4:	89 10                	mov    DWORD PTR [eax],edx
c00113a6:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00113ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113b1:	05 78 01 00 00       	add    eax,0x178
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	50                   	push   eax
c00113ba:	e8 cf da ff ff       	call   c000ee8e <GDT::flush()>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00113c7:	83 ec 08             	sub    esp,0x8
c00113ca:	50                   	push   eax
c00113cb:	68 a8 9b 02 c0       	push   0xc0029ba8
c00113d0:	e8 16 15 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00113d5:	83 c4 10             	add    esp,0x10
c00113d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113db:	8b 00                	mov    eax,DWORD PTR [eax]
c00113dd:	c9                   	leave  
c00113de:	c3                   	ret    
c00113df:	90                   	nop

c00113e0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113eb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113f0:	75 08                	jne    c00113fa <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113f2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113f8:	eb 38                	jmp    c0011432 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00113fa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113ff:	75 17                	jne    c0011418 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011406:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011409:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001140f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011411:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011415:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011418:	89 c1                	mov    ecx,eax
c001141a:	83 e1 fd             	and    ecx,0xfffffffd
c001141d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011423:	74 cd                	je     c00113f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011425:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001142a:	83 e0 ef             	and    eax,0xffffffef
c001142d:	83 f8 08             	cmp    eax,0x8
c0011430:	76 c0                	jbe    c00113f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011432:	31 c0                	xor    eax,eax
c0011434:	c3                   	ret    
c0011435:	90                   	nop

c0011436 <ReservedFilename::isAtty()>:
c0011436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001143a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001143d:	31 c0                	xor    eax,eax
c001143f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011445:	74 09                	je     c0011450 <ReservedFilename::isAtty()+0x1a>
c0011447:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001144d:	0f 94 c0             	sete   al
c0011450:	c3                   	ret    
c0011451:	90                   	nop

c0011452 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011456:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001145a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011461:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011466:	75 08                	jne    c0011470 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011468:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001146e:	eb 3d                	jmp    c00114ad <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011470:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011475:	75 17                	jne    c001148e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001147c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001147f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011485:	8b 10                	mov    edx,DWORD PTR [eax]
c0011487:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001148b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001148e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011493:	75 04                	jne    c0011499 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011495:	89 0a                	mov    DWORD PTR [edx],ecx
c0011497:	eb 14                	jmp    c00114ad <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011499:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001149e:	74 c8                	je     c0011468 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114a5:	83 e0 ef             	and    eax,0xffffffef
c00114a8:	83 f8 08             	cmp    eax,0x8
c00114ab:	76 bb                	jbe    c0011468 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114ad:	31 c0                	xor    eax,eax
c00114af:	c3                   	ret    

c00114b0 <UnixFile::getFileDescriptor()>:
c00114b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b7:	c3                   	ret    

c00114b8 <UnixFile::UnixFile(int)>:
c00114b8:	53                   	push   ebx
c00114b9:	83 ec 28             	sub    esp,0x28
c00114bc:	ba 94 9c 02 c0       	mov    edx,0xc0029c94
c00114c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114c5:	89 10                	mov    DWORD PTR [eax],edx
c00114c7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114cf:	0f 8f 8c 01 00 00    	jg     c0011661 <UnixFile::UnixFile(int)+0x1a9>
c00114d5:	a1 e0 c9 02 c0       	mov    eax,ds:0xc002c9e0
c00114da:	8d 50 01             	lea    edx,[eax+0x1]
c00114dd:	89 15 e0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e0,edx
c00114e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114ea:	83 ec 08             	sub    esp,0x8
c00114ed:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114f1:	68 b8 db 02 c0       	push   0xc002dbb8
c00114f6:	e8 85 69 01 00       	call   c0027e80 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	a0 b4 db 02 c0       	mov    al,ds:0xc002dbb4
c0011503:	83 f0 01             	xor    eax,0x1
c0011506:	84 c0                	test   al,al
c0011508:	0f 84 54 01 00 00    	je     c0011662 <UnixFile::UnixFile(int)+0x1aa>
c001150e:	c6 05 b4 db 02 c0 01 	mov    BYTE PTR ds:0xc002dbb4,0x1
c0011515:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011524:	e8 f3 e0 ff ff       	call   c000f61c <malloc>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	89 c3                	mov    ebx,eax
c001152e:	83 ec 08             	sub    esp,0x8
c0011531:	68 03 ff ff 0f       	push   0xfffff03
c0011536:	53                   	push   ebx
c0011537:	e8 2c 01 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c001153c:	83 c4 10             	add    esp,0x10
c001153f:	89 1d ac db 02 c0    	mov    DWORD PTR ds:0xc002dbac,ebx
c0011545:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001154d:	83 ec 0c             	sub    esp,0xc
c0011550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011554:	e8 c3 e0 ff ff       	call   c000f61c <malloc>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	89 c3                	mov    ebx,eax
c001155e:	83 ec 08             	sub    esp,0x8
c0011561:	68 01 ff ff 0f       	push   0xfffff01
c0011566:	53                   	push   ebx
c0011567:	e8 fc 00 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c001156c:	83 c4 10             	add    esp,0x10
c001156f:	89 1d b0 db 02 c0    	mov    DWORD PTR ds:0xc002dbb0,ebx
c0011575:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001157d:	83 ec 0c             	sub    esp,0xc
c0011580:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011584:	e8 93 e0 ff ff       	call   c000f61c <malloc>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	89 c3                	mov    ebx,eax
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	68 00 ff ff 0f       	push   0xfffff00
c0011596:	53                   	push   ebx
c0011597:	e8 cc 00 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c00115a5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115ad:	83 ec 0c             	sub    esp,0xc
c00115b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115b4:	e8 63 e0 ff ff       	call   c000f61c <malloc>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	89 c3                	mov    ebx,eax
c00115be:	83 ec 08             	sub    esp,0x8
c00115c1:	68 02 ff ff 0f       	push   0xfffff02
c00115c6:	53                   	push   ebx
c00115c7:	e8 9c 00 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	89 1d a8 db 02 c0    	mov    DWORD PTR ds:0xc002dba8,ebx
c00115d5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115dd:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115e2:	7f 7e                	jg     c0011662 <UnixFile::UnixFile(int)+0x1aa>
c00115e4:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115ec:	83 ec 0c             	sub    esp,0xc
c00115ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115f3:	e8 24 e0 ff ff       	call   c000f61c <malloc>
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	89 c3                	mov    ebx,eax
c00115fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011601:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011606:	83 ec 08             	sub    esp,0x8
c0011609:	50                   	push   eax
c001160a:	53                   	push   ebx
c001160b:	e8 58 00 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011617:	89 1c 85 80 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2480],ebx
c001161e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011626:	83 ec 0c             	sub    esp,0xc
c0011629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001162d:	e8 ea df ff ff       	call   c000f61c <malloc>
c0011632:	83 c4 10             	add    esp,0x10
c0011635:	89 c3                	mov    ebx,eax
c0011637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001163b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011640:	83 ec 08             	sub    esp,0x8
c0011643:	50                   	push   eax
c0011644:	53                   	push   ebx
c0011645:	e8 1e 00 00 00       	call   c0011668 <ReservedFilename::ReservedFilename(int)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011651:	89 1c 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],ebx
c0011658:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001165c:	e9 7c ff ff ff       	jmp    c00115dd <UnixFile::UnixFile(int)+0x125>
c0011661:	90                   	nop
c0011662:	83 c4 28             	add    esp,0x28
c0011665:	5b                   	pop    ebx
c0011666:	c3                   	ret    
c0011667:	90                   	nop

c0011668 <ReservedFilename::ReservedFilename(int)>:
c0011668:	83 ec 0c             	sub    esp,0xc
c001166b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166f:	83 ec 08             	sub    esp,0x8
c0011672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011676:	50                   	push   eax
c0011677:	e8 3c fe ff ff       	call   c00114b8 <UnixFile::UnixFile(int)>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0011684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011688:	89 10                	mov    DWORD PTR [eax],edx
c001168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011692:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011695:	90                   	nop
c0011696:	83 c4 0c             	add    esp,0xc
c0011699:	c3                   	ret    

c001169a <UnixFile::~UnixFile()>:
c001169a:	83 ec 1c             	sub    esp,0x1c
c001169d:	ba 94 9c 02 c0       	mov    edx,0xc0029c94
c00116a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116a6:	89 10                	mov    DWORD PTR [eax],edx
c00116a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116af:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116b4:	7f 73                	jg     c0011729 <UnixFile::~UnixFile()+0x8f>
c00116b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116be:	83 ec 0c             	sub    esp,0xc
c00116c1:	68 b8 db 02 c0       	push   0xc002dbb8
c00116c6:	e8 89 68 01 00       	call   c0027f54 <LinkedList<UnixFile>::getFirstElement()>
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116d2:	83 ec 0c             	sub    esp,0xc
c00116d5:	68 b8 db 02 c0       	push   0xc002dbb8
c00116da:	e8 7d 68 01 00       	call   c0027f5c <LinkedList<UnixFile>::removeFirst()>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116e6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116ea:	74 40                	je     c001172c <UnixFile::~UnixFile()+0x92>
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116f3:	68 b8 db 02 c0       	push   0xc002dbb8
c00116f8:	e8 83 67 01 00       	call   c0027e80 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011704:	8d 50 01             	lea    edx,[eax+0x1]
c0011707:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001170b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011710:	0f 94 c0             	sete   al
c0011713:	84 c0                	test   al,al
c0011715:	74 a7                	je     c00116be <UnixFile::~UnixFile()+0x24>
c0011717:	83 ec 0c             	sub    esp,0xc
c001171a:	68 6c 9c 02 c0       	push   0xc0029c6c
c001171f:	e8 3b 87 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011724:	83 c4 10             	add    esp,0x10
c0011727:	eb 95                	jmp    c00116be <UnixFile::~UnixFile()+0x24>
c0011729:	90                   	nop
c001172a:	eb 01                	jmp    c001172d <UnixFile::~UnixFile()+0x93>
c001172c:	90                   	nop
c001172d:	90                   	nop
c001172e:	83 c4 1c             	add    esp,0x1c
c0011731:	c3                   	ret    

c0011732 <UnixFile::~UnixFile()>:
c0011732:	83 ec 0c             	sub    esp,0xc
c0011735:	83 ec 0c             	sub    esp,0xc
c0011738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173c:	e8 59 ff ff ff       	call   c001169a <UnixFile::~UnixFile()>
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	83 ec 08             	sub    esp,0x8
c0011747:	6a 0c                	push   0xc
c0011749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001174d:	e8 b9 10 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	83 c4 0c             	add    esp,0xc
c0011758:	c3                   	ret    
c0011759:	90                   	nop

c001175a <ReservedFilename::~ReservedFilename()>:
c001175a:	83 ec 0c             	sub    esp,0xc
c001175d:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0011762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011766:	89 10                	mov    DWORD PTR [eax],edx
c0011768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176c:	83 ec 0c             	sub    esp,0xc
c001176f:	50                   	push   eax
c0011770:	e8 25 ff ff ff       	call   c001169a <UnixFile::~UnixFile()>
c0011775:	83 c4 10             	add    esp,0x10
c0011778:	90                   	nop
c0011779:	83 c4 0c             	add    esp,0xc
c001177c:	c3                   	ret    
c001177d:	90                   	nop

c001177e <ReservedFilename::~ReservedFilename()>:
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	83 ec 0c             	sub    esp,0xc
c0011784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011788:	e8 cd ff ff ff       	call   c001175a <ReservedFilename::~ReservedFilename()>
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	6a 0c                	push   0xc
c0011795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011799:	e8 6d 10 00 00       	call   c001280b <operator delete(void*, unsigned long)>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	83 c4 0c             	add    esp,0xc
c00117a4:	c3                   	ret    

c00117a5 <getFromFileDescriptor(int)>:
c00117a5:	53                   	push   ebx
c00117a6:	83 ec 08             	sub    esp,0x8
c00117a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117ad:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117b3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117b9:	7f 2c                	jg     c00117e7 <getFromFileDescriptor(int)+0x42>
c00117bb:	83 ec 0c             	sub    esp,0xc
c00117be:	68 b8 db 02 c0       	push   0xc002dbb8
c00117c3:	e8 8c 67 01 00       	call   c0027f54 <LinkedList<UnixFile>::getFirstElement()>
c00117c8:	83 c4 10             	add    esp,0x10
c00117cb:	85 c0                	test   eax,eax
c00117cd:	75 04                	jne    c00117d3 <getFromFileDescriptor(int)+0x2e>
c00117cf:	31 c0                	xor    eax,eax
c00117d1:	eb 6e                	jmp    c0011841 <getFromFileDescriptor(int)+0x9c>
c00117d3:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117d6:	74 69                	je     c0011841 <getFromFileDescriptor(int)+0x9c>
c00117d8:	52                   	push   edx
c00117d9:	52                   	push   edx
c00117da:	50                   	push   eax
c00117db:	68 b8 db 02 c0       	push   0xc002dbb8
c00117e0:	e8 19 68 01 00       	call   c0027ffe <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117e5:	eb e1                	jmp    c00117c8 <getFromFileDescriptor(int)+0x23>
c00117e7:	a1 ac db 02 c0       	mov    eax,ds:0xc002dbac
c00117ec:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117f2:	74 4d                	je     c0011841 <getFromFileDescriptor(int)+0x9c>
c00117f4:	a1 b0 db 02 c0       	mov    eax,ds:0xc002dbb0
c00117f9:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117ff:	74 40                	je     c0011841 <getFromFileDescriptor(int)+0x9c>
c0011801:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0011806:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001180c:	74 33                	je     c0011841 <getFromFileDescriptor(int)+0x9c>
c001180e:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0011813:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011819:	74 26                	je     c0011841 <getFromFileDescriptor(int)+0x9c>
c001181b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011821:	83 f8 08             	cmp    eax,0x8
c0011824:	77 09                	ja     c001182f <getFromFileDescriptor(int)+0x8a>
c0011826:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c001182d:	eb 12                	jmp    c0011841 <getFromFileDescriptor(int)+0x9c>
c001182f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011835:	83 fb 08             	cmp    ebx,0x8
c0011838:	77 95                	ja     c00117cf <getFromFileDescriptor(int)+0x2a>
c001183a:	8b 04 9d 40 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd24c0]
c0011841:	83 c4 08             	add    esp,0x8
c0011844:	5b                   	pop    ebx
c0011845:	c3                   	ret    

c0011846 <__static_initialization_and_destruction_0(int, int)>:
c0011846:	83 ec 0c             	sub    esp,0xc
c0011849:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001184e:	75 34                	jne    c0011884 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011850:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011858:	75 2a                	jne    c0011884 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001185a:	83 ec 0c             	sub    esp,0xc
c001185d:	68 b8 db 02 c0       	push   0xc002dbb8
c0011862:	e8 c1 65 01 00       	call   c0027e28 <LinkedList<UnixFile>::LinkedList()>
c0011867:	83 c4 10             	add    esp,0x10
c001186a:	83 ec 04             	sub    esp,0x4
c001186d:	68 60 c9 02 c0       	push   0xc002c960
c0011872:	68 b8 db 02 c0       	push   0xc002dbb8
c0011877:	68 26 7e 02 c0       	push   0xc0027e26
c001187c:	e8 04 0f 00 00       	call   c0012785 <__cxa_atexit>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	90                   	nop
c0011885:	83 c4 0c             	add    esp,0xc
c0011888:	c3                   	ret    

c0011889 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011889:	83 ec 0c             	sub    esp,0xc
c001188c:	83 ec 08             	sub    esp,0x8
c001188f:	68 ff ff 00 00       	push   0xffff
c0011894:	6a 01                	push   0x1
c0011896:	e8 ab ff ff ff       	call   c0011846 <__static_initialization_and_destruction_0(int, int)>
c001189b:	83 c4 10             	add    esp,0x10
c001189e:	83 c4 0c             	add    esp,0xc
c00118a1:	c3                   	ret    

c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118a2:	53                   	push   ebx
c00118a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118ab:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118b1:	89 c8                	mov    eax,ecx
c00118b3:	d1 e8                	shr    eax,1
c00118b5:	03 05 e8 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9e8
c00118bb:	83 e1 01             	and    ecx,0x1
c00118be:	8a 10                	mov    dl,BYTE PTR [eax]
c00118c0:	75 09                	jne    c00118cb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118c2:	83 e2 f0             	and    edx,0xfffffff0
c00118c5:	09 da                	or     edx,ebx
c00118c7:	88 10                	mov    BYTE PTR [eax],dl
c00118c9:	5b                   	pop    ebx
c00118ca:	c3                   	ret    
c00118cb:	c1 e3 04             	shl    ebx,0x4
c00118ce:	83 e2 0f             	and    edx,0xf
c00118d1:	09 da                	or     edx,ebx
c00118d3:	88 10                	mov    BYTE PTR [eax],dl
c00118d5:	5b                   	pop    ebx
c00118d6:	c3                   	ret    

c00118d7 <Virt::getPageState(unsigned long)>:
c00118d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118db:	8b 0d e8 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9e8
c00118e1:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118e7:	89 d0                	mov    eax,edx
c00118e9:	d1 e8                	shr    eax,1
c00118eb:	83 e2 01             	and    edx,0x1
c00118ee:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118f1:	75 04                	jne    c00118f7 <Virt::getPageState(unsigned long)+0x20>
c00118f3:	83 e0 0f             	and    eax,0xf
c00118f6:	c3                   	ret    
c00118f7:	c0 e8 04             	shr    al,0x4
c00118fa:	c3                   	ret    

c00118fb <Virt::allocateKernelVirtualPages(int)>:
c00118fb:	55                   	push   ebp
c00118fc:	31 ed                	xor    ebp,ebp
c00118fe:	57                   	push   edi
c00118ff:	56                   	push   esi
c0011900:	53                   	push   ebx
c0011901:	31 db                	xor    ebx,ebx
c0011903:	83 ec 1c             	sub    esp,0x1c
c0011906:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001190a:	8b 3d e4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9e4
c0011910:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011915:	57                   	push   edi
c0011916:	e8 bc ff ff ff       	call   c00118d7 <Virt::getPageState(unsigned long)>
c001191b:	5a                   	pop    edx
c001191c:	84 c0                	test   al,al
c001191e:	75 3a                	jne    c001195a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011920:	85 db                	test   ebx,ebx
c0011922:	75 02                	jne    c0011926 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011924:	89 fd                	mov    ebp,edi
c0011926:	43                   	inc    ebx
c0011927:	39 f3                	cmp    ebx,esi
c0011929:	74 5a                	je     c0011985 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001192b:	47                   	inc    edi
c001192c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011932:	76 31                	jbe    c0011965 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011934:	c7 05 e4 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c9e4,0xc8000
c001193e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011943:	75 28                	jne    c001196d <Virt::allocateKernelVirtualPages(int)+0x72>
c0011945:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001194a:	bf 00 80 0c 00       	mov    edi,0xc8000
c001194f:	57                   	push   edi
c0011950:	e8 82 ff ff ff       	call   c00118d7 <Virt::getPageState(unsigned long)>
c0011955:	5a                   	pop    edx
c0011956:	84 c0                	test   al,al
c0011958:	74 c6                	je     c0011920 <Virt::allocateKernelVirtualPages(int)+0x25>
c001195a:	31 db                	xor    ebx,ebx
c001195c:	47                   	inc    edi
c001195d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011963:	77 cf                	ja     c0011934 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011965:	89 3d e4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e4,edi
c001196b:	eb a8                	jmp    c0011915 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001196d:	83 ec 0c             	sub    esp,0xc
c0011970:	68 c4 9c 02 c0       	push   0xc0029cc4
c0011975:	e8 e5 84 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c001197a:	8b 3d e4 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c9e4
c0011980:	83 c4 10             	add    esp,0x10
c0011983:	eb 90                	jmp    c0011915 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011985:	89 2d e4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e4,ebp
c001198b:	4b                   	dec    ebx
c001198c:	74 5f                	je     c00119ed <Virt::allocateKernelVirtualPages(int)+0xf2>
c001198e:	85 f6                	test   esi,esi
c0011990:	74 3d                	je     c00119cf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011992:	89 e8                	mov    eax,ebp
c0011994:	31 db                	xor    ebx,ebx
c0011996:	8d 7e ff             	lea    edi,[esi-0x1]
c0011999:	eb 14                	jmp    c00119af <Virt::allocateKernelVirtualPages(int)+0xb4>
c001199b:	6a 01                	push   0x1
c001199d:	43                   	inc    ebx
c001199e:	50                   	push   eax
c001199f:	e8 fe fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119a4:	58                   	pop    eax
c00119a5:	39 f3                	cmp    ebx,esi
c00119a7:	5a                   	pop    edx
c00119a8:	74 25                	je     c00119cf <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119aa:	a1 e4 c9 02 c0       	mov    eax,ds:0xc002c9e4
c00119af:	8d 50 01             	lea    edx,[eax+0x1]
c00119b2:	85 db                	test   ebx,ebx
c00119b4:	89 15 e4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e4,edx
c00119ba:	74 20                	je     c00119dc <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119bc:	39 df                	cmp    edi,ebx
c00119be:	75 db                	jne    c001199b <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119c0:	6a 03                	push   0x3
c00119c2:	43                   	inc    ebx
c00119c3:	50                   	push   eax
c00119c4:	e8 d9 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119c9:	59                   	pop    ecx
c00119ca:	39 f3                	cmp    ebx,esi
c00119cc:	58                   	pop    eax
c00119cd:	75 db                	jne    c00119aa <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119cf:	83 c4 1c             	add    esp,0x1c
c00119d2:	89 e8                	mov    eax,ebp
c00119d4:	5b                   	pop    ebx
c00119d5:	c1 e0 0c             	shl    eax,0xc
c00119d8:	5e                   	pop    esi
c00119d9:	5f                   	pop    edi
c00119da:	5d                   	pop    ebp
c00119db:	c3                   	ret    
c00119dc:	6a 02                	push   0x2
c00119de:	bb 01 00 00 00       	mov    ebx,0x1
c00119e3:	50                   	push   eax
c00119e4:	e8 b9 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119e9:	58                   	pop    eax
c00119ea:	5a                   	pop    edx
c00119eb:	eb bd                	jmp    c00119aa <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119ed:	6a 04                	push   0x4
c00119ef:	8d 45 01             	lea    eax,[ebp+0x1]
c00119f2:	55                   	push   ebp
c00119f3:	a3 e4 c9 02 c0       	mov    ds:0xc002c9e4,eax
c00119f8:	e8 a5 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119fd:	59                   	pop    ecx
c00119fe:	89 e8                	mov    eax,ebp
c0011a00:	5b                   	pop    ebx
c0011a01:	c1 e0 0c             	shl    eax,0xc
c0011a04:	83 c4 1c             	add    esp,0x1c
c0011a07:	5b                   	pop    ebx
c0011a08:	5e                   	pop    esi
c0011a09:	5f                   	pop    edi
c0011a0a:	5d                   	pop    ebp
c0011a0b:	c3                   	ret    

c0011a0c <Virt::virtualMemorySetup()>:
c0011a0c:	53                   	push   ebx
c0011a0d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	6a 0f                	push   0xf
c0011a17:	53                   	push   ebx
c0011a18:	43                   	inc    ebx
c0011a19:	e8 84 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a1e:	59                   	pop    ecx
c0011a1f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a25:	58                   	pop    eax
c0011a26:	75 ed                	jne    c0011a15 <Virt::virtualMemorySetup()+0x9>
c0011a28:	83 ec 08             	sub    esp,0x8
c0011a2b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a30:	68 00 00 00 c8       	push   0xc8000000
c0011a35:	68 4b 9e 02 c0       	push   0xc0029e4b
c0011a3a:	e8 ac 0e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011a3f:	58                   	pop    eax
c0011a40:	5a                   	pop    edx
c0011a41:	68 00 f0 ff ef       	push   0xeffff000
c0011a46:	68 5f 9e 02 c0       	push   0xc0029e5f
c0011a4b:	e8 9b 0e 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	83 ec 08             	sub    esp,0x8
c0011a56:	6a 00                	push   0x0
c0011a58:	53                   	push   ebx
c0011a59:	43                   	inc    ebx
c0011a5a:	e8 43 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a5f:	83 c4 10             	add    esp,0x10
c0011a62:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a68:	75 e9                	jne    c0011a53 <Virt::virtualMemorySetup()+0x47>
c0011a6a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a6f:	83 ec 08             	sub    esp,0x8
c0011a72:	6a 0f                	push   0xf
c0011a74:	53                   	push   ebx
c0011a75:	43                   	inc    ebx
c0011a76:	e8 27 fe ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a7b:	83 c4 10             	add    esp,0x10
c0011a7e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a84:	75 e9                	jne    c0011a6f <Virt::virtualMemorySetup()+0x63>
c0011a86:	83 c4 08             	add    esp,0x8
c0011a89:	5b                   	pop    ebx
c0011a8a:	c3                   	ret    

c0011a8b <Virt::getAKernelVAS()>:
c0011a8b:	a1 c4 db 02 c0       	mov    eax,ds:0xc002dbc4
c0011a90:	c3                   	ret    

c0011a91 <Virt::setupPageSwapping(int)>:
c0011a91:	57                   	push   edi
c0011a92:	56                   	push   esi
c0011a93:	53                   	push   ebx
c0011a94:	83 ec 1c             	sub    esp,0x1c
c0011a97:	68 14 01 00 00       	push   0x114
c0011a9c:	e8 7b db ff ff       	call   c000f61c <malloc>
c0011aa1:	83 c4 0c             	add    esp,0xc
c0011aa4:	89 c6                	mov    esi,eax
c0011aa6:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c0011aac:	68 73 9e 02 c0       	push   0xc0029e73
c0011ab1:	50                   	push   eax
c0011ab2:	e8 8d 13 00 00       	call   c0012e44 <File::File(char const*, Process*)>
c0011ab7:	89 34 24             	mov    DWORD PTR [esp],esi
c0011aba:	e8 61 15 00 00       	call   c0013020 <File::unlink()>
c0011abf:	58                   	pop    eax
c0011ac0:	5a                   	pop    edx
c0011ac1:	6a 12                	push   0x12
c0011ac3:	56                   	push   esi
c0011ac4:	e8 df 13 00 00       	call   c0012ea8 <File::open(FileOpenMode)>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	85 c0                	test   eax,eax
c0011ace:	0f 85 ca 00 00 00    	jne    c0011b9e <Virt::setupPageSwapping(int)+0x10d>
c0011ad4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ad8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ae0:	c1 e3 08             	shl    ebx,0x8
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 00 00 01 00       	push   0x10000
c0011aeb:	e8 2c db ff ff       	call   c000f61c <malloc>
c0011af0:	83 c4 0c             	add    esp,0xc
c0011af3:	89 c7                	mov    edi,eax
c0011af5:	68 00 00 01 00       	push   0x10000
c0011afa:	6a 00                	push   0x0
c0011afc:	50                   	push   eax
c0011afd:	e8 ba eb fe ff       	call   c00006bc <memset>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	85 db                	test   ebx,ebx
c0011b07:	79 03                	jns    c0011b0c <Virt::setupPageSwapping(int)+0x7b>
c0011b09:	83 c3 0f             	add    ebx,0xf
c0011b0c:	c1 fb 04             	sar    ebx,0x4
c0011b0f:	4b                   	dec    ebx
c0011b10:	83 fb ff             	cmp    ebx,0xffffffff
c0011b13:	74 4b                	je     c0011b60 <Virt::setupPageSwapping(int)+0xcf>
c0011b15:	83 ec 0c             	sub    esp,0xc
c0011b18:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b1e:	52                   	push   edx
c0011b1f:	57                   	push   edi
c0011b20:	6a 00                	push   0x0
c0011b22:	68 00 00 01 00       	push   0x10000
c0011b27:	56                   	push   esi
c0011b28:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b2b:	83 c4 20             	add    esp,0x20
c0011b2e:	85 c0                	test   eax,eax
c0011b30:	75 59                	jne    c0011b8b <Virt::setupPageSwapping(int)+0xfa>
c0011b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b36:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b3b:	74 d2                	je     c0011b0f <Virt::setupPageSwapping(int)+0x7e>
c0011b3d:	83 ec 08             	sub    esp,0x8
c0011b40:	4b                   	dec    ebx
c0011b41:	50                   	push   eax
c0011b42:	68 c6 9e 02 c0       	push   0xc0029ec6
c0011b47:	e8 9f 0d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011b4c:	c7 04 24 cf 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ecf
c0011b53:	e8 07 83 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011b58:	83 c4 10             	add    esp,0x10
c0011b5b:	83 fb ff             	cmp    ebx,0xffffffff
c0011b5e:	75 b5                	jne    c0011b15 <Virt::setupPageSwapping(int)+0x84>
c0011b60:	83 ec 0c             	sub    esp,0xc
c0011b63:	56                   	push   esi
c0011b64:	e8 9d 13 00 00       	call   c0012f06 <File::close()>
c0011b69:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b6c:	e8 cb da ff ff       	call   c000f63c <rfree>
c0011b71:	83 c4 10             	add    esp,0x10
c0011b74:	85 f6                	test   esi,esi
c0011b76:	74 0c                	je     c0011b84 <Virt::setupPageSwapping(int)+0xf3>
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b7d:	56                   	push   esi
c0011b7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	83 c4 10             	add    esp,0x10
c0011b87:	5b                   	pop    ebx
c0011b88:	5e                   	pop    esi
c0011b89:	5f                   	pop    edi
c0011b8a:	c3                   	ret    
c0011b8b:	83 ec 08             	sub    esp,0x8
c0011b8e:	50                   	push   eax
c0011b8f:	68 ae 9e 02 c0       	push   0xc0029eae
c0011b94:	e8 52 0d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011b99:	83 c4 10             	add    esp,0x10
c0011b9c:	eb 94                	jmp    c0011b32 <Virt::setupPageSwapping(int)+0xa1>
c0011b9e:	83 ec 08             	sub    esp,0x8
c0011ba1:	50                   	push   eax
c0011ba2:	68 8a 9e 02 c0       	push   0xc0029e8a
c0011ba7:	e8 3f 0d 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011bac:	c7 04 24 93 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e93
c0011bb3:	e8 a7 82 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011bb8:	83 c4 10             	add    esp,0x10
c0011bbb:	e9 14 ff ff ff       	jmp    c0011ad4 <Virt::setupPageSwapping(int)+0x43>

c0011bc0 <VAS::VAS()>:
c0011bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcf:	a3 c4 db 02 c0       	mov    ds:0xc002dbc4,eax
c0011bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd8:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be0:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011be3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be7:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bee:	90                   	nop
c0011bef:	c3                   	ret    

c0011bf0 <VAS::VAS(VAS*)>:
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bfe:	83 ec 0c             	sub    esp,0xc
c0011c01:	68 e4 9c 02 c0       	push   0xc0029ce4
c0011c06:	e8 54 82 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	90                   	nop
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	c3                   	ret    
c0011c13:	90                   	nop

c0011c14 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c18:	89 c2                	mov    edx,eax
c0011c1a:	c1 e8 0a             	shr    eax,0xa
c0011c1d:	c1 ea 16             	shr    edx,0x16
c0011c20:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c25:	19 c9                	sbb    ecx,ecx
c0011c27:	c1 e2 0c             	shl    edx,0xc
c0011c2a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c30:	25 fc 0f 00 00       	and    eax,0xffc
c0011c35:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c3c:	01 d0                	add    eax,edx
c0011c3e:	c3                   	ret    
c0011c3f:	90                   	nop

c0011c40 <VAS::getPageTableEntry(unsigned long)>:
c0011c40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c44:	89 ca                	mov    edx,ecx
c0011c46:	c1 e9 0a             	shr    ecx,0xa
c0011c49:	c1 ea 16             	shr    edx,0x16
c0011c4c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c52:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c58:	c1 e0 0c             	shl    eax,0xc
c0011c5b:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c5e:	c3                   	ret    

c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c5f:	57                   	push   edi
c0011c60:	56                   	push   esi
c0011c61:	be 01 00 00 00       	mov    esi,0x1
c0011c66:	53                   	push   ebx
c0011c67:	83 ec 10             	sub    esp,0x10
c0011c6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c6e:	c1 eb 0c             	shr    ebx,0xc
c0011c71:	eb 3f                	jmp    c0011cb2 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c73:	e8 13 fe ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0011c78:	83 ec 08             	sub    esp,0x8
c0011c7b:	57                   	push   edi
c0011c7c:	50                   	push   eax
c0011c7d:	e8 be ff ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c87:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c8b:	f6 c4 04             	test   ah,0x4
c0011c8e:	75 5f                	jne    c0011cef <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c90:	80 fa 04             	cmp    dl,0x4
c0011c93:	74 78                	je     c0011d0d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c95:	80 fa 02             	cmp    dl,0x2
c0011c98:	0f 84 88 00 00 00    	je     c0011d26 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c9e:	80 fa 03             	cmp    dl,0x3
c0011ca1:	0f 84 ad 00 00 00    	je     c0011d54 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ca7:	fe ca                	dec    dl
c0011ca9:	0f 84 92 00 00 00    	je     c0011d41 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011caf:	43                   	inc    ebx
c0011cb0:	31 f6                	xor    esi,esi
c0011cb2:	53                   	push   ebx
c0011cb3:	e8 1f fc ff ff       	call   c00118d7 <Virt::getPageState(unsigned long)>
c0011cb8:	5f                   	pop    edi
c0011cb9:	89 df                	mov    edi,ebx
c0011cbb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cbf:	c1 e7 0c             	shl    edi,0xc
c0011cc2:	84 c0                	test   al,al
c0011cc4:	75 ad                	jne    c0011c73 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cc6:	83 ec 0c             	sub    esp,0xc
c0011cc9:	68 d5 9e 02 c0       	push   0xc0029ed5
c0011cce:	e8 8c 81 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011cd3:	e8 b3 fd ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0011cd8:	5a                   	pop    edx
c0011cd9:	59                   	pop    ecx
c0011cda:	57                   	push   edi
c0011cdb:	50                   	push   eax
c0011cdc:	e8 5f ff ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cea:	f6 c4 04             	test   ah,0x4
c0011ced:	74 c0                	je     c0011caf <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cef:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 2e df ff ff       	call   c000fc2f <Phys::freePage(unsigned long)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d08:	80 fa 04             	cmp    dl,0x4
c0011d0b:	75 88                	jne    c0011c95 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d0d:	89 f0                	mov    eax,esi
c0011d0f:	84 c0                	test   al,al
c0011d11:	75 47                	jne    c0011d5a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d13:	c7 44 24 20 08 9d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029d08
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	5b                   	pop    ebx
c0011d1f:	5e                   	pop    esi
c0011d20:	5f                   	pop    edi
c0011d21:	e9 39 81 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c0011d26:	89 f0                	mov    eax,esi
c0011d28:	84 c0                	test   al,al
c0011d2a:	75 15                	jne    c0011d41 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d2c:	83 ec 0c             	sub    esp,0xc
c0011d2f:	68 f1 9e 02 c0       	push   0xc0029ef1
c0011d34:	e8 26 81 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0011d39:	83 c4 10             	add    esp,0x10
c0011d3c:	e9 6e ff ff ff       	jmp    c0011caf <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	6a 00                	push   0x0
c0011d46:	53                   	push   ebx
c0011d47:	e8 56 fb ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	e9 5b ff ff ff       	jmp    c0011caf <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d54:	89 f0                	mov    eax,esi
c0011d56:	84 c0                	test   al,al
c0011d58:	75 15                	jne    c0011d6f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d5a:	83 ec 08             	sub    esp,0x8
c0011d5d:	6a 00                	push   0x0
c0011d5f:	53                   	push   ebx
c0011d60:	e8 3d fb ff ff       	call   c00118a2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d65:	83 c4 10             	add    esp,0x10
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	5b                   	pop    ebx
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	c3                   	ret    
c0011d6f:	c7 44 24 20 0d 9f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029f0d
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	5b                   	pop    ebx
c0011d7b:	5e                   	pop    esi
c0011d7c:	5f                   	pop    edi
c0011d7d:	e9 dd 80 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>

c0011d82 <VAS::freeAllocatedPages(unsigned long)>:
c0011d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d8a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d8e:	74 09                	je     c0011d99 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d90:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d94:	e9 c6 fe ff ff       	jmp    c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c0011d99:	c7 44 24 04 2c 9d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029d2c
c0011da1:	e9 45 0b 00 00       	jmp    c00128eb <Dbg::kprintf(char const*, ...)>

c0011da6 <VAS::virtualToPhysical(unsigned long)>:
c0011da6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011daa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011dae:	e8 8d fe ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c0011db3:	5a                   	pop    edx
c0011db4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db6:	59                   	pop    ecx
c0011db7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dbc:	c3                   	ret    
c0011dbd:	90                   	nop

c0011dbe <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dbe:	55                   	push   ebp
c0011dbf:	57                   	push   edi
c0011dc0:	56                   	push   esi
c0011dc1:	53                   	push   ebx
c0011dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dd2:	85 db                	test   ebx,ebx
c0011dd4:	7e 22                	jle    c0011df8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dd6:	c1 e3 0c             	shl    ebx,0xc
c0011dd9:	01 f3                	add    ebx,esi
c0011ddb:	56                   	push   esi
c0011ddc:	81 c6 00 10 00 00    	add    esi,0x1000
c0011de2:	55                   	push   ebp
c0011de3:	e8 58 fe ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c0011de8:	5a                   	pop    edx
c0011de9:	59                   	pop    ecx
c0011dea:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dec:	21 f9                	and    ecx,edi
c0011dee:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011df2:	39 f3                	cmp    ebx,esi
c0011df4:	89 08                	mov    DWORD PTR [eax],ecx
c0011df6:	75 e3                	jne    c0011ddb <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011df8:	5b                   	pop    ebx
c0011df9:	5e                   	pop    esi
c0011dfa:	5f                   	pop    edi
c0011dfb:	5d                   	pop    ebp
c0011dfc:	c3                   	ret    
c0011dfd:	90                   	nop

c0011dfe <VAS::setToWriteCombining(unsigned long, int)>:
c0011dfe:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0011e03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e09:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e10:	75 01                	jne    c0011e13 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e12:	c3                   	ret    
c0011e13:	68 80 00 00 00       	push   0x80
c0011e18:	6a ff                	push   0xffffffff
c0011e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e26:	e8 93 ff ff ff       	call   c0011dbe <VAS::reflagRange(unsigned long, int, int, int)>
c0011e2b:	83 c4 14             	add    esp,0x14
c0011e2e:	c3                   	ret    
c0011e2f:	90                   	nop

c0011e30 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e30:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e39:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e40:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e43:	19 c0                	sbb    eax,eax
c0011e45:	83 ca 03             	or     edx,0x3
c0011e48:	83 e0 fc             	and    eax,0xfffffffc
c0011e4b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e52:	0f 20 d8             	mov    eax,cr3
c0011e55:	0f 22 d8             	mov    cr3,eax
c0011e58:	c3                   	ret    
c0011e59:	90                   	nop

c0011e5a <VAS::~VAS()>:
c0011e5a:	83 ec 2c             	sub    esp,0x2c
c0011e5d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e65:	e8 50 b6 00 00       	call   c001d4ba <lockScheduler()>
c0011e6a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e74:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e7a:	83 ec 04             	sub    esp,0x4
c0011e7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e81:	6a 01                	push   0x1
c0011e83:	50                   	push   eax
c0011e84:	e8 a7 ff ff ff       	call   c0011e30 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e94:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e9c:	0f 8f d7 00 00 00    	jg     c0011f79 <VAS::~VAS()+0x11f>
c0011ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ea9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ead:	c1 e2 02             	shl    edx,0x2
c0011eb0:	01 d0                	add    eax,edx
c0011eb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ebc:	83 e0 01             	and    eax,0x1
c0011ebf:	0f 84 ab 00 00 00    	je     c0011f70 <VAS::~VAS()+0x116>
c0011ec5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ecd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011ed5:	7f 75                	jg     c0011f4c <VAS::~VAS()+0xf2>
c0011ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011edb:	c1 e0 0a             	shl    eax,0xa
c0011ede:	89 c2                	mov    edx,eax
c0011ee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ee4:	01 d0                	add    eax,edx
c0011ee6:	c1 e0 0c             	shl    eax,0xc
c0011ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011eed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ef2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ef4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ef7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011efd:	83 ec 04             	sub    esp,0x4
c0011f00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f04:	6a 01                	push   0x1
c0011f06:	50                   	push   eax
c0011f07:	e8 08 fd ff ff       	call   c0011c14 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f21:	25 01 04 00 00       	and    eax,0x401
c0011f26:	3d 01 04 00 00       	cmp    eax,0x401
c0011f2b:	75 19                	jne    c0011f46 <VAS::~VAS()+0xec>
c0011f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f31:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	50                   	push   eax
c0011f3a:	e8 f0 dc ff ff       	call   c000fc2f <Phys::freePage(unsigned long)>
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f46:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f4a:	eb 81                	jmp    c0011ecd <VAS::~VAS()+0x73>
c0011f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f50:	25 00 04 00 00       	and    eax,0x400
c0011f55:	74 19                	je     c0011f70 <VAS::~VAS()+0x116>
c0011f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f60:	83 ec 0c             	sub    esp,0xc
c0011f63:	50                   	push   eax
c0011f64:	e8 c6 dc ff ff       	call   c000fc2f <Phys::freePage(unsigned long)>
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f70:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f74:	e9 1b ff ff ff       	jmp    c0011e94 <VAS::~VAS()+0x3a>
c0011f79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	50                   	push   eax
c0011f84:	e8 d6 fc ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f93:	83 ec 0c             	sub    esp,0xc
c0011f96:	50                   	push   eax
c0011f97:	e8 93 dc ff ff       	call   c000fc2f <Phys::freePage(unsigned long)>
c0011f9c:	83 c4 10             	add    esp,0x10
c0011f9f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fa7:	c1 e0 02             	shl    eax,0x2
c0011faa:	83 ec 08             	sub    esp,0x8
c0011fad:	50                   	push   eax
c0011fae:	68 50 9d 02 c0       	push   0xc0029d50
c0011fb3:	e8 33 09 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0011fb8:	83 c4 10             	add    esp,0x10
c0011fbb:	e8 fc b4 00 00       	call   c001d4bc <unlockScheduler()>
c0011fc0:	90                   	nop
c0011fc1:	83 c4 2c             	add    esp,0x2c
c0011fc4:	c3                   	ret    
c0011fc5:	90                   	nop

c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fc6:	55                   	push   ebp
c0011fc7:	57                   	push   edi
c0011fc8:	56                   	push   esi
c0011fc9:	53                   	push   ebx
c0011fca:	83 ec 1c             	sub    esp,0x1c
c0011fcd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fd5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fdb:	77 08                	ja     c0011fe5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fdd:	0f 20 d8             	mov    eax,cr3
c0011fe0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fe3:	75 47                	jne    c001202c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fe5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe9:	09 d8                	or     eax,ebx
c0011feb:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ff0:	75 57                	jne    c0012049 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ff2:	89 de                	mov    esi,ebx
c0011ff4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ff7:	c1 ee 16             	shr    esi,0x16
c0011ffa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012001:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012005:	74 54                	je     c001205b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012007:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001200b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012011:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012015:	c1 e6 0c             	shl    esi,0xc
c0012018:	c1 eb 0a             	shr    ebx,0xa
c001201b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012021:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012024:	83 c4 1c             	add    esp,0x1c
c0012027:	5b                   	pop    ebx
c0012028:	5e                   	pop    esi
c0012029:	5f                   	pop    edi
c001202a:	5d                   	pop    ebp
c001202b:	c3                   	ret    
c001202c:	83 ec 0c             	sub    esp,0xc
c001202f:	68 70 9d 02 c0       	push   0xc0029d70
c0012034:	e8 b2 08 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0012039:	83 c4 10             	add    esp,0x10
c001203c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012040:	09 d8                	or     eax,ebx
c0012042:	a9 ff 0f 00 00       	test   eax,0xfff
c0012047:	74 a9                	je     c0011ff2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	68 d8 9d 02 c0       	push   0xc0029dd8
c0012051:	e8 09 7e 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	eb 97                	jmp    c0011ff2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001205b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001205f:	e8 55 dc ff ff       	call   c000fcb9 <Phys::allocatePage()>
c0012064:	89 c5                	mov    ebp,eax
c0012066:	e8 20 fa ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012072:	6a 01                	push   0x1
c0012074:	e8 82 f8 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0012079:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012080:	6a 01                	push   0x1
c0012082:	50                   	push   eax
c0012083:	55                   	push   ebp
c0012084:	81 cd 07 04 00 00    	or     ebp,0x407
c001208a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001208e:	51                   	push   ecx
c001208f:	e8 26 02 00 00       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012094:	83 c4 1c             	add    esp,0x1c
c0012097:	68 00 10 00 00       	push   0x1000
c001209c:	6a 00                	push   0x0
c001209e:	50                   	push   eax
c001209f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120a3:	e8 14 e6 fe ff       	call   c00006bc <memset>
c00120a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120ac:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120af:	e8 ab fb ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c00120b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120bb:	83 c4 10             	add    esp,0x10
c00120be:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120c1:	e9 41 ff ff ff       	jmp    c0012007 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120c6 <VAS::allocatePages(int, int)>:
c00120c6:	55                   	push   ebp
c00120c7:	57                   	push   edi
c00120c8:	56                   	push   esi
c00120c9:	53                   	push   ebx
c00120ca:	83 ec 1c             	sub    esp,0x1c
c00120cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120d1:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00120d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120dc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120e2:	83 e0 01             	and    eax,0x1
c00120e5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120ed:	0f 85 cc 00 00 00    	jne    c00121bf <VAS::allocatePages(int, int)+0xf9>
c00120f3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120fa:	85 c0                	test   eax,eax
c00120fc:	0f 84 a1 00 00 00    	je     c00121a3 <VAS::allocatePages(int, int)+0xdd>
c0012102:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012106:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001210a:	c1 e6 0c             	shl    esi,0xc
c001210d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012111:	85 c0                	test   eax,eax
c0012113:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012116:	7e 33                	jle    c001214b <VAS::allocatePages(int, int)+0x85>
c0012118:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001211c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012120:	81 cd 00 04 00 00    	or     ebp,0x400
c0012126:	e8 8e db ff ff       	call   c000fcb9 <Phys::allocatePage()>
c001212b:	55                   	push   ebp
c001212c:	53                   	push   ebx
c001212d:	50                   	push   eax
c001212e:	57                   	push   edi
c001212f:	e8 92 fe ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001213c:	74 03                	je     c0012141 <VAS::allocatePages(int, int)+0x7b>
c001213e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012141:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012147:	39 de                	cmp    esi,ebx
c0012149:	75 db                	jne    c0012126 <VAS::allocatePages(int, int)+0x60>
c001214b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012150:	75 12                	jne    c0012164 <VAS::allocatePages(int, int)+0x9e>
c0012152:	0f 20 d8             	mov    eax,cr3
c0012155:	0f 22 d8             	mov    cr3,eax
c0012158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001215c:	83 c4 1c             	add    esp,0x1c
c001215f:	5b                   	pop    ebx
c0012160:	5e                   	pop    esi
c0012161:	5f                   	pop    edi
c0012162:	5d                   	pop    ebp
c0012163:	c3                   	ret    
c0012164:	c1 ee 0a             	shr    esi,0xa
c0012167:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001216b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012171:	c1 eb 0a             	shr    ebx,0xa
c0012174:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001217a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012180:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012186:	39 c3                	cmp    ebx,eax
c0012188:	77 ce                	ja     c0012158 <VAS::allocatePages(int, int)+0x92>
c001218a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001218d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012193:	39 d8                	cmp    eax,ebx
c0012195:	73 f3                	jae    c001218a <VAS::allocatePages(int, int)+0xc4>
c0012197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001219b:	83 c4 1c             	add    esp,0x1c
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	5f                   	pop    edi
c00121a1:	5d                   	pop    ebp
c00121a2:	c3                   	ret    
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	68 fc 9d 02 c0       	push   0xc0029dfc
c00121ab:	e8 af 7c 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00121b0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b7:	83 c4 10             	add    esp,0x10
c00121ba:	e9 43 ff ff ff       	jmp    c0012102 <VAS::allocatePages(int, int)+0x3c>
c00121bf:	83 ec 0c             	sub    esp,0xc
c00121c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121c6:	e8 30 f7 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c00121cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121d7:	0f 87 9b 00 00 00    	ja     c0012278 <VAS::allocatePages(int, int)+0x1b2>
c00121dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e1:	85 d2                	test   edx,edx
c00121e3:	7e 3c                	jle    c0012221 <VAS::allocatePages(int, int)+0x15b>
c00121e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f1:	c1 e5 0c             	shl    ebp,0xc
c00121f4:	81 ce 00 04 00 00    	or     esi,0x400
c00121fa:	01 dd                	add    ebp,ebx
c00121fc:	e8 b8 da ff ff       	call   c000fcb9 <Phys::allocatePage()>
c0012201:	56                   	push   esi
c0012202:	53                   	push   ebx
c0012203:	50                   	push   eax
c0012204:	57                   	push   edi
c0012205:	e8 bc fd ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012212:	74 03                	je     c0012217 <VAS::allocatePages(int, int)+0x151>
c0012214:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012217:	81 c3 00 10 00 00    	add    ebx,0x1000
c001221d:	39 dd                	cmp    ebp,ebx
c001221f:	75 db                	jne    c00121fc <VAS::allocatePages(int, int)+0x136>
c0012221:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012226:	0f 84 26 ff ff ff    	je     c0012152 <VAS::allocatePages(int, int)+0x8c>
c001222c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012230:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012234:	89 d3                	mov    ebx,edx
c0012236:	c1 e0 0c             	shl    eax,0xc
c0012239:	c1 eb 0a             	shr    ebx,0xa
c001223c:	01 d0                	add    eax,edx
c001223e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012244:	c1 e8 0a             	shr    eax,0xa
c0012247:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001224d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012252:	2d 00 00 40 00       	sub    eax,0x400000
c0012257:	39 c3                	cmp    ebx,eax
c0012259:	0f 87 f9 fe ff ff    	ja     c0012158 <VAS::allocatePages(int, int)+0x92>
c001225f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012262:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012268:	39 d8                	cmp    eax,ebx
c001226a:	73 f3                	jae    c001225f <VAS::allocatePages(int, int)+0x199>
c001226c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012270:	83 c4 1c             	add    esp,0x1c
c0012273:	5b                   	pop    ebx
c0012274:	5e                   	pop    esi
c0012275:	5f                   	pop    edi
c0012276:	5d                   	pop    ebp
c0012277:	c3                   	ret    
c0012278:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001227d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012283:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001228a:	0f 84 4d ff ff ff    	je     c00121dd <VAS::allocatePages(int, int)+0x117>
c0012290:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012298:	e9 40 ff ff ff       	jmp    c00121dd <VAS::allocatePages(int, int)+0x117>
c001229d:	90                   	nop

c001229e <VAS::setCPUSpecific(unsigned long)>:
c001229e:	83 ec 0c             	sub    esp,0xc
c00122a1:	6a 05                	push   0x5
c00122a3:	68 00 00 40 c2       	push   0xc2400000
c00122a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b0:	e8 11 fd ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122b5:	83 c4 1c             	add    esp,0x1c
c00122b8:	c3                   	ret    
c00122b9:	90                   	nop

c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122ba:	55                   	push   ebp
c00122bb:	57                   	push   edi
c00122bc:	56                   	push   esi
c00122bd:	53                   	push   ebx
c00122be:	83 ec 1c             	sub    esp,0x1c
c00122c1:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00122c6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122d4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122da:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122de:	83 e0 01             	and    eax,0x1
c00122e1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122e9:	85 c0                	test   eax,eax
c00122eb:	7e 39                	jle    c0012326 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f1:	89 f3                	mov    ebx,esi
c00122f3:	c1 e0 0c             	shl    eax,0xc
c00122f6:	01 f0                	add    eax,esi
c00122f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122fc:	55                   	push   ebp
c00122fd:	53                   	push   ebx
c00122fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012302:	29 f0                	sub    eax,esi
c0012304:	01 d8                	add    eax,ebx
c0012306:	50                   	push   eax
c0012307:	57                   	push   edi
c0012308:	e8 b9 fc ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012315:	74 03                	je     c001231a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012317:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001231a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012320:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012324:	75 d6                	jne    c00122fc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012326:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001232b:	75 10                	jne    c001233d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001232d:	0f 20 d8             	mov    eax,cr3
c0012330:	0f 22 d8             	mov    cr3,eax
c0012333:	83 c4 1c             	add    esp,0x1c
c0012336:	89 f0                	mov    eax,esi
c0012338:	5b                   	pop    ebx
c0012339:	5e                   	pop    esi
c001233a:	5f                   	pop    edi
c001233b:	5d                   	pop    ebp
c001233c:	c3                   	ret    
c001233d:	89 f3                	mov    ebx,esi
c001233f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012343:	c1 eb 0a             	shr    ebx,0xa
c0012346:	c1 e0 0c             	shl    eax,0xc
c0012349:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001234f:	01 f0                	add    eax,esi
c0012351:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012357:	c1 e8 0a             	shr    eax,0xa
c001235a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001235f:	2d 00 00 40 00       	sub    eax,0x400000
c0012364:	39 c3                	cmp    ebx,eax
c0012366:	77 cb                	ja     c0012333 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012368:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001236b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012371:	39 d8                	cmp    eax,ebx
c0012373:	73 f3                	jae    c0012368 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012375:	83 c4 1c             	add    esp,0x1c
c0012378:	89 f0                	mov    eax,esi
c001237a:	5b                   	pop    ebx
c001237b:	5e                   	pop    esi
c001237c:	5f                   	pop    edi
c001237d:	5d                   	pop    ebp
c001237e:	c3                   	ret    
c001237f:	90                   	nop

c0012380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012380:	55                   	push   ebp
c0012381:	57                   	push   edi
c0012382:	56                   	push   esi
c0012383:	53                   	push   ebx
c0012384:	83 ec 1c             	sub    esp,0x1c
c0012387:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001238b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001238f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012393:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012397:	a9 ff 0f 00 00       	test   eax,0xfff
c001239c:	75 4a                	jne    c00123e8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001239e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a5:	c1 eb 16             	shr    ebx,0x16
c00123a8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123af:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123b3:	74 4d                	je     c0012402 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123b9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123bd:	c1 e8 0a             	shr    eax,0xa
c00123c0:	80 fa 01             	cmp    dl,0x1
c00123c3:	19 d2                	sbb    edx,edx
c00123c5:	c1 e3 0c             	shl    ebx,0xc
c00123c8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123cc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123d2:	25 fc 0f 00 00       	and    eax,0xffc
c00123d7:	01 d8                	add    eax,ebx
c00123d9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123e0:	83 c4 1c             	add    esp,0x1c
c00123e3:	5b                   	pop    ebx
c00123e4:	5e                   	pop    esi
c00123e5:	5f                   	pop    edi
c00123e6:	5d                   	pop    ebp
c00123e7:	c3                   	ret    
c00123e8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123ec:	83 ec 0c             	sub    esp,0xc
c00123ef:	68 28 9e 02 c0       	push   0xc0029e28
c00123f4:	e8 66 7a 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012400:	eb 9c                	jmp    c001239e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012406:	e8 ae d8 ff ff       	call   c000fcb9 <Phys::allocatePage()>
c001240b:	89 c5                	mov    ebp,eax
c001240d:	e8 79 f6 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0012412:	83 ec 0c             	sub    esp,0xc
c0012415:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012419:	6a 01                	push   0x1
c001241b:	e8 db f4 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0012420:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012427:	6a 01                	push   0x1
c0012429:	50                   	push   eax
c001242a:	55                   	push   ebp
c001242b:	81 cd 07 04 00 00    	or     ebp,0x407
c0012431:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012435:	51                   	push   ecx
c0012436:	e8 7f fe ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243b:	83 c4 1c             	add    esp,0x1c
c001243e:	68 00 10 00 00       	push   0x1000
c0012443:	6a 00                	push   0x0
c0012445:	50                   	push   eax
c0012446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001244a:	e8 6d e2 fe ff       	call   c00006bc <memset>
c001244f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012453:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012456:	e8 04 f8 ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c001245b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012468:	e9 48 ff ff ff       	jmp    c00123b5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001246d:	90                   	nop

c001246e <VAS::VAS(bool)>:
c001246e:	53                   	push   ebx
c001246f:	83 ec 28             	sub    esp,0x28
c0012472:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012476:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001247a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012489:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001248d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012490:	e8 24 d8 ff ff       	call   c000fcb9 <Phys::allocatePage()>
c0012495:	89 c2                	mov    edx,eax
c0012497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001249b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001249e:	e8 e8 f5 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c00124a3:	89 c3                	mov    ebx,eax
c00124a5:	83 ec 0c             	sub    esp,0xc
c00124a8:	6a 01                	push   0x1
c00124aa:	e8 4c f4 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	89 c2                	mov    edx,eax
c00124b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	6a 03                	push   0x3
c00124c0:	6a 01                	push   0x1
c00124c2:	52                   	push   edx
c00124c3:	50                   	push   eax
c00124c4:	53                   	push   ebx
c00124c5:	e8 f0 fd ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124ca:	83 c4 20             	add    esp,0x20
c00124cd:	89 c2                	mov    edx,eax
c00124cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124d6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124de:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124e6:	7f 1c                	jg     c0012504 <VAS::VAS(bool)+0x96>
c00124e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124f3:	c1 e2 02             	shl    edx,0x2
c00124f6:	01 d0                	add    eax,edx
c00124f8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012502:	eb da                	jmp    c00124de <VAS::VAS(bool)+0x70>
c0012504:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001250c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012514:	7f 7a                	jg     c0012590 <VAS::VAS(bool)+0x122>
c0012516:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001251a:	2d 00 02 00 00       	sub    eax,0x200
c001251f:	c1 e0 0c             	shl    eax,0xc
c0012522:	83 c8 03             	or     eax,0x3
c0012525:	89 c2                	mov    edx,eax
c0012527:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001252c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012532:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012538:	83 e0 10             	and    eax,0x10
c001253b:	84 c0                	test   al,al
c001253d:	74 07                	je     c0012546 <VAS::VAS(bool)+0xd8>
c001253f:	b8 00 01 00 00       	mov    eax,0x100
c0012544:	eb 05                	jmp    c001254b <VAS::VAS(bool)+0xdd>
c0012546:	b8 00 00 00 00       	mov    eax,0x0
c001254b:	09 d0                	or     eax,edx
c001254d:	89 c1                	mov    ecx,eax
c001254f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012553:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012556:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001255a:	c1 e2 02             	shl    edx,0x2
c001255d:	01 d0                	add    eax,edx
c001255f:	89 ca                	mov    edx,ecx
c0012561:	89 10                	mov    DWORD PTR [eax],edx
c0012563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012567:	2d 40 03 00 00       	sub    eax,0x340
c001256c:	83 f8 7f             	cmp    eax,0x7f
c001256f:	77 16                	ja     c0012587 <VAS::VAS(bool)+0x119>
c0012571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012575:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012578:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001257c:	c1 e2 02             	shl    edx,0x2
c001257f:	01 d0                	add    eax,edx
c0012581:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012587:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001258b:	e9 7c ff ff ff       	jmp    c001250c <VAS::VAS(bool)+0x9e>
c0012590:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0012595:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001259b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a1:	83 e0 10             	and    eax,0x10
c00125a4:	84 c0                	test   al,al
c00125a6:	74 07                	je     c00125af <VAS::VAS(bool)+0x141>
c00125a8:	b8 03 41 00 00       	mov    eax,0x4103
c00125ad:	eb 05                	jmp    c00125b4 <VAS::VAS(bool)+0x146>
c00125af:	b8 03 40 00 00       	mov    eax,0x4003
c00125b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125b8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125bb:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125c1:	89 02                	mov    DWORD PTR [edx],eax
c00125c3:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00125c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125d4:	83 ec 08             	sub    esp,0x8
c00125d7:	50                   	push   eax
c00125d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125dc:	e8 bd fc ff ff       	call   c001229e <VAS::setCPUSpecific(unsigned long)>
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125eb:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00125f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125f6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125fc:	83 e0 10             	and    eax,0x10
c00125ff:	84 c0                	test   al,al
c0012601:	74 07                	je     c001260a <VAS::VAS(bool)+0x19c>
c0012603:	b8 00 01 00 00       	mov    eax,0x100
c0012608:	eb 05                	jmp    c001260f <VAS::VAS(bool)+0x1a1>
c001260a:	b8 00 00 00 00       	mov    eax,0x0
c001260f:	09 c2                	or     edx,eax
c0012611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012615:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012618:	05 fc 0f 00 00       	add    eax,0xffc
c001261d:	83 ca 03             	or     edx,0x3
c0012620:	89 10                	mov    DWORD PTR [eax],edx
c0012622:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0012627:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	50                   	push   eax
c0012631:	e8 c8 19 00 00       	call   c0013ffe <Device::getName()>
c0012636:	83 c4 10             	add    esp,0x10
c0012639:	83 ec 08             	sub    esp,0x8
c001263c:	68 27 9f 02 c0       	push   0xc0029f27
c0012641:	50                   	push   eax
c0012642:	e8 65 e1 fe ff       	call   c00007ac <strcmp>
c0012647:	83 c4 10             	add    esp,0x10
c001264a:	85 c0                	test   eax,eax
c001264c:	0f 94 c0             	sete   al
c001264f:	84 c0                	test   al,al
c0012651:	74 70                	je     c00126c3 <VAS::VAS(bool)+0x255>
c0012653:	e8 45 ae 00 00       	call   c001d49d <disableIRQs()>
c0012658:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001265d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012663:	05 7c 09 00 00       	add    eax,0x97c
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	50                   	push   eax
c001266c:	e8 27 ca ff ff       	call   c000f098 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012679:	89 c3                	mov    ebx,eax
c001267b:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0012680:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012686:	05 7c 09 00 00       	add    eax,0x97c
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	50                   	push   eax
c001268f:	e8 04 ca ff ff       	call   c000f098 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	83 ec 08             	sub    esp,0x8
c001269a:	50                   	push   eax
c001269b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001269f:	e8 9c f5 ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c00126a4:	83 c4 10             	add    esp,0x10
c00126a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126ae:	6a 11                	push   0x11
c00126b0:	53                   	push   ebx
c00126b1:	50                   	push   eax
c00126b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126b6:	e8 0b f9 ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bb:	83 c4 10             	add    esp,0x10
c00126be:	e8 e8 ad 00 00       	call   c001d4ab <enableIRQs()>
c00126c3:	90                   	nop
c00126c4:	83 c4 28             	add    esp,0x28
c00126c7:	5b                   	pop    ebx
c00126c8:	c3                   	ret    

c00126c9 <mapVASFirstTime>:
c00126c9:	55                   	push   ebp
c00126ca:	57                   	push   edi
c00126cb:	56                   	push   esi
c00126cc:	53                   	push   ebx
c00126cd:	83 ec 0c             	sub    esp,0xc
c00126d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126d8:	4a                   	dec    edx
c00126d9:	0f 84 8e 00 00 00    	je     c001276d <mapVASFirstTime+0xa4>
c00126df:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126e2:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126e5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126ea:	c1 e5 15             	shl    ebp,0x15
c00126ed:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126f2:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126f8:	29 eb                	sub    ebx,ebp
c00126fa:	29 ee                	sub    esi,ebp
c00126fc:	e8 b8 d5 ff ff       	call   c000fcb9 <Phys::allocatePage()>
c0012701:	83 ec 0c             	sub    esp,0xc
c0012704:	68 03 04 00 00       	push   0x403
c0012709:	6a 01                	push   0x1
c001270b:	53                   	push   ebx
c001270c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012712:	50                   	push   eax
c0012713:	57                   	push   edi
c0012714:	e8 a1 fb ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012719:	83 c4 20             	add    esp,0x20
c001271c:	39 f3                	cmp    ebx,esi
c001271e:	75 dc                	jne    c00126fc <mapVASFirstTime+0x33>
c0012720:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012725:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001272a:	29 ee                	sub    esi,ebp
c001272c:	29 e8                	sub    eax,ebp
c001272e:	89 c5                	mov    ebp,eax
c0012730:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012734:	19 db                	sbb    ebx,ebx
c0012736:	e8 7e d5 ff ff       	call   c000fcb9 <Phys::allocatePage()>
c001273b:	83 e3 04             	and    ebx,0x4
c001273e:	83 ec 0c             	sub    esp,0xc
c0012741:	81 c3 03 04 00 00    	add    ebx,0x403
c0012747:	53                   	push   ebx
c0012748:	6a 01                	push   0x1
c001274a:	56                   	push   esi
c001274b:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012751:	50                   	push   eax
c0012752:	57                   	push   edi
c0012753:	e8 62 fb ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012758:	83 c4 20             	add    esp,0x20
c001275b:	39 f5                	cmp    ebp,esi
c001275d:	75 d1                	jne    c0012730 <mapVASFirstTime+0x67>
c001275f:	0f 20 d8             	mov    eax,cr3
c0012762:	0f 22 d8             	mov    cr3,eax
c0012765:	83 c4 0c             	add    esp,0xc
c0012768:	5b                   	pop    ebx
c0012769:	5e                   	pop    esi
c001276a:	5f                   	pop    edi
c001276b:	5d                   	pop    ebp
c001276c:	c3                   	ret    
c001276d:	83 ec 0c             	sub    esp,0xc
c0012770:	68 35 9f 02 c0       	push   0xc0029f35
c0012775:	e8 71 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	83 c4 0c             	add    esp,0xc
c0012780:	5b                   	pop    ebx
c0012781:	5e                   	pop    esi
c0012782:	5f                   	pop    edi
c0012783:	5d                   	pop    ebp
c0012784:	c3                   	ret    

c0012785 <__cxa_atexit>:
c0012785:	31 c0                	xor    eax,eax
c0012787:	c3                   	ret    

c0012788 <__cxa_finalize>:
c0012788:	c3                   	ret    

c0012789 <__stack_chk_fail>:
c0012789:	55                   	push   ebp
c001278a:	89 e5                	mov    ebp,esp
c001278c:	83 ec 14             	sub    esp,0x14
c001278f:	68 4e 9f 02 c0       	push   0xc0029f4e
c0012794:	e8 52 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0012799:	58                   	pop    eax
c001279a:	5a                   	pop    edx
c001279b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001279e:	68 9e 9f 02 c0       	push   0xc0029f9e
c00127a3:	e8 43 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127a8:	59                   	pop    ecx
c00127a9:	58                   	pop    eax
c00127aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b0:	68 9e 9f 02 c0       	push   0xc0029f9e
c00127b5:	e8 31 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127ba:	5a                   	pop    edx
c00127bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127be:	59                   	pop    ecx
c00127bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c4:	68 9e 9f 02 c0       	push   0xc0029f9e
c00127c9:	e8 1d 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127ce:	5a                   	pop    edx
c00127cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127d2:	59                   	pop    ecx
c00127d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127da:	68 9e 9f 02 c0       	push   0xc0029f9e
c00127df:	e8 07 01 00 00       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00127e4:	c7 04 24 a6 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa6
c00127eb:	e8 6f 76 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00127f0:	83 c4 10             	add    esp,0x10
c00127f3:	c9                   	leave  
c00127f4:	c3                   	ret    

c00127f5 <__cxa_pure_virtual>:
c00127f5:	83 ec 18             	sub    esp,0x18
c00127f8:	68 be 9f 02 c0       	push   0xc0029fbe
c00127fd:	e8 5d 76 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0012802:	83 c4 1c             	add    esp,0x1c
c0012805:	c3                   	ret    

c0012806 <operator new[](unsigned long)>:
c0012806:	e9 11 ce ff ff       	jmp    c000f61c <malloc>

c001280b <operator delete(void*, unsigned long)>:
c001280b:	e9 2c ce ff ff       	jmp    c000f63c <rfree>

c0012810 <operator delete[](void*)>:
c0012810:	e9 27 ce ff ff       	jmp    c000f63c <rfree>

c0012815 <operator delete[](void*, unsigned long)>:
c0012815:	e9 22 ce ff ff       	jmp    c000f63c <rfree>

c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001281a:	57                   	push   edi
c001281b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012820:	56                   	push   esi
c0012821:	be d4 9f 02 c0       	mov    esi,0xc0029fd4
c0012826:	53                   	push   ebx
c0012827:	83 ec 40             	sub    esp,0x40
c001282a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001282e:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012832:	fc                   	cld    
c0012833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012835:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012839:	83 f9 3e             	cmp    ecx,0x3e
c001283c:	7e 05                	jle    c0012843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001283e:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012843:	89 df                	mov    edi,ebx
c0012845:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012849:	eb 02                	jmp    c001284d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001284b:	89 c7                	mov    edi,eax
c001284d:	31 d2                	xor    edx,edx
c001284f:	46                   	inc    esi
c0012850:	89 f8                	mov    eax,edi
c0012852:	f7 f1                	div    ecx
c0012854:	39 cf                	cmp    edi,ecx
c0012856:	73 f3                	jae    c001284b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012858:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001285b:	eb 02                	jmp    c001285f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001285d:	89 c3                	mov    ebx,eax
c001285f:	31 d2                	xor    edx,edx
c0012861:	4e                   	dec    esi
c0012862:	89 d8                	mov    eax,ebx
c0012864:	f7 f1                	div    ecx
c0012866:	39 cb                	cmp    ebx,ecx
c0012868:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001286c:	88 16                	mov    BYTE PTR [esi],dl
c001286e:	73 ed                	jae    c001285d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012870:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012874:	83 c4 40             	add    esp,0x40
c0012877:	5b                   	pop    ebx
c0012878:	5e                   	pop    esi
c0012879:	5f                   	pop    edi
c001287a:	c3                   	ret    

c001287b <Dbg::logc(char)>:
c001287b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001287f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012884:	ec                   	in     al,dx
c0012885:	a8 20                	test   al,0x20
c0012887:	74 fb                	je     c0012884 <Dbg::logc(char)+0x9>
c0012889:	ba f8 03 00 00       	mov    edx,0x3f8
c001288e:	88 c8                	mov    al,cl
c0012890:	ee                   	out    dx,al
c0012891:	c3                   	ret    

c0012892 <Dbg::logs(char*)>:
c0012892:	53                   	push   ebx
c0012893:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012897:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001289a:	84 c0                	test   al,al
c001289c:	74 0f                	je     c00128ad <Dbg::logs(char*)+0x1b>
c001289e:	50                   	push   eax
c001289f:	43                   	inc    ebx
c00128a0:	e8 d6 ff ff ff       	call   c001287b <Dbg::logc(char)>
c00128a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a8:	5a                   	pop    edx
c00128a9:	84 c0                	test   al,al
c00128ab:	75 f1                	jne    c001289e <Dbg::logs(char*)+0xc>
c00128ad:	5b                   	pop    ebx
c00128ae:	c3                   	ret    

c00128af <Dbg::logWriteInt(unsigned int)>:
c00128af:	83 ec 10             	sub    esp,0x10
c00128b2:	6a 0a                	push   0xa
c00128b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128b8:	50                   	push   eax
c00128b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128bd:	e8 58 ff ff ff       	call   c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128c2:	50                   	push   eax
c00128c3:	e8 ca ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c00128c8:	83 c4 20             	add    esp,0x20
c00128cb:	c3                   	ret    

c00128cc <Dbg::logWriteIntBase(unsigned int, int)>:
c00128cc:	83 ec 10             	sub    esp,0x10
c00128cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128d7:	50                   	push   eax
c00128d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128dc:	e8 39 ff ff ff       	call   c001281a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e1:	50                   	push   eax
c00128e2:	e8 ab ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c00128e7:	83 c4 20             	add    esp,0x20
c00128ea:	c3                   	ret    

c00128eb <Dbg::kprintf(char const*, ...)>:
c00128eb:	55                   	push   ebp
c00128ec:	57                   	push   edi
c00128ed:	56                   	push   esi
c00128ee:	53                   	push   ebx
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012901:	84 c0                	test   al,al
c0012903:	74 4a                	je     c001294f <Dbg::kprintf(char const*, ...)+0x64>
c0012905:	31 db                	xor    ebx,ebx
c0012907:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001290a:	3c 25                	cmp    al,0x25
c001290c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001290f:	0f 85 e4 00 00 00    	jne    c00129f9 <Dbg::kprintf(char const*, ...)+0x10e>
c0012915:	83 c3 02             	add    ebx,0x2
c0012918:	8a 07                	mov    al,BYTE PTR [edi]
c001291a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001291d:	83 e8 25             	sub    eax,0x25
c0012920:	3c 53                	cmp    al,0x53
c0012922:	0f 87 ba 00 00 00    	ja     c00129e2 <Dbg::kprintf(char const*, ...)+0xf7>
c0012928:	0f b6 c0             	movzx  eax,al
c001292b:	ff 24 85 14 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5fec]
c0012932:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012936:	89 c8                	mov    eax,ecx
c0012938:	83 c1 04             	add    ecx,0x4
c001293b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001293f:	ff 30                	push   DWORD PTR [eax]
c0012941:	e8 4c ff ff ff       	call   c0012892 <Dbg::logs(char*)>
c0012946:	58                   	pop    eax
c0012947:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001294b:	84 c0                	test   al,al
c001294d:	75 b8                	jne    c0012907 <Dbg::kprintf(char const*, ...)+0x1c>
c001294f:	83 c4 0c             	add    esp,0xc
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	5d                   	pop    ebp
c0012956:	c3                   	ret    
c0012957:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001295b:	89 d0                	mov    eax,edx
c001295d:	83 c2 04             	add    edx,0x4
c0012960:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012964:	ff 30                	push   DWORD PTR [eax]
c0012966:	e8 44 ff ff ff       	call   c00128af <Dbg::logWriteInt(unsigned int)>
c001296b:	58                   	pop    eax
c001296c:	eb d9                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c001296e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012972:	89 d0                	mov    eax,edx
c0012974:	83 c2 04             	add    edx,0x4
c0012977:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001297a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001297e:	50                   	push   eax
c001297f:	e8 f7 fe ff ff       	call   c001287b <Dbg::logc(char)>
c0012984:	58                   	pop    eax
c0012985:	eb c0                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c0012987:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001298b:	89 c8                	mov    eax,ecx
c001298d:	83 c1 04             	add    ecx,0x4
c0012990:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012994:	ff 30                	push   DWORD PTR [eax]
c0012996:	e8 14 ff ff ff       	call   c00128af <Dbg::logWriteInt(unsigned int)>
c001299b:	5f                   	pop    edi
c001299c:	eb a9                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c001299e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129a2:	89 c8                	mov    eax,ecx
c00129a4:	83 c1 04             	add    ecx,0x4
c00129a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129ab:	6a 10                	push   0x10
c00129ad:	ff 30                	push   DWORD PTR [eax]
c00129af:	e8 18 ff ff ff       	call   c00128cc <Dbg::logWriteIntBase(unsigned int, int)>
c00129b4:	59                   	pop    ecx
c00129b5:	5f                   	pop    edi
c00129b6:	eb 8f                	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129bc:	89 d0                	mov    eax,edx
c00129be:	83 c2 08             	add    edx,0x8
c00129c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129c5:	6a 10                	push   0x10
c00129c7:	ff 30                	push   DWORD PTR [eax]
c00129c9:	e8 fe fe ff ff       	call   c00128cc <Dbg::logWriteIntBase(unsigned int, int)>
c00129ce:	58                   	pop    eax
c00129cf:	5a                   	pop    edx
c00129d0:	e9 72 ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129d5:	6a 25                	push   0x25
c00129d7:	e8 9f fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129dc:	58                   	pop    eax
c00129dd:	e9 65 ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e2:	6a 25                	push   0x25
c00129e4:	e8 92 fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129e9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129ec:	50                   	push   eax
c00129ed:	e8 89 fe ff ff       	call   c001287b <Dbg::logc(char)>
c00129f2:	5a                   	pop    edx
c00129f3:	59                   	pop    ecx
c00129f4:	e9 4e ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f9:	50                   	push   eax
c00129fa:	89 eb                	mov    ebx,ebp
c00129fc:	e8 7a fe ff ff       	call   c001287b <Dbg::logc(char)>
c0012a01:	89 fd                	mov    ebp,edi
c0012a03:	58                   	pop    eax
c0012a04:	e9 3e ff ff ff       	jmp    c0012947 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a09:	90                   	nop

c0012a0a <File::read(unsigned long long, void*, int*)>:
c0012a0a:	53                   	push   ebx
c0012a0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a13:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a1a:	3c 19                	cmp    al,0x19
c0012a1c:	77 35                	ja     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a1e:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0012a25:	85 c0                	test   eax,eax
c0012a27:	74 2a                	je     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a29:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a2f:	85 c0                	test   eax,eax
c0012a31:	74 20                	je     c0012a53 <File::read(unsigned long long, void*, int*)+0x49>
c0012a33:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a37:	74 21                	je     c0012a5a <File::read(unsigned long long, void*, int*)+0x50>
c0012a39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a3f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a4d:	5b                   	pop    ebx
c0012a4e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a51:	ff e0                	jmp    eax
c0012a53:	b8 0b 00 00 00       	mov    eax,0xb
c0012a58:	eb 05                	jmp    c0012a5f <File::read(unsigned long long, void*, int*)+0x55>
c0012a5a:	b8 05 00 00 00       	mov    eax,0x5
c0012a5f:	5b                   	pop    ebx
c0012a60:	c3                   	ret    
c0012a61:	90                   	nop

c0012a62 <File::write(unsigned long long, void*, int*)>:
c0012a62:	53                   	push   ebx
c0012a63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a72:	3c 19                	cmp    al,0x19
c0012a74:	77 35                	ja     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a76:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0012a7d:	85 c0                	test   eax,eax
c0012a7f:	74 2a                	je     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a87:	85 c0                	test   eax,eax
c0012a89:	74 20                	je     c0012aab <File::write(unsigned long long, void*, int*)+0x49>
c0012a8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a8f:	74 21                	je     c0012ab2 <File::write(unsigned long long, void*, int*)+0x50>
c0012a91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aa5:	5b                   	pop    ebx
c0012aa6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012aa9:	ff e0                	jmp    eax
c0012aab:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab0:	eb 05                	jmp    c0012ab7 <File::write(unsigned long long, void*, int*)+0x55>
c0012ab2:	b8 05 00 00 00       	mov    eax,0x5
c0012ab7:	5b                   	pop    ebx
c0012ab8:	c3                   	ret    
c0012ab9:	90                   	nop

c0012aba <Directory::read(unsigned long long, void*, int*)>:
c0012aba:	53                   	push   ebx
c0012abb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012abf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ac3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012aca:	3c 19                	cmp    al,0x19
c0012acc:	77 35                	ja     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ace:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	74 2a                	je     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012adf:	85 c0                	test   eax,eax
c0012ae1:	74 20                	je     c0012b03 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ae7:	74 21                	je     c0012b0a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ae9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012aeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012af5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012af9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012afd:	5b                   	pop    ebx
c0012afe:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b01:	ff e0                	jmp    eax
c0012b03:	b8 0b 00 00 00       	mov    eax,0xb
c0012b08:	eb 05                	jmp    c0012b0f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b0a:	b8 05 00 00 00       	mov    eax,0x5
c0012b0f:	5b                   	pop    ebx
c0012b10:	c3                   	ret    
c0012b11:	90                   	nop

c0012b12 <Directory::write(unsigned long long, void*, int*)>:
c0012b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b16:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b22:	80 fa 19             	cmp    dl,0x19
c0012b25:	77 18                	ja     c0012b3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b27:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012b2e:	85 d2                	test   edx,edx
c0012b30:	74 0d                	je     c0012b3f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b32:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b39:	19 c0                	sbb    eax,eax
c0012b3b:	83 e0 0a             	and    eax,0xa
c0012b3e:	40                   	inc    eax
c0012b3f:	c3                   	ret    

c0012b40 <File::isAtty()>:
c0012b40:	31 c0                	xor    eax,eax
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <Directory::isAtty()>:
c0012b44:	31 c0                	xor    eax,eax
c0012b46:	c3                   	ret    
c0012b47:	90                   	nop

c0012b48 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b48:	b8 0a 00 00 00       	mov    eax,0xa
c0012b4d:	c3                   	ret    

c0012b4e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b4e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b53:	c3                   	ret    

c0012b54 <File::~File()>:
c0012b54:	83 ec 0c             	sub    esp,0xc
c0012b57:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c0012b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b60:	89 10                	mov    DWORD PTR [eax],edx
c0012b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	50                   	push   eax
c0012b6a:	e8 2b eb ff ff       	call   c001169a <UnixFile::~UnixFile()>
c0012b6f:	83 c4 10             	add    esp,0x10
c0012b72:	90                   	nop
c0012b73:	83 c4 0c             	add    esp,0xc
c0012b76:	c3                   	ret    
c0012b77:	90                   	nop

c0012b78 <File::~File()>:
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	83 ec 0c             	sub    esp,0xc
c0012b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b82:	e8 cd ff ff ff       	call   c0012b54 <File::~File()>
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	83 ec 08             	sub    esp,0x8
c0012b8d:	68 14 01 00 00       	push   0x114
c0012b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b96:	e8 70 fc ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	83 c4 0c             	add    esp,0xc
c0012ba1:	c3                   	ret    

c0012ba2 <Directory::~Directory()>:
c0012ba2:	83 ec 0c             	sub    esp,0xc
c0012ba5:	ba ec a1 02 c0       	mov    edx,0xc002a1ec
c0012baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bae:	89 10                	mov    DWORD PTR [eax],edx
c0012bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	50                   	push   eax
c0012bb8:	e8 dd ea ff ff       	call   c001169a <UnixFile::~UnixFile()>
c0012bbd:	83 c4 10             	add    esp,0x10
c0012bc0:	90                   	nop
c0012bc1:	83 c4 0c             	add    esp,0xc
c0012bc4:	c3                   	ret    
c0012bc5:	90                   	nop

c0012bc6 <Directory::~Directory()>:
c0012bc6:	83 ec 0c             	sub    esp,0xc
c0012bc9:	83 ec 0c             	sub    esp,0xc
c0012bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd0:	e8 cd ff ff ff       	call   c0012ba2 <Directory::~Directory()>
c0012bd5:	83 c4 10             	add    esp,0x10
c0012bd8:	83 ec 08             	sub    esp,0x8
c0012bdb:	68 14 01 00 00       	push   0x114
c0012be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be4:	e8 22 fc ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	83 c4 0c             	add    esp,0xc
c0012bef:	c3                   	ret    

c0012bf0 <Filesystem::Filesystem()>:
c0012bf0:	ba 6c a1 02 c0       	mov    edx,0xc002a16c
c0012bf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf9:	89 10                	mov    DWORD PTR [eax],edx
c0012bfb:	8b 15 c8 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbc8
c0012c01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0c:	a3 c8 db 02 c0       	mov    ds:0xc002dbc8,eax
c0012c11:	90                   	nop
c0012c12:	c3                   	ret    
c0012c13:	90                   	nop

c0012c14 <Filesystem::~Filesystem()>:
c0012c14:	ba 6c a1 02 c0       	mov    edx,0xc002a16c
c0012c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c1d:	89 10                	mov    DWORD PTR [eax],edx
c0012c1f:	90                   	nop
c0012c20:	c3                   	ret    
c0012c21:	90                   	nop

c0012c22 <Filesystem::~Filesystem()>:
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c29:	e8 e6 ff ff ff       	call   c0012c14 <Filesystem::~Filesystem()>
c0012c2e:	83 c4 04             	add    esp,0x4
c0012c31:	83 ec 08             	sub    esp,0x8
c0012c34:	6a 08                	push   0x8
c0012c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c3a:	e8 cc fb ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0012c3f:	83 c4 10             	add    esp,0x10
c0012c42:	83 c4 0c             	add    esp,0xc
c0012c45:	c3                   	ret    

c0012c46 <Fs::getcwd(Process*, char*, int)>:
c0012c46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c4a:	31 c0                	xor    eax,eax
c0012c4c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c4f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c53:	7d 15                	jge    c0012c6a <Fs::getcwd(Process*, char*, int)+0x24>
c0012c55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c59:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c60:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c63:	84 c9                	test   cl,cl
c0012c65:	74 06                	je     c0012c6d <Fs::getcwd(Process*, char*, int)+0x27>
c0012c67:	40                   	inc    eax
c0012c68:	eb e2                	jmp    c0012c4c <Fs::getcwd(Process*, char*, int)+0x6>
c0012c6a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c6d:	31 c0                	xor    eax,eax
c0012c6f:	c3                   	ret    

c0012c70 <Fs::initVFS()>:
c0012c70:	83 ec 18             	sub    esp,0x18
c0012c73:	6a 08                	push   0x8
c0012c75:	e8 a2 c9 ff ff       	call   c000f61c <malloc>
c0012c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7d:	e8 ac d9 00 00       	call   c002062e <FAT::FAT()>
c0012c82:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c89:	e8 8e c9 ff ff       	call   c000f61c <malloc>
c0012c8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c91:	e8 f0 eb 00 00       	call   c0021886 <ISO9660::ISO9660()>
c0012c96:	83 c4 1c             	add    esp,0x1c
c0012c99:	c3                   	ret    

c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c9a:	55                   	push   ebp
c0012c9b:	57                   	push   edi
c0012c9c:	56                   	push   esi
c0012c9d:	53                   	push   ebx
c0012c9e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ca4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cab:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cb2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cb9:	68 00 04 00 00       	push   0x400
c0012cbe:	6a 00                	push   0x0
c0012cc0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cc4:	56                   	push   esi
c0012cc5:	e8 f2 d9 fe ff       	call   c00006bc <memset>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd1:	75 0b                	jne    c0012cde <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cd3:	50                   	push   eax
c0012cd4:	50                   	push   eax
c0012cd5:	57                   	push   edi
c0012cd6:	56                   	push   esi
c0012cd7:	e8 7f da fe ff       	call   c000075b <strcpy>
c0012cdc:	eb 41                	jmp    c0012d1f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cde:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce0:	3c 5c                	cmp    al,0x5c
c0012ce2:	74 04                	je     c0012ce8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ce4:	3c 2f                	cmp    al,0x2f
c0012ce6:	75 18                	jne    c0012d00 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ce8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ceb:	3c 60                	cmp    al,0x60
c0012ced:	7e 03                	jle    c0012cf2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cef:	83 e8 20             	sub    eax,0x20
c0012cf2:	88 04 24             	mov    BYTE PTR [esp],al
c0012cf5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cfc:	50                   	push   eax
c0012cfd:	50                   	push   eax
c0012cfe:	eb 18                	jmp    c0012d18 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d00:	50                   	push   eax
c0012d01:	50                   	push   eax
c0012d02:	55                   	push   ebp
c0012d03:	56                   	push   esi
c0012d04:	e8 52 da fe ff       	call   c000075b <strcpy>
c0012d09:	5a                   	pop    edx
c0012d0a:	59                   	pop    ecx
c0012d0b:	68 ef b7 02 c0       	push   0xc002b7ef
c0012d10:	56                   	push   esi
c0012d11:	e8 fc da fe ff       	call   c0000812 <strcat>
c0012d16:	5d                   	pop    ebp
c0012d17:	58                   	pop    eax
c0012d18:	57                   	push   edi
c0012d19:	56                   	push   esi
c0012d1a:	e8 f3 da fe ff       	call   c0000812 <strcat>
c0012d1f:	83 c4 10             	add    esp,0x10
c0012d22:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d25:	3c 60                	cmp    al,0x60
c0012d27:	7e 03                	jle    c0012d2c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d29:	83 e8 20             	sub    eax,0x20
c0012d2c:	88 04 24             	mov    BYTE PTR [esp],al
c0012d2f:	88 03                	mov    BYTE PTR [ebx],al
c0012d31:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d38:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d3e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d42:	bf 03 00 00 00       	mov    edi,0x3
c0012d47:	b8 03 00 00 00       	mov    eax,0x3
c0012d4c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d4f:	84 d2                	test   dl,dl
c0012d51:	0f 84 91 00 00 00    	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d57:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d5a:	80 fa 5c             	cmp    dl,0x5c
c0012d5d:	74 05                	je     c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d5f:	80 fa 2f             	cmp    dl,0x2f
c0012d62:	75 12                	jne    c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d64:	89 c5                	mov    ebp,eax
c0012d66:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d6b:	74 09                	je     c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6d:	40                   	inc    eax
c0012d6e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d72:	89 cf                	mov    edi,ecx
c0012d74:	eb d6                	jmp    c0012d4c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d76:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d7b:	75 5b                	jne    c0012dd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d7d:	80 fa 2e             	cmp    dl,0x2e
c0012d80:	75 56                	jne    c0012dd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d82:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d86:	74 19                	je     c0012da1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d88:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d8d:	74 53                	je     c0012de2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d8f:	89 f9                	mov    ecx,edi
c0012d91:	41                   	inc    ecx
c0012d92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d95:	80 fa 2f             	cmp    dl,0x2f
c0012d98:	74 f7                	je     c0012d91 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d9a:	80 fa 5c             	cmp    dl,0x5c
c0012d9d:	74 f2                	je     c0012d91 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d9f:	eb d1                	jmp    c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012da6:	74 3a                	je     c0012de2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012da8:	83 f8 03             	cmp    eax,0x3
c0012dab:	74 c5                	je     c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dad:	41                   	inc    ecx
c0012dae:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db1:	80 fa 2f             	cmp    dl,0x2f
c0012db4:	74 f7                	je     c0012dad <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012db6:	80 fa 5c             	cmp    dl,0x5c
c0012db9:	74 f2                	je     c0012dad <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbb:	48                   	dec    eax
c0012dbc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc0:	75 06                	jne    c0012dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dc2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dc6:	eb f3                	jmp    c0012dbb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dc8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dcc:	74 07                	je     c0012dd5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd2:	48                   	dec    eax
c0012dd3:	eb f3                	jmp    c0012dc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dd5:	40                   	inc    eax
c0012dd6:	eb 9a                	jmp    c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd8:	80 fa 2f             	cmp    dl,0x2f
c0012ddb:	74 95                	je     c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ddd:	80 fa 5c             	cmp    dl,0x5c
c0012de0:	74 90                	je     c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012de5:	40                   	inc    eax
c0012de6:	eb 8a                	jmp    c0012d72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dec:	83 ec 0c             	sub    esp,0xc
c0012def:	53                   	push   ebx
c0012df0:	e8 e4 d8 fe ff       	call   c00006d9 <strlen>
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012dfd:	75 26                	jne    c0012e25 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012dff:	83 ec 0c             	sub    esp,0xc
c0012e02:	53                   	push   ebx
c0012e03:	e8 d1 d8 fe ff       	call   c00006d9 <strlen>
c0012e08:	83 c4 10             	add    esp,0x10
c0012e0b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e10:	74 26                	je     c0012e38 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e12:	83 ec 0c             	sub    esp,0xc
c0012e15:	53                   	push   ebx
c0012e16:	e8 be d8 fe ff       	call   c00006d9 <strlen>
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e23:	eb c7                	jmp    c0012dec <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e25:	83 ec 0c             	sub    esp,0xc
c0012e28:	53                   	push   ebx
c0012e29:	e8 ab d8 fe ff       	call   c00006d9 <strlen>
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e36:	74 c7                	je     c0012dff <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e38:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e3e:	5b                   	pop    ebx
c0012e3f:	5e                   	pop    esi
c0012e40:	5f                   	pop    edi
c0012e41:	5d                   	pop    ebp
c0012e42:	c3                   	ret    
c0012e43:	90                   	nop

c0012e44 <File::File(char const*, Process*)>:
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4b:	83 ec 08             	sub    esp,0x8
c0012e4e:	6a 00                	push   0x0
c0012e50:	50                   	push   eax
c0012e51:	e8 62 e6 ff ff       	call   c00114b8 <UnixFile::UnixFile(int)>
c0012e56:	83 c4 10             	add    esp,0x10
c0012e59:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c0012e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e62:	89 10                	mov    DWORD PTR [eax],edx
c0012e64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e68:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e72:	83 c0 0d             	add    eax,0xd
c0012e75:	83 ec 04             	sub    esp,0x4
c0012e78:	52                   	push   edx
c0012e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e7d:	50                   	push   eax
c0012e7e:	e8 17 fe ff ff       	call   c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e8a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e8d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e94:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ea2:	90                   	nop
c0012ea3:	83 c4 0c             	add    esp,0xc
c0012ea6:	c3                   	ret    
c0012ea7:	90                   	nop

c0012ea8 <File::open(FileOpenMode)>:
c0012ea8:	53                   	push   ebx
c0012ea9:	b8 0b 00 00 00       	mov    eax,0xb
c0012eae:	83 ec 08             	sub    esp,0x8
c0012eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eb5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ebc:	80 fa 19             	cmp    dl,0x19
c0012ebf:	77 40                	ja     c0012f01 <File::open(FileOpenMode)+0x59>
c0012ec1:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012ec8:	85 d2                	test   edx,edx
c0012eca:	74 35                	je     c0012f01 <File::open(FileOpenMode)+0x59>
c0012ecc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ed2:	85 d2                	test   edx,edx
c0012ed4:	74 2b                	je     c0012f01 <File::open(FileOpenMode)+0x59>
c0012ed6:	b8 06 00 00 00       	mov    eax,0x6
c0012edb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012edf:	75 20                	jne    c0012f01 <File::open(FileOpenMode)+0x59>
c0012ee1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ee3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ee9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012eed:	51                   	push   ecx
c0012eee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef1:	51                   	push   ecx
c0012ef2:	52                   	push   edx
c0012ef3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	85 c0                	test   eax,eax
c0012efb:	75 04                	jne    c0012f01 <File::open(FileOpenMode)+0x59>
c0012efd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f01:	83 c4 08             	add    esp,0x8
c0012f04:	5b                   	pop    ebx
c0012f05:	c3                   	ret    

c0012f06 <File::close()>:
c0012f06:	53                   	push   ebx
c0012f07:	b8 0b 00 00 00       	mov    eax,0xb
c0012f0c:	83 ec 08             	sub    esp,0x8
c0012f0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f13:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f1a:	80 fa 19             	cmp    dl,0x19
c0012f1d:	77 41                	ja     c0012f60 <File::close()+0x5a>
c0012f1f:	8b 1c 95 60 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012f26:	85 db                	test   ebx,ebx
c0012f28:	74 36                	je     c0012f60 <File::close()+0x5a>
c0012f2a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f31:	74 2d                	je     c0012f60 <File::close()+0x5a>
c0012f33:	b8 05 00 00 00       	mov    eax,0x5
c0012f38:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f3c:	74 22                	je     c0012f60 <File::close()+0x5a>
c0012f3e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f42:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c0012f49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f4f:	53                   	push   ebx
c0012f50:	53                   	push   ebx
c0012f51:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f53:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f59:	50                   	push   eax
c0012f5a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	83 c4 08             	add    esp,0x8
c0012f63:	5b                   	pop    ebx
c0012f64:	c3                   	ret    
c0012f65:	90                   	nop

c0012f66 <File::seek(unsigned long long)>:
c0012f66:	56                   	push   esi
c0012f67:	53                   	push   ebx
c0012f68:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6d:	51                   	push   ecx
c0012f6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f76:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f81:	80 fa 19             	cmp    dl,0x19
c0012f84:	77 31                	ja     c0012fb7 <File::seek(unsigned long long)+0x51>
c0012f86:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012f8d:	85 d2                	test   edx,edx
c0012f8f:	74 26                	je     c0012fb7 <File::seek(unsigned long long)+0x51>
c0012f91:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f97:	85 d2                	test   edx,edx
c0012f99:	74 1c                	je     c0012fb7 <File::seek(unsigned long long)+0x51>
c0012f9b:	b8 05 00 00 00       	mov    eax,0x5
c0012fa0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fa4:	74 11                	je     c0012fb7 <File::seek(unsigned long long)+0x51>
c0012fa6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fa8:	53                   	push   ebx
c0012fa9:	51                   	push   ecx
c0012faa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb0:	52                   	push   edx
c0012fb1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	5a                   	pop    edx
c0012fb8:	5b                   	pop    ebx
c0012fb9:	5e                   	pop    esi
c0012fba:	c3                   	ret    
c0012fbb:	90                   	nop

c0012fbc <File::tell(unsigned long long*)>:
c0012fbc:	83 ec 0c             	sub    esp,0xc
c0012fbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fc8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fcf:	80 fa 19             	cmp    dl,0x19
c0012fd2:	77 34                	ja     c0013008 <File::tell(unsigned long long*)+0x4c>
c0012fd4:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012fdb:	85 d2                	test   edx,edx
c0012fdd:	74 29                	je     c0013008 <File::tell(unsigned long long*)+0x4c>
c0012fdf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fe5:	85 d2                	test   edx,edx
c0012fe7:	74 1f                	je     c0013008 <File::tell(unsigned long long*)+0x4c>
c0012fe9:	b8 05 00 00 00       	mov    eax,0x5
c0012fee:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ff2:	74 14                	je     c0013008 <File::tell(unsigned long long*)+0x4c>
c0012ff4:	50                   	push   eax
c0012ff5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ff7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ffb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013001:	52                   	push   edx
c0013002:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	83 c4 0c             	add    esp,0xc
c001300b:	c3                   	ret    

c001300c <File::rewind()>:
c001300c:	83 ec 10             	sub    esp,0x10
c001300f:	6a 00                	push   0x0
c0013011:	6a 00                	push   0x0
c0013013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013017:	e8 4a ff ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001301c:	83 c4 1c             	add    esp,0x1c
c001301f:	c3                   	ret    

c0013020 <File::unlink()>:
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	b8 0b 00 00 00       	mov    eax,0xb
c0013028:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001302c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013033:	80 f9 19             	cmp    cl,0x19
c0013036:	77 2f                	ja     c0013067 <File::unlink()+0x47>
c0013038:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001303f:	85 c9                	test   ecx,ecx
c0013041:	74 24                	je     c0013067 <File::unlink()+0x47>
c0013043:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013049:	85 c9                	test   ecx,ecx
c001304b:	74 1a                	je     c0013067 <File::unlink()+0x47>
c001304d:	b8 06 00 00 00       	mov    eax,0x6
c0013052:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013056:	75 0f                	jne    c0013067 <File::unlink()+0x47>
c0013058:	83 c2 0d             	add    edx,0xd
c001305b:	50                   	push   eax
c001305c:	50                   	push   eax
c001305d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001305f:	52                   	push   edx
c0013060:	51                   	push   ecx
c0013061:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013064:	83 c4 10             	add    esp,0x10
c0013067:	83 c4 0c             	add    esp,0xc
c001306a:	c3                   	ret    
c001306b:	90                   	nop

c001306c <File::rename(char const*)>:
c001306c:	83 ec 0c             	sub    esp,0xc
c001306f:	b8 0b 00 00 00       	mov    eax,0xb
c0013074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013078:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001307f:	80 f9 19             	cmp    cl,0x19
c0013082:	77 32                	ja     c00130b6 <File::rename(char const*)+0x4a>
c0013084:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001308b:	85 c9                	test   ecx,ecx
c001308d:	74 27                	je     c00130b6 <File::rename(char const*)+0x4a>
c001308f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013095:	85 c9                	test   ecx,ecx
c0013097:	74 1d                	je     c00130b6 <File::rename(char const*)+0x4a>
c0013099:	b8 06 00 00 00       	mov    eax,0x6
c001309e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a2:	75 12                	jne    c00130b6 <File::rename(char const*)+0x4a>
c00130a4:	83 c2 0d             	add    edx,0xd
c00130a7:	50                   	push   eax
c00130a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130ae:	52                   	push   edx
c00130af:	51                   	push   ecx
c00130b0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130b3:	83 c4 10             	add    esp,0x10
c00130b6:	83 c4 0c             	add    esp,0xc
c00130b9:	c3                   	ret    

c00130ba <File::chfatattr(unsigned char, unsigned char)>:
c00130ba:	57                   	push   edi
c00130bb:	b8 0b 00 00 00       	mov    eax,0xb
c00130c0:	56                   	push   esi
c00130c1:	53                   	push   ebx
c00130c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130d5:	80 f9 19             	cmp    cl,0x19
c00130d8:	77 37                	ja     c0013111 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130da:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00130e1:	85 c9                	test   ecx,ecx
c00130e3:	74 2c                	je     c0013111 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130eb:	85 c9                	test   ecx,ecx
c00130ed:	74 22                	je     c0013111 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ef:	b8 06 00 00 00       	mov    eax,0x6
c00130f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130f8:	75 17                	jne    c0013111 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130fa:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130fc:	89 f0                	mov    eax,esi
c00130fe:	83 c2 0d             	add    edx,0xd
c0013101:	0f b6 f0             	movzx  esi,al
c0013104:	0f b6 db             	movzx  ebx,bl
c0013107:	56                   	push   esi
c0013108:	53                   	push   ebx
c0013109:	52                   	push   edx
c001310a:	51                   	push   ecx
c001310b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	5b                   	pop    ebx
c0013112:	5e                   	pop    esi
c0013113:	5f                   	pop    edi
c0013114:	c3                   	ret    
c0013115:	90                   	nop

c0013116 <File::exists()>:
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	31 c0                	xor    eax,eax
c001311b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001311f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013126:	80 f9 19             	cmp    cl,0x19
c0013129:	77 24                	ja     c001314f <File::exists()+0x39>
c001312b:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0013132:	85 c9                	test   ecx,ecx
c0013134:	74 19                	je     c001314f <File::exists()+0x39>
c0013136:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001313c:	85 c9                	test   ecx,ecx
c001313e:	74 0f                	je     c001314f <File::exists()+0x39>
c0013140:	83 c2 0d             	add    edx,0xd
c0013143:	50                   	push   eax
c0013144:	50                   	push   eax
c0013145:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013147:	52                   	push   edx
c0013148:	51                   	push   ecx
c0013149:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	83 c4 0c             	add    esp,0xc
c0013152:	c3                   	ret    
c0013153:	90                   	nop

c0013154 <File::stat(unsigned long long*, bool*)>:
c0013154:	56                   	push   esi
c0013155:	53                   	push   ebx
c0013156:	50                   	push   eax
c0013157:	b8 0b 00 00 00       	mov    eax,0xb
c001315c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013160:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013164:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001316b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001316f:	80 f9 19             	cmp    cl,0x19
c0013172:	77 3d                	ja     c00131b1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013174:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001317b:	85 c9                	test   ecx,ecx
c001317d:	74 32                	je     c00131b1 <File::stat(unsigned long long*, bool*)+0x5d>
c001317f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013185:	85 c9                	test   ecx,ecx
c0013187:	74 28                	je     c00131b1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013189:	8b 01                	mov    eax,DWORD PTR [ecx]
c001318b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001318f:	74 13                	je     c00131a4 <File::stat(unsigned long long*, bool*)+0x50>
c0013191:	83 ec 04             	sub    esp,0x4
c0013194:	56                   	push   esi
c0013195:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001319b:	51                   	push   ecx
c001319c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001319f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131a2:	eb 0a                	jmp    c00131ae <File::stat(unsigned long long*, bool*)+0x5a>
c00131a4:	53                   	push   ebx
c00131a5:	83 c2 0d             	add    edx,0xd
c00131a8:	56                   	push   esi
c00131a9:	52                   	push   edx
c00131aa:	51                   	push   ecx
c00131ab:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131ae:	83 c4 10             	add    esp,0x10
c00131b1:	5a                   	pop    edx
c00131b2:	5b                   	pop    ebx
c00131b3:	5e                   	pop    esi
c00131b4:	c3                   	ret    

c00131b5 <Fs::setcwd(Process*, char*)>:
c00131b5:	55                   	push   ebp
c00131b6:	57                   	push   edi
c00131b7:	56                   	push   esi
c00131b8:	53                   	push   ebx
c00131b9:	81 ec 20 02 00 00    	sub    esp,0x220
c00131bf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131cc:	57                   	push   edi
c00131cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131d8:	56                   	push   esi
c00131d9:	e8 bc fa ff ff       	call   c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>
c00131de:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e1:	e8 f3 d4 fe ff       	call   c00006d9 <strlen>
c00131e6:	83 c4 10             	add    esp,0x10
c00131e9:	83 f8 02             	cmp    eax,0x2
c00131ec:	77 17                	ja     c0013205 <Fs::setcwd(Process*, char*)+0x50>
c00131ee:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131f3:	83 e8 41             	sub    eax,0x41
c00131f6:	83 f8 19             	cmp    eax,0x19
c00131f9:	76 24                	jbe    c001321f <Fs::setcwd(Process*, char*)+0x6a>
c00131fb:	b8 03 00 00 00       	mov    eax,0x3
c0013200:	e9 e0 00 00 00       	jmp    c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c0013205:	83 ec 0c             	sub    esp,0xc
c0013208:	56                   	push   esi
c0013209:	e8 cb d4 fe ff       	call   c00006d9 <strlen>
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	83 f8 03             	cmp    eax,0x3
c0013214:	75 34                	jne    c001324a <Fs::setcwd(Process*, char*)+0x95>
c0013216:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001321b:	75 2d                	jne    c001324a <Fs::setcwd(Process*, char*)+0x95>
c001321d:	eb cf                	jmp    c00131ee <Fs::setcwd(Process*, char*)+0x39>
c001321f:	8b 14 85 60 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fa0]
c0013226:	b8 05 00 00 00       	mov    eax,0x5
c001322b:	85 d2                	test   edx,edx
c001322d:	0f 84 b2 00 00 00    	je     c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c0013233:	b8 06 00 00 00       	mov    eax,0x6
c0013238:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001323f:	0f 85 92 00 00 00    	jne    c00132d7 <Fs::setcwd(Process*, char*)+0x122>
c0013245:	e9 9b 00 00 00       	jmp    c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	68 14 01 00 00       	push   0x114
c0013252:	e8 c5 c3 ff ff       	call   c000f61c <malloc>
c0013257:	83 c4 0c             	add    esp,0xc
c001325a:	89 c3                	mov    ebx,eax
c001325c:	55                   	push   ebp
c001325d:	56                   	push   esi
c001325e:	50                   	push   eax
c001325f:	e8 e0 fb ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c0013264:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013269:	83 c4 0c             	add    esp,0xc
c001326c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013270:	50                   	push   eax
c0013271:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013275:	50                   	push   eax
c0013276:	53                   	push   ebx
c0013277:	e8 d8 fe ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	83 f8 02             	cmp    eax,0x2
c0013282:	74 04                	je     c0013288 <Fs::setcwd(Process*, char*)+0xd3>
c0013284:	85 c0                	test   eax,eax
c0013286:	74 1c                	je     c00132a4 <Fs::setcwd(Process*, char*)+0xef>
c0013288:	b8 01 00 00 00       	mov    eax,0x1
c001328d:	85 db                	test   ebx,ebx
c001328f:	74 54                	je     c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c0013291:	83 ec 0c             	sub    esp,0xc
c0013294:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013296:	53                   	push   ebx
c0013297:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	b8 01 00 00 00       	mov    eax,0x1
c00132a2:	eb 41                	jmp    c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c00132a4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132a9:	75 1c                	jne    c00132c7 <Fs::setcwd(Process*, char*)+0x112>
c00132ab:	b8 02 00 00 00       	mov    eax,0x2
c00132b0:	85 db                	test   ebx,ebx
c00132b2:	74 31                	je     c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132b9:	53                   	push   ebx
c00132ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132bd:	83 c4 10             	add    esp,0x10
c00132c0:	b8 02 00 00 00       	mov    eax,0x2
c00132c5:	eb 1e                	jmp    c00132e5 <Fs::setcwd(Process*, char*)+0x130>
c00132c7:	85 db                	test   ebx,ebx
c00132c9:	74 0c                	je     c00132d7 <Fs::setcwd(Process*, char*)+0x122>
c00132cb:	83 ec 0c             	sub    esp,0xc
c00132ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d0:	53                   	push   ebx
c00132d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	50                   	push   eax
c00132d8:	50                   	push   eax
c00132d9:	56                   	push   esi
c00132da:	57                   	push   edi
c00132db:	e8 7b d4 fe ff       	call   c000075b <strcpy>
c00132e0:	83 c4 10             	add    esp,0x10
c00132e3:	31 c0                	xor    eax,eax
c00132e5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132eb:	5b                   	pop    ebx
c00132ec:	5e                   	pop    esi
c00132ed:	5f                   	pop    edi
c00132ee:	5d                   	pop    ebp
c00132ef:	c3                   	ret    

c00132f0 <Directory::Directory(char const*, Process*)>:
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f7:	83 ec 08             	sub    esp,0x8
c00132fa:	6a 00                	push   0x0
c00132fc:	50                   	push   eax
c00132fd:	e8 b6 e1 ff ff       	call   c00114b8 <UnixFile::UnixFile(int)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	ba ec a1 02 c0       	mov    edx,0xc002a1ec
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	89 10                	mov    DWORD PTR [eax],edx
c0013310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013314:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331e:	83 c0 0d             	add    eax,0xd
c0013321:	83 ec 04             	sub    esp,0x4
c0013324:	52                   	push   edx
c0013325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013329:	50                   	push   eax
c001332a:	e8 6b f9 ff ff       	call   c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013336:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013339:	8d 50 bf             	lea    edx,[eax-0x41]
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001334e:	90                   	nop
c001334f:	83 c4 0c             	add    esp,0xc
c0013352:	c3                   	ret    
c0013353:	90                   	nop

c0013354 <Directory::open()>:
c0013354:	53                   	push   ebx
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	83 ec 08             	sub    esp,0x8
c001335d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013361:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013368:	80 fa 19             	cmp    dl,0x19
c001336b:	77 3d                	ja     c00133aa <Directory::open()+0x56>
c001336d:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0013374:	85 d2                	test   edx,edx
c0013376:	74 32                	je     c00133aa <Directory::open()+0x56>
c0013378:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001337e:	85 d2                	test   edx,edx
c0013380:	74 28                	je     c00133aa <Directory::open()+0x56>
c0013382:	b8 06 00 00 00       	mov    eax,0x6
c0013387:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001338b:	75 1d                	jne    c00133aa <Directory::open()+0x56>
c001338d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013393:	50                   	push   eax
c0013394:	8b 02                	mov    eax,DWORD PTR [edx]
c0013396:	51                   	push   ecx
c0013397:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001339a:	51                   	push   ecx
c001339b:	52                   	push   edx
c001339c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001339f:	83 c4 10             	add    esp,0x10
c00133a2:	85 c0                	test   eax,eax
c00133a4:	75 04                	jne    c00133aa <Directory::open()+0x56>
c00133a6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133aa:	83 c4 08             	add    esp,0x8
c00133ad:	5b                   	pop    ebx
c00133ae:	c3                   	ret    
c00133af:	90                   	nop

c00133b0 <Directory::close()>:
c00133b0:	53                   	push   ebx
c00133b1:	b8 0b 00 00 00       	mov    eax,0xb
c00133b6:	83 ec 08             	sub    esp,0x8
c00133b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133c4:	80 fa 19             	cmp    dl,0x19
c00133c7:	77 41                	ja     c001340a <Directory::close()+0x5a>
c00133c9:	8b 1c 95 60 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1fa0]
c00133d0:	85 db                	test   ebx,ebx
c00133d2:	74 36                	je     c001340a <Directory::close()+0x5a>
c00133d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133db:	74 2d                	je     c001340a <Directory::close()+0x5a>
c00133dd:	b8 05 00 00 00       	mov    eax,0x5
c00133e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133e6:	74 22                	je     c001340a <Directory::close()+0x5a>
c00133e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133ec:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c00133f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133f9:	53                   	push   ebx
c00133fa:	53                   	push   ebx
c00133fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00133fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013403:	50                   	push   eax
c0013404:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	83 c4 08             	add    esp,0x8
c001340d:	5b                   	pop    ebx
c001340e:	c3                   	ret    
c001340f:	90                   	nop

c0013410 <Directory::unlink()>:
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	b8 0b 00 00 00       	mov    eax,0xb
c0013418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001341c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013423:	80 f9 19             	cmp    cl,0x19
c0013426:	77 2f                	ja     c0013457 <Directory::unlink()+0x47>
c0013428:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001342f:	85 c9                	test   ecx,ecx
c0013431:	74 24                	je     c0013457 <Directory::unlink()+0x47>
c0013433:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013439:	85 c9                	test   ecx,ecx
c001343b:	74 1a                	je     c0013457 <Directory::unlink()+0x47>
c001343d:	b8 06 00 00 00       	mov    eax,0x6
c0013442:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013446:	75 0f                	jne    c0013457 <Directory::unlink()+0x47>
c0013448:	83 c2 0d             	add    edx,0xd
c001344b:	50                   	push   eax
c001344c:	50                   	push   eax
c001344d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001344f:	52                   	push   edx
c0013450:	51                   	push   ecx
c0013451:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013454:	83 c4 10             	add    esp,0x10
c0013457:	83 c4 0c             	add    esp,0xc
c001345a:	c3                   	ret    
c001345b:	90                   	nop

c001345c <Directory::rename(char const*)>:
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	b8 0b 00 00 00       	mov    eax,0xb
c0013464:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013468:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001346f:	80 f9 19             	cmp    cl,0x19
c0013472:	77 32                	ja     c00134a6 <Directory::rename(char const*)+0x4a>
c0013474:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001347b:	85 c9                	test   ecx,ecx
c001347d:	74 27                	je     c00134a6 <Directory::rename(char const*)+0x4a>
c001347f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013485:	85 c9                	test   ecx,ecx
c0013487:	74 1d                	je     c00134a6 <Directory::rename(char const*)+0x4a>
c0013489:	b8 06 00 00 00       	mov    eax,0x6
c001348e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013492:	75 12                	jne    c00134a6 <Directory::rename(char const*)+0x4a>
c0013494:	83 c2 0d             	add    edx,0xd
c0013497:	50                   	push   eax
c0013498:	8b 01                	mov    eax,DWORD PTR [ecx]
c001349a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001349e:	52                   	push   edx
c001349f:	51                   	push   ecx
c00134a0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	83 c4 0c             	add    esp,0xc
c00134a9:	c3                   	ret    

c00134aa <Directory::exists()>:
c00134aa:	83 ec 0c             	sub    esp,0xc
c00134ad:	31 c0                	xor    eax,eax
c00134af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134ba:	80 f9 19             	cmp    cl,0x19
c00134bd:	77 24                	ja     c00134e3 <Directory::exists()+0x39>
c00134bf:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00134c6:	85 c9                	test   ecx,ecx
c00134c8:	74 19                	je     c00134e3 <Directory::exists()+0x39>
c00134ca:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d0:	85 c9                	test   ecx,ecx
c00134d2:	74 0f                	je     c00134e3 <Directory::exists()+0x39>
c00134d4:	83 c2 0d             	add    edx,0xd
c00134d7:	50                   	push   eax
c00134d8:	50                   	push   eax
c00134d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134db:	52                   	push   edx
c00134dc:	51                   	push   ecx
c00134dd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e0:	83 c4 10             	add    esp,0x10
c00134e3:	83 c4 0c             	add    esp,0xc
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <Directory::read(dirent*)>:
c00134e8:	83 ec 1c             	sub    esp,0x1c
c00134eb:	b8 0b 00 00 00       	mov    eax,0xb
c00134f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134fb:	80 fa 19             	cmp    dl,0x19
c00134fe:	77 30                	ja     c0013530 <Directory::read(dirent*)+0x48>
c0013500:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0013507:	85 d2                	test   edx,edx
c0013509:	74 25                	je     c0013530 <Directory::read(dirent*)+0x48>
c001350b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013512:	74 1c                	je     c0013530 <Directory::read(dirent*)+0x48>
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013519:	8d 54 24 18          	lea    edx,[esp+0x18]
c001351d:	52                   	push   edx
c001351e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013522:	6a 00                	push   0x0
c0013524:	68 10 01 00 00       	push   0x110
c0013529:	51                   	push   ecx
c001352a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001352d:	83 c4 20             	add    esp,0x20
c0013530:	83 c4 1c             	add    esp,0x1c
c0013533:	c3                   	ret    

c0013534 <Directory::create()>:
c0013534:	83 ec 0c             	sub    esp,0xc
c0013537:	b8 0b 00 00 00       	mov    eax,0xb
c001353c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013540:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013547:	80 f9 19             	cmp    cl,0x19
c001354a:	77 2f                	ja     c001357b <Directory::create()+0x47>
c001354c:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0013553:	85 c9                	test   ecx,ecx
c0013555:	74 24                	je     c001357b <Directory::create()+0x47>
c0013557:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001355d:	85 c9                	test   ecx,ecx
c001355f:	74 1a                	je     c001357b <Directory::create()+0x47>
c0013561:	b8 06 00 00 00       	mov    eax,0x6
c0013566:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001356a:	75 0f                	jne    c001357b <Directory::create()+0x47>
c001356c:	83 c2 0d             	add    edx,0xd
c001356f:	50                   	push   eax
c0013570:	50                   	push   eax
c0013571:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013573:	52                   	push   edx
c0013574:	51                   	push   ecx
c0013575:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	83 c4 0c             	add    esp,0xc
c001357e:	c3                   	ret    
c001357f:	90                   	nop

c0013580 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013580:	b8 0a 00 00 00       	mov    eax,0xa
c0013585:	c3                   	ret    

c0013586 <Bus::Bus(char const*)>:
c0013586:	83 ec 0c             	sub    esp,0xc
c0013589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358d:	83 ec 08             	sub    esp,0x8
c0013590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013594:	50                   	push   eax
c0013595:	e8 68 09 00 00       	call   c0013f02 <Device::Device(char const*)>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c00135a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a6:	89 10                	mov    DWORD PTR [eax],edx
c00135a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ac:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135b6:	90                   	nop
c00135b7:	83 c4 0c             	add    esp,0xc
c00135ba:	c3                   	ret    
c00135bb:	90                   	nop

c00135bc <Bus::~Bus()>:
c00135bc:	83 ec 0c             	sub    esp,0xc
c00135bf:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c00135c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c8:	89 10                	mov    DWORD PTR [eax],edx
c00135ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	50                   	push   eax
c00135d2:	e8 0d 06 00 00       	call   c0013be4 <Device::~Device()>
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	90                   	nop
c00135db:	83 c4 0c             	add    esp,0xc
c00135de:	c3                   	ret    
c00135df:	90                   	nop

c00135e0 <Bus::~Bus()>:
c00135e0:	83 ec 0c             	sub    esp,0xc
c00135e3:	83 ec 0c             	sub    esp,0xc
c00135e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ea:	e8 cd ff ff ff       	call   c00135bc <Bus::~Bus()>
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	83 ec 08             	sub    esp,0x8
c00135f5:	68 58 01 00 00       	push   0x158
c00135fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fe:	e8 08 f2 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013603:	83 c4 10             	add    esp,0x10
c0013606:	83 c4 0c             	add    esp,0xc
c0013609:	c3                   	ret    

c001360a <Buzzer::Buzzer(char const*)>:
c001360a:	83 ec 0c             	sub    esp,0xc
c001360d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013611:	83 ec 08             	sub    esp,0x8
c0013614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013618:	50                   	push   eax
c0013619:	e8 e4 08 00 00       	call   c0013f02 <Device::Device(char const*)>
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	ba 34 a2 02 c0       	mov    edx,0xc002a234
c0013626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362a:	89 10                	mov    DWORD PTR [eax],edx
c001362c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013630:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001363a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013648:	90                   	nop
c0013649:	83 c4 0c             	add    esp,0xc
c001364c:	c3                   	ret    
c001364d:	90                   	nop

c001364e <Buzzer::~Buzzer()>:
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	ba 34 a2 02 c0       	mov    edx,0xc002a234
c0013656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365a:	89 10                	mov    DWORD PTR [eax],edx
c001365c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	50                   	push   eax
c0013664:	e8 7b 05 00 00       	call   c0013be4 <Device::~Device()>
c0013669:	83 c4 10             	add    esp,0x10
c001366c:	90                   	nop
c001366d:	83 c4 0c             	add    esp,0xc
c0013670:	c3                   	ret    
c0013671:	90                   	nop

c0013672 <Buzzer::~Buzzer()>:
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	83 ec 0c             	sub    esp,0xc
c0013678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367c:	e8 cd ff ff ff       	call   c001364e <Buzzer::~Buzzer()>
c0013681:	83 c4 10             	add    esp,0x10
c0013684:	83 ec 08             	sub    esp,0x8
c0013687:	68 5c 01 00 00       	push   0x15c
c001368c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013690:	e8 76 f1 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013695:	83 c4 10             	add    esp,0x10
c0013698:	83 c4 0c             	add    esp,0xc
c001369b:	c3                   	ret    

c001369c <Buzzer::stop()>:
c001369c:	83 ec 14             	sub    esp,0x14
c001369f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00136a5:	6a 00                	push   0x0
c00136a7:	50                   	push   eax
c00136a8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136ab:	83 c4 1c             	add    esp,0x1c
c00136ae:	c3                   	ret    

c00136af <beepThread(void*)>:
c00136af:	53                   	push   ebx
c00136b0:	83 ec 08             	sub    esp,0x8
c00136b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136b7:	e8 00 9e 00 00       	call   c001d4bc <unlockScheduler()>
c00136bc:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136c1:	52                   	push   edx
c00136c2:	52                   	push   edx
c00136c3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136c9:	52                   	push   edx
c00136ca:	50                   	push   eax
c00136cb:	e8 3a a3 00 00       	call   c001da0a <nanoSleep(unsigned long long)>
c00136d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136d3:	e8 c4 ff ff ff       	call   c001369c <Buzzer::stop()>
c00136d8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136e0:	83 c4 18             	add    esp,0x18
c00136e3:	5b                   	pop    ebx
c00136e4:	e9 67 a2 00 00       	jmp    c001d950 <blockTask(TaskState)>
c00136e9:	90                   	nop

c00136ea <Buzzer::beep(int, int, bool)>:
c00136ea:	57                   	push   edi
c00136eb:	56                   	push   esi
c00136ec:	53                   	push   ebx
c00136ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136f9:	52                   	push   edx
c00136fa:	52                   	push   edx
c00136fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00136fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013701:	56                   	push   esi
c0013702:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013705:	83 c4 10             	add    esp,0x10
c0013708:	89 f8                	mov    eax,edi
c001370a:	84 c0                	test   al,al
c001370c:	74 1f                	je     c001372d <Buzzer::beep(int, int, bool)+0x43>
c001370e:	50                   	push   eax
c001370f:	50                   	push   eax
c0013710:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013716:	99                   	cdq    
c0013717:	52                   	push   edx
c0013718:	50                   	push   eax
c0013719:	e8 ec a2 00 00       	call   c001da0a <nanoSleep(unsigned long long)>
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013725:	5b                   	pop    ebx
c0013726:	5e                   	pop    esi
c0013727:	5f                   	pop    edi
c0013728:	e9 6f ff ff ff       	jmp    c001369c <Buzzer::stop()>
c001372d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013733:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0013738:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013740:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013744:	c7 44 24 14 af 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136af
c001374c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013750:	5b                   	pop    ebx
c0013751:	5e                   	pop    esi
c0013752:	5f                   	pop    edi
c0013753:	e9 94 9e 00 00       	jmp    c001d5ec <Process::createThread(void (*)(void*), void*, int)>

c0013758 <User::loadClockSettings(int)>:
c0013758:	53                   	push   ebx
c0013759:	83 ec 14             	sub    esp,0x14
c001375c:	68 14 01 00 00       	push   0x114
c0013761:	e8 b6 be ff ff       	call   c000f61c <malloc>
c0013766:	83 c4 0c             	add    esp,0xc
c0013769:	89 c3                	mov    ebx,eax
c001376b:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c0013771:	68 5c a2 02 c0       	push   0xc002a25c
c0013776:	50                   	push   eax
c0013777:	e8 c8 f6 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001377c:	58                   	pop    eax
c001377d:	5a                   	pop    edx
c001377e:	6a 01                	push   0x1
c0013780:	53                   	push   ebx
c0013781:	e8 22 f7 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c0013786:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013789:	e8 78 f7 ff ff       	call   c0012f06 <File::close()>
c001378e:	83 c4 10             	add    esp,0x10
c0013791:	85 db                	test   ebx,ebx
c0013793:	74 0f                	je     c00137a4 <User::loadClockSettings(int)+0x4c>
c0013795:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013797:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001379b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001379e:	83 c4 08             	add    esp,0x8
c00137a1:	5b                   	pop    ebx
c00137a2:	ff e0                	jmp    eax
c00137a4:	83 c4 08             	add    esp,0x8
c00137a7:	5b                   	pop    ebx
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <Clock::Clock(char const*)>:
c00137aa:	83 ec 0c             	sub    esp,0xc
c00137ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b8:	50                   	push   eax
c00137b9:	e8 44 07 00 00       	call   c0013f02 <Device::Device(char const*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	ba 84 a2 02 c0       	mov    edx,0xc002a284
c00137c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ca:	89 10                	mov    DWORD PTR [eax],edx
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137da:	90                   	nop
c00137db:	83 c4 0c             	add    esp,0xc
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <Clock::~Clock()>:
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	ba 84 a2 02 c0       	mov    edx,0xc002a284
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	50                   	push   eax
c00137f6:	e8 e9 03 00 00       	call   c0013be4 <Device::~Device()>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	90                   	nop
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c3                   	ret    
c0013803:	90                   	nop

c0013804 <Clock::~Clock()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	83 ec 0c             	sub    esp,0xc
c001380a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380e:	e8 cd ff ff ff       	call   c00137e0 <Clock::~Clock()>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	83 ec 08             	sub    esp,0x8
c0013819:	68 58 01 00 00       	push   0x158
c001381e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013822:	e8 e4 ef ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	83 c4 0c             	add    esp,0xc
c001382d:	c3                   	ret    

c001382e <Clock::timeInSecondsLocal()>:
c001382e:	53                   	push   ebx
c001382f:	83 ec 14             	sub    esp,0x14
c0013832:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013836:	8b 10                	mov    edx,DWORD PTR [eax]
c0013838:	50                   	push   eax
c0013839:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001383c:	0f b6 0d d0 db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dbd0
c0013843:	03 0d d4 db 02 c0    	add    ecx,DWORD PTR ds:0xc002dbd4
c0013849:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001384f:	89 cb                	mov    ebx,ecx
c0013851:	c1 fb 1f             	sar    ebx,0x1f
c0013854:	01 c8                	add    eax,ecx
c0013856:	11 da                	adc    edx,ebx
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	31 c9                	xor    ecx,ecx
c001385d:	80 3d d1 db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbd1,0x0
c0013864:	74 05                	je     c001386b <Clock::timeInSecondsLocal()+0x3d>
c0013866:	b9 08 07 00 00       	mov    ecx,0x708
c001386b:	31 db                	xor    ebx,ebx
c001386d:	01 c8                	add    eax,ecx
c001386f:	11 da                	adc    edx,ebx
c0013871:	83 c4 08             	add    esp,0x8
c0013874:	5b                   	pop    ebx
c0013875:	c3                   	ret    

c0013876 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013876:	57                   	push   edi
c0013877:	56                   	push   esi
c0013878:	53                   	push   ebx
c0013879:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001387d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013881:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013883:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013887:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001388a:	0f b6 05 d0 db 02 c0 	movzx  eax,BYTE PTR ds:0xc002dbd0
c0013891:	03 05 d4 db 02 c0    	add    eax,DWORD PTR ds:0xc002dbd4
c0013897:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001389d:	99                   	cdq    
c001389e:	29 c6                	sub    esi,eax
c00138a0:	19 d7                	sbb    edi,edx
c00138a2:	89 f0                	mov    eax,esi
c00138a4:	89 fa                	mov    edx,edi
c00138a6:	31 f6                	xor    esi,esi
c00138a8:	80 3d d1 db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbd1,0x0
c00138af:	74 05                	je     c00138b6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138b1:	be 08 07 00 00       	mov    esi,0x708
c00138b6:	31 ff                	xor    edi,edi
c00138b8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138bc:	29 f0                	sub    eax,esi
c00138be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138c2:	19 fa                	sbb    edx,edi
c00138c4:	89 d8                	mov    eax,ebx
c00138c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138ca:	5b                   	pop    ebx
c00138cb:	5e                   	pop    esi
c00138cc:	5f                   	pop    edi
c00138cd:	ff e0                	jmp    eax

c00138cf <datetimeToSeconds(datetime_t)>:
c00138cf:	55                   	push   ebp
c00138d0:	57                   	push   edi
c00138d1:	56                   	push   esi
c00138d2:	53                   	push   ebx
c00138d3:	83 ec 14             	sub    esp,0x14
c00138d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138da:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138de:	89 d3                	mov    ebx,edx
c00138e0:	0f b6 c6             	movzx  eax,dh
c00138e3:	c1 eb 10             	shr    ebx,0x10
c00138e6:	48                   	dec    eax
c00138e7:	66 81 eb 6c 07       	sub    bx,0x76c
c00138ec:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138f0:	0f b6 f5             	movzx  esi,ch
c00138f3:	89 cf                	mov    edi,ecx
c00138f5:	6b f6 3c             	imul   esi,esi,0x3c
c00138f8:	c1 ef 10             	shr    edi,0x10
c00138fb:	0f b6 c9             	movzx  ecx,cl
c00138fe:	89 f8                	mov    eax,edi
c0013900:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013906:	0f b6 f8             	movzx  edi,al
c0013909:	0f b6 d2             	movzx  edx,dl
c001390c:	01 fe                	add    esi,edi
c001390e:	01 f1                	add    ecx,esi
c0013910:	0f b7 f3             	movzx  esi,bx
c0013913:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013917:	c1 f9 1f             	sar    ecx,0x1f
c001391a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001391f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013923:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013928:	8b 0c 8d c0 a2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5d40]
c001392f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013933:	76 29                	jbe    c001395e <datetimeToSeconds(datetime_t)+0x8f>
c0013935:	f6 c3 03             	test   bl,0x3
c0013938:	75 24                	jne    c001395e <datetimeToSeconds(datetime_t)+0x8f>
c001393a:	31 d2                	xor    edx,edx
c001393c:	bf 64 00 00 00       	mov    edi,0x64
c0013941:	89 d8                	mov    eax,ebx
c0013943:	66 f7 f7             	div    di
c0013946:	66 85 d2             	test   dx,dx
c0013949:	75 12                	jne    c001395d <datetimeToSeconds(datetime_t)+0x8e>
c001394b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013951:	bf 90 01 00 00       	mov    edi,0x190
c0013956:	99                   	cdq    
c0013957:	f7 ff                	idiv   edi
c0013959:	85 d2                	test   edx,edx
c001395b:	75 01                	jne    c001395e <datetimeToSeconds(datetime_t)+0x8f>
c001395d:	41                   	inc    ecx
c001395e:	66 83 fb 46          	cmp    bx,0x46
c0013962:	76 45                	jbe    c00139a9 <datetimeToSeconds(datetime_t)+0xda>
c0013964:	bb 46 00 00 00       	mov    ebx,0x46
c0013969:	bf 64 00 00 00       	mov    edi,0x64
c001396e:	bd 90 01 00 00       	mov    ebp,0x190
c0013973:	b8 6d 01 00 00       	mov    eax,0x16d
c0013978:	f6 c3 03             	test   bl,0x3
c001397b:	75 23                	jne    c00139a0 <datetimeToSeconds(datetime_t)+0xd1>
c001397d:	89 d8                	mov    eax,ebx
c001397f:	99                   	cdq    
c0013980:	f7 ff                	idiv   edi
c0013982:	b8 6e 01 00 00       	mov    eax,0x16e
c0013987:	85 d2                	test   edx,edx
c0013989:	75 15                	jne    c00139a0 <datetimeToSeconds(datetime_t)+0xd1>
c001398b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013991:	99                   	cdq    
c0013992:	f7 fd                	idiv   ebp
c0013994:	83 fa 01             	cmp    edx,0x1
c0013997:	19 c0                	sbb    eax,eax
c0013999:	f7 d0                	not    eax
c001399b:	05 6e 01 00 00       	add    eax,0x16e
c00139a0:	01 c1                	add    ecx,eax
c00139a2:	43                   	inc    ebx
c00139a3:	39 f3                	cmp    ebx,esi
c00139a5:	7c cc                	jl     c0013973 <datetimeToSeconds(datetime_t)+0xa4>
c00139a7:	eb 35                	jmp    c00139de <datetimeToSeconds(datetime_t)+0x10f>
c00139a9:	74 33                	je     c00139de <datetimeToSeconds(datetime_t)+0x10f>
c00139ab:	b8 45 00 00 00       	mov    eax,0x45
c00139b0:	89 c2                	mov    edx,eax
c00139b2:	83 e2 03             	and    edx,0x3
c00139b5:	39 f0                	cmp    eax,esi
c00139b7:	7e 0f                	jle    c00139c8 <datetimeToSeconds(datetime_t)+0xf9>
c00139b9:	83 fa 01             	cmp    edx,0x1
c00139bc:	19 d2                	sbb    edx,edx
c00139be:	48                   	dec    eax
c00139bf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139c6:	eb e8                	jmp    c00139b0 <datetimeToSeconds(datetime_t)+0xe1>
c00139c8:	b8 6d 01 00 00       	mov    eax,0x16d
c00139cd:	85 d2                	test   edx,edx
c00139cf:	75 0b                	jne    c00139dc <datetimeToSeconds(datetime_t)+0x10d>
c00139d1:	66 83 fb 01          	cmp    bx,0x1
c00139d5:	19 c0                	sbb    eax,eax
c00139d7:	05 6e 01 00 00       	add    eax,0x16e
c00139dc:	29 c1                	sub    ecx,eax
c00139de:	b8 80 51 01 00       	mov    eax,0x15180
c00139e3:	f7 e9                	imul   ecx
c00139e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139ed:	83 c4 14             	add    esp,0x14
c00139f0:	5b                   	pop    ebx
c00139f1:	5e                   	pop    esi
c00139f2:	5f                   	pop    edi
c00139f3:	5d                   	pop    ebp
c00139f4:	c3                   	ret    
c00139f5:	90                   	nop

c00139f6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139f6:	57                   	push   edi
c00139f7:	56                   	push   esi
c00139f8:	53                   	push   ebx
c00139f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00139ff:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0a:	e8 c0 fe ff ff       	call   c00138cf <datetimeToSeconds(datetime_t)>
c0013a0f:	59                   	pop    ecx
c0013a10:	0f b6 0d d0 db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dbd0
c0013a17:	5b                   	pop    ebx
c0013a18:	03 0d d4 db 02 c0    	add    ecx,DWORD PTR ds:0xc002dbd4
c0013a1e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a24:	89 cb                	mov    ebx,ecx
c0013a26:	c1 fb 1f             	sar    ebx,0x1f
c0013a29:	29 c8                	sub    eax,ecx
c0013a2b:	19 da                	sbb    edx,ebx
c0013a2d:	31 c9                	xor    ecx,ecx
c0013a2f:	80 3d d1 db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbd1,0x0
c0013a36:	74 05                	je     c0013a3d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a38:	b9 08 07 00 00       	mov    ecx,0x708
c0013a3d:	31 db                	xor    ebx,ebx
c0013a3f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a43:	29 c8                	sub    eax,ecx
c0013a45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a49:	19 da                	sbb    edx,ebx
c0013a4b:	89 f8                	mov    eax,edi
c0013a4d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a51:	5b                   	pop    ebx
c0013a52:	5e                   	pop    esi
c0013a53:	5f                   	pop    edi
c0013a54:	ff e0                	jmp    eax

c0013a56 <secondsToDatetime(unsigned long long)>:
c0013a56:	55                   	push   ebp
c0013a57:	57                   	push   edi
c0013a58:	56                   	push   esi
c0013a59:	53                   	push   ebx
c0013a5a:	83 ec 1c             	sub    esp,0x1c
c0013a5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a65:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a69:	6a 00                	push   0x0
c0013a6b:	68 80 51 01 00       	push   0x15180
c0013a70:	55                   	push   ebp
c0013a71:	57                   	push   edi
c0013a72:	e8 95 26 01 00       	call   c002610c <__udivdi3>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a84:	6a 00                	push   0x0
c0013a86:	68 80 51 01 00       	push   0x15180
c0013a8b:	55                   	push   ebp
c0013a8c:	57                   	push   edi
c0013a8d:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a92:	e8 75 27 01 00       	call   c002620c <__umoddi3>
c0013a97:	83 c4 10             	add    esp,0x10
c0013a9a:	99                   	cdq    
c0013a9b:	f7 ff                	idiv   edi
c0013a9d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013aa2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aa5:	89 d0                	mov    eax,edx
c0013aa7:	99                   	cdq    
c0013aa8:	f7 ff                	idiv   edi
c0013aaa:	85 db                	test   ebx,ebx
c0013aac:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013aaf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013ab2:	79 11                	jns    c0013ac5 <secondsToDatetime(unsigned long long)+0x6f>
c0013ab4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ab8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013abe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ac3:	eb 07                	jmp    c0013acc <secondsToDatetime(unsigned long long)+0x76>
c0013ac5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013aca:	89 d8                	mov    eax,ebx
c0013acc:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ad1:	99                   	cdq    
c0013ad2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ad7:	f7 f9                	idiv   ecx
c0013ad9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ae2:	31 d2                	xor    edx,edx
c0013ae4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013aec:	01 c3                	add    ebx,eax
c0013aee:	89 d8                	mov    eax,ebx
c0013af0:	f7 f1                	div    ecx
c0013af2:	31 d2                	xor    edx,edx
c0013af4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013af7:	89 d8                	mov    eax,ebx
c0013af9:	f7 f7                	div    edi
c0013afb:	31 d2                	xor    edx,edx
c0013afd:	29 c1                	sub    ecx,eax
c0013aff:	89 d8                	mov    eax,ebx
c0013b01:	f7 f5                	div    ebp
c0013b03:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b08:	29 c1                	sub    ecx,eax
c0013b0a:	31 d2                	xor    edx,edx
c0013b0c:	89 c8                	mov    eax,ecx
c0013b0e:	f7 f5                	div    ebp
c0013b10:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b19:	31 d2                	xor    edx,edx
c0013b1b:	89 c8                	mov    eax,ecx
c0013b1d:	f7 f5                	div    ebp
c0013b1f:	31 d2                	xor    edx,edx
c0013b21:	01 c3                	add    ebx,eax
c0013b23:	89 c8                	mov    eax,ecx
c0013b25:	f7 f7                	div    edi
c0013b27:	bf 99 00 00 00       	mov    edi,0x99
c0013b2c:	29 c3                	sub    ebx,eax
c0013b2e:	31 d2                	xor    edx,edx
c0013b30:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b38:	29 c3                	sub    ebx,eax
c0013b3a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b3d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b40:	bb 05 00 00 00       	mov    ebx,0x5
c0013b45:	83 c1 02             	add    ecx,0x2
c0013b48:	89 c8                	mov    eax,ecx
c0013b4a:	f7 f7                	div    edi
c0013b4c:	31 d2                	xor    edx,edx
c0013b4e:	89 c7                	mov    edi,eax
c0013b50:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b56:	83 c0 02             	add    eax,0x2
c0013b59:	f7 f3                	div    ebx
c0013b5b:	89 eb                	mov    ebx,ebp
c0013b5d:	29 c3                	sub    ebx,eax
c0013b5f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b65:	88 1e                	mov    BYTE PTR [esi],bl
c0013b67:	19 c0                	sbb    eax,eax
c0013b69:	31 d2                	xor    edx,edx
c0013b6b:	83 e0 0c             	and    eax,0xc
c0013b6e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b72:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b7a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b7e:	83 f9 01             	cmp    ecx,0x1
c0013b81:	0f 96 c2             	setbe  dl
c0013b84:	41                   	inc    ecx
c0013b85:	01 d0                	add    eax,edx
c0013b87:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b8a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b8e:	83 c4 1c             	add    esp,0x1c
c0013b91:	89 f0                	mov    eax,esi
c0013b93:	5b                   	pop    ebx
c0013b94:	5e                   	pop    esi
c0013b95:	5f                   	pop    edi
c0013b96:	5d                   	pop    ebp
c0013b97:	c2 04 00             	ret    0x4

c0013b9a <Clock::timeInDatetimeLocal()>:
c0013b9a:	53                   	push   ebx
c0013b9b:	83 ec 14             	sub    esp,0x14
c0013b9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ba2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ba6:	e8 83 fc ff ff       	call   c001382e <Clock::timeInSecondsLocal()>
c0013bab:	83 c4 0c             	add    esp,0xc
c0013bae:	52                   	push   edx
c0013baf:	50                   	push   eax
c0013bb0:	53                   	push   ebx
c0013bb1:	e8 a0 fe ff ff       	call   c0013a56 <secondsToDatetime(unsigned long long)>
c0013bb6:	89 d8                	mov    eax,ebx
c0013bb8:	83 c4 14             	add    esp,0x14
c0013bbb:	5b                   	pop    ebx
c0013bbc:	c2 04 00             	ret    0x4
c0013bbf:	90                   	nop

c0013bc0 <Device::hibernate()>:
c0013bc0:	c3                   	ret    
c0013bc1:	90                   	nop

c0013bc2 <Device::wake()>:
c0013bc2:	c3                   	ret    
c0013bc3:	90                   	nop

c0013bc4 <Device::detect()>:
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <Device::disableLegacy()>:
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Device::powerSaving(PowerSavingLevel)>:
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <DriverlessDevice::close(int, int, void*)>:
c0013bca:	31 c0                	xor    eax,eax
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <DriverlessDevice::detect()>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <DriverlessDevice::open(int, int, void*)>:
c0013bd0:	83 ec 18             	sub    esp,0x18
c0013bd3:	68 f0 a2 02 c0       	push   0xc002a2f0
c0013bd8:	e8 82 62 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0013bdd:	83 c8 ff             	or     eax,0xffffffff
c0013be0:	83 c4 1c             	add    esp,0x1c
c0013be3:	c3                   	ret    

c0013be4 <Device::~Device()>:
c0013be4:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c0013be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bed:	89 10                	mov    DWORD PTR [eax],edx
c0013bef:	90                   	nop
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Device::~Device()>:
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bf9:	e8 e6 ff ff ff       	call   c0013be4 <Device::~Device()>
c0013bfe:	83 c4 04             	add    esp,0x4
c0013c01:	83 ec 08             	sub    esp,0x8
c0013c04:	68 58 01 00 00       	push   0x158
c0013c09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0d:	e8 f9 eb ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	83 c4 0c             	add    esp,0xc
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Device::findAndLoadDriver()>:
c0013c1a:	c3                   	ret    
c0013c1b:	90                   	nop

c0013c1c <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c1c:	57                   	push   edi
c0013c1d:	b9 09 00 00 00       	mov    ecx,0x9
c0013c22:	56                   	push   esi
c0013c23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c27:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c2b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c35:	81 c7 18 01 00 00    	add    edi,0x118
c0013c3b:	fc                   	cld    
c0013c3c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c3e:	5e                   	pop    esi
c0013c3f:	5f                   	pop    edi
c0013c40:	c3                   	ret    
c0013c41:	90                   	nop

c0013c42 <Device::preOpenACPI(void*, char*, char*)>:
c0013c42:	56                   	push   esi
c0013c43:	53                   	push   ebx
c0013c44:	83 ec 08             	sub    esp,0x8
c0013c47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c4b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c4f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c63:	6a 1e                	push   0x1e
c0013c65:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c6f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c75:	50                   	push   eax
c0013c76:	e8 25 ca fe ff       	call   c00006a0 <memcpy>
c0013c7b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c7f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c83:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c8b:	83 c4 14             	add    esp,0x14
c0013c8e:	5b                   	pop    ebx
c0013c8f:	5e                   	pop    esi
c0013c90:	e9 0b ca fe ff       	jmp    c00006a0 <memcpy>
c0013c95:	90                   	nop

c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c9a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c9f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ca6:	75 0b                	jne    c0013cb3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013caa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb1:	eb 1e                	jmp    c0013cd1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cb3:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0013cb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cbe:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cc4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cc6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd1:	ff e0                	jmp    eax
c0013cd3:	90                   	nop

c0013cd4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cdd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ce4:	75 0b                	jne    c0013cf1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cec:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cef:	eb 1e                	jmp    c0013d0f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cf1:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0013cf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cfc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d0c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d0f:	ff e0                	jmp    eax
c0013d11:	90                   	nop

c0013d12 <Device::addChild(Device*)>:
c0013d12:	53                   	push   ebx
c0013d13:	83 ec 08             	sub    esp,0x8
c0013d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d1e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d24:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d2c:	85 d2                	test   edx,edx
c0013d2e:	74 04                	je     c0013d34 <Device::addChild(Device*)+0x22>
c0013d30:	89 d3                	mov    ebx,edx
c0013d32:	eb f6                	jmp    c0013d2a <Device::addChild(Device*)+0x18>
c0013d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d37:	83 ec 0c             	sub    esp,0xc
c0013d3a:	6a 08                	push   0x8
c0013d3c:	e8 db b8 ff ff       	call   c000f61c <malloc>
c0013d41:	89 03                	mov    DWORD PTR [ebx],eax
c0013d43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d50:	83 c4 18             	add    esp,0x18
c0013d53:	5b                   	pop    ebx
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <Device::removeAllChildren()>:
c0013d56:	56                   	push   esi
c0013d57:	53                   	push   ebx
c0013d58:	52                   	push   edx
c0013d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d5d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d66:	74 17                	je     c0013d7f <Device::removeAllChildren()+0x29>
c0013d68:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d6b:	85 c0                	test   eax,eax
c0013d6d:	74 0c                	je     c0013d7b <Device::removeAllChildren()+0x25>
c0013d6f:	83 ec 0c             	sub    esp,0xc
c0013d72:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d74:	50                   	push   eax
c0013d75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d7d:	eb e4                	jmp    c0013d63 <Device::removeAllChildren()+0xd>
c0013d7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d8b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d98:	58                   	pop    eax
c0013d99:	5b                   	pop    ebx
c0013d9a:	5e                   	pop    esi
c0013d9b:	c3                   	ret    

c0013d9c <Device::hibernateAll()>:
c0013d9c:	53                   	push   ebx
c0013d9d:	83 ec 14             	sub    esp,0x14
c0013da0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013da4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da6:	53                   	push   ebx
c0013da7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013daa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db6:	74 0f                	je     c0013dc7 <Device::hibernateAll()+0x2b>
c0013db8:	83 ec 0c             	sub    esp,0xc
c0013dbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dbe:	e8 d9 ff ff ff       	call   c0013d9c <Device::hibernateAll()>
c0013dc3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc5:	eb e9                	jmp    c0013db0 <Device::hibernateAll()+0x14>
c0013dc7:	83 c4 08             	add    esp,0x8
c0013dca:	5b                   	pop    ebx
c0013dcb:	c3                   	ret    

c0013dcc <Device::wakeAll()>:
c0013dcc:	53                   	push   ebx
c0013dcd:	83 ec 14             	sub    esp,0x14
c0013dd0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd6:	53                   	push   ebx
c0013dd7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de0:	83 c4 10             	add    esp,0x10
c0013de3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de6:	74 0f                	je     c0013df7 <Device::wakeAll()+0x2b>
c0013de8:	83 ec 0c             	sub    esp,0xc
c0013deb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dee:	e8 d9 ff ff ff       	call   c0013dcc <Device::wakeAll()>
c0013df3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df5:	eb e9                	jmp    c0013de0 <Device::wakeAll()+0x14>
c0013df7:	83 c4 08             	add    esp,0x8
c0013dfa:	5b                   	pop    ebx
c0013dfb:	c3                   	ret    

c0013dfc <Device::detectAll()>:
c0013dfc:	53                   	push   ebx
c0013dfd:	83 ec 14             	sub    esp,0x14
c0013e00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e06:	53                   	push   ebx
c0013e07:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e16:	74 0f                	je     c0013e27 <Device::detectAll()+0x2b>
c0013e18:	83 ec 0c             	sub    esp,0xc
c0013e1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e1e:	e8 d9 ff ff ff       	call   c0013dfc <Device::detectAll()>
c0013e23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e25:	eb e9                	jmp    c0013e10 <Device::detectAll()+0x14>
c0013e27:	83 c4 08             	add    esp,0x8
c0013e2a:	5b                   	pop    ebx
c0013e2b:	c3                   	ret    

c0013e2c <Device::disableLegacyAll()>:
c0013e2c:	53                   	push   ebx
c0013e2d:	83 ec 14             	sub    esp,0x14
c0013e30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e36:	53                   	push   ebx
c0013e37:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e40:	83 c4 10             	add    esp,0x10
c0013e43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e46:	74 0f                	je     c0013e57 <Device::disableLegacyAll()+0x2b>
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e4e:	e8 d9 ff ff ff       	call   c0013e2c <Device::disableLegacyAll()>
c0013e53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e55:	eb e9                	jmp    c0013e40 <Device::disableLegacyAll()+0x14>
c0013e57:	83 c4 08             	add    esp,0x8
c0013e5a:	5b                   	pop    ebx
c0013e5b:	c3                   	ret    

c0013e5c <Device::loadDriversForAll()>:
c0013e5c:	53                   	push   ebx
c0013e5d:	83 ec 08             	sub    esp,0x8
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e6a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e6c:	85 db                	test   ebx,ebx
c0013e6e:	74 12                	je     c0013e82 <Device::loadDriversForAll()+0x26>
c0013e70:	83 ec 0c             	sub    esp,0xc
c0013e73:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e76:	e8 e1 ff ff ff       	call   c0013e5c <Device::loadDriversForAll()>
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	89 d8                	mov    eax,ebx
c0013e80:	eb e8                	jmp    c0013e6a <Device::loadDriversForAll()+0xe>
c0013e82:	83 c4 08             	add    esp,0x8
c0013e85:	5b                   	pop    ebx
c0013e86:	c3                   	ret    
c0013e87:	90                   	nop

c0013e88 <Device::closeAll()>:
c0013e88:	53                   	push   ebx
c0013e89:	83 ec 08             	sub    esp,0x8
c0013e8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e92:	6a 00                	push   0x0
c0013e94:	6a 00                	push   0x0
c0013e96:	6a 00                	push   0x0
c0013e98:	53                   	push   ebx
c0013e99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea2:	83 c4 10             	add    esp,0x10
c0013ea5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea8:	74 0f                	je     c0013eb9 <Device::closeAll()+0x31>
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb0:	e8 d3 ff ff ff       	call   c0013e88 <Device::closeAll()>
c0013eb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb7:	eb e9                	jmp    c0013ea2 <Device::closeAll()+0x1a>
c0013eb9:	83 c4 08             	add    esp,0x8
c0013ebc:	5b                   	pop    ebx
c0013ebd:	c3                   	ret    

c0013ebe <Device::powerSavingAll(PowerSavingLevel)>:
c0013ebe:	56                   	push   esi
c0013ebf:	53                   	push   ebx
c0013ec0:	83 ec 0c             	sub    esp,0xc
c0013ec3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ec7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ecd:	56                   	push   esi
c0013ece:	53                   	push   ebx
c0013ecf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ed2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ede:	74 0f                	je     c0013eef <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee0:	52                   	push   edx
c0013ee1:	52                   	push   edx
c0013ee2:	56                   	push   esi
c0013ee3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee6:	e8 d3 ff ff ff       	call   c0013ebe <Device::powerSavingAll(PowerSavingLevel)>
c0013eeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eed:	eb e9                	jmp    c0013ed8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013eef:	58                   	pop    eax
c0013ef0:	5b                   	pop    ebx
c0013ef1:	5e                   	pop    esi
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <Device::setName(char const*)>:
c0013ef4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013efc:	e9 5a c8 fe ff       	jmp    c000075b <strcpy>
c0013f01:	90                   	nop

c0013f02 <Device::Device(char const*)>:
c0013f02:	83 ec 1c             	sub    esp,0x1c
c0013f05:	ba 18 a3 02 c0       	mov    edx,0xc002a318
c0013f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0e:	89 10                	mov    DWORD PTR [eax],edx
c0013f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f14:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f22:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f30:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f48:	83 ec 08             	sub    esp,0x8
c0013f4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f53:	e8 9c ff ff ff       	call   c0013ef4 <Device::setName(char const*)>
c0013f58:	83 c4 10             	add    esp,0x10
c0013f5b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f63:	83 ec 0c             	sub    esp,0xc
c0013f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6a:	e8 ad b6 ff ff       	call   c000f61c <malloc>
c0013f6f:	83 c4 10             	add    esp,0x10
c0013f72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f7f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f83:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fae:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fee:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ff8:	90                   	nop
c0013ff9:	83 c4 1c             	add    esp,0x1c
c0013ffc:	c3                   	ret    
c0013ffd:	90                   	nop

c0013ffe <Device::getName()>:
c0013ffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014002:	05 d0 00 00 00       	add    eax,0xd0
c0014007:	c3                   	ret    

c0014008 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400f:	83 ec 08             	sub    esp,0x8
c0014012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014016:	50                   	push   eax
c0014017:	e8 e6 fe ff ff       	call   c0013f02 <Device::Device(char const*)>
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c0014024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014028:	89 10                	mov    DWORD PTR [eax],edx
c001402a:	90                   	nop
c001402b:	83 c4 0c             	add    esp,0xc
c001402e:	c3                   	ret    
c001402f:	90                   	nop

c0014030 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014030:	57                   	push   edi
c0014031:	56                   	push   esi
c0014032:	53                   	push   ebx
c0014033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014037:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001403b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001403f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014045:	75 0c                	jne    c0014053 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014047:	52                   	push   edx
c0014048:	52                   	push   edx
c0014049:	53                   	push   ebx
c001404a:	56                   	push   esi
c001404b:	e8 fa 3f 01 00       	call   c002804a <LinkedList<Device>::addElement(Device*)>
c0014050:	83 c4 10             	add    esp,0x10
c0014053:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014059:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001405c:	74 12                	je     c0014070 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001405e:	50                   	push   eax
c001405f:	57                   	push   edi
c0014060:	56                   	push   esi
c0014061:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014064:	e8 c7 ff ff ff       	call   c0014030 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014069:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	eb e9                	jmp    c0014059 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014070:	5b                   	pop    ebx
c0014071:	5e                   	pop    esi
c0014072:	5f                   	pop    edi
c0014073:	c3                   	ret    

c0014074 <getDevicesOfType(DeviceType)>:
c0014074:	53                   	push   ebx
c0014075:	83 ec 14             	sub    esp,0x14
c0014078:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001407c:	53                   	push   ebx
c001407d:	e8 a4 40 01 00       	call   c0028126 <LinkedList<Device>::LinkedList()>
c0014082:	83 c4 0c             	add    esp,0xc
c0014085:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014089:	53                   	push   ebx
c001408a:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c0014090:	e8 9b ff ff ff       	call   c0014030 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014095:	89 d8                	mov    eax,ebx
c0014097:	83 c4 18             	add    esp,0x18
c001409a:	5b                   	pop    ebx
c001409b:	c2 04 00             	ret    0x4

c001409e <HardDiskController::HardDiskController(char const*)>:
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a5:	83 ec 08             	sub    esp,0x8
c00140a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ac:	50                   	push   eax
c00140ad:	e8 50 fe ff ff       	call   c0013f02 <Device::Device(char const*)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	ba 70 a3 02 c0       	mov    edx,0xc002a370
c00140ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140be:	89 10                	mov    DWORD PTR [eax],edx
c00140c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c4:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140ce:	90                   	nop
c00140cf:	83 c4 0c             	add    esp,0xc
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <HardDiskController::~HardDiskController()>:
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	ba 70 a3 02 c0       	mov    edx,0xc002a370
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	89 10                	mov    DWORD PTR [eax],edx
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	83 ec 0c             	sub    esp,0xc
c00140e9:	50                   	push   eax
c00140ea:	e8 f5 fa ff ff       	call   c0013be4 <Device::~Device()>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	90                   	nop
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <HardDiskController::~HardDiskController()>:
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	83 ec 0c             	sub    esp,0xc
c00140fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014102:	e8 cd ff ff ff       	call   c00140d4 <HardDiskController::~HardDiskController()>
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	83 ec 08             	sub    esp,0x8
c001410d:	68 58 01 00 00       	push   0x158
c0014112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014116:	e8 f0 e6 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	83 c4 0c             	add    esp,0xc
c0014121:	c3                   	ret    

c0014122 <PhysicalDisk::eject()>:
c0014122:	83 ec 18             	sub    esp,0x18
c0014125:	68 94 a3 02 c0       	push   0xc002a394
c001412a:	e8 bc e7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001412f:	83 c8 ff             	or     eax,0xffffffff
c0014132:	83 c4 1c             	add    esp,0x1c
c0014135:	c3                   	ret    

c0014136 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001413d:	83 ec 08             	sub    esp,0x8
c0014140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014144:	50                   	push   eax
c0014145:	e8 b8 fd ff ff       	call   c0013f02 <Device::Device(char const*)>
c001414a:	83 c4 10             	add    esp,0x10
c001414d:	ba c4 a3 02 c0       	mov    edx,0xc002a3c4
c0014152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014156:	89 10                	mov    DWORD PTR [eax],edx
c0014158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014167:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001416e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014172:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001417c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014184:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001418a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014198:	90                   	nop
c0014199:	83 c4 0c             	add    esp,0xc
c001419c:	c3                   	ret    
c001419d:	90                   	nop

c001419e <PhysicalDisk::startCache()>:
c001419e:	56                   	push   esi
c001419f:	53                   	push   ebx
c00141a0:	83 ec 10             	sub    esp,0x10
c00141a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141a7:	6a 44                	push   0x44
c00141a9:	e8 6e b4 ff ff       	call   c000f61c <malloc>
c00141ae:	89 c6                	mov    esi,eax
c00141b0:	58                   	pop    eax
c00141b1:	5a                   	pop    edx
c00141b2:	53                   	push   ebx
c00141b3:	56                   	push   esi
c00141b4:	e8 d5 26 00 00       	call   c001688e <VCache::VCache(PhysicalDisk*)>
c00141b9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141bf:	83 c4 14             	add    esp,0x14
c00141c2:	5b                   	pop    ebx
c00141c3:	5e                   	pop    esi
c00141c4:	c3                   	ret    
c00141c5:	90                   	nop

c00141c6 <PhysicalDisk::~PhysicalDisk()>:
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	ba c4 a3 02 c0       	mov    edx,0xc002a3c4
c00141ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d2:	89 10                	mov    DWORD PTR [eax],edx
c00141d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	50                   	push   eax
c00141dc:	e8 03 fa ff ff       	call   c0013be4 <Device::~Device()>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	90                   	nop
c00141e5:	83 c4 0c             	add    esp,0xc
c00141e8:	c3                   	ret    
c00141e9:	90                   	nop

c00141ea <PhysicalDisk::~PhysicalDisk()>:
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	83 ec 0c             	sub    esp,0xc
c00141f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f4:	e8 cd ff ff ff       	call   c00141c6 <PhysicalDisk::~PhysicalDisk()>
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	83 ec 08             	sub    esp,0x8
c00141ff:	68 6c 01 00 00       	push   0x16c
c0014204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014208:	e8 fe e5 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	83 c4 0c             	add    esp,0xc
c0014213:	c3                   	ret    

c0014214 <FPU::FPU(char const*)>:
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421b:	83 ec 08             	sub    esp,0x8
c001421e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014222:	50                   	push   eax
c0014223:	e8 da fc ff ff       	call   c0013f02 <Device::Device(char const*)>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	ba 08 a4 02 c0       	mov    edx,0xc002a408
c0014230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014234:	89 10                	mov    DWORD PTR [eax],edx
c0014236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014244:	90                   	nop
c0014245:	83 c4 0c             	add    esp,0xc
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <FPU::~FPU()>:
c001424a:	83 ec 0c             	sub    esp,0xc
c001424d:	ba 08 a4 02 c0       	mov    edx,0xc002a408
c0014252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014256:	89 10                	mov    DWORD PTR [eax],edx
c0014258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425c:	83 ec 0c             	sub    esp,0xc
c001425f:	50                   	push   eax
c0014260:	e8 7f f9 ff ff       	call   c0013be4 <Device::~Device()>
c0014265:	83 c4 10             	add    esp,0x10
c0014268:	90                   	nop
c0014269:	83 c4 0c             	add    esp,0xc
c001426c:	c3                   	ret    
c001426d:	90                   	nop

c001426e <FPU::~FPU()>:
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	83 ec 0c             	sub    esp,0xc
c0014274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014278:	e8 cd ff ff ff       	call   c001424a <FPU::~FPU()>
c001427d:	83 c4 10             	add    esp,0x10
c0014280:	83 ec 08             	sub    esp,0x8
c0014283:	68 58 01 00 00       	push   0x158
c0014288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001428c:	e8 7a e5 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0014291:	83 c4 10             	add    esp,0x10
c0014294:	83 c4 0c             	add    esp,0xc
c0014297:	c3                   	ret    

c0014298 <setupFPU()>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 08             	sub    esp,0x8
c001429c:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c00142a2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142a9:	74 19                	je     c00142c4 <setupFPU()+0x2c>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	68 58 01 00 00       	push   0x158
c00142b3:	e8 64 b3 ff ff       	call   c000f61c <malloc>
c00142b8:	89 c3                	mov    ebx,eax
c00142ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00142bd:	e8 d2 09 01 00       	call   c0024c94 <AVX::AVX()>
c00142c2:	eb 5b                	jmp    c001431f <setupFPU()+0x87>
c00142c4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142ca:	84 c0                	test   al,al
c00142cc:	79 19                	jns    c00142e7 <setupFPU()+0x4f>
c00142ce:	83 ec 0c             	sub    esp,0xc
c00142d1:	68 58 01 00 00       	push   0x158
c00142d6:	e8 41 b3 ff ff       	call   c000f61c <malloc>
c00142db:	89 c3                	mov    ebx,eax
c00142dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e0:	e8 d5 0a 01 00       	call   c0024dba <SSE::SSE()>
c00142e5:	eb 38                	jmp    c001431f <setupFPU()+0x87>
c00142e7:	a8 20                	test   al,0x20
c00142e9:	74 19                	je     c0014304 <setupFPU()+0x6c>
c00142eb:	83 ec 0c             	sub    esp,0xc
c00142ee:	68 58 01 00 00       	push   0x158
c00142f3:	e8 24 b3 ff ff       	call   c000f61c <malloc>
c00142f8:	89 c3                	mov    ebx,eax
c00142fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00142fd:	e8 22 0a 01 00       	call   c0024d24 <MMX::MMX()>
c0014302:	eb 1b                	jmp    c001431f <setupFPU()+0x87>
c0014304:	a8 10                	test   al,0x10
c0014306:	74 1c                	je     c0014324 <setupFPU()+0x8c>
c0014308:	83 ec 0c             	sub    esp,0xc
c001430b:	68 58 01 00 00       	push   0x158
c0014310:	e8 07 b3 ff ff       	call   c000f61c <malloc>
c0014315:	89 c3                	mov    ebx,eax
c0014317:	89 04 24             	mov    DWORD PTR [esp],eax
c001431a:	e8 29 0b 01 00       	call   c0024e48 <x87::x87()>
c001431f:	83 c4 10             	add    esp,0x10
c0014322:	eb 24                	jmp    c0014348 <setupFPU()+0xb0>
c0014324:	83 e0 ef             	and    eax,0xffffffef
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014330:	68 f4 a3 02 c0       	push   0xc002a3f4
c0014335:	e8 b1 e5 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001433a:	0f 20 c0             	mov    eax,cr0
c001433d:	83 c8 04             	or     eax,0x4
c0014340:	0f 22 c0             	mov    cr0,eax
c0014343:	31 db                	xor    ebx,ebx
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	89 d8                	mov    eax,ebx
c001434a:	83 c4 08             	add    esp,0x8
c001434d:	5b                   	pop    ebx
c001434e:	c3                   	ret    
c001434f:	90                   	nop

c0014350 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014358:	c1 e0 04             	shl    eax,0x4
c001435b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001435f:	8d 50 10             	lea    edx,[eax+0x10]
c0014362:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014368:	74 08                	je     c0014372 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001436a:	83 c0 04             	add    eax,0x4
c001436d:	39 d0                	cmp    eax,edx
c001436f:	75 f1                	jne    c0014362 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014371:	c3                   	ret    
c0014372:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001437c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014386:	eb e2                	jmp    c001436a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014388 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014388:	57                   	push   edi
c0014389:	31 c0                	xor    eax,eax
c001438b:	56                   	push   esi
c001438c:	53                   	push   ebx
c001438d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014391:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014395:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014399:	89 da                	mov    edx,ebx
c001439b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001439f:	c1 e2 04             	shl    edx,0x4
c00143a2:	01 ca                	add    edx,ecx
c00143a4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143ac:	74 16                	je     c00143c4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143ae:	40                   	inc    eax
c00143af:	83 f8 04             	cmp    eax,0x4
c00143b2:	75 f0                	jne    c00143a4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143b4:	c7 44 24 10 38 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a438
c00143bc:	5b                   	pop    ebx
c00143bd:	5e                   	pop    esi
c00143be:	5f                   	pop    edi
c00143bf:	e9 9b 5a 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c00143c4:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143c7:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143ca:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143d0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143d6:	5b                   	pop    ebx
c00143d7:	5e                   	pop    esi
c00143d8:	5f                   	pop    edi
c00143d9:	c3                   	ret    

c00143da <doubleFault(regs*, void*)>:
c00143da:	55                   	push   ebp
c00143db:	89 e5                	mov    ebp,esp
c00143dd:	83 ec 08             	sub    esp,0x8
c00143e0:	83 ec 0c             	sub    esp,0xc
c00143e3:	68 73 a4 02 c0       	push   0xc002a473
c00143e8:	e8 72 5a 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00143ed:	83 c4 10             	add    esp,0x10
c00143f0:	90                   	nop
c00143f1:	c9                   	leave  
c00143f2:	c3                   	ret    
c00143f3:	90                   	nop

c00143f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143f4:	56                   	push   esi
c00143f5:	53                   	push   ebx
c00143f6:	50                   	push   eax
c00143f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143ff:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014404:	75 35                	jne    c001443b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014406:	8d 43 20             	lea    eax,[ebx+0x20]
c0014409:	31 d2                	xor    edx,edx
c001440b:	89 c1                	mov    ecx,eax
c001440d:	c1 e1 04             	shl    ecx,0x4
c0014410:	01 f1                	add    ecx,esi
c0014412:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001441a:	74 3e                	je     c001445a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001441c:	42                   	inc    edx
c001441d:	83 fa 04             	cmp    edx,0x4
c0014420:	75 f0                	jne    c0014412 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	68 b8 a4 02 c0       	push   0xc002a4b8
c001442a:	e8 30 5a 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014437:	5a                   	pop    edx
c0014438:	5b                   	pop    ebx
c0014439:	5e                   	pop    esi
c001443a:	c3                   	ret    
c001443b:	83 ec 0c             	sub    esp,0xc
c001443e:	56                   	push   esi
c001443f:	e8 ba fb ff ff       	call   c0013ffe <Device::getName()>
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001444a:	75 ba                	jne    c0014406 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001444c:	83 fb 0f             	cmp    ebx,0xf
c001444f:	7f 29                	jg     c001447a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014451:	0f b6 9b a0 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3360]
c0014458:	eb ac                	jmp    c0014406 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001445a:	8d 04 82             	lea    eax,[edx+eax*4]
c001445d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014461:	8d 04 86             	lea    eax,[esi+eax*4]
c0014464:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001446a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001446e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014474:	89 d8                	mov    eax,ebx
c0014476:	5a                   	pop    edx
c0014477:	5b                   	pop    ebx
c0014478:	5e                   	pop    esi
c0014479:	c3                   	ret    
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	68 80 a4 02 c0       	push   0xc002a480
c0014482:	e8 d8 59 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0014487:	83 c4 10             	add    esp,0x10
c001448a:	e9 77 ff ff ff       	jmp    c0014406 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001448f:	90                   	nop

c0014490 <InterruptController::clearAllHandlers(int, bool)>:
c0014490:	56                   	push   esi
c0014491:	53                   	push   ebx
c0014492:	52                   	push   edx
c0014493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014497:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001449b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144a0:	75 61                	jne    c0014503 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144a2:	8d 46 20             	lea    eax,[esi+0x20]
c00144a5:	c1 e6 04             	shl    esi,0x4
c00144a8:	c1 e0 04             	shl    eax,0x4
c00144ab:	01 de                	add    esi,ebx
c00144ad:	01 d8                	add    eax,ebx
c00144af:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144b9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144c3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144cd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144d7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144e1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144eb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144f5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144ff:	58                   	pop    eax
c0014500:	5b                   	pop    ebx
c0014501:	5e                   	pop    esi
c0014502:	c3                   	ret    
c0014503:	83 ec 0c             	sub    esp,0xc
c0014506:	53                   	push   ebx
c0014507:	e8 f2 fa ff ff       	call   c0013ffe <Device::getName()>
c001450c:	83 c4 10             	add    esp,0x10
c001450f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014512:	75 8e                	jne    c00144a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014514:	83 fe 0f             	cmp    esi,0xf
c0014517:	7f 09                	jg     c0014522 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014519:	0f b6 b6 a0 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3360]
c0014520:	eb 80                	jmp    c00144a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014522:	83 ec 0c             	sub    esp,0xc
c0014525:	68 f4 a4 02 c0       	push   0xc002a4f4
c001452a:	e8 30 59 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c001452f:	83 c4 10             	add    esp,0x10
c0014532:	e9 6b ff ff ff       	jmp    c00144a2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014537:	90                   	nop

c0014538 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014538:	56                   	push   esi
c0014539:	53                   	push   ebx
c001453a:	52                   	push   edx
c001453b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001453f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014543:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014548:	75 3a                	jne    c0014584 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001454a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001454e:	8d 50 20             	lea    edx,[eax+0x20]
c0014551:	c1 e2 04             	shl    edx,0x4
c0014554:	8d 04 16             	lea    eax,[esi+edx*1]
c0014557:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001455b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014561:	74 0b                	je     c001456e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014563:	83 c0 04             	add    eax,0x4
c0014566:	39 d0                	cmp    eax,edx
c0014568:	75 f1                	jne    c001455b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001456a:	58                   	pop    eax
c001456b:	5b                   	pop    ebx
c001456c:	5e                   	pop    esi
c001456d:	c3                   	ret    
c001456e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014578:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014582:	eb df                	jmp    c0014563 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	56                   	push   esi
c0014588:	e8 71 fa ff ff       	call   c0013ffe <Device::getName()>
c001458d:	83 c4 10             	add    esp,0x10
c0014590:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014593:	75 b5                	jne    c001454a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014595:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001459a:	7f 11                	jg     c00145ad <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001459c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a0:	0f b6 80 a0 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3360]
c00145a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145ab:	eb 9d                	jmp    c001454a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	68 f4 a4 02 c0       	push   0xc002a4f4
c00145b5:	e8 a5 58 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00145ba:	83 c4 10             	add    esp,0x10
c00145bd:	eb 8b                	jmp    c001454a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145bf <nmiHandler(regs*, void*)>:
c00145bf:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00145c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145c8:	e9 9b a7 ff ff       	jmp    c000ed68 <Computer::handleNMI()>

c00145cd <int_handler>:
c00145cd:	55                   	push   ebp
c00145ce:	57                   	push   edi
c00145cf:	56                   	push   esi
c00145d0:	53                   	push   ebx
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145d8:	80 3d a0 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305a0,0x0
c00145df:	74 0b                	je     c00145ec <int_handler+0x1f>
c00145e1:	fa                   	cli    
c00145e2:	f4                   	hlt    
c00145e3:	80 3d a0 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305a0,0x0
c00145ea:	75 f5                	jne    c00145e1 <int_handler+0x14>
c00145ec:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00145f1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145fa:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014600:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014603:	83 f8 17             	cmp    eax,0x17
c0014606:	77 13                	ja     c001461b <int_handler+0x4e>
c0014608:	83 ec 08             	sub    esp,0x8
c001460b:	8b 17                	mov    edx,DWORD PTR [edi]
c001460d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014610:	0f b6 c0             	movzx  eax,al
c0014613:	50                   	push   eax
c0014614:	57                   	push   edi
c0014615:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014618:	83 c4 10             	add    esp,0x10
c001461b:	83 c3 15             	add    ebx,0x15
c001461e:	c1 e3 04             	shl    ebx,0x4
c0014621:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014625:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001462c:	31 db                	xor    ebx,ebx
c001462e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014632:	85 c0                	test   eax,eax
c0014634:	74 13                	je     c0014649 <int_handler+0x7c>
c0014636:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014639:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001463d:	74 1c                	je     c001465b <int_handler+0x8e>
c001463f:	83 ec 08             	sub    esp,0x8
c0014642:	52                   	push   edx
c0014643:	56                   	push   esi
c0014644:	ff d0                	call   eax
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	43                   	inc    ebx
c001464a:	83 fb 04             	cmp    ebx,0x4
c001464d:	75 df                	jne    c001462e <int_handler+0x61>
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	31 c0                	xor    eax,eax
c0014654:	5b                   	pop    ebx
c0014655:	31 d2                	xor    edx,edx
c0014657:	5e                   	pop    esi
c0014658:	5f                   	pop    edi
c0014659:	5d                   	pop    ebp
c001465a:	c3                   	ret    
c001465b:	83 ec 08             	sub    esp,0x8
c001465e:	52                   	push   edx
c001465f:	56                   	push   esi
c0014660:	ff d0                	call   eax
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	83 c4 0c             	add    esp,0xc
c0014668:	5b                   	pop    ebx
c0014669:	5e                   	pop    esi
c001466a:	5f                   	pop    edi
c001466b:	5d                   	pop    ebp
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <InterruptController::InterruptController(char const*)>:
c001466e:	83 ec 1c             	sub    esp,0x1c
c0014671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014675:	83 ec 08             	sub    esp,0x8
c0014678:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001467c:	50                   	push   eax
c001467d:	e8 80 f8 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0014682:	83 c4 10             	add    esp,0x10
c0014685:	ba 90 a7 02 c0       	mov    edx,0xc002a790
c001468a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468e:	89 10                	mov    DWORD PTR [eax],edx
c0014690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014694:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001469e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146a6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146ae:	7f 5e                	jg     c001470e <InterruptController::InterruptController(char const*)+0xa0>
c00146b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146b8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146bd:	7f 49                	jg     c0014708 <InterruptController::InterruptController(char const*)+0x9a>
c00146bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146d2:	01 ca                	add    edx,ecx
c00146d4:	83 c2 54             	add    edx,0x54
c00146d7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146e7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146f2:	01 ca                	add    edx,ecx
c00146f4:	81 c2 54 04 00 00    	add    edx,0x454
c00146fa:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014702:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014706:	eb b0                	jmp    c00146b8 <InterruptController::InterruptController(char const*)+0x4a>
c0014708:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001470c:	eb 98                	jmp    c00146a6 <InterruptController::InterruptController(char const*)+0x38>
c001470e:	90                   	nop
c001470f:	83 c4 1c             	add    esp,0x1c
c0014712:	c3                   	ret    
c0014713:	90                   	nop

c0014714 <InterruptController::~InterruptController()>:
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	ba 90 a7 02 c0       	mov    edx,0xc002a790
c001471c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014720:	89 10                	mov    DWORD PTR [eax],edx
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	50                   	push   eax
c001472a:	e8 b5 f4 ff ff       	call   c0013be4 <Device::~Device()>
c001472f:	83 c4 10             	add    esp,0x10
c0014732:	90                   	nop
c0014733:	83 c4 0c             	add    esp,0xc
c0014736:	c3                   	ret    
c0014737:	90                   	nop

c0014738 <InterruptController::~InterruptController()>:
c0014738:	83 ec 0c             	sub    esp,0xc
c001473b:	83 ec 0c             	sub    esp,0xc
c001473e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014742:	e8 cd ff ff ff       	call   c0014714 <InterruptController::~InterruptController()>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	83 ec 08             	sub    esp,0x8
c001474d:	68 58 21 00 00       	push   0x2158
c0014752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014756:	e8 b0 e0 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	83 c4 0c             	add    esp,0xc
c0014761:	c3                   	ret    

c0014762 <displayDebugInfo(regs*)>:
c0014762:	55                   	push   ebp
c0014763:	57                   	push   edi
c0014764:	56                   	push   esi
c0014765:	53                   	push   ebx
c0014766:	83 ec 24             	sub    esp,0x24
c0014769:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001476d:	0f 20 c2             	mov    edx,cr0
c0014770:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014774:	0f 20 d7             	mov    edi,cr2
c0014777:	0f 20 de             	mov    esi,cr3
c001477a:	0f 20 e5             	mov    ebp,cr4
c001477d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014780:	68 2e a5 02 c0       	push   0xc002a52e
c0014785:	e8 61 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001478a:	59                   	pop    ecx
c001478b:	58                   	pop    eax
c001478c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001478f:	68 39 a5 02 c0       	push   0xc002a539
c0014794:	e8 52 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014799:	58                   	pop    eax
c001479a:	5a                   	pop    edx
c001479b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001479e:	68 44 a5 02 c0       	push   0xc002a544
c00147a3:	e8 43 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147a8:	59                   	pop    ecx
c00147a9:	58                   	pop    eax
c00147aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147ad:	68 4f a5 02 c0       	push   0xc002a54f
c00147b2:	e8 34 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147b7:	58                   	pop    eax
c00147b8:	5a                   	pop    edx
c00147b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147bc:	68 5a a5 02 c0       	push   0xc002a55a
c00147c1:	e8 25 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147c6:	59                   	pop    ecx
c00147c7:	58                   	pop    eax
c00147c8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147cb:	68 65 a5 02 c0       	push   0xc002a565
c00147d0:	e8 16 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147d5:	58                   	pop    eax
c00147d6:	5a                   	pop    edx
c00147d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147da:	68 70 a5 02 c0       	push   0xc002a570
c00147df:	e8 07 e1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147e4:	59                   	pop    ecx
c00147e5:	58                   	pop    eax
c00147e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147e9:	68 7b a5 02 c0       	push   0xc002a57b
c00147ee:	e8 f8 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00147f3:	58                   	pop    eax
c00147f4:	5a                   	pop    edx
c00147f5:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147f8:	68 86 a5 02 c0       	push   0xc002a586
c00147fd:	e8 e9 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014802:	59                   	pop    ecx
c0014803:	58                   	pop    eax
c0014804:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014807:	68 95 a5 02 c0       	push   0xc002a595
c001480c:	e8 da e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014811:	58                   	pop    eax
c0014812:	5a                   	pop    edx
c0014813:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014816:	68 a0 a5 02 c0       	push   0xc002a5a0
c001481b:	e8 cb e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014820:	59                   	pop    ecx
c0014821:	58                   	pop    eax
c0014822:	57                   	push   edi
c0014823:	68 ab a5 02 c0       	push   0xc002a5ab
c0014828:	e8 be e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001482d:	58                   	pop    eax
c001482e:	5a                   	pop    edx
c001482f:	56                   	push   esi
c0014830:	68 b6 a5 02 c0       	push   0xc002a5b6
c0014835:	e8 b1 e0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001483a:	59                   	pop    ecx
c001483b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014840:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014846:	e8 62 c2 ff ff       	call   c0010aad <setActiveTerminal(VgaText*)>
c001484b:	58                   	pop    eax
c001484c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001484f:	5a                   	pop    edx
c0014850:	c1 e0 05             	shl    eax,0x5
c0014853:	05 00 ca 02 c0       	add    eax,0xc002ca00
c0014858:	50                   	push   eax
c0014859:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001485e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014864:	e8 63 c6 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014869:	59                   	pop    ecx
c001486a:	58                   	pop    eax
c001486b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014870:	68 c1 a5 02 c0       	push   0xc002a5c1
c0014875:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487b:	e8 4c c6 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014880:	58                   	pop    eax
c0014881:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014886:	5a                   	pop    edx
c0014887:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001488a:	83 c0 0c             	add    eax,0xc
c001488d:	50                   	push   eax
c001488e:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014893:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014899:	e8 2e c6 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001489e:	59                   	pop    ecx
c001489f:	58                   	pop    eax
c00148a0:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00148a5:	68 ca a5 02 c0       	push   0xc002a5ca
c00148aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b0:	e8 17 c6 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c00148b5:	58                   	pop    eax
c00148b6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00148bb:	5a                   	pop    edx
c00148bc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c5:	e8 28 c6 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c00148ca:	59                   	pop    ecx
c00148cb:	58                   	pop    eax
c00148cc:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00148d1:	68 d2 a5 02 c0       	push   0xc002a5d2
c00148d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dc:	e8 eb c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c00148e1:	58                   	pop    eax
c00148e2:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00148e7:	5a                   	pop    edx
c00148e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f1:	e8 fc c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c00148f6:	59                   	pop    ecx
c00148f7:	58                   	pop    eax
c00148f8:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00148fd:	68 da a5 02 c0       	push   0xc002a5da
c0014902:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014908:	e8 bf c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001490d:	58                   	pop    eax
c001490e:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014913:	5a                   	pop    edx
c0014914:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014917:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491d:	e8 d0 c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014922:	59                   	pop    ecx
c0014923:	58                   	pop    eax
c0014924:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014929:	68 e2 a5 02 c0       	push   0xc002a5e2
c001492e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014934:	e8 93 c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014939:	58                   	pop    eax
c001493a:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001493f:	5a                   	pop    edx
c0014940:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014943:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014949:	e8 a4 c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001494e:	59                   	pop    ecx
c001494f:	58                   	pop    eax
c0014950:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014955:	68 ea a5 02 c0       	push   0xc002a5ea
c001495a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014960:	e8 67 c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014965:	58                   	pop    eax
c0014966:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001496b:	5a                   	pop    edx
c001496c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001496f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014975:	e8 78 c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001497a:	59                   	pop    ecx
c001497b:	58                   	pop    eax
c001497c:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014981:	68 f2 a5 02 c0       	push   0xc002a5f2
c0014986:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498c:	e8 3b c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014991:	58                   	pop    eax
c0014992:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014997:	5a                   	pop    edx
c0014998:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001499b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a1:	e8 4c c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c00149a6:	59                   	pop    ecx
c00149a7:	58                   	pop    eax
c00149a8:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00149ad:	68 fa a5 02 c0       	push   0xc002a5fa
c00149b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b8:	e8 0f c5 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c00149bd:	58                   	pop    eax
c00149be:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00149c3:	5a                   	pop    edx
c00149c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149c8:	52                   	push   edx
c00149c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cf:	e8 1e c5 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c00149d4:	59                   	pop    ecx
c00149d5:	58                   	pop    eax
c00149d6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00149db:	68 03 a6 02 c0       	push   0xc002a603
c00149e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e6:	e8 e1 c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c00149eb:	58                   	pop    eax
c00149ec:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00149f1:	5a                   	pop    edx
c00149f2:	57                   	push   edi
c00149f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f9:	e8 f4 c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c00149fe:	59                   	pop    ecx
c00149ff:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a04:	5f                   	pop    edi
c0014a05:	68 0b a6 02 c0       	push   0xc002a60b
c0014a0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a10:	e8 b7 c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014a15:	58                   	pop    eax
c0014a16:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a1b:	5a                   	pop    edx
c0014a1c:	56                   	push   esi
c0014a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a23:	e8 ca c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014a28:	59                   	pop    ecx
c0014a29:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a2e:	5e                   	pop    esi
c0014a2f:	68 13 a6 02 c0       	push   0xc002a613
c0014a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3a:	e8 8d c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014a3f:	5f                   	pop    edi
c0014a40:	58                   	pop    eax
c0014a41:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a46:	55                   	push   ebp
c0014a47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4d:	e8 a0 c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014a52:	58                   	pop    eax
c0014a53:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a58:	5a                   	pop    edx
c0014a59:	68 1b a6 02 c0       	push   0xc002a61b
c0014a5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a64:	e8 63 c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014a69:	0f 21 c0             	mov    eax,db0
c0014a6c:	59                   	pop    ecx
c0014a6d:	5e                   	pop    esi
c0014a6e:	50                   	push   eax
c0014a6f:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7a:	e8 73 c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014a7f:	5f                   	pop    edi
c0014a80:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014a85:	5d                   	pop    ebp
c0014a86:	68 24 a6 02 c0       	push   0xc002a624
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 36 c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014a96:	0f 21 c8             	mov    eax,db1
c0014a99:	5a                   	pop    edx
c0014a9a:	59                   	pop    ecx
c0014a9b:	50                   	push   eax
c0014a9c:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014aa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa7:	e8 46 c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014aac:	5e                   	pop    esi
c0014aad:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014ab2:	5f                   	pop    edi
c0014ab3:	68 2c a6 02 c0       	push   0xc002a62c
c0014ab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abe:	e8 09 c4 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014ac3:	0f 21 d0             	mov    eax,db2
c0014ac6:	5d                   	pop    ebp
c0014ac7:	5a                   	pop    edx
c0014ac8:	50                   	push   eax
c0014ac9:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014ace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad4:	e8 19 c4 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014ad9:	59                   	pop    ecx
c0014ada:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014adf:	5e                   	pop    esi
c0014ae0:	68 34 a6 02 c0       	push   0xc002a634
c0014ae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aeb:	e8 dc c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014af0:	0f 21 d8             	mov    eax,db3
c0014af3:	5f                   	pop    edi
c0014af4:	5d                   	pop    ebp
c0014af5:	50                   	push   eax
c0014af6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014afb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b01:	e8 ec c3 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014b06:	58                   	pop    eax
c0014b07:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b0c:	5a                   	pop    edx
c0014b0d:	68 3c a6 02 c0       	push   0xc002a63c
c0014b12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b18:	e8 af c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014b1d:	0f 21 f0             	mov    eax,db6
c0014b20:	59                   	pop    ecx
c0014b21:	5e                   	pop    esi
c0014b22:	50                   	push   eax
c0014b23:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2e:	e8 bf c3 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014b33:	5f                   	pop    edi
c0014b34:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b39:	5d                   	pop    ebp
c0014b3a:	68 44 a6 02 c0       	push   0xc002a644
c0014b3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b45:	e8 82 c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014b4a:	0f 21 f8             	mov    eax,db7
c0014b4d:	5a                   	pop    edx
c0014b4e:	59                   	pop    ecx
c0014b4f:	50                   	push   eax
c0014b50:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5b:	e8 92 c3 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014b60:	5e                   	pop    esi
c0014b61:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b64:	e8 8d 82 00 00       	call   c001cdf6 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	85 c0                	test   eax,eax
c0014b6e:	74 7d                	je     c0014bed <displayDebugInfo(regs*)+0x48b>
c0014b70:	89 c6                	mov    esi,eax
c0014b72:	50                   	push   eax
c0014b73:	50                   	push   eax
c0014b74:	56                   	push   esi
c0014b75:	68 4c a6 02 c0       	push   0xc002a64c
c0014b7a:	e8 6c dd ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014b7f:	5a                   	pop    edx
c0014b80:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b85:	59                   	pop    ecx
c0014b86:	68 5a a6 02 c0       	push   0xc002a65a
c0014b8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b91:	e8 36 c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014b96:	5f                   	pop    edi
c0014b97:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014b9c:	5d                   	pop    ebp
c0014b9d:	56                   	push   esi
c0014b9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba4:	e8 23 c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014ba9:	58                   	pop    eax
c0014baa:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014baf:	5a                   	pop    edx
c0014bb0:	68 66 a6 02 c0       	push   0xc002a666
c0014bb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbb:	e8 0c c3 ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0014bc0:	59                   	pop    ecx
c0014bc1:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0014bc6:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bcc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014bcf:	e8 59 82 00 00       	call   c001ce2d <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bd4:	5b                   	pop    ebx
c0014bd5:	5d                   	pop    ebp
c0014bd6:	50                   	push   eax
c0014bd7:	57                   	push   edi
c0014bd8:	e8 15 c3 ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c0014bdd:	58                   	pop    eax
c0014bde:	5a                   	pop    edx
c0014bdf:	56                   	push   esi
c0014be0:	68 72 a6 02 c0       	push   0xc002a672
c0014be5:	e8 01 dd ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014bea:	83 c4 10             	add    esp,0x10
c0014bed:	fa                   	cli    
c0014bee:	f4                   	hlt    
c0014bef:	eb fe                	jmp    c0014bef <displayDebugInfo(regs*)+0x48d>

c0014bf1 <x87EmulHandler(regs*, void*)>:
c0014bf1:	53                   	push   ebx
c0014bf2:	83 ec 14             	sub    esp,0x14
c0014bf5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bf9:	53                   	push   ebx
c0014bfa:	e8 4f a5 00 00       	call   c001f14e <Vm::x87Handler(regs*)>
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	84 c0                	test   al,al
c0014c04:	74 05                	je     c0014c0b <x87EmulHandler(regs*, void*)+0x1a>
c0014c06:	83 c4 08             	add    esp,0x8
c0014c09:	5b                   	pop    ebx
c0014c0a:	c3                   	ret    
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	68 82 a6 02 c0       	push   0xc002a682
c0014c13:	e8 d3 dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c1b:	e8 42 fb ff ff       	call   c0014762 <displayDebugInfo(regs*)>

c0014c20 <gpFault(regs*, void*)>:
c0014c20:	53                   	push   ebx
c0014c21:	83 ec 14             	sub    esp,0x14
c0014c24:	c7 05 f0 db 02 c0 cb e4 01 c0 	mov    DWORD PTR ds:0xc002dbf0,0xc001e4cb
c0014c2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c32:	53                   	push   ebx
c0014c33:	e8 93 98 00 00       	call   c001e4cb <Vm::faultHandler(regs*)>
c0014c38:	83 c4 10             	add    esp,0x10
c0014c3b:	84 c0                	test   al,al
c0014c3d:	74 05                	je     c0014c44 <gpFault(regs*, void*)+0x24>
c0014c3f:	83 c4 08             	add    esp,0x8
c0014c42:	5b                   	pop    ebx
c0014c43:	c3                   	ret    
c0014c44:	83 ec 0c             	sub    esp,0xc
c0014c47:	68 98 a6 02 c0       	push   0xc002a698
c0014c4c:	e8 9a dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c54:	e8 09 fb ff ff       	call   c0014762 <displayDebugInfo(regs*)>

c0014c59 <pgFault(regs*, void*)>:
c0014c59:	83 ec 18             	sub    esp,0x18
c0014c5c:	68 b3 a6 02 c0       	push   0xc002a6b3
c0014c61:	e8 85 dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c66:	58                   	pop    eax
c0014c67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c6b:	e8 f2 fa ff ff       	call   c0014762 <displayDebugInfo(regs*)>

c0014c70 <otherISRHandler(regs*, void*)>:
c0014c70:	53                   	push   ebx
c0014c71:	83 ec 0c             	sub    esp,0xc
c0014c74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c78:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c7b:	50                   	push   eax
c0014c7c:	50                   	push   eax
c0014c7d:	68 c0 a6 02 c0       	push   0xc002a6c0
c0014c82:	e8 64 dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014c87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c8a:	e8 d3 fa ff ff       	call   c0014762 <displayDebugInfo(regs*)>

c0014c8f <opcodeFault(regs*, void*)>:
c0014c8f:	55                   	push   ebp
c0014c90:	89 e5                	mov    ebp,esp
c0014c92:	56                   	push   esi
c0014c93:	53                   	push   ebx
c0014c94:	83 ec 40             	sub    esp,0x40
c0014c97:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0014c9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ca2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ca8:	84 c0                	test   al,al
c0014caa:	74 24                	je     c0014cd0 <opcodeFault(regs*, void*)+0x41>
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	68 e0 a6 02 c0       	push   0xc002a6e0
c0014cb4:	e8 32 dc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014cb9:	83 c4 10             	add    esp,0x10
c0014cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc2:	8d 50 19             	lea    edx,[eax+0x19]
c0014cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ccb:	e9 be 05 00 00       	jmp    c001528e <opcodeFault(regs*, void*)+0x5ff>
c0014cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cd9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014cdd:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ced:	8a 00                	mov    al,BYTE PTR [eax]
c0014cef:	3c f0                	cmp    al,0xf0
c0014cf1:	75 17                	jne    c0014d0a <opcodeFault(regs*, void*)+0x7b>
c0014cf3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cfc:	8d 50 01             	lea    edx,[eax+0x1]
c0014cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d05:	e9 da 00 00 00       	jmp    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014d0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0f:	3c f2                	cmp    al,0xf2
c0014d11:	74 09                	je     c0014d1c <opcodeFault(regs*, void*)+0x8d>
c0014d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d16:	8a 00                	mov    al,BYTE PTR [eax]
c0014d18:	3c f3                	cmp    al,0xf3
c0014d1a:	75 1b                	jne    c0014d37 <opcodeFault(regs*, void*)+0xa8>
c0014d1c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d29:	8d 50 01             	lea    edx,[eax+0x1]
c0014d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d32:	e9 ad 00 00 00       	jmp    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014d37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3c:	3c 66                	cmp    al,0x66
c0014d3e:	75 1f                	jne    c0014d5f <opcodeFault(regs*, void*)+0xd0>
c0014d40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d44:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d51:	8d 50 01             	lea    edx,[eax+0x1]
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d5a:	e9 85 00 00 00       	jmp    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014d5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d62:	8a 00                	mov    al,BYTE PTR [eax]
c0014d64:	3c 67                	cmp    al,0x67
c0014d66:	75 18                	jne    c0014d80 <opcodeFault(regs*, void*)+0xf1>
c0014d68:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d75:	8d 50 01             	lea    edx,[eax+0x1]
c0014d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7e:	eb 64                	jmp    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014d80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d83:	8a 00                	mov    al,BYTE PTR [eax]
c0014d85:	3c 2e                	cmp    al,0x2e
c0014d87:	74 09                	je     c0014d92 <opcodeFault(regs*, void*)+0x103>
c0014d89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8e:	3c 3e                	cmp    al,0x3e
c0014d90:	75 18                	jne    c0014daa <opcodeFault(regs*, void*)+0x11b>
c0014d92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da8:	eb 3a                	jmp    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014daa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dad:	8a 00                	mov    al,BYTE PTR [eax]
c0014daf:	3c 36                	cmp    al,0x36
c0014db1:	74 1b                	je     c0014dce <opcodeFault(regs*, void*)+0x13f>
c0014db3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db6:	8a 00                	mov    al,BYTE PTR [eax]
c0014db8:	3c 26                	cmp    al,0x26
c0014dba:	74 12                	je     c0014dce <opcodeFault(regs*, void*)+0x13f>
c0014dbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc1:	3c 64                	cmp    al,0x64
c0014dc3:	74 09                	je     c0014dce <opcodeFault(regs*, void*)+0x13f>
c0014dc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dca:	3c 65                	cmp    al,0x65
c0014dcc:	75 16                	jne    c0014de4 <opcodeFault(regs*, void*)+0x155>
c0014dce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dd2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de7:	8a 00                	mov    al,BYTE PTR [eax]
c0014de9:	3c 0f                	cmp    al,0xf
c0014deb:	0f 85 ad 00 00 00    	jne    c0014e9e <opcodeFault(regs*, void*)+0x20f>
c0014df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df4:	40                   	inc    eax
c0014df5:	8a 00                	mov    al,BYTE PTR [eax]
c0014df7:	3c c2                	cmp    al,0xc2
c0014df9:	74 0e                	je     c0014e09 <opcodeFault(regs*, void*)+0x17a>
c0014dfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfe:	40                   	inc    eax
c0014dff:	8a 00                	mov    al,BYTE PTR [eax]
c0014e01:	3c c3                	cmp    al,0xc3
c0014e03:	0f 85 95 00 00 00    	jne    c0014e9e <opcodeFault(regs*, void*)+0x20f>
c0014e09:	83 ec 0c             	sub    esp,0xc
c0014e0c:	68 03 a7 02 c0       	push   0xc002a703
c0014e11:	e8 d5 da ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0014e16:	83 c4 10             	add    esp,0x10
c0014e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e30:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e36:	88 10                	mov    BYTE PTR [eax],dl
c0014e38:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e3b:	50                   	push   eax
c0014e3c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e3f:	50                   	push   eax
c0014e40:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e43:	50                   	push   eax
c0014e44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e47:	e8 44 48 00 00       	call   c0019690 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e4c:	83 c4 10             	add    esp,0x10
c0014e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e55:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e58:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e5b:	01 d0                	add    eax,edx
c0014e5d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e66:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e69:	48                   	dec    eax
c0014e6a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e79:	83 ec 04             	sub    esp,0x4
c0014e7c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e7f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e82:	50                   	push   eax
c0014e83:	e8 2c b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e91:	01 c2                	add    edx,eax
c0014e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e99:	e9 f0 03 00 00       	jmp    c001528e <opcodeFault(regs*, void*)+0x5ff>
c0014e9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea3:	3c 0f                	cmp    al,0xf
c0014ea5:	0f 85 8b 01 00 00    	jne    c0015036 <opcodeFault(regs*, void*)+0x3a7>
c0014eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eae:	40                   	inc    eax
c0014eaf:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb1:	3c c7                	cmp    al,0xc7
c0014eb3:	0f 86 7d 01 00 00    	jbe    c0015036 <opcodeFault(regs*, void*)+0x3a7>
c0014eb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebc:	40                   	inc    eax
c0014ebd:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebf:	3c cf                	cmp    al,0xcf
c0014ec1:	0f 87 6f 01 00 00    	ja     c0015036 <opcodeFault(regs*, void*)+0x3a7>
c0014ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eca:	40                   	inc    eax
c0014ecb:	8a 00                	mov    al,BYTE PTR [eax]
c0014ecd:	83 c0 38             	add    eax,0x38
c0014ed0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014ed3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ed7:	75 0b                	jne    c0014ee4 <opcodeFault(regs*, void*)+0x255>
c0014ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014edf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee2:	eb 75                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014ee4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ee8:	75 0b                	jne    c0014ef5 <opcodeFault(regs*, void*)+0x266>
c0014eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ef0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ef3:	eb 64                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014ef5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ef9:	75 0b                	jne    c0014f06 <opcodeFault(regs*, void*)+0x277>
c0014efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f04:	eb 53                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f06:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f0a:	75 0b                	jne    c0014f17 <opcodeFault(regs*, void*)+0x288>
c0014f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f12:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f15:	eb 42                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f17:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f1b:	75 0b                	jne    c0014f28 <opcodeFault(regs*, void*)+0x299>
c0014f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f20:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f23:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f26:	eb 31                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f28:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f2c:	75 0b                	jne    c0014f39 <opcodeFault(regs*, void*)+0x2aa>
c0014f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f31:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f37:	eb 20                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f39:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f3d:	75 0b                	jne    c0014f4a <opcodeFault(regs*, void*)+0x2bb>
c0014f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f48:	eb 0f                	jmp    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f4a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f4e:	75 09                	jne    c0014f59 <opcodeFault(regs*, void*)+0x2ca>
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f59:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f5d:	74 10                	je     c0014f6f <opcodeFault(regs*, void*)+0x2e0>
c0014f5f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f66:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f6d:	eb 2d                	jmp    c0014f9c <opcodeFault(regs*, void*)+0x30d>
c0014f6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f72:	c1 e0 18             	shl    eax,0x18
c0014f75:	89 c2                	mov    edx,eax
c0014f77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f7a:	c1 e0 08             	shl    eax,0x8
c0014f7d:	25 00 00 ff 00       	and    eax,0xff0000
c0014f82:	09 c2                	or     edx,eax
c0014f84:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f87:	c1 e8 08             	shr    eax,0x8
c0014f8a:	25 00 ff 00 00       	and    eax,0xff00
c0014f8f:	09 c2                	or     edx,eax
c0014f91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f94:	c1 e8 18             	shr    eax,0x18
c0014f97:	09 d0                	or     eax,edx
c0014f99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f9c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fa0:	75 0b                	jne    c0014fad <opcodeFault(regs*, void*)+0x31e>
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fa8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fab:	eb 75                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0014fad:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fb1:	75 0b                	jne    c0014fbe <opcodeFault(regs*, void*)+0x32f>
c0014fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fbc:	eb 64                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0014fbe:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fc2:	75 0b                	jne    c0014fcf <opcodeFault(regs*, void*)+0x340>
c0014fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fca:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fcd:	eb 53                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0014fcf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fd3:	75 0b                	jne    c0014fe0 <opcodeFault(regs*, void*)+0x351>
c0014fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fdb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fde:	eb 42                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0014fe0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fe4:	75 0b                	jne    c0014ff1 <opcodeFault(regs*, void*)+0x362>
c0014fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fec:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014fef:	eb 31                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0014ff1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ff5:	75 0b                	jne    c0015002 <opcodeFault(regs*, void*)+0x373>
c0014ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ffd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015000:	eb 20                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0015002:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015006:	75 0b                	jne    c0015013 <opcodeFault(regs*, void*)+0x384>
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001500e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015011:	eb 0f                	jmp    c0015022 <opcodeFault(regs*, void*)+0x393>
c0015013:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015017:	75 09                	jne    c0015022 <opcodeFault(regs*, void*)+0x393>
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001501f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015025:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015028:	8d 50 02             	lea    edx,[eax+0x2]
c001502b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015031:	e9 58 02 00 00       	jmp    c001528e <opcodeFault(regs*, void*)+0x5ff>
c0015036:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015039:	8a 00                	mov    al,BYTE PTR [eax]
c001503b:	3c 0f                	cmp    al,0xf
c001503d:	0f 85 76 01 00 00    	jne    c00151b9 <opcodeFault(regs*, void*)+0x52a>
c0015043:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015046:	40                   	inc    eax
c0015047:	8a 00                	mov    al,BYTE PTR [eax]
c0015049:	3c c7                	cmp    al,0xc7
c001504b:	0f 85 68 01 00 00    	jne    c00151b9 <opcodeFault(regs*, void*)+0x52a>
c0015051:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015057:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001505a:	8d 50 01             	lea    edx,[eax+0x1]
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015063:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015066:	50                   	push   eax
c0015067:	8d 45 bb             	lea    eax,[ebp-0x45]
c001506a:	50                   	push   eax
c001506b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001506e:	50                   	push   eax
c001506f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015072:	e8 19 46 00 00       	call   c0019690 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015077:	83 c4 10             	add    esp,0x10
c001507a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001507d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015080:	83 f0 01             	xor    eax,0x1
c0015083:	84 c0                	test   al,al
c0015085:	0f 84 2e 01 00 00    	je     c00151b9 <opcodeFault(regs*, void*)+0x52a>
c001508b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001508e:	3c 01                	cmp    al,0x1
c0015090:	0f 85 23 01 00 00    	jne    c00151b9 <opcodeFault(regs*, void*)+0x52a>
c0015096:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015099:	83 f0 01             	xor    eax,0x1
c001509c:	84 c0                	test   al,al
c001509e:	0f 84 15 01 00 00    	je     c00151b9 <opcodeFault(regs*, void*)+0x52a>
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150ad:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150b4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150b7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150ba:	89 c2                	mov    edx,eax
c00150bc:	b8 00 00 00 00       	mov    eax,0x0
c00150c1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150c4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ca:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150cd:	ba 00 00 00 00       	mov    edx,0x0
c00150d2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150d5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150de:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150e1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150e8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150eb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150ee:	89 c2                	mov    edx,eax
c00150f0:	b8 00 00 00 00       	mov    eax,0x0
c00150f5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150f8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00150fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015101:	ba 00 00 00 00       	mov    edx,0x0
c0015106:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015109:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001510c:	e8 a9 83 00 00       	call   c001d4ba <lockScheduler()>
c0015111:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015114:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015117:	8b 00                	mov    eax,DWORD PTR [eax]
c0015119:	89 c1                	mov    ecx,eax
c001511b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001511e:	89 cb                	mov    ebx,ecx
c0015120:	89 d0                	mov    eax,edx
c0015122:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015125:	89 c6                	mov    esi,eax
c0015127:	89 f0                	mov    eax,esi
c0015129:	09 d8                	or     eax,ebx
c001512b:	85 c0                	test   eax,eax
c001512d:	75 21                	jne    c0015150 <opcodeFault(regs*, void*)+0x4c1>
c001512f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015132:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015135:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015138:	89 01                	mov    DWORD PTR [ecx],eax
c001513a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001513d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015140:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015143:	83 c8 40             	or     eax,0x40
c0015146:	89 c2                	mov    edx,eax
c0015148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001514e:	eb 3e                	jmp    c001518e <opcodeFault(regs*, void*)+0x4ff>
c0015150:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015153:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015156:	8b 00                	mov    eax,DWORD PTR [eax]
c0015158:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001515b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001515e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015164:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015167:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001516a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001516d:	89 d0                	mov    eax,edx
c001516f:	31 d2                	xor    edx,edx
c0015171:	89 c3                	mov    ebx,eax
c0015173:	89 d6                	mov    esi,edx
c0015175:	89 da                	mov    edx,ebx
c0015177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001517d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015180:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015183:	83 e0 bf             	and    eax,0xffffffbf
c0015186:	89 c2                	mov    edx,eax
c0015188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001518e:	e8 29 83 00 00       	call   c001d4bc <unlockScheduler()>
c0015193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015196:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015199:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001519c:	01 c2                	add    edx,eax
c001519e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a4:	83 ec 0c             	sub    esp,0xc
c00151a7:	68 12 a7 02 c0       	push   0xc002a712
c00151ac:	e8 3a d7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	e9 d5 00 00 00       	jmp    c001528e <opcodeFault(regs*, void*)+0x5ff>
c00151b9:	83 ec 0c             	sub    esp,0xc
c00151bc:	68 25 a7 02 c0       	push   0xc002a725
c00151c1:	e8 25 d7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00151c6:	83 c4 10             	add    esp,0x10
c00151c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151d5:	c1 e0 04             	shl    eax,0x4
c00151d8:	01 d0                	add    eax,edx
c00151da:	83 c0 03             	add    eax,0x3
c00151dd:	8a 00                	mov    al,BYTE PTR [eax]
c00151df:	0f b6 d8             	movzx  ebx,al
c00151e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151ee:	c1 e0 04             	shl    eax,0x4
c00151f1:	01 d0                	add    eax,edx
c00151f3:	83 c0 02             	add    eax,0x2
c00151f6:	8a 00                	mov    al,BYTE PTR [eax]
c00151f8:	0f b6 c8             	movzx  ecx,al
c00151fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015204:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015207:	c1 e0 04             	shl    eax,0x4
c001520a:	01 d0                	add    eax,edx
c001520c:	40                   	inc    eax
c001520d:	8a 00                	mov    al,BYTE PTR [eax]
c001520f:	0f b6 d0             	movzx  edx,al
c0015212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015215:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001521e:	c1 e0 04             	shl    eax,0x4
c0015221:	01 f0                	add    eax,esi
c0015223:	8a 00                	mov    al,BYTE PTR [eax]
c0015225:	0f b6 c0             	movzx  eax,al
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	53                   	push   ebx
c001522c:	51                   	push   ecx
c001522d:	52                   	push   edx
c001522e:	50                   	push   eax
c001522f:	68 38 a7 02 c0       	push   0xc002a738
c0015234:	e8 b2 d6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015239:	83 c4 20             	add    esp,0x20
c001523c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015242:	83 c0 03             	add    eax,0x3
c0015245:	8a 00                	mov    al,BYTE PTR [eax]
c0015247:	0f b6 d8             	movzx  ebx,al
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015250:	83 c0 02             	add    eax,0x2
c0015253:	8a 00                	mov    al,BYTE PTR [eax]
c0015255:	0f b6 c8             	movzx  ecx,al
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001525e:	40                   	inc    eax
c001525f:	8a 00                	mov    al,BYTE PTR [eax]
c0015261:	0f b6 d0             	movzx  edx,al
c0015264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015267:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001526a:	8a 00                	mov    al,BYTE PTR [eax]
c001526c:	0f b6 c0             	movzx  eax,al
c001526f:	83 ec 0c             	sub    esp,0xc
c0015272:	53                   	push   ebx
c0015273:	51                   	push   ecx
c0015274:	52                   	push   edx
c0015275:	50                   	push   eax
c0015276:	68 60 a7 02 c0       	push   0xc002a760
c001527b:	e8 6b d6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015280:	83 c4 20             	add    esp,0x20
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015289:	e8 d4 f4 ff ff       	call   c0014762 <displayDebugInfo(regs*)>
c001528e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015291:	5b                   	pop    ebx
c0015292:	5e                   	pop    esi
c0015293:	5d                   	pop    ebp
c0015294:	c3                   	ret    

c0015295 <displayProgramFault(char const*)>:
c0015295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001529d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152a3:	85 c0                	test   eax,eax
c00152a5:	74 15                	je     c00152bc <displayProgramFault(char const*)+0x27>
c00152a7:	83 ec 0c             	sub    esp,0xc
c00152aa:	6a 04                	push   0x4
c00152ac:	6a 0f                	push   0xf
c00152ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152b2:	50                   	push   eax
c00152b3:	e8 d6 b8 ff ff       	call   c0010b8e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152b8:	83 c4 1c             	add    esp,0x1c
c00152bb:	c3                   	ret    
c00152bc:	c3                   	ret    

c00152bd <setupInterruptController()>:
c00152bd:	55                   	push   ebp
c00152be:	89 e5                	mov    ebp,esp
c00152c0:	53                   	push   ebx
c00152c1:	83 ec 24             	sub    esp,0x24
c00152c4:	b8 00 00 00 00       	mov    eax,0x0
c00152c9:	85 c0                	test   eax,eax
c00152cb:	0f 95 c0             	setne  al
c00152ce:	84 c0                	test   al,al
c00152d0:	74 5b                	je     c001532d <setupInterruptController()+0x70>
c00152d2:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152d9:	83 ec 0c             	sub    esp,0xc
c00152dc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152df:	e8 38 a3 ff ff       	call   c000f61c <malloc>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	89 c3                	mov    ebx,eax
c00152e9:	83 ec 0c             	sub    esp,0xc
c00152ec:	53                   	push   ebx
c00152ed:	e8 94 fd 00 00       	call   c0025086 <APIC::APIC()>
c00152f2:	83 c4 10             	add    esp,0x10
c00152f5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152f8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00152fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00152fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015300:	83 c0 08             	add    eax,0x8
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	6a 00                	push   0x0
c0015307:	6a 00                	push   0x0
c0015309:	6a 00                	push   0x0
c001530b:	52                   	push   edx
c001530c:	ff d0                	call   eax
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0015316:	83 ec 08             	sub    esp,0x8
c0015319:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001531c:	50                   	push   eax
c001531d:	e8 f0 e9 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015328:	e9 52 03 00 00       	jmp    c001567f <setupInterruptController()+0x3c2>
c001532d:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0015332:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015338:	83 e0 01             	and    eax,0x1
c001533b:	84 c0                	test   al,al
c001533d:	0f 95 c0             	setne  al
c0015340:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015343:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001534a:	83 ec 0c             	sub    esp,0xc
c001534d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015350:	e8 c7 a2 ff ff       	call   c000f61c <malloc>
c0015355:	83 c4 10             	add    esp,0x10
c0015358:	89 c3                	mov    ebx,eax
c001535a:	83 ec 0c             	sub    esp,0xc
c001535d:	53                   	push   ebx
c001535e:	e8 7b 02 01 00       	call   c00255de <PIC::PIC()>
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015369:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001536c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015371:	83 c0 08             	add    eax,0x8
c0015374:	8b 00                	mov    eax,DWORD PTR [eax]
c0015376:	6a 00                	push   0x0
c0015378:	6a 00                	push   0x0
c001537a:	6a 00                	push   0x0
c001537c:	52                   	push   edx
c001537d:	ff d0                	call   eax
c001537f:	83 c4 10             	add    esp,0x10
c0015382:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015386:	74 73                	je     c00153fb <setupInterruptController()+0x13e>
c0015388:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001538b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015390:	83 c0 0c             	add    eax,0xc
c0015393:	8b 00                	mov    eax,DWORD PTR [eax]
c0015395:	6a 00                	push   0x0
c0015397:	6a 00                	push   0x0
c0015399:	6a 00                	push   0x0
c001539b:	52                   	push   edx
c001539c:	ff d0                	call   eax
c001539e:	83 c4 10             	add    esp,0x10
c00153a1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153a5:	74 15                	je     c00153bc <setupInterruptController()+0xff>
c00153a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ac:	83 c0 04             	add    eax,0x4
c00153af:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b7:	ff d0                	call   eax
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153c3:	83 ec 0c             	sub    esp,0xc
c00153c6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153c9:	e8 4e a2 ff ff       	call   c000f61c <malloc>
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	89 c3                	mov    ebx,eax
c00153d3:	83 ec 0c             	sub    esp,0xc
c00153d6:	53                   	push   ebx
c00153d7:	e8 aa fc 00 00       	call   c0025086 <APIC::APIC()>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ea:	83 c0 08             	add    eax,0x8
c00153ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ef:	6a 00                	push   0x0
c00153f1:	6a 00                	push   0x0
c00153f3:	6a 00                	push   0x0
c00153f5:	52                   	push   edx
c00153f6:	ff d0                	call   eax
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0015400:	83 ec 08             	sub    esp,0x8
c0015403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015406:	50                   	push   eax
c0015407:	e8 06 e9 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c001540c:	83 c4 10             	add    esp,0x10
c001540f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015412:	8b 00                	mov    eax,DWORD PTR [eax]
c0015414:	83 c0 24             	add    eax,0x24
c0015417:	8b 00                	mov    eax,DWORD PTR [eax]
c0015419:	6a 00                	push   0x0
c001541b:	68 70 4c 01 c0       	push   0xc0014c70
c0015420:	6a 00                	push   0x0
c0015422:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015425:	ff d0                	call   eax
c0015427:	83 c4 10             	add    esp,0x10
c001542a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542d:	8b 00                	mov    eax,DWORD PTR [eax]
c001542f:	83 c0 24             	add    eax,0x24
c0015432:	8b 00                	mov    eax,DWORD PTR [eax]
c0015434:	6a 00                	push   0x0
c0015436:	68 70 4c 01 c0       	push   0xc0014c70
c001543b:	6a 01                	push   0x1
c001543d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015440:	ff d0                	call   eax
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015448:	8b 00                	mov    eax,DWORD PTR [eax]
c001544a:	83 c0 24             	add    eax,0x24
c001544d:	8b 00                	mov    eax,DWORD PTR [eax]
c001544f:	6a 00                	push   0x0
c0015451:	68 bf 45 01 c0       	push   0xc00145bf
c0015456:	6a 02                	push   0x2
c0015458:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545b:	ff d0                	call   eax
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015463:	8b 00                	mov    eax,DWORD PTR [eax]
c0015465:	83 c0 24             	add    eax,0x24
c0015468:	8b 00                	mov    eax,DWORD PTR [eax]
c001546a:	6a 00                	push   0x0
c001546c:	68 70 4c 01 c0       	push   0xc0014c70
c0015471:	6a 03                	push   0x3
c0015473:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015476:	ff d0                	call   eax
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015480:	83 c0 24             	add    eax,0x24
c0015483:	8b 00                	mov    eax,DWORD PTR [eax]
c0015485:	6a 00                	push   0x0
c0015487:	68 70 4c 01 c0       	push   0xc0014c70
c001548c:	6a 04                	push   0x4
c001548e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015491:	ff d0                	call   eax
c0015493:	83 c4 10             	add    esp,0x10
c0015496:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015499:	8b 00                	mov    eax,DWORD PTR [eax]
c001549b:	83 c0 24             	add    eax,0x24
c001549e:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a0:	6a 00                	push   0x0
c00154a2:	68 70 4c 01 c0       	push   0xc0014c70
c00154a7:	6a 05                	push   0x5
c00154a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ac:	ff d0                	call   eax
c00154ae:	83 c4 10             	add    esp,0x10
c00154b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b6:	83 c0 24             	add    eax,0x24
c00154b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bb:	6a 00                	push   0x0
c00154bd:	68 8f 4c 01 c0       	push   0xc0014c8f
c00154c2:	6a 06                	push   0x6
c00154c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c7:	ff d0                	call   eax
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d1:	83 c0 24             	add    eax,0x24
c00154d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d6:	6a 00                	push   0x0
c00154d8:	68 f1 4b 01 c0       	push   0xc0014bf1
c00154dd:	6a 07                	push   0x7
c00154df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e2:	ff d0                	call   eax
c00154e4:	83 c4 10             	add    esp,0x10
c00154e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ec:	83 c0 24             	add    eax,0x24
c00154ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f1:	6a 00                	push   0x0
c00154f3:	68 da 43 01 c0       	push   0xc00143da
c00154f8:	6a 08                	push   0x8
c00154fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fd:	ff d0                	call   eax
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015505:	8b 00                	mov    eax,DWORD PTR [eax]
c0015507:	83 c0 24             	add    eax,0x24
c001550a:	8b 00                	mov    eax,DWORD PTR [eax]
c001550c:	6a 00                	push   0x0
c001550e:	68 70 4c 01 c0       	push   0xc0014c70
c0015513:	6a 09                	push   0x9
c0015515:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015518:	ff d0                	call   eax
c001551a:	83 c4 10             	add    esp,0x10
c001551d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015520:	8b 00                	mov    eax,DWORD PTR [eax]
c0015522:	83 c0 24             	add    eax,0x24
c0015525:	8b 00                	mov    eax,DWORD PTR [eax]
c0015527:	6a 00                	push   0x0
c0015529:	68 70 4c 01 c0       	push   0xc0014c70
c001552e:	6a 0a                	push   0xa
c0015530:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015533:	ff d0                	call   eax
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553b:	8b 00                	mov    eax,DWORD PTR [eax]
c001553d:	83 c0 24             	add    eax,0x24
c0015540:	8b 00                	mov    eax,DWORD PTR [eax]
c0015542:	6a 00                	push   0x0
c0015544:	68 70 4c 01 c0       	push   0xc0014c70
c0015549:	6a 0b                	push   0xb
c001554b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001554e:	ff d0                	call   eax
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015556:	8b 00                	mov    eax,DWORD PTR [eax]
c0015558:	83 c0 24             	add    eax,0x24
c001555b:	8b 00                	mov    eax,DWORD PTR [eax]
c001555d:	6a 00                	push   0x0
c001555f:	68 70 4c 01 c0       	push   0xc0014c70
c0015564:	6a 0c                	push   0xc
c0015566:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015569:	ff d0                	call   eax
c001556b:	83 c4 10             	add    esp,0x10
c001556e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015571:	8b 00                	mov    eax,DWORD PTR [eax]
c0015573:	83 c0 24             	add    eax,0x24
c0015576:	8b 00                	mov    eax,DWORD PTR [eax]
c0015578:	6a 00                	push   0x0
c001557a:	68 20 4c 01 c0       	push   0xc0014c20
c001557f:	6a 0d                	push   0xd
c0015581:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015584:	ff d0                	call   eax
c0015586:	83 c4 10             	add    esp,0x10
c0015589:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558c:	8b 00                	mov    eax,DWORD PTR [eax]
c001558e:	83 c0 24             	add    eax,0x24
c0015591:	8b 00                	mov    eax,DWORD PTR [eax]
c0015593:	6a 00                	push   0x0
c0015595:	68 59 4c 01 c0       	push   0xc0014c59
c001559a:	6a 0e                	push   0xe
c001559c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559f:	ff d0                	call   eax
c00155a1:	83 c4 10             	add    esp,0x10
c00155a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a9:	83 c0 24             	add    eax,0x24
c00155ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ae:	6a 00                	push   0x0
c00155b0:	68 70 4c 01 c0       	push   0xc0014c70
c00155b5:	6a 0f                	push   0xf
c00155b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ba:	ff d0                	call   eax
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c4:	83 c0 24             	add    eax,0x24
c00155c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c9:	6a 00                	push   0x0
c00155cb:	68 70 4c 01 c0       	push   0xc0014c70
c00155d0:	6a 10                	push   0x10
c00155d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d5:	ff d0                	call   eax
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155df:	83 c0 24             	add    eax,0x24
c00155e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e4:	6a 00                	push   0x0
c00155e6:	68 70 4c 01 c0       	push   0xc0014c70
c00155eb:	6a 11                	push   0x11
c00155ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f0:	ff d0                	call   eax
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fa:	83 c0 24             	add    eax,0x24
c00155fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ff:	6a 00                	push   0x0
c0015601:	68 70 4c 01 c0       	push   0xc0014c70
c0015606:	6a 12                	push   0x12
c0015608:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560b:	ff d0                	call   eax
c001560d:	83 c4 10             	add    esp,0x10
c0015610:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015613:	8b 00                	mov    eax,DWORD PTR [eax]
c0015615:	83 c0 24             	add    eax,0x24
c0015618:	8b 00                	mov    eax,DWORD PTR [eax]
c001561a:	6a 00                	push   0x0
c001561c:	68 70 4c 01 c0       	push   0xc0014c70
c0015621:	6a 13                	push   0x13
c0015623:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015626:	ff d0                	call   eax
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015630:	83 c0 24             	add    eax,0x24
c0015633:	8b 00                	mov    eax,DWORD PTR [eax]
c0015635:	6a 00                	push   0x0
c0015637:	68 70 4c 01 c0       	push   0xc0014c70
c001563c:	6a 14                	push   0x14
c001563e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015641:	ff d0                	call   eax
c0015643:	83 c4 10             	add    esp,0x10
c0015646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015649:	8b 00                	mov    eax,DWORD PTR [eax]
c001564b:	83 c0 24             	add    eax,0x24
c001564e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015650:	6a 00                	push   0x0
c0015652:	68 70 4c 01 c0       	push   0xc0014c70
c0015657:	6a 1e                	push   0x1e
c0015659:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565c:	ff d0                	call   eax
c001565e:	83 c4 10             	add    esp,0x10
c0015661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015664:	8b 00                	mov    eax,DWORD PTR [eax]
c0015666:	83 c0 24             	add    eax,0x24
c0015669:	8b 00                	mov    eax,DWORD PTR [eax]
c001566b:	6a 00                	push   0x0
c001566d:	68 b3 be 01 c0       	push   0xc001beb3
c0015672:	6a 60                	push   0x60
c0015674:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015677:	ff d0                	call   eax
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001567f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015682:	c9                   	leave  
c0015683:	c3                   	ret    

c0015684 <InterruptController::convertLegacyIRQNumber(int)>:
c0015684:	55                   	push   ebp
c0015685:	89 e5                	mov    ebp,esp
c0015687:	83 ec 08             	sub    esp,0x8
c001568a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568d:	83 ec 0c             	sub    esp,0xc
c0015690:	50                   	push   eax
c0015691:	e8 68 e9 ff ff       	call   c0013ffe <Device::getName()>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8a 00                	mov    al,BYTE PTR [eax]
c001569b:	3c 41                	cmp    al,0x41
c001569d:	0f 94 c0             	sete   al
c00156a0:	84 c0                	test   al,al
c00156a2:	74 28                	je     c00156cc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156a4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156a8:	7f 12                	jg     c00156bc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156ad:	05 a0 cc 02 c0       	add    eax,0xc002cca0
c00156b2:	8a 00                	mov    al,BYTE PTR [eax]
c00156b4:	0f b6 c0             	movzx  eax,al
c00156b7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156ba:	eb 10                	jmp    c00156cc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	68 80 a4 02 c0       	push   0xc002a480
c00156c4:	e8 96 47 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c00156c9:	83 c4 10             	add    esp,0x10
c00156cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156cf:	c9                   	leave  
c00156d0:	c3                   	ret    
c00156d1:	90                   	nop

c00156d2 <startGUI(void*)>:
c00156d2:	55                   	push   ebp
c00156d3:	89 e5                	mov    ebp,esp
c00156d5:	53                   	push   ebx
c00156d6:	83 ec 04             	sub    esp,0x4
c00156d9:	e8 de 7d 00 00       	call   c001d4bc <unlockScheduler()>
c00156de:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c00156e4:	83 ec 08             	sub    esp,0x8
c00156e7:	6a 01                	push   0x1
c00156e9:	68 d0 a7 02 c0       	push   0xc002a7d0
c00156ee:	e8 54 77 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	83 ec 08             	sub    esp,0x8
c00156f9:	53                   	push   ebx
c00156fa:	50                   	push   eax
c00156fb:	e8 56 79 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c0015709:	83 ec 08             	sub    esp,0x8
c001570c:	6a 01                	push   0x1
c001570e:	68 ea a7 02 c0       	push   0xc002a7ea
c0015713:	e8 2f 77 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c0015718:	83 c4 10             	add    esp,0x10
c001571b:	83 ec 08             	sub    esp,0x8
c001571e:	53                   	push   ebx
c001571f:	50                   	push   eax
c0015720:	e8 31 79 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c0015725:	83 c4 10             	add    esp,0x10
c0015728:	90                   	nop
c0015729:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001572c:	c9                   	leave  
c001572d:	c3                   	ret    

c001572e <startGUIVESA(void*)>:
c001572e:	55                   	push   ebp
c001572f:	89 e5                	mov    ebp,esp
c0015731:	53                   	push   ebx
c0015732:	83 ec 04             	sub    esp,0x4
c0015735:	e8 82 7d 00 00       	call   c001d4bc <unlockScheduler()>
c001573a:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c0015740:	83 ec 08             	sub    esp,0x8
c0015743:	6a 01                	push   0x1
c0015745:	68 04 a8 02 c0       	push   0xc002a804
c001574a:	e8 f8 76 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	83 ec 08             	sub    esp,0x8
c0015755:	53                   	push   ebx
c0015756:	50                   	push   eax
c0015757:	e8 fa 78 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c0015765:	83 ec 08             	sub    esp,0x8
c0015768:	6a 01                	push   0x1
c001576a:	68 ea a7 02 c0       	push   0xc002a7ea
c001576f:	e8 d3 76 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	83 ec 08             	sub    esp,0x8
c001577a:	53                   	push   ebx
c001577b:	50                   	push   eax
c001577c:	e8 d5 78 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c0015781:	83 c4 10             	add    esp,0x10
c0015784:	90                   	nop
c0015785:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015788:	c9                   	leave  
c0015789:	c3                   	ret    

c001578a <sendKeyToTerminal(unsigned char)>:
c001578a:	55                   	push   ebp
c001578b:	89 e5                	mov    ebp,esp
c001578d:	83 ec 28             	sub    esp,0x28
c0015790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015793:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015796:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c001579b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001579f:	83 ec 08             	sub    esp,0x8
c00157a2:	52                   	push   edx
c00157a3:	50                   	push   eax
c00157a4:	e8 21 b9 ff ff       	call   c00110ca <VgaText::receiveKey(unsigned char)>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157b0:	75 41                	jne    c00157f3 <sendKeyToTerminal(unsigned char)+0x69>
c00157b2:	e8 2a 7d 00 00       	call   c001d4e1 <lockStuff()>
c00157b7:	a1 00 dc 02 c0       	mov    eax,ds:0xc002dc00
c00157bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157bf:	c7 05 00 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc00,0x0
c00157c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00157cd:	74 1f                	je     c00157ee <sendKeyToTerminal(unsigned char)+0x64>
c00157cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00157d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157de:	83 ec 0c             	sub    esp,0xc
c00157e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157e4:	e8 e9 82 00 00       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	eb db                	jmp    c00157c9 <sendKeyToTerminal(unsigned char)+0x3f>
c00157ee:	e8 88 80 00 00       	call   c001d87b <unlockStuff()>
c00157f3:	90                   	nop
c00157f4:	c9                   	leave  
c00157f5:	c3                   	ret    

c00157f6 <sendKeyboardToken(KeyboardToken)>:
c00157f6:	55                   	push   ebp
c00157f7:	89 e5                	mov    ebp,esp
c00157f9:	83 ec 18             	sub    esp,0x18
c00157fc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	0f b7 c0             	movzx  eax,ax
c0015805:	83 f2 01             	xor    edx,0x1
c0015808:	88 90 20 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd23e0],dl
c001580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015811:	66 3d 03 02          	cmp    ax,0x203
c0015815:	75 07                	jne    c001581e <sendKeyboardToken(KeyboardToken)+0x28>
c0015817:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c001581c:	84 c0                	test   al,al
c001581e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015822:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015825:	a0 28 e0 02 c0       	mov    al,ds:0xc002e028
c001582a:	38 c2                	cmp    dl,al
c001582c:	74 1c                	je     c001584a <sendKeyboardToken(KeyboardToken)+0x54>
c001582e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015831:	a2 28 e0 02 c0       	mov    ds:0xc002e028,al
c0015836:	a0 28 e0 02 c0       	mov    al,ds:0xc002e028
c001583b:	0f b6 c0             	movzx  eax,al
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	50                   	push   eax
c0015842:	e8 e3 aa ff ff       	call   c001032a <setTerminalScrollLock(bool)>
c0015847:	83 c4 10             	add    esp,0x10
c001584a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001584d:	84 c0                	test   al,al
c001584f:	0f 84 ae 00 00 00    	je     c0015903 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	66 3d 10 03          	cmp    ax,0x310
c001585c:	75 06                	jne    c0015864 <sendKeyboardToken(KeyboardToken)+0x6e>
c001585e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015867:	66 3d 11 03          	cmp    ax,0x311
c001586b:	75 06                	jne    c0015873 <sendKeyboardToken(KeyboardToken)+0x7d>
c001586d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015876:	66 3d 12 03          	cmp    ax,0x312
c001587a:	75 06                	jne    c0015882 <sendKeyboardToken(KeyboardToken)+0x8c>
c001587c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	66 3d 13 03          	cmp    ax,0x313
c0015889:	75 06                	jne    c0015891 <sendKeyboardToken(KeyboardToken)+0x9b>
c001588b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015894:	66 3d 14 03          	cmp    ax,0x314
c0015898:	75 06                	jne    c00158a0 <sendKeyboardToken(KeyboardToken)+0xaa>
c001589a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a3:	66 3d 15 03          	cmp    ax,0x315
c00158a7:	75 06                	jne    c00158af <sendKeyboardToken(KeyboardToken)+0xb9>
c00158a9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b2:	66 3d 16 03          	cmp    ax,0x316
c00158b6:	75 06                	jne    c00158be <sendKeyboardToken(KeyboardToken)+0xc8>
c00158b8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c1:	66 3d 17 03          	cmp    ax,0x317
c00158c5:	75 06                	jne    c00158cd <sendKeyboardToken(KeyboardToken)+0xd7>
c00158c7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d0:	66 3d 18 03          	cmp    ax,0x318
c00158d4:	75 06                	jne    c00158dc <sendKeyboardToken(KeyboardToken)+0xe6>
c00158d6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	66 3d 19 03          	cmp    ax,0x319
c00158e3:	75 06                	jne    c00158eb <sendKeyboardToken(KeyboardToken)+0xf5>
c00158e5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ee:	66 3d 1a 03          	cmp    ax,0x31a
c00158f2:	0f 85 c9 00 00 00    	jne    c00159c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158f8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158fe:	e9 be 00 00 00       	jmp    c00159c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	66 3d 10 03          	cmp    ax,0x310
c001590a:	75 0a                	jne    c0015916 <sendKeyboardToken(KeyboardToken)+0x120>
c001590c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015912:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	66 3d 11 03          	cmp    ax,0x311
c001591d:	75 0a                	jne    c0015929 <sendKeyboardToken(KeyboardToken)+0x133>
c001591f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015925:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592c:	66 3d 12 03          	cmp    ax,0x312
c0015930:	75 0a                	jne    c001593c <sendKeyboardToken(KeyboardToken)+0x146>
c0015932:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015938:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001593c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593f:	66 3d 13 03          	cmp    ax,0x313
c0015943:	75 0a                	jne    c001594f <sendKeyboardToken(KeyboardToken)+0x159>
c0015945:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001594b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001594f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015952:	66 3d 14 03          	cmp    ax,0x314
c0015956:	75 0a                	jne    c0015962 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015958:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001595e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015965:	66 3d 15 03          	cmp    ax,0x315
c0015969:	75 0a                	jne    c0015975 <sendKeyboardToken(KeyboardToken)+0x17f>
c001596b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015971:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015978:	66 3d 16 03          	cmp    ax,0x316
c001597c:	75 0a                	jne    c0015988 <sendKeyboardToken(KeyboardToken)+0x192>
c001597e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015984:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598b:	66 3d 17 03          	cmp    ax,0x317
c001598f:	75 0a                	jne    c001599b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015991:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015997:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599e:	66 3d 18 03          	cmp    ax,0x318
c00159a2:	75 0a                	jne    c00159ae <sendKeyboardToken(KeyboardToken)+0x1b8>
c00159a4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b1:	66 3d 19 03          	cmp    ax,0x319
c00159b5:	75 0a                	jne    c00159c1 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00159b7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c4:	66 3d 00 02          	cmp    ax,0x200
c00159c8:	75 2c                	jne    c00159f6 <sendKeyboardToken(KeyboardToken)+0x200>
c00159ca:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c00159cf:	83 f0 01             	xor    eax,0x1
c00159d2:	84 c0                	test   al,al
c00159d4:	74 20                	je     c00159f6 <sendKeyboardToken(KeyboardToken)+0x200>
c00159d6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c00159db:	6a 01                	push   0x1
c00159dd:	6a 00                	push   0x0
c00159df:	68 d2 56 01 c0       	push   0xc00156d2
c00159e4:	50                   	push   eax
c00159e5:	e8 02 7c 00 00       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	c6 05 20 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e020,0x1
c00159f4:	eb 33                	jmp    c0015a29 <sendKeyboardToken(KeyboardToken)+0x233>
c00159f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f9:	66 3d 01 02          	cmp    ax,0x201
c00159fd:	75 2a                	jne    c0015a29 <sendKeyboardToken(KeyboardToken)+0x233>
c00159ff:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c0015a04:	83 f0 01             	xor    eax,0x1
c0015a07:	84 c0                	test   al,al
c0015a09:	74 1e                	je     c0015a29 <sendKeyboardToken(KeyboardToken)+0x233>
c0015a0b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0015a10:	6a 01                	push   0x1
c0015a12:	6a 00                	push   0x0
c0015a14:	68 2e 57 01 c0       	push   0xc001572e
c0015a19:	50                   	push   eax
c0015a1a:	e8 cd 7b 00 00       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	c6 05 20 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e020,0x1
c0015a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2c:	66 3d 1d 03          	cmp    ax,0x31d
c0015a30:	75 06                	jne    c0015a38 <sendKeyboardToken(KeyboardToken)+0x242>
c0015a32:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3b:	66 3d 1c 03          	cmp    ax,0x31c
c0015a3f:	75 06                	jne    c0015a47 <sendKeyboardToken(KeyboardToken)+0x251>
c0015a41:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4a:	66 3d 1b 03          	cmp    ax,0x31b
c0015a4e:	75 06                	jne    c0015a56 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a50:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a59:	66 3d 1e 03          	cmp    ax,0x31e
c0015a5d:	75 06                	jne    c0015a65 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a5f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a68:	66 3d 1f 03          	cmp    ax,0x31f
c0015a6c:	75 06                	jne    c0015a74 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a6e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a77:	66 3d 1a 03          	cmp    ax,0x31a
c0015a7b:	75 06                	jne    c0015a83 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a7d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a83:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a87:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a8a:	83 f0 01             	xor    eax,0x1
c0015a8d:	84 c0                	test   al,al
c0015a8f:	74 77                	je     c0015b08 <sendKeyboardToken(KeyboardToken)+0x312>
c0015a91:	a0 21 dd 02 c0       	mov    al,ds:0xc002dd21
c0015a96:	84 c0                	test   al,al
c0015a98:	74 41                	je     c0015adb <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015a9a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a9e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015aa2:	74 2b                	je     c0015acf <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015aa4:	8b 15 24 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e024
c0015aaa:	89 d0                	mov    eax,edx
c0015aac:	c1 e0 02             	shl    eax,0x2
c0015aaf:	01 d0                	add    eax,edx
c0015ab1:	01 c0                	add    eax,eax
c0015ab3:	a3 24 e0 02 c0       	mov    ds:0xc002e024,eax
c0015ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abb:	0f b7 c0             	movzx  eax,ax
c0015abe:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ac1:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015ac6:	01 d0                	add    eax,edx
c0015ac8:	a3 24 e0 02 c0       	mov    ds:0xc002e024,eax
c0015acd:	eb 6d                	jmp    c0015b3c <sendKeyboardToken(KeyboardToken)+0x346>
c0015acf:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015ad9:	eb 61                	jmp    c0015b3c <sendKeyboardToken(KeyboardToken)+0x346>
c0015adb:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015ae0:	85 c0                	test   eax,eax
c0015ae2:	74 18                	je     c0015afc <sendKeyboardToken(KeyboardToken)+0x306>
c0015ae4:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015ae9:	0f b6 c0             	movzx  eax,al
c0015aec:	83 ec 0c             	sub    esp,0xc
c0015aef:	50                   	push   eax
c0015af0:	e8 95 fc ff ff       	call   c001578a <sendKeyToTerminal(unsigned char)>
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015afc:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015b06:	eb 34                	jmp    c0015b3c <sendKeyboardToken(KeyboardToken)+0x346>
c0015b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0b:	66 3d 01 01          	cmp    ax,0x101
c0015b0f:	75 2b                	jne    c0015b3c <sendKeyboardToken(KeyboardToken)+0x346>
c0015b11:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015b16:	85 c0                	test   eax,eax
c0015b18:	74 18                	je     c0015b32 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015b1a:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015b1f:	0f b6 c0             	movzx  eax,al
c0015b22:	83 ec 0c             	sub    esp,0xc
c0015b25:	50                   	push   eax
c0015b26:	e8 5f fc ff ff       	call   c001578a <sendKeyToTerminal(unsigned char)>
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b32:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015b3c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b3f:	83 f0 01             	xor    eax,0x1
c0015b42:	84 c0                	test   al,al
c0015b44:	74 4c                	je     c0015b92 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b46:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b49:	83 f0 01             	xor    eax,0x1
c0015b4c:	84 c0                	test   al,al
c0015b4e:	74 42                	je     c0015b92 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b50:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c0015b55:	83 f0 01             	xor    eax,0x1
c0015b58:	84 c0                	test   al,al
c0015b5a:	74 36                	je     c0015b92 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5f:	66 83 f8 1f          	cmp    ax,0x1f
c0015b63:	76 09                	jbe    c0015b6e <sendKeyboardToken(KeyboardToken)+0x378>
c0015b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b68:	66 83 f8 7e          	cmp    ax,0x7e
c0015b6c:	76 12                	jbe    c0015b80 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b71:	66 83 f8 0a          	cmp    ax,0xa
c0015b75:	74 09                	je     c0015b80 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7a:	66 83 f8 08          	cmp    ax,0x8
c0015b7e:	75 12                	jne    c0015b92 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	0f b6 c0             	movzx  eax,al
c0015b86:	83 ec 0c             	sub    esp,0xc
c0015b89:	50                   	push   eax
c0015b8a:	e8 fb fb ff ff       	call   c001578a <sendKeyToTerminal(unsigned char)>
c0015b8f:	83 c4 10             	add    esp,0x10
c0015b92:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b95:	83 f0 01             	xor    eax,0x1
c0015b98:	84 c0                	test   al,al
c0015b9a:	74 4f                	je     c0015beb <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b9c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b9f:	83 f0 01             	xor    eax,0x1
c0015ba2:	84 c0                	test   al,al
c0015ba4:	74 45                	je     c0015beb <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ba6:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c0015bab:	84 c0                	test   al,al
c0015bad:	74 3c                	je     c0015beb <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb2:	66 83 f8 3f          	cmp    ax,0x3f
c0015bb6:	76 33                	jbe    c0015beb <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbb:	66 83 f8 7f          	cmp    ax,0x7f
c0015bbf:	77 2a                	ja     c0015beb <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc4:	88 c2                	mov    dl,al
c0015bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc9:	66 83 f8 5f          	cmp    ax,0x5f
c0015bcd:	76 04                	jbe    c0015bd3 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015bcf:	b0 20                	mov    al,0x20
c0015bd1:	eb 02                	jmp    c0015bd5 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015bd3:	b0 00                	mov    al,0x0
c0015bd5:	29 c2                	sub    edx,eax
c0015bd7:	88 d0                	mov    al,dl
c0015bd9:	83 e8 40             	sub    eax,0x40
c0015bdc:	0f b6 c0             	movzx  eax,al
c0015bdf:	83 ec 0c             	sub    esp,0xc
c0015be2:	50                   	push   eax
c0015be3:	e8 a2 fb ff ff       	call   c001578a <sendKeyToTerminal(unsigned char)>
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bee:	66 3d 00 03          	cmp    ax,0x300
c0015bf2:	75 0f                	jne    c0015c03 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bf4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bf7:	83 f0 01             	xor    eax,0x1
c0015bfa:	84 c0                	test   al,al
c0015bfc:	74 05                	je     c0015c03 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bfe:	e8 5c af ff ff       	call   c0010b5f <doTerminalCycle()>
c0015c03:	90                   	nop
c0015c04:	c9                   	leave  
c0015c05:	c3                   	ret    

c0015c06 <clearInternalKeybuffer(VgaText*)>:
c0015c06:	55                   	push   ebp
c0015c07:	89 e5                	mov    ebp,esp
c0015c09:	83 ec 08             	sub    esp,0x8
c0015c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0f:	05 34 11 00 00       	add    eax,0x1134
c0015c14:	83 ec 0c             	sub    esp,0xc
c0015c17:	50                   	push   eax
c0015c18:	e8 bc aa fe ff       	call   c00006d9 <strlen>
c0015c1d:	83 c4 10             	add    esp,0x10
c0015c20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c23:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c29:	83 ec 04             	sub    esp,0x4
c0015c2c:	50                   	push   eax
c0015c2d:	6a 00                	push   0x0
c0015c2f:	52                   	push   edx
c0015c30:	e8 87 aa fe ff       	call   c00006bc <memset>
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	90                   	nop
c0015c39:	c9                   	leave  
c0015c3a:	c3                   	ret    

c0015c3b <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c3b:	55                   	push   ebp
c0015c3c:	89 e5                	mov    ebp,esp
c0015c3e:	83 ec 18             	sub    esp,0x18
c0015c41:	fb                   	sti    
c0015c42:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c49:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c4d:	0f 84 8a 00 00 00    	je     c0015cdd <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c56:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c5c:	84 c0                	test   al,al
c0015c5e:	75 11                	jne    c0015c71 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c60:	e8 55 78 00 00       	call   c001d4ba <lockScheduler()>
c0015c65:	e8 8c 7b 00 00       	call   c001d7f6 <schedule()>
c0015c6a:	e8 4d 78 00 00       	call   c001d4bc <unlockScheduler()>
c0015c6f:	eb e2                	jmp    c0015c53 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c74:	8d 50 01             	lea    edx,[eax+0x1]
c0015c77:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c7d:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c83:	88 10                	mov    BYTE PTR [eax],dl
c0015c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c88:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c8e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c94:	05 34 11 00 00       	add    eax,0x1134
c0015c99:	83 ec 0c             	sub    esp,0xc
c0015c9c:	50                   	push   eax
c0015c9d:	e8 37 aa fe ff       	call   c00006d9 <strlen>
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ca8:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cae:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015cb1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cb4:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cba:	83 ec 04             	sub    esp,0x4
c0015cbd:	50                   	push   eax
c0015cbe:	51                   	push   ecx
c0015cbf:	52                   	push   edx
c0015cc0:	e8 a3 a9 fe ff       	call   c0000668 <memmove>
c0015cc5:	83 c4 10             	add    esp,0x10
c0015cc8:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015ccb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015cce:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015cd2:	0f 85 71 ff ff ff    	jne    c0015c49 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015cd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdb:	eb 03                	jmp    c0015ce0 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015cdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce0:	c9                   	leave  
c0015ce1:	c3                   	ret    

c0015ce2 <Keyboard::Keyboard(char const*)>:
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ce9:	83 ec 08             	sub    esp,0x8
c0015cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf0:	50                   	push   eax
c0015cf1:	e8 0c e2 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	ba 28 a8 02 c0       	mov    edx,0xc002a828
c0015cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d02:	89 10                	mov    DWORD PTR [eax],edx
c0015d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d08:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d12:	c6 05 04 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc04,0x1
c0015d19:	90                   	nop
c0015d1a:	83 c4 0c             	add    esp,0xc
c0015d1d:	c3                   	ret    

c0015d1e <Keyboard::~Keyboard()>:
c0015d1e:	83 ec 0c             	sub    esp,0xc
c0015d21:	ba 28 a8 02 c0       	mov    edx,0xc002a828
c0015d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d2a:	89 10                	mov    DWORD PTR [eax],edx
c0015d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	50                   	push   eax
c0015d34:	e8 ab de ff ff       	call   c0013be4 <Device::~Device()>
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	90                   	nop
c0015d3d:	83 c4 0c             	add    esp,0xc
c0015d40:	c3                   	ret    
c0015d41:	90                   	nop

c0015d42 <Keyboard::~Keyboard()>:
c0015d42:	83 ec 0c             	sub    esp,0xc
c0015d45:	83 ec 0c             	sub    esp,0xc
c0015d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d4c:	e8 cd ff ff ff       	call   c0015d1e <Keyboard::~Keyboard()>
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	68 5c 01 00 00       	push   0x15c
c0015d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d60:	e8 a6 ca ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	83 c4 0c             	add    esp,0xc
c0015d6b:	c3                   	ret    

c0015d6c <LogicalDisk::close(int, int, void*)>:
c0015d6c:	83 c8 ff             	or     eax,0xffffffff
c0015d6f:	c3                   	ret    

c0015d70 <LogicalDisk::~LogicalDisk()>:
c0015d70:	83 ec 0c             	sub    esp,0xc
c0015d73:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0015d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7c:	89 10                	mov    DWORD PTR [eax],edx
c0015d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d82:	83 ec 0c             	sub    esp,0xc
c0015d85:	50                   	push   eax
c0015d86:	e8 59 de ff ff       	call   c0013be4 <Device::~Device()>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	90                   	nop
c0015d8f:	83 c4 0c             	add    esp,0xc
c0015d92:	c3                   	ret    
c0015d93:	90                   	nop

c0015d94 <LogicalDisk::~LogicalDisk()>:
c0015d94:	83 ec 0c             	sub    esp,0xc
c0015d97:	83 ec 0c             	sub    esp,0xc
c0015d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9e:	e8 cd ff ff ff       	call   c0015d70 <LogicalDisk::~LogicalDisk()>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	83 ec 08             	sub    esp,0x8
c0015da9:	68 74 01 00 00       	push   0x174
c0015dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db2:	e8 54 ca ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	83 c4 0c             	add    esp,0xc
c0015dbd:	c3                   	ret    

c0015dbe <LogicalDisk::open(int, int, void*)>:
c0015dbe:	83 ec 18             	sub    esp,0x18
c0015dc1:	68 54 a8 02 c0       	push   0xc002a854
c0015dc6:	e8 94 40 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0015dcb:	83 c8 ff             	or     eax,0xffffffff
c0015dce:	83 c4 1c             	add    esp,0x1c
c0015dd1:	c3                   	ret    

c0015dd2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dd2:	53                   	push   ebx
c0015dd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015dd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ddf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015de5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015deb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015df1:	77 10                	ja     c0015e03 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015df3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015df9:	89 d3                	mov    ebx,edx
c0015dfb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e01:	72 05                	jb     c0015e08 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e03:	83 c8 ff             	or     eax,0xffffffff
c0015e06:	89 c2                	mov    edx,eax
c0015e08:	5b                   	pop    ebx
c0015e09:	c3                   	ret    

c0015e0a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e0a:	56                   	push   esi
c0015e0b:	83 c8 ff             	or     eax,0xffffffff
c0015e0e:	53                   	push   ebx
c0015e0f:	89 c2                	mov    edx,eax
c0015e11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e15:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e1d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e23:	77 27                	ja     c0015e4c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e25:	89 d8                	mov    eax,ebx
c0015e27:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e2d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e38:	89 c2                	mov    edx,eax
c0015e3a:	73 10                	jae    c0015e4c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e3c:	89 c8                	mov    eax,ecx
c0015e3e:	89 da                	mov    edx,ebx
c0015e40:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e46:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e4c:	5b                   	pop    ebx
c0015e4d:	5e                   	pop    esi
c0015e4e:	c3                   	ret    
c0015e4f:	90                   	nop

c0015e50 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e50:	83 ec 1c             	sub    esp,0x1c
c0015e53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e76:	83 ec 08             	sub    esp,0x8
c0015e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e7d:	50                   	push   eax
c0015e7e:	e8 7f e0 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0015e83:	83 c4 10             	add    esp,0x10
c0015e86:	ba d8 a8 02 c0       	mov    edx,0xc002a8d8
c0015e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e8f:	89 10                	mov    DWORD PTR [eax],edx
c0015e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e95:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eab:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015eb5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015eb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ebd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ec7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ecd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ed1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ed4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ed8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ede:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015eec:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f00:	90                   	nop
c0015f01:	83 c4 1c             	add    esp,0x1c
c0015f04:	c3                   	ret    
c0015f05:	90                   	nop

c0015f06 <LogicalDisk::assignDriveLetter()>:
c0015f06:	55                   	push   ebp
c0015f07:	57                   	push   edi
c0015f08:	56                   	push   esi
c0015f09:	53                   	push   ebx
c0015f0a:	83 ec 14             	sub    esp,0x14
c0015f0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f11:	8b 3d 40 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e040
c0015f17:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f1d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f21:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f27:	8b 3d 44 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e044
c0015f2d:	3c 01                	cmp    al,0x1
c0015f2f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f33:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f37:	19 c0                	sbb    eax,eax
c0015f39:	83 e0 02             	and    eax,0x2
c0015f3c:	83 c0 41             	add    eax,0x41
c0015f3f:	0f be e8             	movsx  ebp,al
c0015f42:	3c 43                	cmp    al,0x43
c0015f44:	75 10                	jne    c0015f56 <LogicalDisk::assignDriveLetter()+0x50>
c0015f46:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f4d:	75 5d                	jne    c0015fac <LogicalDisk::assignDriveLetter()+0xa6>
c0015f4f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f54:	75 56                	jne    c0015fac <LogicalDisk::assignDriveLetter()+0xa6>
c0015f56:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f59:	ba 01 00 00 00       	mov    edx,0x1
c0015f5e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f62:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f66:	d3 e2                	shl    edx,cl
c0015f68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f6c:	89 d7                	mov    edi,edx
c0015f6e:	89 d6                	mov    esi,edx
c0015f70:	c1 ff 1f             	sar    edi,0x1f
c0015f73:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f77:	21 f9                	and    ecx,edi
c0015f79:	09 d1                	or     ecx,edx
c0015f7b:	75 2f                	jne    c0015fac <LogicalDisk::assignDriveLetter()+0xa6>
c0015f7d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f85:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f8b:	09 f2                	or     edx,esi
c0015f8d:	89 15 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edx
c0015f93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f97:	09 fa                	or     edx,edi
c0015f99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f9d:	89 15 44 e0 02 c0    	mov    DWORD PTR ds:0xc002e044,edx
c0015fa3:	89 1c bd 60 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1fa0],ebx
c0015faa:	eb 08                	jmp    c0015fb4 <LogicalDisk::assignDriveLetter()+0xae>
c0015fac:	45                   	inc    ebp
c0015fad:	40                   	inc    eax
c0015fae:	3c 5b                	cmp    al,0x5b
c0015fb0:	75 90                	jne    c0015f42 <LogicalDisk::assignDriveLetter()+0x3c>
c0015fb2:	31 c0                	xor    eax,eax
c0015fb4:	83 c4 14             	add    esp,0x14
c0015fb7:	5b                   	pop    ebx
c0015fb8:	5e                   	pop    esi
c0015fb9:	5f                   	pop    edi
c0015fba:	5d                   	pop    ebp
c0015fbb:	c3                   	ret    

c0015fbc <LogicalDisk::mount()>:
c0015fbc:	56                   	push   esi
c0015fbd:	53                   	push   ebx
c0015fbe:	51                   	push   ecx
c0015fbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fc3:	8b 1d c8 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbc8
c0015fc9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fd3:	85 db                	test   ebx,ebx
c0015fd5:	74 50                	je     c0016027 <LogicalDisk::mount()+0x6b>
c0015fd7:	e8 c9 74 00 00       	call   c001d4a5 <getIRQNestingLevel()>
c0015fdc:	52                   	push   edx
c0015fdd:	52                   	push   edx
c0015fde:	50                   	push   eax
c0015fdf:	68 78 a8 02 c0       	push   0xc002a878
c0015fe4:	e8 02 c9 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0015fe9:	83 c4 0c             	add    esp,0xc
c0015fec:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ff3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ff5:	83 e8 41             	sub    eax,0x41
c0015ff8:	50                   	push   eax
c0015ff9:	56                   	push   esi
c0015ffa:	53                   	push   ebx
c0015ffb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ffe:	83 c4 10             	add    esp,0x10
c0016001:	84 c0                	test   al,al
c0016003:	74 08                	je     c001600d <LogicalDisk::mount()+0x51>
c0016005:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001600b:	eb 1c                	jmp    c0016029 <LogicalDisk::mount()+0x6d>
c001600d:	e8 93 74 00 00       	call   c001d4a5 <getIRQNestingLevel()>
c0016012:	51                   	push   ecx
c0016013:	51                   	push   ecx
c0016014:	50                   	push   eax
c0016015:	68 93 a8 02 c0       	push   0xc002a893
c001601a:	e8 cc c8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001601f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016022:	83 c4 10             	add    esp,0x10
c0016025:	eb ac                	jmp    c0015fd3 <LogicalDisk::mount()+0x17>
c0016027:	31 c0                	xor    eax,eax
c0016029:	5a                   	pop    edx
c001602a:	5b                   	pop    ebx
c001602b:	5e                   	pop    esi
c001602c:	c3                   	ret    
c001602d:	90                   	nop

c001602e <LogicalDisk::unmount()>:
c001602e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016032:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001603c:	c3                   	ret    
c001603d:	90                   	nop

c001603e <LogicalDisk::eject()>:
c001603e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016042:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016048:	8b 10                	mov    edx,DWORD PTR [eax]
c001604a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001604e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016051:	90                   	nop

c0016052 <LogicalDisk::unassignDriveLetter()>:
c0016052:	57                   	push   edi
c0016053:	56                   	push   esi
c0016054:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016058:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001605f:	84 c9                	test   cl,cl
c0016061:	75 0f                	jne    c0016072 <LogicalDisk::unassignDriveLetter()+0x20>
c0016063:	c7 44 24 0c ae a8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a8ae
c001606b:	5e                   	pop    esi
c001606c:	5f                   	pop    edi
c001606d:	e9 ed 3d 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c0016072:	83 e9 41             	sub    ecx,0x41
c0016075:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001607c:	b8 01 00 00 00       	mov    eax,0x1
c0016081:	c7 04 8d 60 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1fa0],0x0
c001608c:	d3 e0                	shl    eax,cl
c001608e:	89 c7                	mov    edi,eax
c0016090:	f7 d0                	not    eax
c0016092:	c1 ff 1f             	sar    edi,0x1f
c0016095:	21 05 40 e0 02 c0    	and    DWORD PTR ds:0xc002e040,eax
c001609b:	89 fe                	mov    esi,edi
c001609d:	f7 d6                	not    esi
c001609f:	21 35 44 e0 02 c0    	and    DWORD PTR ds:0xc002e044,esi
c00160a5:	5e                   	pop    esi
c00160a6:	5f                   	pop    edi
c00160a7:	c3                   	ret    

c00160a8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160a8:	57                   	push   edi
c00160a9:	56                   	push   esi
c00160aa:	53                   	push   ebx
c00160ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160c1:	77 41                	ja     c0016104 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160c3:	99                   	cdq    
c00160c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160ca:	01 c8                	add    eax,ecx
c00160cc:	11 da                	adc    edx,ebx
c00160ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160d4:	19 d7                	sbb    edi,edx
c00160d6:	72 33                	jb     c001610b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160fc:	5b                   	pop    ebx
c00160fd:	5e                   	pop    esi
c00160fe:	5f                   	pop    edi
c00160ff:	e9 c2 0a 00 00       	jmp    c0016bc6 <VCache::read(unsigned long long, int, void*)>
c0016104:	b8 05 00 00 00       	mov    eax,0x5
c0016109:	eb 05                	jmp    c0016110 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001610b:	b8 07 00 00 00       	mov    eax,0x7
c0016110:	5b                   	pop    ebx
c0016111:	5e                   	pop    esi
c0016112:	5f                   	pop    edi
c0016113:	c3                   	ret    

c0016114 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016114:	57                   	push   edi
c0016115:	56                   	push   esi
c0016116:	53                   	push   ebx
c0016117:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001611b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001611f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016127:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001612d:	77 41                	ja     c0016170 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001612f:	99                   	cdq    
c0016130:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016136:	01 c8                	add    eax,ecx
c0016138:	11 da                	adc    edx,ebx
c001613a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016140:	19 d7                	sbb    edi,edx
c0016142:	72 33                	jb     c0016177 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016144:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001614a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016150:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016154:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016158:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001615e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016164:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016168:	5b                   	pop    ebx
c0016169:	5e                   	pop    esi
c001616a:	5f                   	pop    edi
c001616b:	e9 60 09 00 00       	jmp    c0016ad0 <VCache::write(unsigned long long, int, void*)>
c0016170:	b8 05 00 00 00       	mov    eax,0x5
c0016175:	eb 05                	jmp    c001617c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016177:	b8 07 00 00 00       	mov    eax,0x7
c001617c:	5b                   	pop    ebx
c001617d:	5e                   	pop    esi
c001617e:	5f                   	pop    edi
c001617f:	c3                   	ret    

c0016180 <Mouse::Mouse(char const*)>:
c0016180:	83 ec 0c             	sub    esp,0xc
c0016183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016187:	83 ec 08             	sub    esp,0x8
c001618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618e:	50                   	push   eax
c001618f:	e8 6e dd ff ff       	call   c0013f02 <Device::Device(char const*)>
c0016194:	83 c4 10             	add    esp,0x10
c0016197:	ba 04 a9 02 c0       	mov    edx,0xc002a904
c001619c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a0:	89 10                	mov    DWORD PTR [eax],edx
c00161a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161b0:	90                   	nop
c00161b1:	83 c4 0c             	add    esp,0xc
c00161b4:	c3                   	ret    
c00161b5:	90                   	nop

c00161b6 <Mouse::~Mouse()>:
c00161b6:	83 ec 0c             	sub    esp,0xc
c00161b9:	ba 04 a9 02 c0       	mov    edx,0xc002a904
c00161be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c2:	89 10                	mov    DWORD PTR [eax],edx
c00161c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c8:	83 ec 0c             	sub    esp,0xc
c00161cb:	50                   	push   eax
c00161cc:	e8 13 da ff ff       	call   c0013be4 <Device::~Device()>
c00161d1:	83 c4 10             	add    esp,0x10
c00161d4:	90                   	nop
c00161d5:	83 c4 0c             	add    esp,0xc
c00161d8:	c3                   	ret    
c00161d9:	90                   	nop

c00161da <Mouse::~Mouse()>:
c00161da:	83 ec 0c             	sub    esp,0xc
c00161dd:	83 ec 0c             	sub    esp,0xc
c00161e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161e4:	e8 cd ff ff ff       	call   c00161b6 <Mouse::~Mouse()>
c00161e9:	83 c4 10             	add    esp,0x10
c00161ec:	83 ec 08             	sub    esp,0x8
c00161ef:	68 58 01 00 00       	push   0x158
c00161f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161f8:	e8 0e c6 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	c3                   	ret    

c0016204 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016204:	55                   	push   ebp
c0016205:	57                   	push   edi
c0016206:	56                   	push   esi
c0016207:	53                   	push   ebx
c0016208:	81 ec 28 01 00 00    	sub    esp,0x128
c001620e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016215:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001621c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016223:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001622a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001622e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016232:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016239:	e8 c0 dd ff ff       	call   c0013ffe <Device::getName()>
c001623e:	5a                   	pop    edx
c001623f:	59                   	pop    ecx
c0016240:	50                   	push   eax
c0016241:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016245:	55                   	push   ebp
c0016246:	e8 10 a5 fe ff       	call   c000075b <strcpy>
c001624b:	5b                   	pop    ebx
c001624c:	58                   	pop    eax
c001624d:	68 28 a9 02 c0       	push   0xc002a928
c0016252:	55                   	push   ebp
c0016253:	e8 ba a5 fe ff       	call   c0000812 <strcat>
c0016258:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001625f:	e8 b8 93 ff ff       	call   c000f61c <malloc>
c0016264:	83 c4 0c             	add    esp,0xc
c0016267:	89 c3                	mov    ebx,eax
c0016269:	57                   	push   edi
c001626a:	56                   	push   esi
c001626b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001626f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016273:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001627a:	55                   	push   ebp
c001627b:	50                   	push   eax
c001627c:	e8 cf fb ff ff       	call   c0015e50 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016281:	83 c4 14             	add    esp,0x14
c0016284:	53                   	push   ebx
c0016285:	e8 7c fc ff ff       	call   c0015f06 <LogicalDisk::assignDriveLetter()>
c001628a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001628d:	89 c6                	mov    esi,eax
c001628f:	e8 28 fd ff ff       	call   c0015fbc <LogicalDisk::mount()>
c0016294:	58                   	pop    eax
c0016295:	5a                   	pop    edx
c0016296:	53                   	push   ebx
c0016297:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001629e:	e8 6f da ff ff       	call   c0013d12 <Device::addChild(Device*)>
c00162a3:	59                   	pop    ecx
c00162a4:	89 f0                	mov    eax,esi
c00162a6:	5b                   	pop    ebx
c00162a7:	0f be f0             	movsx  esi,al
c00162aa:	56                   	push   esi
c00162ab:	68 33 a9 02 c0       	push   0xc002a933
c00162b0:	e8 36 c6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00162b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162bb:	5b                   	pop    ebx
c00162bc:	5e                   	pop    esi
c00162bd:	5f                   	pop    edi
c00162be:	5d                   	pop    ebp
c00162bf:	c3                   	ret    

c00162c0 <createPartitionsForDisk(PhysicalDisk*)>:
c00162c0:	55                   	push   ebp
c00162c1:	57                   	push   edi
c00162c2:	56                   	push   esi
c00162c3:	53                   	push   ebx
c00162c4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162ca:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162d7:	3d 00 02 00 00       	cmp    eax,0x200
c00162dc:	74 27                	je     c0016305 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162de:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162e4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162ea:	83 ec 10             	sub    esp,0x10
c00162ed:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162f1:	99                   	cdq    
c00162f2:	c1 e6 0a             	shl    esi,0xa
c00162f5:	52                   	push   edx
c00162f6:	89 fd                	mov    ebp,edi
c00162f8:	50                   	push   eax
c00162f9:	55                   	push   ebp
c00162fa:	56                   	push   esi
c00162fb:	e8 0c fe 00 00       	call   c002610c <__udivdi3>
c0016300:	e9 b1 00 00 00       	jmp    c00163b6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	8b 03                	mov    eax,DWORD PTR [ebx]
c001630a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001630e:	56                   	push   esi
c001630f:	6a 01                	push   0x1
c0016311:	6a 00                	push   0x0
c0016313:	6a 00                	push   0x0
c0016315:	53                   	push   ebx
c0016316:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016319:	83 c4 20             	add    esp,0x20
c001631c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016324:	75 0a                	jne    c0016330 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016326:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001632e:	74 2c                	je     c001635c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016330:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016336:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001633c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016342:	83 ec 10             	sub    esp,0x10
c0016345:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016349:	89 f7                	mov    edi,esi
c001634b:	c1 e0 0a             	shl    eax,0xa
c001634e:	c1 ff 1f             	sar    edi,0x1f
c0016351:	57                   	push   edi
c0016352:	56                   	push   esi
c0016353:	52                   	push   edx
c0016354:	50                   	push   eax
c0016355:	e8 b2 fd 00 00       	call   c002610c <__udivdi3>
c001635a:	eb 5a                	jmp    c00163b6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001635c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016363:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001636a:	83 e1 7f             	and    ecx,0x7f
c001636d:	83 e0 7f             	and    eax,0x7f
c0016370:	01 c1                	add    ecx,eax
c0016372:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016379:	83 e0 7f             	and    eax,0x7f
c001637c:	01 c1                	add    ecx,eax
c001637e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016385:	83 e0 7f             	and    eax,0x7f
c0016388:	00 c1                	add    cl,al
c001638a:	74 41                	je     c00163cd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001638c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016392:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016398:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001639e:	83 ec 10             	sub    esp,0x10
c00163a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163a5:	89 f7                	mov    edi,esi
c00163a7:	c1 e0 0a             	shl    eax,0xa
c00163aa:	c1 ff 1f             	sar    edi,0x1f
c00163ad:	57                   	push   edi
c00163ae:	56                   	push   esi
c00163af:	52                   	push   edx
c00163b0:	50                   	push   eax
c00163b1:	e8 56 fd 00 00       	call   c002610c <__udivdi3>
c00163b6:	83 c4 14             	add    esp,0x14
c00163b9:	52                   	push   edx
c00163ba:	50                   	push   eax
c00163bb:	6a 00                	push   0x0
c00163bd:	6a 00                	push   0x0
c00163bf:	53                   	push   ebx
c00163c0:	e8 3f fe ff ff       	call   c0016204 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163c5:	83 c4 20             	add    esp,0x20
c00163c8:	e9 79 01 00 00       	jmp    c0016546 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163cd:	89 f0                	mov    eax,esi
c00163cf:	31 f6                	xor    esi,esi
c00163d1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163d8:	75 02                	jne    c00163dc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163da:	89 f1                	mov    ecx,esi
c00163dc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163e3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163ea:	c1 e2 08             	shl    edx,0x8
c00163ed:	c1 e7 10             	shl    edi,0x10
c00163f0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163f8:	09 fa                	or     edx,edi
c00163fa:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016402:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016409:	83 c0 10             	add    eax,0x10
c001640c:	09 fa                	or     edx,edi
c001640e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016415:	c1 e7 18             	shl    edi,0x18
c0016418:	09 fa                	or     edx,edi
c001641a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016421:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016425:	c1 e7 10             	shl    edi,0x10
c0016428:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001642f:	c1 e2 08             	shl    edx,0x8
c0016432:	09 fa                	or     edx,edi
c0016434:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001643b:	09 fa                	or     edx,edi
c001643d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016444:	c1 e7 18             	shl    edi,0x18
c0016447:	09 fa                	or     edx,edi
c0016449:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001644d:	46                   	inc    esi
c001644e:	83 fe 04             	cmp    esi,0x4
c0016451:	0f 85 7a ff ff ff    	jne    c00163d1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645b:	83 f0 01             	xor    eax,0x1
c001645e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016462:	75 57                	jne    c00164bb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016468:	83 f0 01             	xor    eax,0x1
c001646b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001646f:	75 4a                	jne    c00164bb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016471:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016475:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001647d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016485:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001648b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016491:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016497:	0f a4 c2 0a          	shld   edx,eax,0xa
c001649b:	89 f7                	mov    edi,esi
c001649d:	c1 e0 0a             	shl    eax,0xa
c00164a0:	c1 ff 1f             	sar    edi,0x1f
c00164a3:	57                   	push   edi
c00164a4:	56                   	push   esi
c00164a5:	52                   	push   edx
c00164a6:	50                   	push   eax
c00164a7:	e8 60 fc 00 00       	call   c002610c <__udivdi3>
c00164ac:	83 c4 10             	add    esp,0x10
c00164af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164b3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164b7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164bb:	84 c9                	test   cl,cl
c00164bd:	74 53                	je     c0016512 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164bf:	0f b6 c9             	movzx  ecx,cl
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164ca:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164ce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164da:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164de:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164f6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00164fa:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00164fe:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016502:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016506:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001650a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001650e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016512:	31 ed                	xor    ebp,ebp
c0016514:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016518:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001651c:	89 f8                	mov    eax,edi
c001651e:	09 f0                	or     eax,esi
c0016520:	74 1e                	je     c0016540 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016522:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016526:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001652a:	89 d1                	mov    ecx,edx
c001652c:	09 c1                	or     ecx,eax
c001652e:	74 10                	je     c0016540 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016530:	83 ec 0c             	sub    esp,0xc
c0016533:	57                   	push   edi
c0016534:	56                   	push   esi
c0016535:	52                   	push   edx
c0016536:	50                   	push   eax
c0016537:	53                   	push   ebx
c0016538:	e8 c7 fc ff ff       	call   c0016204 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001653d:	83 c4 20             	add    esp,0x20
c0016540:	45                   	inc    ebp
c0016541:	83 fd 04             	cmp    ebp,0x4
c0016544:	75 ce                	jne    c0016514 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016546:	81 c4 5c 02 00 00    	add    esp,0x25c
c001654c:	5b                   	pop    ebx
c001654d:	5e                   	pop    esi
c001654e:	5f                   	pop    edi
c001654f:	5d                   	pop    ebp
c0016550:	c3                   	ret    
c0016551:	90                   	nop

c0016552 <Serial::Serial(char const*)>:
c0016552:	83 ec 0c             	sub    esp,0xc
c0016555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016559:	83 ec 08             	sub    esp,0x8
c001655c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016560:	50                   	push   eax
c0016561:	e8 9c d9 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c001656e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016572:	89 10                	mov    DWORD PTR [eax],edx
c0016574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016578:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016582:	90                   	nop
c0016583:	83 c4 0c             	add    esp,0xc
c0016586:	c3                   	ret    
c0016587:	90                   	nop

c0016588 <Serial::~Serial()>:
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c0016590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016594:	89 10                	mov    DWORD PTR [eax],edx
c0016596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659a:	83 ec 0c             	sub    esp,0xc
c001659d:	50                   	push   eax
c001659e:	e8 41 d6 ff ff       	call   c0013be4 <Device::~Device()>
c00165a3:	83 c4 10             	add    esp,0x10
c00165a6:	90                   	nop
c00165a7:	83 c4 0c             	add    esp,0xc
c00165aa:	c3                   	ret    
c00165ab:	90                   	nop

c00165ac <Serial::~Serial()>:
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	83 ec 0c             	sub    esp,0xc
c00165b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b6:	e8 cd ff ff ff       	call   c0016588 <Serial::~Serial()>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	83 ec 08             	sub    esp,0x8
c00165c1:	68 58 01 00 00       	push   0x158
c00165c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ca:	e8 3c c2 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	83 c4 0c             	add    esp,0xc
c00165d5:	c3                   	ret    

c00165d6 <Timer::Timer(char const*)>:
c00165d6:	83 ec 0c             	sub    esp,0xc
c00165d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165dd:	83 ec 08             	sub    esp,0x8
c00165e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165e4:	50                   	push   eax
c00165e5:	e8 18 d9 ff ff       	call   c0013f02 <Device::Device(char const*)>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c00165f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f6:	89 10                	mov    DWORD PTR [eax],edx
c00165f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165fc:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016606:	90                   	nop
c0016607:	83 c4 0c             	add    esp,0xc
c001660a:	c3                   	ret    
c001660b:	90                   	nop

c001660c <Timer::~Timer()>:
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c0016614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016618:	89 10                	mov    DWORD PTR [eax],edx
c001661a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661e:	83 ec 0c             	sub    esp,0xc
c0016621:	50                   	push   eax
c0016622:	e8 bd d5 ff ff       	call   c0013be4 <Device::~Device()>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	90                   	nop
c001662b:	83 c4 0c             	add    esp,0xc
c001662e:	c3                   	ret    
c001662f:	90                   	nop

c0016630 <Timer::~Timer()>:
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	83 ec 0c             	sub    esp,0xc
c0016636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001663a:	e8 cd ff ff ff       	call   c001660c <Timer::~Timer()>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	83 ec 08             	sub    esp,0x8
c0016645:	68 5c 01 00 00       	push   0x15c
c001664a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001664e:	e8 b8 c1 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	83 c4 0c             	add    esp,0xc
c0016659:	c3                   	ret    

c001665a <Timer::read()>:
c001665a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001665e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016664:	c3                   	ret    

c0016665 <timerHandler(unsigned long long)>:
c0016665:	55                   	push   ebp
c0016666:	57                   	push   edi
c0016667:	56                   	push   esi
c0016668:	53                   	push   ebx
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016670:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016674:	01 35 d0 e0 02 c0    	add    DWORD PTR ds:0xc002e0d0,esi
c001667a:	11 3d d4 e0 02 c0    	adc    DWORD PTR ds:0xc002e0d4,edi
c0016680:	80 3d 4d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da4d,0x0
c0016687:	0f 84 07 01 00 00    	je     c0016794 <timerHandler(unsigned long long)+0x12f>
c001668d:	e8 4f 6e 00 00       	call   c001d4e1 <lockStuff()>
c0016692:	83 ec 0c             	sub    esp,0xc
c0016695:	68 9c 0f 03 c0       	push   0xc0030f9c
c001669a:	e8 df 1a 01 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001669f:	c7 04 24 9c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f9c
c00166a6:	89 c3                	mov    ebx,eax
c00166a8:	e8 d9 1a 01 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166ad:	83 c4 10             	add    esp,0x10
c00166b0:	84 c0                	test   al,al
c00166b2:	74 60                	je     c0016714 <timerHandler(unsigned long long)+0xaf>
c00166b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166ba:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00166bd:	85 c0                	test   eax,eax
c00166bf:	0f 85 91 00 00 00    	jne    c0016756 <timerHandler(unsigned long long)+0xf1>
c00166c5:	e9 be 00 00 00       	jmp    c0016788 <timerHandler(unsigned long long)+0x123>
c00166ca:	83 ec 0c             	sub    esp,0xc
c00166cd:	55                   	push   ebp
c00166ce:	e8 ff 73 00 00       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	39 eb                	cmp    ebx,ebp
c00166d8:	75 12                	jne    c00166ec <timerHandler(unsigned long long)+0x87>
c00166da:	83 ec 0c             	sub    esp,0xc
c00166dd:	68 9c 0f 03 c0       	push   0xc0030f9c
c00166e2:	e8 97 1a 01 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166e7:	89 c3                	mov    ebx,eax
c00166e9:	83 c4 10             	add    esp,0x10
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 9c 0f 03 c0       	push   0xc0030f9c
c00166f4:	e8 8d 1a 01 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	84 c0                	test   al,al
c00166fe:	75 b4                	jne    c00166b4 <timerHandler(unsigned long long)+0x4f>
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 9c 0f 03 c0       	push   0xc0030f9c
c0016708:	e8 71 1a 01 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	39 d8                	cmp    eax,ebx
c0016712:	74 a0                	je     c00166b4 <timerHandler(unsigned long long)+0x4f>
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	68 9c 0f 03 c0       	push   0xc0030f9c
c001671c:	e8 5d 1a 01 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016721:	c7 04 24 9c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f9c
c0016728:	89 c5                	mov    ebp,eax
c001672a:	e8 73 1a 01 00       	call   c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001672f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016738:	39 15 d0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0d0,edx
c001673e:	a1 d4 e0 02 c0       	mov    eax,ds:0xc002e0d4
c0016743:	19 c8                	sbb    eax,ecx
c0016745:	73 83                	jae    c00166ca <timerHandler(unsigned long long)+0x65>
c0016747:	50                   	push   eax
c0016748:	50                   	push   eax
c0016749:	55                   	push   ebp
c001674a:	68 9c 0f 03 c0       	push   0xc0030f9c
c001674f:	e8 fc 1a 01 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016754:	eb 93                	jmp    c00166e9 <timerHandler(unsigned long long)+0x84>
c0016756:	80 3d 4c da 02 c0 00 	cmp    BYTE PTR ds:0xc002da4c,0x0
c001675d:	74 29                	je     c0016788 <timerHandler(unsigned long long)+0x123>
c001675f:	39 c6                	cmp    esi,eax
c0016761:	bb 00 00 00 00       	mov    ebx,0x0
c0016766:	19 df                	sbb    edi,ebx
c0016768:	72 19                	jb     c0016783 <timerHandler(unsigned long long)+0x11e>
c001676a:	e8 4b 6d 00 00       	call   c001d4ba <lockScheduler()>
c001676f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016774:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016777:	e8 7a 70 00 00       	call   c001d7f6 <schedule()>
c001677c:	e8 3b 6d 00 00       	call   c001d4bc <unlockScheduler()>
c0016781:	eb 05                	jmp    c0016788 <timerHandler(unsigned long long)+0x123>
c0016783:	29 f0                	sub    eax,esi
c0016785:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016788:	83 c4 0c             	add    esp,0xc
c001678b:	5b                   	pop    ebx
c001678c:	5e                   	pop    esi
c001678d:	5f                   	pop    edi
c001678e:	5d                   	pop    ebp
c001678f:	e9 e7 70 00 00       	jmp    c001d87b <unlockStuff()>
c0016794:	83 c4 0c             	add    esp,0xc
c0016797:	5b                   	pop    ebx
c0016798:	5e                   	pop    esi
c0016799:	5f                   	pop    edi
c001679a:	5d                   	pop    ebp
c001679b:	c3                   	ret    

c001679c <setupTimer(int)>:
c001679c:	57                   	push   edi
c001679d:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00167a2:	56                   	push   esi
c00167a3:	53                   	push   ebx
c00167a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167ae:	83 ec 0c             	sub    esp,0xc
c00167b1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167b7:	e8 42 d8 ff ff       	call   c0013ffe <Device::getName()>
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167c2:	0f 85 8d 00 00 00    	jne    c0016855 <setupTimer(int)+0xb9>
c00167c8:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00167cd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167d4:	74 7f                	je     c0016855 <setupTimer(int)+0xb9>
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	68 5c 01 00 00       	push   0x15c
c00167de:	e8 39 8e ff ff       	call   c000f61c <malloc>
c00167e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00167e6:	89 c3                	mov    ebx,eax
c00167e8:	e8 fb f4 00 00       	call   c0025ce8 <PIT::PIT()>
c00167ed:	59                   	pop    ecx
c00167ee:	5f                   	pop    edi
c00167ef:	53                   	push   ebx
c00167f0:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c00167f6:	e8 17 d5 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c00167fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167fd:	6a 00                	push   0x0
c00167ff:	6a 00                	push   0x0
c0016801:	56                   	push   esi
c0016802:	53                   	push   ebx
c0016803:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016806:	83 c4 14             	add    esp,0x14
c0016809:	68 60 01 00 00       	push   0x160
c001680e:	e8 09 8e ff ff       	call   c000f61c <malloc>
c0016813:	89 04 24             	mov    DWORD PTR [esp],eax
c0016816:	89 c7                	mov    edi,eax
c0016818:	e8 7b f3 00 00       	call   c0025b98 <APICTimer::APICTimer()>
c001681d:	6a 00                	push   0x0
c001681f:	6a 00                	push   0x0
c0016821:	56                   	push   esi
c0016822:	57                   	push   edi
c0016823:	e8 72 f2 00 00       	call   c0025a9a <APICTimer::open(int, int, void*)>
c0016828:	83 c4 20             	add    esp,0x20
c001682b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001682d:	6a 00                	push   0x0
c001682f:	6a 00                	push   0x0
c0016831:	6a 00                	push   0x0
c0016833:	53                   	push   ebx
c0016834:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016837:	58                   	pop    eax
c0016838:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001683d:	5a                   	pop    edx
c001683e:	57                   	push   edi
c001683f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016845:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001684b:	e8 c2 d4 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	eb 33                	jmp    c0016888 <setupTimer(int)+0xec>
c0016855:	83 ec 0c             	sub    esp,0xc
c0016858:	68 5c 01 00 00       	push   0x15c
c001685d:	e8 ba 8d ff ff       	call   c000f61c <malloc>
c0016862:	89 04 24             	mov    DWORD PTR [esp],eax
c0016865:	89 c3                	mov    ebx,eax
c0016867:	e8 7c f4 00 00       	call   c0025ce8 <PIT::PIT()>
c001686c:	58                   	pop    eax
c001686d:	5a                   	pop    edx
c001686e:	53                   	push   ebx
c001686f:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c0016875:	e8 98 d4 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c001687a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687c:	6a 00                	push   0x0
c001687e:	6a 00                	push   0x0
c0016880:	56                   	push   esi
c0016881:	53                   	push   ebx
c0016882:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016885:	83 c4 20             	add    esp,0x20
c0016888:	89 d8                	mov    eax,ebx
c001688a:	5b                   	pop    ebx
c001688b:	5e                   	pop    esi
c001688c:	5f                   	pop    edi
c001688d:	c3                   	ret    

c001688e <VCache::VCache(PhysicalDisk*)>:
c001688e:	53                   	push   ebx
c001688f:	83 ec 18             	sub    esp,0x18
c0016892:	ba 50 aa 02 c0       	mov    edx,0xc002aa50
c0016897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689b:	89 10                	mov    DWORD PTR [eax],edx
c001689d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ac:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168be:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168d0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168db:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ee:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168f5:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00168fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016900:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016908:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001690c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016910:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016918:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001691f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016927:	83 ec 0c             	sub    esp,0xc
c001692a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001692e:	e8 e9 8c ff ff       	call   c000f61c <malloc>
c0016933:	83 c4 10             	add    esp,0x10
c0016936:	89 c3                	mov    ebx,eax
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	53                   	push   ebx
c001693c:	e8 99 6c 00 00       	call   c001d5da <Mutex::Mutex()>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016948:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001694b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016953:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001695a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016961:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016965:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001696b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016972:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016976:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001697c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016982:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016986:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016989:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001698c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016990:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016994:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016998:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001699e:	05 00 01 00 00       	add    eax,0x100
c00169a3:	c1 e0 04             	shl    eax,0x4
c00169a6:	83 ec 0c             	sub    esp,0xc
c00169a9:	50                   	push   eax
c00169aa:	e8 6d 8c ff ff       	call   c000f61c <malloc>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	89 c2                	mov    edx,eax
c00169b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169bf:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00169c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169d8:	c1 e0 06             	shl    eax,0x6
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	50                   	push   eax
c00169df:	e8 38 8c ff ff       	call   c000f61c <malloc>
c00169e4:	83 c4 10             	add    esp,0x10
c00169e7:	89 c2                	mov    edx,eax
c00169e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ed:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169f0:	90                   	nop
c00169f1:	83 c4 18             	add    esp,0x18
c00169f4:	5b                   	pop    ebx
c00169f5:	c3                   	ret    

c00169f6 <VCache::invalidateReadBuffer()>:
c00169f6:	53                   	push   ebx
c00169f7:	83 ec 14             	sub    esp,0x14
c00169fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00169fe:	68 cc a9 02 c0       	push   0xc002a9cc
c0016a03:	e8 e3 be ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016a08:	66 c7 43 3c 00 00    	mov    WORD PTR [ebx+0x3c],0x0
c0016a0e:	c6 43 3e 00          	mov    BYTE PTR [ebx+0x3e],0x0
c0016a12:	83 c4 18             	add    esp,0x18
c0016a15:	5b                   	pop    ebx
c0016a16:	c3                   	ret    
c0016a17:	90                   	nop

c0016a18 <VCache::writeWriteBuffer()>:
c0016a18:	53                   	push   ebx
c0016a19:	83 ec 14             	sub    esp,0x14
c0016a1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a23:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a25:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a28:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a2b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a2e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a31:	50                   	push   eax
c0016a32:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a35:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a3c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a43:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a47:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a4e:	83 c4 28             	add    esp,0x28
c0016a51:	5b                   	pop    ebx
c0016a52:	c3                   	ret    
c0016a53:	90                   	nop

c0016a54 <VCache::~VCache()>:
c0016a54:	83 ec 0c             	sub    esp,0xc
c0016a57:	ba 50 aa 02 c0       	mov    edx,0xc002aa50
c0016a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a60:	89 10                	mov    DWORD PTR [eax],edx
c0016a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a66:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a69:	84 c0                	test   al,al
c0016a6b:	74 0f                	je     c0016a7c <VCache::~VCache()+0x28>
c0016a6d:	83 ec 0c             	sub    esp,0xc
c0016a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a74:	e8 9f ff ff ff       	call   c0016a18 <VCache::writeWriteBuffer()>
c0016a79:	83 c4 10             	add    esp,0x10
c0016a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a80:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	50                   	push   eax
c0016a87:	e8 a0 8b ff ff       	call   c000f62c <free>
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a96:	83 ec 0c             	sub    esp,0xc
c0016a99:	50                   	push   eax
c0016a9a:	e8 8d 8b ff ff       	call   c000f62c <free>
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	90                   	nop
c0016aa3:	83 c4 0c             	add    esp,0xc
c0016aa6:	c3                   	ret    
c0016aa7:	90                   	nop

c0016aa8 <VCache::~VCache()>:
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	83 ec 0c             	sub    esp,0xc
c0016aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab2:	e8 9d ff ff ff       	call   c0016a54 <VCache::~VCache()>
c0016ab7:	83 c4 10             	add    esp,0x10
c0016aba:	83 ec 08             	sub    esp,0x8
c0016abd:	6a 44                	push   0x44
c0016abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ac3:	e8 43 bd ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0016ac8:	83 c4 10             	add    esp,0x10
c0016acb:	83 c4 0c             	add    esp,0xc
c0016ace:	c3                   	ret    
c0016acf:	90                   	nop

c0016ad0 <VCache::write(unsigned long long, int, void*)>:
c0016ad0:	55                   	push   ebp
c0016ad1:	57                   	push   edi
c0016ad2:	56                   	push   esi
c0016ad3:	53                   	push   ebx
c0016ad4:	83 ec 28             	sub    esp,0x28
c0016ad7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016adb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016adf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ae3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016ae7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016aea:	e8 4d 6f 00 00       	call   c001da3c <Semaphore::acquire()>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016af6:	74 0c                	je     c0016b04 <VCache::write(unsigned long long, int, void*)+0x34>
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	53                   	push   ebx
c0016afc:	e8 f5 fe ff ff       	call   c00169f6 <VCache::invalidateReadBuffer()>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b08:	74 66                	je     c0016b70 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016b0a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b0d:	99                   	cdq    
c0016b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b12:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b15:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b18:	89 c1                	mov    ecx,eax
c0016b1a:	89 d0                	mov    eax,edx
c0016b1c:	31 f1                	xor    ecx,esi
c0016b1e:	31 f8                	xor    eax,edi
c0016b20:	89 ca                	mov    edx,ecx
c0016b22:	09 c2                	or     edx,eax
c0016b24:	75 3e                	jne    c0016b64 <VCache::write(unsigned long long, int, void*)+0x94>
c0016b26:	83 fd 01             	cmp    ebp,0x1
c0016b29:	75 39                	jne    c0016b64 <VCache::write(unsigned long long, int, void*)+0x94>
c0016b2b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b34:	51                   	push   ecx
c0016b35:	50                   	push   eax
c0016b36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b3e:	0f af c8             	imul   ecx,eax
c0016b41:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016b44:	51                   	push   ecx
c0016b45:	e8 56 9b fe ff       	call   c00006a0 <memcpy>
c0016b4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b4d:	83 c4 10             	add    esp,0x10
c0016b50:	40                   	inc    eax
c0016b51:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b54:	83 f8 40             	cmp    eax,0x40
c0016b57:	75 57                	jne    c0016bb0 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	53                   	push   ebx
c0016b5d:	e8 b6 fe ff ff       	call   c0016a18 <VCache::writeWriteBuffer()>
c0016b62:	eb 34                	jmp    c0016b98 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016b64:	83 ec 0c             	sub    esp,0xc
c0016b67:	53                   	push   ebx
c0016b68:	e8 ab fe ff ff       	call   c0016a18 <VCache::writeWriteBuffer()>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b73:	83 fd 3f             	cmp    ebp,0x3f
c0016b76:	7f 25                	jg     c0016b9d <VCache::write(unsigned long long, int, void*)+0xcd>
c0016b78:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b7b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b7e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016b81:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b85:	52                   	push   edx
c0016b86:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016b8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b90:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b93:	e8 08 9b fe ff       	call   c00006a0 <memcpy>
c0016b98:	83 c4 10             	add    esp,0x10
c0016b9b:	eb 13                	jmp    c0016bb0 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ba2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016ba6:	55                   	push   ebp
c0016ba7:	57                   	push   edi
c0016ba8:	56                   	push   esi
c0016ba9:	50                   	push   eax
c0016baa:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bad:	83 c4 20             	add    esp,0x20
c0016bb0:	83 ec 0c             	sub    esp,0xc
c0016bb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bb6:	e8 2f 74 00 00       	call   c001dfea <Semaphore::release()>
c0016bbb:	83 c4 2c             	add    esp,0x2c
c0016bbe:	31 c0                	xor    eax,eax
c0016bc0:	5b                   	pop    ebx
c0016bc1:	5e                   	pop    esi
c0016bc2:	5f                   	pop    edi
c0016bc3:	5d                   	pop    ebp
c0016bc4:	c3                   	ret    
c0016bc5:	90                   	nop

c0016bc6 <VCache::read(unsigned long long, int, void*)>:
c0016bc6:	55                   	push   ebp
c0016bc7:	57                   	push   edi
c0016bc8:	56                   	push   esi
c0016bc9:	53                   	push   ebx
c0016bca:	83 ec 28             	sub    esp,0x28
c0016bcd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016bd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bd5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016bd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bdd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016be1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016be5:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016be9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bec:	e8 4b 6e 00 00       	call   c001da3c <Semaphore::acquire()>
c0016bf1:	83 c4 10             	add    esp,0x10
c0016bf4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016bf8:	74 0c                	je     c0016c06 <VCache::read(unsigned long long, int, void*)+0x40>
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	53                   	push   ebx
c0016bfe:	e8 15 fe ff ff       	call   c0016a18 <VCache::writeWriteBuffer()>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	57                   	push   edi
c0016c07:	57                   	push   edi
c0016c08:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016c0c:	68 f1 a9 02 c0       	push   0xc002a9f1
c0016c11:	e8 d5 bc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016c16:	83 c4 10             	add    esp,0x10
c0016c19:	83 fe 01             	cmp    esi,0x1
c0016c1c:	0f 85 df 00 00 00    	jne    c0016d01 <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c25:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c2c:	0f 85 cf 00 00 00    	jne    c0016d01 <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c32:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c36:	74 1b                	je     c0016c53 <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c38:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c3b:	f7 d9                	neg    ecx
c0016c3d:	89 c8                	mov    eax,ecx
c0016c3f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016c42:	99                   	cdq    
c0016c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c47:	21 d0                	and    eax,edx
c0016c49:	3b 43 34             	cmp    eax,DWORD PTR [ebx+0x34]
c0016c4c:	75 05                	jne    c0016c53 <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c4e:	3b 4b 30             	cmp    ecx,DWORD PTR [ebx+0x30]
c0016c51:	74 42                	je     c0016c95 <VCache::read(unsigned long long, int, void*)+0xcf>
c0016c53:	83 ec 0c             	sub    esp,0xc
c0016c56:	68 0a aa 02 c0       	push   0xc002aa0a
c0016c5b:	e8 8b bc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016c60:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c64:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c67:	f7 d9                	neg    ecx
c0016c69:	89 c8                	mov    eax,ecx
c0016c6b:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0016c6f:	99                   	cdq    
c0016c70:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0016c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c77:	89 ce                	mov    esi,ecx
c0016c79:	21 d0                	and    eax,edx
c0016c7b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016c7e:	89 c7                	mov    edi,eax
c0016c80:	59                   	pop    ecx
c0016c81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c84:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c86:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c89:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0016c8c:	57                   	push   edi
c0016c8d:	56                   	push   esi
c0016c8e:	50                   	push   eax
c0016c8f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c92:	83 c4 20             	add    esp,0x20
c0016c95:	52                   	push   edx
c0016c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c9e:	2b 43 30             	sub    eax,DWORD PTR [ebx+0x30]
c0016ca1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0016ca4:	1b 53 34             	sbb    edx,DWORD PTR [ebx+0x34]
c0016ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016caf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016cb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cb9:	89 c8                	mov    eax,ecx
c0016cbb:	0f af f1             	imul   esi,ecx
c0016cbe:	99                   	cdq    
c0016cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cc3:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
c0016cc8:	01 d6                	add    esi,edx
c0016cca:	f7 e1                	mul    ecx
c0016ccc:	01 f2                	add    edx,esi
c0016cce:	52                   	push   edx
c0016ccf:	50                   	push   eax
c0016cd0:	68 1a aa 02 c0       	push   0xc002aa1a
c0016cd5:	e8 11 bc ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016cda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ce6:	52                   	push   edx
c0016ce7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cea:	48                   	dec    eax
c0016ceb:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016cef:	0f af c2             	imul   eax,edx
c0016cf2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016cf5:	50                   	push   eax
c0016cf6:	55                   	push   ebp
c0016cf7:	e8 a4 99 fe ff       	call   c00006a0 <memcpy>
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	eb 2d                	jmp    c0016d2e <VCache::read(unsigned long long, int, void*)+0x168>
c0016d01:	50                   	push   eax
c0016d02:	50                   	push   eax
c0016d03:	56                   	push   esi
c0016d04:	68 36 aa 02 c0       	push   0xc002aa36
c0016d09:	e8 dd bb ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0016d0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d11:	e8 e0 fc ff ff       	call   c00169f6 <VCache::invalidateReadBuffer()>
c0016d16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d19:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d1e:	56                   	push   esi
c0016d1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d27:	50                   	push   eax
c0016d28:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d2b:	83 c4 20             	add    esp,0x20
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d34:	e8 b1 72 00 00       	call   c001dfea <Semaphore::release()>
c0016d39:	83 c4 2c             	add    esp,0x2c
c0016d3c:	31 c0                	xor    eax,eax
c0016d3e:	5b                   	pop    ebx
c0016d3f:	5e                   	pop    esi
c0016d40:	5f                   	pop    edi
c0016d41:	5d                   	pop    ebp
c0016d42:	c3                   	ret    
c0016d43:	90                   	nop

c0016d44 <Video::putrect(int, int, int, int, unsigned int)>:
c0016d44:	55                   	push   ebp
c0016d45:	57                   	push   edi
c0016d46:	56                   	push   esi
c0016d47:	53                   	push   ebx
c0016d48:	83 ec 1c             	sub    esp,0x1c
c0016d4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d53:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d57:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d63:	01 df                	add    edi,ebx
c0016d65:	39 fb                	cmp    ebx,edi
c0016d67:	7d 1f                	jge    c0016d88 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d69:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d6d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016d71:	7d 12                	jge    c0016d85 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016d73:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d79:	53                   	push   ebx
c0016d7a:	55                   	push   ebp
c0016d7b:	45                   	inc    ebp
c0016d7c:	56                   	push   esi
c0016d7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d80:	83 c4 10             	add    esp,0x10
c0016d83:	eb e8                	jmp    c0016d6d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d85:	43                   	inc    ebx
c0016d86:	eb dd                	jmp    c0016d65 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d88:	83 c4 1c             	add    esp,0x1c
c0016d8b:	5b                   	pop    ebx
c0016d8c:	5e                   	pop    esi
c0016d8d:	5f                   	pop    edi
c0016d8e:	5d                   	pop    ebp
c0016d8f:	c3                   	ret    

c0016d90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d90:	55                   	push   ebp
c0016d91:	57                   	push   edi
c0016d92:	31 ff                	xor    edi,edi
c0016d94:	56                   	push   esi
c0016d95:	53                   	push   ebx
c0016d96:	83 ec 1c             	sub    esp,0x1c
c0016d99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016d9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016da1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016da8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016dad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016db1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016db5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016db9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016dbc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dc0:	01 f9                	add    ecx,edi
c0016dc2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016dc6:	7d 2f                	jge    c0016df7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016dc8:	31 f6                	xor    esi,esi
c0016dca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016dce:	01 f2                	add    edx,esi
c0016dd0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016dd4:	7d 1a                	jge    c0016df0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016dd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dd9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ddc:	46                   	inc    esi
c0016ddd:	51                   	push   ecx
c0016dde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016de2:	52                   	push   edx
c0016de3:	55                   	push   ebp
c0016de4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dee:	eb da                	jmp    c0016dca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016df0:	47                   	inc    edi
c0016df1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016df5:	eb c5                	jmp    c0016dbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016df7:	83 c4 1c             	add    esp,0x1c
c0016dfa:	5b                   	pop    ebx
c0016dfb:	5e                   	pop    esi
c0016dfc:	5f                   	pop    edi
c0016dfd:	5d                   	pop    ebp
c0016dfe:	c3                   	ret    
c0016dff:	90                   	nop

c0016e00 <Video::blit(unsigned int*, int, int, int, int)>:
c0016e00:	55                   	push   ebp
c0016e01:	57                   	push   edi
c0016e02:	56                   	push   esi
c0016e03:	53                   	push   ebx
c0016e04:	83 ec 1c             	sub    esp,0x1c
c0016e07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e0f:	85 c0                	test   eax,eax
c0016e11:	79 02                	jns    c0016e15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e13:	31 c0                	xor    eax,eax
c0016e15:	c1 e0 02             	shl    eax,0x2
c0016e18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e28:	39 d8                	cmp    eax,ebx
c0016e2a:	7e 49                	jle    c0016e75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e32:	7c 41                	jl     c0016e75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e44:	39 f9                	cmp    ecx,edi
c0016e46:	7e 22                	jle    c0016e6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e48:	83 c5 04             	add    ebp,0x4
c0016e4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e51:	7c 14                	jl     c0016e67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e60:	56                   	push   esi
c0016e61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	47                   	inc    edi
c0016e68:	eb d2                	jmp    c0016e3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e6e:	43                   	inc    ebx
c0016e6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016e73:	eb ab                	jmp    c0016e20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016e75:	83 c4 1c             	add    esp,0x1c
c0016e78:	5b                   	pop    ebx
c0016e79:	5e                   	pop    esi
c0016e7a:	5f                   	pop    edi
c0016e7b:	5d                   	pop    ebp
c0016e7c:	c3                   	ret    
c0016e7d:	90                   	nop

c0016e7e <Video::clearScreen(unsigned int)>:
c0016e7e:	57                   	push   edi
c0016e7f:	56                   	push   esi
c0016e80:	53                   	push   ebx
c0016e81:	31 db                	xor    ebx,ebx
c0016e83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e8d:	7e 1f                	jle    c0016eae <Video::clearScreen(unsigned int)+0x30>
c0016e8f:	31 ff                	xor    edi,edi
c0016e91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e97:	7e 12                	jle    c0016eab <Video::clearScreen(unsigned int)+0x2d>
c0016e99:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e9f:	53                   	push   ebx
c0016ea0:	57                   	push   edi
c0016ea1:	47                   	inc    edi
c0016ea2:	56                   	push   esi
c0016ea3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	eb e6                	jmp    c0016e91 <Video::clearScreen(unsigned int)+0x13>
c0016eab:	43                   	inc    ebx
c0016eac:	eb d9                	jmp    c0016e87 <Video::clearScreen(unsigned int)+0x9>
c0016eae:	5b                   	pop    ebx
c0016eaf:	5e                   	pop    esi
c0016eb0:	5f                   	pop    edi
c0016eb1:	c3                   	ret    

c0016eb2 <Video::putpixel(int, int, unsigned int)>:
c0016eb2:	c7 44 24 04 58 aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa58
c0016eba:	e9 a0 2f 00 00       	jmp    c0019e5f <Krnl::panic(char const*)>
c0016ebf:	90                   	nop

c0016ec0 <Video::Video(char const*)>:
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec7:	83 ec 08             	sub    esp,0x8
c0016eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ece:	50                   	push   eax
c0016ecf:	e8 2e d0 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0016ed4:	83 c4 10             	add    esp,0x10
c0016ed7:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c0016edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee0:	89 10                	mov    DWORD PTR [eax],edx
c0016ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016ef0:	90                   	nop
c0016ef1:	83 c4 0c             	add    esp,0xc
c0016ef4:	c3                   	ret    
c0016ef5:	90                   	nop

c0016ef6 <Video::~Video()>:
c0016ef6:	83 ec 0c             	sub    esp,0xc
c0016ef9:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c0016efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f02:	89 10                	mov    DWORD PTR [eax],edx
c0016f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f08:	83 ec 0c             	sub    esp,0xc
c0016f0b:	50                   	push   eax
c0016f0c:	e8 d3 cc ff ff       	call   c0013be4 <Device::~Device()>
c0016f11:	83 c4 10             	add    esp,0x10
c0016f14:	90                   	nop
c0016f15:	83 c4 0c             	add    esp,0xc
c0016f18:	c3                   	ret    
c0016f19:	90                   	nop

c0016f1a <Video::~Video()>:
c0016f1a:	83 ec 0c             	sub    esp,0xc
c0016f1d:	83 ec 0c             	sub    esp,0xc
c0016f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f24:	e8 cd ff ff ff       	call   c0016ef6 <Video::~Video()>
c0016f29:	83 c4 10             	add    esp,0x10
c0016f2c:	83 ec 08             	sub    esp,0x8
c0016f2f:	68 64 01 00 00       	push   0x164
c0016f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f38:	e8 ce b8 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0016f3d:	83 c4 10             	add    esp,0x10
c0016f40:	83 c4 0c             	add    esp,0xc
c0016f43:	c3                   	ret    

c0016f44 <Video::isMonochrome()>:
c0016f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f48:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f4e:	c3                   	ret    
c0016f4f:	90                   	nop

c0016f50 <Video::getWidth()>:
c0016f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f5a:	c3                   	ret    
c0016f5b:	90                   	nop

c0016f5c <Video::getHeight()>:
c0016f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f68:	55                   	push   ebp
c0016f69:	57                   	push   edi
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	83 ec 2c             	sub    esp,0x2c
c0016f6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f77:	83 f8 01             	cmp    eax,0x1
c0016f7a:	19 c9                	sbb    ecx,ecx
c0016f7c:	31 db                	xor    ebx,ebx
c0016f7e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f82:	89 cd                	mov    ebp,ecx
c0016f84:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f8c:	f7 d5                	not    ebp
c0016f8e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f98:	01 d8                	add    eax,ebx
c0016f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f9e:	56                   	push   esi
c0016f9f:	e8 b8 ff ff ff       	call   c0016f5c <Video::getHeight()>
c0016fa4:	59                   	pop    ecx
c0016fa5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016fa9:	7e 70                	jle    c001701b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016fab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016faf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fb3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016fb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fbe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016fc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fc9:	89 f8                	mov    eax,edi
c0016fcb:	83 c0 20             	add    eax,0x20
c0016fce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fd2:	56                   	push   esi
c0016fd3:	e8 78 ff ff ff       	call   c0016f50 <Video::getWidth()>
c0016fd8:	5a                   	pop    edx
c0016fd9:	39 c7                	cmp    edi,eax
c0016fdb:	7d 34                	jge    c0017011 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016fdd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016fe2:	74 05                	je     c0016fe9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016fe4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fe6:	55                   	push   ebp
c0016fe7:	eb 0d                	jmp    c0016ff6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016fe9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016fee:	74 12                	je     c0017002 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ff0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ffa:	57                   	push   edi
c0016ffb:	56                   	push   esi
c0016ffc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fff:	83 c4 10             	add    esp,0x10
c0017002:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017006:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001700a:	47                   	inc    edi
c001700b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001700f:	75 c1                	jne    c0016fd2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017011:	43                   	inc    ebx
c0017012:	83 fb 20             	cmp    ebx,0x20
c0017015:	0f 85 79 ff ff ff    	jne    c0016f94 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001701b:	83 c4 2c             	add    esp,0x2c
c001701e:	5b                   	pop    ebx
c001701f:	5e                   	pop    esi
c0017020:	5f                   	pop    edi
c0017021:	5d                   	pop    ebp
c0017022:	c3                   	ret    
c0017023:	90                   	nop

c0017024 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017024:	55                   	push   ebp
c0017025:	57                   	push   edi
c0017026:	56                   	push   esi
c0017027:	53                   	push   ebx
c0017028:	83 ec 28             	sub    esp,0x28
c001702b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001702f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017033:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017037:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001703b:	c1 e7 08             	shl    edi,0x8
c001703e:	01 c7                	add    edi,eax
c0017040:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017044:	c1 e0 08             	shl    eax,0x8
c0017047:	01 d0                	add    eax,edx
c0017049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001704d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017051:	0f af c7             	imul   eax,edi
c0017054:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001705b:	50                   	push   eax
c001705c:	e8 bb 85 ff ff       	call   c000f61c <malloc>
c0017061:	83 c4 10             	add    esp,0x10
c0017064:	89 c5                	mov    ebp,eax
c0017066:	85 c0                	test   eax,eax
c0017068:	75 15                	jne    c001707f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001706a:	83 ec 0c             	sub    esp,0xc
c001706d:	68 79 aa 02 c0       	push   0xc002aa79
c0017072:	e8 74 b8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	e9 1c 01 00 00       	jmp    c001719b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001707f:	be 12 00 00 00       	mov    esi,0x12
c0017084:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017088:	74 11                	je     c001709b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001708a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001708e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017092:	c1 fe 03             	sar    esi,0x3
c0017095:	0f af f0             	imul   esi,eax
c0017098:	83 c6 12             	add    esi,0x12
c001709b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001709f:	74 04                	je     c00170a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00170a1:	85 ff                	test   edi,edi
c00170a3:	75 12                	jne    c00170b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	68 90 aa 02 c0       	push   0xc002aa90
c00170ad:	e8 39 b8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00170b2:	e9 ce 00 00 00       	jmp    c0017185 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00170b7:	52                   	push   edx
c00170b8:	52                   	push   edx
c00170b9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00170bd:	50                   	push   eax
c00170be:	68 a5 aa 02 c0       	push   0xc002aaa5
c00170c3:	e8 23 b8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00170c8:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00170cc:	83 c4 10             	add    esp,0x10
c00170cf:	80 fa 02             	cmp    dl,0x2
c00170d2:	0f 85 98 00 00 00    	jne    c0017170 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00170d8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00170dd:	75 10                	jne    c00170ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170df:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00170e3:	75 0a                	jne    c00170ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170e5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00170e8:	83 e8 18             	sub    eax,0x18
c00170eb:	a8 f7                	test   al,0xf7
c00170ed:	74 0a                	je     c00170f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	68 b2 aa 02 c0       	push   0xc002aab2
c00170f7:	eb 7f                	jmp    c0017178 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00170f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017101:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017109:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001710d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017115:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017119:	75 0c                	jne    c0017127 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001711b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017120:	c1 e0 18             	shl    eax,0x18
c0017123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017127:	41                   	inc    ecx
c0017128:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001712d:	c1 e2 10             	shl    edx,0x10
c0017130:	89 d0                	mov    eax,edx
c0017132:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017137:	c1 e2 08             	shl    edx,0x8
c001713a:	09 c2                	or     edx,eax
c001713c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017140:	09 c2                	or     edx,eax
c0017142:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017146:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001714a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001714e:	c1 f8 03             	sar    eax,0x3
c0017151:	01 c6                	add    esi,eax
c0017153:	89 c8                	mov    eax,ecx
c0017155:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017159:	39 c7                	cmp    edi,eax
c001715b:	7f b0                	jg     c001710d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001715d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017161:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017165:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017168:	7e 22                	jle    c001718c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001716a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001716e:	eb 99                	jmp    c0017109 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017170:	50                   	push   eax
c0017171:	50                   	push   eax
c0017172:	52                   	push   edx
c0017173:	68 c0 aa 02 c0       	push   0xc002aac0
c0017178:	e8 6e b7 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001717d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017180:	e8 a7 84 ff ff       	call   c000f62c <free>
c0017185:	83 c4 10             	add    esp,0x10
c0017188:	31 ed                	xor    ebp,ebp
c001718a:	eb 0f                	jmp    c001719b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001718c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017190:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017193:	89 38                	mov    DWORD PTR [eax],edi
c0017195:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017199:	89 08                	mov    DWORD PTR [eax],ecx
c001719b:	83 c4 1c             	add    esp,0x1c
c001719e:	89 e8                	mov    eax,ebp
c00171a0:	5b                   	pop    ebx
c00171a1:	5e                   	pop    esi
c00171a2:	5f                   	pop    edi
c00171a3:	5d                   	pop    ebp
c00171a4:	c3                   	ret    
c00171a5:	90                   	nop

c00171a6 <Video::putTGA(int, int, unsigned char*, int)>:
c00171a6:	55                   	push   ebp
c00171a7:	57                   	push   edi
c00171a8:	56                   	push   esi
c00171a9:	53                   	push   ebx
c00171aa:	83 ec 28             	sub    esp,0x28
c00171ad:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171b5:	50                   	push   eax
c00171b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171ba:	50                   	push   eax
c00171bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171c3:	56                   	push   esi
c00171c4:	e8 5b fe ff ff       	call   c0017024 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00171c9:	83 c4 20             	add    esp,0x20
c00171cc:	85 c0                	test   eax,eax
c00171ce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171d2:	74 35                	je     c0017209 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171d4:	89 c7                	mov    edi,eax
c00171d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00171de:	39 d8                	cmp    eax,ebx
c00171e0:	7e 27                	jle    c0017209 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171e2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00171ee:	39 e8                	cmp    eax,ebp
c00171f0:	7e 14                	jle    c0017206 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00171f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00171f4:	83 c7 04             	add    edi,0x4
c00171f7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00171fa:	53                   	push   ebx
c00171fb:	55                   	push   ebp
c00171fc:	45                   	inc    ebp
c00171fd:	56                   	push   esi
c00171fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017201:	83 c4 10             	add    esp,0x10
c0017204:	eb e0                	jmp    c00171e6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017206:	43                   	inc    ebx
c0017207:	eb cd                	jmp    c00171d6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017209:	83 c4 1c             	add    esp,0x1c
c001720c:	5b                   	pop    ebx
c001720d:	5e                   	pop    esi
c001720e:	5f                   	pop    edi
c001720f:	5d                   	pop    ebp
c0017210:	c3                   	ret    
c0017211:	90                   	nop

c0017212 <ACPI::close(int, int, void*)>:
c0017212:	83 ec 1c             	sub    esp,0x1c
c0017215:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001721d:	74 0a                	je     c0017229 <ACPI::close(int, int, void*)+0x17>
c001721f:	b8 00 00 00 00       	mov    eax,0x0
c0017224:	e9 9a 00 00 00       	jmp    c00172c3 <ACPI::close(int, int, void*)+0xb1>
c0017229:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001722e:	75 37                	jne    c0017267 <ACPI::close(int, int, void*)+0x55>
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	68 1c ab 02 c0       	push   0xc002ab1c
c0017238:	e8 ae b6 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	a1 08 01 03 c0       	mov    eax,ds:0xc0030108
c0017245:	85 c0                	test   eax,eax
c0017247:	74 07                	je     c0017250 <ACPI::close(int, int, void*)+0x3e>
c0017249:	a1 08 01 03 c0       	mov    eax,ds:0xc0030108
c001724e:	ff d0                	call   eax
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	68 40 ac 02 c0       	push   0xc002ac40
c0017258:	e8 02 2c 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017265:	eb 5c                	jmp    c00172c3 <ACPI::close(int, int, void*)+0xb1>
c0017267:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001726c:	75 50                	jne    c00172be <ACPI::close(int, int, void*)+0xac>
c001726e:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c0017273:	85 c0                	test   eax,eax
c0017275:	74 07                	je     c001727e <ACPI::close(int, int, void*)+0x6c>
c0017277:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c001727c:	ff d0                	call   eax
c001727e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017283:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017288:	83 e0 02             	and    eax,0x2
c001728b:	74 1c                	je     c00172a9 <ACPI::close(int, int, void*)+0x97>
c001728d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017298:	89 c2                	mov    edx,eax
c001729a:	ec                   	in     al,dx
c001729b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001729f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00172a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172a7:	eb da                	jmp    c0017283 <ACPI::close(int, int, void*)+0x71>
c00172a9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172b0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172b5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172bd:	ee                   	out    dx,al
c00172be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172c3:	83 c4 1c             	add    esp,0x1c
c00172c6:	c3                   	ret    

c00172c7 <findRSDP()>:
c00172c7:	83 ec 1c             	sub    esp,0x1c
c00172ca:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00172cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172d5:	83 e0 04             	and    eax,0x4
c00172d8:	84 c0                	test   al,al
c00172da:	75 07                	jne    c00172e3 <findRSDP()+0x1c>
c00172dc:	b8 00 00 00 00       	mov    eax,0x0
c00172e1:	eb 6a                	jmp    c001734d <findRSDP()+0x86>
c00172e3:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c00172e8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00172ed:	7f 1b                	jg     c001730a <findRSDP()+0x43>
c00172ef:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00172f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172fa:	83 e2 fb             	and    edx,0xfffffffb
c00172fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017303:	b8 00 00 00 00       	mov    eax,0x0
c0017308:	eb 43                	jmp    c001734d <findRSDP()+0x86>
c001730a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017312:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001731a:	77 2c                	ja     c0017348 <findRSDP()+0x81>
c001731c:	83 ec 04             	sub    esp,0x4
c001731f:	6a 08                	push   0x8
c0017321:	68 29 ab 02 c0       	push   0xc002ab29
c0017326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001732a:	e8 0e 93 fe ff       	call   c000063d <memcmp>
c001732f:	83 c4 10             	add    esp,0x10
c0017332:	85 c0                	test   eax,eax
c0017334:	0f 94 c0             	sete   al
c0017337:	84 c0                	test   al,al
c0017339:	74 06                	je     c0017341 <findRSDP()+0x7a>
c001733b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001733f:	eb 0c                	jmp    c001734d <findRSDP()+0x86>
c0017341:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017346:	eb ca                	jmp    c0017312 <findRSDP()+0x4b>
c0017348:	b8 00 00 00 00       	mov    eax,0x0
c001734d:	83 c4 1c             	add    esp,0x1c
c0017350:	c3                   	ret    

c0017351 <loadACPITables(unsigned char*)>:
c0017351:	56                   	push   esi
c0017352:	53                   	push   ebx
c0017353:	83 ec 44             	sub    esp,0x44
c0017356:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001735b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017361:	83 e0 04             	and    eax,0x4
c0017364:	84 c0                	test   al,al
c0017366:	0f 84 05 02 00 00    	je     c0017571 <loadACPITables(unsigned char*)+0x220>
c001736c:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c0017371:	84 c0                	test   al,al
c0017373:	74 75                	je     c00173ea <loadACPITables(unsigned char*)+0x99>
c0017375:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017379:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001737d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017381:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017384:	83 e8 24             	sub    eax,0x24
c0017387:	c1 e8 03             	shr    eax,0x3
c001738a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001738e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017396:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001739a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001739e:	0f 8d b2 00 00 00    	jge    c0017456 <loadACPITables(unsigned char*)+0x105>
c00173a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173a8:	83 c0 24             	add    eax,0x24
c00173ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173bb:	c1 e0 03             	shl    eax,0x3
c00173be:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00173c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173c6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00173c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00173cb:	89 c1                	mov    ecx,eax
c00173cd:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c00173d2:	8d 50 01             	lea    edx,[eax+0x1]
c00173d5:	89 15 0c 01 03 c0    	mov    DWORD PTR ds:0xc003010c,edx
c00173db:	89 ca                	mov    edx,ecx
c00173dd:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c00173e4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00173e8:	eb ac                	jmp    c0017396 <loadACPITables(unsigned char*)+0x45>
c00173ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173f9:	83 e8 24             	sub    eax,0x24
c00173fc:	c1 e8 02             	shr    eax,0x2
c00173ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017403:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001740b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001740f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017413:	7d 41                	jge    c0017456 <loadACPITables(unsigned char*)+0x105>
c0017415:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017419:	83 c0 24             	add    eax,0x24
c001741c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017424:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017428:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001742c:	c1 e0 02             	shl    eax,0x2
c001742f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017437:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017439:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c001743e:	8d 50 01             	lea    edx,[eax+0x1]
c0017441:	89 15 0c 01 03 c0    	mov    DWORD PTR ds:0xc003010c,edx
c0017447:	89 ca                	mov    edx,ecx
c0017449:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c0017450:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017454:	eb b5                	jmp    c001740b <loadACPITables(unsigned char*)+0xba>
c0017456:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001745e:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c0017463:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017467:	0f 8d 05 01 00 00    	jge    c0017572 <loadACPITables(unsigned char*)+0x221>
c001746d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017471:	8b 04 c5 24 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfedc]
c0017478:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001747c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017480:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017488:	25 ff 0f 00 00       	and    eax,0xfff
c001748d:	89 c6                	mov    esi,eax
c001748f:	e8 f7 a5 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0017494:	89 c3                	mov    ebx,eax
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	6a 01                	push   0x1
c001749b:	e8 5b a4 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c00174a0:	83 c4 10             	add    esp,0x10
c00174a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174ad:	83 ec 0c             	sub    esp,0xc
c00174b0:	6a 01                	push   0x1
c00174b2:	6a 01                	push   0x1
c00174b4:	50                   	push   eax
c00174b5:	52                   	push   edx
c00174b6:	53                   	push   ebx
c00174b7:	e8 fe ad ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174bc:	83 c4 20             	add    esp,0x20
c00174bf:	09 f0                	or     eax,esi
c00174c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174c9:	c1 e0 03             	shl    eax,0x3
c00174cc:	05 20 01 03 c0       	add    eax,0xc0030120
c00174d1:	83 ec 04             	sub    esp,0x4
c00174d4:	6a 04                	push   0x4
c00174d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174da:	50                   	push   eax
c00174db:	e8 c0 91 fe ff       	call   c00006a0 <memcpy>
c00174e0:	83 c4 10             	add    esp,0x10
c00174e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174f2:	05 00 10 00 00       	add    eax,0x1000
c00174f7:	c1 e8 0c             	shr    eax,0xc
c00174fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017502:	89 04 24             	mov    DWORD PTR [esp],eax
c0017505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017509:	25 ff 0f 00 00       	and    eax,0xfff
c001750e:	89 c6                	mov    esi,eax
c0017510:	e8 76 a5 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0017515:	89 c3                	mov    ebx,eax
c0017517:	83 ec 0c             	sub    esp,0xc
c001751a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001751e:	e8 d8 a3 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001752a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017530:	83 ec 0c             	sub    esp,0xc
c0017533:	6a 01                	push   0x1
c0017535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017539:	50                   	push   eax
c001753a:	52                   	push   edx
c001753b:	53                   	push   ebx
c001753c:	e8 79 ad ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017541:	83 c4 20             	add    esp,0x20
c0017544:	09 f0                	or     eax,esi
c0017546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001754a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001754d:	83 ec 0c             	sub    esp,0xc
c0017550:	50                   	push   eax
c0017551:	e8 09 a7 ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c0017556:	83 c4 10             	add    esp,0x10
c0017559:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001755d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017561:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c0017568:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001756c:	e9 ed fe ff ff       	jmp    c001745e <loadACPITables(unsigned char*)+0x10d>
c0017571:	90                   	nop
c0017572:	83 c4 44             	add    esp,0x44
c0017575:	5b                   	pop    ebx
c0017576:	5e                   	pop    esi
c0017577:	c3                   	ret    

c0017578 <findRSDT(unsigned char*)>:
c0017578:	56                   	push   esi
c0017579:	53                   	push   ebx
c001757a:	83 ec 44             	sub    esp,0x44
c001757d:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0017582:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017588:	83 e0 04             	and    eax,0x4
c001758b:	84 c0                	test   al,al
c001758d:	75 0a                	jne    c0017599 <findRSDT(unsigned char*)+0x21>
c001758f:	b8 00 00 00 00       	mov    eax,0x0
c0017594:	e9 f7 00 00 00       	jmp    c0017690 <findRSDT(unsigned char*)+0x118>
c0017599:	83 ec 04             	sub    esp,0x4
c001759c:	6a 24                	push   0x24
c001759e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00175a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175a6:	50                   	push   eax
c00175a7:	e8 f4 90 fe ff       	call   c00006a0 <memcpy>
c00175ac:	83 c4 10             	add    esp,0x10
c00175af:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00175b3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00175b7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175d7:	25 ff 0f 00 00       	and    eax,0xfff
c00175dc:	89 c6                	mov    esi,eax
c00175de:	e8 a8 a4 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c00175e3:	89 c3                	mov    ebx,eax
c00175e5:	83 ec 0c             	sub    esp,0xc
c00175e8:	6a 02                	push   0x2
c00175ea:	e8 0c a3 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00175f6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175fc:	83 ec 0c             	sub    esp,0xc
c00175ff:	6a 01                	push   0x1
c0017601:	6a 02                	push   0x2
c0017603:	50                   	push   eax
c0017604:	52                   	push   edx
c0017605:	53                   	push   ebx
c0017606:	e8 af ac ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001760b:	83 c4 20             	add    esp,0x20
c001760e:	09 f0                	or     eax,esi
c0017610:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017618:	25 ff 0f 00 00       	and    eax,0xfff
c001761d:	89 c6                	mov    esi,eax
c001761f:	e8 67 a4 ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0017624:	89 c3                	mov    ebx,eax
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	6a 02                	push   0x2
c001762b:	e8 cb a2 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017637:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001763d:	83 ec 0c             	sub    esp,0xc
c0017640:	6a 01                	push   0x1
c0017642:	6a 02                	push   0x2
c0017644:	50                   	push   eax
c0017645:	52                   	push   edx
c0017646:	53                   	push   ebx
c0017647:	e8 6e ac ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001764c:	83 c4 20             	add    esp,0x20
c001764f:	09 f0                	or     eax,esi
c0017651:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017655:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001765a:	75 11                	jne    c001766d <findRSDT(unsigned char*)+0xf5>
c001765c:	c6 05 20 03 03 c0 00 	mov    BYTE PTR ds:0xc0030320,0x0
c0017663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017667:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001766b:	eb 1f                	jmp    c001768c <findRSDT(unsigned char*)+0x114>
c001766d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017672:	75 11                	jne    c0017685 <findRSDT(unsigned char*)+0x10d>
c0017674:	c6 05 20 03 03 c0 01 	mov    BYTE PTR ds:0xc0030320,0x1
c001767b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001767f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017683:	eb 07                	jmp    c001768c <findRSDT(unsigned char*)+0x114>
c0017685:	b8 00 00 00 00       	mov    eax,0x0
c001768a:	eb 04                	jmp    c0017690 <findRSDT(unsigned char*)+0x118>
c001768c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017690:	83 c4 44             	add    esp,0x44
c0017693:	5b                   	pop    ebx
c0017694:	5e                   	pop    esi
c0017695:	c3                   	ret    

c0017696 <findDataTable(unsigned char*, char*)>:
c0017696:	83 ec 1c             	sub    esp,0x1c
c0017699:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001769e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176a4:	83 e0 04             	and    eax,0x4
c00176a7:	84 c0                	test   al,al
c00176a9:	75 07                	jne    c00176b2 <findDataTable(unsigned char*, char*)+0x1c>
c00176ab:	b8 00 00 00 00       	mov    eax,0x0
c00176b0:	eb 7c                	jmp    c001772e <findDataTable(unsigned char*, char*)+0x98>
c00176b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176ba:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c00176bf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176c3:	7d 3a                	jge    c00176ff <findDataTable(unsigned char*, char*)+0x69>
c00176c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c9:	c1 e0 03             	shl    eax,0x3
c00176cc:	05 20 01 03 c0       	add    eax,0xc0030120
c00176d1:	83 ec 04             	sub    esp,0x4
c00176d4:	6a 04                	push   0x4
c00176d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176da:	50                   	push   eax
c00176db:	e8 5d 8f fe ff       	call   c000063d <memcmp>
c00176e0:	83 c4 10             	add    esp,0x10
c00176e3:	85 c0                	test   eax,eax
c00176e5:	0f 94 c0             	sete   al
c00176e8:	84 c0                	test   al,al
c00176ea:	74 0d                	je     c00176f9 <findDataTable(unsigned char*, char*)+0x63>
c00176ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f0:	8b 04 c5 24 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfedc]
c00176f7:	eb 35                	jmp    c001772e <findDataTable(unsigned char*, char*)+0x98>
c00176f9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176fd:	eb bb                	jmp    c00176ba <findDataTable(unsigned char*, char*)+0x24>
c00176ff:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c0017704:	84 c0                	test   al,al
c0017706:	74 07                	je     c001770f <findDataTable(unsigned char*, char*)+0x79>
c0017708:	b8 58 00 00 00       	mov    eax,0x58
c001770d:	eb 05                	jmp    c0017714 <findDataTable(unsigned char*, char*)+0x7e>
c001770f:	b8 52 00 00 00       	mov    eax,0x52
c0017714:	83 ec 04             	sub    esp,0x4
c0017717:	50                   	push   eax
c0017718:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001771c:	68 64 ac 02 c0       	push   0xc002ac64
c0017721:	e8 c5 b1 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	b8 00 00 00 00       	mov    eax,0x0
c001772e:	83 c4 1c             	add    esp,0x1c
c0017731:	c3                   	ret    

c0017732 <scanMADT()>:
c0017732:	53                   	push   ebx
c0017733:	83 ec 38             	sub    esp,0x38
c0017736:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001773b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017741:	83 e0 04             	and    eax,0x4
c0017744:	84 c0                	test   al,al
c0017746:	0f 84 63 04 00 00    	je     c0017baf <scanMADT()+0x47d>
c001774c:	e8 76 fb ff ff       	call   c00172c7 <findRSDP()>
c0017751:	a3 2c 03 03 c0       	mov    ds:0xc003032c,eax
c0017756:	a1 2c 03 03 c0       	mov    eax,ds:0xc003032c
c001775b:	85 c0                	test   eax,eax
c001775d:	75 19                	jne    c0017778 <scanMADT()+0x46>
c001775f:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0017764:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001776a:	83 e2 fb             	and    edx,0xfffffffb
c001776d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017773:	e9 3b 04 00 00       	jmp    c0017bb3 <scanMADT()+0x481>
c0017778:	a1 2c 03 03 c0       	mov    eax,ds:0xc003032c
c001777d:	83 ec 0c             	sub    esp,0xc
c0017780:	50                   	push   eax
c0017781:	e8 f2 fd ff ff       	call   c0017578 <findRSDT(unsigned char*)>
c0017786:	83 c4 10             	add    esp,0x10
c0017789:	a3 28 03 03 c0       	mov    ds:0xc0030328,eax
c001778e:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017793:	85 c0                	test   eax,eax
c0017795:	75 19                	jne    c00177b0 <scanMADT()+0x7e>
c0017797:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001779c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a2:	83 e2 fb             	and    edx,0xfffffffb
c00177a5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177ab:	e9 03 04 00 00       	jmp    c0017bb3 <scanMADT()+0x481>
c00177b0:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c00177b5:	83 ec 0c             	sub    esp,0xc
c00177b8:	50                   	push   eax
c00177b9:	e8 93 fb ff ff       	call   c0017351 <loadACPITables(unsigned char*)>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c00177c6:	83 ec 08             	sub    esp,0x8
c00177c9:	68 32 ab 02 c0       	push   0xc002ab32
c00177ce:	50                   	push   eax
c00177cf:	e8 c2 fe ff ff       	call   c0017696 <findDataTable(unsigned char*, char*)>
c00177d4:	83 c4 10             	add    esp,0x10
c00177d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177db:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00177e0:	75 19                	jne    c00177fb <scanMADT()+0xc9>
c00177e2:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00177e7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177ed:	83 e2 fe             	and    edx,0xfffffffe
c00177f0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177f6:	e9 b8 03 00 00       	jmp    c0017bb3 <scanMADT()+0x481>
c00177fb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017803:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001780a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001780e:	0f 87 9f 03 00 00    	ja     c0017bb3 <scanMADT()+0x481>
c0017814:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001781c:	0f 87 91 03 00 00    	ja     c0017bb3 <scanMADT()+0x481>
c0017822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017826:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001782a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782e:	8d 50 01             	lea    edx,[eax+0x1]
c0017831:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017839:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001783d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017841:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017845:	8d 50 01             	lea    edx,[eax+0x1]
c0017848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001784c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017850:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017854:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017858:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001785d:	0f 86 4f 03 00 00    	jbe    c0017bb2 <scanMADT()+0x480>
c0017863:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017868:	75 57                	jne    c00178c1 <scanMADT()+0x18f>
c001786a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001786e:	8d 50 01             	lea    edx,[eax+0x1]
c0017871:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017875:	8a 15 20 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030520
c001787b:	0f b6 d2             	movzx  edx,dl
c001787e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017882:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017886:	88 82 60 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfaa0],al
c001788c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017890:	8d 50 01             	lea    edx,[eax+0x1]
c0017893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017897:	8a 15 20 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030520
c001789d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178a0:	88 0d 20 05 03 c0    	mov    BYTE PTR ds:0xc0030520,cl
c00178a6:	0f b6 d2             	movzx  edx,dl
c00178a9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178ad:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178b1:	88 82 40 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfac0],al
c00178b7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178bc:	e9 da 02 00 00       	jmp    c0017b9b <scanMADT()+0x469>
c00178c1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00178c6:	0f 85 14 01 00 00    	jne    c00179e0 <scanMADT()+0x2ae>
c00178cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d0:	8d 50 01             	lea    edx,[eax+0x1]
c00178d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178d7:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c00178dd:	0f b6 d2             	movzx  edx,dl
c00178e0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178e4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178e8:	88 82 00 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfc00],al
c00178ee:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00178f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fa:	01 d0                	add    eax,edx
c00178fc:	83 c0 2c             	add    eax,0x2c
c00178ff:	8a 00                	mov    al,BYTE PTR [eax]
c0017901:	0f b6 d0             	movzx  edx,al
c0017904:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017908:	8d 48 01             	lea    ecx,[eax+0x1]
c001790b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001790f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017913:	0f b6 c0             	movzx  eax,al
c0017916:	c1 e0 08             	shl    eax,0x8
c0017919:	89 d1                	mov    ecx,edx
c001791b:	09 c1                	or     ecx,eax
c001791d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017921:	8d 50 02             	lea    edx,[eax+0x2]
c0017924:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017928:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001792c:	0f b6 c0             	movzx  eax,al
c001792f:	c1 e0 10             	shl    eax,0x10
c0017932:	09 c1                	or     ecx,eax
c0017934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017938:	8d 50 03             	lea    edx,[eax+0x3]
c001793b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017943:	0f b6 c0             	movzx  eax,al
c0017946:	c1 e0 18             	shl    eax,0x18
c0017949:	09 c1                	or     ecx,eax
c001794b:	89 ca                	mov    edx,ecx
c001794d:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c0017952:	0f b6 c0             	movzx  eax,al
c0017955:	89 14 85 20 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfbe0],edx
c001795c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017961:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017965:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017969:	01 d0                	add    eax,edx
c001796b:	83 c0 2c             	add    eax,0x2c
c001796e:	8a 00                	mov    al,BYTE PTR [eax]
c0017970:	0f b6 d0             	movzx  edx,al
c0017973:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017977:	8d 48 01             	lea    ecx,[eax+0x1]
c001797a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001797e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017982:	0f b6 c0             	movzx  eax,al
c0017985:	c1 e0 08             	shl    eax,0x8
c0017988:	89 d1                	mov    ecx,edx
c001798a:	09 c1                	or     ecx,eax
c001798c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017990:	8d 50 02             	lea    edx,[eax+0x2]
c0017993:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017997:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001799b:	0f b6 c0             	movzx  eax,al
c001799e:	c1 e0 10             	shl    eax,0x10
c00179a1:	09 c1                	or     ecx,eax
c00179a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179a7:	8d 50 03             	lea    edx,[eax+0x3]
c00179aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179b2:	0f b6 c0             	movzx  eax,al
c00179b5:	c1 e0 18             	shl    eax,0x18
c00179b8:	09 c1                	or     ecx,eax
c00179ba:	89 ca                	mov    edx,ecx
c00179bc:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c00179c1:	0f b6 c0             	movzx  eax,al
c00179c4:	89 14 85 a0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb60],edx
c00179cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179d0:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c00179d5:	40                   	inc    eax
c00179d6:	a2 e0 03 03 c0       	mov    ds:0xc00303e0,al
c00179db:	e9 bb 01 00 00       	jmp    c0017b9b <scanMADT()+0x469>
c00179e0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00179e5:	0f 85 e9 00 00 00    	jne    c0017ad4 <scanMADT()+0x3a2>
c00179eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ef:	8d 50 01             	lea    edx,[eax+0x1]
c00179f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179fe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017a02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a06:	8d 50 01             	lea    edx,[eax+0x1]
c0017a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a15:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a21:	01 d0                	add    eax,edx
c0017a23:	83 c0 2c             	add    eax,0x2c
c0017a26:	8a 00                	mov    al,BYTE PTR [eax]
c0017a28:	0f b6 d0             	movzx  edx,al
c0017a2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a36:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a3a:	0f b6 c0             	movzx  eax,al
c0017a3d:	c1 e0 08             	shl    eax,0x8
c0017a40:	89 d1                	mov    ecx,edx
c0017a42:	09 c1                	or     ecx,eax
c0017a44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a48:	8d 50 02             	lea    edx,[eax+0x2]
c0017a4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a4f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a53:	0f b6 c0             	movzx  eax,al
c0017a56:	c1 e0 10             	shl    eax,0x10
c0017a59:	09 c1                	or     ecx,eax
c0017a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a5f:	8d 50 03             	lea    edx,[eax+0x3]
c0017a62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a6a:	0f b6 c0             	movzx  eax,al
c0017a6d:	c1 e0 18             	shl    eax,0x18
c0017a70:	09 c8                	or     eax,ecx
c0017a72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a76:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a83:	01 d0                	add    eax,edx
c0017a85:	83 c0 2c             	add    eax,0x2c
c0017a88:	8a 00                	mov    al,BYTE PTR [eax]
c0017a8a:	0f b6 c0             	movzx  eax,al
c0017a8d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a91:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a98:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017a9c:	0f b6 d2             	movzx  edx,dl
c0017a9f:	c1 e2 08             	shl    edx,0x8
c0017aa2:	09 d0                	or     eax,edx
c0017aa4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017aa9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017aae:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017ab3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ab7:	88 90 a0 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd3360],dl
c0017abd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ac2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ac7:	66 89 84 12 c0 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfc40],ax
c0017acf:	e9 c7 00 00 00       	jmp    c0017b9b <scanMADT()+0x469>
c0017ad4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ad9:	0f 85 b0 00 00 00    	jne    c0017b8f <scanMADT()+0x45d>
c0017adf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae3:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017af2:	0f b6 c0             	movzx  eax,al
c0017af5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017af9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017afd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b01:	01 d0                	add    eax,edx
c0017b03:	83 c0 2c             	add    eax,0x2c
c0017b06:	8a 00                	mov    al,BYTE PTR [eax]
c0017b08:	0f b6 d0             	movzx  edx,al
c0017b0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b16:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b1a:	0f b6 c0             	movzx  eax,al
c0017b1d:	c1 e0 08             	shl    eax,0x8
c0017b20:	09 d0                	or     eax,edx
c0017b22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b26:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2f:	8d 50 01             	lea    edx,[eax+0x1]
c0017b32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b3a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b3e:	0f b6 c0             	movzx  eax,al
c0017b41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b49:	c1 e0 08             	shl    eax,0x8
c0017b4c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b50:	89 c1                	mov    ecx,eax
c0017b52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b56:	c1 e0 18             	shl    eax,0x18
c0017b59:	89 c3                	mov    ebx,eax
c0017b5b:	a1 30 03 03 c0       	mov    eax,ds:0xc0030330
c0017b60:	8d 50 01             	lea    edx,[eax+0x1]
c0017b63:	89 15 30 03 03 c0    	mov    DWORD PTR ds:0xc0030330,edx
c0017b69:	09 d9                	or     ecx,ebx
c0017b6b:	89 ca                	mov    edx,ecx
c0017b6d:	89 14 85 40 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfcc0],edx
c0017b74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017b78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b80:	68 94 ac 02 c0       	push   0xc002ac94
c0017b85:	e8 61 ad ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	eb 0c                	jmp    c0017b9b <scanMADT()+0x469>
c0017b8f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b94:	75 05                	jne    c0017b9b <scanMADT()+0x469>
c0017b96:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017b9b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017ba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ba4:	01 d0                	add    eax,edx
c0017ba6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017baa:	e9 54 fc ff ff       	jmp    c0017803 <scanMADT()+0xd1>
c0017baf:	90                   	nop
c0017bb0:	eb 01                	jmp    c0017bb3 <scanMADT()+0x481>
c0017bb2:	90                   	nop
c0017bb3:	83 c4 38             	add    esp,0x38
c0017bb6:	5b                   	pop    ebx
c0017bb7:	c3                   	ret    

c0017bb8 <ACPI::ACPI()>:
c0017bb8:	83 ec 0c             	sub    esp,0xc
c0017bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bbf:	83 ec 08             	sub    esp,0x8
c0017bc2:	68 37 ab 02 c0       	push   0xc002ab37
c0017bc7:	50                   	push   eax
c0017bc8:	e8 35 c3 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0017bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd9:	89 10                	mov    DWORD PTR [eax],edx
c0017bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bea:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c06:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c11:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c18:	e8 15 fb ff ff       	call   c0017732 <scanMADT()>
c0017c1d:	90                   	nop
c0017c1e:	83 c4 0c             	add    esp,0xc
c0017c21:	c3                   	ret    

c0017c22 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c22:	83 ec 2c             	sub    esp,0x2c
c0017c25:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c31:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c35:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c3a:	88 d0                	mov    al,dl
c0017c3c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c45:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c57:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c5b:	0f 8d 97 00 00 00    	jge    c0017cf8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c69:	83 c2 2a             	add    edx,0x2a
c0017c6c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c70:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c75:	75 78                	jne    c0017cef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c7f:	83 c2 2a             	add    edx,0x2a
c0017c82:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c86:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c8a:	75 63                	jne    c0017cef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c8c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c91:	74 3a                	je     c0017ccd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017c93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c9b:	83 c2 2a             	add    edx,0x2a
c0017c9e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ca9:	39 c2                	cmp    edx,eax
c0017cab:	74 10                	je     c0017cbd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017cad:	83 ec 0c             	sub    esp,0xc
c0017cb0:	68 d0 ac 02 c0       	push   0xc002acd0
c0017cb5:	e8 a5 21 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0017cba:	83 c4 10             	add    esp,0x10
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	68 3c ab 02 c0       	push   0xc002ab3c
c0017cc5:	e8 95 21 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017cd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cd9:	83 c2 2a             	add    edx,0x2a
c0017cdc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ce0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ce2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ce5:	89 01                	mov    DWORD PTR [ecx],eax
c0017ce7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017cea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cef:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017cf3:	e9 55 ff ff ff       	jmp    c0017c4d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017cf8:	90                   	nop
c0017cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cfd:	83 c4 2c             	add    esp,0x2c
c0017d00:	c2 04 00             	ret    0x4
c0017d03:	90                   	nop

c0017d04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d04:	83 ec 1c             	sub    esp,0x1c
c0017d07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d13:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d18:	88 c8                	mov    al,cl
c0017d1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d1e:	88 d0                	mov    al,dl
c0017d20:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d28:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d32:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d35:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d39:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d4b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d52:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d5b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d61:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d65:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6c:	83 c2 2a             	add    edx,0x2a
c0017d6f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d77:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d81:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d88:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d90:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d96:	8d 50 01             	lea    edx,[eax+0x1]
c0017d99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d9d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017dad:	3d 00 02 00 00       	cmp    eax,0x200
c0017db2:	75 10                	jne    c0017dc4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017db4:	83 ec 0c             	sub    esp,0xc
c0017db7:	68 4b ab 02 c0       	push   0xc002ab4b
c0017dbc:	e8 9e 20 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0017dc1:	83 c4 10             	add    esp,0x10
c0017dc4:	90                   	nop
c0017dc5:	83 c4 1c             	add    esp,0x1c
c0017dc8:	c3                   	ret    
c0017dc9:	90                   	nop

c0017dca <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017dca:	b8 00 00 00 00       	mov    eax,0x0
c0017dcf:	c3                   	ret    

c0017dd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017dd0:	83 ec 1c             	sub    esp,0x1c
c0017dd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dd7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017dda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dde:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0017de3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017de8:	83 ec 08             	sub    esp,0x8
c0017deb:	52                   	push   edx
c0017dec:	50                   	push   eax
c0017ded:	e8 42 6e ff ff       	call   c000ec34 <Computer::readCMOS(unsigned char)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017df9:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0017dfe:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e03:	83 ec 04             	sub    esp,0x4
c0017e06:	6a 01                	push   0x1
c0017e08:	52                   	push   edx
c0017e09:	50                   	push   eax
c0017e0a:	e8 3b 6f ff ff       	call   c000ed4a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	90                   	nop
c0017e13:	83 c4 1c             	add    esp,0x1c
c0017e16:	c3                   	ret    
c0017e17:	90                   	nop

c0017e18 <ACPI::open(int, int, void*)>:
c0017e18:	53                   	push   ebx
c0017e19:	83 ec 28             	sub    esp,0x28
c0017e1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e20:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e2b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e32:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0017e37:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e3d:	83 e0 04             	and    eax,0x4
c0017e40:	84 c0                	test   al,al
c0017e42:	74 47                	je     c0017e8b <ACPI::open(int, int, void*)+0x73>
c0017e44:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017e49:	83 ec 08             	sub    esp,0x8
c0017e4c:	68 68 ab 02 c0       	push   0xc002ab68
c0017e51:	50                   	push   eax
c0017e52:	e8 3f f8 ff ff       	call   c0017696 <findDataTable(unsigned char*, char*)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e5e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017e63:	74 26                	je     c0017e8b <ACPI::open(int, int, void*)+0x73>
c0017e65:	83 ec 0c             	sub    esp,0xc
c0017e68:	68 6d ab 02 c0       	push   0xc002ab6d
c0017e6d:	e8 79 aa ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017e72:	83 c4 10             	add    esp,0x10
c0017e75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e79:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017e80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e84:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017e8b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e97:	8a 00                	mov    al,BYTE PTR [eax]
c0017e99:	3c 01                	cmp    al,0x1
c0017e9b:	75 28                	jne    c0017ec5 <ACPI::open(int, int, void*)+0xad>
c0017e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ea1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eac:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	68 7e ab 02 c0       	push   0xc002ab7e
c0017ebb:	e8 2b aa ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	eb 25                	jmp    c0017eea <ACPI::open(int, int, void*)+0xd2>
c0017ec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ec9:	8a 00                	mov    al,BYTE PTR [eax]
c0017ecb:	3c 02                	cmp    al,0x2
c0017ecd:	75 1b                	jne    c0017eea <ACPI::open(int, int, void*)+0xd2>
c0017ecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ed3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017eda:	83 ec 0c             	sub    esp,0xc
c0017edd:	68 86 ab 02 c0       	push   0xc002ab86
c0017ee2:	e8 04 aa ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eee:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017ef4:	83 f0 01             	xor    eax,0x1
c0017ef7:	84 c0                	test   al,al
c0017ef9:	74 6a                	je     c0017f65 <ACPI::open(int, int, void*)+0x14d>
c0017efb:	83 ec 0c             	sub    esp,0xc
c0017efe:	68 8e ab 02 c0       	push   0xc002ab8e
c0017f03:	e8 e3 a9 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	e8 40 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017f10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f14:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017f19:	75 28                	jne    c0017f43 <ACPI::open(int, int, void*)+0x12b>
c0017f1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f1f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f2a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017f31:	83 ec 0c             	sub    esp,0xc
c0017f34:	68 9c ab 02 c0       	push   0xc002ab9c
c0017f39:	e8 ad a9 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	eb 22                	jmp    c0017f65 <ACPI::open(int, int, void*)+0x14d>
c0017f43:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017f48:	75 1b                	jne    c0017f65 <ACPI::open(int, int, void*)+0x14d>
c0017f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f4e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	68 a6 ab 02 c0       	push   0xc002aba6
c0017f5d:	e8 89 a9 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f69:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017f6f:	84 c0                	test   al,al
c0017f71:	74 13                	je     c0017f86 <ACPI::open(int, int, void*)+0x16e>
c0017f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f77:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017f7d:	83 f0 01             	xor    eax,0x1
c0017f80:	0f b6 c0             	movzx  eax,al
c0017f83:	40                   	inc    eax
c0017f84:	eb 05                	jmp    c0017f8b <ACPI::open(int, int, void*)+0x173>
c0017f86:	b8 00 00 00 00       	mov    eax,0x0
c0017f8b:	83 ec 08             	sub    esp,0x8
c0017f8e:	50                   	push   eax
c0017f8f:	68 b0 ab 02 c0       	push   0xc002abb0
c0017f94:	e8 52 a9 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fa0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017fa6:	84 c0                	test   al,al
c0017fa8:	74 67                	je     c0018011 <ACPI::open(int, int, void*)+0x1f9>
c0017faa:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017fb9:	e8 5e 76 ff ff       	call   c000f61c <malloc>
c0017fbe:	83 c4 10             	add    esp,0x10
c0017fc1:	89 c3                	mov    ebx,eax
c0017fc3:	83 ec 0c             	sub    esp,0xc
c0017fc6:	53                   	push   ebx
c0017fc7:	e8 f2 9f 00 00       	call   c0021fbe <PCI::PCI()>
c0017fcc:	83 c4 10             	add    esp,0x10
c0017fcf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017fd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fd7:	83 ec 08             	sub    esp,0x8
c0017fda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fde:	50                   	push   eax
c0017fdf:	e8 2e bd ff ff       	call   c0013d12 <Device::addChild(Device*)>
c0017fe4:	83 c4 10             	add    esp,0x10
c0017fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fed:	83 c0 08             	add    eax,0x8
c0017ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ff2:	6a 00                	push   0x0
c0017ff4:	6a 00                	push   0x0
c0017ff6:	6a 00                	push   0x0
c0017ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ffc:	ff d0                	call   eax
c0017ffe:	83 c4 10             	add    esp,0x10
c0018001:	83 ec 0c             	sub    esp,0xc
c0018004:	68 b9 ab 02 c0       	push   0xc002abb9
c0018009:	e8 dd a8 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001800e:	83 c4 10             	add    esp,0x10
c0018011:	83 ec 0c             	sub    esp,0xc
c0018014:	68 c4 ab 02 c0       	push   0xc002abc4
c0018019:	e8 cc 43 00 00       	call   c001c3ea <Thr::loadKernelSymbolTable(char const*)>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0018026:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001802c:	83 e0 04             	and    eax,0x4
c001802f:	84 c0                	test   al,al
c0018031:	0f 84 d2 00 00 00    	je     c0018109 <ACPI::open(int, int, void*)+0x2f1>
c0018037:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018045:	e8 d2 75 ff ff       	call   c000f61c <malloc>
c001804a:	83 c4 10             	add    esp,0x10
c001804d:	89 c3                	mov    ebx,eax
c001804f:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0018054:	83 ec 04             	sub    esp,0x4
c0018057:	50                   	push   eax
c0018058:	68 e2 ab 02 c0       	push   0xc002abe2
c001805d:	53                   	push   ebx
c001805e:	e8 e1 ad ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c0018063:	83 c4 10             	add    esp,0x10
c0018066:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001806a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001806f:	74 17                	je     c0018088 <ACPI::open(int, int, void*)+0x270>
c0018071:	83 ec 0c             	sub    esp,0xc
c0018074:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018078:	e8 99 b0 ff ff       	call   c0013116 <File::exists()>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	84 c0                	test   al,al
c0018082:	74 04                	je     c0018088 <ACPI::open(int, int, void*)+0x270>
c0018084:	b0 01                	mov    al,0x1
c0018086:	eb 02                	jmp    c001808a <ACPI::open(int, int, void*)+0x272>
c0018088:	b0 00                	mov    al,0x0
c001808a:	84 c0                	test   al,al
c001808c:	74 22                	je     c00180b0 <ACPI::open(int, int, void*)+0x298>
c001808e:	83 ec 08             	sub    esp,0x8
c0018091:	6a 01                	push   0x1
c0018093:	68 e2 ab 02 c0       	push   0xc002abe2
c0018098:	e8 aa 4d 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	83 ec 08             	sub    esp,0x8
c00180a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00180a7:	50                   	push   eax
c00180a8:	e8 a9 4f 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180b5:	74 1e                	je     c00180d5 <ACPI::open(int, int, void*)+0x2bd>
c00180b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180bc:	74 17                	je     c00180d5 <ACPI::open(int, int, void*)+0x2bd>
c00180be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00180c4:	83 c0 08             	add    eax,0x8
c00180c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00180c9:	83 ec 0c             	sub    esp,0xc
c00180cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180d0:	ff d0                	call   eax
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c00180da:	83 ec 08             	sub    esp,0x8
c00180dd:	68 ff ab 02 c0       	push   0xc002abff
c00180e2:	50                   	push   eax
c00180e3:	e8 ae f5 ff ff       	call   c0017696 <findDataTable(unsigned char*, char*)>
c00180e8:	83 c4 10             	add    esp,0x10
c00180eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180ef:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00180f4:	74 13                	je     c0018109 <ACPI::open(int, int, void*)+0x2f1>
c00180f6:	83 ec 08             	sub    esp,0x8
c00180f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018101:	e8 ca fc ff ff       	call   c0017dd0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c001810f:	83 ec 08             	sub    esp,0x8
c0018112:	6a 01                	push   0x1
c0018114:	68 04 ac 02 c0       	push   0xc002ac04
c0018119:	e8 29 4d 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	83 ec 08             	sub    esp,0x8
c0018124:	53                   	push   ebx
c0018125:	50                   	push   eax
c0018126:	e8 2b 4f 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	8b 1d 48 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da48
c0018134:	83 ec 08             	sub    esp,0x8
c0018137:	6a 01                	push   0x1
c0018139:	68 21 ac 02 c0       	push   0xc002ac21
c001813e:	e8 04 4d 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	83 ec 08             	sub    esp,0x8
c0018149:	53                   	push   ebx
c001814a:	50                   	push   eax
c001814b:	e8 06 4f 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	b8 00 00 00 00       	mov    eax,0x0
c0018158:	83 c4 28             	add    esp,0x28
c001815b:	5b                   	pop    ebx
c001815c:	c3                   	ret    
c001815d:	90                   	nop

c001815e <ACPI::sleep()>:
c001815e:	83 ec 0c             	sub    esp,0xc
c0018161:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0018166:	85 c0                	test   eax,eax
c0018168:	74 07                	je     c0018171 <ACPI::sleep()+0x13>
c001816a:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001816f:	ff d0                	call   eax
c0018171:	90                   	nop
c0018172:	83 c4 0c             	add    esp,0xc
c0018175:	c3                   	ret    

c0018176 <CPU::close(int, int, void*)>:
c0018176:	31 c0                	xor    eax,eax
c0018178:	c3                   	ret    
c0018179:	90                   	nop

c001817a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001817a:	55                   	push   ebp
c001817b:	57                   	push   edi
c001817c:	56                   	push   esi
c001817d:	53                   	push   ebx
c001817e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018182:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018186:	89 ce                	mov    esi,ecx
c0018188:	89 d5                	mov    ebp,edx
c001818a:	80 f9 04             	cmp    cl,0x4
c001818d:	75 28                	jne    c00181b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001818f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018192:	3c 03                	cmp    al,0x3
c0018194:	0f 86 63 01 00 00    	jbe    c00182fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001819a:	80 fa 03             	cmp    dl,0x3
c001819d:	0f 84 5a 01 00 00    	je     c00182fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181a3:	8d 7a f2             	lea    edi,[edx-0xe]
c00181a6:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00181ab:	89 fb                	mov    ebx,edi
c00181ad:	80 fb 01             	cmp    bl,0x1
c00181b0:	77 4e                	ja     c0018200 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181b2:	e9 52 01 00 00       	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181b7:	80 f9 05             	cmp    cl,0x5
c00181ba:	75 4d                	jne    c0018209 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181bc:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00181c1:	80 fa 03             	cmp    dl,0x3
c00181c4:	0f 86 3f 01 00 00    	jbe    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181ca:	8d 7a fa             	lea    edi,[edx-0x6]
c00181cd:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00181d2:	89 fb                	mov    ebx,edi
c00181d4:	80 fb 01             	cmp    bl,0x1
c00181d7:	0f 86 2c 01 00 00    	jbe    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181dd:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00181e2:	80 fa 08             	cmp    dl,0x8
c00181e5:	0f 84 1e 01 00 00    	je     c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181eb:	89 d7                	mov    edi,edx
c00181ed:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c00181f2:	83 e7 fb             	and    edi,0xfffffffb
c00181f5:	89 fb                	mov    ebx,edi
c00181f7:	80 fb 09             	cmp    bl,0x9
c00181fa:	0f 84 09 01 00 00    	je     c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018200:	31 c0                	xor    eax,eax
c0018202:	89 eb                	mov    ebx,ebp
c0018204:	0f b6 fb             	movzx  edi,bl
c0018207:	eb 30                	jmp    c0018239 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018209:	31 c0                	xor    eax,eax
c001820b:	80 f9 06             	cmp    cl,0x6
c001820e:	75 f2                	jne    c0018202 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018210:	80 fa 0a             	cmp    dl,0xa
c0018213:	77 ed                	ja     c0018202 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018215:	bf de 05 00 00       	mov    edi,0x5de
c001821a:	0f a3 d7             	bt     edi,edx
c001821d:	73 e3                	jae    c0018202 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001821f:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018224:	e9 e0 00 00 00       	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018229:	39 c7                	cmp    edi,eax
c001822b:	0f 84 d3 00 00 00    	je     c0018304 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018231:	40                   	inc    eax
c0018232:	3d d0 00 00 00       	cmp    eax,0xd0
c0018237:	74 09                	je     c0018242 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018239:	89 f3                	mov    ebx,esi
c001823b:	80 fb 0f             	cmp    bl,0xf
c001823e:	75 f1                	jne    c0018231 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018240:	eb e7                	jmp    c0018229 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018242:	80 f9 10             	cmp    cl,0x10
c0018245:	75 14                	jne    c001825b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018247:	8d 42 fc             	lea    eax,[edx-0x4]
c001824a:	83 e0 fb             	and    eax,0xfffffffb
c001824d:	3c 02                	cmp    al,0x2
c001824f:	76 34                	jbe    c0018285 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018251:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018256:	80 fa 02             	cmp    dl,0x2
c0018259:	eb 24                	jmp    c001827f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001825b:	80 f9 11             	cmp    cl,0x11
c001825e:	75 13                	jne    c0018273 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018260:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018265:	80 fa 03             	cmp    dl,0x3
c0018268:	0f 85 9b 00 00 00    	jne    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001826e:	e9 91 00 00 00       	jmp    c0018304 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018273:	80 f9 12             	cmp    cl,0x12
c0018276:	75 14                	jne    c001828c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018278:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c001827d:	fe ca                	dec    dl
c001827f:	0f 85 84 00 00 00    	jne    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018285:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c001828a:	eb 7d                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001828c:	80 f9 14             	cmp    cl,0x14
c001828f:	75 12                	jne    c00182a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018291:	4a                   	dec    edx
c0018292:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018297:	80 fa 01             	cmp    dl,0x1
c001829a:	77 6d                	ja     c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001829c:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00182a1:	eb 66                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a3:	80 f9 15             	cmp    cl,0x15
c00182a6:	75 31                	jne    c00182d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182a8:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c00182ad:	80 fa 01             	cmp    dl,0x1
c00182b0:	74 57                	je     c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182b2:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c00182b7:	80 fa 13             	cmp    dl,0x13
c00182ba:	76 0c                	jbe    c00182c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182bc:	80 fa 30             	cmp    dl,0x30
c00182bf:	75 48                	jne    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c1:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00182c6:	eb 41                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c8:	b9 04 00 09 00       	mov    ecx,0x90004
c00182cd:	0f a3 d1             	bt     ecx,edx
c00182d0:	73 37                	jae    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d2:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c00182d7:	eb 30                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d9:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c00182de:	80 f9 16             	cmp    cl,0x16
c00182e1:	75 26                	jne    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e3:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00182e8:	84 d2                	test   dl,dl
c00182ea:	74 1d                	je     c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ec:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c00182f1:	80 fa 30             	cmp    dl,0x30
c00182f4:	75 13                	jne    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f6:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c00182fb:	eb 0c                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fd:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018302:	eb 05                	jmp    c0018309 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018304:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018309:	5b                   	pop    ebx
c001830a:	5e                   	pop    esi
c001830b:	5f                   	pop    edi
c001830c:	5d                   	pop    ebp
c001830d:	c3                   	ret    

c001830e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001830e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018316:	80 f9 04             	cmp    cl,0x4
c0018319:	75 6b                	jne    c0018386 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001831b:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018320:	80 fa 01             	cmp    dl,0x1
c0018323:	0f 86 92 02 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018329:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c001832e:	80 fa 02             	cmp    dl,0x2
c0018331:	0f 84 84 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018337:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001833c:	80 fa 03             	cmp    dl,0x3
c001833f:	0f 84 76 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018345:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c001834a:	80 fa 04             	cmp    dl,0x4
c001834d:	0f 84 68 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018353:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018358:	80 fa 05             	cmp    dl,0x5
c001835b:	0f 84 5a 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018361:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0018366:	80 fa 07             	cmp    dl,0x7
c0018369:	0f 84 4c 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001836f:	83 ea 08             	sub    edx,0x8
c0018372:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018377:	80 fa 01             	cmp    dl,0x1
c001837a:	0f 87 3b 02 00 00    	ja     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018380:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018385:	c3                   	ret    
c0018386:	80 f9 05             	cmp    cl,0x5
c0018389:	75 45                	jne    c00183d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001838b:	8d 4a ff             	lea    ecx,[edx-0x1]
c001838e:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018393:	80 f9 02             	cmp    cl,0x2
c0018396:	0f 86 1f 02 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001839c:	80 fa 04             	cmp    dl,0x4
c001839f:	0f 84 f3 01 00 00    	je     c0018598 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183a5:	80 fa 07             	cmp    dl,0x7
c00183a8:	0f 84 0d 02 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ae:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00183b3:	80 fa 08             	cmp    dl,0x8
c00183b6:	0f 84 ff 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183bc:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c00183c1:	80 fa 09             	cmp    dl,0x9
c00183c4:	0f 85 f1 01 00 00    	jne    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ca:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c00183cf:	c3                   	ret    
c00183d0:	80 f9 06             	cmp    cl,0x6
c00183d3:	0f 85 85 01 00 00    	jne    c001855e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00183d9:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c00183de:	80 fa 01             	cmp    dl,0x1
c00183e1:	0f 84 d4 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e7:	8d 42 fb             	lea    eax,[edx-0x5]
c00183ea:	3c 01                	cmp    al,0x1
c00183ec:	0f 86 ac 01 00 00    	jbe    c001859e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183f2:	80 fa 03             	cmp    dl,0x3
c00183f5:	0f 84 a3 01 00 00    	je     c001859e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183fb:	8d 4a f9             	lea    ecx,[edx-0x7]
c00183fe:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018403:	80 f9 01             	cmp    cl,0x1
c0018406:	0f 86 af 01 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840c:	80 fa 09             	cmp    dl,0x9
c001840f:	0f 84 8f 01 00 00    	je     c00185a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018415:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018418:	80 f9 01             	cmp    cl,0x1
c001841b:	0f 86 9a 01 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018421:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018426:	80 fa 0d             	cmp    dl,0xd
c0018429:	0f 84 8c 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001842f:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018434:	80 fa 0e             	cmp    dl,0xe
c0018437:	0f 84 7e 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001843d:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018442:	80 fa 0f             	cmp    dl,0xf
c0018445:	0f 84 70 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001844b:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018450:	80 fa 15             	cmp    dl,0x15
c0018453:	0f 84 62 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018459:	8d 4a ea             	lea    ecx,[edx-0x16]
c001845c:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018461:	80 f9 01             	cmp    cl,0x1
c0018464:	0f 86 51 01 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846a:	80 fa 1a             	cmp    dl,0x1a
c001846d:	0f 84 37 01 00 00    	je     c00185aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018473:	80 fa 1c             	cmp    dl,0x1c
c0018476:	0f 84 34 01 00 00    	je     c00185b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001847c:	80 fa 1d             	cmp    dl,0x1d
c001847f:	0f 84 36 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018485:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c001848a:	80 fa 25             	cmp    dl,0x25
c001848d:	0f 84 28 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018493:	8d 4a da             	lea    ecx,[edx-0x26]
c0018496:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c001849b:	80 f9 01             	cmp    cl,0x1
c001849e:	0f 86 17 01 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a4:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00184a9:	80 fa 2a             	cmp    dl,0x2a
c00184ac:	0f 84 09 01 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b2:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00184b7:	80 fa 2c             	cmp    dl,0x2c
c00184ba:	0f 84 fb 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c0:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00184c5:	80 fa 2d             	cmp    dl,0x2d
c00184c8:	0f 84 ed 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ce:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00184d3:	80 fa 2e             	cmp    dl,0x2e
c00184d6:	0f 84 df 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184dc:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00184e1:	80 fa 2f             	cmp    dl,0x2f
c00184e4:	0f 84 d1 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ea:	8d 4a cb             	lea    ecx,[edx-0x35]
c00184ed:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00184f2:	80 f9 01             	cmp    cl,0x1
c00184f5:	0f 86 c0 00 00 00    	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fb:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018500:	80 fa 37             	cmp    dl,0x37
c0018503:	0f 84 b2 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018509:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001850e:	80 fa 3a             	cmp    dl,0x3a
c0018511:	0f 84 a4 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018517:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001851c:	80 fa 3c             	cmp    dl,0x3c
c001851f:	0f 84 96 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018525:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001852a:	80 fa 3d             	cmp    dl,0x3d
c001852d:	0f 84 88 00 00 00    	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018533:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018538:	80 fa 3e             	cmp    dl,0x3e
c001853b:	74 7e                	je     c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018540:	3c 01                	cmp    al,0x1
c0018542:	76 72                	jbe    c00185b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018544:	80 fa 3f             	cmp    dl,0x3f
c0018547:	74 6d                	je     c00185b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018549:	80 fa 4a             	cmp    dl,0x4a
c001854c:	74 0a                	je     c0018558 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001854e:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018553:	80 fa 4d             	cmp    dl,0x4d
c0018556:	75 63                	jne    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018558:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c001855d:	c3                   	ret    
c001855e:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c0018563:	80 f9 0b             	cmp    cl,0xb
c0018566:	75 0a                	jne    c0018572 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018568:	fe ca                	dec    dl
c001856a:	75 4f                	jne    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856c:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c0018571:	c3                   	ret    
c0018572:	80 f9 0f             	cmp    cl,0xf
c0018575:	75 44                	jne    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018577:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001857c:	80 fa 02             	cmp    dl,0x2
c001857f:	76 3a                	jbe    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	8d 42 fd             	lea    eax,[edx-0x3]
c0018584:	3c 01                	cmp    al,0x1
c0018586:	76 0a                	jbe    c0018592 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018588:	b8 1e b0 02 c0       	mov    eax,0xc002b01e
c001858d:	80 fa 06             	cmp    dl,0x6
c0018590:	75 29                	jne    c00185bb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018592:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018597:	c3                   	ret    
c0018598:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c001859d:	c3                   	ret    
c001859e:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185a3:	c3                   	ret    
c00185a4:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c00185a9:	c3                   	ret    
c00185aa:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00185af:	c3                   	ret    
c00185b0:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00185b5:	c3                   	ret    
c00185b6:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00185bb:	c3                   	ret    

c00185bc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185bc:	60                   	pusha  
c00185bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00185c9:	9c                   	pushf  
c00185ca:	fa                   	cli    
c00185cb:	0f 09                	wbinvd 
c00185cd:	0f 30                	wrmsr  
c00185cf:	9d                   	popf   
c00185d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185d4:	89 02                	mov    DWORD PTR [edx],eax
c00185d6:	61                   	popa   
c00185d7:	c3                   	ret    

c00185d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00185d8:	60                   	pusha  
c00185d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185dd:	9c                   	pushf  
c00185de:	fa                   	cli    
c00185df:	0f 09                	wbinvd 
c00185e1:	31 c0                	xor    eax,eax
c00185e3:	31 d2                	xor    edx,edx
c00185e5:	0f 32                	rdmsr  
c00185e7:	9d                   	popf   
c00185e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185ec:	89 02                	mov    DWORD PTR [edx],eax
c00185ee:	61                   	popa   
c00185ef:	c3                   	ret    

c00185f0 <CPU::AMD_K6_writeback(int, int, int)>:
c00185f0:	56                   	push   esi
c00185f1:	53                   	push   ebx
c00185f2:	83 ec 10             	sub    esp,0x10
c00185f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00185fe:	75 5d                	jne    c001865d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018600:	83 f8 08             	cmp    eax,0x8
c0018603:	75 09                	jne    c001860e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018605:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001860a:	7e 13                	jle    c001861f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001860c:	eb 30                	jmp    c001863e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001860e:	83 f8 06             	cmp    eax,0x6
c0018611:	7c 4a                	jl     c001865d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018613:	83 f8 07             	cmp    eax,0x7
c0018616:	7e 07                	jle    c001861f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018618:	83 f8 09             	cmp    eax,0x9
c001861b:	74 21                	je     c001863e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001861d:	eb 3e                	jmp    c001865d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001861f:	89 e6                	mov    esi,esp
c0018621:	8b 1d 84 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da84
c0018627:	56                   	push   esi
c0018628:	c1 eb 15             	shr    ebx,0x15
c001862b:	68 82 00 00 c0       	push   0xc0000082
c0018630:	83 e3 7e             	and    ebx,0x7e
c0018633:	e8 a0 ff ff ff       	call   c00185d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018638:	56                   	push   esi
c0018639:	6a 00                	push   0x0
c001863b:	53                   	push   ebx
c001863c:	eb 12                	jmp    c0018650 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001863e:	89 e3                	mov    ebx,esp
c0018640:	53                   	push   ebx
c0018641:	68 82 00 00 c0       	push   0xc0000082
c0018646:	e8 8d ff ff ff       	call   c00185d8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001864b:	53                   	push   ebx
c001864c:	6a 00                	push   0x0
c001864e:	6a 00                	push   0x0
c0018650:	68 82 00 00 c0       	push   0xc0000082
c0018655:	e8 62 ff ff ff       	call   c00185bc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001865a:	83 c4 18             	add    esp,0x18
c001865d:	83 c4 10             	add    esp,0x10
c0018660:	5b                   	pop    ebx
c0018661:	5e                   	pop    esi
c0018662:	c3                   	ret    
c0018663:	90                   	nop

c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018664:	55                   	push   ebp
c0018665:	57                   	push   edi
c0018666:	56                   	push   esi
c0018667:	53                   	push   ebx
c0018668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001866c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018670:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018674:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018678:	39 05 60 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf60,eax
c001867e:	75 23                	jne    c00186a3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018680:	a1 8c 05 03 c0       	mov    eax,ds:0xc003058c
c0018685:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018689:	89 06                	mov    DWORD PTR [esi],eax
c001868b:	a1 88 05 03 c0       	mov    eax,ds:0xc0030588
c0018690:	89 07                	mov    DWORD PTR [edi],eax
c0018692:	a1 84 05 03 c0       	mov    eax,ds:0xc0030584
c0018697:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001869a:	a1 80 05 03 c0       	mov    eax,ds:0xc0030580
c001869f:	89 02                	mov    DWORD PTR [edx],eax
c00186a1:	eb 3f                	jmp    c00186e2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186a3:	31 c9                	xor    ecx,ecx
c00186a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186a9:	0f a2                	cpuid  
c00186ab:	89 06                	mov    DWORD PTR [esi],eax
c00186ad:	89 1f                	mov    DWORD PTR [edi],ebx
c00186af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186b3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186b6:	89 10                	mov    DWORD PTR [eax],edx
c00186b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186bc:	a3 60 cf 02 c0       	mov    ds:0xc002cf60,eax
c00186c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00186c3:	a3 8c 05 03 c0       	mov    ds:0xc003058c,eax
c00186c8:	8b 07                	mov    eax,DWORD PTR [edi]
c00186ca:	a3 88 05 03 c0       	mov    ds:0xc0030588,eax
c00186cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00186d2:	a3 84 05 03 c0       	mov    ds:0xc0030584,eax
c00186d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186db:	8b 00                	mov    eax,DWORD PTR [eax]
c00186dd:	a3 80 05 03 c0       	mov    ds:0xc0030580,eax
c00186e2:	5b                   	pop    ebx
c00186e3:	5e                   	pop    esi
c00186e4:	5f                   	pop    edi
c00186e5:	5d                   	pop    ebp
c00186e6:	c3                   	ret    
c00186e7:	90                   	nop

c00186e8 <CPU::cpuidCheckEDX(unsigned int)>:
c00186e8:	83 ec 10             	sub    esp,0x10
c00186eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ef:	50                   	push   eax
c00186f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f4:	50                   	push   eax
c00186f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f9:	50                   	push   eax
c00186fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186fe:	50                   	push   eax
c00186ff:	6a 01                	push   0x1
c0018701:	e8 5e ff ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018706:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001870a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001870e:	0f 95 c0             	setne  al
c0018711:	83 c4 24             	add    esp,0x24
c0018714:	c3                   	ret    
c0018715:	90                   	nop

c0018716 <CPU::cpuidCheckECX(unsigned int)>:
c0018716:	83 ec 10             	sub    esp,0x10
c0018719:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001871d:	50                   	push   eax
c001871e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018722:	50                   	push   eax
c0018723:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018727:	50                   	push   eax
c0018728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872c:	50                   	push   eax
c001872d:	6a 01                	push   0x1
c001872f:	e8 30 ff ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018734:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018738:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001873c:	0f 95 c0             	setne  al
c001873f:	83 c4 24             	add    esp,0x24
c0018742:	c3                   	ret    
c0018743:	90                   	nop

c0018744 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018744:	83 ec 10             	sub    esp,0x10
c0018747:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001874b:	50                   	push   eax
c001874c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018750:	50                   	push   eax
c0018751:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018755:	50                   	push   eax
c0018756:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875a:	50                   	push   eax
c001875b:	6a 07                	push   0x7
c001875d:	e8 02 ff ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018766:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001876a:	0f 95 c0             	setne  al
c001876d:	83 c4 24             	add    esp,0x24
c0018770:	c3                   	ret    
c0018771:	90                   	nop

c0018772 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018772:	83 ec 10             	sub    esp,0x10
c0018775:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018779:	50                   	push   eax
c001877a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001877e:	50                   	push   eax
c001877f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018783:	50                   	push   eax
c0018784:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018788:	50                   	push   eax
c0018789:	6a 07                	push   0x7
c001878b:	e8 d4 fe ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018790:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018794:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018798:	0f 95 c0             	setne  al
c001879b:	83 c4 24             	add    esp,0x24
c001879e:	c3                   	ret    
c001879f:	90                   	nop

c00187a0 <CPU::CPU()>:
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a7:	83 ec 08             	sub    esp,0x8
c00187aa:	68 1e b0 02 c0       	push   0xc002b01e
c00187af:	50                   	push   eax
c00187b0:	e8 4d b7 ff ff       	call   c0013f02 <Device::Device(char const*)>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	ba f8 b0 02 c0       	mov    edx,0xc002b0f8
c00187bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c1:	89 10                	mov    DWORD PTR [eax],edx
c00187c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00187d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d5:	05 78 01 00 00       	add    eax,0x178
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	50                   	push   eax
c00187de:	e8 51 66 ff ff       	call   c000ee34 <GDT::GDT()>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ea:	05 7c 09 00 00       	add    eax,0x97c
c00187ef:	83 ec 0c             	sub    esp,0xc
c00187f2:	50                   	push   eax
c00187f3:	e8 9e 68 ff ff       	call   c000f096 <IDT::IDT()>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ff:	05 7c 11 00 00       	add    eax,0x117c
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	50                   	push   eax
c0018808:	e8 1f 8a ff ff       	call   c001122c <TSS::TSS()>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018814:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001881f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018829:	90                   	nop
c001882a:	83 c4 0c             	add    esp,0xc
c001882d:	c3                   	ret    

c001882e <CPU::displayFeatures()>:
c001882e:	53                   	push   ebx
c001882f:	83 ec 10             	sub    esp,0x10
c0018832:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018836:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001883c:	68 2c ad 02 c0       	push   0xc002ad2c
c0018841:	e8 a5 a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018846:	59                   	pop    ecx
c0018847:	58                   	pop    eax
c0018848:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001884e:	50                   	push   eax
c001884f:	68 3d ad 02 c0       	push   0xc002ad3d
c0018854:	e8 92 a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018859:	58                   	pop    eax
c001885a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018860:	5a                   	pop    edx
c0018861:	c1 e8 0e             	shr    eax,0xe
c0018864:	0f b6 c0             	movzx  eax,al
c0018867:	50                   	push   eax
c0018868:	68 4e ad 02 c0       	push   0xc002ad4e
c001886d:	e8 79 a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018872:	59                   	pop    ecx
c0018873:	58                   	pop    eax
c0018874:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001887a:	66 c1 e8 06          	shr    ax,0x6
c001887e:	0f b6 c0             	movzx  eax,al
c0018881:	50                   	push   eax
c0018882:	68 5f ad 02 c0       	push   0xc002ad5f
c0018887:	e8 5f a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001888c:	c7 04 24 fb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1fb
c0018893:	e8 53 a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00188a0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00188a7:	74 05                	je     c00188ae <CPU::displayFeatures()+0x80>
c00188a9:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00188ae:	52                   	push   edx
c00188af:	52                   	push   edx
c00188b0:	50                   	push   eax
c00188b1:	68 70 ad 02 c0       	push   0xc002ad70
c00188b6:	e8 30 a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00188bb:	83 c4 10             	add    esp,0x10
c00188be:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00188c3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00188ca:	78 05                	js     c00188d1 <CPU::displayFeatures()+0xa3>
c00188cc:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00188d1:	51                   	push   ecx
c00188d2:	51                   	push   ecx
c00188d3:	50                   	push   eax
c00188d4:	68 87 ad 02 c0       	push   0xc002ad87
c00188d9:	e8 0d a0 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00188de:	83 c4 10             	add    esp,0x10
c00188e1:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00188e6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00188ed:	75 05                	jne    c00188f4 <CPU::displayFeatures()+0xc6>
c00188ef:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00188f4:	52                   	push   edx
c00188f5:	52                   	push   edx
c00188f6:	50                   	push   eax
c00188f7:	68 9e ad 02 c0       	push   0xc002ad9e
c00188fc:	e8 ea 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018901:	83 c4 10             	add    esp,0x10
c0018904:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018909:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018910:	75 05                	jne    c0018917 <CPU::displayFeatures()+0xe9>
c0018912:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018917:	51                   	push   ecx
c0018918:	51                   	push   ecx
c0018919:	50                   	push   eax
c001891a:	68 b5 ad 02 c0       	push   0xc002adb5
c001891f:	e8 c7 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018924:	83 c4 10             	add    esp,0x10
c0018927:	b8 72 97 02 c0       	mov    eax,0xc0029772
c001892c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018933:	75 05                	jne    c001893a <CPU::displayFeatures()+0x10c>
c0018935:	b8 76 97 02 c0       	mov    eax,0xc0029776
c001893a:	52                   	push   edx
c001893b:	52                   	push   edx
c001893c:	50                   	push   eax
c001893d:	68 cc ad 02 c0       	push   0xc002adcc
c0018942:	e8 a4 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018947:	83 c4 10             	add    esp,0x10
c001894a:	b8 72 97 02 c0       	mov    eax,0xc0029772
c001894f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018956:	75 05                	jne    c001895d <CPU::displayFeatures()+0x12f>
c0018958:	b8 76 97 02 c0       	mov    eax,0xc0029776
c001895d:	51                   	push   ecx
c001895e:	51                   	push   ecx
c001895f:	50                   	push   eax
c0018960:	68 e3 ad 02 c0       	push   0xc002ade3
c0018965:	e8 81 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001896a:	83 c4 10             	add    esp,0x10
c001896d:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018972:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018979:	75 05                	jne    c0018980 <CPU::displayFeatures()+0x152>
c001897b:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018980:	52                   	push   edx
c0018981:	52                   	push   edx
c0018982:	50                   	push   eax
c0018983:	68 fa ad 02 c0       	push   0xc002adfa
c0018988:	e8 5e 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001898d:	83 c4 10             	add    esp,0x10
c0018990:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018995:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001899c:	75 05                	jne    c00189a3 <CPU::displayFeatures()+0x175>
c001899e:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00189a3:	51                   	push   ecx
c00189a4:	51                   	push   ecx
c00189a5:	50                   	push   eax
c00189a6:	68 11 ae 02 c0       	push   0xc002ae11
c00189ab:	e8 3b 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00189b0:	83 c4 10             	add    esp,0x10
c00189b3:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00189b8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00189bf:	75 05                	jne    c00189c6 <CPU::displayFeatures()+0x198>
c00189c1:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00189c6:	52                   	push   edx
c00189c7:	52                   	push   edx
c00189c8:	50                   	push   eax
c00189c9:	68 28 ae 02 c0       	push   0xc002ae28
c00189ce:	e8 18 9f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00189d3:	83 c4 10             	add    esp,0x10
c00189d6:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00189db:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00189e2:	75 05                	jne    c00189e9 <CPU::displayFeatures()+0x1bb>
c00189e4:	b8 76 97 02 c0       	mov    eax,0xc0029776
c00189e9:	51                   	push   ecx
c00189ea:	51                   	push   ecx
c00189eb:	50                   	push   eax
c00189ec:	68 3f ae 02 c0       	push   0xc002ae3f
c00189f1:	e8 f5 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00189f6:	83 c4 10             	add    esp,0x10
c00189f9:	b8 72 97 02 c0       	mov    eax,0xc0029772
c00189fe:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018a05:	75 05                	jne    c0018a0c <CPU::displayFeatures()+0x1de>
c0018a07:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018a0c:	52                   	push   edx
c0018a0d:	52                   	push   edx
c0018a0e:	50                   	push   eax
c0018a0f:	68 56 ae 02 c0       	push   0xc002ae56
c0018a14:	e8 d2 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018a19:	83 c4 10             	add    esp,0x10
c0018a1c:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018a21:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018a28:	75 05                	jne    c0018a2f <CPU::displayFeatures()+0x201>
c0018a2a:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018a2f:	51                   	push   ecx
c0018a30:	51                   	push   ecx
c0018a31:	50                   	push   eax
c0018a32:	68 6d ae 02 c0       	push   0xc002ae6d
c0018a37:	e8 af 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018a44:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018a4b:	75 05                	jne    c0018a52 <CPU::displayFeatures()+0x224>
c0018a4d:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018a52:	52                   	push   edx
c0018a53:	52                   	push   edx
c0018a54:	50                   	push   eax
c0018a55:	68 84 ae 02 c0       	push   0xc002ae84
c0018a5a:	e8 8c 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018a5f:	83 c4 10             	add    esp,0x10
c0018a62:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018a67:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018a6e:	78 05                	js     c0018a75 <CPU::displayFeatures()+0x247>
c0018a70:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018a75:	51                   	push   ecx
c0018a76:	51                   	push   ecx
c0018a77:	50                   	push   eax
c0018a78:	68 9b ae 02 c0       	push   0xc002ae9b
c0018a7d:	e8 69 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018a82:	83 c4 10             	add    esp,0x10
c0018a85:	b8 72 97 02 c0       	mov    eax,0xc0029772
c0018a8a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018a91:	75 05                	jne    c0018a98 <CPU::displayFeatures()+0x26a>
c0018a93:	b8 76 97 02 c0       	mov    eax,0xc0029776
c0018a98:	52                   	push   edx
c0018a99:	52                   	push   edx
c0018a9a:	50                   	push   eax
c0018a9b:	68 b2 ae 02 c0       	push   0xc002aeb2
c0018aa0:	e8 46 9e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0018aa5:	83 c4 18             	add    esp,0x18
c0018aa8:	5b                   	pop    ebx
c0018aa9:	c3                   	ret    

c0018aaa <CPU::detectFeatures()>:
c0018aaa:	55                   	push   ebp
c0018aab:	57                   	push   edi
c0018aac:	56                   	push   esi
c0018aad:	53                   	push   ebx
c0018aae:	83 ec 50             	sub    esp,0x50
c0018ab1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018ab5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018abf:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ac6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018acc:	6a 0d                	push   0xd
c0018ace:	6a 00                	push   0x0
c0018ad0:	57                   	push   edi
c0018ad1:	e8 e6 7b fe ff       	call   c00006bc <memset>
c0018ad6:	83 c4 10             	add    esp,0x10
c0018ad9:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0018ade:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ae5:	0f 84 20 09 00 00    	je     c001940b <CPU::detectFeatures()+0x961>
c0018aeb:	83 ec 0c             	sub    esp,0xc
c0018aee:	6a 10                	push   0x10
c0018af0:	e8 f3 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018af5:	83 e0 01             	and    eax,0x1
c0018af8:	8d 14 00             	lea    edx,[eax+eax*1]
c0018afb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b01:	83 e0 fd             	and    eax,0xfffffffd
c0018b04:	09 d0                	or     eax,edx
c0018b06:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b0c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b13:	e8 d0 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018b18:	83 e0 01             	and    eax,0x1
c0018b1b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b22:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b28:	83 e0 fb             	and    eax,0xfffffffb
c0018b2b:	09 d0                	or     eax,edx
c0018b2d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b33:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b3a:	e8 a9 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018b3f:	83 e0 01             	and    eax,0x1
c0018b42:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b49:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b4f:	83 e0 f7             	and    eax,0xfffffff7
c0018b52:	09 d0                	or     eax,edx
c0018b54:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b5a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b61:	e8 82 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018b66:	83 e0 01             	and    eax,0x1
c0018b69:	c1 e0 04             	shl    eax,0x4
c0018b6c:	88 c2                	mov    dl,al
c0018b6e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b74:	83 e0 ef             	and    eax,0xffffffef
c0018b77:	09 d0                	or     eax,edx
c0018b79:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b7f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b86:	e8 5d fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018b8b:	83 e0 01             	and    eax,0x1
c0018b8e:	c1 e0 05             	shl    eax,0x5
c0018b91:	88 c2                	mov    dl,al
c0018b93:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b99:	83 e0 df             	and    eax,0xffffffdf
c0018b9c:	09 d0                	or     eax,edx
c0018b9e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ba4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018bab:	e8 38 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018bb0:	83 e0 01             	and    eax,0x1
c0018bb3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bb6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bbc:	83 e0 fd             	and    eax,0xfffffffd
c0018bbf:	09 d0                	or     eax,edx
c0018bc1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018bc7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018bce:	e8 15 fb ff ff       	call   c00186e8 <CPU::cpuidCheckEDX(unsigned int)>
c0018bd3:	83 e0 01             	and    eax,0x1
c0018bd6:	c1 e0 06             	shl    eax,0x6
c0018bd9:	88 c2                	mov    dl,al
c0018bdb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018be1:	83 e0 bf             	and    eax,0xffffffbf
c0018be4:	09 d0                	or     eax,edx
c0018be6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bec:	58                   	pop    eax
c0018bed:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018bf1:	56                   	push   esi
c0018bf2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018bf6:	55                   	push   ebp
c0018bf7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bfb:	50                   	push   eax
c0018bfc:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018c00:	52                   	push   edx
c0018c01:	6a 00                	push   0x0
c0018c03:	e8 5c fa ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c08:	83 c4 1c             	add    esp,0x1c
c0018c0b:	6a 04                	push   0x4
c0018c0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c11:	50                   	push   eax
c0018c12:	57                   	push   edi
c0018c13:	e8 88 7a fe ff       	call   c00006a0 <memcpy>
c0018c18:	83 c4 0c             	add    esp,0xc
c0018c1b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018c21:	6a 04                	push   0x4
c0018c23:	56                   	push   esi
c0018c24:	50                   	push   eax
c0018c25:	e8 76 7a fe ff       	call   c00006a0 <memcpy>
c0018c2a:	83 c4 0c             	add    esp,0xc
c0018c2d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018c33:	6a 04                	push   0x4
c0018c35:	55                   	push   ebp
c0018c36:	50                   	push   eax
c0018c37:	e8 64 7a fe ff       	call   c00006a0 <memcpy>
c0018c3c:	58                   	pop    eax
c0018c3d:	5a                   	pop    edx
c0018c3e:	68 c9 ae 02 c0       	push   0xc002aec9
c0018c43:	57                   	push   edi
c0018c44:	e8 63 7b fe ff       	call   c00007ac <strcmp>
c0018c49:	83 c4 10             	add    esp,0x10
c0018c4c:	85 c0                	test   eax,eax
c0018c4e:	75 0f                	jne    c0018c5f <CPU::detectFeatures()+0x1b5>
c0018c50:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c5a:	e9 22 02 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018c5f:	50                   	push   eax
c0018c60:	50                   	push   eax
c0018c61:	68 d6 ae 02 c0       	push   0xc002aed6
c0018c66:	57                   	push   edi
c0018c67:	e8 40 7b fe ff       	call   c00007ac <strcmp>
c0018c6c:	83 c4 10             	add    esp,0x10
c0018c6f:	85 c0                	test   eax,eax
c0018c71:	74 dd                	je     c0018c50 <CPU::detectFeatures()+0x1a6>
c0018c73:	51                   	push   ecx
c0018c74:	51                   	push   ecx
c0018c75:	68 e3 ae 02 c0       	push   0xc002aee3
c0018c7a:	57                   	push   edi
c0018c7b:	e8 2c 7b fe ff       	call   c00007ac <strcmp>
c0018c80:	83 c4 10             	add    esp,0x10
c0018c83:	85 c0                	test   eax,eax
c0018c85:	74 2a                	je     c0018cb1 <CPU::detectFeatures()+0x207>
c0018c87:	52                   	push   edx
c0018c88:	52                   	push   edx
c0018c89:	68 f0 ae 02 c0       	push   0xc002aef0
c0018c8e:	57                   	push   edi
c0018c8f:	e8 18 7b fe ff       	call   c00007ac <strcmp>
c0018c94:	83 c4 10             	add    esp,0x10
c0018c97:	85 c0                	test   eax,eax
c0018c99:	74 16                	je     c0018cb1 <CPU::detectFeatures()+0x207>
c0018c9b:	50                   	push   eax
c0018c9c:	50                   	push   eax
c0018c9d:	68 fd ae 02 c0       	push   0xc002aefd
c0018ca2:	57                   	push   edi
c0018ca3:	e8 04 7b fe ff       	call   c00007ac <strcmp>
c0018ca8:	83 c4 10             	add    esp,0x10
c0018cab:	85 c0                	test   eax,eax
c0018cad:	74 48                	je     c0018cf7 <CPU::detectFeatures()+0x24d>
c0018caf:	eb 0f                	jmp    c0018cc0 <CPU::detectFeatures()+0x216>
c0018cb1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cbb:	e9 c1 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018cc0:	50                   	push   eax
c0018cc1:	50                   	push   eax
c0018cc2:	68 0a af 02 c0       	push   0xc002af0a
c0018cc7:	57                   	push   edi
c0018cc8:	e8 df 7a fe ff       	call   c00007ac <strcmp>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	85 c0                	test   eax,eax
c0018cd2:	74 23                	je     c0018cf7 <CPU::detectFeatures()+0x24d>
c0018cd4:	50                   	push   eax
c0018cd5:	50                   	push   eax
c0018cd6:	68 17 af 02 c0       	push   0xc002af17
c0018cdb:	57                   	push   edi
c0018cdc:	e8 cb 7a fe ff       	call   c00007ac <strcmp>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	85 c0                	test   eax,eax
c0018ce6:	75 1e                	jne    c0018d06 <CPU::detectFeatures()+0x25c>
c0018ce8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cf2:	e9 8a 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018cf7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d01:	e9 7b 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018d06:	50                   	push   eax
c0018d07:	50                   	push   eax
c0018d08:	68 24 af 02 c0       	push   0xc002af24
c0018d0d:	57                   	push   edi
c0018d0e:	e8 99 7a fe ff       	call   c00007ac <strcmp>
c0018d13:	83 c4 10             	add    esp,0x10
c0018d16:	85 c0                	test   eax,eax
c0018d18:	75 0f                	jne    c0018d29 <CPU::detectFeatures()+0x27f>
c0018d1a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d24:	e9 58 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018d29:	50                   	push   eax
c0018d2a:	50                   	push   eax
c0018d2b:	68 e3 ae 02 c0       	push   0xc002aee3
c0018d30:	57                   	push   edi
c0018d31:	e8 76 7a fe ff       	call   c00007ac <strcmp>
c0018d36:	83 c4 10             	add    esp,0x10
c0018d39:	85 c0                	test   eax,eax
c0018d3b:	75 0f                	jne    c0018d4c <CPU::detectFeatures()+0x2a2>
c0018d3d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d47:	e9 35 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018d4c:	50                   	push   eax
c0018d4d:	50                   	push   eax
c0018d4e:	68 31 af 02 c0       	push   0xc002af31
c0018d53:	57                   	push   edi
c0018d54:	e8 53 7a fe ff       	call   c00007ac <strcmp>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	85 c0                	test   eax,eax
c0018d5e:	75 0f                	jne    c0018d6f <CPU::detectFeatures()+0x2c5>
c0018d60:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018d6a:	e9 12 01 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018d6f:	51                   	push   ecx
c0018d70:	51                   	push   ecx
c0018d71:	68 3e af 02 c0       	push   0xc002af3e
c0018d76:	57                   	push   edi
c0018d77:	e8 30 7a fe ff       	call   c00007ac <strcmp>
c0018d7c:	83 c4 10             	add    esp,0x10
c0018d7f:	85 c0                	test   eax,eax
c0018d81:	75 0f                	jne    c0018d92 <CPU::detectFeatures()+0x2e8>
c0018d83:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d8d:	e9 ef 00 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018d92:	52                   	push   edx
c0018d93:	52                   	push   edx
c0018d94:	68 4b af 02 c0       	push   0xc002af4b
c0018d99:	57                   	push   edi
c0018d9a:	e8 0d 7a fe ff       	call   c00007ac <strcmp>
c0018d9f:	83 c4 10             	add    esp,0x10
c0018da2:	85 c0                	test   eax,eax
c0018da4:	75 0f                	jne    c0018db5 <CPU::detectFeatures()+0x30b>
c0018da6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018db0:	e9 cc 00 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018db5:	50                   	push   eax
c0018db6:	50                   	push   eax
c0018db7:	68 58 af 02 c0       	push   0xc002af58
c0018dbc:	57                   	push   edi
c0018dbd:	e8 ea 79 fe ff       	call   c00007ac <strcmp>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	85 c0                	test   eax,eax
c0018dc7:	75 0f                	jne    c0018dd8 <CPU::detectFeatures()+0x32e>
c0018dc9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018dd3:	e9 a9 00 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018dd8:	50                   	push   eax
c0018dd9:	50                   	push   eax
c0018dda:	68 65 af 02 c0       	push   0xc002af65
c0018ddf:	57                   	push   edi
c0018de0:	e8 c7 79 fe ff       	call   c00007ac <strcmp>
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	85 c0                	test   eax,eax
c0018dea:	75 0f                	jne    c0018dfb <CPU::detectFeatures()+0x351>
c0018dec:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018df6:	e9 86 00 00 00       	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018dfb:	50                   	push   eax
c0018dfc:	50                   	push   eax
c0018dfd:	68 72 af 02 c0       	push   0xc002af72
c0018e02:	57                   	push   edi
c0018e03:	e8 a4 79 fe ff       	call   c00007ac <strcmp>
c0018e08:	83 c4 10             	add    esp,0x10
c0018e0b:	85 c0                	test   eax,eax
c0018e0d:	75 0c                	jne    c0018e1b <CPU::detectFeatures()+0x371>
c0018e0f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e19:	eb 66                	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018e1b:	50                   	push   eax
c0018e1c:	50                   	push   eax
c0018e1d:	68 7f af 02 c0       	push   0xc002af7f
c0018e22:	57                   	push   edi
c0018e23:	e8 84 79 fe ff       	call   c00007ac <strcmp>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	85 c0                	test   eax,eax
c0018e2d:	75 0c                	jne    c0018e3b <CPU::detectFeatures()+0x391>
c0018e2f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e39:	eb 46                	jmp    c0018e81 <CPU::detectFeatures()+0x3d7>
c0018e3b:	50                   	push   eax
c0018e3c:	50                   	push   eax
c0018e3d:	68 8c af 02 c0       	push   0xc002af8c
c0018e42:	57                   	push   edi
c0018e43:	e8 64 79 fe ff       	call   c00007ac <strcmp>
c0018e48:	83 c4 10             	add    esp,0x10
c0018e4b:	85 c0                	test   eax,eax
c0018e4d:	74 e0                	je     c0018e2f <CPU::detectFeatures()+0x385>
c0018e4f:	50                   	push   eax
c0018e50:	50                   	push   eax
c0018e51:	68 99 af 02 c0       	push   0xc002af99
c0018e56:	57                   	push   edi
c0018e57:	e8 50 79 fe ff       	call   c00007ac <strcmp>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	85 c0                	test   eax,eax
c0018e61:	74 cc                	je     c0018e2f <CPU::detectFeatures()+0x385>
c0018e63:	51                   	push   ecx
c0018e64:	51                   	push   ecx
c0018e65:	68 a6 af 02 c0       	push   0xc002afa6
c0018e6a:	57                   	push   edi
c0018e6b:	e8 3c 79 fe ff       	call   c00007ac <strcmp>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	85 c0                	test   eax,eax
c0018e75:	74 b8                	je     c0018e2f <CPU::detectFeatures()+0x385>
c0018e77:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e81:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e86:	0f 86 be 00 00 00    	jbe    c0018f4a <CPU::detectFeatures()+0x4a0>
c0018e8c:	83 ec 0c             	sub    esp,0xc
c0018e8f:	68 80 00 00 00       	push   0x80
c0018e94:	e8 ab f8 ff ff       	call   c0018744 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e99:	83 e0 01             	and    eax,0x1
c0018e9c:	c1 e0 06             	shl    eax,0x6
c0018e9f:	88 c2                	mov    dl,al
c0018ea1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ea7:	83 e0 bf             	and    eax,0xffffffbf
c0018eaa:	09 d0                	or     eax,edx
c0018eac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eb2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018eb9:	e8 86 f8 ff ff       	call   c0018744 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ebe:	83 e0 01             	and    eax,0x1
c0018ec1:	c1 e0 04             	shl    eax,0x4
c0018ec4:	88 c2                	mov    dl,al
c0018ec6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ecc:	83 e0 ef             	and    eax,0xffffffef
c0018ecf:	09 d0                	or     eax,edx
c0018ed1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ed7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ede:	e8 61 f8 ff ff       	call   c0018744 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ee3:	c1 e0 07             	shl    eax,0x7
c0018ee6:	88 c2                	mov    dl,al
c0018ee8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eee:	83 e0 7f             	and    eax,0x7f
c0018ef1:	09 d0                	or     eax,edx
c0018ef3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ef9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f00:	e8 6d f8 ff ff       	call   c0018772 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f05:	83 e0 01             	and    eax,0x1
c0018f08:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f0f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f15:	83 e0 f7             	and    eax,0xfffffff7
c0018f18:	09 d0                	or     eax,edx
c0018f1a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f20:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f27:	e8 46 f8 ff ff       	call   c0018772 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f2c:	83 c4 10             	add    esp,0x10
c0018f2f:	83 e0 01             	and    eax,0x1
c0018f32:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f39:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f3f:	83 e0 fb             	and    eax,0xfffffffb
c0018f42:	09 d0                	or     eax,edx
c0018f44:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f4a:	83 ec 0c             	sub    esp,0xc
c0018f4d:	56                   	push   esi
c0018f4e:	55                   	push   ebp
c0018f4f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f53:	57                   	push   edi
c0018f54:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f58:	50                   	push   eax
c0018f59:	6a 01                	push   0x1
c0018f5b:	e8 04 f7 ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f64:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f6a:	88 ca                	mov    dl,cl
c0018f6c:	83 e0 f0             	and    eax,0xfffffff0
c0018f6f:	83 e2 0f             	and    edx,0xf
c0018f72:	09 d0                	or     eax,edx
c0018f74:	88 ca                	mov    dl,cl
c0018f76:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f7c:	c0 ea 04             	shr    dl,0x4
c0018f7f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f83:	0f b6 c2             	movzx  eax,dl
c0018f86:	83 c4 20             	add    esp,0x20
c0018f89:	c1 e0 06             	shl    eax,0x6
c0018f8c:	89 c5                	mov    ebp,eax
c0018f8e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f94:	66 25 3f c0          	and    ax,0xc03f
c0018f98:	09 e8                	or     eax,ebp
c0018f9a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fa1:	89 c8                	mov    eax,ecx
c0018fa3:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018fa9:	c1 e8 08             	shr    eax,0x8
c0018fac:	83 e2 3f             	and    edx,0x3f
c0018faf:	83 e0 0f             	and    eax,0xf
c0018fb2:	89 c5                	mov    ebp,eax
c0018fb4:	c1 e5 06             	shl    ebp,0x6
c0018fb7:	09 d5                	or     ebp,edx
c0018fb9:	89 ea                	mov    edx,ebp
c0018fbb:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018fc1:	88 c2                	mov    dl,al
c0018fc3:	c0 ea 02             	shr    dl,0x2
c0018fc6:	89 d5                	mov    ebp,edx
c0018fc8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018fce:	83 e2 c0             	and    edx,0xffffffc0
c0018fd1:	09 d5                	or     ebp,edx
c0018fd3:	89 ea                	mov    edx,ebp
c0018fd5:	89 cd                	mov    ebp,ecx
c0018fd7:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018fdd:	c1 ed 0c             	shr    ebp,0xc
c0018fe0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018fe6:	83 e5 03             	and    ebp,0x3
c0018fe9:	83 e2 cf             	and    edx,0xffffffcf
c0018fec:	c1 e5 04             	shl    ebp,0x4
c0018fef:	09 d5                	or     ebp,edx
c0018ff1:	3c 06                	cmp    al,0x6
c0018ff3:	89 ea                	mov    edx,ebp
c0018ff5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ffb:	74 04                	je     c0019001 <CPU::detectFeatures()+0x557>
c0018ffd:	3c 0f                	cmp    al,0xf
c0018fff:	75 5c                	jne    c001905d <CPU::detectFeatures()+0x5b3>
c0019001:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019005:	89 cd                	mov    ebp,ecx
c0019007:	c1 ed 10             	shr    ebp,0x10
c001900a:	c1 e5 04             	shl    ebp,0x4
c001900d:	09 ea                	or     edx,ebp
c001900f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019015:	0f b6 d2             	movzx  edx,dl
c0019018:	66 81 e5 3f c0       	and    bp,0xc03f
c001901d:	c1 e2 06             	shl    edx,0x6
c0019020:	09 ea                	or     edx,ebp
c0019022:	3c 0f                	cmp    al,0xf
c0019024:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001902b:	75 30                	jne    c001905d <CPU::detectFeatures()+0x5b3>
c001902d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019033:	c1 e9 14             	shr    ecx,0x14
c0019036:	83 e0 3f             	and    eax,0x3f
c0019039:	83 c1 0f             	add    ecx,0xf
c001903c:	88 ca                	mov    dl,cl
c001903e:	c0 e9 02             	shr    cl,0x2
c0019041:	c1 e2 06             	shl    edx,0x6
c0019044:	09 d0                	or     eax,edx
c0019046:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001904c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019052:	83 e0 c0             	and    eax,0xffffffc0
c0019055:	09 c1                	or     ecx,eax
c0019057:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001905d:	83 ec 0c             	sub    esp,0xc
c0019060:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019067:	56                   	push   esi
c0019068:	8d 44 24 28          	lea    eax,[esp+0x28]
c001906c:	50                   	push   eax
c001906d:	57                   	push   edi
c001906e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019072:	55                   	push   ebp
c0019073:	68 00 00 00 80       	push   0x80000000
c0019078:	e8 e7 f5 ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001907d:	83 c4 20             	add    esp,0x20
c0019080:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019088:	8d 44 24 18          	lea    eax,[esp+0x18]
c001908c:	76 1e                	jbe    c00190ac <CPU::detectFeatures()+0x602>
c001908e:	83 ec 0c             	sub    esp,0xc
c0019091:	56                   	push   esi
c0019092:	50                   	push   eax
c0019093:	57                   	push   edi
c0019094:	55                   	push   ebp
c0019095:	68 01 00 00 80       	push   0x80000001
c001909a:	e8 c5 f5 ff ff       	call   c0018664 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001909f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190a9:	83 c4 20             	add    esp,0x20
c00190ac:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190b2:	83 f8 01             	cmp    eax,0x1
c00190b5:	75 6f                	jne    c0019126 <CPU::detectFeatures()+0x67c>
c00190b7:	51                   	push   ecx
c00190b8:	51                   	push   ecx
c00190b9:	68 b2 af 02 c0       	push   0xc002afb2
c00190be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190c2:	56                   	push   esi
c00190c3:	e8 93 76 fe ff       	call   c000075b <strcpy>
c00190c8:	5f                   	pop    edi
c00190c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190cf:	5d                   	pop    ebp
c00190d0:	66 c1 e8 06          	shr    ax,0x6
c00190d4:	0f b6 c0             	movzx  eax,al
c00190d7:	50                   	push   eax
c00190d8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190de:	c1 e8 0e             	shr    eax,0xe
c00190e1:	0f b6 c0             	movzx  eax,al
c00190e4:	50                   	push   eax
c00190e5:	e8 24 f2 ff ff       	call   c001830e <CPU::lookupIntelName(unsigned char, unsigned char)>
c00190ea:	5a                   	pop    edx
c00190eb:	59                   	pop    ecx
c00190ec:	50                   	push   eax
c00190ed:	56                   	push   esi
c00190ee:	e8 1f 77 fe ff       	call   c0000812 <strcat>
c00190f3:	5f                   	pop    edi
c00190f4:	5d                   	pop    ebp
c00190f5:	56                   	push   esi
c00190f6:	53                   	push   ebx
c00190f7:	e8 f8 ad ff ff       	call   c0013ef4 <Device::setName(char const*)>
c00190fc:	58                   	pop    eax
c00190fd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019103:	5a                   	pop    edx
c0019104:	68 b9 af 02 c0       	push   0xc002afb9
c0019109:	50                   	push   eax
c001910a:	e8 9d 76 fe ff       	call   c00007ac <strcmp>
c001910f:	83 c4 10             	add    esp,0x10
c0019112:	85 c0                	test   eax,eax
c0019114:	0f 85 71 03 00 00    	jne    c001948b <CPU::detectFeatures()+0x9e1>
c001911a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019121:	e9 65 03 00 00       	jmp    c001948b <CPU::detectFeatures()+0x9e1>
c0019126:	83 f8 02             	cmp    eax,0x2
c0019129:	0f 85 b5 00 00 00    	jne    c00191e4 <CPU::detectFeatures()+0x73a>
c001912f:	57                   	push   edi
c0019130:	57                   	push   edi
c0019131:	68 cb af 02 c0       	push   0xc002afcb
c0019136:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001913a:	56                   	push   esi
c001913b:	e8 1b 76 fe ff       	call   c000075b <strcpy>
c0019140:	5d                   	pop    ebp
c0019141:	58                   	pop    eax
c0019142:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019148:	66 c1 e8 06          	shr    ax,0x6
c001914c:	0f b6 c0             	movzx  eax,al
c001914f:	50                   	push   eax
c0019150:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019156:	c1 e8 0e             	shr    eax,0xe
c0019159:	0f b6 c0             	movzx  eax,al
c001915c:	50                   	push   eax
c001915d:	e8 18 f0 ff ff       	call   c001817a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019162:	5a                   	pop    edx
c0019163:	59                   	pop    ecx
c0019164:	50                   	push   eax
c0019165:	56                   	push   esi
c0019166:	e8 a7 76 fe ff       	call   c0000812 <strcat>
c001916b:	5f                   	pop    edi
c001916c:	5d                   	pop    ebp
c001916d:	56                   	push   esi
c001916e:	53                   	push   ebx
c001916f:	e8 80 ad ff ff       	call   c0013ef4 <Device::setName(char const*)>
c0019174:	58                   	pop    eax
c0019175:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001917b:	5a                   	pop    edx
c001917c:	68 d0 af 02 c0       	push   0xc002afd0
c0019181:	50                   	push   eax
c0019182:	e8 25 76 fe ff       	call   c00007ac <strcmp>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	85 c0                	test   eax,eax
c001918c:	75 20                	jne    c00191ae <CPU::detectFeatures()+0x704>
c001918e:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c0019194:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001919a:	a8 01                	test   al,0x1
c001919c:	74 10                	je     c00191ae <CPU::detectFeatures()+0x704>
c001919e:	83 e0 fe             	and    eax,0xfffffffe
c00191a1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191a7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191b4:	c1 e8 0e             	shr    eax,0xe
c00191b7:	3c 05                	cmp    al,0x5
c00191b9:	0f 85 cc 02 00 00    	jne    c001948b <CPU::detectFeatures()+0x9e1>
c00191bf:	56                   	push   esi
c00191c0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191c6:	83 e0 0f             	and    eax,0xf
c00191c9:	50                   	push   eax
c00191ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191d0:	66 c1 e8 06          	shr    ax,0x6
c00191d4:	0f b6 c0             	movzx  eax,al
c00191d7:	50                   	push   eax
c00191d8:	6a 05                	push   0x5
c00191da:	e8 11 f4 ff ff       	call   c00185f0 <CPU::AMD_K6_writeback(int, int, int)>
c00191df:	e9 1f 02 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x959>
c00191e4:	8d 50 fd             	lea    edx,[eax-0x3]
c00191e7:	83 fa 01             	cmp    edx,0x1
c00191ea:	76 09                	jbe    c00191f5 <CPU::detectFeatures()+0x74b>
c00191ec:	83 f8 06             	cmp    eax,0x6
c00191ef:	0f 85 91 01 00 00    	jne    c0019386 <CPU::detectFeatures()+0x8dc>
c00191f5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00191fb:	c1 ea 0e             	shr    edx,0xe
c00191fe:	80 fa 05             	cmp    dl,0x5
c0019201:	75 7b                	jne    c001927e <CPU::detectFeatures()+0x7d4>
c0019203:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019209:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001920e:	66 81 fa 00 01       	cmp    dx,0x100
c0019213:	75 0c                	jne    c0019221 <CPU::detectFeatures()+0x777>
c0019215:	51                   	push   ecx
c0019216:	51                   	push   ecx
c0019217:	68 d7 af 02 c0       	push   0xc002afd7
c001921c:	e9 dc 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019221:	66 81 fa 00 02       	cmp    dx,0x200
c0019226:	75 0c                	jne    c0019234 <CPU::detectFeatures()+0x78a>
c0019228:	52                   	push   edx
c0019229:	52                   	push   edx
c001922a:	68 ea af 02 c0       	push   0xc002afea
c001922f:	e9 c9 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019234:	66 81 fa 40 02       	cmp    dx,0x240
c0019239:	75 0c                	jne    c0019247 <CPU::detectFeatures()+0x79d>
c001923b:	50                   	push   eax
c001923c:	50                   	push   eax
c001923d:	68 fc af 02 c0       	push   0xc002affc
c0019242:	e9 b6 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019247:	83 f8 06             	cmp    eax,0x6
c001924a:	75 0c                	jne    c0019258 <CPU::detectFeatures()+0x7ae>
c001924c:	50                   	push   eax
c001924d:	50                   	push   eax
c001924e:	68 0e b0 02 c0       	push   0xc002b00e
c0019253:	e9 a5 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019258:	83 f8 04             	cmp    eax,0x4
c001925b:	75 0c                	jne    c0019269 <CPU::detectFeatures()+0x7bf>
c001925d:	50                   	push   eax
c001925e:	50                   	push   eax
c001925f:	68 1a b0 02 c0       	push   0xc002b01a
c0019264:	e9 94 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019269:	83 f8 03             	cmp    eax,0x3
c001926c:	0f 85 19 02 00 00    	jne    c001948b <CPU::detectFeatures()+0x9e1>
c0019272:	50                   	push   eax
c0019273:	50                   	push   eax
c0019274:	68 22 b0 02 c0       	push   0xc002b022
c0019279:	e9 7f 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c001927e:	80 fa 06             	cmp    dl,0x6
c0019281:	0f 85 db 00 00 00    	jne    c0019362 <CPU::detectFeatures()+0x8b8>
c0019287:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001928d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019292:	66 81 fa 80 01       	cmp    dx,0x180
c0019297:	75 0c                	jne    c00192a5 <CPU::detectFeatures()+0x7fb>
c0019299:	50                   	push   eax
c001929a:	50                   	push   eax
c001929b:	68 2d b0 02 c0       	push   0xc002b02d
c00192a0:	e9 58 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00192a5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192ab:	66 f7 c1 80 ff       	test   cx,0xff80
c00192b0:	75 0c                	jne    c00192be <CPU::detectFeatures()+0x814>
c00192b2:	50                   	push   eax
c00192b3:	50                   	push   eax
c00192b4:	68 3d b0 02 c0       	push   0xc002b03d
c00192b9:	e9 3f 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00192be:	66 81 fa 40 02       	cmp    dx,0x240
c00192c3:	75 0c                	jne    c00192d1 <CPU::detectFeatures()+0x827>
c00192c5:	55                   	push   ebp
c00192c6:	55                   	push   ebp
c00192c7:	68 44 b0 02 c0       	push   0xc002b044
c00192cc:	e9 2c 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00192d1:	66 81 fa 80 02       	cmp    dx,0x280
c00192d6:	75 0c                	jne    c00192e4 <CPU::detectFeatures()+0x83a>
c00192d8:	57                   	push   edi
c00192d9:	57                   	push   edi
c00192da:	68 4d b0 02 c0       	push   0xc002b04d
c00192df:	e9 19 01 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00192e4:	66 81 fa 40 03       	cmp    dx,0x340
c00192e9:	74 ed                	je     c00192d8 <CPU::detectFeatures()+0x82e>
c00192eb:	66 81 fa c0 03       	cmp    dx,0x3c0
c00192f0:	75 0c                	jne    c00192fe <CPU::detectFeatures()+0x854>
c00192f2:	56                   	push   esi
c00192f3:	56                   	push   esi
c00192f4:	68 54 b0 02 c0       	push   0xc002b054
c00192f9:	e9 ff 00 00 00       	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00192fe:	83 f8 06             	cmp    eax,0x6
c0019301:	0f 84 45 ff ff ff    	je     c001924c <CPU::detectFeatures()+0x7a2>
c0019307:	83 f8 04             	cmp    eax,0x4
c001930a:	0f 84 4d ff ff ff    	je     c001925d <CPU::detectFeatures()+0x7b3>
c0019310:	83 f8 03             	cmp    eax,0x3
c0019313:	0f 85 72 01 00 00    	jne    c001948b <CPU::detectFeatures()+0x9e1>
c0019319:	51                   	push   ecx
c001931a:	51                   	push   ecx
c001931b:	68 5d b0 02 c0       	push   0xc002b05d
c0019320:	53                   	push   ebx
c0019321:	e8 ce ab ff ff       	call   c0013ef4 <Device::setName(char const*)>
c0019326:	b1 c1                	mov    cl,0xc1
c0019328:	88 c8                	mov    al,cl
c001932a:	e6 22                	out    0x22,al
c001932c:	e4 23                	in     al,0x23
c001932e:	88 c2                	mov    dl,al
c0019330:	88 c8                	mov    al,cl
c0019332:	e6 22                	out    0x22,al
c0019334:	88 d0                	mov    al,dl
c0019336:	83 c8 10             	or     eax,0x10
c0019339:	e6 23                	out    0x23,al
c001933b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019342:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019345:	89 d0                	mov    eax,edx
c0019347:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001934d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019351:	40                   	inc    eax
c0019352:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019358:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001935d:	e9 a1 00 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x959>
c0019362:	83 f8 06             	cmp    eax,0x6
c0019365:	0f 84 e1 fe ff ff    	je     c001924c <CPU::detectFeatures()+0x7a2>
c001936b:	83 f8 04             	cmp    eax,0x4
c001936e:	0f 84 e9 fe ff ff    	je     c001925d <CPU::detectFeatures()+0x7b3>
c0019374:	83 f8 03             	cmp    eax,0x3
c0019377:	0f 85 0e 01 00 00    	jne    c001948b <CPU::detectFeatures()+0x9e1>
c001937d:	52                   	push   edx
c001937e:	52                   	push   edx
c001937f:	68 68 b0 02 c0       	push   0xc002b068
c0019384:	eb 77                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019386:	83 f8 07             	cmp    eax,0x7
c0019389:	75 09                	jne    c0019394 <CPU::detectFeatures()+0x8ea>
c001938b:	50                   	push   eax
c001938c:	50                   	push   eax
c001938d:	68 72 b0 02 c0       	push   0xc002b072
c0019392:	eb 69                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c0019394:	83 f8 0a             	cmp    eax,0xa
c0019397:	75 09                	jne    c00193a2 <CPU::detectFeatures()+0x8f8>
c0019399:	50                   	push   eax
c001939a:	50                   	push   eax
c001939b:	68 7d b0 02 c0       	push   0xc002b07d
c00193a0:	eb 5b                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193a2:	83 f8 0b             	cmp    eax,0xb
c00193a5:	75 09                	jne    c00193b0 <CPU::detectFeatures()+0x906>
c00193a7:	50                   	push   eax
c00193a8:	50                   	push   eax
c00193a9:	68 85 b0 02 c0       	push   0xc002b085
c00193ae:	eb 4d                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193b0:	83 f8 08             	cmp    eax,0x8
c00193b3:	75 09                	jne    c00193be <CPU::detectFeatures()+0x914>
c00193b5:	50                   	push   eax
c00193b6:	50                   	push   eax
c00193b7:	68 8e b0 02 c0       	push   0xc002b08e
c00193bc:	eb 3f                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193be:	83 f8 09             	cmp    eax,0x9
c00193c1:	75 09                	jne    c00193cc <CPU::detectFeatures()+0x922>
c00193c3:	50                   	push   eax
c00193c4:	50                   	push   eax
c00193c5:	68 96 b0 02 c0       	push   0xc002b096
c00193ca:	eb 31                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193cc:	83 f8 05             	cmp    eax,0x5
c00193cf:	75 09                	jne    c00193da <CPU::detectFeatures()+0x930>
c00193d1:	50                   	push   eax
c00193d2:	50                   	push   eax
c00193d3:	68 9e b0 02 c0       	push   0xc002b09e
c00193d8:	eb 23                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193da:	83 f8 0c             	cmp    eax,0xc
c00193dd:	75 09                	jne    c00193e8 <CPU::detectFeatures()+0x93e>
c00193df:	55                   	push   ebp
c00193e0:	55                   	push   ebp
c00193e1:	68 ac b0 02 c0       	push   0xc002b0ac
c00193e6:	eb 15                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193e8:	83 f8 0d             	cmp    eax,0xd
c00193eb:	75 09                	jne    c00193f6 <CPU::detectFeatures()+0x94c>
c00193ed:	57                   	push   edi
c00193ee:	57                   	push   edi
c00193ef:	68 b7 b0 02 c0       	push   0xc002b0b7
c00193f4:	eb 07                	jmp    c00193fd <CPU::detectFeatures()+0x953>
c00193f6:	56                   	push   esi
c00193f7:	56                   	push   esi
c00193f8:	68 cb b0 02 c0       	push   0xc002b0cb
c00193fd:	53                   	push   ebx
c00193fe:	e8 f1 aa ff ff       	call   c0013ef4 <Device::setName(char const*)>
c0019403:	83 c4 10             	add    esp,0x10
c0019406:	e9 80 00 00 00       	jmp    c001948b <CPU::detectFeatures()+0x9e1>
c001940b:	51                   	push   ecx
c001940c:	51                   	push   ecx
c001940d:	68 17 af 02 c0       	push   0xc002af17
c0019412:	57                   	push   edi
c0019413:	e8 43 73 fe ff       	call   c000075b <strcpy>
c0019418:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019422:	e8 87 6e fe ff       	call   c00002ae <is486>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	85 c0                	test   eax,eax
c001942c:	74 2b                	je     c0019459 <CPU::detectFeatures()+0x9af>
c001942e:	52                   	push   edx
c001942f:	52                   	push   edx
c0019430:	68 d7 b0 02 c0       	push   0xc002b0d7
c0019435:	53                   	push   ebx
c0019436:	e8 b9 aa ff ff       	call   c0013ef4 <Device::setName(char const*)>
c001943b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019442:	0f 20 c0             	mov    eax,cr0
c0019445:	83 e0 14             	and    eax,0x14
c0019448:	83 c4 10             	add    esp,0x10
c001944b:	83 f8 04             	cmp    eax,0x4
c001944e:	75 1f                	jne    c001946f <CPU::detectFeatures()+0x9c5>
c0019450:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019457:	eb 32                	jmp    c001948b <CPU::detectFeatures()+0x9e1>
c0019459:	50                   	push   eax
c001945a:	50                   	push   eax
c001945b:	68 e2 b0 02 c0       	push   0xc002b0e2
c0019460:	53                   	push   ebx
c0019461:	e8 8e aa ff ff       	call   c0013ef4 <Device::setName(char const*)>
c0019466:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001946d:	eb d3                	jmp    c0019442 <CPU::detectFeatures()+0x998>
c001946f:	e8 15 6e fe ff       	call   c0000289 <hasLegacyFPU>
c0019474:	83 e0 01             	and    eax,0x1
c0019477:	8d 14 00             	lea    edx,[eax+eax*1]
c001947a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019480:	83 e0 fd             	and    eax,0xfffffffd
c0019483:	09 d0                	or     eax,edx
c0019485:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001948b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019492:	83 c4 4c             	add    esp,0x4c
c0019495:	5b                   	pop    ebx
c0019496:	5e                   	pop    esi
c0019497:	5f                   	pop    edi
c0019498:	5d                   	pop    ebp
c0019499:	c3                   	ret    

c001949a <CPU::setupSMEP()>:
c001949a:	0f 20 e0             	mov    eax,cr4
c001949d:	0d 00 00 10 00       	or     eax,0x100000
c00194a2:	0f 22 e0             	mov    cr4,eax
c00194a5:	c3                   	ret    

c00194a6 <CPU::setupUMIP()>:
c00194a6:	0f 20 e0             	mov    eax,cr4
c00194a9:	80 cc 08             	or     ah,0x8
c00194ac:	0f 22 e0             	mov    cr4,eax
c00194af:	c3                   	ret    

c00194b0 <CPU::setupTSC()>:
c00194b0:	0f 20 e0             	mov    eax,cr4
c00194b3:	83 c8 04             	or     eax,0x4
c00194b6:	0f 22 e0             	mov    cr4,eax
c00194b9:	c3                   	ret    

c00194ba <CPU::setupLargePages()>:
c00194ba:	0f 20 e0             	mov    eax,cr4
c00194bd:	83 c8 10             	or     eax,0x10
c00194c0:	0f 22 e0             	mov    cr4,eax
c00194c3:	c3                   	ret    

c00194c4 <CPU::setupPAT()>:
c00194c4:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00194c9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00194d0:	74 2c                	je     c00194fe <CPU::setupPAT()+0x3a>
c00194d2:	53                   	push   ebx
c00194d3:	83 ec 10             	sub    esp,0x10
c00194d6:	68 77 02 00 00       	push   0x277
c00194db:	50                   	push   eax
c00194dc:	e8 e3 56 ff ff       	call   c000ebc4 <Computer::rdmsr(unsigned int)>
c00194e1:	83 e2 f8             	and    edx,0xfffffff8
c00194e4:	83 ca 01             	or     edx,0x1
c00194e7:	52                   	push   edx
c00194e8:	50                   	push   eax
c00194e9:	68 77 02 00 00       	push   0x277
c00194ee:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c00194f4:	e8 f7 56 ff ff       	call   c000ebf0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00194f9:	83 c4 28             	add    esp,0x28
c00194fc:	5b                   	pop    ebx
c00194fd:	c3                   	ret    
c00194fe:	c3                   	ret    
c00194ff:	90                   	nop

c0019500 <CPU::setupMTRR()>:
c0019500:	c3                   	ret    
c0019501:	90                   	nop

c0019502 <CPU::setupGlobalPages()>:
c0019502:	0f 20 e0             	mov    eax,cr4
c0019505:	0c 80                	or     al,0x80
c0019507:	0f 22 e0             	mov    cr4,eax
c001950a:	c3                   	ret    
c001950b:	90                   	nop

c001950c <CPU::allowUsermodeDataAccess()>:
c001950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019510:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019517:	74 03                	je     c001951c <CPU::allowUsermodeDataAccess()+0x10>
c0019519:	0f 01 cb             	stac   
c001951c:	c3                   	ret    
c001951d:	90                   	nop

c001951e <CPU::prohibitUsermodeDataAccess()>:
c001951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019522:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019529:	74 03                	je     c001952e <CPU::prohibitUsermodeDataAccess()+0x10>
c001952b:	0f 01 ca             	clac   
c001952e:	c3                   	ret    
c001952f:	90                   	nop

c0019530 <CPU::setupSMAP()>:
c0019530:	0f 20 e0             	mov    eax,cr4
c0019533:	0d 00 00 20 00       	or     eax,0x200000
c0019538:	0f 22 e0             	mov    cr4,eax
c001953b:	eb e1                	jmp    c001951e <CPU::prohibitUsermodeDataAccess()>
c001953d:	90                   	nop

c001953e <CPU::setupFeatures()>:
c001953e:	83 ec 0c             	sub    esp,0xc
c0019541:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019545:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001954c:	74 07                	je     c0019555 <CPU::setupFeatures()+0x17>
c001954e:	52                   	push   edx
c001954f:	e8 46 ff ff ff       	call   c001949a <CPU::setupSMEP()>
c0019554:	58                   	pop    eax
c0019555:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001955c:	74 07                	je     c0019565 <CPU::setupFeatures()+0x27>
c001955e:	52                   	push   edx
c001955f:	e8 cc ff ff ff       	call   c0019530 <CPU::setupSMAP()>
c0019564:	58                   	pop    eax
c0019565:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001956c:	74 07                	je     c0019575 <CPU::setupFeatures()+0x37>
c001956e:	52                   	push   edx
c001956f:	e8 32 ff ff ff       	call   c00194a6 <CPU::setupUMIP()>
c0019574:	58                   	pop    eax
c0019575:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001957c:	74 07                	je     c0019585 <CPU::setupFeatures()+0x47>
c001957e:	52                   	push   edx
c001957f:	e8 2c ff ff ff       	call   c00194b0 <CPU::setupTSC()>
c0019584:	58                   	pop    eax
c0019585:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001958c:	74 07                	je     c0019595 <CPU::setupFeatures()+0x57>
c001958e:	52                   	push   edx
c001958f:	e8 26 ff ff ff       	call   c00194ba <CPU::setupLargePages()>
c0019594:	59                   	pop    ecx
c0019595:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001959c:	74 07                	je     c00195a5 <CPU::setupFeatures()+0x67>
c001959e:	52                   	push   edx
c001959f:	e8 5e ff ff ff       	call   c0019502 <CPU::setupGlobalPages()>
c00195a4:	58                   	pop    eax
c00195a5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195ac:	74 0c                	je     c00195ba <CPU::setupFeatures()+0x7c>
c00195ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195b2:	83 c4 0c             	add    esp,0xc
c00195b5:	e9 0a ff ff ff       	jmp    c00194c4 <CPU::setupPAT()>
c00195ba:	83 c4 0c             	add    esp,0xc
c00195bd:	c3                   	ret    

c00195be <CPU::open(int, int, void*)>:
c00195be:	57                   	push   edi
c00195bf:	56                   	push   esi
c00195c0:	53                   	push   ebx
c00195c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195c9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00195cf:	83 ec 0c             	sub    esp,0xc
c00195d2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00195d8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00195de:	50                   	push   eax
c00195df:	e8 cc 58 ff ff       	call   c000eeb0 <GDT::setup()>
c00195e4:	83 c4 0c             	add    esp,0xc
c00195e7:	6a 00                	push   0x0
c00195e9:	68 ef be ad de       	push   0xdeadbeef
c00195ee:	57                   	push   edi
c00195ef:	e8 78 7c ff ff       	call   c001126c <TSS::setup(unsigned long, unsigned long)>
c00195f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00195f7:	e8 50 7c ff ff       	call   c001124c <TSS::flush()>
c00195fc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019602:	89 04 24             	mov    DWORD PTR [esp],eax
c0019605:	e8 02 5b ff ff       	call   c000f10c <IDT::setup()>
c001960a:	b8 00 04 00 00       	mov    eax,0x400
c001960f:	0f 23 f8             	mov    db7,eax
c0019612:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001961c:	e8 98 66 ff ff       	call   c000fcb9 <Phys::allocatePage()>
c0019621:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019627:	89 30                	mov    DWORD PTR [eax],esi
c0019629:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001962f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019632:	58                   	pop    eax
c0019633:	5a                   	pop    edx
c0019634:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001963a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001963e:	e8 5b 8c ff ff       	call   c001229e <VAS::setCPUSpecific(unsigned long)>
c0019643:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019646:	e8 5f f4 ff ff       	call   c0018aaa <CPU::detectFeatures()>
c001964b:	e8 6d bc ff ff       	call   c00152bd <setupInterruptController()>
c0019650:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019656:	a1 60 da 02 c0       	mov    eax,ds:0xc002da60
c001965b:	83 e0 10             	and    eax,0x10
c001965e:	83 f8 01             	cmp    eax,0x1
c0019661:	19 c0                	sbb    eax,eax
c0019663:	83 e0 46             	and    eax,0x46
c0019666:	83 c0 1e             	add    eax,0x1e
c0019669:	89 04 24             	mov    DWORD PTR [esp],eax
c001966c:	e8 2b d1 ff ff       	call   c001679c <setupTimer(int)>
c0019671:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001967a:	e8 bf fe ff ff       	call   c001953e <CPU::setupFeatures()>
c001967f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019682:	e8 a7 f1 ff ff       	call   c001882e <CPU::displayFeatures()>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	31 c0                	xor    eax,eax
c001968c:	5b                   	pop    ebx
c001968d:	5e                   	pop    esi
c001968e:	5f                   	pop    edi
c001968f:	c3                   	ret    

c0019690 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019690:	57                   	push   edi
c0019691:	56                   	push   esi
c0019692:	53                   	push   ebx
c0019693:	51                   	push   ecx
c0019694:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019698:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001969b:	0f 02 c0             	lar    eax,ax
c001969e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00196a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196a5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196a8:	88 ca                	mov    dl,cl
c00196aa:	c0 ea 06             	shr    dl,0x6
c00196ad:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196b1:	89 ca                	mov    edx,ecx
c00196b3:	66 c1 ea 03          	shr    dx,0x3
c00196b7:	83 e2 07             	and    edx,0x7
c00196ba:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196bf:	88 17                	mov    BYTE PTR [edi],dl
c00196c1:	0f 84 a6 01 00 00    	je     c001986d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00196c7:	83 e1 07             	and    ecx,0x7
c00196ca:	80 f9 04             	cmp    cl,0x4
c00196cd:	0f 84 98 00 00 00    	je     c001976b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00196d3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196d8:	0f 95 c0             	setne  al
c00196db:	80 f9 05             	cmp    cl,0x5
c00196de:	0f 95 c2             	setne  dl
c00196e1:	08 c2                	or     dl,al
c00196e3:	74 79                	je     c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00196e5:	84 c9                	test   cl,cl
c00196e7:	75 05                	jne    c00196ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00196e9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196ec:	eb 3c                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196ee:	80 f9 01             	cmp    cl,0x1
c00196f1:	75 05                	jne    c00196f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00196f3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196f6:	eb 32                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196f8:	80 f9 02             	cmp    cl,0x2
c00196fb:	75 05                	jne    c0019702 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00196fd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019700:	eb 28                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019702:	31 c0                	xor    eax,eax
c0019704:	80 f9 03             	cmp    cl,0x3
c0019707:	75 05                	jne    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019709:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001970c:	eb 1c                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001970e:	80 f9 05             	cmp    cl,0x5
c0019711:	75 05                	jne    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019713:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019716:	eb 12                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019718:	80 f9 06             	cmp    cl,0x6
c001971b:	75 05                	jne    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001971d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019720:	eb 08                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019722:	80 f9 07             	cmp    cl,0x7
c0019725:	75 03                	jne    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019727:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001972a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001972f:	75 10                	jne    c0019741 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019731:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019735:	b9 03 00 00 00       	mov    ecx,0x3
c001973a:	01 d0                	add    eax,edx
c001973c:	e9 37 01 00 00       	jmp    c0019878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019741:	b9 02 00 00 00       	mov    ecx,0x2
c0019746:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001974b:	0f 85 27 01 00 00    	jne    c0019878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019751:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019754:	b9 06 00 00 00       	mov    ecx,0x6
c0019759:	e9 1a 01 00 00       	jmp    c0019878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001975e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019761:	b9 06 00 00 00       	mov    ecx,0x6
c0019766:	e9 0f 01 00 00       	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001976b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001976e:	88 ca                	mov    dl,cl
c0019770:	c0 ea 06             	shr    dl,0x6
c0019773:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019777:	89 ca                	mov    edx,ecx
c0019779:	66 c1 ea 03          	shr    dx,0x3
c001977d:	83 e2 07             	and    edx,0x7
c0019780:	80 e1 07             	and    cl,0x7
c0019783:	75 05                	jne    c001978a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019785:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019788:	eb 4c                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001978a:	80 f9 01             	cmp    cl,0x1
c001978d:	75 05                	jne    c0019794 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001978f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019792:	eb 42                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019794:	80 f9 02             	cmp    cl,0x2
c0019797:	75 05                	jne    c001979e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019799:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001979c:	eb 38                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001979e:	80 f9 03             	cmp    cl,0x3
c00197a1:	75 05                	jne    c00197a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00197a3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197a6:	eb 2e                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197a8:	80 f9 04             	cmp    cl,0x4
c00197ab:	75 12                	jne    c00197bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197ad:	f6 c4 60             	test   ah,0x60
c00197b0:	75 08                	jne    c00197ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197b5:	8d 78 14             	lea    edi,[eax+0x14]
c00197b8:	eb 1c                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197ba:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197bd:	eb 17                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197bf:	80 f9 05             	cmp    cl,0x5
c00197c2:	75 05                	jne    c00197c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197c4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00197c7:	eb 0d                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c9:	80 f9 06             	cmp    cl,0x6
c00197cc:	75 05                	jne    c00197d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00197ce:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00197d1:	eb 03                	jmp    c00197d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197d3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00197d6:	84 d2                	test   dl,dl
c00197d8:	75 05                	jne    c00197df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00197da:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197dd:	eb 3c                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197df:	80 fa 01             	cmp    dl,0x1
c00197e2:	75 05                	jne    c00197e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00197e4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197e7:	eb 32                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197e9:	80 fa 02             	cmp    dl,0x2
c00197ec:	75 05                	jne    c00197f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00197ee:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00197f1:	eb 28                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197f3:	80 fa 03             	cmp    dl,0x3
c00197f6:	75 05                	jne    c00197fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00197f8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00197fb:	eb 1e                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197fd:	31 c0                	xor    eax,eax
c00197ff:	80 fa 04             	cmp    dl,0x4
c0019802:	74 17                	je     c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019804:	80 fa 05             	cmp    dl,0x5
c0019807:	75 05                	jne    c001980e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019809:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001980c:	eb 0d                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001980e:	80 fa 06             	cmp    dl,0x6
c0019811:	75 05                	jne    c0019818 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019813:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019816:	eb 03                	jmp    c001981b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019818:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001981b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019820:	0f 94 c2             	sete   dl
c0019823:	80 f9 05             	cmp    cl,0x5
c0019826:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001982a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001982f:	d3 e0                	shl    eax,cl
c0019831:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019835:	74 0a                	je     c0019841 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019837:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001983a:	b9 07 00 00 00       	mov    ecx,0x7
c001983f:	eb 37                	jmp    c0019878 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019841:	01 f8                	add    eax,edi
c0019843:	b9 03 00 00 00       	mov    ecx,0x3
c0019848:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001984d:	74 2b                	je     c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001984f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019854:	75 0d                	jne    c0019863 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019856:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001985a:	01 c8                	add    eax,ecx
c001985c:	b9 04 00 00 00       	mov    ecx,0x4
c0019861:	eb 17                	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019863:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019866:	b9 07 00 00 00       	mov    ecx,0x7
c001986b:	eb 0d                	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001986d:	b9 02 00 00 00       	mov    ecx,0x2
c0019872:	b2 01                	mov    dl,0x1
c0019874:	31 c0                	xor    eax,eax
c0019876:	eb 02                	jmp    c001987a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019878:	31 d2                	xor    edx,edx
c001987a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001987e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019880:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019884:	88 11                	mov    BYTE PTR [ecx],dl
c0019886:	5a                   	pop    edx
c0019887:	5b                   	pop    ebx
c0019888:	5e                   	pop    esi
c0019889:	5f                   	pop    edi
c001988a:	c3                   	ret    
c001988b:	90                   	nop

c001988c <EnvVarContainer::getEnv(char const*)>:
c001988c:	57                   	push   edi
c001988d:	56                   	push   esi
c001988e:	53                   	push   ebx
c001988f:	31 db                	xor    ebx,ebx
c0019891:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019895:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019897:	7e 2b                	jle    c00198c4 <EnvVarContainer::getEnv(char const*)+0x38>
c0019899:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198a0:	50                   	push   eax
c00198a1:	50                   	push   eax
c00198a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198ac:	e8 fb 6e fe ff       	call   c00007ac <strcmp>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	85 c0                	test   eax,eax
c00198b6:	75 09                	jne    c00198c1 <EnvVarContainer::getEnv(char const*)+0x35>
c00198b8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198bb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198bf:	eb 05                	jmp    c00198c6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198c1:	43                   	inc    ebx
c00198c2:	eb d1                	jmp    c0019895 <EnvVarContainer::getEnv(char const*)+0x9>
c00198c4:	31 c0                	xor    eax,eax
c00198c6:	5b                   	pop    ebx
c00198c7:	5e                   	pop    esi
c00198c8:	5f                   	pop    edi
c00198c9:	c3                   	ret    

c00198ca <EnvVarContainer::setEnv(char const*, char const*)>:
c00198ca:	57                   	push   edi
c00198cb:	56                   	push   esi
c00198cc:	53                   	push   ebx
c00198cd:	83 ec 1c             	sub    esp,0x1c
c00198d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00198d4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00198d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00198dc:	57                   	push   edi
c00198dd:	e8 f7 6d fe ff       	call   c00006d9 <strlen>
c00198e2:	40                   	inc    eax
c00198e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e6:	e8 31 5d ff ff       	call   c000f61c <malloc>
c00198eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00198ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198f2:	e8 e2 6d fe ff       	call   c00006d9 <strlen>
c00198f7:	40                   	inc    eax
c00198f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00198fb:	e8 1c 5d ff ff       	call   c000f61c <malloc>
c0019900:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019907:	e8 cd 6d fe ff       	call   c00006d9 <strlen>
c001990c:	83 c4 0c             	add    esp,0xc
c001990f:	40                   	inc    eax
c0019910:	50                   	push   eax
c0019911:	6a 00                	push   0x0
c0019913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019917:	e8 a0 6d fe ff       	call   c00006bc <memset>
c001991c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001991f:	e8 b5 6d fe ff       	call   c00006d9 <strlen>
c0019924:	83 c4 0c             	add    esp,0xc
c0019927:	40                   	inc    eax
c0019928:	50                   	push   eax
c0019929:	57                   	push   edi
c001992a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001992e:	e8 6d 6d fe ff       	call   c00006a0 <memcpy>
c0019933:	89 34 24             	mov    DWORD PTR [esp],esi
c0019936:	e8 9e 6d fe ff       	call   c00006d9 <strlen>
c001993b:	83 c4 0c             	add    esp,0xc
c001993e:	40                   	inc    eax
c001993f:	50                   	push   eax
c0019940:	6a 00                	push   0x0
c0019942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019946:	e8 71 6d fe ff       	call   c00006bc <memset>
c001994b:	89 34 24             	mov    DWORD PTR [esp],esi
c001994e:	e8 86 6d fe ff       	call   c00006d9 <strlen>
c0019953:	83 c4 0c             	add    esp,0xc
c0019956:	40                   	inc    eax
c0019957:	50                   	push   eax
c0019958:	56                   	push   esi
c0019959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001995d:	e8 3e 6d fe ff       	call   c00006a0 <memcpy>
c0019962:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019964:	40                   	inc    eax
c0019965:	89 03                	mov    DWORD PTR [ebx],eax
c0019967:	c1 e0 03             	shl    eax,0x3
c001996a:	5a                   	pop    edx
c001996b:	59                   	pop    ecx
c001996c:	50                   	push   eax
c001996d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019970:	e8 93 5c ff ff       	call   c000f608 <realloc>
c0019975:	83 c4 0c             	add    esp,0xc
c0019978:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001997b:	6a 08                	push   0x8
c001997d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019981:	52                   	push   edx
c0019982:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019984:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019988:	50                   	push   eax
c0019989:	e8 12 6d fe ff       	call   c00006a0 <memcpy>
c001998e:	83 c4 20             	add    esp,0x20
c0019991:	5b                   	pop    ebx
c0019992:	5e                   	pop    esi
c0019993:	5f                   	pop    edi
c0019994:	c3                   	ret    
c0019995:	90                   	nop

c0019996 <EnvVarContainer::deleteEnv(char const*)>:
c0019996:	c3                   	ret    
c0019997:	90                   	nop

c0019998 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019998:	55                   	push   ebp
c0019999:	57                   	push   edi
c001999a:	56                   	push   esi
c001999b:	53                   	push   ebx
c001999c:	81 ec 38 01 00 00    	sub    esp,0x138
c00199a2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00199a9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00199b0:	68 14 01 00 00       	push   0x114
c00199b5:	e8 62 5c ff ff       	call   c000f61c <malloc>
c00199ba:	83 c4 0c             	add    esp,0xc
c00199bd:	89 c7                	mov    edi,eax
c00199bf:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00199c2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199c9:	50                   	push   eax
c00199ca:	e8 75 94 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c00199cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199d2:	e8 3f 97 ff ff       	call   c0013116 <File::exists()>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	84 c0                	test   al,al
c00199dc:	75 31                	jne    c0019a0f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199de:	51                   	push   ecx
c00199df:	51                   	push   ecx
c00199e0:	6a 12                	push   0x12
c00199e2:	57                   	push   edi
c00199e3:	e8 c0 94 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c00199e8:	8b 07                	mov    eax,DWORD PTR [edi]
c00199ea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00199ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00199f0:	e8 e4 6c fe ff       	call   c00006d9 <strlen>
c00199f5:	5a                   	pop    edx
c00199f6:	31 d2                	xor    edx,edx
c00199f8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00199fc:	51                   	push   ecx
c00199fd:	55                   	push   ebp
c00199fe:	52                   	push   edx
c00199ff:	50                   	push   eax
c0019a00:	57                   	push   edi
c0019a01:	ff d3                	call   ebx
c0019a03:	83 c4 14             	add    esp,0x14
c0019a06:	57                   	push   edi
c0019a07:	e8 fa 94 ff ff       	call   c0012f06 <File::close()>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	31 db                	xor    ebx,ebx
c0019a11:	50                   	push   eax
c0019a12:	31 ed                	xor    ebp,ebp
c0019a14:	68 00 01 00 00       	push   0x100
c0019a19:	6a 00                	push   0x0
c0019a1b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a1f:	50                   	push   eax
c0019a20:	e8 97 6c fe ff       	call   c00006bc <memset>
c0019a25:	58                   	pop    eax
c0019a26:	5a                   	pop    edx
c0019a27:	6a 01                	push   0x1
c0019a29:	57                   	push   edi
c0019a2a:	e8 79 94 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	83 ec 0c             	sub    esp,0xc
c0019a35:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a37:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a3b:	51                   	push   ecx
c0019a3c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a40:	52                   	push   edx
c0019a41:	6a 00                	push   0x0
c0019a43:	6a 01                	push   0x1
c0019a45:	57                   	push   edi
c0019a46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a49:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a4d:	83 c4 20             	add    esp,0x20
c0019a50:	3c 0d                	cmp    al,0xd
c0019a52:	0f 84 12 01 00 00    	je     c0019b6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019a58:	85 db                	test   ebx,ebx
c0019a5a:	0f 84 fd 00 00 00    	je     c0019b5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a60:	3c 0a                	cmp    al,0xa
c0019a62:	74 13                	je     c0019a77 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a64:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a69:	74 0c                	je     c0019a77 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a6b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019a71:	0f 8e e6 00 00 00    	jle    c0019b5d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	8d 53 01             	lea    edx,[ebx+0x1]
c0019a7d:	29 dd                	sub    ebp,ebx
c0019a7f:	52                   	push   edx
c0019a80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019a84:	e8 93 5b ff ff       	call   c000f61c <malloc>
c0019a89:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019a8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a90:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019a93:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019a97:	e8 80 5b ff ff       	call   c000f61c <malloc>
c0019a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019aa0:	83 c4 0c             	add    esp,0xc
c0019aa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aa7:	52                   	push   edx
c0019aa8:	6a 00                	push   0x0
c0019aaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019aae:	e8 09 6c fe ff       	call   c00006bc <memset>
c0019ab3:	83 c4 0c             	add    esp,0xc
c0019ab6:	53                   	push   ebx
c0019ab7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019abb:	55                   	push   ebp
c0019abc:	01 eb                	add    ebx,ebp
c0019abe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ac2:	e8 d9 6b fe ff       	call   c00006a0 <memcpy>
c0019ac7:	83 c4 0c             	add    esp,0xc
c0019aca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ace:	51                   	push   ecx
c0019acf:	6a 00                	push   0x0
c0019ad1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ad5:	e8 e2 6b fe ff       	call   c00006bc <memset>
c0019ada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019add:	e8 f7 6b fe ff       	call   c00006d9 <strlen>
c0019ae2:	83 c4 0c             	add    esp,0xc
c0019ae5:	50                   	push   eax
c0019ae6:	53                   	push   ebx
c0019ae7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019aeb:	e8 b0 6b fe ff       	call   c00006a0 <memcpy>
c0019af0:	5b                   	pop    ebx
c0019af1:	58                   	pop    eax
c0019af2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019af6:	68 1c b1 02 c0       	push   0xc002b11c
c0019afb:	e8 eb 8d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019b00:	8b 06                	mov    eax,DWORD PTR [esi]
c0019b02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019b05:	40                   	inc    eax
c0019b06:	83 c4 10             	add    esp,0x10
c0019b09:	89 06                	mov    DWORD PTR [esi],eax
c0019b0b:	85 d2                	test   edx,edx
c0019b0d:	75 0c                	jne    c0019b1b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019b0f:	83 ec 0c             	sub    esp,0xc
c0019b12:	6a 08                	push   0x8
c0019b14:	e8 03 5b ff ff       	call   c000f61c <malloc>
c0019b19:	eb 0c                	jmp    c0019b27 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019b1b:	c1 e0 03             	shl    eax,0x3
c0019b1e:	51                   	push   ecx
c0019b1f:	51                   	push   ecx
c0019b20:	50                   	push   eax
c0019b21:	52                   	push   edx
c0019b22:	e8 e1 5a ff ff       	call   c000f608 <realloc>
c0019b27:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019b2a:	83 c4 10             	add    esp,0x10
c0019b2d:	31 db                	xor    ebx,ebx
c0019b2f:	52                   	push   edx
c0019b30:	6a 08                	push   0x8
c0019b32:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b36:	50                   	push   eax
c0019b37:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019b3c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b40:	50                   	push   eax
c0019b41:	e8 5a 6b fe ff       	call   c00006a0 <memcpy>
c0019b46:	83 c4 0c             	add    esp,0xc
c0019b49:	68 00 01 00 00       	push   0x100
c0019b4e:	6a 00                	push   0x0
c0019b50:	55                   	push   ebp
c0019b51:	31 ed                	xor    ebp,ebp
c0019b53:	e8 64 6b fe ff       	call   c00006bc <memset>
c0019b58:	83 c4 10             	add    esp,0x10
c0019b5b:	eb 0d                	jmp    c0019b6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b5d:	3c 3d                	cmp    al,0x3d
c0019b5f:	74 07                	je     c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019b61:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019b65:	45                   	inc    ebp
c0019b66:	eb 02                	jmp    c0019b6a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b68:	89 eb                	mov    ebx,ebp
c0019b6a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b6f:	0f 85 bd fe ff ff    	jne    c0019a32 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019b75:	50                   	push   eax
c0019b76:	50                   	push   eax
c0019b77:	ff 36                	push   DWORD PTR [esi]
c0019b79:	68 2a b1 02 c0       	push   0xc002b12a
c0019b7e:	e8 68 8d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019b83:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019b89:	5b                   	pop    ebx
c0019b8a:	5e                   	pop    esi
c0019b8b:	5f                   	pop    edi
c0019b8c:	5d                   	pop    ebp
c0019b8d:	c3                   	ret    

c0019b8e <EnvVarContainer::__loadSystem()>:
c0019b8e:	83 ec 10             	sub    esp,0x10
c0019b91:	68 80 cf 02 c0       	push   0xc002cf80
c0019b96:	68 55 b1 02 c0       	push   0xc002b155
c0019b9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b9f:	e8 f4 fd ff ff       	call   c0019998 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ba4:	83 c4 1c             	add    esp,0x1c
c0019ba7:	c3                   	ret    

c0019ba8 <EnvVarContainer::__loadUser()>:
c0019ba8:	c3                   	ret    
c0019ba9:	90                   	nop

c0019baa <EnvVarContainer::EnvVarContainer(Process*)>:
c0019baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bbc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bca:	90                   	nop
c0019bcb:	c3                   	ret    

c0019bcc <EnvVarContainer::~EnvVarContainer()>:
c0019bcc:	83 ec 0c             	sub    esp,0xc
c0019bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bd6:	85 c0                	test   eax,eax
c0019bd8:	74 1d                	je     c0019bf7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0019be0:	85 c0                	test   eax,eax
c0019be2:	74 13                	je     c0019bf7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019beb:	83 ec 0c             	sub    esp,0xc
c0019bee:	50                   	push   eax
c0019bef:	e8 38 5a ff ff       	call   c000f62c <free>
c0019bf4:	83 c4 10             	add    esp,0x10
c0019bf7:	90                   	nop
c0019bf8:	83 c4 0c             	add    esp,0xc
c0019bfb:	c3                   	ret    

c0019bfc <Krnl::getEnv(Process*, char const*)>:
c0019bfc:	53                   	push   ebx
c0019bfd:	83 ec 08             	sub    esp,0x8
c0019c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c08:	39 05 b4 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fb4,eax
c0019c0e:	74 04                	je     c0019c14 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c10:	85 c0                	test   eax,eax
c0019c12:	75 0b                	jne    c0019c1f <Krnl::getEnv(Process*, char const*)+0x23>
c0019c14:	a1 90 05 03 c0       	mov    eax,ds:0xc0030590
c0019c19:	85 c0                	test   eax,eax
c0019c1b:	75 19                	jne    c0019c36 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c1d:	eb 27                	jmp    c0019c46 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c1f:	52                   	push   edx
c0019c20:	52                   	push   edx
c0019c21:	53                   	push   ebx
c0019c22:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c28:	e8 5f fc ff ff       	call   c001988c <EnvVarContainer::getEnv(char const*)>
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	85 c0                	test   eax,eax
c0019c32:	75 28                	jne    c0019c5c <Krnl::getEnv(Process*, char const*)+0x60>
c0019c34:	eb de                	jmp    c0019c14 <Krnl::getEnv(Process*, char const*)+0x18>
c0019c36:	52                   	push   edx
c0019c37:	52                   	push   edx
c0019c38:	53                   	push   ebx
c0019c39:	50                   	push   eax
c0019c3a:	e8 4d fc ff ff       	call   c001988c <EnvVarContainer::getEnv(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	85 c0                	test   eax,eax
c0019c44:	75 16                	jne    c0019c5c <Krnl::getEnv(Process*, char const*)+0x60>
c0019c46:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c4a:	a1 94 05 03 c0       	mov    eax,ds:0xc0030594
c0019c4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c53:	83 c4 08             	add    esp,0x8
c0019c56:	5b                   	pop    ebx
c0019c57:	e9 30 fc ff ff       	jmp    c001988c <EnvVarContainer::getEnv(char const*)>
c0019c5c:	83 c4 08             	add    esp,0x8
c0019c5f:	5b                   	pop    ebx
c0019c60:	c3                   	ret    

c0019c61 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c61:	83 ec 10             	sub    esp,0x10
c0019c64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c6c:	ff 35 94 05 03 c0    	push   DWORD PTR ds:0xc0030594
c0019c72:	e8 53 fc ff ff       	call   c00198ca <EnvVarContainer::setEnv(char const*, char const*)>
c0019c77:	83 c4 1c             	add    esp,0x1c
c0019c7a:	c3                   	ret    

c0019c7b <Krnl::setEnvUser(char const*, char const*)>:
c0019c7b:	a1 90 05 03 c0       	mov    eax,ds:0xc0030590
c0019c80:	85 c0                	test   eax,eax
c0019c82:	74 15                	je     c0019c99 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c84:	83 ec 10             	sub    esp,0x10
c0019c87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c8f:	50                   	push   eax
c0019c90:	e8 35 fc ff ff       	call   c00198ca <EnvVarContainer::setEnv(char const*, char const*)>
c0019c95:	83 c4 1c             	add    esp,0x1c
c0019c98:	c3                   	ret    
c0019c99:	c3                   	ret    

c0019c9a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c9e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ca4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca8:	e9 1d fc ff ff       	jmp    c00198ca <EnvVarContainer::setEnv(char const*, char const*)>

c0019cad <Krnl::deleteEnvSystem(char const*)>:
c0019cad:	c3                   	ret    

c0019cae <Krnl::deleteEnvUser(char const*)>:
c0019cae:	c3                   	ret    

c0019caf <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019caf:	c3                   	ret    

c0019cb0 <Krnl::newProcessEnv(Process*)>:
c0019cb0:	83 ec 28             	sub    esp,0x28
c0019cb3:	6a 0c                	push   0xc
c0019cb5:	e8 62 59 ff ff       	call   c000f61c <malloc>
c0019cba:	5a                   	pop    edx
c0019cbb:	59                   	pop    ecx
c0019cbc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cc0:	50                   	push   eax
c0019cc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cc5:	e8 e0 fe ff ff       	call   c0019baa <EnvVarContainer::EnvVarContainer(Process*)>
c0019cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cce:	83 c4 2c             	add    esp,0x2c
c0019cd1:	c3                   	ret    

c0019cd2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cd2:	56                   	push   esi
c0019cd3:	53                   	push   ebx
c0019cd4:	83 ec 10             	sub    esp,0x10
c0019cd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cdb:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019ce1:	6a 0c                	push   0xc
c0019ce3:	e8 34 59 ff ff       	call   c000f61c <malloc>
c0019ce8:	89 c3                	mov    ebx,eax
c0019cea:	58                   	pop    eax
c0019ceb:	5a                   	pop    edx
c0019cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cf0:	53                   	push   ebx
c0019cf1:	e8 b4 fe ff ff       	call   c0019baa <EnvVarContainer::EnvVarContainer(Process*)>
c0019cf6:	8b 06                	mov    eax,DWORD PTR [esi]
c0019cf8:	89 03                	mov    DWORD PTR [ebx],eax
c0019cfa:	c1 e0 03             	shl    eax,0x3
c0019cfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d00:	e8 17 59 ff ff       	call   c000f61c <malloc>
c0019d05:	83 c4 0c             	add    esp,0xc
c0019d08:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019d0d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019d14:	52                   	push   edx
c0019d15:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019d18:	50                   	push   eax
c0019d19:	e8 82 69 fe ff       	call   c00006a0 <memcpy>
c0019d1e:	89 d8                	mov    eax,ebx
c0019d20:	83 c4 14             	add    esp,0x14
c0019d23:	5b                   	pop    ebx
c0019d24:	5e                   	pop    esi
c0019d25:	c3                   	ret    

c0019d26 <Krnl::loadSystemEnv()>:
c0019d26:	53                   	push   ebx
c0019d27:	83 ec 14             	sub    esp,0x14
c0019d2a:	6a 0c                	push   0xc
c0019d2c:	e8 eb 58 ff ff       	call   c000f61c <malloc>
c0019d31:	89 c3                	mov    ebx,eax
c0019d33:	58                   	pop    eax
c0019d34:	5a                   	pop    edx
c0019d35:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c0019d3b:	53                   	push   ebx
c0019d3c:	e8 69 fe ff ff       	call   c0019baa <EnvVarContainer::EnvVarContainer(Process*)>
c0019d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d44:	89 1d 94 05 03 c0    	mov    DWORD PTR ds:0xc0030594,ebx
c0019d4a:	e8 3f fe ff ff       	call   c0019b8e <EnvVarContainer::__loadSystem()>
c0019d4f:	83 c4 18             	add    esp,0x18
c0019d52:	5b                   	pop    ebx
c0019d53:	c3                   	ret    

c0019d54 <Krnl::loadUserEnv()>:
c0019d54:	53                   	push   ebx
c0019d55:	83 ec 14             	sub    esp,0x14
c0019d58:	6a 0c                	push   0xc
c0019d5a:	e8 bd 58 ff ff       	call   c000f61c <malloc>
c0019d5f:	89 c3                	mov    ebx,eax
c0019d61:	58                   	pop    eax
c0019d62:	5a                   	pop    edx
c0019d63:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c0019d69:	53                   	push   ebx
c0019d6a:	e8 3b fe ff ff       	call   c0019baa <EnvVarContainer::EnvVarContainer(Process*)>
c0019d6f:	89 1d 90 05 03 c0    	mov    DWORD PTR ds:0xc0030590,ebx
c0019d75:	83 c4 18             	add    esp,0x18
c0019d78:	5b                   	pop    ebx
c0019d79:	c3                   	ret    

c0019d7a <Krnl::flushEnv()>:
c0019d7a:	c3                   	ret    

c0019d7b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d7f:	8b 15 90 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030590
c0019d85:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d8b:	a1 94 05 03 c0       	mov    eax,ds:0xc0030594
c0019d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d92:	03 01                	add    eax,DWORD PTR [ecx]
c0019d94:	85 d2                	test   edx,edx
c0019d96:	74 02                	je     c0019d9a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d98:	03 02                	add    eax,DWORD PTR [edx]
c0019d9a:	c3                   	ret    

c0019d9b <Krnl::getProcessEnvPair(Process*, int)>:
c0019d9b:	57                   	push   edi
c0019d9c:	8b 0d 90 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030590
c0019da2:	56                   	push   esi
c0019da3:	85 c9                	test   ecx,ecx
c0019da5:	53                   	push   ebx
c0019da6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019daa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019dae:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019db4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019db8:	8b 02                	mov    eax,DWORD PTR [edx]
c0019dba:	75 47                	jne    c0019e03 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019dbc:	39 c3                	cmp    ebx,eax
c0019dbe:	7c 47                	jl     c0019e07 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019dc0:	8b 15 94 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030594
c0019dc6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dc8:	01 c1                	add    ecx,eax
c0019dca:	39 d9                	cmp    ecx,ebx
c0019dcc:	7e 6c                	jle    c0019e3a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019dce:	51                   	push   ecx
c0019dcf:	89 d9                	mov    ecx,ebx
c0019dd1:	29 c1                	sub    ecx,eax
c0019dd3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019dd6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019dda:	53                   	push   ebx
c0019ddb:	68 77 b1 02 c0       	push   0xc002b177
c0019de0:	e8 06 8b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019de5:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019deb:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019ded:	a1 94 05 03 c0       	mov    eax,ds:0xc0030594
c0019df2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019df5:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019df9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019dfc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019dff:	89 06                	mov    DWORD PTR [esi],eax
c0019e01:	eb 51                	jmp    c0019e54 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019e03:	39 c3                	cmp    ebx,eax
c0019e05:	7d 05                	jge    c0019e0c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019e07:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019e0a:	eb 20                	jmp    c0019e2c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019e0c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019e0e:	8d 14 07             	lea    edx,[edi+eax*1]
c0019e11:	39 da                	cmp    edx,ebx
c0019e13:	7e 04                	jle    c0019e19 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019e15:	29 c3                	sub    ebx,eax
c0019e17:	eb 10                	jmp    c0019e29 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019e19:	8b 0d 94 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030594
c0019e1f:	03 11                	add    edx,DWORD PTR [ecx]
c0019e21:	39 da                	cmp    edx,ebx
c0019e23:	7e 15                	jle    c0019e3a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019e25:	29 c3                	sub    ebx,eax
c0019e27:	29 fb                	sub    ebx,edi
c0019e29:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e2c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019e30:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e33:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e36:	89 06                	mov    DWORD PTR [esi],eax
c0019e38:	eb 1d                	jmp    c0019e57 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019e3a:	83 ec 0c             	sub    esp,0xc
c0019e3d:	68 8b b1 02 c0       	push   0xc002b18b
c0019e42:	e8 18 00 00 00       	call   c0019e5f <Krnl::panic(char const*)>
c0019e47:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019e4d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019e54:	83 c4 10             	add    esp,0x10
c0019e57:	89 f0                	mov    eax,esi
c0019e59:	5b                   	pop    ebx
c0019e5a:	5e                   	pop    esi
c0019e5b:	5f                   	pop    edi
c0019e5c:	c2 04 00             	ret    0x4

c0019e5f <Krnl::panic(char const*)>:
c0019e5f:	55                   	push   ebp
c0019e60:	89 e5                	mov    ebp,esp
c0019e62:	53                   	push   ebx
c0019e63:	83 ec 0c             	sub    esp,0xc
c0019e66:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e69:	fa                   	cli    
c0019e6a:	c6 05 a0 05 03 c0 01 	mov    BYTE PTR ds:0xc00305a0,0x1
c0019e71:	53                   	push   ebx
c0019e72:	c6 05 84 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c984,0x0
c0019e79:	68 a5 b1 02 c0       	push   0xc002b1a5
c0019e7e:	e8 68 8a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0019e83:	58                   	pop    eax
c0019e84:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019e89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8f:	e8 19 6c ff ff       	call   c0010aad <setActiveTerminal(VgaText*)>
c0019e94:	83 c4 0c             	add    esp,0xc
c0019e97:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019e9c:	6a 01                	push   0x1
c0019e9e:	6a 0f                	push   0xf
c0019ea0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea6:	e8 33 66 ff ff       	call   c00104de <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019eab:	58                   	pop    eax
c0019eac:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019eb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb7:	e8 92 6e ff ff       	call   c0010d4e <VgaText::clearScreen()>
c0019ebc:	58                   	pop    eax
c0019ebd:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019ec2:	5a                   	pop    edx
c0019ec3:	68 be b1 02 c0       	push   0xc002b1be
c0019ec8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ece:	e8 f9 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019ed3:	59                   	pop    ecx
c0019ed4:	58                   	pop    eax
c0019ed5:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019eda:	68 64 b2 02 c0       	push   0xc002b264
c0019edf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee5:	e8 e2 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019eea:	58                   	pop    eax
c0019eeb:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019ef0:	5a                   	pop    edx
c0019ef1:	68 da b1 02 c0       	push   0xc002b1da
c0019ef6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019efc:	e8 cb 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f01:	59                   	pop    ecx
c0019f02:	58                   	pop    eax
c0019f03:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019f08:	53                   	push   ebx
c0019f09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0f:	e8 b8 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f14:	58                   	pop    eax
c0019f15:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019f1a:	5a                   	pop    edx
c0019f1b:	68 fa b1 02 c0       	push   0xc002b1fa
c0019f20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f26:	e8 a1 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f2b:	a1 9c 05 03 c0       	mov    eax,ds:0xc003059c
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	85 c0                	test   eax,eax
c0019f35:	74 02                	je     c0019f39 <Krnl::panic(char const*)+0xda>
c0019f37:	ff d0                	call   eax
c0019f39:	83 ec 0c             	sub    esp,0xc
c0019f3c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f3f:	e8 b2 2e 00 00       	call   c001cdf6 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f44:	83 c4 10             	add    esp,0x10
c0019f47:	89 c3                	mov    ebx,eax
c0019f49:	85 c0                	test   eax,eax
c0019f4b:	0f 84 50 02 00 00    	je     c001a1a1 <Krnl::panic(char const*)+0x342>
c0019f51:	83 ec 08             	sub    esp,0x8
c0019f54:	8b 15 b4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb4
c0019f5a:	68 a0 b2 02 c0       	push   0xc002b2a0
c0019f5f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f65:	e8 62 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f6a:	58                   	pop    eax
c0019f6b:	5a                   	pop    edx
c0019f6c:	8b 15 b4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb4
c0019f72:	68 da b1 02 c0       	push   0xc002b1da
c0019f77:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f7d:	e8 4a 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f82:	59                   	pop    ecx
c0019f83:	58                   	pop    eax
c0019f84:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019f89:	53                   	push   ebx
c0019f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f90:	e8 37 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	83 ec 08             	sub    esp,0x8
c0019f9b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019fa0:	68 f9 b1 02 c0       	push   0xc002b1f9
c0019fa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fab:	e8 1c 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019fb0:	58                   	pop    eax
c0019fb1:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019fb6:	5a                   	pop    edx
c0019fb7:	68 f8 b2 02 c0       	push   0xc002b2f8
c0019fbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc2:	e8 05 6f ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019fc7:	59                   	pop    ecx
c0019fc8:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019fcd:	5b                   	pop    ebx
c0019fce:	68 38 b3 02 c0       	push   0xc002b338
c0019fd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd9:	e8 ee 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019fde:	58                   	pop    eax
c0019fdf:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c0019fe4:	5a                   	pop    edx
c0019fe5:	68 e5 b1 02 c0       	push   0xc002b1e5
c0019fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff0:	e8 d7 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c0019ff5:	59                   	pop    ecx
c0019ff6:	5b                   	pop    ebx
c0019ff7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ffa:	68 fd b1 02 c0       	push   0xc002b1fd
c0019fff:	e8 e7 88 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a004:	58                   	pop    eax
c001a005:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a008:	5a                   	pop    edx
c001a009:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a00c:	68 06 b2 02 c0       	push   0xc002b206
c001a011:	e8 d5 88 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a016:	59                   	pop    ecx
c001a017:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a01a:	5b                   	pop    ebx
c001a01b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a01d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a020:	68 0f b2 02 c0       	push   0xc002b20f
c001a025:	e8 c1 88 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a02a:	58                   	pop    eax
c001a02b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a030:	5a                   	pop    edx
c001a031:	68 7c b3 02 c0       	push   0xc002b37c
c001a036:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a03c:	e8 8b 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a041:	59                   	pop    ecx
c001a042:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a047:	5b                   	pop    ebx
c001a048:	68 18 b2 02 c0       	push   0xc002b218
c001a04d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a053:	e8 74 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a058:	0f 20 c0             	mov    eax,cr0
c001a05b:	5a                   	pop    edx
c001a05c:	59                   	pop    ecx
c001a05d:	50                   	push   eax
c001a05e:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a069:	e8 84 6e ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a06e:	5b                   	pop    ebx
c001a06f:	58                   	pop    eax
c001a070:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a075:	68 22 b2 02 c0       	push   0xc002b222
c001a07a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a080:	e8 47 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a085:	0f 20 d0             	mov    eax,cr2
c001a088:	5a                   	pop    edx
c001a089:	59                   	pop    ecx
c001a08a:	50                   	push   eax
c001a08b:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a090:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a096:	e8 57 6e ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a09b:	5b                   	pop    ebx
c001a09c:	58                   	pop    eax
c001a09d:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a0a2:	68 2c b2 02 c0       	push   0xc002b22c
c001a0a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ad:	e8 1a 6e ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a0b2:	0f 20 d8             	mov    eax,cr3
c001a0b5:	5a                   	pop    edx
c001a0b6:	59                   	pop    ecx
c001a0b7:	50                   	push   eax
c001a0b8:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a0bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c3:	e8 2a 6e ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a0c8:	5b                   	pop    ebx
c001a0c9:	58                   	pop    eax
c001a0ca:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a0cf:	68 3f b2 02 c0       	push   0xc002b23f
c001a0d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0da:	e8 ed 6d ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a0df:	0f 20 e0             	mov    eax,cr4
c001a0e2:	5a                   	pop    edx
c001a0e3:	59                   	pop    ecx
c001a0e4:	50                   	push   eax
c001a0e5:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a0ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f0:	e8 fd 6d ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a0f5:	5b                   	pop    ebx
c001a0f6:	58                   	pop    eax
c001a0f7:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a0fc:	68 49 b2 02 c0       	push   0xc002b249
c001a101:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a107:	e8 c0 6d ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a10c:	5a                   	pop    edx
c001a10d:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a112:	59                   	pop    ecx
c001a113:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a119:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a11c:	50                   	push   eax
c001a11d:	e8 d0 6d ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a122:	5b                   	pop    ebx
c001a123:	58                   	pop    eax
c001a124:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a129:	68 60 b2 02 c0       	push   0xc002b260
c001a12e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a134:	e8 93 6d ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a139:	5a                   	pop    edx
c001a13a:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a13f:	59                   	pop    ecx
c001a140:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a146:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a149:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a14c:	50                   	push   eax
c001a14d:	e8 a0 6d ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a152:	5b                   	pop    ebx
c001a153:	58                   	pop    eax
c001a154:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a159:	68 60 b2 02 c0       	push   0xc002b260
c001a15e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a164:	e8 63 6d ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a169:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a16e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a171:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a177:	8b 12                	mov    edx,DWORD PTR [edx]
c001a179:	59                   	pop    ecx
c001a17a:	5b                   	pop    ebx
c001a17b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a17e:	50                   	push   eax
c001a17f:	e8 6e 6d ff ff       	call   c0010ef2 <VgaText::putx(unsigned int)>
c001a184:	83 c4 10             	add    esp,0x10
c001a187:	b2 fe                	mov    dl,0xfe
c001a189:	e4 60                	in     al,0x60
c001a18b:	3c 1c                	cmp    al,0x1c
c001a18d:	74 04                	je     c001a193 <Krnl::panic(char const*)+0x334>
c001a18f:	3c 5a                	cmp    al,0x5a
c001a191:	75 f6                	jne    c001a189 <Krnl::panic(char const*)+0x32a>
c001a193:	e4 64                	in     al,0x64
c001a195:	a8 02                	test   al,0x2
c001a197:	75 fa                	jne    c001a193 <Krnl::panic(char const*)+0x334>
c001a199:	88 d0                	mov    al,dl
c001a19b:	e6 64                	out    0x64,al
c001a19d:	fa                   	cli    
c001a19e:	f4                   	hlt    
c001a19f:	eb e8                	jmp    c001a189 <Krnl::panic(char const*)+0x32a>
c001a1a1:	50                   	push   eax
c001a1a2:	50                   	push   eax
c001a1a3:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a1a8:	68 cc b2 02 c0       	push   0xc002b2cc
c001a1ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b3:	e8 14 6d ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a1b8:	58                   	pop    eax
c001a1b9:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a1be:	5a                   	pop    edx
c001a1bf:	68 da b1 02 c0       	push   0xc002b1da
c001a1c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ca:	e8 fd 6c ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a1cf:	59                   	pop    ecx
c001a1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1d5:	5b                   	pop    ebx
c001a1d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1d9:	83 c0 0c             	add    eax,0xc
c001a1dc:	50                   	push   eax
c001a1dd:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a1e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e8:	e8 df 6c ff ff       	call   c0010ecc <VgaText::puts(char const*)>
c001a1ed:	83 c4 10             	add    esp,0x10
c001a1f0:	e9 a3 fd ff ff       	jmp    c0019f98 <Krnl::panic(char const*)+0x139>

c001a1f5 <Net::switchEndian16(unsigned short)>:
c001a1f5:	83 ec 04             	sub    esp,0x4
c001a1f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1fc:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a200:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a204:	c1 f8 08             	sar    eax,0x8
c001a207:	89 c2                	mov    edx,eax
c001a209:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a20d:	c1 e0 08             	shl    eax,0x8
c001a210:	09 d0                	or     eax,edx
c001a212:	83 c4 04             	add    esp,0x4
c001a215:	c3                   	ret    

c001a216 <Net::switchEndian32(unsigned int)>:
c001a216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a21a:	c1 e8 18             	shr    eax,0x18
c001a21d:	89 c2                	mov    edx,eax
c001a21f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a223:	c1 e0 08             	shl    eax,0x8
c001a226:	25 00 00 ff 00       	and    eax,0xff0000
c001a22b:	09 c2                	or     edx,eax
c001a22d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a231:	c1 e8 08             	shr    eax,0x8
c001a234:	25 00 ff 00 00       	and    eax,0xff00
c001a239:	09 c2                	or     edx,eax
c001a23b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a23f:	c1 e0 18             	shl    eax,0x18
c001a242:	09 d0                	or     eax,edx
c001a244:	c3                   	ret    

c001a245 <Net::crc32Calc(unsigned char*, int)>:
c001a245:	83 ec 10             	sub    esp,0x10
c001a248:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a24d:	75 07                	jne    c001a256 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a24f:	b8 00 00 00 00       	mov    eax,0x0
c001a254:	eb 7c                	jmp    c001a2d2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a256:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a25b:	7f 07                	jg     c001a264 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a25d:	b8 00 00 00 00       	mov    eax,0x0
c001a262:	eb 6e                	jmp    c001a2d2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a264:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a26c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a278:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a27c:	7d 4e                	jge    c001a2cc <Net::crc32Calc(unsigned char*, int)+0x87>
c001a27e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a286:	01 d0                	add    eax,edx
c001a288:	8a 00                	mov    al,BYTE PTR [eax]
c001a28a:	0f b6 c0             	movzx  eax,al
c001a28d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a291:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a299:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a29e:	7f 26                	jg     c001a2c6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a4:	83 e0 01             	and    eax,0x1
c001a2a7:	74 0d                	je     c001a2b6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ad:	d1 e8                	shr    eax,1
c001a2af:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2b4:	eb 06                	jmp    c001a2bc <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ba:	d1 e8                	shr    eax,1
c001a2bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2c4:	eb d3                	jmp    c001a299 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2c6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2ca:	eb a8                	jmp    c001a274 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d0:	f7 d0                	not    eax
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	c3                   	ret    

c001a2d6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2d6:	83 ec 1c             	sub    esp,0x1c
c001a2d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2e9:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a2ee:	7f 14                	jg     c001a304 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a2f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a2fb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a302:	eb e5                	jmp    c001a2e9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a308:	8d 50 01             	lea    edx,[eax+0x1]
c001a30b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a30f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a312:	83 ec 04             	sub    esp,0x4
c001a315:	6a 06                	push   0x6
c001a317:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a31b:	50                   	push   eax
c001a31c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a320:	e8 7b 63 fe ff       	call   c00006a0 <memcpy>
c001a325:	83 c4 10             	add    esp,0x10
c001a328:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a32d:	83 ec 04             	sub    esp,0x4
c001a330:	6a 06                	push   0x6
c001a332:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a336:	50                   	push   eax
c001a337:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a33b:	e8 60 63 fe ff       	call   c00006a0 <memcpy>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a34c:	0f b7 c0             	movzx  eax,ax
c001a34f:	c1 f8 08             	sar    eax,0x8
c001a352:	89 c1                	mov    ecx,eax
c001a354:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a358:	8d 50 01             	lea    edx,[eax+0x1]
c001a35b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a35f:	88 ca                	mov    dl,cl
c001a361:	88 10                	mov    BYTE PTR [eax],dl
c001a363:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a367:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a36b:	8d 48 01             	lea    ecx,[eax+0x1]
c001a36e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a372:	88 10                	mov    BYTE PTR [eax],dl
c001a374:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a37c:	83 ec 04             	sub    esp,0x4
c001a37f:	52                   	push   edx
c001a380:	50                   	push   eax
c001a381:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a385:	e8 16 63 fe ff       	call   c00006a0 <memcpy>
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a391:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a395:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a399:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a39d:	83 ec 08             	sub    esp,0x8
c001a3a0:	50                   	push   eax
c001a3a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3a5:	e8 9b fe ff ff       	call   c001a245 <Net::crc32Calc(unsigned char*, int)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b5:	c1 e8 18             	shr    eax,0x18
c001a3b8:	89 c1                	mov    ecx,eax
c001a3ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3be:	8d 50 01             	lea    edx,[eax+0x1]
c001a3c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3c5:	88 ca                	mov    dl,cl
c001a3c7:	88 10                	mov    BYTE PTR [eax],dl
c001a3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3cd:	c1 e8 10             	shr    eax,0x10
c001a3d0:	89 c1                	mov    ecx,eax
c001a3d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3d6:	8d 50 01             	lea    edx,[eax+0x1]
c001a3d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3dd:	88 ca                	mov    dl,cl
c001a3df:	88 10                	mov    BYTE PTR [eax],dl
c001a3e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e5:	c1 e8 08             	shr    eax,0x8
c001a3e8:	89 c1                	mov    ecx,eax
c001a3ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3ee:	8d 50 01             	lea    edx,[eax+0x1]
c001a3f1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3f5:	88 ca                	mov    dl,cl
c001a3f7:	88 10                	mov    BYTE PTR [eax],dl
c001a3f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3fd:	8d 50 01             	lea    edx,[eax+0x1]
c001a400:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a404:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a408:	88 10                	mov    BYTE PTR [eax],dl
c001a40a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a40e:	83 c4 1c             	add    esp,0x1c
c001a411:	c3                   	ret    

c001a412 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a412:	83 ec 2c             	sub    esp,0x2c
c001a415:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a41d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a422:	83 ec 04             	sub    esp,0x4
c001a425:	6a 06                	push   0x6
c001a427:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a42b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a42f:	83 c0 0e             	add    eax,0xe
c001a432:	50                   	push   eax
c001a433:	e8 68 62 fe ff       	call   c00006a0 <memcpy>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a440:	83 ec 04             	sub    esp,0x4
c001a443:	6a 06                	push   0x6
c001a445:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a449:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a44d:	83 c0 08             	add    eax,0x8
c001a450:	50                   	push   eax
c001a451:	e8 4a 62 fe ff       	call   c00006a0 <memcpy>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a45e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a462:	8d 50 01             	lea    edx,[eax+0x1]
c001a465:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a469:	8a 00                	mov    al,BYTE PTR [eax]
c001a46b:	0f b6 c0             	movzx  eax,al
c001a46e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a477:	8d 50 01             	lea    edx,[eax+0x1]
c001a47a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a47e:	8a 00                	mov    al,BYTE PTR [eax]
c001a480:	0f b6 c0             	movzx  eax,al
c001a483:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a488:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a48d:	c1 e0 08             	shl    eax,0x8
c001a490:	89 c2                	mov    edx,eax
c001a492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a496:	09 d0                	or     eax,edx
c001a498:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a49c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4a0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a4a5:	75 3a                	jne    c001a4e1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4ab:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4ae:	66 3d dc 05          	cmp    ax,0x5dc
c001a4b2:	77 10                	ja     c001a4c4 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a4b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4bb:	0f b7 c0             	movzx  eax,ax
c001a4be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4c2:	eb 1d                	jmp    c001a4e1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	68 a4 b3 02 c0       	push   0xc002b3a4
c001a4cc:	e8 1a 84 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001a4d1:	83 c4 10             	add    esp,0x10
c001a4d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4d8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a4dc:	e9 c0 00 00 00       	jmp    c001a5a1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a4e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a4e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4eb:	83 ec 04             	sub    esp,0x4
c001a4ee:	52                   	push   edx
c001a4ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4f3:	50                   	push   eax
c001a4f4:	e8 a7 61 fe ff       	call   c00006a0 <memcpy>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a500:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a504:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a508:	8d 50 01             	lea    edx,[eax+0x1]
c001a50b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a50f:	8a 00                	mov    al,BYTE PTR [eax]
c001a511:	0f b6 c0             	movzx  eax,al
c001a514:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a518:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a51c:	8d 50 01             	lea    edx,[eax+0x1]
c001a51f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a523:	8a 00                	mov    al,BYTE PTR [eax]
c001a525:	0f b6 c0             	movzx  eax,al
c001a528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a52c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a530:	8d 50 01             	lea    edx,[eax+0x1]
c001a533:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a537:	8a 00                	mov    al,BYTE PTR [eax]
c001a539:	0f b6 c0             	movzx  eax,al
c001a53c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a540:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a544:	8d 50 01             	lea    edx,[eax+0x1]
c001a547:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a54b:	8a 00                	mov    al,BYTE PTR [eax]
c001a54d:	0f b6 c0             	movzx  eax,al
c001a550:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a558:	c1 e0 18             	shl    eax,0x18
c001a55b:	89 c2                	mov    edx,eax
c001a55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a561:	c1 e0 10             	shl    eax,0x10
c001a564:	09 c2                	or     edx,eax
c001a566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a56a:	c1 e0 08             	shl    eax,0x8
c001a56d:	09 d0                	or     eax,edx
c001a56f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a577:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a57b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a57f:	83 e8 04             	sub    eax,0x4
c001a582:	83 ec 08             	sub    esp,0x8
c001a585:	50                   	push   eax
c001a586:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a58a:	e8 b6 fc ff ff       	call   c001a245 <Net::crc32Calc(unsigned char*, int)>
c001a58f:	83 c4 10             	add    esp,0x10
c001a592:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a596:	0f 94 c2             	sete   dl
c001a599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a59d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a5a0:	90                   	nop
c001a5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5a5:	83 c4 2c             	add    esp,0x2c
c001a5a8:	c2 04 00             	ret    0x4

c001a5ab <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5ab:	55                   	push   ebp
c001a5ac:	57                   	push   edi
c001a5ad:	56                   	push   esi
c001a5ae:	53                   	push   ebx
c001a5af:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5b5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5be:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a5c1:	80 fb 40             	cmp    bl,0x40
c001a5c4:	75 1b                	jne    c001a5e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a5c6:	8a 16                	mov    dl,BYTE PTR [esi]
c001a5c8:	84 d2                	test   dl,dl
c001a5ca:	0f 84 f1 00 00 00    	je     c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5d0:	8d 46 01             	lea    eax,[esi+0x1]
c001a5d3:	80 fa 3a             	cmp    dl,0x3a
c001a5d6:	74 04                	je     c001a5dc <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5d8:	89 c6                	mov    esi,eax
c001a5da:	eb ea                	jmp    c001a5c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5df:	89 c6                	mov    esi,eax
c001a5e1:	50                   	push   eax
c001a5e2:	6a 40                	push   0x40
c001a5e4:	6a 00                	push   0x0
c001a5e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5ea:	50                   	push   eax
c001a5eb:	e8 cc 60 fe ff       	call   c00006bc <memset>
c001a5f0:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5f7:	31 c0                	xor    eax,eax
c001a5f9:	83 c4 10             	add    esp,0x10
c001a5fc:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a5fe:	84 c9                	test   cl,cl
c001a600:	0f 84 bb 00 00 00    	je     c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a606:	3d c7 00 00 00       	cmp    eax,0xc7
c001a60b:	0f 8f b0 00 00 00    	jg     c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a611:	80 f9 0a             	cmp    cl,0xa
c001a614:	0f 85 98 00 00 00    	jne    c001a6b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a61a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a61f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a623:	a8 df                	test   al,0xdf
c001a625:	0f 94 c1             	sete   cl
c001a628:	3c 23                	cmp    al,0x23
c001a62a:	0f 94 c2             	sete   dl
c001a62d:	08 d1                	or     cl,dl
c001a62f:	75 4a                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a631:	8d 50 f7             	lea    edx,[eax-0x9]
c001a634:	80 fa 01             	cmp    dl,0x1
c001a637:	76 42                	jbe    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a639:	3c 5b                	cmp    al,0x5b
c001a63b:	75 42                	jne    c001a67f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a63d:	80 fb 40             	cmp    bl,0x40
c001a640:	75 39                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a642:	83 ec 0c             	sub    esp,0xc
c001a645:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a649:	52                   	push   edx
c001a64a:	e8 8a 60 fe ff       	call   c00006d9 <strlen>
c001a64f:	83 c4 10             	add    esp,0x10
c001a652:	83 f8 3f             	cmp    eax,0x3f
c001a655:	77 6a                	ja     c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a657:	50                   	push   eax
c001a658:	50                   	push   eax
c001a659:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a65d:	52                   	push   edx
c001a65e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a662:	52                   	push   edx
c001a663:	e8 f3 60 fe ff       	call   c000075b <strcpy>
c001a668:	58                   	pop    eax
c001a669:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a66d:	52                   	push   edx
c001a66e:	e8 66 60 fe ff       	call   c00006d9 <strlen>
c001a673:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a678:	83 c4 10             	add    esp,0x10
c001a67b:	31 d2                	xor    edx,edx
c001a67d:	eb 3a                	jmp    c001a6b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a67f:	80 fb 40             	cmp    bl,0x40
c001a682:	74 06                	je     c001a68a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a684:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a688:	eb 20                	jmp    c001a6aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a68a:	50                   	push   eax
c001a68b:	50                   	push   eax
c001a68c:	55                   	push   ebp
c001a68d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a691:	50                   	push   eax
c001a692:	e8 15 61 fe ff       	call   c00007ac <strcmp>
c001a697:	83 c4 10             	add    esp,0x10
c001a69a:	85 c0                	test   eax,eax
c001a69c:	75 dd                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a69e:	eb e4                	jmp    c001a684 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a6a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a3:	80 f9 3d             	cmp    cl,0x3d
c001a6a6:	74 1d                	je     c001a6c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6a8:	89 d0                	mov    eax,edx
c001a6aa:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6ac:	84 c9                	test   cl,cl
c001a6ae:	75 f0                	jne    c001a6a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6b0:	eb 0f                	jmp    c001a6c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6b5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6b9:	47                   	inc    edi
c001a6ba:	89 d0                	mov    eax,edx
c001a6bc:	e9 3b ff ff ff       	jmp    c001a5fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a6c1:	31 c0                	xor    eax,eax
c001a6c3:	eb 33                	jmp    c001a6f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a6cc:	50                   	push   eax
c001a6cd:	50                   	push   eax
c001a6ce:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6d2:	50                   	push   eax
c001a6d3:	56                   	push   esi
c001a6d4:	e8 d3 60 fe ff       	call   c00007ac <strcmp>
c001a6d9:	83 c4 10             	add    esp,0x10
c001a6dc:	85 c0                	test   eax,eax
c001a6de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6e2:	75 97                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e4:	51                   	push   ecx
c001a6e5:	51                   	push   ecx
c001a6e6:	52                   	push   edx
c001a6e7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6ee:	e8 68 60 fe ff       	call   c000075b <strcpy>
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	b0 01                	mov    al,0x1
c001a6f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a6fe:	5b                   	pop    ebx
c001a6ff:	5e                   	pop    esi
c001a700:	5f                   	pop    edi
c001a701:	5d                   	pop    ebp
c001a702:	c3                   	ret    

c001a703 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a703:	57                   	push   edi
c001a704:	56                   	push   esi
c001a705:	53                   	push   ebx
c001a706:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a70c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a713:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a71a:	53                   	push   ebx
c001a71b:	e8 b9 5f fe ff       	call   c00006d9 <strlen>
c001a720:	89 34 24             	mov    DWORD PTR [esp],esi
c001a723:	89 c7                	mov    edi,eax
c001a725:	e8 af 5f fe ff       	call   c00006d9 <strlen>
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a731:	3d ff 00 00 00       	cmp    eax,0xff
c001a736:	0f 87 d3 00 00 00    	ja     c001a80f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a73c:	57                   	push   edi
c001a73d:	57                   	push   edi
c001a73e:	56                   	push   esi
c001a73f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a743:	56                   	push   esi
c001a744:	e8 12 60 fe ff       	call   c000075b <strcpy>
c001a749:	58                   	pop    eax
c001a74a:	5a                   	pop    edx
c001a74b:	68 ef b7 02 c0       	push   0xc002b7ef
c001a750:	56                   	push   esi
c001a751:	e8 bc 60 fe ff       	call   c0000812 <strcat>
c001a756:	59                   	pop    ecx
c001a757:	5f                   	pop    edi
c001a758:	53                   	push   ebx
c001a759:	56                   	push   esi
c001a75a:	e8 b3 60 fe ff       	call   c0000812 <strcat>
c001a75f:	58                   	pop    eax
c001a760:	5a                   	pop    edx
c001a761:	68 f0 b3 02 c0       	push   0xc002b3f0
c001a766:	56                   	push   esi
c001a767:	e8 a6 60 fe ff       	call   c0000812 <strcat>
c001a76c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a773:	e8 a4 4e ff ff       	call   c000f61c <malloc>
c001a778:	83 c4 0c             	add    esp,0xc
c001a77b:	89 c3                	mov    ebx,eax
c001a77d:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c001a783:	56                   	push   esi
c001a784:	50                   	push   eax
c001a785:	e8 ba 86 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	85 db                	test   ebx,ebx
c001a78f:	74 7e                	je     c001a80f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a791:	51                   	push   ecx
c001a792:	51                   	push   ecx
c001a793:	6a 01                	push   0x1
c001a795:	53                   	push   ebx
c001a796:	e8 0d 87 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001a79b:	83 c4 10             	add    esp,0x10
c001a79e:	85 c0                	test   eax,eax
c001a7a0:	74 08                	je     c001a7aa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a7a2:	83 ec 0c             	sub    esp,0xc
c001a7a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a7:	53                   	push   ebx
c001a7a8:	eb 5f                	jmp    c001a809 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7aa:	52                   	push   edx
c001a7ab:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7af:	50                   	push   eax
c001a7b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7b4:	50                   	push   eax
c001a7b5:	53                   	push   ebx
c001a7b6:	e8 99 89 ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001a7bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	89 c1                	mov    ecx,eax
c001a7c4:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a7c8:	74 31                	je     c001a7fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	50                   	push   eax
c001a7ce:	e8 49 4e ff ff       	call   c000f61c <malloc>
c001a7d3:	89 c6                	mov    esi,eax
c001a7d5:	58                   	pop    eax
c001a7d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d8:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7dc:	52                   	push   edx
c001a7dd:	56                   	push   esi
c001a7de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e6:	53                   	push   ebx
c001a7e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7ea:	83 c4 20             	add    esp,0x20
c001a7ed:	85 c0                	test   eax,eax
c001a7ef:	75 0a                	jne    c001a7fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7f5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7f9:	74 18                	je     c001a813 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a7fb:	83 ec 0c             	sub    esp,0xc
c001a7fe:	53                   	push   ebx
c001a7ff:	e8 02 87 ff ff       	call   c0012f06 <File::close()>
c001a804:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a809:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a80c:	83 c4 10             	add    esp,0x10
c001a80f:	31 c0                	xor    eax,eax
c001a811:	eb 3b                	jmp    c001a84e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a813:	83 ec 0c             	sub    esp,0xc
c001a816:	53                   	push   ebx
c001a817:	e8 ea 86 ff ff       	call   c0012f06 <File::close()>
c001a81c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a81e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a821:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a824:	83 c4 0c             	add    esp,0xc
c001a827:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a82e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a835:	56                   	push   esi
c001a836:	e8 70 fd ff ff       	call   c001a5ab <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a83b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a83e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a842:	e8 e5 4d ff ff       	call   c000f62c <free>
c001a847:	83 c4 10             	add    esp,0x10
c001a84a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a84e:	81 c4 20 01 00 00    	add    esp,0x120
c001a854:	5b                   	pop    ebx
c001a855:	5e                   	pop    esi
c001a856:	5f                   	pop    edi
c001a857:	c3                   	ret    

c001a858 <Reg::getLine(char*, char*, char*)>:
c001a858:	57                   	push   edi
c001a859:	56                   	push   esi
c001a85a:	53                   	push   ebx
c001a85b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a85f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a863:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a867:	57                   	push   edi
c001a868:	56                   	push   esi
c001a869:	53                   	push   ebx
c001a86a:	68 f5 b3 02 c0       	push   0xc002b3f5
c001a86f:	e8 8f fe ff ff       	call   c001a703 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	84 c0                	test   al,al
c001a879:	75 10                	jne    c001a88b <Reg::getLine(char*, char*, char*)+0x33>
c001a87b:	57                   	push   edi
c001a87c:	56                   	push   esi
c001a87d:	53                   	push   ebx
c001a87e:	68 1a b4 02 c0       	push   0xc002b41a
c001a883:	e8 7b fe ff ff       	call   c001a703 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	5b                   	pop    ebx
c001a88c:	5e                   	pop    esi
c001a88d:	5f                   	pop    edi
c001a88e:	c3                   	ret    

c001a88f <Reg::readInt(char*, char*, int*)>:
c001a88f:	55                   	push   ebp
c001a890:	57                   	push   edi
c001a891:	56                   	push   esi
c001a892:	53                   	push   ebx
c001a893:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a899:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a89d:	57                   	push   edi
c001a89e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8a5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8ac:	e8 a7 ff ff ff       	call   c001a858 <Reg::getLine(char*, char*, char*)>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	84 c0                	test   al,al
c001a8b6:	0f 84 b3 00 00 00    	je     c001a96f <Reg::readInt(char*, char*, int*)+0xe0>
c001a8bc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a8c0:	80 fa 2b             	cmp    dl,0x2b
c001a8c3:	74 0c                	je     c001a8d1 <Reg::readInt(char*, char*, int*)+0x42>
c001a8c5:	80 fa 2d             	cmp    dl,0x2d
c001a8c8:	75 0e                	jne    c001a8d8 <Reg::readInt(char*, char*, int*)+0x49>
c001a8ca:	ba 01 00 00 00       	mov    edx,0x1
c001a8cf:	eb 0b                	jmp    c001a8dc <Reg::readInt(char*, char*, int*)+0x4d>
c001a8d1:	ba 01 00 00 00       	mov    edx,0x1
c001a8d6:	eb 02                	jmp    c001a8da <Reg::readInt(char*, char*, int*)+0x4b>
c001a8d8:	31 d2                	xor    edx,edx
c001a8da:	31 c0                	xor    eax,eax
c001a8dc:	be 0a 00 00 00       	mov    esi,0xa
c001a8e1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8e6:	75 20                	jne    c001a908 <Reg::readInt(char*, char*, int*)+0x79>
c001a8e8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8ec:	80 f9 78             	cmp    cl,0x78
c001a8ef:	75 0a                	jne    c001a8fb <Reg::readInt(char*, char*, int*)+0x6c>
c001a8f1:	83 c2 02             	add    edx,0x2
c001a8f4:	be 10 00 00 00       	mov    esi,0x10
c001a8f9:	eb 0d                	jmp    c001a908 <Reg::readInt(char*, char*, int*)+0x79>
c001a8fb:	80 f9 62             	cmp    cl,0x62
c001a8fe:	75 08                	jne    c001a908 <Reg::readInt(char*, char*, int*)+0x79>
c001a900:	83 c2 02             	add    edx,0x2
c001a903:	be 02 00 00 00       	mov    esi,0x2
c001a908:	01 d7                	add    edi,edx
c001a90a:	31 d2                	xor    edx,edx
c001a90c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a90e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a912:	80 fb 0d             	cmp    bl,0xd
c001a915:	0f 94 c3             	sete   bl
c001a918:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a91d:	0f 94 c1             	sete   cl
c001a920:	08 cb                	or     bl,cl
c001a922:	75 3a                	jne    c001a95e <Reg::readInt(char*, char*, int*)+0xcf>
c001a924:	0f af d6             	imul   edx,esi
c001a927:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a92c:	83 fe 10             	cmp    esi,0x10
c001a92f:	75 26                	jne    c001a957 <Reg::readInt(char*, char*, int*)+0xc8>
c001a931:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a935:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a938:	89 e9                	mov    ecx,ebp
c001a93a:	80 f9 05             	cmp    cl,0x5
c001a93d:	77 06                	ja     c001a945 <Reg::readInt(char*, char*, int*)+0xb6>
c001a93f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a943:	eb 16                	jmp    c001a95b <Reg::readInt(char*, char*, int*)+0xcc>
c001a945:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a949:	83 e9 61             	sub    ecx,0x61
c001a94c:	80 f9 05             	cmp    cl,0x5
c001a94f:	77 06                	ja     c001a957 <Reg::readInt(char*, char*, int*)+0xc8>
c001a951:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a955:	eb 04                	jmp    c001a95b <Reg::readInt(char*, char*, int*)+0xcc>
c001a957:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a95b:	47                   	inc    edi
c001a95c:	eb ae                	jmp    c001a90c <Reg::readInt(char*, char*, int*)+0x7d>
c001a95e:	84 c0                	test   al,al
c001a960:	74 02                	je     c001a964 <Reg::readInt(char*, char*, int*)+0xd5>
c001a962:	f7 da                	neg    edx
c001a964:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a96b:	89 10                	mov    DWORD PTR [eax],edx
c001a96d:	88 d8                	mov    al,bl
c001a96f:	81 c4 ec 00 00 00    	add    esp,0xec
c001a975:	5b                   	pop    ebx
c001a976:	5e                   	pop    esi
c001a977:	5f                   	pop    edi
c001a978:	5d                   	pop    ebp
c001a979:	c3                   	ret    

c001a97a <Reg::readString(char*, char*, char*, int)>:
c001a97a:	57                   	push   edi
c001a97b:	56                   	push   esi
c001a97c:	53                   	push   ebx
c001a97d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a983:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a98a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a98e:	57                   	push   edi
c001a98f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a996:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a99d:	e8 b6 fe ff ff       	call   c001a858 <Reg::getLine(char*, char*, char*)>
c001a9a2:	83 c4 10             	add    esp,0x10
c001a9a5:	89 c6                	mov    esi,eax
c001a9a7:	84 c0                	test   al,al
c001a9a9:	74 44                	je     c001a9ef <Reg::readString(char*, char*, char*, int)+0x75>
c001a9ab:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9b2:	31 c0                	xor    eax,eax
c001a9b4:	4a                   	dec    edx
c001a9b5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9b8:	84 c9                	test   cl,cl
c001a9ba:	74 0f                	je     c001a9cb <Reg::readString(char*, char*, char*, int)+0x51>
c001a9bc:	39 c2                	cmp    edx,eax
c001a9be:	7e 0b                	jle    c001a9cb <Reg::readString(char*, char*, char*, int)+0x51>
c001a9c0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a9c3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a9c8:	40                   	inc    eax
c001a9c9:	eb ea                	jmp    c001a9b5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a9cb:	83 ec 0c             	sub    esp,0xc
c001a9ce:	53                   	push   ebx
c001a9cf:	e8 05 5d fe ff       	call   c00006d9 <strlen>
c001a9d4:	83 c4 10             	add    esp,0x10
c001a9d7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9dc:	75 11                	jne    c001a9ef <Reg::readString(char*, char*, char*, int)+0x75>
c001a9de:	83 ec 0c             	sub    esp,0xc
c001a9e1:	53                   	push   ebx
c001a9e2:	e8 f2 5c fe ff       	call   c00006d9 <strlen>
c001a9e7:	83 c4 10             	add    esp,0x10
c001a9ea:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9ef:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9f5:	89 f0                	mov    eax,esi
c001a9f7:	5b                   	pop    ebx
c001a9f8:	5e                   	pop    esi
c001a9f9:	5f                   	pop    edi
c001a9fa:	c3                   	ret    

c001a9fb <Reg::readBool(char*, char*, bool*)>:
c001a9fb:	83 ec 20             	sub    esp,0x20
c001a9fe:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa02:	50                   	push   eax
c001aa03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa0b:	e8 7f fe ff ff       	call   c001a88f <Reg::readInt(char*, char*, int*)>
c001aa10:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa15:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa19:	0f 95 02             	setne  BYTE PTR [edx]
c001aa1c:	83 c4 2c             	add    esp,0x2c
c001aa1f:	c3                   	ret    

c001aa20 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa20:	53                   	push   ebx
c001aa21:	83 ec 1c             	sub    esp,0x1c
c001aa24:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa28:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa2c:	50                   	push   eax
c001aa2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa35:	e8 c1 ff ff ff       	call   c001a9fb <Reg::readBool(char*, char*, bool*)>
c001aa3a:	83 c4 10             	add    esp,0x10
c001aa3d:	84 c0                	test   al,al
c001aa3f:	74 04                	je     c001aa45 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa41:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa45:	88 d8                	mov    al,bl
c001aa47:	83 c4 18             	add    esp,0x18
c001aa4a:	5b                   	pop    ebx
c001aa4b:	c3                   	ret    

c001aa4c <Reg::readIntWithDefault(char*, char*, int)>:
c001aa4c:	53                   	push   ebx
c001aa4d:	83 ec 1c             	sub    esp,0x1c
c001aa50:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa54:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa58:	50                   	push   eax
c001aa59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa61:	e8 29 fe ff ff       	call   c001a88f <Reg::readInt(char*, char*, int*)>
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	84 c0                	test   al,al
c001aa6b:	74 04                	je     c001aa71 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa6d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa71:	89 d8                	mov    eax,ebx
c001aa73:	83 c4 18             	add    esp,0x18
c001aa76:	5b                   	pop    ebx
c001aa77:	c3                   	ret    

c001aa78 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa78:	57                   	push   edi
c001aa79:	56                   	push   esi
c001aa7a:	53                   	push   ebx
c001aa7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa7f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa87:	56                   	push   esi
c001aa88:	53                   	push   ebx
c001aa89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa91:	e8 e4 fe ff ff       	call   c001a97a <Reg::readString(char*, char*, char*, int)>
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	84 c0                	test   al,al
c001aa9b:	75 1b                	jne    c001aab8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001aa9d:	50                   	push   eax
c001aa9e:	56                   	push   esi
c001aa9f:	4e                   	dec    esi
c001aaa0:	6a 00                	push   0x0
c001aaa2:	53                   	push   ebx
c001aaa3:	e8 14 5c fe ff       	call   c00006bc <memset>
c001aaa8:	83 c4 0c             	add    esp,0xc
c001aaab:	56                   	push   esi
c001aaac:	57                   	push   edi
c001aaad:	53                   	push   ebx
c001aaae:	89 fb                	mov    ebx,edi
c001aab0:	e8 eb 5b fe ff       	call   c00006a0 <memcpy>
c001aab5:	83 c4 10             	add    esp,0x10
c001aab8:	89 d8                	mov    eax,ebx
c001aaba:	5b                   	pop    ebx
c001aabb:	5e                   	pop    esi
c001aabc:	5f                   	pop    edi
c001aabd:	c3                   	ret    

c001aabe <Sys::eject(regs*)>:
c001aabe:	83 ec 0c             	sub    esp,0xc
c001aac1:	83 ca ff             	or     edx,0xffffffff
c001aac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aacb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aad0:	83 e9 41             	sub    ecx,0x41
c001aad3:	83 f9 19             	cmp    ecx,0x19
c001aad6:	77 18                	ja     c001aaf0 <Sys::eject(regs*)+0x32>
c001aad8:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001aadf:	85 c9                	test   ecx,ecx
c001aae1:	74 0d                	je     c001aaf0 <Sys::eject(regs*)+0x32>
c001aae3:	83 ec 0c             	sub    esp,0xc
c001aae6:	51                   	push   ecx
c001aae7:	e8 52 b5 ff ff       	call   c001603e <LogicalDisk::eject()>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	99                   	cdq    
c001aaf0:	83 c4 0c             	add    esp,0xc
c001aaf3:	c3                   	ret    

c001aaf4 <Sys::exit(regs*)>:
c001aaf4:	83 ec 18             	sub    esp,0x18
c001aaf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aafb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aafe:	e8 fa 33 00 00       	call   c001defd <terminateTask(int)>
c001ab03:	83 c8 ff             	or     eax,0xffffffff
c001ab06:	83 c4 1c             	add    esp,0x1c
c001ab09:	89 c2                	mov    edx,eax
c001ab0b:	c3                   	ret    

c001ab0c <Sys::getCwd(regs*)>:
c001ab0c:	83 ec 10             	sub    esp,0x10
c001ab0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab13:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab16:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab21:	e8 20 81 ff ff       	call   c0012c46 <Fs::getcwd(Process*, char*, int)>
c001ab26:	83 c4 1c             	add    esp,0x1c
c001ab29:	99                   	cdq    
c001ab2a:	c3                   	ret    

c001ab2b <Sys::getPID(regs*)>:
c001ab2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab35:	99                   	cdq    
c001ab36:	c3                   	ret    

c001ab37 <Sys::loadDLL(regs*)>:
c001ab37:	56                   	push   esi
c001ab38:	53                   	push   ebx
c001ab39:	31 d2                	xor    edx,edx
c001ab3b:	51                   	push   ecx
c001ab3c:	b8 01 00 00 00       	mov    eax,0x1
c001ab41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab45:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ab49:	0f 84 8c 00 00 00    	je     c001abdb <Sys::loadDLL(regs*)+0xa4>
c001ab4f:	83 ec 0c             	sub    esp,0xc
c001ab52:	68 14 01 00 00       	push   0x114
c001ab57:	e8 c0 4a ff ff       	call   c000f61c <malloc>
c001ab5c:	83 c4 0c             	add    esp,0xc
c001ab5f:	89 c3                	mov    ebx,eax
c001ab61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab66:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab69:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ab6c:	53                   	push   ebx
c001ab6d:	e8 d2 82 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	31 d2                	xor    edx,edx
c001ab77:	b8 02 00 00 00       	mov    eax,0x2
c001ab7c:	85 db                	test   ebx,ebx
c001ab7e:	74 5b                	je     c001abdb <Sys::loadDLL(regs*)+0xa4>
c001ab80:	83 ec 0c             	sub    esp,0xc
c001ab83:	53                   	push   ebx
c001ab84:	e8 8d 85 ff ff       	call   c0013116 <File::exists()>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	84 c0                	test   al,al
c001ab8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab90:	75 11                	jne    c001aba3 <Sys::loadDLL(regs*)+0x6c>
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	53                   	push   ebx
c001ab96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	b8 03 00 00 00       	mov    eax,0x3
c001aba1:	eb 36                	jmp    c001abd9 <Sys::loadDLL(regs*)+0xa2>
c001aba3:	83 ec 0c             	sub    esp,0xc
c001aba6:	53                   	push   ebx
c001aba7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abaa:	58                   	pop    eax
c001abab:	5a                   	pop    edx
c001abac:	6a 00                	push   0x0
c001abae:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abb1:	e8 91 22 00 00       	call   c001ce47 <Thr::loadDLL(char const*, bool)>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	89 c1                	mov    ecx,eax
c001abbb:	31 d2                	xor    edx,edx
c001abbd:	b8 04 00 00 00       	mov    eax,0x4
c001abc2:	85 c9                	test   ecx,ecx
c001abc4:	74 15                	je     c001abdb <Sys::loadDLL(regs*)+0xa4>
c001abc6:	53                   	push   ebx
c001abc7:	53                   	push   ebx
c001abc8:	ff 35 48 da 02 c0    	push   DWORD PTR ds:0xc002da48
c001abce:	51                   	push   ecx
c001abcf:	e8 82 24 00 00       	call   c001d056 <Thr::executeDLL(unsigned long, void*)>
c001abd4:	83 c4 10             	add    esp,0x10
c001abd7:	31 c0                	xor    eax,eax
c001abd9:	31 d2                	xor    edx,edx
c001abdb:	59                   	pop    ecx
c001abdc:	5b                   	pop    ebx
c001abdd:	5e                   	pop    esi
c001abde:	c3                   	ret    

c001abdf <Sys::read(regs*)>:
c001abdf:	57                   	push   edi
c001abe0:	56                   	push   esi
c001abe1:	53                   	push   ebx
c001abe2:	83 ec 10             	sub    esp,0x10
c001abe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abe9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abec:	83 f8 02             	cmp    eax,0x2
c001abef:	77 10                	ja     c001ac01 <Sys::read(regs*)+0x22>
c001abf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abf6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abf9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001abff:	eb 0e                	jmp    c001ac0f <Sys::read(regs*)+0x30>
c001ac01:	83 ec 0c             	sub    esp,0xc
c001ac04:	50                   	push   eax
c001ac05:	e8 9b 6b ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001ac0a:	83 c4 10             	add    esp,0x10
c001ac0d:	89 c1                	mov    ecx,eax
c001ac0f:	83 c8 ff             	or     eax,0xffffffff
c001ac12:	85 c9                	test   ecx,ecx
c001ac14:	89 c2                	mov    edx,eax
c001ac16:	74 28                	je     c001ac40 <Sys::read(regs*)+0x61>
c001ac18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac20:	31 ff                	xor    edi,edi
c001ac22:	83 ec 0c             	sub    esp,0xc
c001ac25:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac27:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac2b:	52                   	push   edx
c001ac2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac2f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac32:	57                   	push   edi
c001ac33:	56                   	push   esi
c001ac34:	51                   	push   ecx
c001ac35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac3c:	83 c4 20             	add    esp,0x20
c001ac3f:	99                   	cdq    
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	5b                   	pop    ebx
c001ac44:	5e                   	pop    esi
c001ac45:	5f                   	pop    edi
c001ac46:	c3                   	ret    

c001ac47 <Sys::sbrk(regs*)>:
c001ac47:	56                   	push   esi
c001ac48:	53                   	push   ebx
c001ac49:	50                   	push   eax
c001ac4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac56:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ac59:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ac5f:	85 db                	test   ebx,ebx
c001ac61:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ac64:	74 02                	je     c001ac68 <Sys::sbrk(regs*)+0x21>
c001ac66:	79 06                	jns    c001ac6e <Sys::sbrk(regs*)+0x27>
c001ac68:	89 f0                	mov    eax,esi
c001ac6a:	31 d2                	xor    edx,edx
c001ac6c:	eb 2a                	jmp    c001ac98 <Sys::sbrk(regs*)+0x51>
c001ac6e:	83 c8 ff             	or     eax,0xffffffff
c001ac71:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ac77:	89 c2                	mov    edx,eax
c001ac79:	77 1d                	ja     c001ac98 <Sys::sbrk(regs*)+0x51>
c001ac7b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ac81:	50                   	push   eax
c001ac82:	c1 ea 0c             	shr    edx,0xc
c001ac85:	68 07 04 00 00       	push   0x407
c001ac8a:	52                   	push   edx
c001ac8b:	51                   	push   ecx
c001ac8c:	e8 35 74 ff ff       	call   c00120c6 <VAS::allocatePages(int, int)>
c001ac91:	89 f0                	mov    eax,esi
c001ac93:	31 d2                	xor    edx,edx
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	59                   	pop    ecx
c001ac99:	5b                   	pop    ebx
c001ac9a:	5e                   	pop    esi
c001ac9b:	c3                   	ret    

c001ac9c <Sys::setCwd(regs*)>:
c001ac9c:	83 ec 14             	sub    esp,0x14
c001ac9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aca3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acae:	e8 02 85 ff ff       	call   c00131b5 <Fs::setcwd(Process*, char*)>
c001acb3:	83 c4 1c             	add    esp,0x1c
c001acb6:	99                   	cdq    
c001acb7:	c3                   	ret    

c001acb8 <Sys::setTime(regs*)>:
c001acb8:	55                   	push   ebp
c001acb9:	31 d2                	xor    edx,edx
c001acbb:	57                   	push   edi
c001acbc:	bf 18 00 00 00       	mov    edi,0x18
c001acc1:	56                   	push   esi
c001acc2:	53                   	push   ebx
c001acc3:	bb 3c 00 00 00       	mov    ebx,0x3c
c001acc8:	83 ec 30             	sub    esp,0x30
c001accb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001accf:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001acd2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001acd5:	f7 f3                	div    ebx
c001acd7:	89 d6                	mov    esi,edx
c001acd9:	31 d2                	xor    edx,edx
c001acdb:	f7 f3                	div    ebx
c001acdd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ace0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ace4:	bb 10 0e 00 00       	mov    ebx,0xe10
c001ace9:	31 d2                	xor    edx,edx
c001aceb:	f7 f3                	div    ebx
c001aced:	31 d2                	xor    edx,edx
c001acef:	bb 0c 00 00 00       	mov    ebx,0xc
c001acf4:	f7 f7                	div    edi
c001acf6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001acf9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001acfd:	0f b7 cd             	movzx  ecx,bp
c001ad00:	56                   	push   esi
c001ad01:	89 c7                	mov    edi,eax
c001ad03:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ad07:	c1 e6 10             	shl    esi,0x10
c001ad0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad0e:	83 e7 1f             	and    edi,0x1f
c001ad11:	51                   	push   ecx
c001ad12:	47                   	inc    edi
c001ad13:	c1 e8 05             	shr    eax,0x5
c001ad16:	31 d2                	xor    edx,edx
c001ad18:	f7 f3                	div    ebx
c001ad1a:	31 db                	xor    ebx,ebx
c001ad1c:	52                   	push   edx
c001ad1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ad21:	57                   	push   edi
c001ad22:	68 35 b4 02 c0       	push   0xc002b435
c001ad27:	e8 bf 7b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ad2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad30:	89 f8                	mov    eax,edi
c001ad32:	31 c9                	xor    ecx,ecx
c001ad34:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ad38:	88 c1                	mov    cl,al
c001ad3a:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ad40:	88 d5                	mov    ch,dl
c001ad42:	c1 e0 10             	shl    eax,0x10
c001ad45:	0f b7 d1             	movzx  edx,cx
c001ad48:	09 c2                	or     edx,eax
c001ad4a:	89 d8                	mov    eax,ebx
c001ad4c:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ad51:	09 f0                	or     eax,esi
c001ad53:	89 c3                	mov    ebx,eax
c001ad55:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ad59:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad5d:	83 c4 18             	add    esp,0x18
c001ad60:	53                   	push   ebx
c001ad61:	52                   	push   edx
c001ad62:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ad66:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ad6a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad6e:	e8 5c 8b ff ff       	call   c00138cf <datetimeToSeconds(datetime_t)>
c001ad73:	83 c4 0c             	add    esp,0xc
c001ad76:	52                   	push   edx
c001ad77:	50                   	push   eax
c001ad78:	56                   	push   esi
c001ad79:	e8 d8 8c ff ff       	call   c0013a56 <secondsToDatetime(unsigned long long)>
c001ad7e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad86:	51                   	push   ecx
c001ad87:	89 d6                	mov    esi,edx
c001ad89:	51                   	push   ecx
c001ad8a:	c1 ee 10             	shr    esi,0x10
c001ad8d:	89 f3                	mov    ebx,esi
c001ad8f:	0f b6 f3             	movzx  esi,bl
c001ad92:	56                   	push   esi
c001ad93:	0f b6 f6             	movzx  esi,dh
c001ad96:	0f b6 d2             	movzx  edx,dl
c001ad99:	56                   	push   esi
c001ad9a:	52                   	push   edx
c001ad9b:	89 c2                	mov    edx,eax
c001ad9d:	c1 ea 10             	shr    edx,0x10
c001ada0:	52                   	push   edx
c001ada1:	0f b6 d4             	movzx  edx,ah
c001ada4:	0f b6 c0             	movzx  eax,al
c001ada7:	52                   	push   edx
c001ada8:	50                   	push   eax
c001ada9:	68 51 b4 02 c0       	push   0xc002b451
c001adae:	e8 38 7b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001adb3:	83 c4 2c             	add    esp,0x2c
c001adb6:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001adbb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001adbf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001adc3:	53                   	push   ebx
c001adc4:	51                   	push   ecx
c001adc5:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001adcb:	e8 26 8c ff ff       	call   c00139f6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001add0:	83 f0 01             	xor    eax,0x1
c001add3:	31 d2                	xor    edx,edx
c001add5:	0f b6 c0             	movzx  eax,al
c001add8:	83 c4 3c             	add    esp,0x3c
c001addb:	5b                   	pop    ebx
c001addc:	5e                   	pop    esi
c001addd:	5f                   	pop    edi
c001adde:	5d                   	pop    ebp
c001addf:	c3                   	ret    

c001ade0 <Sys::timezone(regs*)>:
c001ade0:	53                   	push   ebx
c001ade1:	83 ec 08             	sub    esp,0x8
c001ade4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ade8:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001adec:	75 17                	jne    c001ae05 <Sys::timezone(regs*)+0x25>
c001adee:	83 ec 0c             	sub    esp,0xc
c001adf1:	68 6d b4 02 c0       	push   0xc002b46d
c001adf6:	e8 f0 7a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001adfb:	83 c8 ff             	or     eax,0xffffffff
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	89 c2                	mov    edx,eax
c001ae03:	eb 20                	jmp    c001ae25 <Sys::timezone(regs*)+0x45>
c001ae05:	83 ec 0c             	sub    esp,0xc
c001ae08:	68 a5 b4 02 c0       	push   0xc002b4a5
c001ae0d:	e8 d9 7a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ae12:	58                   	pop    eax
c001ae13:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae16:	e8 3d 89 ff ff       	call   c0013758 <User::loadClockSettings(int)>
c001ae1b:	83 c4 10             	add    esp,0x10
c001ae1e:	b8 01 00 00 00       	mov    eax,0x1
c001ae23:	31 d2                	xor    edx,edx
c001ae25:	83 c4 08             	add    esp,0x8
c001ae28:	5b                   	pop    ebx
c001ae29:	c3                   	ret    

c001ae2a <Sys::write(regs*)>:
c001ae2a:	57                   	push   edi
c001ae2b:	56                   	push   esi
c001ae2c:	53                   	push   ebx
c001ae2d:	83 ec 10             	sub    esp,0x10
c001ae30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae37:	83 f8 02             	cmp    eax,0x2
c001ae3a:	77 10                	ja     c001ae4c <Sys::write(regs*)+0x22>
c001ae3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae44:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae4a:	eb 0e                	jmp    c001ae5a <Sys::write(regs*)+0x30>
c001ae4c:	83 ec 0c             	sub    esp,0xc
c001ae4f:	50                   	push   eax
c001ae50:	e8 50 69 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001ae55:	83 c4 10             	add    esp,0x10
c001ae58:	89 c1                	mov    ecx,eax
c001ae5a:	83 c8 ff             	or     eax,0xffffffff
c001ae5d:	85 c9                	test   ecx,ecx
c001ae5f:	89 c2                	mov    edx,eax
c001ae61:	74 28                	je     c001ae8b <Sys::write(regs*)+0x61>
c001ae63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae6b:	31 ff                	xor    edi,edi
c001ae6d:	83 ec 0c             	sub    esp,0xc
c001ae70:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae72:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae76:	52                   	push   edx
c001ae77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae7a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae7d:	57                   	push   edi
c001ae7e:	56                   	push   esi
c001ae7f:	51                   	push   ecx
c001ae80:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae87:	83 c4 20             	add    esp,0x20
c001ae8a:	99                   	cdq    
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	5b                   	pop    ebx
c001ae8f:	5e                   	pop    esi
c001ae90:	5f                   	pop    edi
c001ae91:	c3                   	ret    

c001ae92 <Sys::yield(regs*)>:
c001ae92:	57                   	push   edi
c001ae93:	56                   	push   esi
c001ae94:	53                   	push   ebx
c001ae95:	e8 20 26 00 00       	call   c001d4ba <lockScheduler()>
c001ae9a:	e8 57 29 00 00       	call   c001d7f6 <schedule()>
c001ae9f:	e8 18 26 00 00       	call   c001d4bc <unlockScheduler()>
c001aea4:	8b 35 d0 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0d0
c001aeaa:	8b 3d d4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0d4
c001aeb0:	89 f0                	mov    eax,esi
c001aeb2:	89 fb                	mov    ebx,edi
c001aeb4:	89 f1                	mov    ecx,esi
c001aeb6:	c1 e0 07             	shl    eax,0x7
c001aeb9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aebd:	25 80 30 0f 00       	and    eax,0xf3080
c001aec2:	c1 eb 17             	shr    ebx,0x17
c001aec5:	31 c8                	xor    eax,ecx
c001aec7:	89 da                	mov    edx,ebx
c001aec9:	5b                   	pop    ebx
c001aeca:	5e                   	pop    esi
c001aecb:	5f                   	pop    edi
c001aecc:	c3                   	ret    

c001aecd <sysCallSeekDir(regs*)>:
c001aecd:	31 c0                	xor    eax,eax
c001aecf:	31 d2                	xor    edx,edx
c001aed1:	c3                   	ret    

c001aed2 <sysCallTellDir(regs*)>:
c001aed2:	31 c0                	xor    eax,eax
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	c3                   	ret    

c001aed7 <sysCallVerify(regs*)>:
c001aed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aedb:	31 d2                	xor    edx,edx
c001aedd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aee0:	c3                   	ret    

c001aee1 <sysCallGetArgc(regs*)>:
c001aee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aee6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aee9:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001aeef:	99                   	cdq    
c001aef0:	c3                   	ret    

c001aef1 <sysFormatDisk(regs*)>:
c001aef1:	56                   	push   esi
c001aef2:	53                   	push   ebx
c001aef3:	53                   	push   ebx
c001aef4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aef8:	8b 1d c8 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbc8
c001aefe:	eb 25                	jmp    c001af25 <sysFormatDisk(regs*)+0x34>
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af06:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af08:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af0b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af0e:	50                   	push   eax
c001af0f:	ff 34 85 60 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1fa0]
c001af16:	53                   	push   ebx
c001af17:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af1a:	83 c4 20             	add    esp,0x20
c001af1d:	83 f8 08             	cmp    eax,0x8
c001af20:	75 12                	jne    c001af34 <sysFormatDisk(regs*)+0x43>
c001af22:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af25:	85 db                	test   ebx,ebx
c001af27:	75 d7                	jne    c001af00 <sysFormatDisk(regs*)+0xf>
c001af29:	59                   	pop    ecx
c001af2a:	b8 03 00 00 00       	mov    eax,0x3
c001af2f:	31 d2                	xor    edx,edx
c001af31:	5b                   	pop    ebx
c001af32:	5e                   	pop    esi
c001af33:	c3                   	ret    
c001af34:	85 c0                	test   eax,eax
c001af36:	74 1b                	je     c001af53 <sysFormatDisk(regs*)+0x62>
c001af38:	83 f8 09             	cmp    eax,0x9
c001af3b:	74 0b                	je     c001af48 <sysFormatDisk(regs*)+0x57>
c001af3d:	59                   	pop    ecx
c001af3e:	b8 02 00 00 00       	mov    eax,0x2
c001af43:	31 d2                	xor    edx,edx
c001af45:	5b                   	pop    ebx
c001af46:	5e                   	pop    esi
c001af47:	c3                   	ret    
c001af48:	59                   	pop    ecx
c001af49:	b8 01 00 00 00       	mov    eax,0x1
c001af4e:	31 d2                	xor    edx,edx
c001af50:	5b                   	pop    ebx
c001af51:	5e                   	pop    esi
c001af52:	c3                   	ret    
c001af53:	59                   	pop    ecx
c001af54:	31 c0                	xor    eax,eax
c001af56:	31 d2                	xor    edx,edx
c001af58:	5b                   	pop    ebx
c001af59:	5e                   	pop    esi
c001af5a:	c3                   	ret    

c001af5b <sysSetDiskVolumeLabel(regs*)>:
c001af5b:	56                   	push   esi
c001af5c:	53                   	push   ebx
c001af5d:	53                   	push   ebx
c001af5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af62:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af65:	83 f8 19             	cmp    eax,0x19
c001af68:	77 29                	ja     c001af93 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af6a:	8b 0c 85 60 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1fa0]
c001af71:	85 c9                	test   ecx,ecx
c001af73:	74 1e                	je     c001af93 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af75:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001af78:	85 d2                	test   edx,edx
c001af7a:	74 17                	je     c001af93 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af7c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001af82:	8b 33                	mov    esi,DWORD PTR [ebx]
c001af84:	52                   	push   edx
c001af85:	50                   	push   eax
c001af86:	51                   	push   ecx
c001af87:	53                   	push   ebx
c001af88:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	99                   	cdq    
c001af8f:	59                   	pop    ecx
c001af90:	5b                   	pop    ebx
c001af91:	5e                   	pop    esi
c001af92:	c3                   	ret    
c001af93:	59                   	pop    ecx
c001af94:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001af99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af9e:	5b                   	pop    ebx
c001af9f:	5e                   	pop    esi
c001afa0:	c3                   	ret    

c001afa1 <sysGetDiskVolumeLabel(regs*)>:
c001afa1:	57                   	push   edi
c001afa2:	56                   	push   esi
c001afa3:	53                   	push   ebx
c001afa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afab:	83 fa 19             	cmp    edx,0x19
c001afae:	77 34                	ja     c001afe4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afb0:	8b 0c 95 60 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1fa0]
c001afb7:	85 c9                	test   ecx,ecx
c001afb9:	74 29                	je     c001afe4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afbb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afbe:	85 db                	test   ebx,ebx
c001afc0:	74 22                	je     c001afe4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afc2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001afc5:	85 c0                	test   eax,eax
c001afc7:	74 1b                	je     c001afe4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afc9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001afcf:	83 ec 0c             	sub    esp,0xc
c001afd2:	8b 3e                	mov    edi,DWORD PTR [esi]
c001afd4:	50                   	push   eax
c001afd5:	53                   	push   ebx
c001afd6:	52                   	push   edx
c001afd7:	51                   	push   ecx
c001afd8:	56                   	push   esi
c001afd9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001afdc:	83 c4 20             	add    esp,0x20
c001afdf:	99                   	cdq    
c001afe0:	5b                   	pop    ebx
c001afe1:	5e                   	pop    esi
c001afe2:	5f                   	pop    edi
c001afe3:	c3                   	ret    
c001afe4:	5b                   	pop    ebx
c001afe5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afea:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afef:	5e                   	pop    esi
c001aff0:	5f                   	pop    edi
c001aff1:	c3                   	ret    

c001aff2 <sysShutdown(regs*)>:
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001affc:	85 c0                	test   eax,eax
c001affe:	74 18                	je     c001b018 <sysShutdown(regs*)+0x26>
c001b000:	83 f8 01             	cmp    eax,0x1
c001b003:	74 38                	je     c001b03d <sysShutdown(regs*)+0x4b>
c001b005:	83 f8 02             	cmp    eax,0x2
c001b008:	74 24                	je     c001b02e <sysShutdown(regs*)+0x3c>
c001b00a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b00f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b014:	83 c4 0c             	add    esp,0xc
c001b017:	c3                   	ret    
c001b018:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001b01d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b01f:	6a 00                	push   0x0
c001b021:	6a 00                	push   0x0
c001b023:	6a 00                	push   0x0
c001b025:	50                   	push   eax
c001b026:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b029:	83 c4 10             	add    esp,0x10
c001b02c:	eb dc                	jmp    c001b00a <sysShutdown(regs*)+0x18>
c001b02e:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001b033:	8b 10                	mov    edx,DWORD PTR [eax]
c001b035:	6a 00                	push   0x0
c001b037:	6a 00                	push   0x0
c001b039:	6a 01                	push   0x1
c001b03b:	eb e8                	jmp    c001b025 <sysShutdown(regs*)+0x33>
c001b03d:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001b042:	85 c0                	test   eax,eax
c001b044:	74 02                	je     c001b048 <sysShutdown(regs*)+0x56>
c001b046:	ff d0                	call   eax
c001b048:	31 c0                	xor    eax,eax
c001b04a:	31 d2                	xor    edx,edx
c001b04c:	83 c4 0c             	add    esp,0xc
c001b04f:	c3                   	ret    

c001b050 <sysCallRealpath(regs*)>:
c001b050:	83 ec 0c             	sub    esp,0xc
c001b053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b057:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b05a:	85 d2                	test   edx,edx
c001b05c:	74 07                	je     c001b065 <sysCallRealpath(regs*)+0x15>
c001b05e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b061:	85 c0                	test   eax,eax
c001b063:	75 0b                	jne    c001b070 <sysCallRealpath(regs*)+0x20>
c001b065:	b8 01 00 00 00       	mov    eax,0x1
c001b06a:	31 d2                	xor    edx,edx
c001b06c:	83 c4 0c             	add    esp,0xc
c001b06f:	c3                   	ret    
c001b070:	51                   	push   ecx
c001b071:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b077:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b07a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b080:	51                   	push   ecx
c001b081:	52                   	push   edx
c001b082:	50                   	push   eax
c001b083:	e8 12 7c ff ff       	call   c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	31 c0                	xor    eax,eax
c001b08d:	31 d2                	xor    edx,edx
c001b08f:	83 c4 0c             	add    esp,0xc
c001b092:	c3                   	ret    

c001b093 <sysCallReadDir(regs*)>:
c001b093:	53                   	push   ebx
c001b094:	83 ec 18             	sub    esp,0x18
c001b097:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b09b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b09e:	83 f8 02             	cmp    eax,0x2
c001b0a1:	76 53                	jbe    c001b0f6 <sysCallReadDir(regs*)+0x63>
c001b0a3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b0a6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b0ac:	77 4f                	ja     c001b0fd <sysCallReadDir(regs*)+0x6a>
c001b0ae:	83 ec 0c             	sub    esp,0xc
c001b0b1:	50                   	push   eax
c001b0b2:	e8 ee 66 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b0b7:	83 c4 10             	add    esp,0x10
c001b0ba:	85 c0                	test   eax,eax
c001b0bc:	74 50                	je     c001b10e <sysCallReadDir(regs*)+0x7b>
c001b0be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0c6:	83 ec 0c             	sub    esp,0xc
c001b0c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0cb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b0cf:	51                   	push   ecx
c001b0d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0d3:	6a 00                	push   0x0
c001b0d5:	68 10 01 00 00       	push   0x110
c001b0da:	50                   	push   eax
c001b0db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0de:	83 c4 20             	add    esp,0x20
c001b0e1:	85 c0                	test   eax,eax
c001b0e3:	74 38                	je     c001b11d <sysCallReadDir(regs*)+0x8a>
c001b0e5:	83 f8 07             	cmp    eax,0x7
c001b0e8:	74 0c                	je     c001b0f6 <sysCallReadDir(regs*)+0x63>
c001b0ea:	b8 02 00 00 00       	mov    eax,0x2
c001b0ef:	31 d2                	xor    edx,edx
c001b0f1:	83 c4 18             	add    esp,0x18
c001b0f4:	5b                   	pop    ebx
c001b0f5:	c3                   	ret    
c001b0f6:	b8 01 00 00 00       	mov    eax,0x1
c001b0fb:	eb f2                	jmp    c001b0ef <sysCallReadDir(regs*)+0x5c>
c001b0fd:	83 ec 08             	sub    esp,0x8
c001b100:	52                   	push   edx
c001b101:	68 e4 b4 02 c0       	push   0xc002b4e4
c001b106:	e8 e0 77 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b10b:	83 c4 10             	add    esp,0x10
c001b10e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b113:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b118:	83 c4 18             	add    esp,0x18
c001b11b:	5b                   	pop    ebx
c001b11c:	c3                   	ret    
c001b11d:	31 c0                	xor    eax,eax
c001b11f:	eb ce                	jmp    c001b0ef <sysCallReadDir(regs*)+0x5c>

c001b121 <sysCallIsATTY(regs*)>:
c001b121:	83 ec 0c             	sub    esp,0xc
c001b124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b128:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b12b:	83 f8 02             	cmp    eax,0x2
c001b12e:	76 07                	jbe    c001b137 <sysCallIsATTY(regs*)+0x16>
c001b130:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b135:	75 26                	jne    c001b15d <sysCallIsATTY(regs*)+0x3c>
c001b137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b13c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b13f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b145:	85 c0                	test   eax,eax
c001b147:	74 24                	je     c001b16d <sysCallIsATTY(regs*)+0x4c>
c001b149:	83 ec 0c             	sub    esp,0xc
c001b14c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b14e:	50                   	push   eax
c001b14f:	ff 12                	call   DWORD PTR [edx]
c001b151:	31 d2                	xor    edx,edx
c001b153:	0f b6 c0             	movzx  eax,al
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	83 c4 0c             	add    esp,0xc
c001b15c:	c3                   	ret    
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	50                   	push   eax
c001b161:	e8 3f 66 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	85 c0                	test   eax,eax
c001b16b:	75 dc                	jne    c001b149 <sysCallIsATTY(regs*)+0x28>
c001b16d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b172:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b177:	83 c4 0c             	add    esp,0xc
c001b17a:	c3                   	ret    

c001b17b <sysCallSeek(regs*)>:
c001b17b:	53                   	push   ebx
c001b17c:	83 ec 08             	sub    esp,0x8
c001b17f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b183:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b186:	83 f8 02             	cmp    eax,0x2
c001b189:	76 4a                	jbe    c001b1d5 <sysCallSeek(regs*)+0x5a>
c001b18b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b190:	77 32                	ja     c001b1c4 <sysCallSeek(regs*)+0x49>
c001b192:	83 ec 0c             	sub    esp,0xc
c001b195:	50                   	push   eax
c001b196:	e8 0a 66 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b19b:	83 c4 0c             	add    esp,0xc
c001b19e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1a1:	31 db                	xor    ebx,ebx
c001b1a3:	53                   	push   ebx
c001b1a4:	51                   	push   ecx
c001b1a5:	50                   	push   eax
c001b1a6:	e8 bb 7d ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	85 c0                	test   eax,eax
c001b1b0:	0f 95 c0             	setne  al
c001b1b3:	31 d2                	xor    edx,edx
c001b1b5:	0f b6 c0             	movzx  eax,al
c001b1b8:	f7 d8                	neg    eax
c001b1ba:	83 d2 00             	adc    edx,0x0
c001b1bd:	83 c4 08             	add    esp,0x8
c001b1c0:	f7 da                	neg    edx
c001b1c2:	5b                   	pop    ebx
c001b1c3:	c3                   	ret    
c001b1c4:	83 ec 08             	sub    esp,0x8
c001b1c7:	50                   	push   eax
c001b1c8:	68 53 b5 02 c0       	push   0xc002b553
c001b1cd:	e8 19 77 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b1d2:	83 c4 10             	add    esp,0x10
c001b1d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1df:	83 c4 08             	add    esp,0x8
c001b1e2:	5b                   	pop    ebx
c001b1e3:	c3                   	ret    

c001b1e4 <sysCallTell(regs*)>:
c001b1e4:	53                   	push   ebx
c001b1e5:	83 ec 08             	sub    esp,0x8
c001b1e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1ef:	83 f8 02             	cmp    eax,0x2
c001b1f2:	76 5e                	jbe    c001b252 <sysCallTell(regs*)+0x6e>
c001b1f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b1f9:	77 2d                	ja     c001b228 <sysCallTell(regs*)+0x44>
c001b1fb:	83 ec 0c             	sub    esp,0xc
c001b1fe:	50                   	push   eax
c001b1ff:	e8 a1 65 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b204:	5a                   	pop    edx
c001b205:	59                   	pop    ecx
c001b206:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b209:	50                   	push   eax
c001b20a:	e8 ad 7d ff ff       	call   c0012fbc <File::tell(unsigned long long*)>
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	85 c0                	test   eax,eax
c001b214:	0f 95 c0             	setne  al
c001b217:	31 d2                	xor    edx,edx
c001b219:	0f b6 c0             	movzx  eax,al
c001b21c:	f7 d8                	neg    eax
c001b21e:	83 d2 00             	adc    edx,0x0
c001b221:	83 c4 08             	add    esp,0x8
c001b224:	f7 da                	neg    edx
c001b226:	5b                   	pop    ebx
c001b227:	c3                   	ret    
c001b228:	83 ec 08             	sub    esp,0x8
c001b22b:	50                   	push   eax
c001b22c:	68 6d b5 02 c0       	push   0xc002b56d
c001b231:	e8 b5 76 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b236:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b242:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b249:	31 d2                	xor    edx,edx
c001b24b:	31 c0                	xor    eax,eax
c001b24d:	83 c4 08             	add    esp,0x8
c001b250:	5b                   	pop    ebx
c001b251:	c3                   	ret    
c001b252:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b257:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b25c:	83 c4 08             	add    esp,0x8
c001b25f:	5b                   	pop    ebx
c001b260:	c3                   	ret    

c001b261 <sysCallSize(regs*)>:
c001b261:	53                   	push   ebx
c001b262:	83 ec 18             	sub    esp,0x18
c001b265:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b269:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b26c:	83 f8 02             	cmp    eax,0x2
c001b26f:	76 64                	jbe    c001b2d5 <sysCallSize(regs*)+0x74>
c001b271:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b276:	77 33                	ja     c001b2ab <sysCallSize(regs*)+0x4a>
c001b278:	83 ec 0c             	sub    esp,0xc
c001b27b:	50                   	push   eax
c001b27c:	e8 24 65 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b288:	52                   	push   edx
c001b289:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b28c:	50                   	push   eax
c001b28d:	e8 c2 7e ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001b292:	83 c4 10             	add    esp,0x10
c001b295:	85 c0                	test   eax,eax
c001b297:	0f 95 c0             	setne  al
c001b29a:	31 d2                	xor    edx,edx
c001b29c:	0f b6 c0             	movzx  eax,al
c001b29f:	f7 d8                	neg    eax
c001b2a1:	83 d2 00             	adc    edx,0x0
c001b2a4:	83 c4 18             	add    esp,0x18
c001b2a7:	f7 da                	neg    edx
c001b2a9:	5b                   	pop    ebx
c001b2aa:	c3                   	ret    
c001b2ab:	83 ec 08             	sub    esp,0x8
c001b2ae:	50                   	push   eax
c001b2af:	68 87 b5 02 c0       	push   0xc002b587
c001b2b4:	e8 32 76 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b2b9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2bc:	83 c4 10             	add    esp,0x10
c001b2bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2cc:	31 d2                	xor    edx,edx
c001b2ce:	31 c0                	xor    eax,eax
c001b2d0:	83 c4 18             	add    esp,0x18
c001b2d3:	5b                   	pop    ebx
c001b2d4:	c3                   	ret    
c001b2d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2df:	83 c4 18             	add    esp,0x18
c001b2e2:	5b                   	pop    ebx
c001b2e3:	c3                   	ret    

c001b2e4 <sysCallSizeFromFilename(regs*)>:
c001b2e4:	57                   	push   edi
c001b2e5:	56                   	push   esi
c001b2e6:	53                   	push   ebx
c001b2e7:	83 ec 20             	sub    esp,0x20
c001b2ea:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2ee:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b2f1:	83 fb 02             	cmp    ebx,0x2
c001b2f4:	0f 86 99 00 00 00    	jbe    c001b393 <sysCallSizeFromFilename(regs*)+0xaf>
c001b2fa:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b300:	77 65                	ja     c001b367 <sysCallSizeFromFilename(regs*)+0x83>
c001b302:	83 ec 0c             	sub    esp,0xc
c001b305:	68 14 01 00 00       	push   0x114
c001b30a:	e8 0d 43 ff ff       	call   c000f61c <malloc>
c001b30f:	83 c4 0c             	add    esp,0xc
c001b312:	89 c6                	mov    esi,eax
c001b314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b319:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b31c:	53                   	push   ebx
c001b31d:	56                   	push   esi
c001b31e:	e8 21 7b ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001b323:	83 c4 0c             	add    esp,0xc
c001b326:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b32a:	50                   	push   eax
c001b32b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b32e:	56                   	push   esi
c001b32f:	e8 20 7e ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	85 f6                	test   esi,esi
c001b339:	74 14                	je     c001b34f <sysCallSizeFromFilename(regs*)+0x6b>
c001b33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b33f:	8b 16                	mov    edx,DWORD PTR [esi]
c001b341:	83 ec 0c             	sub    esp,0xc
c001b344:	56                   	push   esi
c001b345:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34f:	85 c0                	test   eax,eax
c001b351:	0f 95 c0             	setne  al
c001b354:	31 d2                	xor    edx,edx
c001b356:	0f b6 c0             	movzx  eax,al
c001b359:	f7 d8                	neg    eax
c001b35b:	83 d2 00             	adc    edx,0x0
c001b35e:	83 c4 20             	add    esp,0x20
c001b361:	f7 da                	neg    edx
c001b363:	5b                   	pop    ebx
c001b364:	5e                   	pop    esi
c001b365:	5f                   	pop    edi
c001b366:	c3                   	ret    
c001b367:	83 ec 08             	sub    esp,0x8
c001b36a:	53                   	push   ebx
c001b36b:	68 87 b5 02 c0       	push   0xc002b587
c001b370:	e8 76 75 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b375:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b381:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b388:	31 d2                	xor    edx,edx
c001b38a:	83 c4 20             	add    esp,0x20
c001b38d:	31 c0                	xor    eax,eax
c001b38f:	5b                   	pop    ebx
c001b390:	5e                   	pop    esi
c001b391:	5f                   	pop    edi
c001b392:	c3                   	ret    
c001b393:	83 c4 20             	add    esp,0x20
c001b396:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b39b:	5b                   	pop    ebx
c001b39c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3a1:	5e                   	pop    esi
c001b3a2:	5f                   	pop    edi
c001b3a3:	c3                   	ret    

c001b3a4 <sysCallClose(regs*)>:
c001b3a4:	53                   	push   ebx
c001b3a5:	83 ec 08             	sub    esp,0x8
c001b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3af:	83 f8 02             	cmp    eax,0x2
c001b3b2:	76 50                	jbe    c001b404 <sysCallClose(regs*)+0x60>
c001b3b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3b9:	74 58                	je     c001b413 <sysCallClose(regs*)+0x6f>
c001b3bb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3c0:	74 60                	je     c001b422 <sysCallClose(regs*)+0x7e>
c001b3c2:	77 2f                	ja     c001b3f3 <sysCallClose(regs*)+0x4f>
c001b3c4:	83 ec 0c             	sub    esp,0xc
c001b3c7:	50                   	push   eax
c001b3c8:	e8 d8 63 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b3cd:	89 c3                	mov    ebx,eax
c001b3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3d2:	e8 2f 7b ff ff       	call   c0012f06 <File::close()>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	85 db                	test   ebx,ebx
c001b3dc:	74 0c                	je     c001b3ea <sysCallClose(regs*)+0x46>
c001b3de:	83 ec 0c             	sub    esp,0xc
c001b3e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e3:	53                   	push   ebx
c001b3e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e7:	83 c4 10             	add    esp,0x10
c001b3ea:	31 c0                	xor    eax,eax
c001b3ec:	31 d2                	xor    edx,edx
c001b3ee:	83 c4 08             	add    esp,0x8
c001b3f1:	5b                   	pop    ebx
c001b3f2:	c3                   	ret    
c001b3f3:	83 ec 08             	sub    esp,0x8
c001b3f6:	50                   	push   eax
c001b3f7:	68 08 b5 02 c0       	push   0xc002b508
c001b3fc:	e8 ea 74 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b409:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b40e:	83 c4 08             	add    esp,0x8
c001b411:	5b                   	pop    ebx
c001b412:	c3                   	ret    
c001b413:	83 ec 0c             	sub    esp,0xc
c001b416:	68 a2 b5 02 c0       	push   0xc002b5a2
c001b41b:	e8 cb 74 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b420:	eb c5                	jmp    c001b3e7 <sysCallClose(regs*)+0x43>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 b0 b5 02 c0       	push   0xc002b5b0
c001b42a:	eb ef                	jmp    c001b41b <sysCallClose(regs*)+0x77>

c001b42c <sysCallOpenDir(regs*)>:
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	53                   	push   ebx
c001b42f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b433:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b436:	85 f6                	test   esi,esi
c001b438:	74 59                	je     c001b493 <sysCallOpenDir(regs*)+0x67>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	68 14 01 00 00       	push   0x114
c001b442:	e8 d5 41 ff ff       	call   c000f61c <malloc>
c001b447:	83 c4 0c             	add    esp,0xc
c001b44a:	89 c6                	mov    esi,eax
c001b44c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b451:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b454:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b457:	56                   	push   esi
c001b458:	e8 93 7e ff ff       	call   c00132f0 <Directory::Directory(char const*, Process*)>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	85 f6                	test   esi,esi
c001b462:	74 2f                	je     c001b493 <sysCallOpenDir(regs*)+0x67>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	56                   	push   esi
c001b468:	e8 e7 7e ff ff       	call   c0013354 <Directory::open()>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	85 c0                	test   eax,eax
c001b472:	75 1f                	jne    c001b493 <sysCallOpenDir(regs*)+0x67>
c001b474:	83 ec 0c             	sub    esp,0xc
c001b477:	56                   	push   esi
c001b478:	e8 33 60 ff ff       	call   c00114b0 <UnixFile::getFileDescriptor()>
c001b47d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	89 02                	mov    DWORD PTR [edx],eax
c001b485:	c1 f8 1f             	sar    eax,0x1f
c001b488:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b48b:	31 c0                	xor    eax,eax
c001b48d:	59                   	pop    ecx
c001b48e:	31 d2                	xor    edx,edx
c001b490:	5b                   	pop    ebx
c001b491:	5e                   	pop    esi
c001b492:	c3                   	ret    
c001b493:	59                   	pop    ecx
c001b494:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b499:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b49e:	5b                   	pop    ebx
c001b49f:	5e                   	pop    esi
c001b4a0:	c3                   	ret    

c001b4a1 <sysCallCloseDir(regs*)>:
c001b4a1:	53                   	push   ebx
c001b4a2:	83 ec 08             	sub    esp,0x8
c001b4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4ac:	83 f8 02             	cmp    eax,0x2
c001b4af:	76 47                	jbe    c001b4f8 <sysCallCloseDir(regs*)+0x57>
c001b4b1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4b6:	77 2f                	ja     c001b4e7 <sysCallCloseDir(regs*)+0x46>
c001b4b8:	83 ec 0c             	sub    esp,0xc
c001b4bb:	50                   	push   eax
c001b4bc:	e8 e4 62 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b4c1:	89 c3                	mov    ebx,eax
c001b4c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4c6:	e8 e5 7e ff ff       	call   c00133b0 <Directory::close()>
c001b4cb:	83 c4 10             	add    esp,0x10
c001b4ce:	85 db                	test   ebx,ebx
c001b4d0:	74 0c                	je     c001b4de <sysCallCloseDir(regs*)+0x3d>
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4d7:	53                   	push   ebx
c001b4d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4db:	83 c4 10             	add    esp,0x10
c001b4de:	31 c0                	xor    eax,eax
c001b4e0:	31 d2                	xor    edx,edx
c001b4e2:	83 c4 08             	add    esp,0x8
c001b4e5:	5b                   	pop    ebx
c001b4e6:	c3                   	ret    
c001b4e7:	83 ec 08             	sub    esp,0x8
c001b4ea:	50                   	push   eax
c001b4eb:	68 30 b5 02 c0       	push   0xc002b530
c001b4f0:	e8 f6 73 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b502:	83 c4 08             	add    esp,0x8
c001b505:	5b                   	pop    ebx
c001b506:	c3                   	ret    

c001b507 <sysCallMakeDir(regs*)>:
c001b507:	56                   	push   esi
c001b508:	53                   	push   ebx
c001b509:	83 ec 10             	sub    esp,0x10
c001b50c:	68 14 01 00 00       	push   0x114
c001b511:	e8 06 41 ff ff       	call   c000f61c <malloc>
c001b516:	83 c4 0c             	add    esp,0xc
c001b519:	89 c3                	mov    ebx,eax
c001b51b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b520:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b527:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b52a:	53                   	push   ebx
c001b52b:	e8 c0 7d ff ff       	call   c00132f0 <Directory::Directory(char const*, Process*)>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	85 db                	test   ebx,ebx
c001b535:	74 32                	je     c001b569 <sysCallMakeDir(regs*)+0x62>
c001b537:	83 ec 0c             	sub    esp,0xc
c001b53a:	53                   	push   ebx
c001b53b:	e8 f4 7f ff ff       	call   c0013534 <Directory::create()>
c001b540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b543:	89 c6                	mov    esi,eax
c001b545:	e8 66 7e ff ff       	call   c00133b0 <Directory::close()>
c001b54a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b54c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b54f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b552:	83 c4 10             	add    esp,0x10
c001b555:	31 c0                	xor    eax,eax
c001b557:	59                   	pop    ecx
c001b558:	85 f6                	test   esi,esi
c001b55a:	5b                   	pop    ebx
c001b55b:	0f 95 c0             	setne  al
c001b55e:	5e                   	pop    esi
c001b55f:	31 d2                	xor    edx,edx
c001b561:	f7 d8                	neg    eax
c001b563:	83 d2 00             	adc    edx,0x0
c001b566:	f7 da                	neg    edx
c001b568:	c3                   	ret    
c001b569:	59                   	pop    ecx
c001b56a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b56f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b574:	5b                   	pop    ebx
c001b575:	5e                   	pop    esi
c001b576:	c3                   	ret    

c001b577 <sysCallWait(regs*)>:
c001b577:	83 ec 10             	sub    esp,0x10
c001b57a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b57e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b581:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b584:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b587:	e8 e5 23 00 00       	call   c001d971 <waitTask(int, int*, int)>
c001b58c:	83 c4 1c             	add    esp,0x1c
c001b58f:	99                   	cdq    
c001b590:	c3                   	ret    

c001b591 <sysCallNotImpl(regs*)>:
c001b591:	83 ec 18             	sub    esp,0x18
c001b594:	68 be b5 02 c0       	push   0xc002b5be
c001b599:	e8 c1 e8 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001b59e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5a8:	83 c4 1c             	add    esp,0x1c
c001b5ab:	c3                   	ret    

c001b5ac <sysPanic(regs*)>:
c001b5ac:	83 ec 18             	sub    esp,0x18
c001b5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5b3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5b6:	e8 a4 e8 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001b5bb:	c7 04 24 d8 b5 02 c0 	mov    DWORD PTR [esp],0xc002b5d8
c001b5c2:	e8 98 e8 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001b5c7:	b8 01 00 00 00       	mov    eax,0x1
c001b5cc:	31 d2                	xor    edx,edx
c001b5ce:	83 c4 1c             	add    esp,0x1c
c001b5d1:	c3                   	ret    

c001b5d2 <sysCallRmdir(regs*)>:
c001b5d2:	56                   	push   esi
c001b5d3:	53                   	push   ebx
c001b5d4:	83 ec 20             	sub    esp,0x20
c001b5d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5db:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5de:	68 14 01 00 00       	push   0x114
c001b5e3:	e8 34 40 ff ff       	call   c000f61c <malloc>
c001b5e8:	83 c4 0c             	add    esp,0xc
c001b5eb:	89 c3                	mov    ebx,eax
c001b5ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5f5:	56                   	push   esi
c001b5f6:	53                   	push   ebx
c001b5f7:	e8 48 78 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001b5fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5ff:	e8 1c 7a ff ff       	call   c0013020 <File::unlink()>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	85 db                	test   ebx,ebx
c001b609:	74 14                	je     c001b61f <sysCallRmdir(regs*)+0x4d>
c001b60b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b60f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b611:	83 ec 0c             	sub    esp,0xc
c001b614:	53                   	push   ebx
c001b615:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b61f:	85 c0                	test   eax,eax
c001b621:	0f 95 c0             	setne  al
c001b624:	31 d2                	xor    edx,edx
c001b626:	0f b6 c0             	movzx  eax,al
c001b629:	f7 d8                	neg    eax
c001b62b:	83 d2 00             	adc    edx,0x0
c001b62e:	83 c4 14             	add    esp,0x14
c001b631:	f7 da                	neg    edx
c001b633:	5b                   	pop    ebx
c001b634:	5e                   	pop    esi
c001b635:	c3                   	ret    

c001b636 <sysCallUnlink(regs*)>:
c001b636:	56                   	push   esi
c001b637:	53                   	push   ebx
c001b638:	83 ec 20             	sub    esp,0x20
c001b63b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b63f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b642:	68 14 01 00 00       	push   0x114
c001b647:	e8 d0 3f ff ff       	call   c000f61c <malloc>
c001b64c:	83 c4 0c             	add    esp,0xc
c001b64f:	89 c3                	mov    ebx,eax
c001b651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b656:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b659:	56                   	push   esi
c001b65a:	53                   	push   ebx
c001b65b:	e8 e4 77 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001b660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b663:	e8 b8 79 ff ff       	call   c0013020 <File::unlink()>
c001b668:	83 c4 10             	add    esp,0x10
c001b66b:	85 db                	test   ebx,ebx
c001b66d:	74 14                	je     c001b683 <sysCallUnlink(regs*)+0x4d>
c001b66f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b673:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b675:	83 ec 0c             	sub    esp,0xc
c001b678:	53                   	push   ebx
c001b679:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b67c:	83 c4 10             	add    esp,0x10
c001b67f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b683:	85 c0                	test   eax,eax
c001b685:	0f 95 c0             	setne  al
c001b688:	31 d2                	xor    edx,edx
c001b68a:	0f b6 c0             	movzx  eax,al
c001b68d:	f7 d8                	neg    eax
c001b68f:	83 d2 00             	adc    edx,0x0
c001b692:	83 c4 14             	add    esp,0x14
c001b695:	f7 da                	neg    edx
c001b697:	5b                   	pop    ebx
c001b698:	5e                   	pop    esi
c001b699:	c3                   	ret    

c001b69a <sysCallGetArgv(regs*)>:
c001b69a:	83 ec 0c             	sub    esp,0xc
c001b69d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6a4:	85 c0                	test   eax,eax
c001b6a6:	78 2b                	js     c001b6d3 <sysCallGetArgv(regs*)+0x39>
c001b6a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6ae:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6b1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b6b7:	7d 1a                	jge    c001b6d3 <sysCallGetArgv(regs*)+0x39>
c001b6b9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b6c0:	85 c0                	test   eax,eax
c001b6c2:	74 17                	je     c001b6db <sysCallGetArgv(regs*)+0x41>
c001b6c4:	83 ec 08             	sub    esp,0x8
c001b6c7:	50                   	push   eax
c001b6c8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b6cb:	e8 8b 50 fe ff       	call   c000075b <strcpy>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	31 c0                	xor    eax,eax
c001b6d5:	31 d2                	xor    edx,edx
c001b6d7:	83 c4 0c             	add    esp,0xc
c001b6da:	c3                   	ret    
c001b6db:	b8 01 00 00 00       	mov    eax,0x1
c001b6e0:	31 d2                	xor    edx,edx
c001b6e2:	83 c4 0c             	add    esp,0xc
c001b6e5:	c3                   	ret    

c001b6e6 <sysCallTTYName(regs*)>:
c001b6e6:	56                   	push   esi
c001b6e7:	53                   	push   ebx
c001b6e8:	53                   	push   ebx
c001b6e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b6f0:	85 c0                	test   eax,eax
c001b6f2:	74 5f                	je     c001b753 <sysCallTTYName(regs*)+0x6d>
c001b6f4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6f7:	83 f8 02             	cmp    eax,0x2
c001b6fa:	77 3e                	ja     c001b73a <sysCallTTYName(regs*)+0x54>
c001b6fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b701:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b704:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b70a:	85 db                	test   ebx,ebx
c001b70c:	74 45                	je     c001b753 <sysCallTTYName(regs*)+0x6d>
c001b70e:	83 ec 0c             	sub    esp,0xc
c001b711:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b713:	53                   	push   ebx
c001b714:	ff 10                	call   DWORD PTR [eax]
c001b716:	83 c4 10             	add    esp,0x10
c001b719:	84 c0                	test   al,al
c001b71b:	74 41                	je     c001b75e <sysCallTTYName(regs*)+0x78>
c001b71d:	83 ec 08             	sub    esp,0x8
c001b720:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b726:	53                   	push   ebx
c001b727:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b72a:	e8 2c 50 fe ff       	call   c000075b <strcpy>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	31 c0                	xor    eax,eax
c001b734:	59                   	pop    ecx
c001b735:	31 d2                	xor    edx,edx
c001b737:	5b                   	pop    ebx
c001b738:	5e                   	pop    esi
c001b739:	c3                   	ret    
c001b73a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b73f:	74 bb                	je     c001b6fc <sysCallTTYName(regs*)+0x16>
c001b741:	83 ec 0c             	sub    esp,0xc
c001b744:	50                   	push   eax
c001b745:	e8 5b 60 ff ff       	call   c00117a5 <getFromFileDescriptor(int)>
c001b74a:	83 c4 10             	add    esp,0x10
c001b74d:	89 c3                	mov    ebx,eax
c001b74f:	85 db                	test   ebx,ebx
c001b751:	75 bb                	jne    c001b70e <sysCallTTYName(regs*)+0x28>
c001b753:	59                   	pop    ecx
c001b754:	b8 01 00 00 00       	mov    eax,0x1
c001b759:	31 d2                	xor    edx,edx
c001b75b:	5b                   	pop    ebx
c001b75c:	5e                   	pop    esi
c001b75d:	c3                   	ret    
c001b75e:	59                   	pop    ecx
c001b75f:	b8 02 00 00 00       	mov    eax,0x2
c001b764:	31 d2                	xor    edx,edx
c001b766:	5b                   	pop    ebx
c001b767:	5e                   	pop    esi
c001b768:	c3                   	ret    

c001b769 <sysCallUSleep(regs*)>:
c001b769:	83 ec 14             	sub    esp,0x14
c001b76c:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b775:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b77c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b77f:	01 ca                	add    edx,ecx
c001b781:	52                   	push   edx
c001b782:	50                   	push   eax
c001b783:	e8 82 22 00 00       	call   c001da0a <nanoSleep(unsigned long long)>
c001b788:	31 c0                	xor    eax,eax
c001b78a:	31 d2                	xor    edx,edx
c001b78c:	83 c4 1c             	add    esp,0x1c
c001b78f:	c3                   	ret    

c001b790 <sysCallSpawn(regs*)>:
c001b790:	56                   	push   esi
c001b791:	53                   	push   ebx
c001b792:	53                   	push   ebx
c001b793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b797:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b79a:	85 f6                	test   esi,esi
c001b79c:	75 08                	jne    c001b7a6 <sysCallSpawn(regs*)+0x16>
c001b79e:	59                   	pop    ecx
c001b79f:	31 c0                	xor    eax,eax
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	5b                   	pop    ebx
c001b7a4:	5e                   	pop    esi
c001b7a5:	c3                   	ret    
c001b7a6:	83 ec 0c             	sub    esp,0xc
c001b7a9:	68 3f 07 00 00       	push   0x73f
c001b7ae:	e8 69 3e ff ff       	call   c000f61c <malloc>
c001b7b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b7b6:	89 c6                	mov    esi,eax
c001b7b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7bd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7c3:	56                   	push   esi
c001b7c4:	e8 41 19 00 00       	call   c001d10a <Process::Process(char const*, Process*, char**)>
c001b7c9:	83 c4 20             	add    esp,0x20
c001b7cc:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b7d3:	75 c9                	jne    c001b79e <sysCallSpawn(regs*)+0xe>
c001b7d5:	83 ec 0c             	sub    esp,0xc
c001b7d8:	56                   	push   esi
c001b7d9:	e8 f2 1e 00 00       	call   c001d6d0 <Process::createUserThread()>
c001b7de:	8b 06                	mov    eax,DWORD PTR [esi]
c001b7e0:	83 c4 10             	add    esp,0x10
c001b7e3:	99                   	cdq    
c001b7e4:	59                   	pop    ecx
c001b7e5:	5b                   	pop    ebx
c001b7e6:	5e                   	pop    esi
c001b7e7:	c3                   	ret    

c001b7e8 <sysCallGetEnv(regs*)>:
c001b7e8:	57                   	push   edi
c001b7e9:	56                   	push   esi
c001b7ea:	53                   	push   ebx
c001b7eb:	83 ec 1c             	sub    esp,0x1c
c001b7ee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7f7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b7fa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b800:	e8 76 e5 ff ff       	call   c0019d7b <Krnl::getProcessTotalEnvCount(Process*)>
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	39 c7                	cmp    edi,eax
c001b80a:	7c 14                	jl     c001b820 <sysCallGetEnv(regs*)+0x38>
c001b80c:	85 f6                	test   esi,esi
c001b80e:	75 0b                	jne    c001b81b <sysCallGetEnv(regs*)+0x33>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	31 c0                	xor    eax,eax
c001b815:	5b                   	pop    ebx
c001b816:	31 d2                	xor    edx,edx
c001b818:	5e                   	pop    esi
c001b819:	5f                   	pop    edi
c001b81a:	c3                   	ret    
c001b81b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b81e:	eb f0                	jmp    c001b810 <sysCallGetEnv(regs*)+0x28>
c001b820:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b824:	52                   	push   edx
c001b825:	57                   	push   edi
c001b826:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b82c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b82f:	50                   	push   eax
c001b830:	e8 66 e5 ff ff       	call   c0019d9b <Krnl::getProcessEnvPair(Process*, int)>
c001b835:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b838:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b83c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b840:	83 c4 0c             	add    esp,0xc
c001b843:	85 c9                	test   ecx,ecx
c001b845:	75 23                	jne    c001b86a <sysCallGetEnv(regs*)+0x82>
c001b847:	83 ec 0c             	sub    esp,0xc
c001b84a:	50                   	push   eax
c001b84b:	e8 89 4e fe ff       	call   c00006d9 <strlen>
c001b850:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b853:	89 c3                	mov    ebx,eax
c001b855:	e8 7f 4e fe ff       	call   c00006d9 <strlen>
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b861:	83 c4 10             	add    esp,0x10
c001b864:	31 d2                	xor    edx,edx
c001b866:	5b                   	pop    ebx
c001b867:	5e                   	pop    esi
c001b868:	5f                   	pop    edi
c001b869:	c3                   	ret    
c001b86a:	83 ec 08             	sub    esp,0x8
c001b86d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b870:	50                   	push   eax
c001b871:	56                   	push   esi
c001b872:	e8 e4 4e fe ff       	call   c000075b <strcpy>
c001b877:	58                   	pop    eax
c001b878:	5a                   	pop    edx
c001b879:	68 e7 b5 02 c0       	push   0xc002b5e7
c001b87e:	56                   	push   esi
c001b87f:	e8 8e 4f fe ff       	call   c0000812 <strcat>
c001b884:	59                   	pop    ecx
c001b885:	5b                   	pop    ebx
c001b886:	57                   	push   edi
c001b887:	56                   	push   esi
c001b888:	e8 85 4f fe ff       	call   c0000812 <strcat>
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	e9 7b ff ff ff       	jmp    c001b810 <sysCallGetEnv(regs*)+0x28>

c001b895 <sysAppSettings(regs*)>:
c001b895:	53                   	push   ebx
c001b896:	83 ec 08             	sub    esp,0x8
c001b899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8a0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b8a6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b8ab:	66 3d c0 09          	cmp    ax,0x9c0
c001b8af:	75 2f                	jne    c001b8e0 <sysAppSettings(regs*)+0x4b>
c001b8b1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b8b7:	83 e0 1f             	and    eax,0x1f
c001b8ba:	3c 01                	cmp    al,0x1
c001b8bc:	74 2e                	je     c001b8ec <sysAppSettings(regs*)+0x57>
c001b8be:	3c 07                	cmp    al,0x7
c001b8c0:	0f 84 bd 00 00 00    	je     c001b983 <sysAppSettings(regs*)+0xee>
c001b8c6:	84 c0                	test   al,al
c001b8c8:	0f 84 dc 00 00 00    	je     c001b9aa <sysAppSettings(regs*)+0x115>
c001b8ce:	3c 08                	cmp    al,0x8
c001b8d0:	74 6d                	je     c001b93f <sysAppSettings(regs*)+0xaa>
c001b8d2:	0f b6 c0             	movzx  eax,al
c001b8d5:	83 c4 08             	add    esp,0x8
c001b8d8:	05 e8 03 00 00       	add    eax,0x3e8
c001b8dd:	5b                   	pop    ebx
c001b8de:	99                   	cdq    
c001b8df:	c3                   	ret    
c001b8e0:	b8 01 00 00 00       	mov    eax,0x1
c001b8e5:	31 d2                	xor    edx,edx
c001b8e7:	83 c4 08             	add    esp,0x8
c001b8ea:	5b                   	pop    ebx
c001b8eb:	c3                   	ret    
c001b8ec:	51                   	push   ecx
c001b8ed:	68 00 01 00 00       	push   0x100
c001b8f2:	6a 00                	push   0x0
c001b8f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8fc:	83 c0 0c             	add    eax,0xc
c001b8ff:	50                   	push   eax
c001b900:	e8 b7 4d fe ff       	call   c00006bc <memset>
c001b905:	83 c4 0c             	add    esp,0xc
c001b908:	68 ff 00 00 00       	push   0xff
c001b90d:	53                   	push   ebx
c001b90e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b913:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b916:	83 c0 0c             	add    eax,0xc
c001b919:	50                   	push   eax
c001b91a:	e8 81 4d fe ff       	call   c00006a0 <memcpy>
c001b91f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b924:	5b                   	pop    ebx
c001b925:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b928:	5a                   	pop    edx
c001b929:	8d 50 0c             	lea    edx,[eax+0xc]
c001b92c:	52                   	push   edx
c001b92d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b933:	e8 e8 4f ff ff       	call   c0010920 <VgaText::setTitle(char*)>
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	31 c0                	xor    eax,eax
c001b93d:	eb a6                	jmp    c001b8e5 <sysAppSettings(regs*)+0x50>
c001b93f:	83 ec 08             	sub    esp,0x8
c001b942:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b948:	83 e0 0f             	and    eax,0xf
c001b94b:	50                   	push   eax
c001b94c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b951:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b954:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b95a:	e8 b1 4f ff ff       	call   c0010910 <VgaText::setTitleColour(VgaColour)>
c001b95f:	58                   	pop    eax
c001b960:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b966:	5a                   	pop    edx
c001b967:	c1 e8 04             	shr    eax,0x4
c001b96a:	83 e0 0f             	and    eax,0xf
c001b96d:	50                   	push   eax
c001b96e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b973:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b976:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b97c:	e8 7f 4f ff ff       	call   c0010900 <VgaText::setTitleTextColour(VgaColour)>
c001b981:	eb b5                	jmp    c001b938 <sysAppSettings(regs*)+0xa3>
c001b983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b988:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b991:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b997:	c0 e8 06             	shr    al,0x6
c001b99a:	83 e0 01             	and    eax,0x1
c001b99d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b9a3:	31 c0                	xor    eax,eax
c001b9a5:	e9 3b ff ff ff       	jmp    c001b8e5 <sysAppSettings(regs*)+0x50>
c001b9aa:	b8 02 00 00 00       	mov    eax,0x2
c001b9af:	e9 31 ff ff ff       	jmp    c001b8e5 <sysAppSettings(regs*)+0x50>

c001b9b4 <sysSetFatAttrib(regs*)>:
c001b9b4:	57                   	push   edi
c001b9b5:	56                   	push   esi
c001b9b6:	53                   	push   ebx
c001b9b7:	83 ec 1c             	sub    esp,0x1c
c001b9ba:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9be:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9c1:	68 14 01 00 00       	push   0x114
c001b9c6:	e8 51 3c ff ff       	call   c000f61c <malloc>
c001b9cb:	83 c4 0c             	add    esp,0xc
c001b9ce:	89 c3                	mov    ebx,eax
c001b9d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d8:	57                   	push   edi
c001b9d9:	53                   	push   ebx
c001b9da:	e8 65 74 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001b9df:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9e2:	83 c4 0c             	add    esp,0xc
c001b9e5:	0f b6 d4             	movzx  edx,ah
c001b9e8:	0f b6 c0             	movzx  eax,al
c001b9eb:	52                   	push   edx
c001b9ec:	50                   	push   eax
c001b9ed:	53                   	push   ebx
c001b9ee:	e8 c7 76 ff ff       	call   c00130ba <File::chfatattr(unsigned char, unsigned char)>
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	85 db                	test   ebx,ebx
c001b9f8:	74 14                	je     c001ba0e <sysSetFatAttrib(regs*)+0x5a>
c001b9fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	53                   	push   ebx
c001ba04:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba0e:	85 c0                	test   eax,eax
c001ba10:	0f 95 c0             	setne  al
c001ba13:	31 d2                	xor    edx,edx
c001ba15:	0f b6 c0             	movzx  eax,al
c001ba18:	f7 d8                	neg    eax
c001ba1a:	83 d2 00             	adc    edx,0x0
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	f7 da                	neg    edx
c001ba22:	5b                   	pop    ebx
c001ba23:	5e                   	pop    esi
c001ba24:	5f                   	pop    edi
c001ba25:	c3                   	ret    

c001ba26 <sysPipe(regs*)>:
c001ba26:	57                   	push   edi
c001ba27:	56                   	push   esi
c001ba28:	53                   	push   ebx
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	83 ec 0c             	sub    esp,0xc
c001ba30:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba33:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba36:	6a 20                	push   0x20
c001ba38:	e8 df 3b ff ff       	call   c000f61c <malloc>
c001ba3d:	89 c3                	mov    ebx,eax
c001ba3f:	58                   	pop    eax
c001ba40:	5a                   	pop    edx
c001ba41:	68 00 50 00 00       	push   0x5000
c001ba46:	53                   	push   ebx
c001ba47:	e8 04 48 ff ff       	call   c0010250 <Pipe::Pipe(int)>
c001ba4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba4f:	e8 5c 5a ff ff       	call   c00114b0 <UnixFile::getFileDescriptor()>
c001ba54:	89 07                	mov    DWORD PTR [edi],eax
c001ba56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba59:	e8 52 5a ff ff       	call   c00114b0 <UnixFile::getFileDescriptor()>
c001ba5e:	83 c4 10             	add    esp,0x10
c001ba61:	89 06                	mov    DWORD PTR [esi],eax
c001ba63:	31 d2                	xor    edx,edx
c001ba65:	5b                   	pop    ebx
c001ba66:	31 c0                	xor    eax,eax
c001ba68:	5e                   	pop    esi
c001ba69:	5f                   	pop    edi
c001ba6a:	c3                   	ret    

c001ba6b <sysGetUnixTime(regs*)>:
c001ba6b:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001ba70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba7a:	e9 af 7d ff ff       	jmp    c001382e <Clock::timeInSecondsLocal()>

c001ba7f <string_ends_with(char const*, char const*)>:
c001ba7f:	57                   	push   edi
c001ba80:	56                   	push   esi
c001ba81:	53                   	push   ebx
c001ba82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba8a:	83 ec 0c             	sub    esp,0xc
c001ba8d:	53                   	push   ebx
c001ba8e:	e8 46 4c fe ff       	call   c00006d9 <strlen>
c001ba93:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba96:	89 c6                	mov    esi,eax
c001ba98:	e8 3c 4c fe ff       	call   c00006d9 <strlen>
c001ba9d:	83 c4 10             	add    esp,0x10
c001baa0:	39 c6                	cmp    esi,eax
c001baa2:	7d 06                	jge    c001baaa <string_ends_with(char const*, char const*)+0x2b>
c001baa4:	5b                   	pop    ebx
c001baa5:	31 c0                	xor    eax,eax
c001baa7:	5e                   	pop    esi
c001baa8:	5f                   	pop    edi
c001baa9:	c3                   	ret    
c001baaa:	83 ec 08             	sub    esp,0x8
c001baad:	29 c6                	sub    esi,eax
c001baaf:	57                   	push   edi
c001bab0:	01 f3                	add    ebx,esi
c001bab2:	53                   	push   ebx
c001bab3:	e8 f4 4c fe ff       	call   c00007ac <strcmp>
c001bab8:	83 c4 10             	add    esp,0x10
c001babb:	85 c0                	test   eax,eax
c001babd:	5b                   	pop    ebx
c001babe:	0f 94 c0             	sete   al
c001bac1:	5e                   	pop    esi
c001bac2:	0f b6 c0             	movzx  eax,al
c001bac5:	5f                   	pop    edi
c001bac6:	c3                   	ret    

c001bac7 <sysCallOpen(regs*)>:
c001bac7:	56                   	push   esi
c001bac8:	53                   	push   ebx
c001bac9:	81 ec 04 01 00 00    	sub    esp,0x104
c001bacf:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bad6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bad9:	85 c9                	test   ecx,ecx
c001badb:	0f 84 b3 00 00 00    	je     c001bb94 <sysCallOpen(regs*)+0xcd>
c001bae1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bae4:	85 c0                	test   eax,eax
c001bae6:	0f 84 a8 00 00 00    	je     c001bb94 <sysCallOpen(regs*)+0xcd>
c001baec:	52                   	push   edx
c001baed:	68 e9 b5 02 c0       	push   0xc002b5e9
c001baf2:	50                   	push   eax
c001baf3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001baf7:	56                   	push   esi
c001baf8:	e8 9d 71 ff ff       	call   c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001bafd:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb00:	e8 d4 4b fe ff       	call   c00006d9 <strlen>
c001bb05:	83 c4 10             	add    esp,0x10
c001bb08:	48                   	dec    eax
c001bb09:	74 1d                	je     c001bb28 <sysCallOpen(regs*)+0x61>
c001bb0b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb0e:	eb 0f                	jmp    c001bb1f <sysCallOpen(regs*)+0x58>
c001bb10:	80 fa 3a             	cmp    dl,0x3a
c001bb13:	74 0f                	je     c001bb24 <sysCallOpen(regs*)+0x5d>
c001bb15:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb19:	48                   	dec    eax
c001bb1a:	74 0c                	je     c001bb28 <sysCallOpen(regs*)+0x61>
c001bb1c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb1f:	80 fa 2e             	cmp    dl,0x2e
c001bb22:	75 ec                	jne    c001bb10 <sysCallOpen(regs*)+0x49>
c001bb24:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb28:	83 ec 08             	sub    esp,0x8
c001bb2b:	68 ed b5 02 c0       	push   0xc002b5ed
c001bb30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb33:	e8 47 ff ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bb38:	83 c4 10             	add    esp,0x10
c001bb3b:	85 c0                	test   eax,eax
c001bb3d:	75 17                	jne    c001bb56 <sysCallOpen(regs*)+0x8f>
c001bb3f:	83 ec 08             	sub    esp,0x8
c001bb42:	68 0e b6 02 c0       	push   0xc002b60e
c001bb47:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb4a:	e8 30 ff ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bb4f:	83 c4 10             	add    esp,0x10
c001bb52:	85 c0                	test   eax,eax
c001bb54:	74 51                	je     c001bba7 <sysCallOpen(regs*)+0xe0>
c001bb56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb59:	83 ec 08             	sub    esp,0x8
c001bb5c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb6c:	ff 30                	push   DWORD PTR [eax]
c001bb6e:	68 f2 b5 02 c0       	push   0xc002b5f2
c001bb73:	e8 73 6d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bb78:	c7 04 24 01 b6 02 c0 	mov    DWORD PTR [esp],0xc002b601
c001bb7f:	e8 67 6d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	81 c4 04 01 00 00    	add    esp,0x104
c001bb8d:	31 c0                	xor    eax,eax
c001bb8f:	31 d2                	xor    edx,edx
c001bb91:	5b                   	pop    ebx
c001bb92:	5e                   	pop    esi
c001bb93:	c3                   	ret    
c001bb94:	81 c4 04 01 00 00    	add    esp,0x104
c001bb9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bba4:	5b                   	pop    ebx
c001bba5:	5e                   	pop    esi
c001bba6:	c3                   	ret    
c001bba7:	83 ec 08             	sub    esp,0x8
c001bbaa:	68 ee b5 02 c0       	push   0xc002b5ee
c001bbaf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbb2:	e8 f5 4b fe ff       	call   c00007ac <strcmp>
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	85 c0                	test   eax,eax
c001bbbc:	74 98                	je     c001bb56 <sysCallOpen(regs*)+0x8f>
c001bbbe:	83 ec 08             	sub    esp,0x8
c001bbc1:	68 ed b5 02 c0       	push   0xc002b5ed
c001bbc6:	56                   	push   esi
c001bbc7:	e8 b3 fe ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bbcc:	83 c4 10             	add    esp,0x10
c001bbcf:	85 c0                	test   eax,eax
c001bbd1:	75 83                	jne    c001bb56 <sysCallOpen(regs*)+0x8f>
c001bbd3:	83 ec 08             	sub    esp,0x8
c001bbd6:	68 13 b6 02 c0       	push   0xc002b613
c001bbdb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbde:	e8 9c fe ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bbe3:	83 c4 10             	add    esp,0x10
c001bbe6:	85 c0                	test   eax,eax
c001bbe8:	0f 85 d9 00 00 00    	jne    c001bcc7 <sysCallOpen(regs*)+0x200>
c001bbee:	83 ec 08             	sub    esp,0x8
c001bbf1:	68 18 b6 02 c0       	push   0xc002b618
c001bbf6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf9:	e8 81 fe ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bbfe:	83 c4 10             	add    esp,0x10
c001bc01:	85 c0                	test   eax,eax
c001bc03:	0f 85 be 00 00 00    	jne    c001bcc7 <sysCallOpen(regs*)+0x200>
c001bc09:	83 ec 08             	sub    esp,0x8
c001bc0c:	68 14 b6 02 c0       	push   0xc002b614
c001bc11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc14:	e8 93 4b fe ff       	call   c00007ac <strcmp>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	85 c0                	test   eax,eax
c001bc1e:	0f 84 a3 00 00 00    	je     c001bcc7 <sysCallOpen(regs*)+0x200>
c001bc24:	83 ec 08             	sub    esp,0x8
c001bc27:	68 13 b6 02 c0       	push   0xc002b613
c001bc2c:	56                   	push   esi
c001bc2d:	e8 4d fe ff ff       	call   c001ba7f <string_ends_with(char const*, char const*)>
c001bc32:	83 c4 10             	add    esp,0x10
c001bc35:	85 c0                	test   eax,eax
c001bc37:	0f 85 8a 00 00 00    	jne    c001bcc7 <sysCallOpen(regs*)+0x200>
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	68 14 01 00 00       	push   0x114
c001bc45:	e8 d2 39 ff ff       	call   c000f61c <malloc>
c001bc4a:	83 c4 0c             	add    esp,0xc
c001bc4d:	89 c6                	mov    esi,eax
c001bc4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc54:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc57:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc5a:	56                   	push   esi
c001bc5b:	e8 e4 71 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001bc60:	83 c4 10             	add    esp,0x10
c001bc63:	85 f6                	test   esi,esi
c001bc65:	0f 84 29 ff ff ff    	je     c001bb94 <sysCallOpen(regs*)+0xcd>
c001bc6b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc6e:	0f b6 c2             	movzx  eax,dl
c001bc71:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bc74:	89 d0                	mov    eax,edx
c001bc76:	83 e0 01             	and    eax,0x1
c001bc79:	f6 c2 02             	test   dl,0x2
c001bc7c:	74 03                	je     c001bc81 <sysCallOpen(regs*)+0x1ba>
c001bc7e:	83 c8 02             	or     eax,0x2
c001bc81:	f6 c2 04             	test   dl,0x4
c001bc84:	74 03                	je     c001bc89 <sysCallOpen(regs*)+0x1c2>
c001bc86:	83 c8 04             	or     eax,0x4
c001bc89:	f6 c2 08             	test   dl,0x8
c001bc8c:	74 03                	je     c001bc91 <sysCallOpen(regs*)+0x1ca>
c001bc8e:	83 c8 0a             	or     eax,0xa
c001bc91:	83 e2 10             	and    edx,0x10
c001bc94:	74 03                	je     c001bc99 <sysCallOpen(regs*)+0x1d2>
c001bc96:	83 c8 12             	or     eax,0x12
c001bc99:	83 ec 08             	sub    esp,0x8
c001bc9c:	50                   	push   eax
c001bc9d:	56                   	push   esi
c001bc9e:	e8 05 72 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	85 c0                	test   eax,eax
c001bca8:	0f 85 e6 fe ff ff    	jne    c001bb94 <sysCallOpen(regs*)+0xcd>
c001bcae:	83 ec 0c             	sub    esp,0xc
c001bcb1:	56                   	push   esi
c001bcb2:	e8 f9 57 ff ff       	call   c00114b0 <UnixFile::getFileDescriptor()>
c001bcb7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcba:	89 02                	mov    DWORD PTR [edx],eax
c001bcbc:	c1 f8 1f             	sar    eax,0x1f
c001bcbf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcc2:	e9 bd fe ff ff       	jmp    c001bb84 <sysCallOpen(regs*)+0xbd>
c001bcc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcca:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bcd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcd7:	e9 ab fe ff ff       	jmp    c001bb87 <sysCallOpen(regs*)+0xc0>

c001bcdc <Sys::loadSyscalls()>:
c001bcdc:	c7 05 c0 05 03 c0 92 ae 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001ae92
c001bce6:	c7 05 c4 05 03 c0 f4 aa 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001aaf4
c001bcf0:	c7 05 c8 05 03 c0 47 ac 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001ac47
c001bcfa:	c7 05 cc 05 03 c0 2a ae 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001ae2a
c001bd04:	c7 05 d0 05 03 c0 df ab 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001abdf
c001bd0e:	c7 05 d4 05 03 c0 2b ab 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001ab2b
c001bd18:	c7 05 d8 05 03 c0 0c ab 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001ab0c
c001bd22:	c7 05 dc 05 03 c0 9c ac 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001ac9c
c001bd2c:	c7 05 e4 05 03 c0 a4 b3 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001b3a4
c001bd36:	c7 05 e0 05 03 c0 c7 ba 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001bac7
c001bd40:	c7 05 e8 05 03 c0 2c b4 01 c0 	mov    DWORD PTR ds:0xc00305e8,0xc001b42c
c001bd4a:	c7 05 ec 05 03 c0 93 b0 01 c0 	mov    DWORD PTR ds:0xc00305ec,0xc001b093
c001bd54:	c7 05 f0 05 03 c0 cd ae 01 c0 	mov    DWORD PTR ds:0xc00305f0,0xc001aecd
c001bd5e:	c7 05 f4 05 03 c0 d2 ae 01 c0 	mov    DWORD PTR ds:0xc00305f4,0xc001aed2
c001bd68:	c7 05 f8 05 03 c0 07 b5 01 c0 	mov    DWORD PTR ds:0xc00305f8,0xc001b507
c001bd72:	c7 05 fc 05 03 c0 a1 b4 01 c0 	mov    DWORD PTR ds:0xc00305fc,0xc001b4a1
c001bd7c:	c7 05 00 06 03 c0 7b b1 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001b17b
c001bd86:	c7 05 04 06 03 c0 e4 b1 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001b1e4
c001bd90:	c7 05 08 06 03 c0 61 b2 01 c0 	mov    DWORD PTR ds:0xc0030608,0xc001b261
c001bd9a:	c7 05 0c 06 03 c0 d7 ae 01 c0 	mov    DWORD PTR ds:0xc003060c,0xc001aed7
c001bda4:	c7 05 10 06 03 c0 77 b5 01 c0 	mov    DWORD PTR ds:0xc0030610,0xc001b577
c001bdae:	c7 05 14 06 03 c0 91 b5 01 c0 	mov    DWORD PTR ds:0xc0030614,0xc001b591
c001bdb8:	c7 05 18 06 03 c0 91 b5 01 c0 	mov    DWORD PTR ds:0xc0030618,0xc001b591
c001bdc2:	c7 05 1c 06 03 c0 d2 b5 01 c0 	mov    DWORD PTR ds:0xc003061c,0xc001b5d2
c001bdcc:	c7 05 20 06 03 c0 36 b6 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001b636
c001bdd6:	c7 05 24 06 03 c0 e1 ae 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001aee1
c001bde0:	c7 05 28 06 03 c0 9a b6 01 c0 	mov    DWORD PTR ds:0xc0030628,0xc001b69a
c001bdea:	c7 05 2c 06 03 c0 50 b0 01 c0 	mov    DWORD PTR ds:0xc003062c,0xc001b050
c001bdf4:	c7 05 30 06 03 c0 e6 b6 01 c0 	mov    DWORD PTR ds:0xc0030630,0xc001b6e6
c001bdfe:	c7 05 34 06 03 c0 21 b1 01 c0 	mov    DWORD PTR ds:0xc0030634,0xc001b121
c001be08:	c7 05 38 06 03 c0 69 b7 01 c0 	mov    DWORD PTR ds:0xc0030638,0xc001b769
c001be12:	c7 05 3c 06 03 c0 e4 b2 01 c0 	mov    DWORD PTR ds:0xc003063c,0xc001b2e4
c001be1c:	c7 05 40 06 03 c0 90 b7 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001b790
c001be26:	c7 05 44 06 03 c0 e8 b7 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001b7e8
c001be30:	c7 05 48 06 03 c0 95 b8 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001b895
c001be3a:	c7 05 4c 06 03 c0 f1 ae 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001aef1
c001be44:	c7 05 50 06 03 c0 5b af 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001af5b
c001be4e:	c7 05 54 06 03 c0 a1 af 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001afa1
c001be58:	c7 05 58 06 03 c0 b4 b9 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001b9b4
c001be62:	c7 05 5c 06 03 c0 ac b5 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001b5ac
c001be6c:	c7 05 60 06 03 c0 f2 af 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001aff2
c001be76:	c7 05 64 06 03 c0 26 ba 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001ba26
c001be80:	c7 05 68 06 03 c0 6b ba 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001ba6b
c001be8a:	c7 05 6c 06 03 c0 37 ab 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001ab37
c001be94:	c7 05 70 06 03 c0 b8 ac 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001acb8
c001be9e:	c7 05 74 06 03 c0 e0 ad 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001ade0
c001bea8:	c7 05 78 06 03 c0 be aa 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001aabe
c001beb2:	c3                   	ret    

c001beb3 <Sys::systemCall(regs*, void*)>:
c001beb3:	53                   	push   ebx
c001beb4:	83 ec 08             	sub    esp,0x8
c001beb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bebb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bebe:	83 f8 7f             	cmp    eax,0x7f
c001bec1:	77 16                	ja     c001bed9 <Sys::systemCall(regs*, void*)+0x26>
c001bec3:	8b 14 85 c0 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa40]
c001beca:	85 d2                	test   edx,edx
c001becc:	74 0b                	je     c001bed9 <Sys::systemCall(regs*, void*)+0x26>
c001bece:	83 ec 0c             	sub    esp,0xc
c001bed1:	53                   	push   ebx
c001bed2:	ff d2                	call   edx
c001bed4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bed7:	eb 0d                	jmp    c001bee6 <Sys::systemCall(regs*, void*)+0x33>
c001bed9:	52                   	push   edx
c001beda:	52                   	push   edx
c001bedb:	50                   	push   eax
c001bedc:	68 1d b6 02 c0       	push   0xc002b61d
c001bee1:	e8 05 6a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bee6:	83 c4 10             	add    esp,0x10
c001bee9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001beee:	31 d2                	xor    edx,edx
c001bef0:	83 c4 08             	add    esp,0x8
c001bef3:	5b                   	pop    ebx
c001bef4:	c3                   	ret    

c001bef5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bef5:	55                   	push   ebp
c001bef6:	89 e5                	mov    ebp,esp
c001bef8:	57                   	push   edi
c001bef9:	56                   	push   esi
c001befa:	53                   	push   ebx
c001befb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf01:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bf04:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bf07:	85 c0                	test   eax,eax
c001bf09:	0f 95 c1             	setne  cl
c001bf0c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bf10:	0f 94 c2             	sete   dl
c001bf13:	84 d1                	test   cl,dl
c001bf15:	74 26                	je     c001bf3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf17:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bf1e:	74 1d                	je     c001bf3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf20:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bf23:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bf29:	89 d6                	mov    esi,edx
c001bf2b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bf31:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bf37:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bf3a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bf3d:	83 ec 0c             	sub    esp,0xc
c001bf40:	05 ff 0f 00 00       	add    eax,0xfff
c001bf45:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bf48:	6a 01                	push   0x1
c001bf4a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bf50:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bf56:	e8 a0 59 ff ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	89 c6                	mov    esi,eax
c001bf60:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bf66:	0f 86 21 01 00 00    	jbe    c001c08d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bf6c:	c1 eb 0c             	shr    ebx,0xc
c001bf6f:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bf79:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bf7f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bf82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf85:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bf8b:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bf8e:	29 d8                	sub    eax,ebx
c001bf90:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bf96:	0f 83 f4 00 00 00    	jae    c001c090 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bfa5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bfa8:	3d 00 10 00 00       	cmp    eax,0x1000
c001bfad:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bfaf:	52                   	push   edx
c001bfb0:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bfb6:	52                   	push   edx
c001bfb7:	76 05                	jbe    c001bfbe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bfb9:	b8 00 10 00 00       	mov    eax,0x1000
c001bfbe:	31 d2                	xor    edx,edx
c001bfc0:	52                   	push   edx
c001bfc1:	50                   	push   eax
c001bfc2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bfc5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfc8:	83 c4 20             	add    esp,0x20
c001bfcb:	85 c0                	test   eax,eax
c001bfcd:	74 1f                	je     c001bfee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bfcf:	51                   	push   ecx
c001bfd0:	51                   	push   ecx
c001bfd1:	50                   	push   eax
c001bfd2:	68 31 b6 02 c0       	push   0xc002b631
c001bfd7:	e8 0f 69 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001bfdc:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfdf:	e8 7b 5c ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c001bfe4:	83 c4 10             	add    esp,0x10
c001bfe7:	31 c0                	xor    eax,eax
c001bfe9:	e9 7c 01 00 00       	jmp    c001c16a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bfee:	e8 c7 14 00 00       	call   c001d4ba <lockScheduler()>
c001bff3:	e8 c1 3c ff ff       	call   c000fcb9 <Phys::allocatePage()>
c001bff8:	6a 07                	push   0x7
c001bffa:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c000:	56                   	push   esi
c001c001:	50                   	push   eax
c001c002:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c008:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c00b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c011:	e8 b0 5f ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c016:	83 c4 0c             	add    esp,0xc
c001c019:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c01f:	6a 00                	push   0x0
c001c021:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c027:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c02a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c030:	e8 fb 5d ff ff       	call   c0011e30 <VAS::mapOtherVASIn(bool, VAS*)>
c001c035:	58                   	pop    eax
c001c036:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c03c:	5a                   	pop    edx
c001c03d:	68 07 04 00 00       	push   0x407
c001c042:	53                   	push   ebx
c001c043:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c049:	50                   	push   eax
c001c04a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c050:	6a 00                	push   0x0
c001c052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c057:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c05a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c060:	e8 1b 63 ff ff       	call   c0012380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c065:	83 c4 1c             	add    esp,0x1c
c001c068:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c06e:	68 00 10 00 00       	push   0x1000
c001c073:	50                   	push   eax
c001c074:	56                   	push   esi
c001c075:	e8 26 46 fe ff       	call   c00006a0 <memcpy>
c001c07a:	e8 3d 14 00 00       	call   c001d4bc <unlockScheduler()>
c001c07f:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	e9 f5 fe ff ff       	jmp    c001bf82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c08d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c090:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c09a:	0f 86 bc 00 00 00    	jbe    c001c15c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c0a0:	e8 15 14 00 00       	call   c001d4ba <lockScheduler()>
c001c0a5:	51                   	push   ecx
c001c0a6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c0ac:	6a 00                	push   0x0
c001c0ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0bc:	e8 6f 5d ff ff       	call   c0011e30 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0c1:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	c1 e8 0c             	shr    eax,0xc
c001c0cd:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c0d7:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c0dd:	e8 d7 3b ff ff       	call   c000fcb9 <Phys::allocatePage()>
c001c0e2:	6a 07                	push   0x7
c001c0e4:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c0ea:	56                   	push   esi
c001c0eb:	50                   	push   eax
c001c0ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c0f2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c0f5:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c0fb:	e8 c6 5e ff ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c100:	58                   	pop    eax
c001c101:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c107:	5a                   	pop    edx
c001c108:	68 07 04 00 00       	push   0x407
c001c10d:	53                   	push   ebx
c001c10e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c114:	50                   	push   eax
c001c115:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c11b:	6a 00                	push   0x0
c001c11d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c122:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c125:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c12b:	e8 50 62 ff ff       	call   c0012380 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c130:	83 c4 1c             	add    esp,0x1c
c001c133:	68 00 10 00 00       	push   0x1000
c001c138:	6a 00                	push   0x0
c001c13a:	56                   	push   esi
c001c13b:	e8 7c 45 fe ff       	call   c00006bc <memset>
c001c140:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c14f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c155:	77 86                	ja     c001c0dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c157:	e8 60 13 00 00       	call   c001d4bc <unlockScheduler()>
c001c15c:	83 ec 0c             	sub    esp,0xc
c001c15f:	56                   	push   esi
c001c160:	e8 fa 5a ff ff       	call   c0011c5f <Virt::freeKernelVirtualPages(unsigned long)>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	b0 01                	mov    al,0x1
c001c16a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c16d:	5b                   	pop    ebx
c001c16e:	5e                   	pop    esi
c001c16f:	5f                   	pop    edi
c001c170:	5d                   	pop    ebp
c001c171:	c3                   	ret    

c001c172 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c172:	55                   	push   ebp
c001c173:	57                   	push   edi
c001c174:	56                   	push   esi
c001c175:	53                   	push   ebx
c001c176:	83 ec 48             	sub    esp,0x48
c001c179:	68 14 01 00 00       	push   0x114
c001c17e:	e8 99 34 ff ff       	call   c000f61c <malloc>
c001c183:	83 c4 0c             	add    esp,0xc
c001c186:	89 c6                	mov    esi,eax
c001c188:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c18c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c190:	50                   	push   eax
c001c191:	e8 ae 6c ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001c196:	58                   	pop    eax
c001c197:	5a                   	pop    edx
c001c198:	6a 01                	push   0x1
c001c19a:	56                   	push   esi
c001c19b:	e8 08 6d ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001c1a0:	83 c4 10             	add    esp,0x10
c001c1a3:	85 c0                	test   eax,eax
c001c1a5:	0f 85 47 01 00 00    	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1ab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1b3:	83 ec 0c             	sub    esp,0xc
c001c1b6:	6a 34                	push   0x34
c001c1b8:	e8 5f 34 ff ff       	call   c000f61c <malloc>
c001c1bd:	89 c3                	mov    ebx,eax
c001c1bf:	58                   	pop    eax
c001c1c0:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1c2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1c6:	57                   	push   edi
c001c1c7:	53                   	push   ebx
c001c1c8:	6a 00                	push   0x0
c001c1ca:	6a 34                	push   0x34
c001c1cc:	56                   	push   esi
c001c1cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1d0:	83 c4 20             	add    esp,0x20
c001c1d3:	85 c0                	test   eax,eax
c001c1d5:	0f 85 17 01 00 00    	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1db:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1e1:	0f 85 0b 01 00 00    	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1ea:	85 c0                	test   eax,eax
c001c1ec:	0f 84 00 01 00 00    	je     c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1f2:	31 d2                	xor    edx,edx
c001c1f4:	55                   	push   ebp
c001c1f5:	52                   	push   edx
c001c1f6:	50                   	push   eax
c001c1f7:	56                   	push   esi
c001c1f8:	e8 69 6d ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c1fd:	83 c4 10             	add    esp,0x10
c001c200:	85 c0                	test   eax,eax
c001c202:	0f 85 ea 00 00 00    	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c208:	83 ec 0c             	sub    esp,0xc
c001c20b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c20e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c212:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c216:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c21a:	0f af c2             	imul   eax,edx
c001c21d:	50                   	push   eax
c001c21e:	e8 f9 33 ff ff       	call   c000f61c <malloc>
c001c223:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c225:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c229:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c22c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c230:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c234:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c238:	0f af c2             	imul   eax,edx
c001c23b:	99                   	cdq    
c001c23c:	52                   	push   edx
c001c23d:	50                   	push   eax
c001c23e:	56                   	push   esi
c001c23f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c242:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c245:	83 c4 20             	add    esp,0x20
c001c248:	85 c0                	test   eax,eax
c001c24a:	0f 84 a2 00 00 00    	je     c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c250:	31 d2                	xor    edx,edx
c001c252:	51                   	push   ecx
c001c253:	52                   	push   edx
c001c254:	50                   	push   eax
c001c255:	56                   	push   esi
c001c256:	e8 0b 6d ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c25b:	83 c4 10             	add    esp,0x10
c001c25e:	85 c0                	test   eax,eax
c001c260:	0f 85 8c 00 00 00    	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c266:	83 ec 0c             	sub    esp,0xc
c001c269:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c26d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c271:	31 ed                	xor    ebp,ebp
c001c273:	0f af c2             	imul   eax,edx
c001c276:	50                   	push   eax
c001c277:	e8 a0 33 ff ff       	call   c000f61c <malloc>
c001c27c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c27e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c282:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c289:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c28d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c291:	0f af c2             	imul   eax,edx
c001c294:	99                   	cdq    
c001c295:	52                   	push   edx
c001c296:	50                   	push   eax
c001c297:	56                   	push   esi
c001c298:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c29b:	83 c4 20             	add    esp,0x20
c001c29e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2a6:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2aa:	0f 86 80 00 00 00    	jbe    c001c330 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2b0:	0f b7 fd             	movzx  edi,bp
c001c2b3:	c1 e7 05             	shl    edi,0x5
c001c2b6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2ba:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2bd:	75 6b                	jne    c001c32a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2bf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2c6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c2c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2cd:	52                   	push   edx
c001c2ce:	31 d2                	xor    edx,edx
c001c2d0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c2d3:	52                   	push   edx
c001c2d4:	50                   	push   eax
c001c2d5:	56                   	push   esi
c001c2d6:	e8 8b 6c ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c2db:	83 c4 10             	add    esp,0x10
c001c2de:	85 c0                	test   eax,eax
c001c2e0:	74 17                	je     c001c2f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	68 5c b6 02 c0       	push   0xc002b65c
c001c2ea:	e8 fc 65 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c2ef:	83 c4 10             	add    esp,0x10
c001c2f2:	31 c0                	xor    eax,eax
c001c2f4:	e9 87 00 00 00       	jmp    c001c380 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2f9:	83 ec 0c             	sub    esp,0xc
c001c2fc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2ff:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c302:	50                   	push   eax
c001c303:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c30b:	56                   	push   esi
c001c30c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c310:	e8 e0 fb ff ff       	call   c001bef5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c315:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c319:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c31d:	83 c4 20             	add    esp,0x20
c001c320:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c324:	73 04                	jae    c001c32a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c326:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c32a:	45                   	inc    ebp
c001c32b:	e9 76 ff ff ff       	jmp    c001c2a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c330:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c334:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c33c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c342:	83 ec 0c             	sub    esp,0xc
c001c345:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c34b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c350:	05 00 10 00 00       	add    eax,0x1000
c001c355:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35c:	e8 cb 32 ff ff       	call   c000f62c <free>
c001c361:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c364:	e8 c3 32 ff ff       	call   c000f62c <free>
c001c369:	58                   	pop    eax
c001c36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c36e:	e8 b9 32 ff ff       	call   c000f62c <free>
c001c373:	89 34 24             	mov    DWORD PTR [esp],esi
c001c376:	e8 8b 6b ff ff       	call   c0012f06 <File::close()>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	b0 01                	mov    al,0x1
c001c380:	83 c4 3c             	add    esp,0x3c
c001c383:	5b                   	pop    ebx
c001c384:	5e                   	pop    esi
c001c385:	5f                   	pop    edi
c001c386:	5d                   	pop    ebp
c001c387:	c3                   	ret    

c001c388 <Thr::runtimeReferenceHelper()>:
c001c388:	83 ec 18             	sub    esp,0x18
c001c38b:	68 64 b6 02 c0       	push   0xc002b664
c001c390:	e8 56 65 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001c395:	fa                   	cli    
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	eb fe                	jmp    c001c399 <Thr::runtimeReferenceHelper()+0x11>

c001c39b <Thr::getAddressOfKernelSymbol(char const*)>:
c001c39b:	57                   	push   edi
c001c39c:	56                   	push   esi
c001c39d:	53                   	push   ebx
c001c39e:	31 db                	xor    ebx,ebx
c001c3a0:	39 1d 60 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f60,ebx
c001c3a6:	7e 3c                	jle    c001c3e4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3a8:	8b 34 9d e0 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf120]
c001c3af:	31 ff                	xor    edi,edi
c001c3b1:	39 3c 9d e0 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf220],edi
c001c3b8:	7e 27                	jle    c001c3e1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3ba:	50                   	push   eax
c001c3bb:	50                   	push   eax
c001c3bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3c0:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3c2:	03 04 9d 60 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf1a0]
c001c3c9:	50                   	push   eax
c001c3ca:	e8 dd 43 fe ff       	call   c00007ac <strcmp>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	85 c0                	test   eax,eax
c001c3d4:	75 05                	jne    c001c3db <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c3d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3d9:	eb 0b                	jmp    c001c3e6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3db:	83 c6 10             	add    esi,0x10
c001c3de:	47                   	inc    edi
c001c3df:	eb d0                	jmp    c001c3b1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3e1:	43                   	inc    ebx
c001c3e2:	eb bc                	jmp    c001c3a0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3e4:	31 c0                	xor    eax,eax
c001c3e6:	5b                   	pop    ebx
c001c3e7:	5e                   	pop    esi
c001c3e8:	5f                   	pop    edi
c001c3e9:	c3                   	ret    

c001c3ea <Thr::loadKernelSymbolTable(char const*)>:
c001c3ea:	55                   	push   ebp
c001c3eb:	57                   	push   edi
c001c3ec:	56                   	push   esi
c001c3ed:	53                   	push   ebx
c001c3ee:	83 ec 68             	sub    esp,0x68
c001c3f1:	8b 35 b4 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030fb4
c001c3f7:	68 14 01 00 00       	push   0x114
c001c3fc:	e8 1b 32 ff ff       	call   c000f61c <malloc>
c001c401:	83 c4 0c             	add    esp,0xc
c001c404:	89 c3                	mov    ebx,eax
c001c406:	56                   	push   esi
c001c407:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c40b:	50                   	push   eax
c001c40c:	e8 33 6a ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001c411:	5e                   	pop    esi
c001c412:	5f                   	pop    edi
c001c413:	6a 01                	push   0x1
c001c415:	53                   	push   ebx
c001c416:	e8 8d 6a ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	85 c0                	test   eax,eax
c001c420:	74 0a                	je     c001c42c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c422:	83 ec 0c             	sub    esp,0xc
c001c425:	68 86 b6 02 c0       	push   0xc002b686
c001c42a:	eb 34                	jmp    c001c460 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c42c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	6a 34                	push   0x34
c001c439:	e8 de 31 ff ff       	call   c000f61c <malloc>
c001c43e:	59                   	pop    ecx
c001c43f:	89 c7                	mov    edi,eax
c001c441:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c445:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c447:	56                   	push   esi
c001c448:	57                   	push   edi
c001c449:	6a 00                	push   0x0
c001c44b:	6a 34                	push   0x34
c001c44d:	53                   	push   ebx
c001c44e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c451:	83 c4 20             	add    esp,0x20
c001c454:	85 c0                	test   eax,eax
c001c456:	74 17                	je     c001c46f <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	68 9d b6 02 c0       	push   0xc002b69d
c001c460:	e8 fa d9 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	31 c0                	xor    eax,eax
c001c46a:	e9 31 02 00 00       	jmp    c001c6a0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c46f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c475:	75 e1                	jne    c001c458 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c477:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c47a:	85 c0                	test   eax,eax
c001c47c:	74 da                	je     c001c458 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c47e:	52                   	push   edx
c001c47f:	31 d2                	xor    edx,edx
c001c481:	52                   	push   edx
c001c482:	50                   	push   eax
c001c483:	53                   	push   ebx
c001c484:	e8 dd 6a ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c489:	83 c4 10             	add    esp,0x10
c001c48c:	85 c0                	test   eax,eax
c001c48e:	75 c8                	jne    c001c458 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c490:	83 ec 0c             	sub    esp,0xc
c001c493:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c497:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c49b:	31 ed                	xor    ebp,ebp
c001c49d:	0f af c2             	imul   eax,edx
c001c4a0:	50                   	push   eax
c001c4a1:	e8 76 31 ff ff       	call   c000f61c <malloc>
c001c4a6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4ac:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4b3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4b7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4bb:	0f af c2             	imul   eax,edx
c001c4be:	99                   	cdq    
c001c4bf:	52                   	push   edx
c001c4c0:	50                   	push   eax
c001c4c1:	53                   	push   ebx
c001c4c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4c5:	83 c4 20             	add    esp,0x20
c001c4c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c4d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4e8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4ec:	0f 86 aa 00 00 00    	jbe    c001c59c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4f2:	0f b7 f5             	movzx  esi,bp
c001c4f5:	6b f6 28             	imul   esi,esi,0x28
c001c4f8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4fc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c503:	50                   	push   eax
c001c504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c508:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c50c:	8b 16                	mov    edx,DWORD PTR [esi]
c001c50e:	6b c0 28             	imul   eax,eax,0x28
c001c511:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c515:	89 d0                	mov    eax,edx
c001c517:	31 d2                	xor    edx,edx
c001c519:	52                   	push   edx
c001c51a:	50                   	push   eax
c001c51b:	53                   	push   ebx
c001c51c:	e8 45 6a ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	6a 20                	push   0x20
c001c526:	6a 00                	push   0x0
c001c528:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c52c:	52                   	push   edx
c001c52d:	e8 8a 41 fe ff       	call   c00006bc <memset>
c001c532:	58                   	pop    eax
c001c533:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c535:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c539:	51                   	push   ecx
c001c53a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c53e:	52                   	push   edx
c001c53f:	6a 00                	push   0x0
c001c541:	6a 1f                	push   0x1f
c001c543:	53                   	push   ebx
c001c544:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c547:	83 c4 18             	add    esp,0x18
c001c54a:	68 b4 b6 02 c0       	push   0xc002b6b4
c001c54f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c553:	52                   	push   edx
c001c554:	e8 53 42 fe ff       	call   c00007ac <strcmp>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	85 c0                	test   eax,eax
c001c55e:	75 0f                	jne    c001c56f <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c560:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c563:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c567:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c56b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c56f:	50                   	push   eax
c001c570:	50                   	push   eax
c001c571:	68 bc b6 02 c0       	push   0xc002b6bc
c001c576:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c57a:	50                   	push   eax
c001c57b:	e8 2c 42 fe ff       	call   c00007ac <strcmp>
c001c580:	83 c4 10             	add    esp,0x10
c001c583:	85 c0                	test   eax,eax
c001c585:	75 0f                	jne    c001c596 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c587:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c58a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c58e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c592:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c596:	45                   	inc    ebp
c001c597:	e9 4c ff ff ff       	jmp    c001c4e8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c59c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5a1:	75 10                	jne    c001c5b3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	68 c4 b6 02 c0       	push   0xc002b6c4
c001c5ab:	e8 af d8 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001c5b0:	83 c4 10             	add    esp,0x10
c001c5b3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5b8:	75 10                	jne    c001c5ca <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	68 c4 b6 02 c0       	push   0xc002b6c4
c001c5c2:	e8 98 d8 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	31 d2                	xor    edx,edx
c001c5cc:	50                   	push   eax
c001c5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d1:	52                   	push   edx
c001c5d2:	50                   	push   eax
c001c5d3:	53                   	push   ebx
c001c5d4:	e8 8d 69 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c5d9:	5a                   	pop    edx
c001c5da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5de:	e8 39 30 ff ff       	call   c000f61c <malloc>
c001c5e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5eb:	31 c9                	xor    ecx,ecx
c001c5ed:	5e                   	pop    esi
c001c5ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5f0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5f4:	55                   	push   ebp
c001c5f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f9:	51                   	push   ecx
c001c5fa:	52                   	push   edx
c001c5fb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5ff:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c603:	53                   	push   ebx
c001c604:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c607:	83 c4 14             	add    esp,0x14
c001c60a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c60e:	e8 09 30 ff ff       	call   c000f61c <malloc>
c001c613:	89 c6                	mov    esi,eax
c001c615:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c617:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c61a:	56                   	push   esi
c001c61b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c61f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c623:	51                   	push   ecx
c001c624:	52                   	push   edx
c001c625:	53                   	push   ebx
c001c626:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c629:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c62d:	8b 15 60 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f60
c001c633:	83 c4 1c             	add    esp,0x1c
c001c636:	c1 e8 04             	shr    eax,0x4
c001c639:	89 04 95 e0 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf220],eax
c001c640:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c644:	31 d2                	xor    edx,edx
c001c646:	52                   	push   edx
c001c647:	50                   	push   eax
c001c648:	53                   	push   ebx
c001c649:	e8 18 69 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c64e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c650:	31 d2                	xor    edx,edx
c001c652:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c655:	56                   	push   esi
c001c656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c65a:	52                   	push   edx
c001c65b:	50                   	push   eax
c001c65c:	53                   	push   ebx
c001c65d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c660:	83 c4 14             	add    esp,0x14
c001c663:	53                   	push   ebx
c001c664:	e8 9d 68 ff ff       	call   c0012f06 <File::close()>
c001c669:	5d                   	pop    ebp
c001c66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c66e:	e8 b9 2f ff ff       	call   c000f62c <free>
c001c673:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c676:	e8 b1 2f ff ff       	call   c000f62c <free>
c001c67b:	a1 60 0f 03 c0       	mov    eax,ds:0xc0030f60
c001c680:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c684:	8d 50 01             	lea    edx,[eax+0x1]
c001c687:	89 0c 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],ecx
c001c68e:	89 34 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],esi
c001c695:	89 15 60 0f 03 c0    	mov    DWORD PTR ds:0xc0030f60,edx
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	b0 01                	mov    al,0x1
c001c6a0:	83 c4 5c             	add    esp,0x5c
c001c6a3:	5b                   	pop    ebx
c001c6a4:	5e                   	pop    esi
c001c6a5:	5f                   	pop    edi
c001c6a6:	5d                   	pop    ebp
c001c6a7:	c3                   	ret    

c001c6a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6a8:	55                   	push   ebp
c001c6a9:	57                   	push   edi
c001c6aa:	56                   	push   esi
c001c6ab:	53                   	push   ebx
c001c6ac:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6b2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6b9:	8b 1d b4 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fb4
c001c6bf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6c3:	68 14 01 00 00       	push   0x114
c001c6c8:	e8 4f 2f ff ff       	call   c000f61c <malloc>
c001c6cd:	83 c4 0c             	add    esp,0xc
c001c6d0:	89 c5                	mov    ebp,eax
c001c6d2:	53                   	push   ebx
c001c6d3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6da:	50                   	push   eax
c001c6db:	e8 64 67 ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001c6e0:	5e                   	pop    esi
c001c6e1:	5f                   	pop    edi
c001c6e2:	6a 01                	push   0x1
c001c6e4:	55                   	push   ebp
c001c6e5:	e8 be 67 ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001c6ea:	83 c4 10             	add    esp,0x10
c001c6ed:	85 c0                	test   eax,eax
c001c6ef:	0f 85 8d 06 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c6f5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6fd:	83 ec 0c             	sub    esp,0xc
c001c700:	6a 34                	push   0x34
c001c702:	e8 15 2f ff ff       	call   c000f61c <malloc>
c001c707:	5b                   	pop    ebx
c001c708:	89 c7                	mov    edi,eax
c001c70a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c70e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c711:	53                   	push   ebx
c001c712:	57                   	push   edi
c001c713:	6a 00                	push   0x0
c001c715:	6a 34                	push   0x34
c001c717:	55                   	push   ebp
c001c718:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c71b:	83 c4 20             	add    esp,0x20
c001c71e:	85 c0                	test   eax,eax
c001c720:	0f 85 5c 06 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c726:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c72c:	0f 85 50 06 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c732:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c735:	85 c0                	test   eax,eax
c001c737:	0f 84 45 06 00 00    	je     c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c73d:	31 d2                	xor    edx,edx
c001c73f:	51                   	push   ecx
c001c740:	52                   	push   edx
c001c741:	50                   	push   eax
c001c742:	55                   	push   ebp
c001c743:	e8 1e 68 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c748:	83 c4 10             	add    esp,0x10
c001c74b:	85 c0                	test   eax,eax
c001c74d:	0f 85 2f 06 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c753:	83 ec 0c             	sub    esp,0xc
c001c756:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c759:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c75d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c761:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c765:	0f af c2             	imul   eax,edx
c001c768:	50                   	push   eax
c001c769:	e8 ae 2e ff ff       	call   c000f61c <malloc>
c001c76e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c771:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c778:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c77c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c780:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c784:	0f af c2             	imul   eax,edx
c001c787:	99                   	cdq    
c001c788:	52                   	push   edx
c001c789:	50                   	push   eax
c001c78a:	55                   	push   ebp
c001c78b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c78e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c791:	83 c4 20             	add    esp,0x20
c001c794:	85 c0                	test   eax,eax
c001c796:	0f 84 e6 05 00 00    	je     c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c79c:	52                   	push   edx
c001c79d:	31 d2                	xor    edx,edx
c001c79f:	52                   	push   edx
c001c7a0:	50                   	push   eax
c001c7a1:	55                   	push   ebp
c001c7a2:	e8 bf 67 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c7a7:	83 c4 10             	add    esp,0x10
c001c7aa:	85 c0                	test   eax,eax
c001c7ac:	0f 85 d0 05 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7b9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7bd:	31 f6                	xor    esi,esi
c001c7bf:	0f af c2             	imul   eax,edx
c001c7c2:	50                   	push   eax
c001c7c3:	e8 54 2e ff ff       	call   c000f61c <malloc>
c001c7c8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7d6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7da:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7de:	0f af c2             	imul   eax,edx
c001c7e1:	99                   	cdq    
c001c7e2:	52                   	push   edx
c001c7e3:	50                   	push   eax
c001c7e4:	55                   	push   ebp
c001c7e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7e8:	83 c4 20             	add    esp,0x20
c001c7eb:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7ef:	0f 86 8a 00 00 00    	jbe    c001c87f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7f5:	0f b7 de             	movzx  ebx,si
c001c7f8:	c1 e3 05             	shl    ebx,0x5
c001c7fb:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7ff:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c802:	75 75                	jne    c001c879 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c804:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c807:	31 d2                	xor    edx,edx
c001c809:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c80d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c814:	50                   	push   eax
c001c815:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c818:	52                   	push   edx
c001c819:	50                   	push   eax
c001c81a:	55                   	push   ebp
c001c81b:	e8 46 67 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c820:	83 c4 10             	add    esp,0x10
c001c823:	85 c0                	test   eax,eax
c001c825:	0f 85 57 05 00 00    	jne    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c82b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c832:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c835:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c839:	31 d2                	xor    edx,edx
c001c83b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c83f:	83 ec 0c             	sub    esp,0xc
c001c842:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c846:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c84d:	50                   	push   eax
c001c84e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c856:	52                   	push   edx
c001c857:	50                   	push   eax
c001c858:	55                   	push   ebp
c001c859:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c85c:	83 c4 1c             	add    esp,0x1c
c001c85f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c862:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c865:	50                   	push   eax
c001c866:	6a 00                	push   0x0
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c870:	50                   	push   eax
c001c871:	e8 46 3e fe ff       	call   c00006bc <memset>
c001c876:	83 c4 10             	add    esp,0x10
c001c879:	46                   	inc    esi
c001c87a:	e9 6c ff ff ff       	jmp    c001c7eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c87f:	53                   	push   ebx
c001c880:	31 db                	xor    ebx,ebx
c001c882:	68 00 01 00 00       	push   0x100
c001c887:	6a 00                	push   0x0
c001c889:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c88d:	50                   	push   eax
c001c88e:	e8 29 3e fe ff       	call   c00006bc <memset>
c001c893:	83 c4 0c             	add    esp,0xc
c001c896:	68 00 01 00 00       	push   0x100
c001c89b:	6a 00                	push   0x0
c001c89d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8a4:	50                   	push   eax
c001c8a5:	e8 12 3e fe ff       	call   c00006bc <memset>
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8b5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8bd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c8d5:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8d9:	0f 86 30 01 00 00    	jbe    c001ca0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8df:	0f b7 f3             	movzx  esi,bx
c001c8e2:	6b f6 28             	imul   esi,esi,0x28
c001c8e5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f0:	52                   	push   edx
c001c8f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8f5:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8f9:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8fb:	6b d2 28             	imul   edx,edx,0x28
c001c8fe:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c902:	31 d2                	xor    edx,edx
c001c904:	52                   	push   edx
c001c905:	50                   	push   eax
c001c906:	55                   	push   ebp
c001c907:	e8 5a 66 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001c90c:	83 c4 0c             	add    esp,0xc
c001c90f:	6a 20                	push   0x20
c001c911:	6a 00                	push   0x0
c001c913:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c91a:	51                   	push   ecx
c001c91b:	e8 9c 3d fe ff       	call   c00006bc <memset>
c001c920:	59                   	pop    ecx
c001c921:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c924:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c928:	52                   	push   edx
c001c929:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c930:	51                   	push   ecx
c001c931:	6a 00                	push   0x0
c001c933:	6a 1f                	push   0x1f
c001c935:	55                   	push   ebp
c001c936:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c939:	83 c4 1c             	add    esp,0x1c
c001c93c:	6a 09                	push   0x9
c001c93e:	68 de b6 02 c0       	push   0xc002b6de
c001c943:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c94a:	51                   	push   ecx
c001c94b:	e8 ed 3c fe ff       	call   c000063d <memcmp>
c001c950:	83 c4 10             	add    esp,0x10
c001c953:	85 c0                	test   eax,eax
c001c955:	75 21                	jne    c001c978 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c95f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c963:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c967:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c96a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c971:	89 d0                	mov    eax,edx
c001c973:	40                   	inc    eax
c001c974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c978:	50                   	push   eax
c001c979:	6a 09                	push   0x9
c001c97b:	68 e8 b6 02 c0       	push   0xc002b6e8
c001c980:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c987:	50                   	push   eax
c001c988:	e8 b0 3c fe ff       	call   c000063d <memcmp>
c001c98d:	83 c4 10             	add    esp,0x10
c001c990:	85 c0                	test   eax,eax
c001c992:	75 21                	jne    c001c9b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c99c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c9a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9a7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9ae:	89 d0                	mov    eax,edx
c001c9b0:	40                   	inc    eax
c001c9b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9b5:	50                   	push   eax
c001c9b6:	50                   	push   eax
c001c9b7:	68 b4 b6 02 c0       	push   0xc002b6b4
c001c9bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c3:	50                   	push   eax
c001c9c4:	e8 e3 3d fe ff       	call   c00007ac <strcmp>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	85 c0                	test   eax,eax
c001c9ce:	75 0f                	jne    c001c9df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c9d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9df:	50                   	push   eax
c001c9e0:	50                   	push   eax
c001c9e1:	68 bc b6 02 c0       	push   0xc002b6bc
c001c9e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9ed:	50                   	push   eax
c001c9ee:	e8 b9 3d fe ff       	call   c00007ac <strcmp>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	85 c0                	test   eax,eax
c001c9f8:	75 0f                	jne    c001ca09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9fa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca09:	43                   	inc    ebx
c001ca0a:	e9 c6 fe ff ff       	jmp    c001c8d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca0f:	31 d2                	xor    edx,edx
c001ca11:	50                   	push   eax
c001ca12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca16:	52                   	push   edx
c001ca17:	50                   	push   eax
c001ca18:	55                   	push   ebp
c001ca19:	e8 48 65 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001ca1e:	58                   	pop    eax
c001ca1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca23:	e8 f4 2b ff ff       	call   c000f61c <malloc>
c001ca28:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca2b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca2f:	31 d2                	xor    edx,edx
c001ca31:	58                   	pop    eax
c001ca32:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca36:	53                   	push   ebx
c001ca37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca3f:	52                   	push   edx
c001ca40:	50                   	push   eax
c001ca41:	55                   	push   ebp
c001ca42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca45:	83 c4 14             	add    esp,0x14
c001ca48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca4c:	e8 cb 2b ff ff       	call   c000f61c <malloc>
c001ca51:	31 d2                	xor    edx,edx
c001ca53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca57:	83 c4 0c             	add    esp,0xc
c001ca5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca5e:	52                   	push   edx
c001ca5f:	50                   	push   eax
c001ca60:	55                   	push   ebp
c001ca61:	e8 00 65 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001ca66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca69:	31 d2                	xor    edx,edx
c001ca6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca76:	52                   	push   edx
c001ca77:	50                   	push   eax
c001ca78:	55                   	push   ebp
c001ca79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca7c:	83 c4 20             	add    esp,0x20
c001ca7f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca87:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca8b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca8f:	0f 84 f1 02 00 00    	je     c001cd86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001ca95:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca9c:	31 d2                	xor    edx,edx
c001ca9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caa2:	c1 e8 03             	shr    eax,0x3
c001caa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001caa9:	51                   	push   ecx
c001caaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caae:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cab2:	52                   	push   edx
c001cab3:	50                   	push   eax
c001cab4:	55                   	push   ebp
c001cab5:	e8 ac 64 ff ff       	call   c0012f66 <File::seek(unsigned long long)>
c001caba:	5b                   	pop    ebx
c001cabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cabf:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cac6:	e8 51 2b ff ff       	call   c000f61c <malloc>
c001cacb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cace:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cad2:	31 d2                	xor    edx,edx
c001cad4:	5e                   	pop    esi
c001cad5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cad9:	50                   	push   eax
c001cada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cade:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cae2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cae9:	52                   	push   edx
c001caea:	50                   	push   eax
c001caeb:	55                   	push   ebp
c001caec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caef:	83 c4 20             	add    esp,0x20
c001caf2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cafa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cafe:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb02:	0f 8d 62 02 00 00    	jge    c001cd6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cb08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb10:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb15:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb20:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb24:	89 d8                	mov    eax,ebx
c001cb26:	c1 e8 08             	shr    eax,0x8
c001cb29:	89 c6                	mov    esi,eax
c001cb2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb2f:	c1 e6 04             	shl    esi,0x4
c001cb32:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb36:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb39:	85 d2                	test   edx,edx
c001cb3b:	0f 85 bf 00 00 00    	jne    c001cc00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb41:	83 ec 0c             	sub    esp,0xc
c001cb44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb48:	03 06                	add    eax,DWORD PTR [esi]
c001cb4a:	50                   	push   eax
c001cb4b:	e8 4b f8 ff ff       	call   c001c39b <Thr::getAddressOfKernelSymbol(char const*)>
c001cb50:	83 c4 10             	add    esp,0x10
c001cb53:	89 c2                	mov    edx,eax
c001cb55:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb5a:	85 c0                	test   eax,eax
c001cb5c:	0f 85 9e 00 00 00    	jne    c001cc00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb62:	83 ec 0c             	sub    esp,0xc
c001cb65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb69:	03 06                	add    eax,DWORD PTR [esi]
c001cb6b:	50                   	push   eax
c001cb6c:	e8 65 17 ff ff       	call   c000e2d6 <Krnl::resolveCompatibilitySymbol(char*)>
c001cb71:	83 c4 10             	add    esp,0x10
c001cb74:	89 c2                	mov    edx,eax
c001cb76:	85 c0                	test   eax,eax
c001cb78:	0f 85 82 00 00 00    	jne    c001cc00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb7e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb82:	50                   	push   eax
c001cb83:	50                   	push   eax
c001cb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb88:	03 06                	add    eax,DWORD PTR [esi]
c001cb8a:	50                   	push   eax
c001cb8b:	68 f2 b6 02 c0       	push   0xc002b6f2
c001cb90:	e8 56 5d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001cb95:	58                   	pop    eax
c001cb96:	5a                   	pop    edx
c001cb97:	68 0c b7 02 c0       	push   0xc002b70c
c001cb9c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba3:	50                   	push   eax
c001cba4:	e8 b2 3b fe ff       	call   c000075b <strcpy>
c001cba9:	59                   	pop    ecx
c001cbaa:	58                   	pop    eax
c001cbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbaf:	03 06                	add    eax,DWORD PTR [esi]
c001cbb1:	50                   	push   eax
c001cbb2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbb9:	50                   	push   eax
c001cbba:	e8 53 3c fe ff       	call   c0000812 <strcat>
c001cbbf:	58                   	pop    eax
c001cbc0:	5a                   	pop    edx
c001cbc1:	68 a2 b7 02 c0       	push   0xc002b7a2
c001cbc6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbcd:	50                   	push   eax
c001cbce:	e8 3f 3c fe ff       	call   c0000812 <strcat>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cbdb:	0f 84 43 01 00 00    	je     c001cd24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cbe1:	83 ec 0c             	sub    esp,0xc
c001cbe4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbeb:	50                   	push   eax
c001cbec:	e8 6e d2 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbf8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbfc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc00:	80 fb 01             	cmp    bl,0x1
c001cc03:	75 7d                	jne    c001cc82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cc05:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc0c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc10:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc14:	01 ce                	add    esi,ecx
c001cc16:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc1c:	0f 94 c0             	sete   al
c001cc1f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc25:	0f 94 c3             	sete   bl
c001cc28:	09 c3                	or     ebx,eax
c001cc2a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc2c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc31:	74 36                	je     c001cc69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cc33:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc36:	84 db                	test   bl,bl
c001cc38:	75 0a                	jne    c001cc44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cc3a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc3e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc42:	76 37                	jbe    c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc44:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc48:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc4d:	0f 84 d1 00 00 00    	je     c001cd24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cc53:	83 ec 0c             	sub    esp,0xc
c001cc56:	68 23 b7 02 c0       	push   0xc002b723
c001cc5b:	e8 ff d1 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cc60:	83 c4 10             	add    esp,0x10
c001cc63:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc67:	eb 12                	jmp    c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc69:	01 c1                	add    ecx,eax
c001cc6b:	84 db                	test   bl,bl
c001cc6d:	75 0c                	jne    c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc73:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc77:	77 02                	ja     c001cc7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc79:	01 d1                	add    ecx,edx
c001cc7b:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc7d:	e9 df 00 00 00       	jmp    c001cd61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cc82:	80 fb 02             	cmp    bl,0x2
c001cc85:	75 71                	jne    c001ccf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001cc87:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc8e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc92:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc96:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc9c:	74 15                	je     c001ccb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cc9e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cca4:	74 0d                	je     c001ccb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cca6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccaa:	83 e8 04             	sub    eax,0x4
c001ccad:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccb1:	76 1f                	jbe    c001ccd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ccb3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ccb7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccbc:	74 66                	je     c001cd24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	68 3f b7 02 c0       	push   0xc002b73f
c001ccc6:	e8 94 d1 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccd2:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccd4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccd9:	74 13                	je     c001ccee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ccdb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccdf:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cce6:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ccea:	01 c8                	add    eax,ecx
c001ccec:	eb 04                	jmp    c001ccf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ccee:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ccf2:	01 c2                	add    edx,eax
c001ccf4:	89 16                	mov    DWORD PTR [esi],edx
c001ccf6:	eb 69                	jmp    c001cd61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ccf8:	0f b6 db             	movzx  ebx,bl
c001ccfb:	50                   	push   eax
c001ccfc:	50                   	push   eax
c001ccfd:	53                   	push   ebx
c001ccfe:	68 5b b7 02 c0       	push   0xc002b75b
c001cd03:	e8 e3 5b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001cd08:	83 c4 10             	add    esp,0x10
c001cd0b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd10:	74 12                	je     c001cd24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cd12:	83 ec 0c             	sub    esp,0xc
c001cd15:	68 66 b7 02 c0       	push   0xc002b766
c001cd1a:	e8 40 d1 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	eb 3d                	jmp    c001cd61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cd24:	83 ec 0c             	sub    esp,0xc
c001cd27:	55                   	push   ebp
c001cd28:	e8 d9 61 ff ff       	call   c0012f06 <File::close()>
c001cd2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd36:	59                   	pop    ecx
c001cd37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd3b:	e8 ec 28 ff ff       	call   c000f62c <free>
c001cd40:	5b                   	pop    ebx
c001cd41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd45:	e8 e2 28 ff ff       	call   c000f62c <free>
c001cd4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd4d:	e8 da 28 ff ff       	call   c000f62c <free>
c001cd52:	5e                   	pop    esi
c001cd53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd57:	e8 d0 28 ff ff       	call   c000f62c <free>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	eb 21                	jmp    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd61:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd65:	e9 90 fd ff ff       	jmp    c001cafa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd6a:	83 ec 0c             	sub    esp,0xc
c001cd6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd71:	e8 b6 28 ff ff       	call   c000f62c <free>
c001cd76:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	e9 05 fd ff ff       	jmp    c001ca87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd82:	31 c0                	xor    eax,eax
c001cd84:	eb 33                	jmp    c001cdb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	55                   	push   ebp
c001cd8a:	e8 77 61 ff ff       	call   c0012f06 <File::close()>
c001cd8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd98:	58                   	pop    eax
c001cd99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd9d:	e8 8a 28 ff ff       	call   c000f62c <free>
c001cda2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cda5:	e8 82 28 ff ff       	call   c000f62c <free>
c001cdaa:	5a                   	pop    edx
c001cdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdaf:	e8 78 28 ff ff       	call   c000f62c <free>
c001cdb4:	83 c4 10             	add    esp,0x10
c001cdb7:	b0 01                	mov    al,0x1
c001cdb9:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdbf:	5b                   	pop    ebx
c001cdc0:	5e                   	pop    esi
c001cdc1:	5f                   	pop    edi
c001cdc2:	5d                   	pop    ebp
c001cdc3:	c3                   	ret    

c001cdc4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cdc4:	56                   	push   esi
c001cdc5:	31 d2                	xor    edx,edx
c001cdc7:	53                   	push   ebx
c001cdc8:	8b 1d c0 07 03 c0    	mov    ebx,DWORD PTR ds:0xc00307c0
c001cdce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdd2:	39 d3                	cmp    ebx,edx
c001cdd4:	7e 1b                	jle    c001cdf1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cdd6:	8b 04 95 e0 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf620]
c001cddd:	39 c8                	cmp    eax,ecx
c001cddf:	77 0d                	ja     c001cdee <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cde1:	8b 34 95 e0 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf820]
c001cde8:	01 c6                	add    esi,eax
c001cdea:	39 ce                	cmp    esi,ecx
c001cdec:	77 05                	ja     c001cdf3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cdee:	42                   	inc    edx
c001cdef:	eb e1                	jmp    c001cdd2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cdf1:	31 c0                	xor    eax,eax
c001cdf3:	5b                   	pop    ebx
c001cdf4:	5e                   	pop    esi
c001cdf5:	c3                   	ret    

c001cdf6 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cdf6:	53                   	push   ebx
c001cdf7:	31 c0                	xor    eax,eax
c001cdf9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdfd:	8b 1d c0 07 03 c0    	mov    ebx,DWORD PTR ds:0xc00307c0
c001ce03:	39 c3                	cmp    ebx,eax
c001ce05:	7e 22                	jle    c001ce29 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce07:	8b 14 85 e0 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf620]
c001ce0e:	39 ca                	cmp    edx,ecx
c001ce10:	77 14                	ja     c001ce26 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce12:	03 14 85 e0 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf820]
c001ce19:	39 ca                	cmp    edx,ecx
c001ce1b:	76 09                	jbe    c001ce26 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce1d:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001ce24:	eb 05                	jmp    c001ce2b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce26:	40                   	inc    eax
c001ce27:	eb da                	jmp    c001ce03 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce29:	31 c0                	xor    eax,eax
c001ce2b:	5b                   	pop    ebx
c001ce2c:	c3                   	ret    

c001ce2d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce2d:	53                   	push   ebx
c001ce2e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce32:	53                   	push   ebx
c001ce33:	e8 8c ff ff ff       	call   c001cdc4 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce38:	5a                   	pop    edx
c001ce39:	31 d2                	xor    edx,edx
c001ce3b:	85 c0                	test   eax,eax
c001ce3d:	74 04                	je     c001ce43 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce3f:	89 da                	mov    edx,ebx
c001ce41:	29 c2                	sub    edx,eax
c001ce43:	89 d0                	mov    eax,edx
c001ce45:	5b                   	pop    ebx
c001ce46:	c3                   	ret    

c001ce47 <Thr::loadDLL(char const*, bool)>:
c001ce47:	55                   	push   ebp
c001ce48:	57                   	push   edi
c001ce49:	56                   	push   esi
c001ce4a:	53                   	push   ebx
c001ce4b:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce51:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce58:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ce5f:	56                   	push   esi
c001ce60:	68 7e b7 02 c0       	push   0xc002b77e
c001ce65:	e8 81 5a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ce6a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce71:	e8 a6 27 ff ff       	call   c000f61c <malloc>
c001ce76:	83 c4 0c             	add    esp,0xc
c001ce79:	89 c3                	mov    ebx,eax
c001ce7b:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c001ce81:	56                   	push   esi
c001ce82:	50                   	push   eax
c001ce83:	e8 bc 5f ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001ce88:	83 c4 10             	add    esp,0x10
c001ce8b:	85 db                	test   ebx,ebx
c001ce8d:	75 3c                	jne    c001cecb <Thr::loadDLL(char const*, bool)+0x84>
c001ce8f:	89 e8                	mov    eax,ebp
c001ce91:	84 c0                	test   al,al
c001ce93:	0f 84 b0 01 00 00    	je     c001d049 <Thr::loadDLL(char const*, bool)+0x202>
c001ce99:	50                   	push   eax
c001ce9a:	50                   	push   eax
c001ce9b:	68 8f b7 02 c0       	push   0xc002b78f
c001cea0:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cea4:	57                   	push   edi
c001cea5:	e8 b1 38 fe ff       	call   c000075b <strcpy>
c001ceaa:	58                   	pop    eax
c001ceab:	5a                   	pop    edx
c001ceac:	56                   	push   esi
c001cead:	57                   	push   edi
c001ceae:	e8 5f 39 fe ff       	call   c0000812 <strcat>
c001ceb3:	59                   	pop    ecx
c001ceb4:	58                   	pop    eax
c001ceb5:	68 a2 b7 02 c0       	push   0xc002b7a2
c001ceba:	57                   	push   edi
c001cebb:	e8 52 39 fe ff       	call   c0000812 <strcat>
c001cec0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cec3:	e8 97 cf ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cec8:	83 c4 10             	add    esp,0x10
c001cecb:	50                   	push   eax
c001cecc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ced0:	50                   	push   eax
c001ced1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ced5:	50                   	push   eax
c001ced6:	53                   	push   ebx
c001ced7:	e8 78 62 ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001cedc:	83 c4 10             	add    esp,0x10
c001cedf:	85 db                	test   ebx,ebx
c001cee1:	74 0c                	je     c001ceef <Thr::loadDLL(char const*, bool)+0xa8>
c001cee3:	83 ec 0c             	sub    esp,0xc
c001cee6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee8:	53                   	push   ebx
c001cee9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cef4:	75 0a                	jne    c001cf00 <Thr::loadDLL(char const*, bool)+0xb9>
c001cef6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cefa:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cefe:	75 3c                	jne    c001cf3c <Thr::loadDLL(char const*, bool)+0xf5>
c001cf00:	89 e8                	mov    eax,ebp
c001cf02:	84 c0                	test   al,al
c001cf04:	0f 84 3d 01 00 00    	je     c001d047 <Thr::loadDLL(char const*, bool)+0x200>
c001cf0a:	50                   	push   eax
c001cf0b:	50                   	push   eax
c001cf0c:	68 8f b7 02 c0       	push   0xc002b78f
c001cf11:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf15:	53                   	push   ebx
c001cf16:	e8 40 38 fe ff       	call   c000075b <strcpy>
c001cf1b:	58                   	pop    eax
c001cf1c:	5a                   	pop    edx
c001cf1d:	56                   	push   esi
c001cf1e:	53                   	push   ebx
c001cf1f:	e8 ee 38 fe ff       	call   c0000812 <strcat>
c001cf24:	59                   	pop    ecx
c001cf25:	5f                   	pop    edi
c001cf26:	68 a2 b7 02 c0       	push   0xc002b7a2
c001cf2b:	53                   	push   ebx
c001cf2c:	e8 e1 38 fe ff       	call   c0000812 <strcat>
c001cf31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf34:	e8 26 cf ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cf39:	83 c4 10             	add    esp,0x10
c001cf3c:	e8 4a 4b ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c001cf41:	51                   	push   ecx
c001cf42:	6a 03                	push   0x3
c001cf44:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf48:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf4c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cf52:	83 d3 00             	adc    ebx,0x0
c001cf55:	89 ca                	mov    edx,ecx
c001cf57:	89 d1                	mov    ecx,edx
c001cf59:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cf5d:	51                   	push   ecx
c001cf5e:	50                   	push   eax
c001cf5f:	e8 62 51 ff ff       	call   c00120c6 <VAS::allocatePages(int, int)>
c001cf64:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf67:	89 c3                	mov    ebx,eax
c001cf69:	e8 6b 37 fe ff       	call   c00006d9 <strlen>
c001cf6e:	8b 3d c0 07 03 c0    	mov    edi,DWORD PTR ds:0xc00307c0
c001cf74:	40                   	inc    eax
c001cf75:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf78:	e8 9f 26 ff ff       	call   c000f61c <malloc>
c001cf7d:	89 04 bd e0 0b 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf420],eax
c001cf84:	5f                   	pop    edi
c001cf85:	58                   	pop    eax
c001cf86:	a1 c0 07 03 c0       	mov    eax,ds:0xc00307c0
c001cf8b:	56                   	push   esi
c001cf8c:	ff 34 85 e0 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf420]
c001cf93:	e8 c3 37 fe ff       	call   c000075b <strcpy>
c001cf98:	a1 c0 07 03 c0       	mov    eax,ds:0xc00307c0
c001cf9d:	8d 50 01             	lea    edx,[eax+0x1]
c001cfa0:	89 1c 85 e0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf620],ebx
c001cfa7:	89 15 c0 07 03 c0    	mov    DWORD PTR ds:0xc00307c0,edx
c001cfad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfb1:	83 c4 0c             	add    esp,0xc
c001cfb4:	89 14 85 e0 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf820],edx
c001cfbb:	6a 01                	push   0x1
c001cfbd:	53                   	push   ebx
c001cfbe:	56                   	push   esi
c001cfbf:	e8 e4 f6 ff ff       	call   c001c6a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfc4:	83 c4 10             	add    esp,0x10
c001cfc7:	89 c7                	mov    edi,eax
c001cfc9:	fe c8                	dec    al
c001cfcb:	74 16                	je     c001cfe3 <Thr::loadDLL(char const*, bool)+0x19c>
c001cfcd:	89 e8                	mov    eax,ebp
c001cfcf:	84 c0                	test   al,al
c001cfd1:	74 10                	je     c001cfe3 <Thr::loadDLL(char const*, bool)+0x19c>
c001cfd3:	83 ec 0c             	sub    esp,0xc
c001cfd6:	68 a4 b7 02 c0       	push   0xc002b7a4
c001cfdb:	e8 7f ce ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	31 f6                	xor    esi,esi
c001cfe5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cfed:	05 ff 0f 00 00       	add    eax,0xfff
c001cff2:	83 d2 00             	adc    edx,0x0
c001cff5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cff9:	c1 ea 0c             	shr    edx,0xc
c001cffc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d000:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d004:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d008:	ba 00 00 00 00       	mov    edx,0x0
c001d00d:	89 d0                	mov    eax,edx
c001d00f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d013:	73 2c                	jae    c001d041 <Thr::loadDLL(char const*, bool)+0x1fa>
c001d015:	e8 71 4a ff ff       	call   c0011a8b <Virt::getAKernelVAS()>
c001d01a:	89 f5                	mov    ebp,esi
c001d01c:	c1 e5 0c             	shl    ebp,0xc
c001d01f:	52                   	push   edx
c001d020:	01 dd                	add    ebp,ebx
c001d022:	52                   	push   edx
c001d023:	55                   	push   ebp
c001d024:	50                   	push   eax
c001d025:	e8 16 4c ff ff       	call   c0011c40 <VAS::getPageTableEntry(unsigned long)>
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d030:	75 0c                	jne    c001d03e <Thr::loadDLL(char const*, bool)+0x1f7>
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	55                   	push   ebp
c001d036:	e8 f4 2b ff ff       	call   c000fc2f <Phys::freePage(unsigned long)>
c001d03b:	83 c4 10             	add    esp,0x10
c001d03e:	46                   	inc    esi
c001d03f:	eb a4                	jmp    c001cfe5 <Thr::loadDLL(char const*, bool)+0x19e>
c001d041:	89 f8                	mov    eax,edi
c001d043:	84 c0                	test   al,al
c001d045:	75 02                	jne    c001d049 <Thr::loadDLL(char const*, bool)+0x202>
c001d047:	31 db                	xor    ebx,ebx
c001d049:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d04f:	89 d8                	mov    eax,ebx
c001d051:	5b                   	pop    ebx
c001d052:	5e                   	pop    esi
c001d053:	5f                   	pop    edi
c001d054:	5d                   	pop    ebp
c001d055:	c3                   	ret    

c001d056 <Thr::executeDLL(unsigned long, void*)>:
c001d056:	56                   	push   esi
c001d057:	53                   	push   ebx
c001d058:	51                   	push   ecx
c001d059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d05d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d061:	85 db                	test   ebx,ebx
c001d063:	75 10                	jne    c001d075 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d065:	83 ec 0c             	sub    esp,0xc
c001d068:	68 c3 b7 02 c0       	push   0xc002b7c3
c001d06d:	e8 ed cd ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001d079:	89 d8                	mov    eax,ebx
c001d07b:	5a                   	pop    edx
c001d07c:	5b                   	pop    ebx
c001d07d:	5e                   	pop    esi
c001d07e:	ff e0                	jmp    eax

c001d080 <changeTSS>:
c001d080:	83 ec 14             	sub    esp,0x14
c001d083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d088:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d08b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d090:	c1 e2 15             	shl    edx,0x15
c001d093:	29 d0                	sub    eax,edx
c001d095:	50                   	push   eax
c001d096:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001d09b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0a1:	05 7c 11 00 00       	add    eax,0x117c
c001d0a6:	50                   	push   eax
c001d0a7:	e8 8e 41 ff ff       	call   c001123a <TSS::setESP(unsigned long)>
c001d0ac:	83 c4 1c             	add    esp,0x1c
c001d0af:	c3                   	ret    

c001d0b0 <Process::addArgs(char**)>:
c001d0b0:	57                   	push   edi
c001d0b1:	56                   	push   esi
c001d0b2:	53                   	push   ebx
c001d0b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d0bb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d0c5:	85 ff                	test   edi,edi
c001d0c7:	74 3d                	je     c001d106 <Process::addArgs(char**)+0x56>
c001d0c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001d0cb:	85 c0                	test   eax,eax
c001d0cd:	74 37                	je     c001d106 <Process::addArgs(char**)+0x56>
c001d0cf:	31 db                	xor    ebx,ebx
c001d0d1:	83 ec 0c             	sub    esp,0xc
c001d0d4:	50                   	push   eax
c001d0d5:	e8 ff 35 fe ff       	call   c00006d9 <strlen>
c001d0da:	40                   	inc    eax
c001d0db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0de:	e8 39 25 ff ff       	call   c000f61c <malloc>
c001d0e3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d0ea:	5a                   	pop    edx
c001d0eb:	59                   	pop    ecx
c001d0ec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d0ef:	43                   	inc    ebx
c001d0f0:	50                   	push   eax
c001d0f1:	e8 65 36 fe ff       	call   c000075b <strcpy>
c001d0f6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d0fc:	83 c4 10             	add    esp,0x10
c001d0ff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d102:	85 c0                	test   eax,eax
c001d104:	75 cb                	jne    c001d0d1 <Process::addArgs(char**)+0x21>
c001d106:	5b                   	pop    ebx
c001d107:	5e                   	pop    esi
c001d108:	5f                   	pop    edi
c001d109:	c3                   	ret    

c001d10a <Process::Process(char const*, Process*, char**)>:
c001d10a:	56                   	push   esi
c001d10b:	53                   	push   ebx
c001d10c:	83 ec 14             	sub    esp,0x14
c001d10f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d113:	05 0c 02 00 00       	add    eax,0x20c
c001d118:	bb 07 00 00 00       	mov    ebx,0x7
c001d11d:	89 c6                	mov    esi,eax
c001d11f:	85 db                	test   ebx,ebx
c001d121:	78 12                	js     c001d135 <Process::Process(char const*, Process*, char**)+0x2b>
c001d123:	83 ec 0c             	sub    esp,0xc
c001d126:	56                   	push   esi
c001d127:	e8 96 b2 00 00       	call   c00283c2 <ThreadControlBlock::ThreadControlBlock()>
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	83 c6 63             	add    esi,0x63
c001d132:	4b                   	dec    ebx
c001d133:	eb ea                	jmp    c001d11f <Process::Process(char const*, Process*, char**)+0x15>
c001d135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d139:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d147:	e8 64 cb ff ff       	call   c0019cb0 <Krnl::newProcessEnv(Process*)>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	89 c2                	mov    edx,eax
c001d151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d155:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d15b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d15f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d168:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c001d16d:	8d 50 01             	lea    edx,[eax+0x1]
c001d170:	89 15 d0 cf 02 c0    	mov    DWORD PTR ds:0xc002cfd0,edx
c001d176:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d17a:	89 02                	mov    DWORD PTR [edx],eax
c001d17c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d18b:	e8 8c 24 ff ff       	call   c000f61c <malloc>
c001d190:	83 c4 10             	add    esp,0x10
c001d193:	89 c3                	mov    ebx,eax
c001d195:	83 ec 08             	sub    esp,0x8
c001d198:	6a 00                	push   0x0
c001d19a:	53                   	push   ebx
c001d19b:	e8 ce 52 ff ff       	call   c001246e <VAS::VAS(bool)>
c001d1a0:	83 c4 10             	add    esp,0x10
c001d1a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d1ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1b1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d1bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1c3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1cd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1d3:	85 c0                	test   eax,eax
c001d1d5:	74 42                	je     c001d219 <Process::Process(char const*, Process*, char**)+0x10f>
c001d1d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1e1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d1e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1eb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1fb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d205:	05 0c 01 00 00       	add    eax,0x10c
c001d20a:	83 ec 08             	sub    esp,0x8
c001d20d:	52                   	push   edx
c001d20e:	50                   	push   eax
c001d20f:	e8 47 35 fe ff       	call   c000075b <strcpy>
c001d214:	83 c4 10             	add    esp,0x10
c001d217:	eb 63                	jmp    c001d27c <Process::Process(char const*, Process*, char**)+0x172>
c001d219:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d221:	83 ec 0c             	sub    esp,0xc
c001d224:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d228:	e8 ef 23 ff ff       	call   c000f61c <malloc>
c001d22d:	83 c4 10             	add    esp,0x10
c001d230:	89 c3                	mov    ebx,eax
c001d232:	83 ec 08             	sub    esp,0x8
c001d235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d239:	53                   	push   ebx
c001d23a:	e8 f9 3c ff ff       	call   c0010f38 <VgaText::VgaText(char const*)>
c001d23f:	83 c4 10             	add    esp,0x10
c001d242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d246:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d250:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d256:	83 ec 0c             	sub    esp,0xc
c001d259:	50                   	push   eax
c001d25a:	e8 cc 30 ff ff       	call   c001032b <addToTerminalCycle(VgaText*)>
c001d25f:	83 c4 10             	add    esp,0x10
c001d262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d266:	05 0c 01 00 00       	add    eax,0x10c
c001d26b:	83 ec 08             	sub    esp,0x8
c001d26e:	68 ed b7 02 c0       	push   0xc002b7ed
c001d273:	50                   	push   eax
c001d274:	e8 e2 34 fe ff       	call   c000075b <strcpy>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d280:	83 c0 0c             	add    eax,0xc
c001d283:	83 ec 08             	sub    esp,0x8
c001d286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d28a:	50                   	push   eax
c001d28b:	e8 cb 34 fe ff       	call   c000075b <strcpy>
c001d290:	83 c4 10             	add    esp,0x10
c001d293:	83 ec 08             	sub    esp,0x8
c001d296:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d29e:	e8 0d fe ff ff       	call   c001d0b0 <Process::addArgs(char**)>
c001d2a3:	83 c4 10             	add    esp,0x10
c001d2a6:	83 ec 08             	sub    esp,0x8
c001d2a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2b1:	e8 bc ee ff ff       	call   c001c172 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d2b6:	83 c4 10             	add    esp,0x10
c001d2b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2c1:	83 f0 01             	xor    eax,0x1
c001d2c4:	88 c2                	mov    dl,al
c001d2c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ca:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d2d0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d2d5:	83 ec 08             	sub    esp,0x8
c001d2d8:	50                   	push   eax
c001d2d9:	68 e8 b8 02 c0       	push   0xc002b8e8
c001d2de:	e8 08 56 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d2e3:	83 c4 10             	add    esp,0x10
c001d2e6:	90                   	nop
c001d2e7:	83 c4 14             	add    esp,0x14
c001d2ea:	5b                   	pop    ebx
c001d2eb:	5e                   	pop    esi
c001d2ec:	c3                   	ret    
c001d2ed:	90                   	nop

c001d2ee <Process::Process(bool, char const*, Process*, char**)>:
c001d2ee:	56                   	push   esi
c001d2ef:	53                   	push   ebx
c001d2f0:	83 ec 24             	sub    esp,0x24
c001d2f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d2fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d2ff:	05 0c 02 00 00       	add    eax,0x20c
c001d304:	bb 07 00 00 00       	mov    ebx,0x7
c001d309:	89 c6                	mov    esi,eax
c001d30b:	85 db                	test   ebx,ebx
c001d30d:	78 12                	js     c001d321 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d30f:	83 ec 0c             	sub    esp,0xc
c001d312:	56                   	push   esi
c001d313:	e8 aa b0 00 00       	call   c00283c2 <ThreadControlBlock::ThreadControlBlock()>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	83 c6 63             	add    esi,0x63
c001d31e:	4b                   	dec    ebx
c001d31f:	eb ea                	jmp    c001d30b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d325:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d333:	e8 78 c9 ff ff       	call   c0019cb0 <Krnl::newProcessEnv(Process*)>
c001d338:	83 c4 10             	add    esp,0x10
c001d33b:	89 c2                	mov    edx,eax
c001d33d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d341:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d347:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d34b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d354:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c001d359:	8d 50 01             	lea    edx,[eax+0x1]
c001d35c:	89 15 d0 cf 02 c0    	mov    DWORD PTR ds:0xc002cfd0,edx
c001d362:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d366:	89 02                	mov    DWORD PTR [edx],eax
c001d368:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d377:	e8 a0 22 ff ff       	call   c000f61c <malloc>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	89 c3                	mov    ebx,eax
c001d381:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d386:	83 ec 08             	sub    esp,0x8
c001d389:	50                   	push   eax
c001d38a:	53                   	push   ebx
c001d38b:	e8 de 50 ff ff       	call   c001246e <VAS::VAS(bool)>
c001d390:	83 c4 10             	add    esp,0x10
c001d393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d397:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d39d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3a1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3b3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3bd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3c3:	85 c0                	test   eax,eax
c001d3c5:	74 42                	je     c001d409 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d3c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3cb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3d1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3db:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3e5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3eb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3f5:	05 0c 01 00 00       	add    eax,0x10c
c001d3fa:	83 ec 08             	sub    esp,0x8
c001d3fd:	52                   	push   edx
c001d3fe:	50                   	push   eax
c001d3ff:	e8 57 33 fe ff       	call   c000075b <strcpy>
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	eb 63                	jmp    c001d46c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d409:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d411:	83 ec 0c             	sub    esp,0xc
c001d414:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d418:	e8 ff 21 ff ff       	call   c000f61c <malloc>
c001d41d:	83 c4 10             	add    esp,0x10
c001d420:	89 c3                	mov    ebx,eax
c001d422:	83 ec 08             	sub    esp,0x8
c001d425:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d429:	53                   	push   ebx
c001d42a:	e8 09 3b ff ff       	call   c0010f38 <VgaText::VgaText(char const*)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d436:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d43c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d440:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	50                   	push   eax
c001d44a:	e8 dc 2e ff ff       	call   c001032b <addToTerminalCycle(VgaText*)>
c001d44f:	83 c4 10             	add    esp,0x10
c001d452:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d456:	05 0c 01 00 00       	add    eax,0x10c
c001d45b:	83 ec 08             	sub    esp,0x8
c001d45e:	68 ed b7 02 c0       	push   0xc002b7ed
c001d463:	50                   	push   eax
c001d464:	e8 f2 32 fe ff       	call   c000075b <strcpy>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d470:	83 c0 0c             	add    eax,0xc
c001d473:	83 ec 08             	sub    esp,0x8
c001d476:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d47a:	50                   	push   eax
c001d47b:	e8 db 32 fe ff       	call   c000075b <strcpy>
c001d480:	83 c4 10             	add    esp,0x10
c001d483:	83 ec 08             	sub    esp,0x8
c001d486:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d48e:	e8 1d fc ff ff       	call   c001d0b0 <Process::addArgs(char**)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	90                   	nop
c001d497:	83 c4 24             	add    esp,0x24
c001d49a:	5b                   	pop    ebx
c001d49b:	5e                   	pop    esi
c001d49c:	c3                   	ret    

c001d49d <disableIRQs()>:
c001d49d:	fa                   	cli    
c001d49e:	ff 05 8c 0f 03 c0    	inc    DWORD PTR ds:0xc0030f8c
c001d4a4:	c3                   	ret    

c001d4a5 <getIRQNestingLevel()>:
c001d4a5:	a1 8c 0f 03 c0       	mov    eax,ds:0xc0030f8c
c001d4aa:	c3                   	ret    

c001d4ab <enableIRQs()>:
c001d4ab:	a1 8c 0f 03 c0       	mov    eax,ds:0xc0030f8c
c001d4b0:	48                   	dec    eax
c001d4b1:	a3 8c 0f 03 c0       	mov    ds:0xc0030f8c,eax
c001d4b6:	75 01                	jne    c001d4b9 <enableIRQs()+0xe>
c001d4b8:	fb                   	sti    
c001d4b9:	c3                   	ret    

c001d4ba <lockScheduler()>:
c001d4ba:	eb e1                	jmp    c001d49d <disableIRQs()>

c001d4bc <unlockScheduler()>:
c001d4bc:	eb ed                	jmp    c001d4ab <enableIRQs()>

c001d4be <userModeEntryPoint(void*)>:
c001d4be:	83 ec 0c             	sub    esp,0xc
c001d4c1:	e8 f6 ff ff ff       	call   c001d4bc <unlockScheduler()>
c001d4c6:	fb                   	sti    
c001d4c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d4cf:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d4d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4d9:	83 c4 0c             	add    esp,0xc
c001d4dc:	e9 49 2e fe ff       	jmp    c000032a <goToUsermode>

c001d4e1 <lockStuff()>:
c001d4e1:	e8 b7 ff ff ff       	call   c001d49d <disableIRQs()>
c001d4e6:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001d4ec:	c3                   	ret    

c001d4ed <taskStartupFunction>:
c001d4ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4f2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d4f5:	c3                   	ret    

c001d4f6 <updateTimeUsed()>:
c001d4f6:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c001d4fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d501:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d508:	74 50                	je     c001d55a <updateTimeUsed()+0x64>
c001d50a:	57                   	push   edi
c001d50b:	56                   	push   esi
c001d50c:	53                   	push   ebx
c001d50d:	0f 31                	rdtsc  
c001d50f:	89 c1                	mov    ecx,eax
c001d511:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001d516:	2b 0d b8 0f 03 c0    	sub    ecx,DWORD PTR ds:0xc0030fb8
c001d51c:	89 d3                	mov    ebx,edx
c001d51e:	89 0d c0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc0,ecx
c001d524:	1b 1d bc 0f 03 c0    	sbb    ebx,DWORD PTR ds:0xc0030fbc
c001d52a:	a3 b8 0f 03 c0       	mov    ds:0xc0030fb8,eax
c001d52f:	89 1d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ebx
c001d535:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d53a:	89 15 cc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fcc,edx
c001d540:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d543:	89 15 bc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fbc,edx
c001d549:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d54c:	01 f1                	add    ecx,esi
c001d54e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d551:	11 fb                	adc    ebx,edi
c001d553:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d556:	5b                   	pop    ebx
c001d557:	5e                   	pop    esi
c001d558:	5f                   	pop    edi
c001d559:	c3                   	ret    
c001d55a:	c3                   	ret    

c001d55b <switchToThread(ThreadControlBlock*)>:
c001d55b:	53                   	push   ebx
c001d55c:	83 ec 08             	sub    esp,0x8
c001d55f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001d564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d568:	85 c0                	test   eax,eax
c001d56a:	75 30                	jne    c001d59c <switchToThread(ThreadControlBlock*)+0x41>
c001d56c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d56f:	3c ff                	cmp    al,0xff
c001d571:	74 25                	je     c001d598 <switchToThread(ThreadControlBlock*)+0x3d>
c001d573:	0f b6 d0             	movzx  edx,al
c001d576:	b8 84 03 00 00       	mov    eax,0x384
c001d57b:	29 d0                	sub    eax,edx
c001d57d:	c1 e0 10             	shl    eax,0x10
c001d580:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d583:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d586:	e8 6b ff ff ff       	call   c001d4f6 <updateTimeUsed()>
c001d58b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d58f:	83 c4 08             	add    esp,0x8
c001d592:	5b                   	pop    ebx
c001d593:	e9 ca 2d fe ff       	jmp    c0000362 <switchToThreadASM>
c001d598:	31 c0                	xor    eax,eax
c001d59a:	eb e7                	jmp    c001d583 <switchToThread(ThreadControlBlock*)+0x28>
c001d59c:	c7 05 84 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f84,0x1
c001d5a6:	83 c4 08             	add    esp,0x8
c001d5a9:	5b                   	pop    ebx
c001d5aa:	c3                   	ret    
c001d5ab:	90                   	nop

c001d5ac <Semaphore::Semaphore(int)>:
c001d5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5b4:	89 10                	mov    DWORD PTR [eax],edx
c001d5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5d7:	90                   	nop
c001d5d8:	c3                   	ret    
c001d5d9:	90                   	nop

c001d5da <Mutex::Mutex()>:
c001d5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5de:	6a 01                	push   0x1
c001d5e0:	50                   	push   eax
c001d5e1:	e8 c6 ff ff ff       	call   c001d5ac <Semaphore::Semaphore(int)>
c001d5e6:	83 c4 08             	add    esp,0x8
c001d5e9:	90                   	nop
c001d5ea:	c3                   	ret    
c001d5eb:	90                   	nop

c001d5ec <Process::createThread(void (*)(void*), void*, int)>:
c001d5ec:	55                   	push   ebp
c001d5ed:	31 c9                	xor    ecx,ecx
c001d5ef:	57                   	push   edi
c001d5f0:	56                   	push   esi
c001d5f1:	53                   	push   ebx
c001d5f2:	83 ec 1c             	sub    esp,0x1c
c001d5f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5f9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d600:	89 f2                	mov    edx,esi
c001d602:	0f b7 c2             	movzx  eax,dx
c001d605:	83 e2 01             	and    edx,0x1
c001d608:	74 14                	je     c001d61e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d60a:	d1 f8                	sar    eax,1
c001d60c:	41                   	inc    ecx
c001d60d:	89 c2                	mov    edx,eax
c001d60f:	83 f9 10             	cmp    ecx,0x10
c001d612:	75 ee                	jne    c001d602 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d614:	83 c4 1c             	add    esp,0x1c
c001d617:	31 c0                	xor    eax,eax
c001d619:	5b                   	pop    ebx
c001d61a:	5e                   	pop    esi
c001d61b:	5f                   	pop    edi
c001d61c:	5d                   	pop    ebp
c001d61d:	c3                   	ret    
c001d61e:	83 ec 08             	sub    esp,0x8
c001d621:	b8 01 00 00 00       	mov    eax,0x1
c001d626:	d3 e0                	shl    eax,cl
c001d628:	09 c6                	or     esi,eax
c001d62a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d630:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d637:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d63a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d63d:	01 ce                	add    esi,ecx
c001d63f:	89 f0                	mov    eax,esi
c001d641:	c1 e0 05             	shl    eax,0x5
c001d644:	01 c6                	add    esi,eax
c001d646:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d649:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d64f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d655:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d659:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d65f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d665:	89 ca                	mov    edx,ecx
c001d667:	f7 da                	neg    edx
c001d669:	c1 e2 15             	shl    edx,0x15
c001d66c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d672:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d678:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d67c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d686:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d68c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d690:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d696:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d6a0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6aa:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d6b1:	50                   	push   eax
c001d6b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6b6:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d6bb:	e8 90 ab 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6c0:	83 c4 10             	add    esp,0x10
c001d6c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6c7:	83 c4 1c             	add    esp,0x1c
c001d6ca:	5b                   	pop    ebx
c001d6cb:	5e                   	pop    esi
c001d6cc:	5f                   	pop    edi
c001d6cd:	5d                   	pop    ebp
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <Process::createUserThread()>:
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	68 80 00 00 00       	push   0x80
c001d6d8:	6a 00                	push   0x0
c001d6da:	68 be d4 01 c0       	push   0xc001d4be
c001d6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e3:	e8 04 ff ff ff       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c001d6e8:	83 c4 1c             	add    esp,0x1c
c001d6eb:	c3                   	ret    

c001d6ec <setupMultitasking(void (*)())>:
c001d6ec:	56                   	push   esi
c001d6ed:	53                   	push   ebx
c001d6ee:	53                   	push   ebx
c001d6ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6f3:	eb 10                	jmp    c001d705 <setupMultitasking(void (*)())+0x19>
c001d6f5:	83 ec 0c             	sub    esp,0xc
c001d6f8:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d6fd:	e8 a0 aa 00 00       	call   c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d702:	83 c4 10             	add    esp,0x10
c001d705:	83 ec 0c             	sub    esp,0xc
c001d708:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d70d:	e8 74 aa 00 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d712:	83 c4 10             	add    esp,0x10
c001d715:	84 c0                	test   al,al
c001d717:	74 dc                	je     c001d6f5 <setupMultitasking(void (*)())+0x9>
c001d719:	83 ec 0c             	sub    esp,0xc
c001d71c:	68 3f 07 00 00       	push   0x73f
c001d721:	e8 f6 1e ff ff       	call   c000f61c <malloc>
c001d726:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d72d:	89 c3                	mov    ebx,eax
c001d72f:	6a 00                	push   0x0
c001d731:	68 f1 b7 02 c0       	push   0xc002b7f1
c001d736:	6a 01                	push   0x1
c001d738:	50                   	push   eax
c001d739:	e8 b0 fb ff ff       	call   c001d2ee <Process::Process(bool, char const*, Process*, char**)>
c001d73e:	83 c4 18             	add    esp,0x18
c001d741:	89 1d b4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb4,ebx
c001d747:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d74d:	68 10 b9 02 c0       	push   0xc002b910
c001d752:	e8 94 51 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d757:	58                   	pop    eax
c001d758:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d75e:	e8 4a 33 ff ff       	call   c0010aad <setActiveTerminal(VgaText*)>
c001d763:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d76b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d771:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d774:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d77e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d784:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d78a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d794:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d79e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7ae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7b4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7be:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7c4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7ce:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7d4:	5a                   	pop    edx
c001d7d5:	59                   	pop    ecx
c001d7d6:	68 ed b7 02 c0       	push   0xc002b7ed
c001d7db:	50                   	push   eax
c001d7dc:	e8 7a 2f fe ff       	call   c000075b <strcpy>
c001d7e1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7ec:	83 c4 14             	add    esp,0x14
c001d7ef:	5b                   	pop    ebx
c001d7f0:	5e                   	pop    esi
c001d7f1:	e9 5e 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7f6 <schedule()>:
c001d7f6:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001d7fb:	85 c0                	test   eax,eax
c001d7fd:	74 0b                	je     c001d80a <schedule()+0x14>
c001d7ff:	c7 05 84 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f84,0x1
c001d809:	c3                   	ret    
c001d80a:	53                   	push   ebx
c001d80b:	83 ec 14             	sub    esp,0x14
c001d80e:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d813:	e8 6e a9 00 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	84 c0                	test   al,al
c001d81d:	75 38                	jne    c001d857 <schedule()+0x61>
c001d81f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d824:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d827:	4a                   	dec    edx
c001d828:	74 32                	je     c001d85c <schedule()+0x66>
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d832:	e8 47 a9 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d837:	c7 04 24 a8 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa8
c001d83e:	89 c3                	mov    ebx,eax
c001d840:	e8 5d a9 00 00       	call   c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d845:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d84c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d84f:	e8 07 fd ff ff       	call   c001d55b <switchToThread(ThreadControlBlock*)>
c001d854:	83 c4 10             	add    esp,0x10
c001d857:	83 c4 08             	add    esp,0x8
c001d85a:	5b                   	pop    ebx
c001d85b:	c3                   	ret    
c001d85c:	83 ec 08             	sub    esp,0x8
c001d85f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d866:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d86c:	68 a8 0f 03 c0       	push   0xc0030fa8
c001d871:	e8 da a9 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d876:	83 c4 10             	add    esp,0x10
c001d879:	eb af                	jmp    c001d82a <schedule()+0x34>

c001d87b <unlockStuff()>:
c001d87b:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001d880:	48                   	dec    eax
c001d881:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001d886:	75 09                	jne    c001d891 <unlockStuff()+0x16>
c001d888:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001d88d:	85 c0                	test   eax,eax
c001d88f:	75 05                	jne    c001d896 <unlockStuff()+0x1b>
c001d891:	e9 15 fc ff ff       	jmp    c001d4ab <enableIRQs()>
c001d896:	83 ec 0c             	sub    esp,0xc
c001d899:	c7 05 84 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f84,0x0
c001d8a3:	e8 4e ff ff ff       	call   c001d7f6 <schedule()>
c001d8a8:	83 c4 0c             	add    esp,0xc
c001d8ab:	e9 fb fb ff ff       	jmp    c001d4ab <enableIRQs()>

c001d8b0 <Semaphore::tryAcquire()>:
c001d8b0:	83 ec 0c             	sub    esp,0xc
c001d8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b7:	e8 25 fc ff ff       	call   c001d4e1 <lockStuff()>
c001d8bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d8bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d8c1:	7c 0b                	jl     c001d8ce <Semaphore::tryAcquire()+0x1e>
c001d8c3:	e8 b3 ff ff ff       	call   c001d87b <unlockStuff()>
c001d8c8:	31 c0                	xor    eax,eax
c001d8ca:	83 c4 0c             	add    esp,0xc
c001d8cd:	c3                   	ret    
c001d8ce:	42                   	inc    edx
c001d8cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d8d2:	e8 a4 ff ff ff       	call   c001d87b <unlockStuff()>
c001d8d7:	b0 01                	mov    al,0x1
c001d8d9:	83 c4 0c             	add    esp,0xc
c001d8dc:	c3                   	ret    
c001d8dd:	90                   	nop

c001d8de <Semaphore::assertLocked(char const*)>:
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8e9:	e8 f3 fb ff ff       	call   c001d4e1 <lockStuff()>
c001d8ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8f0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d8f3:	7c 05                	jl     c001d8fa <Semaphore::assertLocked(char const*)+0x1c>
c001d8f5:	83 c4 0c             	add    esp,0xc
c001d8f8:	eb 81                	jmp    c001d87b <unlockStuff()>
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	52                   	push   edx
c001d8fe:	e8 5c c5 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001d903:	83 c4 10             	add    esp,0x10
c001d906:	83 c4 0c             	add    esp,0xc
c001d909:	e9 6d ff ff ff       	jmp    c001d87b <unlockStuff()>

c001d90e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d90e:	83 ec 0c             	sub    esp,0xc
c001d911:	e8 8f fb ff ff       	call   c001d4a5 <getIRQNestingLevel()>
c001d916:	83 ec 08             	sub    esp,0x8
c001d919:	50                   	push   eax
c001d91a:	68 44 b9 02 c0       	push   0xc002b944
c001d91f:	e8 c7 4f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d924:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d928:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d92d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d930:	e8 c1 fe ff ff       	call   c001d7f6 <schedule()>
c001d935:	e8 82 fb ff ff       	call   c001d4bc <unlockScheduler()>
c001d93a:	e8 66 fb ff ff       	call   c001d4a5 <getIRQNestingLevel()>
c001d93f:	5a                   	pop    edx
c001d940:	59                   	pop    ecx
c001d941:	50                   	push   eax
c001d942:	68 78 b9 02 c0       	push   0xc002b978
c001d947:	e8 9f 4f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001d94c:	83 c4 1c             	add    esp,0x1c
c001d94f:	c3                   	ret    

c001d950 <blockTask(TaskState)>:
c001d950:	83 ec 0c             	sub    esp,0xc
c001d953:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d957:	e8 5e fb ff ff       	call   c001d4ba <lockScheduler()>
c001d95c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d961:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d964:	e8 8d fe ff ff       	call   c001d7f6 <schedule()>
c001d969:	83 c4 0c             	add    esp,0xc
c001d96c:	e9 4b fb ff ff       	jmp    c001d4bc <unlockScheduler()>

c001d971 <waitTask(int, int*, int)>:
c001d971:	83 ec 18             	sub    esp,0x18
c001d974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d979:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d97d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d980:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d989:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d98c:	6a 07                	push   0x7
c001d98e:	e8 bd ff ff ff       	call   c001d950 <blockTask(TaskState)>
c001d993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d998:	83 c4 10             	add    esp,0x10
c001d99b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d99e:	85 d2                	test   edx,edx
c001d9a0:	74 0a                	je     c001d9ac <waitTask(int, int*, int)+0x3b>
c001d9a2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d9a5:	89 02                	mov    DWORD PTR [edx],eax
c001d9a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ac:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d9af:	83 c4 0c             	add    esp,0xc
c001d9b2:	c3                   	ret    

c001d9b3 <nanoSleepUntil(unsigned long long)>:
c001d9b3:	83 ec 0c             	sub    esp,0xc
c001d9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9be:	3b 05 d0 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e0d0
c001d9c4:	89 d1                	mov    ecx,edx
c001d9c6:	1b 0d d4 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e0d4
c001d9cc:	73 04                	jae    c001d9d2 <nanoSleepUntil(unsigned long long)+0x1f>
c001d9ce:	83 c4 0c             	add    esp,0xc
c001d9d1:	c3                   	ret    
c001d9d2:	e8 0a fb ff ff       	call   c001d4e1 <lockStuff()>
c001d9d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d9dd:	83 ec 08             	sub    esp,0x8
c001d9e0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d9e3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d9e6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d9ec:	68 9c 0f 03 c0       	push   0xc0030f9c
c001d9f1:	e8 5a a8 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9f6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d9fd:	e8 4e ff ff ff       	call   c001d950 <blockTask(TaskState)>
c001da02:	83 c4 1c             	add    esp,0x1c
c001da05:	e9 71 fe ff ff       	jmp    c001d87b <unlockStuff()>

c001da0a <nanoSleep(unsigned long long)>:
c001da0a:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c001da0f:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c001da15:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001da19:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001da1d:	eb 94                	jmp    c001d9b3 <nanoSleepUntil(unsigned long long)>

c001da1f <sleep(unsigned long long)>:
c001da1f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001da27:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001da2c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001da30:	01 ca                	add    edx,ecx
c001da32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da36:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da3a:	eb ce                	jmp    c001da0a <nanoSleep(unsigned long long)>

c001da3c <Semaphore::acquire()>:
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da43:	e8 99 fa ff ff       	call   c001d4e1 <lockStuff()>
c001da48:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da4b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001da4d:	7d 0c                	jge    c001da5b <Semaphore::acquire()+0x1f>
c001da4f:	42                   	inc    edx
c001da50:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da53:	83 c4 0c             	add    esp,0xc
c001da56:	e9 20 fe ff ff       	jmp    c001d87b <unlockStuff()>
c001da5b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da61:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001da68:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da6b:	85 d2                	test   edx,edx
c001da6d:	74 2a                	je     c001da99 <Semaphore::acquire()+0x5d>
c001da6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001da72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da78:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001da7b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da81:	83 ec 0c             	sub    esp,0xc
c001da84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001da87:	6a 05                	push   0x5
c001da89:	e8 c2 fe ff ff       	call   c001d950 <blockTask(TaskState)>
c001da8e:	83 c4 10             	add    esp,0x10
c001da91:	83 c4 0c             	add    esp,0xc
c001da94:	e9 e2 fd ff ff       	jmp    c001d87b <unlockStuff()>
c001da99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001daa2:	eb d7                	jmp    c001da7b <Semaphore::acquire()+0x3f>

c001daa4 <taskReturned>:
c001daa4:	83 ec 18             	sub    esp,0x18
c001daa7:	68 ac b9 02 c0       	push   0xc002b9ac
c001daac:	e8 ae c3 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001dab1:	83 c4 10             	add    esp,0x10
c001dab4:	83 ec 0c             	sub    esp,0xc
c001dab7:	6a 02                	push   0x2
c001dab9:	e8 92 fe ff ff       	call   c001d950 <blockTask(TaskState)>
c001dabe:	e8 f7 f9 ff ff       	call   c001d4ba <lockScheduler()>
c001dac3:	e8 2e fd ff ff       	call   c001d7f6 <schedule()>
c001dac8:	e8 ef f9 ff ff       	call   c001d4bc <unlockScheduler()>
c001dacd:	83 c4 10             	add    esp,0x10
c001dad0:	eb e2                	jmp    c001dab4 <taskReturned+0x10>

c001dad2 <unblockTask(ThreadControlBlock*)>:
c001dad2:	53                   	push   ebx
c001dad3:	83 ec 08             	sub    esp,0x8
c001dad6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dada:	e8 db f9 ff ff       	call   c001d4ba <lockScheduler()>
c001dadf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dae2:	85 c0                	test   eax,eax
c001dae4:	74 5c                	je     c001db42 <unblockTask(ThreadControlBlock*)+0x70>
c001dae6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dae9:	48                   	dec    eax
c001daea:	74 31                	je     c001db1d <unblockTask(ThreadControlBlock*)+0x4b>
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	68 a8 0f 03 c0       	push   0xc0030fa8
c001daf4:	e8 85 a6 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	85 c0                	test   eax,eax
c001dafe:	75 17                	jne    c001db17 <unblockTask(ThreadControlBlock*)+0x45>
c001db00:	eb 65                	jmp    c001db67 <unblockTask(ThreadControlBlock*)+0x95>
c001db02:	83 ec 08             	sub    esp,0x8
c001db05:	50                   	push   eax
c001db06:	68 a8 0f 03 c0       	push   0xc0030fa8
c001db0b:	e8 48 a9 00 00       	call   c0028458 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001db10:	83 c4 10             	add    esp,0x10
c001db13:	85 c0                	test   eax,eax
c001db15:	74 50                	je     c001db67 <unblockTask(ThreadControlBlock*)+0x95>
c001db17:	39 c3                	cmp    ebx,eax
c001db19:	75 e7                	jne    c001db02 <unblockTask(ThreadControlBlock*)+0x30>
c001db1b:	eb 1c                	jmp    c001db39 <unblockTask(ThreadControlBlock*)+0x67>
c001db1d:	83 ec 0c             	sub    esp,0xc
c001db20:	68 9c ba 02 c0       	push   0xc002ba9c
c001db25:	e8 c1 4d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001db2a:	c7 04 24 28 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba28
c001db31:	e8 b5 4d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001db36:	83 c4 10             	add    esp,0x10
c001db39:	83 c4 08             	add    esp,0x8
c001db3c:	5b                   	pop    ebx
c001db3d:	e9 7a f9 ff ff       	jmp    c001d4bc <unlockScheduler()>
c001db42:	83 ec 0c             	sub    esp,0xc
c001db45:	68 e0 b9 02 c0       	push   0xc002b9e0
c001db4a:	e8 9c 4d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001db4f:	c7 04 24 28 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba28
c001db56:	e8 90 4d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001db5b:	83 c4 10             	add    esp,0x10
c001db5e:	83 c4 08             	add    esp,0x8
c001db61:	5b                   	pop    ebx
c001db62:	e9 55 f9 ff ff       	jmp    c001d4bc <unlockScheduler()>
c001db67:	83 ec 08             	sub    esp,0x8
c001db6a:	53                   	push   ebx
c001db6b:	68 a8 0f 03 c0       	push   0xc0030fa8
c001db70:	e8 db a6 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db75:	83 c4 10             	add    esp,0x10
c001db78:	83 c4 08             	add    esp,0x8
c001db7b:	5b                   	pop    ebx
c001db7c:	e9 3b f9 ff ff       	jmp    c001d4bc <unlockScheduler()>

c001db81 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001db81:	55                   	push   ebp
c001db82:	57                   	push   edi
c001db83:	56                   	push   esi
c001db84:	53                   	push   ebx
c001db85:	83 ec 1c             	sub    esp,0x1c
c001db88:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db8c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001db8f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001db95:	85 ff                	test   edi,edi
c001db97:	7e 20                	jle    c001dbb9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001db99:	31 f6                	xor    esi,esi
c001db9b:	83 ec 0c             	sub    esp,0xc
c001db9e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dba5:	46                   	inc    esi
c001dba6:	e8 81 1a ff ff       	call   c000f62c <free>
c001dbab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dbb7:	7f e2                	jg     c001db9b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dbb9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbc3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dbc8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dbcb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dbce:	d3 c0                	rol    eax,cl
c001dbd0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dbd7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dbda:	89 f7                	mov    edi,esi
c001dbdc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dbe4:	0f 85 74 01 00 00    	jne    c001dd5e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dbea:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dbf0:	85 ed                	test   ebp,ebp
c001dbf2:	74 1b                	je     c001dc0f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dbf4:	83 ec 0c             	sub    esp,0xc
c001dbf7:	55                   	push   ebp
c001dbf8:	e8 cf bf ff ff       	call   c0019bcc <EnvVarContainer::~EnvVarContainer()>
c001dbfd:	59                   	pop    ecx
c001dbfe:	5e                   	pop    esi
c001dbff:	6a 0c                	push   0xc
c001dc01:	55                   	push   ebp
c001dc02:	e8 04 4c ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001dc07:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dc0a:	83 c4 10             	add    esp,0x10
c001dc0d:	89 f7                	mov    edi,esi
c001dc0f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc15:	85 c0                	test   eax,eax
c001dc17:	0f 84 aa 00 00 00    	je     c001dcc7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc1d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dc20:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc24:	31 c9                	xor    ecx,ecx
c001dc26:	eb 10                	jmp    c001dc38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dc28:	41                   	inc    ecx
c001dc29:	83 f9 10             	cmp    ecx,0x10
c001dc2c:	0f 84 95 00 00 00    	je     c001dcc7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc32:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc38:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dc3f:	d3 fa                	sar    edx,cl
c001dc41:	83 e2 01             	and    edx,0x1
c001dc44:	74 e2                	je     c001dc28 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc46:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dc49:	01 ca                	add    edx,ecx
c001dc4b:	89 d5                	mov    ebp,edx
c001dc4d:	c1 e5 05             	shl    ebp,0x5
c001dc50:	01 ea                	add    edx,ebp
c001dc52:	01 d0                	add    eax,edx
c001dc54:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dc5a:	83 fd 07             	cmp    ebp,0x7
c001dc5d:	75 c9                	jne    c001dc28 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc5f:	05 40 02 00 00       	add    eax,0x240
c001dc64:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dc67:	83 fd ff             	cmp    ebp,0xffffffff
c001dc6a:	0f 8c 08 01 00 00    	jl     c001dd78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dc70:	0f 84 b9 01 00 00    	je     c001de2f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001dc76:	85 ed                	test   ebp,ebp
c001dc78:	0f 84 a0 01 00 00    	je     c001de1e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001dc7e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dc80:	75 a6                	jne    c001dc28 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc82:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc8c:	01 d0                	add    eax,edx
c001dc8e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dc9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc9e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dca4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dcab:	50                   	push   eax
c001dcac:	e8 21 fe ff ff       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c001dcb1:	83 c4 10             	add    esp,0x10
c001dcb4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dcb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcbb:	89 f7                	mov    edi,esi
c001dcbd:	41                   	inc    ecx
c001dcbe:	83 f9 10             	cmp    ecx,0x10
c001dcc1:	0f 85 6b ff ff ff    	jne    c001dc32 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dcc7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dccd:	85 c0                	test   eax,eax
c001dccf:	74 5d                	je     c001dd2e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dcd1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dcd7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dcdd:	74 4f                	je     c001dd2e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dcdf:	83 ec 0c             	sub    esp,0xc
c001dce2:	68 a8 0f 03 c0       	push   0xc0030fa8
c001dce7:	e8 92 a4 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcec:	c7 04 24 a8 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa8
c001dcf3:	89 c7                	mov    edi,eax
c001dcf5:	e8 8c a4 00 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcfa:	83 c4 10             	add    esp,0x10
c001dcfd:	84 c0                	test   al,al
c001dcff:	0f 84 e4 00 00 00    	je     c001dde9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dd05:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd08:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd0e:	85 d2                	test   edx,edx
c001dd10:	74 0f                	je     c001dd21 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dd12:	83 ec 0c             	sub    esp,0xc
c001dd15:	8b 02                	mov    eax,DWORD PTR [edx]
c001dd17:	52                   	push   edx
c001dd18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dd2b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dd2e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dd34:	85 db                	test   ebx,ebx
c001dd36:	74 16                	je     c001dd4e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	53                   	push   ebx
c001dd3c:	e8 19 41 ff ff       	call   c0011e5a <VAS::~VAS()>
c001dd41:	58                   	pop    eax
c001dd42:	5a                   	pop    edx
c001dd43:	6a 10                	push   0x10
c001dd45:	53                   	push   ebx
c001dd46:	e8 c0 4a ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001dd4b:	83 c4 10             	add    esp,0x10
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	68 f8 b7 02 c0       	push   0xc002b7f8
c001dd56:	e8 90 4b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	83 ec 08             	sub    esp,0x8
c001dd61:	68 3f 07 00 00       	push   0x73f
c001dd66:	68 06 b8 02 c0       	push   0xc002b806
c001dd6b:	e8 7b 4b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001dd70:	83 c4 2c             	add    esp,0x2c
c001dd73:	5b                   	pop    ebx
c001dd74:	5e                   	pop    esi
c001dd75:	5f                   	pop    edi
c001dd76:	5d                   	pop    ebp
c001dd77:	c3                   	ret    
c001dd78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	68 e0 ba 02 c0       	push   0xc002bae0
c001dd84:	e8 d6 c0 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001dd89:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd8c:	83 c4 10             	add    esp,0x10
c001dd8f:	89 f7                	mov    edi,esi
c001dd91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd95:	e9 8e fe ff ff       	jmp    c001dc28 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dd9a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dda0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dda6:	75 1c                	jne    c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dda8:	83 ec 0c             	sub    esp,0xc
c001ddab:	68 48 bb 02 c0       	push   0xc002bb48
c001ddb0:	e8 36 4b ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ddb5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ddbc:	e8 8f fb ff ff       	call   c001d950 <blockTask(TaskState)>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	83 ec 08             	sub    esp,0x8
c001ddc7:	56                   	push   esi
c001ddc8:	68 a8 0f 03 c0       	push   0xc0030fa8
c001ddcd:	e8 7e a4 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddd2:	c7 04 24 a8 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa8
c001ddd9:	e8 a0 a3 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	39 f8                	cmp    eax,edi
c001dde3:	0f 84 1c ff ff ff    	je     c001dd05 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dde9:	83 ec 0c             	sub    esp,0xc
c001ddec:	68 a8 0f 03 c0       	push   0xc0030fa8
c001ddf1:	e8 88 a3 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf6:	c7 04 24 a8 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa8
c001ddfd:	89 c6                	mov    esi,eax
c001ddff:	e8 9e a3 00 00       	call   c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de04:	83 c4 10             	add    esp,0x10
c001de07:	39 f3                	cmp    ebx,esi
c001de09:	74 b9                	je     c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de0b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001de0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de11:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001de17:	75 ab                	jne    c001ddc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de19:	e9 7c ff ff ff       	jmp    c001dd9a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001de1e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de22:	83 ec 0c             	sub    esp,0xc
c001de25:	68 14 bb 02 c0       	push   0xc002bb14
c001de2a:	e9 55 ff ff ff       	jmp    c001dd84 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001de2f:	8b 36                	mov    esi,DWORD PTR [esi]
c001de31:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de35:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001de38:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de3b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001de41:	01 d7                	add    edi,edx
c001de43:	89 f8                	mov    eax,edi
c001de45:	e9 44 fe ff ff       	jmp    c001dc8e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001de4a <cleanerTaskFunction(void*)>:
c001de4a:	53                   	push   ebx
c001de4b:	83 ec 08             	sub    esp,0x8
c001de4e:	e8 69 f6 ff ff       	call   c001d4bc <unlockScheduler()>
c001de53:	e8 62 f6 ff ff       	call   c001d4ba <lockScheduler()>
c001de58:	80 3d 6c 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f6c,0x0
c001de5f:	0f 85 8e 00 00 00    	jne    c001def3 <cleanerTaskFunction(void*)+0xa9>
c001de65:	83 ec 0c             	sub    esp,0xc
c001de68:	6a 02                	push   0x2
c001de6a:	e8 9f fa ff ff       	call   c001d90e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de6f:	83 c4 10             	add    esp,0x10
c001de72:	c6 05 6c 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f6c,0x0
c001de79:	e8 63 f6 ff ff       	call   c001d4e1 <lockStuff()>
c001de7e:	e8 37 f6 ff ff       	call   c001d4ba <lockScheduler()>
c001de83:	83 ec 0c             	sub    esp,0xc
c001de86:	68 90 0f 03 c0       	push   0xc0030f90
c001de8b:	e8 f6 a2 00 00       	call   c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de90:	83 c4 10             	add    esp,0x10
c001de93:	84 c0                	test   al,al
c001de95:	75 40                	jne    c001ded7 <cleanerTaskFunction(void*)+0x8d>
c001de97:	83 ec 0c             	sub    esp,0xc
c001de9a:	68 90 0f 03 c0       	push   0xc0030f90
c001de9f:	e8 da a2 00 00       	call   c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dea4:	c7 04 24 90 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f90
c001deab:	89 c3                	mov    ebx,eax
c001dead:	e8 f0 a2 00 00       	call   c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001deb2:	c7 04 24 1c b8 02 c0 	mov    DWORD PTR [esp],0xc002b81c
c001deb9:	e8 2d 4a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001debe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dec1:	e8 bb fc ff ff       	call   c001db81 <cleanupTerminatedTask(ThreadControlBlock*)>
c001dec6:	c7 04 24 35 b8 02 c0 	mov    DWORD PTR [esp],0xc002b835
c001decd:	e8 19 4a ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ded2:	83 c4 10             	add    esp,0x10
c001ded5:	eb ac                	jmp    c001de83 <cleanerTaskFunction(void*)+0x39>
c001ded7:	e8 e0 f5 ff ff       	call   c001d4bc <unlockScheduler()>
c001dedc:	e8 9a f9 ff ff       	call   c001d87b <unlockStuff()>
c001dee1:	e8 d4 f5 ff ff       	call   c001d4ba <lockScheduler()>
c001dee6:	80 3d 6c 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f6c,0x0
c001deed:	0f 84 72 ff ff ff    	je     c001de65 <cleanerTaskFunction(void*)+0x1b>
c001def3:	e8 c4 f5 ff ff       	call   c001d4bc <unlockScheduler()>
c001def8:	e9 75 ff ff ff       	jmp    c001de72 <cleanerTaskFunction(void*)+0x28>

c001defd <terminateTask(int)>:
c001defd:	83 ec 14             	sub    esp,0x14
c001df00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df08:	83 c0 0c             	add    eax,0xc
c001df0b:	50                   	push   eax
c001df0c:	68 70 bb 02 c0       	push   0xc002bb70
c001df11:	e8 d5 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001df16:	e8 c6 f5 ff ff       	call   c001d4e1 <lockStuff()>
c001df1b:	e8 9a f5 ff ff       	call   c001d4ba <lockScheduler()>
c001df20:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001df27:	e8 bf 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001df2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df35:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001df38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df3d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001df40:	5a                   	pop    edx
c001df41:	59                   	pop    ecx
c001df42:	50                   	push   eax
c001df43:	68 90 0f 03 c0       	push   0xc0030f90
c001df48:	e8 03 a3 00 00       	call   c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df52:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001df59:	c7 04 24 62 b8 02 c0 	mov    DWORD PTR [esp],0xc002b862
c001df60:	e8 86 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c001df6d:	85 c0                	test   eax,eax
c001df6f:	74 5a                	je     c001dfcb <terminateTask(int)+0xce>
c001df71:	83 ec 0c             	sub    esp,0xc
c001df74:	68 7c b8 02 c0       	push   0xc002b87c
c001df79:	e8 6d 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001df7e:	58                   	pop    eax
c001df7f:	c6 05 6c 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f6c,0x1
c001df86:	ff 35 68 0f 03 c0    	push   DWORD PTR ds:0xc0030f68
c001df8c:	e8 41 fb ff ff       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c001df91:	c7 04 24 96 b8 02 c0 	mov    DWORD PTR [esp],0xc002b896
c001df98:	e8 4e 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001df9d:	83 c4 10             	add    esp,0x10
c001dfa0:	e8 17 f5 ff ff       	call   c001d4bc <unlockScheduler()>
c001dfa5:	e8 d1 f8 ff ff       	call   c001d87b <unlockStuff()>
c001dfaa:	83 ec 0c             	sub    esp,0xc
c001dfad:	68 ce b8 02 c0       	push   0xc002b8ce
c001dfb2:	e8 34 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	e8 fb f4 ff ff       	call   c001d4ba <lockScheduler()>
c001dfbf:	e8 32 f8 ff ff       	call   c001d7f6 <schedule()>
c001dfc4:	e8 f3 f4 ff ff       	call   c001d4bc <unlockScheduler()>
c001dfc9:	eb ef                	jmp    c001dfba <terminateTask(int)+0xbd>
c001dfcb:	83 ec 0c             	sub    esp,0xc
c001dfce:	68 b0 b8 02 c0       	push   0xc002b8b0
c001dfd3:	e8 13 49 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	eb c3                	jmp    c001dfa0 <terminateTask(int)+0xa3>

c001dfdd <Thr::terminateFromIRQ(int)>:
c001dfdd:	83 ec 18             	sub    esp,0x18
c001dfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfe4:	e8 14 ff ff ff       	call   c001defd <terminateTask(int)>
c001dfe9:	90                   	nop

c001dfea <Semaphore::release()>:
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff1:	e8 eb f4 ff ff       	call   c001d4e1 <lockStuff()>
c001dff6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dff9:	85 d2                	test   edx,edx
c001dffb:	74 1a                	je     c001e017 <Semaphore::release()+0x2d>
c001dffd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e000:	83 ec 0c             	sub    esp,0xc
c001e003:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e006:	52                   	push   edx
c001e007:	e8 c6 fa ff ff       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c001e00c:	83 c4 10             	add    esp,0x10
c001e00f:	83 c4 0c             	add    esp,0xc
c001e012:	e9 64 f8 ff ff       	jmp    c001d87b <unlockStuff()>
c001e017:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e01a:	83 c4 0c             	add    esp,0xc
c001e01d:	e9 59 f8 ff ff       	jmp    c001d87b <unlockStuff()>

c001e022 <__static_initialization_and_destruction_0(int, int)>:
c001e022:	83 ec 0c             	sub    esp,0xc
c001e025:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e02a:	0f 85 88 00 00 00    	jne    c001e0b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e030:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e038:	75 7e                	jne    c001e0b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e03a:	83 ec 0c             	sub    esp,0xc
c001e03d:	68 a8 0f 03 c0       	push   0xc0030fa8
c001e042:	e8 b9 a3 00 00       	call   c0028400 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	83 ec 04             	sub    esp,0x4
c001e04d:	68 60 c9 02 c0       	push   0xc002c960
c001e052:	68 a8 0f 03 c0       	push   0xc0030fa8
c001e057:	68 c0 83 02 c0       	push   0xc00283c0
c001e05c:	e8 24 47 ff ff       	call   c0012785 <__cxa_atexit>
c001e061:	83 c4 10             	add    esp,0x10
c001e064:	83 ec 0c             	sub    esp,0xc
c001e067:	68 9c 0f 03 c0       	push   0xc0030f9c
c001e06c:	e8 8f a3 00 00       	call   c0028400 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e071:	83 c4 10             	add    esp,0x10
c001e074:	83 ec 04             	sub    esp,0x4
c001e077:	68 60 c9 02 c0       	push   0xc002c960
c001e07c:	68 9c 0f 03 c0       	push   0xc0030f9c
c001e081:	68 c0 83 02 c0       	push   0xc00283c0
c001e086:	e8 fa 46 ff ff       	call   c0012785 <__cxa_atexit>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	83 ec 0c             	sub    esp,0xc
c001e091:	68 90 0f 03 c0       	push   0xc0030f90
c001e096:	e8 65 a3 00 00       	call   c0028400 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e09b:	83 c4 10             	add    esp,0x10
c001e09e:	83 ec 04             	sub    esp,0x4
c001e0a1:	68 60 c9 02 c0       	push   0xc002c960
c001e0a6:	68 90 0f 03 c0       	push   0xc0030f90
c001e0ab:	68 c0 83 02 c0       	push   0xc00283c0
c001e0b0:	e8 d0 46 ff ff       	call   c0012785 <__cxa_atexit>
c001e0b5:	83 c4 10             	add    esp,0x10
c001e0b8:	90                   	nop
c001e0b9:	83 c4 0c             	add    esp,0xc
c001e0bc:	c3                   	ret    

c001e0bd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	83 ec 08             	sub    esp,0x8
c001e0c3:	68 ff ff 00 00       	push   0xffff
c001e0c8:	6a 01                	push   0x1
c001e0ca:	e8 53 ff ff ff       	call   c001e022 <__static_initialization_and_destruction_0(int, int)>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	83 c4 0c             	add    esp,0xc
c001e0d5:	c3                   	ret    

c001e0d6 <Vm::inbv(unsigned short)>:
c001e0d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e0da:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e0df:	75 06                	jne    c001e0e7 <Vm::inbv(unsigned short)+0x11>
c001e0e1:	a0 ec 0f 03 c0       	mov    al,ds:0xc0030fec
c001e0e6:	c3                   	ret    
c001e0e7:	ec                   	in     al,dx
c001e0e8:	c3                   	ret    

c001e0e9 <Vm::outbv(unsigned short, unsigned char)>:
c001e0e9:	53                   	push   ebx
c001e0ea:	83 ec 08             	sub    esp,0x8
c001e0ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e0f5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e0fa:	75 38                	jne    c001e134 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e0fc:	0f b6 c3             	movzx  eax,bl
c001e0ff:	51                   	push   ecx
c001e100:	51                   	push   ecx
c001e101:	50                   	push   eax
c001e102:	68 8f bb 02 c0       	push   0xc002bb8f
c001e107:	e8 df 47 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e10c:	8b 15 ec 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fec
c001e112:	83 c4 10             	add    esp,0x10
c001e115:	8d 42 01             	lea    eax,[edx+0x1]
c001e118:	88 9a 00 10 03 c0    	mov    BYTE PTR [edx-0x3ffcf000],bl
c001e11e:	a3 ec 0f 03 c0       	mov    ds:0xc0030fec,eax
c001e123:	83 f8 20             	cmp    eax,0x20
c001e126:	75 0f                	jne    c001e137 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e128:	c7 05 ec 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x1f
c001e132:	eb 03                	jmp    c001e137 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e134:	88 d8                	mov    al,bl
c001e136:	ee                   	out    dx,al
c001e137:	83 c4 08             	add    esp,0x8
c001e13a:	5b                   	pop    ebx
c001e13b:	c3                   	ret    

c001e13c <Vm::realToLinear(unsigned short, unsigned short)>:
c001e13c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e141:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e146:	c1 e0 04             	shl    eax,0x4
c001e149:	01 d0                	add    eax,edx
c001e14b:	c3                   	ret    

c001e14c <Vm::getSegment(unsigned int)>:
c001e14c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e150:	c1 e8 10             	shr    eax,0x10
c001e153:	c3                   	ret    

c001e154 <Vm::getOffset(unsigned int)>:
c001e154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e158:	c3                   	ret    

c001e159 <Vm::mainloop2()>:
c001e159:	83 ec 0c             	sub    esp,0xc
c001e15c:	e8 59 f3 ff ff       	call   c001d4ba <lockScheduler()>
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	c6 05 e5 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fe5,0x1
c001e16b:	6a 02                	push   0x2
c001e16d:	e8 9c f7 ff ff       	call   c001d90e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e172:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e177:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e17b:	52                   	push   edx
c001e17c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e180:	52                   	push   edx
c001e181:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e185:	52                   	push   edx
c001e186:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e18a:	50                   	push   eax
c001e18b:	e8 6a 21 fe ff       	call   c00002fa <goToVM86>
c001e190:	83 c4 2c             	add    esp,0x2c
c001e193:	c3                   	ret    

c001e194 <Vm::mainVm8086Loop(void*)>:
c001e194:	83 ec 0c             	sub    esp,0xc
c001e197:	e8 20 f3 ff ff       	call   c001d4bc <unlockScheduler()>
c001e19c:	83 c4 0c             	add    esp,0xc
c001e19f:	eb b8                	jmp    c001e159 <Vm::mainloop2()>

c001e1a1 <Vm::mainloop3(unsigned long)>:
c001e1a1:	53                   	push   ebx
c001e1a2:	83 ec 08             	sub    esp,0x8
c001e1a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1a9:	e8 0c f3 ff ff       	call   c001d4ba <lockScheduler()>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	89 1d e0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe0,ebx
c001e1b7:	6a 02                	push   0x2
c001e1b9:	c6 05 e4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fe4,0x1
c001e1c0:	e8 49 f7 ff ff       	call   c001d90e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1c5:	83 c4 18             	add    esp,0x18
c001e1c8:	5b                   	pop    ebx
c001e1c9:	eb 8e                	jmp    c001e159 <Vm::mainloop2()>

c001e1cb <Vm::initialise8086()>:
c001e1cb:	83 ec 0c             	sub    esp,0xc
c001e1ce:	68 80 00 00 00       	push   0x80
c001e1d3:	6a 00                	push   0x0
c001e1d5:	68 94 e1 01 c0       	push   0xc001e194
c001e1da:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c001e1e0:	e8 07 f4 ff ff       	call   c001d5ec <Process::createThread(void (*)(void*), void*, int)>
c001e1e5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e1ec:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c001e1f1:	68 00 01 00 00       	push   0x100
c001e1f6:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001e1fb:	6a 00                	push   0x0
c001e1fd:	6a 00                	push   0x0
c001e1ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e205:	e8 b0 40 ff ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e20a:	83 c4 2c             	add    esp,0x2c
c001e20d:	c3                   	ret    

c001e20e <Vm::finish8086()>:
c001e20e:	53                   	push   ebx
c001e20f:	83 ec 08             	sub    esp,0x8
c001e212:	e8 a3 f2 ff ff       	call   c001d4ba <lockScheduler()>
c001e217:	80 3d e4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fe4,0x0
c001e21e:	75 0c                	jne    c001e22c <Vm::finish8086()+0x1e>
c001e220:	e8 d1 f5 ff ff       	call   c001d7f6 <schedule()>
c001e225:	e8 92 f2 ff ff       	call   c001d4bc <unlockScheduler()>
c001e22a:	eb e6                	jmp    c001e212 <Vm::finish8086()+0x4>
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	8b 1d e0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fe0
c001e235:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001e23b:	c6 05 e4 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fe4,0x0
c001e242:	e8 8b f8 ff ff       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c001e247:	e8 70 f2 ff ff       	call   c001d4bc <unlockScheduler()>
c001e24c:	89 d8                	mov    eax,ebx
c001e24e:	83 c4 18             	add    esp,0x18
c001e251:	5b                   	pop    ebx
c001e252:	c3                   	ret    

c001e253 <Vm::getOutput8086(unsigned char*)>:
c001e253:	83 ec 10             	sub    esp,0x10
c001e256:	ff 35 ec 0f 03 c0    	push   DWORD PTR ds:0xc0030fec
c001e25c:	68 00 10 03 c0       	push   0xc0031000
c001e261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e265:	e8 36 24 fe ff       	call   c00006a0 <memcpy>
c001e26a:	a1 ec 0f 03 c0       	mov    eax,ds:0xc0030fec
c001e26f:	c7 05 ec 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x0
c001e279:	83 c4 1c             	add    esp,0x1c
c001e27c:	c3                   	ret    

c001e27d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e27d:	55                   	push   ebp
c001e27e:	57                   	push   edi
c001e27f:	56                   	push   esi
c001e280:	53                   	push   ebx
c001e281:	83 ec 2c             	sub    esp,0x2c
c001e284:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e288:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e28c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e290:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e294:	e8 21 f2 ff ff       	call   c001d4ba <lockScheduler()>
c001e299:	a0 e5 0f 03 c0       	mov    al,ds:0xc0030fe5
c001e29e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2a2:	84 c0                	test   al,al
c001e2a4:	75 0c                	jne    c001e2b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e2a6:	e8 4b f5 ff ff       	call   c001d7f6 <schedule()>
c001e2ab:	e8 0c f2 ff ff       	call   c001d4bc <unlockScheduler()>
c001e2b0:	eb e2                	jmp    c001e294 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e2b2:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001e2b7:	c7 05 ec 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x0
c001e2c1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e2c5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e2c9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e2cd:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e2d1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e2d5:	50                   	push   eax
c001e2d6:	6a 20                	push   0x20
c001e2d8:	6a 00                	push   0x0
c001e2da:	68 00 10 03 c0       	push   0xc0031000
c001e2df:	e8 d8 23 fe ff       	call   c00006bc <memset>
c001e2e4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e2eb:	e8 2c 13 ff ff       	call   c000f61c <malloc>
c001e2f0:	83 c4 0c             	add    esp,0xc
c001e2f3:	89 c7                	mov    edi,eax
c001e2f5:	ff 35 b4 0f 03 c0    	push   DWORD PTR ds:0xc0030fb4
c001e2fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e2ff:	50                   	push   eax
c001e300:	e8 3f 4b ff ff       	call   c0012e44 <File::File(char const*, Process*)>
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	85 ff                	test   edi,edi
c001e30a:	75 0a                	jne    c001e316 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	68 ab bb 02 c0       	push   0xc002bbab
c001e314:	eb 27                	jmp    c001e33d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e316:	50                   	push   eax
c001e317:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e31b:	50                   	push   eax
c001e31c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e320:	50                   	push   eax
c001e321:	57                   	push   edi
c001e322:	e8 2d 4e ff ff       	call   c0013154 <File::stat(unsigned long long*, bool*)>
c001e327:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e32c:	83 c4 10             	add    esp,0x10
c001e32f:	89 e8                	mov    eax,ebp
c001e331:	84 c0                	test   al,al
c001e333:	74 19                	je     c001e34e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e335:	83 ec 0c             	sub    esp,0xc
c001e338:	68 bf bb 02 c0       	push   0xc002bbbf
c001e33d:	e8 1d bb ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001e342:	31 ed                	xor    ebp,ebp
c001e344:	e8 73 f1 ff ff       	call   c001d4bc <unlockScheduler()>
c001e349:	83 c4 10             	add    esp,0x10
c001e34c:	eb 75                	jmp    c001e3c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e34e:	50                   	push   eax
c001e34f:	50                   	push   eax
c001e350:	6a 01                	push   0x1
c001e352:	57                   	push   edi
c001e353:	e8 50 4b ff ff       	call   c0012ea8 <File::open(FileOpenMode)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	85 c0                	test   eax,eax
c001e35d:	74 17                	je     c001e376 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e35f:	83 ec 0c             	sub    esp,0xc
c001e362:	68 d8 bb 02 c0       	push   0xc002bbd8
c001e367:	e8 f3 ba ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001e36c:	e8 4b f1 ff ff       	call   c001d4bc <unlockScheduler()>
c001e371:	83 c4 10             	add    esp,0x10
c001e374:	eb 4d                	jmp    c001e3c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e376:	0f b7 f6             	movzx  esi,si
c001e379:	50                   	push   eax
c001e37a:	0f b7 db             	movzx  ebx,bx
c001e37d:	50                   	push   eax
c001e37e:	56                   	push   esi
c001e37f:	53                   	push   ebx
c001e380:	e8 b7 fd ff ff       	call   c001e13c <Vm::realToLinear(unsigned short, unsigned short)>
c001e385:	5a                   	pop    edx
c001e386:	8b 17                	mov    edx,DWORD PTR [edi]
c001e388:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e38c:	51                   	push   ecx
c001e38d:	50                   	push   eax
c001e38e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e392:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e396:	57                   	push   edi
c001e397:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e39a:	83 c4 14             	add    esp,0x14
c001e39d:	57                   	push   edi
c001e39e:	e8 63 4b ff ff       	call   c0012f06 <File::close()>
c001e3a3:	c6 05 e5 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fe5,0x0
c001e3aa:	e8 0d f1 ff ff       	call   c001d4bc <unlockScheduler()>
c001e3af:	59                   	pop    ecx
c001e3b0:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001e3b6:	e8 17 f7 ff ff       	call   c001dad2 <unblockTask(ThreadControlBlock*)>
c001e3bb:	83 c4 10             	add    esp,0x10
c001e3be:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e3c3:	83 c4 2c             	add    esp,0x2c
c001e3c6:	89 e8                	mov    eax,ebp
c001e3c8:	5b                   	pop    ebx
c001e3c9:	5e                   	pop    esi
c001e3ca:	5f                   	pop    edi
c001e3cb:	5d                   	pop    ebp
c001e3cc:	c3                   	ret    

c001e3cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e3cd:	57                   	push   edi
c001e3ce:	56                   	push   esi
c001e3cf:	53                   	push   ebx
c001e3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3dc:	83 e8 06             	sub    eax,0x6
c001e3df:	0f b7 c0             	movzx  eax,ax
c001e3e2:	50                   	push   eax
c001e3e3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e3e8:	50                   	push   eax
c001e3e9:	e8 4e fd ff ff       	call   c001e13c <Vm::realToLinear(unsigned short, unsigned short)>
c001e3ee:	5a                   	pop    edx
c001e3ef:	5e                   	pop    esi
c001e3f0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e3f3:	8d 56 fa             	lea    edx,[esi-0x6]
c001e3f6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e3fc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e3ff:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e402:	83 c2 02             	add    edx,0x2
c001e405:	66 89 10             	mov    WORD PTR [eax],dx
c001e408:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e40b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e40f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e412:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e416:	89 d6                	mov    esi,edx
c001e418:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e41e:	66 81 e6 ff fd       	and    si,0xfdff
c001e423:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e427:	74 07                	je     c001e430 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e429:	89 d6                	mov    esi,edx
c001e42b:	66 81 ce 00 02       	or     si,0x200
c001e430:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e439:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e43d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e445:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e448:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e450:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e453:	5b                   	pop    ebx
c001e454:	5e                   	pop    esi
c001e455:	5f                   	pop    edi
c001e456:	c3                   	ret    

c001e457 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e457:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e45c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e461:	c1 e0 04             	shl    eax,0x4
c001e464:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e467:	c3                   	ret    

c001e468 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e468:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e46d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e472:	c1 e0 04             	shl    eax,0x4
c001e475:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e479:	c3                   	ret    

c001e47a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e47a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e47f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e484:	c1 e0 04             	shl    eax,0x4
c001e487:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e48a:	c3                   	ret    

c001e48b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e48b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e490:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e495:	c1 e0 04             	shl    eax,0x4
c001e498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e49c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e49f:	c3                   	ret    

c001e4a0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e4a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4aa:	c1 e0 04             	shl    eax,0x4
c001e4ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4b1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e4b5:	c3                   	ret    

c001e4b6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e4b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4c0:	c1 e0 04             	shl    eax,0x4
c001e4c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4c7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e4ca:	c3                   	ret    

c001e4cb <Vm::faultHandler(regs*)>:
c001e4cb:	55                   	push   ebp
c001e4cc:	57                   	push   edi
c001e4cd:	56                   	push   esi
c001e4ce:	53                   	push   ebx
c001e4cf:	83 ec 1c             	sub    esp,0x1c
c001e4d2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4d6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e4d9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e4dc:	0f b7 c1             	movzx  eax,cx
c001e4df:	50                   	push   eax
c001e4e0:	0f b7 c3             	movzx  eax,bx
c001e4e3:	c1 e3 04             	shl    ebx,0x4
c001e4e6:	50                   	push   eax
c001e4e7:	e8 50 fc ff ff       	call   c001e13c <Vm::realToLinear(unsigned short, unsigned short)>
c001e4ec:	5a                   	pop    edx
c001e4ed:	89 c5                	mov    ebp,eax
c001e4ef:	5e                   	pop    esi
c001e4f0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e4f4:	50                   	push   eax
c001e4f5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e4f9:	50                   	push   eax
c001e4fa:	e8 3d fc ff ff       	call   c001e13c <Vm::realToLinear(unsigned short, unsigned short)>
c001e4ff:	01 cb                	add    ebx,ecx
c001e501:	89 c6                	mov    esi,eax
c001e503:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e507:	50                   	push   eax
c001e508:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e50c:	50                   	push   eax
c001e50d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e511:	50                   	push   eax
c001e512:	55                   	push   ebp
c001e513:	53                   	push   ebx
c001e514:	b3 06                	mov    bl,0x6
c001e516:	68 f1 bb 02 c0       	push   0xc002bbf1
c001e51b:	e8 cb 43 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e520:	83 c4 20             	add    esp,0x20
c001e523:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e528:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e52d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e531:	3c 9d                	cmp    al,0x9d
c001e533:	0f 84 d7 02 00 00    	je     c001e810 <Vm::faultHandler(regs*)+0x345>
c001e539:	0f 87 a3 00 00 00    	ja     c001e5e2 <Vm::faultHandler(regs*)+0x117>
c001e53f:	3c 66                	cmp    al,0x66
c001e541:	0f 84 15 02 00 00    	je     c001e75c <Vm::faultHandler(regs*)+0x291>
c001e547:	77 5f                	ja     c001e5a8 <Vm::faultHandler(regs*)+0xdd>
c001e549:	3c 36                	cmp    al,0x36
c001e54b:	0f 84 f1 01 00 00    	je     c001e742 <Vm::faultHandler(regs*)+0x277>
c001e551:	77 28                	ja     c001e57b <Vm::faultHandler(regs*)+0xb0>
c001e553:	3c 26                	cmp    al,0x26
c001e555:	0f 84 99 01 00 00    	je     c001e6f4 <Vm::faultHandler(regs*)+0x229>
c001e55b:	3c 2e                	cmp    al,0x2e
c001e55d:	0f 85 3b 07 00 00    	jne    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e563:	83 ec 0c             	sub    esp,0xc
c001e566:	31 db                	xor    ebx,ebx
c001e568:	68 06 bc 02 c0       	push   0xc002bc06
c001e56d:	e8 79 43 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e572:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e575:	83 c4 10             	add    esp,0x10
c001e578:	45                   	inc    ebp
c001e579:	eb b2                	jmp    c001e52d <Vm::faultHandler(regs*)+0x62>
c001e57b:	3c 64                	cmp    al,0x64
c001e57d:	0f 84 8b 01 00 00    	je     c001e70e <Vm::faultHandler(regs*)+0x243>
c001e583:	0f 87 9f 01 00 00    	ja     c001e728 <Vm::faultHandler(regs*)+0x25d>
c001e589:	3c 3e                	cmp    al,0x3e
c001e58b:	0f 85 0d 07 00 00    	jne    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e591:	83 ec 0c             	sub    esp,0xc
c001e594:	b3 01                	mov    bl,0x1
c001e596:	68 0a bc 02 c0       	push   0xc002bc0a
c001e59b:	e8 4b 43 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e5a0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e5a3:	83 c4 10             	add    esp,0x10
c001e5a6:	eb d0                	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e5a8:	3c 6d                	cmp    al,0x6d
c001e5aa:	0f 84 af 03 00 00    	je     c001e95f <Vm::faultHandler(regs*)+0x494>
c001e5b0:	77 15                	ja     c001e5c7 <Vm::faultHandler(regs*)+0xfc>
c001e5b2:	3c 67                	cmp    al,0x67
c001e5b4:	0f 84 bf 01 00 00    	je     c001e779 <Vm::faultHandler(regs*)+0x2ae>
c001e5ba:	3c 6c                	cmp    al,0x6c
c001e5bc:	0f 84 3f 03 00 00    	je     c001e901 <Vm::faultHandler(regs*)+0x436>
c001e5c2:	e9 d7 06 00 00       	jmp    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e5c7:	3c 6f                	cmp    al,0x6f
c001e5c9:	0f 84 a4 04 00 00    	je     c001ea73 <Vm::faultHandler(regs*)+0x5a8>
c001e5cf:	0f 82 11 04 00 00    	jb     c001e9e6 <Vm::faultHandler(regs*)+0x51b>
c001e5d5:	3c 9c                	cmp    al,0x9c
c001e5d7:	0f 84 ba 01 00 00    	je     c001e797 <Vm::faultHandler(regs*)+0x2cc>
c001e5dd:	e9 bc 06 00 00       	jmp    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e5e2:	3c ec                	cmp    al,0xec
c001e5e4:	0f 84 24 06 00 00    	je     c001ec0e <Vm::faultHandler(regs*)+0x743>
c001e5ea:	0f 87 93 00 00 00    	ja     c001e683 <Vm::faultHandler(regs*)+0x1b8>
c001e5f0:	3c e4                	cmp    al,0xe4
c001e5f2:	0f 84 5c 05 00 00    	je     c001eb54 <Vm::faultHandler(regs*)+0x689>
c001e5f8:	77 6a                	ja     c001e664 <Vm::faultHandler(regs*)+0x199>
c001e5fa:	3c cd                	cmp    al,0xcd
c001e5fc:	0f 84 7e 02 00 00    	je     c001e880 <Vm::faultHandler(regs*)+0x3b5>
c001e602:	3c cf                	cmp    al,0xcf
c001e604:	0f 85 94 06 00 00    	jne    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	68 4e bc 02 c0       	push   0xc002bc4e
c001e612:	e8 d4 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e617:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e61a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e61d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e621:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e624:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e628:	0d 00 02 02 00       	or     eax,0x20200
c001e62d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e630:	56                   	push   esi
c001e631:	53                   	push   ebx
c001e632:	52                   	push   edx
c001e633:	68 54 bc 02 c0       	push   0xc002bc54
c001e638:	e8 ae 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e63d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e641:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e647:	66 c1 e8 09          	shr    ax,0x9
c001e64b:	83 e0 01             	and    eax,0x1
c001e64e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e651:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e654:	83 c0 06             	add    eax,0x6
c001e657:	25 ff ff 00 00       	and    eax,0xffff
c001e65c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e65f:	e9 95 02 00 00       	jmp    c001e8f9 <Vm::faultHandler(regs*)+0x42e>
c001e664:	3c e6                	cmp    al,0xe6
c001e666:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e66a:	0f 84 4e 05 00 00    	je     c001ebbe <Vm::faultHandler(regs*)+0x6f3>
c001e670:	0f 82 0a 05 00 00    	jb     c001eb80 <Vm::faultHandler(regs*)+0x6b5>
c001e676:	3c e7                	cmp    al,0xe7
c001e678:	0f 84 69 05 00 00    	je     c001ebe7 <Vm::faultHandler(regs*)+0x71c>
c001e67e:	e9 1b 06 00 00       	jmp    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e683:	3c ef                	cmp    al,0xef
c001e685:	0f 84 e6 05 00 00    	je     c001ec71 <Vm::faultHandler(regs*)+0x7a6>
c001e68b:	77 37                	ja     c001e6c4 <Vm::faultHandler(regs*)+0x1f9>
c001e68d:	3c ed                	cmp    al,0xed
c001e68f:	0f 84 a3 05 00 00    	je     c001ec38 <Vm::faultHandler(regs*)+0x76d>
c001e695:	3c ee                	cmp    al,0xee
c001e697:	0f 85 01 06 00 00    	jne    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e69d:	52                   	push   edx
c001e69e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e6a1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6a4:	68 ef bc 02 c0       	push   0xc002bcef
c001e6a9:	e8 3d 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e6ae:	59                   	pop    ecx
c001e6af:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e6b3:	5b                   	pop    ebx
c001e6b4:	50                   	push   eax
c001e6b5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6b9:	50                   	push   eax
c001e6ba:	e8 2a fa ff ff       	call   c001e0e9 <Vm::outbv(unsigned short, unsigned char)>
c001e6bf:	e9 a5 05 00 00       	jmp    c001ec69 <Vm::faultHandler(regs*)+0x79e>
c001e6c4:	3c fa                	cmp    al,0xfa
c001e6c6:	0f 84 f7 01 00 00    	je     c001e8c3 <Vm::faultHandler(regs*)+0x3f8>
c001e6cc:	3c fb                	cmp    al,0xfb
c001e6ce:	0f 84 0a 02 00 00    	je     c001e8de <Vm::faultHandler(regs*)+0x413>
c001e6d4:	3c f3                	cmp    al,0xf3
c001e6d6:	0f 85 c2 05 00 00    	jne    c001ec9e <Vm::faultHandler(regs*)+0x7d3>
c001e6dc:	83 ec 0c             	sub    esp,0xc
c001e6df:	68 27 bc 02 c0       	push   0xc002bc27
c001e6e4:	e8 02 42 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e6e9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e6ec:	83 c4 10             	add    esp,0x10
c001e6ef:	e9 84 fe ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e6f4:	83 ec 0c             	sub    esp,0xc
c001e6f7:	b3 02                	mov    bl,0x2
c001e6f9:	68 02 bc 02 c0       	push   0xc002bc02
c001e6fe:	e8 e8 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e703:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e706:	83 c4 10             	add    esp,0x10
c001e709:	e9 6a fe ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	b3 03                	mov    bl,0x3
c001e713:	68 0e bc 02 c0       	push   0xc002bc0e
c001e718:	e8 ce 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e71d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	e9 50 fe ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e728:	83 ec 0c             	sub    esp,0xc
c001e72b:	b3 04                	mov    bl,0x4
c001e72d:	68 12 bc 02 c0       	push   0xc002bc12
c001e732:	e8 b4 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e737:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e73a:	83 c4 10             	add    esp,0x10
c001e73d:	e9 36 fe ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	b3 05                	mov    bl,0x5
c001e747:	68 16 bc 02 c0       	push   0xc002bc16
c001e74c:	e8 9a 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e751:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e754:	83 c4 10             	add    esp,0x10
c001e757:	e9 1c fe ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	68 1a bc 02 c0       	push   0xc002bc1a
c001e764:	e8 82 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e76f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e774:	e9 ff fd ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e779:	50                   	push   eax
c001e77a:	50                   	push   eax
c001e77b:	6a 01                	push   0x1
c001e77d:	68 1f bc 02 c0       	push   0xc002bc1f
c001e782:	e8 64 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e787:	83 c4 10             	add    esp,0x10
c001e78a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e78d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e792:	e9 e1 fd ff ff       	jmp    c001e578 <Vm::faultHandler(regs*)+0xad>
c001e797:	83 ec 0c             	sub    esp,0xc
c001e79a:	68 2d bc 02 c0       	push   0xc002bc2d
c001e79f:	e8 47 41 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e7a4:	83 c4 10             	add    esp,0x10
c001e7a7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e7aa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7af:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e7b2:	74 2f                	je     c001e7e3 <Vm::faultHandler(regs*)+0x318>
c001e7b4:	83 ea 04             	sub    edx,0x4
c001e7b7:	25 ff 0d 00 00       	and    eax,0xdff
c001e7bc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7c2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7c5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7ce:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e7d2:	0f 84 bf 04 00 00    	je     c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001e7d8:	80 cc 02             	or     ah,0x2
c001e7db:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7de:	e9 b4 04 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001e7e3:	83 ea 02             	sub    edx,0x2
c001e7e6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7ec:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7ef:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e7f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7f9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e7fd:	74 05                	je     c001e804 <Vm::faultHandler(regs*)+0x339>
c001e7ff:	80 cc 02             	or     ah,0x2
c001e802:	eb 03                	jmp    c001e807 <Vm::faultHandler(regs*)+0x33c>
c001e804:	80 e4 fd             	and    ah,0xfd
c001e807:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e80b:	e9 87 04 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	68 34 bc 02 c0       	push   0xc002bc34
c001e818:	e8 ce 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e825:	74 28                	je     c001e84f <Vm::faultHandler(regs*)+0x384>
c001e827:	8b 06                	mov    eax,DWORD PTR [esi]
c001e829:	25 ff 0d 00 00       	and    eax,0xdff
c001e82e:	0d 00 02 02 00       	or     eax,0x20200
c001e833:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e836:	8b 06                	mov    eax,DWORD PTR [esi]
c001e838:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e83e:	c1 e8 09             	shr    eax,0x9
c001e841:	83 e0 01             	and    eax,0x1
c001e844:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e847:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e84a:	83 c0 04             	add    eax,0x4
c001e84d:	eb 24                	jmp    c001e873 <Vm::faultHandler(regs*)+0x3a8>
c001e84f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e852:	0d 00 02 02 00       	or     eax,0x20200
c001e857:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e85a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e85d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e863:	66 c1 e8 09          	shr    ax,0x9
c001e867:	83 e0 01             	and    eax,0x1
c001e86a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e86d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e870:	83 c0 02             	add    eax,0x2
c001e873:	25 ff ff 00 00       	and    eax,0xffff
c001e878:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e87b:	e9 17 04 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001e880:	53                   	push   ebx
c001e881:	53                   	push   ebx
c001e882:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e886:	50                   	push   eax
c001e887:	68 3a bc 02 c0       	push   0xc002bc3a
c001e88c:	e8 5a 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e891:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	3c ee                	cmp    al,0xee
c001e89a:	75 10                	jne    c001e8ac <Vm::faultHandler(regs*)+0x3e1>
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e8a2:	e8 fa f8 ff ff       	call   c001e1a1 <Vm::mainloop3(unsigned long)>
c001e8a7:	e9 c0 03 00 00       	jmp    c001ec6c <Vm::faultHandler(regs*)+0x7a1>
c001e8ac:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	53                   	push   ebx
c001e8b4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e8b8:	53                   	push   ebx
c001e8b9:	55                   	push   ebp
c001e8ba:	50                   	push   eax
c001e8bb:	57                   	push   edi
c001e8bc:	e8 0c fb ff ff       	call   c001e3cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e8c1:	eb 36                	jmp    c001e8f9 <Vm::faultHandler(regs*)+0x42e>
c001e8c3:	83 ec 0c             	sub    esp,0xc
c001e8c6:	68 44 bc 02 c0       	push   0xc002bc44
c001e8cb:	e8 1b 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e8d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e8d9:	e9 8b 03 00 00       	jmp    c001ec69 <Vm::faultHandler(regs*)+0x79e>
c001e8de:	83 ec 0c             	sub    esp,0xc
c001e8e1:	68 49 bc 02 c0       	push   0xc002bc49
c001e8e6:	e8 00 40 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e8eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e8f4:	e9 70 03 00 00       	jmp    c001ec69 <Vm::faultHandler(regs*)+0x79e>
c001e8f9:	83 c4 20             	add    esp,0x20
c001e8fc:	e9 99 03 00 00       	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7cf>
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	68 87 bc 02 c0       	push   0xc002bc87
c001e909:	e8 dd 3f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e90e:	83 c4 10             	add    esp,0x10
c001e911:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e914:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e919:	74 0d                	je     c001e928 <Vm::faultHandler(regs*)+0x45d>
c001e91b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e922:	0f 87 9e 01 00 00    	ja     c001eac6 <Vm::faultHandler(regs*)+0x5fb>
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e92f:	0f b7 db             	movzx  ebx,bx
c001e932:	50                   	push   eax
c001e933:	e8 9e f7 ff ff       	call   c001e0d6 <Vm::inbv(unsigned short)>
c001e938:	83 c4 0c             	add    esp,0xc
c001e93b:	0f b6 c0             	movzx  eax,al
c001e93e:	50                   	push   eax
c001e93f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e943:	50                   	push   eax
c001e944:	53                   	push   ebx
c001e945:	e8 41 fb ff ff       	call   c001e48b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e950:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e954:	74 03                	je     c001e959 <Vm::faultHandler(regs*)+0x48e>
c001e956:	48                   	dec    eax
c001e957:	eb 01                	jmp    c001e95a <Vm::faultHandler(regs*)+0x48f>
c001e959:	40                   	inc    eax
c001e95a:	0f b7 c0             	movzx  eax,ax
c001e95d:	eb 7f                	jmp    c001e9de <Vm::faultHandler(regs*)+0x513>
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	68 b9 bc 02 c0       	push   0xc002bcb9
c001e967:	e8 7f 3f ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e972:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e977:	74 0d                	je     c001e986 <Vm::faultHandler(regs*)+0x4bb>
c001e979:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e980:	0f 87 40 01 00 00    	ja     c001eac6 <Vm::faultHandler(regs*)+0x5fb>
c001e986:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e989:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e98d:	0f b7 db             	movzx  ebx,bx
c001e990:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e995:	74 20                	je     c001e9b7 <Vm::faultHandler(regs*)+0x4ec>
c001e997:	ed                   	in     eax,dx
c001e998:	51                   	push   ecx
c001e999:	50                   	push   eax
c001e99a:	56                   	push   esi
c001e99b:	53                   	push   ebx
c001e99c:	e8 15 fb ff ff       	call   c001e4b6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9a7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9ab:	74 05                	je     c001e9b2 <Vm::faultHandler(regs*)+0x4e7>
c001e9ad:	83 e8 04             	sub    eax,0x4
c001e9b0:	eb 27                	jmp    c001e9d9 <Vm::faultHandler(regs*)+0x50e>
c001e9b2:	83 c0 04             	add    eax,0x4
c001e9b5:	eb 22                	jmp    c001e9d9 <Vm::faultHandler(regs*)+0x50e>
c001e9b7:	66 ed                	in     ax,dx
c001e9b9:	0f b7 c0             	movzx  eax,ax
c001e9bc:	52                   	push   edx
c001e9bd:	50                   	push   eax
c001e9be:	56                   	push   esi
c001e9bf:	53                   	push   ebx
c001e9c0:	e8 db fa ff ff       	call   c001e4a0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9cb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9cf:	74 05                	je     c001e9d6 <Vm::faultHandler(regs*)+0x50b>
c001e9d1:	83 e8 02             	sub    eax,0x2
c001e9d4:	eb 03                	jmp    c001e9d9 <Vm::faultHandler(regs*)+0x50e>
c001e9d6:	83 c0 02             	add    eax,0x2
c001e9d9:	25 ff ff 00 00       	and    eax,0xffff
c001e9de:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e9e1:	e9 b1 02 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	4b                   	dec    ebx
c001e9ea:	68 bf bc 02 c0       	push   0xc002bcbf
c001e9ef:	e8 f7 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001e9f4:	83 c4 10             	add    esp,0x10
c001e9f7:	80 fb 05             	cmp    bl,0x5
c001e9fa:	77 0a                	ja     c001ea06 <Vm::faultHandler(regs*)+0x53b>
c001e9fc:	0f b6 db             	movzx  ebx,bl
c001e9ff:	ff 24 9d 30 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd42d0]
c001ea06:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea0a:	eb 1b                	jmp    c001ea27 <Vm::faultHandler(regs*)+0x55c>
c001ea0c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea10:	eb 15                	jmp    c001ea27 <Vm::faultHandler(regs*)+0x55c>
c001ea12:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ea16:	eb 0f                	jmp    c001ea27 <Vm::faultHandler(regs*)+0x55c>
c001ea18:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ea1c:	eb 09                	jmp    c001ea27 <Vm::faultHandler(regs*)+0x55c>
c001ea1e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ea21:	eb 04                	jmp    c001ea27 <Vm::faultHandler(regs*)+0x55c>
c001ea23:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea27:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ea2c:	74 0d                	je     c001ea3b <Vm::faultHandler(regs*)+0x570>
c001ea2e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ea35:	0f 87 8b 00 00 00    	ja     c001eac6 <Vm::faultHandler(regs*)+0x5fb>
c001ea3b:	53                   	push   ebx
c001ea3c:	53                   	push   ebx
c001ea3d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ea41:	52                   	push   edx
c001ea42:	50                   	push   eax
c001ea43:	e8 0f fa ff ff       	call   c001e457 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ea48:	5e                   	pop    esi
c001ea49:	0f b6 c0             	movzx  eax,al
c001ea4c:	5d                   	pop    ebp
c001ea4d:	50                   	push   eax
c001ea4e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ea52:	50                   	push   eax
c001ea53:	e8 91 f6 ff ff       	call   c001e0e9 <Vm::outbv(unsigned short, unsigned char)>
c001ea58:	83 c4 10             	add    esp,0x10
c001ea5b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ea5e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ea62:	74 03                	je     c001ea67 <Vm::faultHandler(regs*)+0x59c>
c001ea64:	48                   	dec    eax
c001ea65:	eb 01                	jmp    c001ea68 <Vm::faultHandler(regs*)+0x59d>
c001ea67:	40                   	inc    eax
c001ea68:	0f b7 c0             	movzx  eax,ax
c001ea6b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ea6e:	e9 24 02 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001ea73:	83 ec 0c             	sub    esp,0xc
c001ea76:	4b                   	dec    ebx
c001ea77:	68 bf bc 02 c0       	push   0xc002bcbf
c001ea7c:	e8 6a 3e ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ea81:	83 c4 10             	add    esp,0x10
c001ea84:	80 fb 05             	cmp    bl,0x5
c001ea87:	77 0a                	ja     c001ea93 <Vm::faultHandler(regs*)+0x5c8>
c001ea89:	0f b6 db             	movzx  ebx,bl
c001ea8c:	ff 24 9d 48 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd42b8]
c001ea93:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea97:	eb 1b                	jmp    c001eab4 <Vm::faultHandler(regs*)+0x5e9>
c001ea99:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea9d:	eb 15                	jmp    c001eab4 <Vm::faultHandler(regs*)+0x5e9>
c001ea9f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001eaa3:	eb 0f                	jmp    c001eab4 <Vm::faultHandler(regs*)+0x5e9>
c001eaa5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001eaa9:	eb 09                	jmp    c001eab4 <Vm::faultHandler(regs*)+0x5e9>
c001eaab:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001eaae:	eb 04                	jmp    c001eab4 <Vm::faultHandler(regs*)+0x5e9>
c001eab0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eab4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001eab7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eabc:	74 39                	je     c001eaf7 <Vm::faultHandler(regs*)+0x62c>
c001eabe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001eac4:	76 31                	jbe    c001eaf7 <Vm::faultHandler(regs*)+0x62c>
c001eac6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eaca:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eace:	51                   	push   ecx
c001eacf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ead3:	51                   	push   ecx
c001ead4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ead8:	51                   	push   ecx
c001ead9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001eadd:	51                   	push   ecx
c001eade:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eae2:	52                   	push   edx
c001eae3:	50                   	push   eax
c001eae4:	50                   	push   eax
c001eae5:	68 8c bc 02 c0       	push   0xc002bc8c
c001eaea:	e8 fc 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eaef:	83 c4 20             	add    esp,0x20
c001eaf2:	e9 fb 01 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x827>
c001eaf7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001eafa:	0f b7 d3             	movzx  edx,bx
c001eafd:	81 e6 00 04 00 00    	and    esi,0x400
c001eb03:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001eb06:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb0b:	74 1d                	je     c001eb2a <Vm::faultHandler(regs*)+0x65f>
c001eb0d:	51                   	push   ecx
c001eb0e:	51                   	push   ecx
c001eb0f:	52                   	push   edx
c001eb10:	50                   	push   eax
c001eb11:	e8 64 f9 ff ff       	call   c001e47a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eb16:	83 c4 10             	add    esp,0x10
c001eb19:	89 ea                	mov    edx,ebp
c001eb1b:	ef                   	out    dx,eax
c001eb1c:	85 f6                	test   esi,esi
c001eb1e:	74 05                	je     c001eb25 <Vm::faultHandler(regs*)+0x65a>
c001eb20:	83 eb 04             	sub    ebx,0x4
c001eb23:	eb 21                	jmp    c001eb46 <Vm::faultHandler(regs*)+0x67b>
c001eb25:	83 c3 04             	add    ebx,0x4
c001eb28:	eb 1c                	jmp    c001eb46 <Vm::faultHandler(regs*)+0x67b>
c001eb2a:	51                   	push   ecx
c001eb2b:	51                   	push   ecx
c001eb2c:	52                   	push   edx
c001eb2d:	50                   	push   eax
c001eb2e:	e8 35 f9 ff ff       	call   c001e468 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	89 ea                	mov    edx,ebp
c001eb38:	66 ef                	out    dx,ax
c001eb3a:	85 f6                	test   esi,esi
c001eb3c:	74 05                	je     c001eb43 <Vm::faultHandler(regs*)+0x678>
c001eb3e:	83 eb 02             	sub    ebx,0x2
c001eb41:	eb 03                	jmp    c001eb46 <Vm::faultHandler(regs*)+0x67b>
c001eb43:	83 c3 02             	add    ebx,0x2
c001eb46:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001eb4c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eb4f:	e9 43 01 00 00       	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001eb54:	53                   	push   ebx
c001eb55:	53                   	push   ebx
c001eb56:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb5a:	50                   	push   eax
c001eb5b:	68 c5 bc 02 c0       	push   0xc002bcc5
c001eb60:	e8 86 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eb65:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001eb6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb70:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb73:	e8 5e f5 ff ff       	call   c001e0d6 <Vm::inbv(unsigned short)>
c001eb78:	0f b6 c0             	movzx  eax,al
c001eb7b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001eb7e:	eb 5e                	jmp    c001ebde <Vm::faultHandler(regs*)+0x713>
c001eb80:	51                   	push   ecx
c001eb81:	51                   	push   ecx
c001eb82:	53                   	push   ebx
c001eb83:	68 cb bc 02 c0       	push   0xc002bccb
c001eb88:	e8 5e 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001eb8d:	83 c4 10             	add    esp,0x10
c001eb90:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb95:	74 07                	je     c001eb9e <Vm::faultHandler(regs*)+0x6d3>
c001eb97:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eb9b:	ed                   	in     eax,dx
c001eb9c:	eb 14                	jmp    c001ebb2 <Vm::faultHandler(regs*)+0x6e7>
c001eb9e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001eba1:	66 31 db             	xor    bx,bx
c001eba4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001eba7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebab:	66 ed                	in     ax,dx
c001ebad:	0f b7 c0             	movzx  eax,ax
c001ebb0:	09 d8                	or     eax,ebx
c001ebb2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ebb5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebb9:	e9 dc 00 00 00       	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7cf>
c001ebbe:	50                   	push   eax
c001ebbf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebc2:	53                   	push   ebx
c001ebc3:	68 d1 bc 02 c0       	push   0xc002bcd1
c001ebc8:	e8 1e 3d ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ebcd:	58                   	pop    eax
c001ebce:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ebd2:	5a                   	pop    edx
c001ebd3:	50                   	push   eax
c001ebd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebd8:	50                   	push   eax
c001ebd9:	e8 0b f5 ff ff       	call   c001e0e9 <Vm::outbv(unsigned short, unsigned char)>
c001ebde:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebe2:	e9 85 00 00 00       	jmp    c001ec6c <Vm::faultHandler(regs*)+0x7a1>
c001ebe7:	50                   	push   eax
c001ebe8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebeb:	53                   	push   ebx
c001ebec:	68 da bc 02 c0       	push   0xc002bcda
c001ebf1:	e8 f5 3c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ebf6:	83 c4 10             	add    esp,0x10
c001ebf9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebfd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec02:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec05:	74 03                	je     c001ec0a <Vm::faultHandler(regs*)+0x73f>
c001ec07:	ef                   	out    dx,eax
c001ec08:	eb ab                	jmp    c001ebb5 <Vm::faultHandler(regs*)+0x6ea>
c001ec0a:	66 ef                	out    dx,ax
c001ec0c:	eb a7                	jmp    c001ebb5 <Vm::faultHandler(regs*)+0x6ea>
c001ec0e:	55                   	push   ebp
c001ec0f:	55                   	push   ebp
c001ec10:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec13:	68 e3 bc 02 c0       	push   0xc002bce3
c001ec18:	e8 ce 3c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ec1d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ec24:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec28:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec2b:	e8 a6 f4 ff ff       	call   c001e0d6 <Vm::inbv(unsigned short)>
c001ec30:	0f b6 c0             	movzx  eax,al
c001ec33:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ec36:	eb 31                	jmp    c001ec69 <Vm::faultHandler(regs*)+0x79e>
c001ec38:	56                   	push   esi
c001ec39:	56                   	push   esi
c001ec3a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec3d:	68 e9 bc 02 c0       	push   0xc002bce9
c001ec42:	e8 a4 3c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ec47:	83 c4 10             	add    esp,0x10
c001ec4a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec4d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec52:	74 03                	je     c001ec57 <Vm::faultHandler(regs*)+0x78c>
c001ec54:	ed                   	in     eax,dx
c001ec55:	eb 0d                	jmp    c001ec64 <Vm::faultHandler(regs*)+0x799>
c001ec57:	66 ed                	in     ax,dx
c001ec59:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ec5c:	0f b7 c0             	movzx  eax,ax
c001ec5f:	66 31 d2             	xor    dx,dx
c001ec62:	09 d0                	or     eax,edx
c001ec64:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ec67:	eb 2e                	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001ec69:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec6c:	83 c4 10             	add    esp,0x10
c001ec6f:	eb 29                	jmp    c001ec9a <Vm::faultHandler(regs*)+0x7cf>
c001ec71:	50                   	push   eax
c001ec72:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec75:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec78:	68 f8 bc 02 c0       	push   0xc002bcf8
c001ec7d:	e8 69 3c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec88:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec8d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec90:	74 03                	je     c001ec95 <Vm::faultHandler(regs*)+0x7ca>
c001ec92:	ef                   	out    dx,eax
c001ec93:	eb 02                	jmp    c001ec97 <Vm::faultHandler(regs*)+0x7cc>
c001ec95:	66 ef                	out    dx,ax
c001ec97:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec9a:	b0 01                	mov    al,0x1
c001ec9c:	eb 56                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x829>
c001ec9e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eca2:	51                   	push   ecx
c001eca3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eca7:	51                   	push   ecx
c001eca8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ecac:	51                   	push   ecx
c001ecad:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ecb1:	51                   	push   ecx
c001ecb2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ecb6:	52                   	push   edx
c001ecb7:	50                   	push   eax
c001ecb8:	50                   	push   eax
c001ecb9:	68 01 bd 02 c0       	push   0xc002bd01
c001ecbe:	e8 28 3c ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ecc3:	83 c4 20             	add    esp,0x20
c001ecc6:	83 ec 0c             	sub    esp,0xc
c001ecc9:	6a 60                	push   0x60
c001eccb:	e8 06 f4 ff ff       	call   c001e0d6 <Vm::inbv(unsigned short)>
c001ecd0:	83 c4 10             	add    esp,0x10
c001ecd3:	3c 1c                	cmp    al,0x1c
c001ecd5:	74 04                	je     c001ecdb <Vm::faultHandler(regs*)+0x810>
c001ecd7:	3c 5a                	cmp    al,0x5a
c001ecd9:	75 eb                	jne    c001ecc6 <Vm::faultHandler(regs*)+0x7fb>
c001ecdb:	3c 1c                	cmp    al,0x1c
c001ecdd:	74 04                	je     c001ece3 <Vm::faultHandler(regs*)+0x818>
c001ecdf:	3c 5a                	cmp    al,0x5a
c001ece1:	75 0f                	jne    c001ecf2 <Vm::faultHandler(regs*)+0x827>
c001ece3:	83 ec 0c             	sub    esp,0xc
c001ece6:	6a 60                	push   0x60
c001ece8:	e8 e9 f3 ff ff       	call   c001e0d6 <Vm::inbv(unsigned short)>
c001eced:	83 c4 10             	add    esp,0x10
c001ecf0:	eb e9                	jmp    c001ecdb <Vm::faultHandler(regs*)+0x810>
c001ecf2:	31 c0                	xor    eax,eax
c001ecf4:	83 c4 1c             	add    esp,0x1c
c001ecf7:	5b                   	pop    ebx
c001ecf8:	5e                   	pop    esi
c001ecf9:	5f                   	pop    edi
c001ecfa:	5d                   	pop    ebp
c001ecfb:	c3                   	ret    

c001ecfc <Vm::fpuInternalTo32(unsigned long long)>:
c001ecfc:	57                   	push   edi
c001ecfd:	56                   	push   esi
c001ecfe:	53                   	push   ebx
c001ecff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed07:	89 d6                	mov    esi,edx
c001ed09:	89 d7                	mov    edi,edx
c001ed0b:	89 c1                	mov    ecx,eax
c001ed0d:	c1 ef 14             	shr    edi,0x14
c001ed10:	89 d3                	mov    ebx,edx
c001ed12:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed18:	31 d2                	xor    edx,edx
c001ed1a:	89 f8                	mov    eax,edi
c001ed1c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed22:	bf ff 00 00 00       	mov    edi,0xff
c001ed27:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed2c:	83 d2 ff             	adc    edx,0xffffffff
c001ed2f:	39 c7                	cmp    edi,eax
c001ed31:	bf 00 00 00 00       	mov    edi,0x0
c001ed36:	19 d7                	sbb    edi,edx
c001ed38:	72 15                	jb     c001ed4f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed3a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed3e:	c1 e0 17             	shl    eax,0x17
c001ed41:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ed47:	09 f1                	or     ecx,esi
c001ed49:	09 c1                	or     ecx,eax
c001ed4b:	89 cf                	mov    edi,ecx
c001ed4d:	eb 02                	jmp    c001ed51 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ed4f:	31 ff                	xor    edi,edi
c001ed51:	89 f8                	mov    eax,edi
c001ed53:	5b                   	pop    ebx
c001ed54:	5e                   	pop    esi
c001ed55:	5f                   	pop    edi
c001ed56:	c3                   	ret    

c001ed57 <Vm::fpuInternalTo64(unsigned long long)>:
c001ed57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed5f:	c3                   	ret    

c001ed60 <Vm::fpu32ToInternal(unsigned int)>:
c001ed60:	57                   	push   edi
c001ed61:	31 ff                	xor    edi,edi
c001ed63:	56                   	push   esi
c001ed64:	53                   	push   ebx
c001ed65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed69:	89 cb                	mov    ebx,ecx
c001ed6b:	89 ce                	mov    esi,ecx
c001ed6d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ed73:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ed79:	c1 e9 17             	shr    ecx,0x17
c001ed7c:	89 f0                	mov    eax,esi
c001ed7e:	0f b6 d1             	movzx  edx,cl
c001ed81:	81 c2 80 03 00 00    	add    edx,0x380
c001ed87:	89 d1                	mov    ecx,edx
c001ed89:	89 fa                	mov    edx,edi
c001ed8b:	c1 e1 14             	shl    ecx,0x14
c001ed8e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ed92:	c1 e0 1d             	shl    eax,0x1d
c001ed95:	89 d7                	mov    edi,edx
c001ed97:	89 c6                	mov    esi,eax
c001ed99:	89 ca                	mov    edx,ecx
c001ed9b:	89 f0                	mov    eax,esi
c001ed9d:	09 fa                	or     edx,edi
c001ed9f:	09 da                	or     edx,ebx
c001eda1:	5b                   	pop    ebx
c001eda2:	5e                   	pop    esi
c001eda3:	5f                   	pop    edi
c001eda4:	c3                   	ret    

c001eda5 <Vm::fpu64ToInternal(unsigned long long)>:
c001eda5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eda9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edad:	c3                   	ret    

c001edae <Vm::fpuFloatToLong(unsigned long long)>:
c001edae:	57                   	push   edi
c001edaf:	31 c0                	xor    eax,eax
c001edb1:	56                   	push   esi
c001edb2:	31 d2                	xor    edx,edx
c001edb4:	53                   	push   ebx
c001edb5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edbd:	89 d9                	mov    ecx,ebx
c001edbf:	c1 e9 14             	shr    ecx,0x14
c001edc2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001edc8:	89 cf                	mov    edi,ecx
c001edca:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001edd0:	78 33                	js     c001ee05 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001edd2:	89 d9                	mov    ecx,ebx
c001edd4:	89 f0                	mov    eax,esi
c001edd6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eddc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ede2:	89 ca                	mov    edx,ecx
c001ede4:	b9 34 00 00 00       	mov    ecx,0x34
c001ede9:	29 f9                	sub    ecx,edi
c001edeb:	0f ad d0             	shrd   eax,edx,cl
c001edee:	d3 fa                	sar    edx,cl
c001edf0:	f6 c1 20             	test   cl,0x20
c001edf3:	74 05                	je     c001edfa <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001edf5:	89 d0                	mov    eax,edx
c001edf7:	c1 fa 1f             	sar    edx,0x1f
c001edfa:	85 db                	test   ebx,ebx
c001edfc:	79 07                	jns    c001ee05 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001edfe:	f7 d8                	neg    eax
c001ee00:	83 d2 00             	adc    edx,0x0
c001ee03:	f7 da                	neg    edx
c001ee05:	5b                   	pop    ebx
c001ee06:	5e                   	pop    esi
c001ee07:	5f                   	pop    edi
c001ee08:	c3                   	ret    

c001ee09 <Vm::fpuULongToFloat(unsigned long long)>:
c001ee09:	57                   	push   edi
c001ee0a:	31 c9                	xor    ecx,ecx
c001ee0c:	56                   	push   esi
c001ee0d:	53                   	push   ebx
c001ee0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee12:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee16:	0f ba e7 14          	bt     edi,0x14
c001ee1a:	72 07                	jb     c001ee23 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee1c:	01 f6                	add    esi,esi
c001ee1e:	11 ff                	adc    edi,edi
c001ee20:	41                   	inc    ecx
c001ee21:	eb f3                	jmp    c001ee16 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee23:	89 fa                	mov    edx,edi
c001ee25:	89 f0                	mov    eax,esi
c001ee27:	bb 33 04 00 00       	mov    ebx,0x433
c001ee2c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee32:	29 cb                	sub    ebx,ecx
c001ee34:	89 d9                	mov    ecx,ebx
c001ee36:	5b                   	pop    ebx
c001ee37:	c1 e1 14             	shl    ecx,0x14
c001ee3a:	5e                   	pop    esi
c001ee3b:	09 ca                	or     edx,ecx
c001ee3d:	5f                   	pop    edi
c001ee3e:	c3                   	ret    

c001ee3f <Vm::fpuLongToFloat(long long)>:
c001ee3f:	56                   	push   esi
c001ee40:	31 c0                	xor    eax,eax
c001ee42:	53                   	push   ebx
c001ee43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee4b:	39 c8                	cmp    eax,ecx
c001ee4d:	19 d8                	sbb    eax,ebx
c001ee4f:	7d 04                	jge    c001ee55 <Vm::fpuLongToFloat(long long)+0x16>
c001ee51:	31 f6                	xor    esi,esi
c001ee53:	eb 0c                	jmp    c001ee61 <Vm::fpuLongToFloat(long long)+0x22>
c001ee55:	f7 d9                	neg    ecx
c001ee57:	be 01 00 00 00       	mov    esi,0x1
c001ee5c:	83 d3 00             	adc    ebx,0x0
c001ee5f:	f7 db                	neg    ebx
c001ee61:	31 c0                	xor    eax,eax
c001ee63:	0f ba e3 14          	bt     ebx,0x14
c001ee67:	72 07                	jb     c001ee70 <Vm::fpuLongToFloat(long long)+0x31>
c001ee69:	01 c9                	add    ecx,ecx
c001ee6b:	11 db                	adc    ebx,ebx
c001ee6d:	40                   	inc    eax
c001ee6e:	eb f3                	jmp    c001ee63 <Vm::fpuLongToFloat(long long)+0x24>
c001ee70:	ba 33 04 00 00       	mov    edx,0x433
c001ee75:	29 c2                	sub    edx,eax
c001ee77:	89 c8                	mov    eax,ecx
c001ee79:	c1 e2 14             	shl    edx,0x14
c001ee7c:	89 d9                	mov    ecx,ebx
c001ee7e:	89 f3                	mov    ebx,esi
c001ee80:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee86:	09 ca                	or     edx,ecx
c001ee88:	84 db                	test   bl,bl
c001ee8a:	74 06                	je     c001ee92 <Vm::fpuLongToFloat(long long)+0x53>
c001ee8c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ee92:	5b                   	pop    ebx
c001ee93:	5e                   	pop    esi
c001ee94:	c3                   	ret    

c001ee95 <Vm::fpuGet0()>:
c001ee95:	31 c0                	xor    eax,eax
c001ee97:	31 d2                	xor    edx,edx
c001ee99:	c3                   	ret    

c001ee9a <Vm::fpuGet1()>:
c001ee9a:	b8 01 00 00 00       	mov    eax,0x1
c001ee9f:	31 d2                	xor    edx,edx
c001eea1:	c3                   	ret    

c001eea2 <Vm::fpuGetPi()>:
c001eea2:	b8 03 00 00 00       	mov    eax,0x3
c001eea7:	31 d2                	xor    edx,edx
c001eea9:	c3                   	ret    

c001eeaa <Vm::fpuGetLog2E()>:
c001eeaa:	83 ec 18             	sub    esp,0x18
c001eead:	68 60 bd 02 c0       	push   0xc002bd60
c001eeb2:	e8 a8 af ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001eeb7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eebc:	31 d2                	xor    edx,edx
c001eebe:	83 c4 1c             	add    esp,0x1c
c001eec1:	c3                   	ret    

c001eec2 <Vm::fpuGetLogE2()>:
c001eec2:	83 ec 18             	sub    esp,0x18
c001eec5:	68 6c bd 02 c0       	push   0xc002bd6c
c001eeca:	e8 90 af ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001eecf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eed4:	31 d2                	xor    edx,edx
c001eed6:	83 c4 1c             	add    esp,0x1c
c001eed9:	c3                   	ret    

c001eeda <Vm::fpuGetLog210()>:
c001eeda:	83 ec 18             	sub    esp,0x18
c001eedd:	68 78 bd 02 c0       	push   0xc002bd78
c001eee2:	e8 78 af ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001eee7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eeec:	31 d2                	xor    edx,edx
c001eeee:	83 c4 1c             	add    esp,0x1c
c001eef1:	c3                   	ret    

c001eef2 <Vm::fpuGetLog102()>:
c001eef2:	83 ec 18             	sub    esp,0x18
c001eef5:	68 85 bd 02 c0       	push   0xc002bd85
c001eefa:	e8 60 af ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001eeff:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef04:	31 d2                	xor    edx,edx
c001ef06:	83 c4 1c             	add    esp,0x1c
c001ef09:	c3                   	ret    

c001ef0a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef0e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef16:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef1a:	0f 92 c0             	setb   al
c001ef1d:	c3                   	ret    

c001ef1e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef26:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef2a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef2e:	09 c2                	or     edx,eax
c001ef30:	0f 94 c0             	sete   al
c001ef33:	c3                   	ret    

c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef34:	57                   	push   edi
c001ef35:	56                   	push   esi
c001ef36:	53                   	push   ebx
c001ef37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef3b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef3f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef47:	57                   	push   edi
c001ef48:	56                   	push   esi
c001ef49:	53                   	push   ebx
c001ef4a:	51                   	push   ecx
c001ef4b:	e8 ce ff ff ff       	call   c001ef1e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ef50:	83 c4 10             	add    esp,0x10
c001ef53:	88 c2                	mov    dl,al
c001ef55:	31 c0                	xor    eax,eax
c001ef57:	84 d2                	test   dl,dl
c001ef59:	75 0c                	jne    c001ef67 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ef5b:	57                   	push   edi
c001ef5c:	56                   	push   esi
c001ef5d:	53                   	push   ebx
c001ef5e:	51                   	push   ecx
c001ef5f:	e8 a6 ff ff ff       	call   c001ef0a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ef64:	83 c4 10             	add    esp,0x10
c001ef67:	83 e0 01             	and    eax,0x1
c001ef6a:	5b                   	pop    ebx
c001ef6b:	88 c1                	mov    cl,al
c001ef6d:	83 e2 01             	and    edx,0x1
c001ef70:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001ef75:	c1 e2 06             	shl    edx,0x6
c001ef78:	83 e0 ba             	and    eax,0xffffffba
c001ef7b:	5e                   	pop    esi
c001ef7c:	09 c8                	or     eax,ecx
c001ef7e:	5f                   	pop    edi
c001ef7f:	09 d0                	or     eax,edx
c001ef81:	a2 21 10 03 c0       	mov    ds:0xc0031021,al
c001ef86:	c3                   	ret    

c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ef87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef8f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ef93:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ef97:	c3                   	ret    

c001ef98 <Vm::fpuAbs(unsigned long long)>:
c001ef98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efa0:	c3                   	ret    

c001efa1 <Vm::fpuChs(unsigned long long)>:
c001efa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efa9:	f7 d8                	neg    eax
c001efab:	83 d2 00             	adc    edx,0x0
c001efae:	f7 da                	neg    edx
c001efb0:	c3                   	ret    

c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001efb1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001efb5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001efba:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001efbe:	eb c7                	jmp    c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001efc0:	53                   	push   ebx
c001efc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efd1:	0f af ca             	imul   ecx,edx
c001efd4:	0f af d8             	imul   ebx,eax
c001efd7:	f7 e2                	mul    edx
c001efd9:	01 d9                	add    ecx,ebx
c001efdb:	5b                   	pop    ebx
c001efdc:	01 ca                	add    edx,ecx
c001efde:	c3                   	ret    

c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001efdf:	83 ec 0c             	sub    esp,0xc
c001efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff2:	e8 15 71 00 00       	call   c002610c <__udivdi3>
c001eff7:	83 c4 1c             	add    esp,0x1c
c001effa:	c3                   	ret    

c001effb <Vm::fpuSquare(unsigned long long)>:
c001effb:	50                   	push   eax
c001effc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f000:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f004:	52                   	push   edx
c001f005:	50                   	push   eax
c001f006:	52                   	push   edx
c001f007:	50                   	push   eax
c001f008:	e8 b3 ff ff ff       	call   c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f00d:	83 c4 14             	add    esp,0x14
c001f010:	c3                   	ret    

c001f011 <Vm::fpuGetReg(int)>:
c001f011:	83 ec 0c             	sub    esp,0xc
c001f014:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f019:	76 10                	jbe    c001f02b <Vm::fpuGetReg(int)+0x1a>
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	68 92 bd 02 c0       	push   0xc002bd92
c001f023:	e8 37 ae ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f030:	b9 08 00 00 00       	mov    ecx,0x8
c001f035:	c0 e8 03             	shr    al,0x3
c001f038:	83 e0 07             	and    eax,0x7
c001f03b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f03f:	99                   	cdq    
c001f040:	f7 f9                	idiv   ecx
c001f042:	8b 04 d5 24 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcefdc]
c001f049:	8b 14 d5 28 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcefd8]
c001f050:	83 c4 0c             	add    esp,0xc
c001f053:	c3                   	ret    

c001f054 <Vm::fpuSetReg(int, unsigned long long)>:
c001f054:	57                   	push   edi
c001f055:	56                   	push   esi
c001f056:	52                   	push   edx
c001f057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f05b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f05f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f064:	76 10                	jbe    c001f076 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	68 a5 bd 02 c0       	push   0xc002bda5
c001f06e:	e8 ec ad ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c001f073:	83 c4 10             	add    esp,0x10
c001f076:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f07b:	b9 08 00 00 00       	mov    ecx,0x8
c001f080:	c0 e8 03             	shr    al,0x3
c001f083:	83 e0 07             	and    eax,0x7
c001f086:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f08a:	99                   	cdq    
c001f08b:	f7 f9                	idiv   ecx
c001f08d:	89 34 d5 24 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcefdc],esi
c001f094:	89 3c d5 28 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcefd8],edi
c001f09b:	58                   	pop    eax
c001f09c:	5e                   	pop    esi
c001f09d:	5f                   	pop    edi
c001f09e:	c3                   	ret    

c001f09f <Vm::fpuPush(unsigned long long)>:
c001f09f:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f0a4:	c0 e8 03             	shr    al,0x3
c001f0a7:	83 e0 07             	and    eax,0x7
c001f0aa:	83 c0 07             	add    eax,0x7
c001f0ad:	88 c2                	mov    dl,al
c001f0af:	83 e0 07             	and    eax,0x7
c001f0b2:	83 e2 07             	and    edx,0x7
c001f0b5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f0bc:	8a 15 21 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031021
c001f0c2:	83 e2 c7             	and    edx,0xffffffc7
c001f0c5:	09 ca                	or     edx,ecx
c001f0c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0cb:	88 15 21 10 03 c0    	mov    BYTE PTR ds:0xc0031021,dl
c001f0d1:	89 0c c5 28 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcefd8],ecx
c001f0d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0dc:	89 14 c5 24 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcefdc],edx
c001f0e3:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c001f0e8:	83 f8 08             	cmp    eax,0x8
c001f0eb:	75 08                	jne    c001f0f5 <Vm::fpuPush(unsigned long long)+0x56>
c001f0ed:	80 0d 20 10 03 c0 40 	or     BYTE PTR ds:0xc0031020,0x40
c001f0f4:	c3                   	ret    
c001f0f5:	40                   	inc    eax
c001f0f6:	a3 64 10 03 c0       	mov    ds:0xc0031064,eax
c001f0fb:	c3                   	ret    

c001f0fc <Vm::fpuPop()>:
c001f0fc:	8a 0d 21 10 03 c0    	mov    cl,BYTE PTR ds:0xc0031021
c001f102:	53                   	push   ebx
c001f103:	c0 e9 03             	shr    cl,0x3
c001f106:	8a 1d 21 10 03 c0    	mov    bl,BYTE PTR ds:0xc0031021
c001f10c:	83 e1 07             	and    ecx,0x7
c001f10f:	83 e3 c7             	and    ebx,0xffffffc7
c001f112:	8b 04 cd 24 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcefdc]
c001f119:	8b 14 cd 28 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcefd8]
c001f120:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f127:	83 e1 38             	and    ecx,0x38
c001f12a:	09 d9                	or     ecx,ebx
c001f12c:	88 0d 21 10 03 c0    	mov    BYTE PTR ds:0xc0031021,cl
c001f132:	8b 0d 64 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031064
c001f138:	85 c9                	test   ecx,ecx
c001f13a:	74 09                	je     c001f145 <Vm::fpuPop()+0x49>
c001f13c:	49                   	dec    ecx
c001f13d:	89 0d 64 10 03 c0    	mov    DWORD PTR ds:0xc0031064,ecx
c001f143:	eb 07                	jmp    c001f14c <Vm::fpuPop()+0x50>
c001f145:	80 0d 20 10 03 c0 40 	or     BYTE PTR ds:0xc0031020,0x40
c001f14c:	5b                   	pop    ebx
c001f14d:	c3                   	ret    

c001f14e <Vm::x87Handler(regs*)>:
c001f14e:	55                   	push   ebp
c001f14f:	57                   	push   edi
c001f150:	56                   	push   esi
c001f151:	53                   	push   ebx
c001f152:	83 ec 1c             	sub    esp,0x1c
c001f155:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f159:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f15e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f161:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f169:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f16d:	50                   	push   eax
c001f16e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f172:	50                   	push   eax
c001f173:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f177:	50                   	push   eax
c001f178:	53                   	push   ebx
c001f179:	e8 12 a5 ff ff       	call   c0019690 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f17e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	89 c6                	mov    esi,eax
c001f186:	80 fa d9             	cmp    dl,0xd9
c001f189:	0f 85 52 01 00 00    	jne    c001f2e1 <Vm::x87Handler(regs*)+0x193>
c001f18f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f193:	8d 50 20             	lea    edx,[eax+0x20]
c001f196:	80 fa 0e             	cmp    dl,0xe
c001f199:	0f 87 86 00 00 00    	ja     c001f225 <Vm::x87Handler(regs*)+0xd7>
c001f19f:	0f b6 d2             	movzx  edx,dl
c001f1a2:	ff 24 95 b8 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4248]
c001f1a9:	e8 e7 fc ff ff       	call   c001ee95 <Vm::fpuGet0()>
c001f1ae:	eb 05                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f1b0:	e8 e5 fc ff ff       	call   c001ee9a <Vm::fpuGet1()>
c001f1b5:	57                   	push   edi
c001f1b6:	57                   	push   edi
c001f1b7:	52                   	push   edx
c001f1b8:	50                   	push   eax
c001f1b9:	e8 e1 fe ff ff       	call   c001f09f <Vm::fpuPush(unsigned long long)>
c001f1be:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f1c2:	83 c4 10             	add    esp,0x10
c001f1c5:	b0 01                	mov    al,0x1
c001f1c7:	e9 e3 09 00 00       	jmp    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	6a 00                	push   0x0
c001f1d1:	e8 3b fe ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f1d6:	59                   	pop    ecx
c001f1d7:	5e                   	pop    esi
c001f1d8:	52                   	push   edx
c001f1d9:	50                   	push   eax
c001f1da:	e8 c2 fd ff ff       	call   c001efa1 <Vm::fpuChs(unsigned long long)>
c001f1df:	eb 13                	jmp    c001f1f4 <Vm::x87Handler(regs*)+0xa6>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	6a 00                	push   0x0
c001f1e6:	e8 26 fe ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f1eb:	5f                   	pop    edi
c001f1ec:	5d                   	pop    ebp
c001f1ed:	52                   	push   edx
c001f1ee:	50                   	push   eax
c001f1ef:	e8 a4 fd ff ff       	call   c001ef98 <Vm::fpuAbs(unsigned long long)>
c001f1f4:	83 c4 0c             	add    esp,0xc
c001f1f7:	52                   	push   edx
c001f1f8:	50                   	push   eax
c001f1f9:	6a 00                	push   0x0
c001f1fb:	e8 54 fe ff ff       	call   c001f054 <Vm::fpuSetReg(int, unsigned long long)>
c001f200:	eb bc                	jmp    c001f1be <Vm::x87Handler(regs*)+0x70>
c001f202:	e8 d3 fc ff ff       	call   c001eeda <Vm::fpuGetLog210()>
c001f207:	eb ac                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f209:	e8 9c fc ff ff       	call   c001eeaa <Vm::fpuGetLog2E()>
c001f20e:	eb a5                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f210:	e8 8d fc ff ff       	call   c001eea2 <Vm::fpuGetPi()>
c001f215:	eb 9e                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f217:	e8 d6 fc ff ff       	call   c001eef2 <Vm::fpuGetLog102()>
c001f21c:	eb 97                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f21e:	e8 9f fc ff ff       	call   c001eec2 <Vm::fpuGetLogE2()>
c001f223:	eb 90                	jmp    c001f1b5 <Vm::x87Handler(regs*)+0x67>
c001f225:	8d 50 40             	lea    edx,[eax+0x40]
c001f228:	80 fa 07             	cmp    dl,0x7
c001f22b:	77 15                	ja     c001f242 <Vm::x87Handler(regs*)+0xf4>
c001f22d:	83 ec 0c             	sub    esp,0xc
c001f230:	2d c0 00 00 00       	sub    eax,0xc0
c001f235:	50                   	push   eax
c001f236:	e8 d6 fd ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f23b:	59                   	pop    ecx
c001f23c:	5e                   	pop    esi
c001f23d:	e9 75 ff ff ff       	jmp    c001f1b7 <Vm::x87Handler(regs*)+0x69>
c001f242:	8d 50 38             	lea    edx,[eax+0x38]
c001f245:	80 fa 07             	cmp    dl,0x7
c001f248:	77 3c                	ja     c001f286 <Vm::x87Handler(regs*)+0x138>
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	2d c8 00 00 00       	sub    eax,0xc8
c001f252:	50                   	push   eax
c001f253:	e8 b9 fd ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f258:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f25f:	89 c6                	mov    esi,eax
c001f261:	89 d7                	mov    edi,edx
c001f263:	e8 a9 fd ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f268:	83 c4 0c             	add    esp,0xc
c001f26b:	52                   	push   edx
c001f26c:	50                   	push   eax
c001f26d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f271:	2d c8 00 00 00       	sub    eax,0xc8
c001f276:	50                   	push   eax
c001f277:	e8 d8 fd ff ff       	call   c001f054 <Vm::fpuSetReg(int, unsigned long long)>
c001f27c:	83 c4 0c             	add    esp,0xc
c001f27f:	57                   	push   edi
c001f280:	56                   	push   esi
c001f281:	e9 73 ff ff ff       	jmp    c001f1f9 <Vm::x87Handler(regs*)+0xab>
c001f286:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f28a:	84 d2                	test   dl,dl
c001f28c:	75 0f                	jne    c001f29d <Vm::x87Handler(regs*)+0x14f>
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	ff 36                	push   DWORD PTR [esi]
c001f293:	e8 c8 fa ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f298:	e9 bf 00 00 00       	jmp    c001f35c <Vm::x87Handler(regs*)+0x20e>
c001f29d:	80 fa 03             	cmp    dl,0x3
c001f2a0:	75 13                	jne    c001f2b5 <Vm::x87Handler(regs*)+0x167>
c001f2a2:	e8 55 fe ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f2a7:	55                   	push   ebp
c001f2a8:	55                   	push   ebp
c001f2a9:	52                   	push   edx
c001f2aa:	50                   	push   eax
c001f2ab:	e8 4c fa ff ff       	call   c001ecfc <Vm::fpuInternalTo32(unsigned long long)>
c001f2b0:	e9 88 00 00 00       	jmp    c001f33d <Vm::x87Handler(regs*)+0x1ef>
c001f2b5:	80 fa 05             	cmp    dl,0x5
c001f2b8:	75 0e                	jne    c001f2c8 <Vm::x87Handler(regs*)+0x17a>
c001f2ba:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2bd:	66 a3 22 10 03 c0    	mov    ds:0xc0031022,ax
c001f2c3:	e9 df 00 00 00       	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x259>
c001f2c8:	31 c0                	xor    eax,eax
c001f2ca:	80 fa 07             	cmp    dl,0x7
c001f2cd:	0f 85 dc 08 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f2d3:	66 a1 22 10 03 c0    	mov    ax,ds:0xc0031022
c001f2d9:	66 89 06             	mov    WORD PTR [esi],ax
c001f2dc:	e9 c6 00 00 00       	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x259>
c001f2e1:	80 fa d8             	cmp    dl,0xd8
c001f2e4:	0f 84 c9 00 00 00    	je     c001f3b3 <Vm::x87Handler(regs*)+0x265>
c001f2ea:	80 fa dc             	cmp    dl,0xdc
c001f2ed:	0f 84 0d 02 00 00    	je     c001f500 <Vm::x87Handler(regs*)+0x3b2>
c001f2f3:	80 fa de             	cmp    dl,0xde
c001f2f6:	0f 84 cd 02 00 00    	je     c001f5c9 <Vm::x87Handler(regs*)+0x47b>
c001f2fc:	80 fa dd             	cmp    dl,0xdd
c001f2ff:	0f 84 5f 04 00 00    	je     c001f764 <Vm::x87Handler(regs*)+0x616>
c001f305:	80 fa da             	cmp    dl,0xda
c001f308:	0f 84 24 05 00 00    	je     c001f832 <Vm::x87Handler(regs*)+0x6e4>
c001f30e:	80 fa df             	cmp    dl,0xdf
c001f311:	0f 84 68 05 00 00    	je     c001f87f <Vm::x87Handler(regs*)+0x731>
c001f317:	31 c0                	xor    eax,eax
c001f319:	80 fa db             	cmp    dl,0xdb
c001f31c:	0f 85 8d 08 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f322:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f326:	80 fa 03             	cmp    dl,0x3
c001f329:	0f 85 70 06 00 00    	jne    c001f99f <Vm::x87Handler(regs*)+0x851>
c001f32f:	e8 c8 fd ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f334:	55                   	push   ebp
c001f335:	55                   	push   ebp
c001f336:	52                   	push   edx
c001f337:	50                   	push   eax
c001f338:	e8 71 fa ff ff       	call   c001edae <Vm::fpuFloatToLong(unsigned long long)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	89 06                	mov    DWORD PTR [esi],eax
c001f342:	eb 63                	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x259>
c001f344:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f348:	84 d2                	test   dl,dl
c001f34a:	0f 85 e6 05 00 00    	jne    c001f936 <Vm::x87Handler(regs*)+0x7e8>
c001f350:	57                   	push   edi
c001f351:	57                   	push   edi
c001f352:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f355:	ff 36                	push   DWORD PTR [esi]
c001f357:	e8 49 fa ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001f35c:	5e                   	pop    esi
c001f35d:	5f                   	pop    edi
c001f35e:	52                   	push   edx
c001f35f:	50                   	push   eax
c001f360:	e8 3a fd ff ff       	call   c001f09f <Vm::fpuPush(unsigned long long)>
c001f365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f369:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f36c:	e9 51 fe ff ff       	jmp    c001f1c2 <Vm::x87Handler(regs*)+0x74>
c001f371:	80 fa 03             	cmp    dl,0x3
c001f374:	0f 85 d7 06 00 00    	jne    c001fa51 <Vm::x87Handler(regs*)+0x903>
c001f37a:	57                   	push   edi
c001f37b:	57                   	push   edi
c001f37c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f37f:	ff 36                	push   DWORD PTR [esi]
c001f381:	e8 1f fa ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001f386:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f38d:	89 c6                	mov    esi,eax
c001f38f:	89 d7                	mov    edi,edx
c001f391:	e8 7b fc ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f396:	57                   	push   edi
c001f397:	56                   	push   esi
c001f398:	52                   	push   edx
c001f399:	50                   	push   eax
c001f39a:	e8 95 fb ff ff       	call   c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f39f:	83 c4 20             	add    esp,0x20
c001f3a2:	e8 55 fd ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3ab:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3ae:	e9 12 fe ff ff       	jmp    c001f1c5 <Vm::x87Handler(regs*)+0x77>
c001f3b3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3b7:	8d 50 40             	lea    edx,[eax+0x40]
c001f3ba:	80 fa 07             	cmp    dl,0x7
c001f3bd:	77 29                	ja     c001f3e8 <Vm::x87Handler(regs*)+0x29a>
c001f3bf:	83 ec 0c             	sub    esp,0xc
c001f3c2:	2d c0 00 00 00       	sub    eax,0xc0
c001f3c7:	50                   	push   eax
c001f3c8:	e8 44 fc ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f3cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3d4:	89 c6                	mov    esi,eax
c001f3d6:	89 d7                	mov    edi,edx
c001f3d8:	e8 34 fc ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f3dd:	57                   	push   edi
c001f3de:	56                   	push   esi
c001f3df:	52                   	push   edx
c001f3e0:	50                   	push   eax
c001f3e1:	e8 a1 fb ff ff       	call   c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f3e6:	eb 2f                	jmp    c001f417 <Vm::x87Handler(regs*)+0x2c9>
c001f3e8:	8d 50 38             	lea    edx,[eax+0x38]
c001f3eb:	80 fa 07             	cmp    dl,0x7
c001f3ee:	77 2f                	ja     c001f41f <Vm::x87Handler(regs*)+0x2d1>
c001f3f0:	83 ec 0c             	sub    esp,0xc
c001f3f3:	2d c8 00 00 00       	sub    eax,0xc8
c001f3f8:	50                   	push   eax
c001f3f9:	e8 13 fc ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f3fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f405:	89 c6                	mov    esi,eax
c001f407:	89 d7                	mov    edi,edx
c001f409:	e8 03 fc ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f40e:	57                   	push   edi
c001f40f:	56                   	push   esi
c001f410:	52                   	push   edx
c001f411:	50                   	push   eax
c001f412:	e8 a9 fb ff ff       	call   c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f417:	83 c4 1c             	add    esp,0x1c
c001f41a:	e9 d8 fd ff ff       	jmp    c001f1f7 <Vm::x87Handler(regs*)+0xa9>
c001f41f:	8d 50 30             	lea    edx,[eax+0x30]
c001f422:	80 fa 07             	cmp    dl,0x7
c001f425:	77 0d                	ja     c001f434 <Vm::x87Handler(regs*)+0x2e6>
c001f427:	83 ec 0c             	sub    esp,0xc
c001f42a:	2d d0 00 00 00       	sub    eax,0xd0
c001f42f:	e9 99 03 00 00       	jmp    c001f7cd <Vm::x87Handler(regs*)+0x67f>
c001f434:	8d 50 28             	lea    edx,[eax+0x28]
c001f437:	80 fa 07             	cmp    dl,0x7
c001f43a:	77 0d                	ja     c001f449 <Vm::x87Handler(regs*)+0x2fb>
c001f43c:	83 ec 0c             	sub    esp,0xc
c001f43f:	2d d8 00 00 00       	sub    eax,0xd8
c001f444:	e9 c0 03 00 00       	jmp    c001f809 <Vm::x87Handler(regs*)+0x6bb>
c001f449:	8d 50 20             	lea    edx,[eax+0x20]
c001f44c:	80 fa 07             	cmp    dl,0x7
c001f44f:	77 1b                	ja     c001f46c <Vm::x87Handler(regs*)+0x31e>
c001f451:	83 ec 0c             	sub    esp,0xc
c001f454:	2d e0 00 00 00       	sub    eax,0xe0
c001f459:	50                   	push   eax
c001f45a:	e8 b2 fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f45f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f466:	89 c6                	mov    esi,eax
c001f468:	89 d7                	mov    edi,edx
c001f46a:	eb 22                	jmp    c001f48e <Vm::x87Handler(regs*)+0x340>
c001f46c:	8d 50 18             	lea    edx,[eax+0x18]
c001f46f:	80 fa 07             	cmp    dl,0x7
c001f472:	77 2d                	ja     c001f4a1 <Vm::x87Handler(regs*)+0x353>
c001f474:	83 ec 0c             	sub    esp,0xc
c001f477:	6a 00                	push   0x0
c001f479:	e8 93 fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f47e:	89 c6                	mov    esi,eax
c001f480:	89 d7                	mov    edi,edx
c001f482:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f486:	2d e8 00 00 00       	sub    eax,0xe8
c001f48b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f48e:	e8 7e fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f493:	57                   	push   edi
c001f494:	56                   	push   esi
c001f495:	52                   	push   edx
c001f496:	50                   	push   eax
c001f497:	e8 15 fb ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f49c:	e9 76 ff ff ff       	jmp    c001f417 <Vm::x87Handler(regs*)+0x2c9>
c001f4a1:	8d 50 10             	lea    edx,[eax+0x10]
c001f4a4:	80 fa 07             	cmp    dl,0x7
c001f4a7:	77 1b                	ja     c001f4c4 <Vm::x87Handler(regs*)+0x376>
c001f4a9:	83 ec 0c             	sub    esp,0xc
c001f4ac:	2d f0 00 00 00       	sub    eax,0xf0
c001f4b1:	50                   	push   eax
c001f4b2:	e8 5a fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f4b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4be:	89 c6                	mov    esi,eax
c001f4c0:	89 d7                	mov    edi,edx
c001f4c2:	eb 22                	jmp    c001f4e6 <Vm::x87Handler(regs*)+0x398>
c001f4c4:	3c f7                	cmp    al,0xf7
c001f4c6:	0f 86 d1 03 00 00    	jbe    c001f89d <Vm::x87Handler(regs*)+0x74f>
c001f4cc:	83 ec 0c             	sub    esp,0xc
c001f4cf:	6a 00                	push   0x0
c001f4d1:	e8 3b fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f4d6:	89 c6                	mov    esi,eax
c001f4d8:	89 d7                	mov    edi,edx
c001f4da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4de:	2d f8 00 00 00       	sub    eax,0xf8
c001f4e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e6:	e8 26 fb ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f4eb:	57                   	push   edi
c001f4ec:	56                   	push   esi
c001f4ed:	52                   	push   edx
c001f4ee:	50                   	push   eax
c001f4ef:	e8 eb fa ff ff       	call   c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4f4:	83 c4 1c             	add    esp,0x1c
c001f4f7:	52                   	push   edx
c001f4f8:	50                   	push   eax
c001f4f9:	6a 00                	push   0x0
c001f4fb:	e9 51 02 00 00       	jmp    c001f751 <Vm::x87Handler(regs*)+0x603>
c001f500:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f504:	8d 50 40             	lea    edx,[eax+0x40]
c001f507:	80 fa 07             	cmp    dl,0x7
c001f50a:	77 37                	ja     c001f543 <Vm::x87Handler(regs*)+0x3f5>
c001f50c:	83 ec 0c             	sub    esp,0xc
c001f50f:	2d c0 00 00 00       	sub    eax,0xc0
c001f514:	50                   	push   eax
c001f515:	e8 f7 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f51a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f521:	89 c6                	mov    esi,eax
c001f523:	89 d7                	mov    edi,edx
c001f525:	e8 e7 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f52a:	57                   	push   edi
c001f52b:	56                   	push   esi
c001f52c:	52                   	push   edx
c001f52d:	50                   	push   eax
c001f52e:	e8 54 fa ff ff       	call   c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f533:	83 c4 1c             	add    esp,0x1c
c001f536:	52                   	push   edx
c001f537:	50                   	push   eax
c001f538:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f53c:	2d c0 00 00 00       	sub    eax,0xc0
c001f541:	eb 3d                	jmp    c001f580 <Vm::x87Handler(regs*)+0x432>
c001f543:	8d 50 38             	lea    edx,[eax+0x38]
c001f546:	80 fa 07             	cmp    dl,0x7
c001f549:	77 3b                	ja     c001f586 <Vm::x87Handler(regs*)+0x438>
c001f54b:	83 ec 0c             	sub    esp,0xc
c001f54e:	2d c8 00 00 00       	sub    eax,0xc8
c001f553:	50                   	push   eax
c001f554:	e8 b8 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f559:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f560:	89 c6                	mov    esi,eax
c001f562:	89 d7                	mov    edi,edx
c001f564:	e8 a8 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f569:	57                   	push   edi
c001f56a:	56                   	push   esi
c001f56b:	52                   	push   edx
c001f56c:	50                   	push   eax
c001f56d:	e8 4e fa ff ff       	call   c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f572:	83 c4 1c             	add    esp,0x1c
c001f575:	52                   	push   edx
c001f576:	50                   	push   eax
c001f577:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57b:	2d c8 00 00 00       	sub    eax,0xc8
c001f580:	50                   	push   eax
c001f581:	e9 75 fc ff ff       	jmp    c001f1fb <Vm::x87Handler(regs*)+0xad>
c001f586:	83 c0 18             	add    eax,0x18
c001f589:	3c 07                	cmp    al,0x7
c001f58b:	0f 87 3b 04 00 00    	ja     c001f9cc <Vm::x87Handler(regs*)+0x87e>
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	6a 00                	push   0x0
c001f596:	e8 76 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f59b:	89 c6                	mov    esi,eax
c001f59d:	89 d7                	mov    edi,edx
c001f59f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5a3:	2d e8 00 00 00       	sub    eax,0xe8
c001f5a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5ab:	e8 61 fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f5b0:	57                   	push   edi
c001f5b1:	56                   	push   esi
c001f5b2:	52                   	push   edx
c001f5b3:	50                   	push   eax
c001f5b4:	e8 f8 f9 ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5b9:	83 c4 1c             	add    esp,0x1c
c001f5bc:	52                   	push   edx
c001f5bd:	50                   	push   eax
c001f5be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c2:	2d e8 00 00 00       	sub    eax,0xe8
c001f5c7:	eb b7                	jmp    c001f580 <Vm::x87Handler(regs*)+0x432>
c001f5c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5cd:	8d 50 40             	lea    edx,[eax+0x40]
c001f5d0:	80 fa 07             	cmp    dl,0x7
c001f5d3:	77 3a                	ja     c001f60f <Vm::x87Handler(regs*)+0x4c1>
c001f5d5:	83 ec 0c             	sub    esp,0xc
c001f5d8:	2d c0 00 00 00       	sub    eax,0xc0
c001f5dd:	50                   	push   eax
c001f5de:	e8 2e fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f5e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ea:	89 c6                	mov    esi,eax
c001f5ec:	89 d7                	mov    edi,edx
c001f5ee:	e8 1e fa ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f5f3:	57                   	push   edi
c001f5f4:	56                   	push   esi
c001f5f5:	52                   	push   edx
c001f5f6:	50                   	push   eax
c001f5f7:	e8 8b f9 ff ff       	call   c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5fc:	83 c4 1c             	add    esp,0x1c
c001f5ff:	52                   	push   edx
c001f600:	50                   	push   eax
c001f601:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f605:	2d c0 00 00 00       	sub    eax,0xc0
c001f60a:	e9 9e 01 00 00       	jmp    c001f7ad <Vm::x87Handler(regs*)+0x65f>
c001f60f:	8d 50 20             	lea    edx,[eax+0x20]
c001f612:	80 fa 07             	cmp    dl,0x7
c001f615:	77 3a                	ja     c001f651 <Vm::x87Handler(regs*)+0x503>
c001f617:	83 ec 0c             	sub    esp,0xc
c001f61a:	2d e0 00 00 00       	sub    eax,0xe0
c001f61f:	50                   	push   eax
c001f620:	e8 ec f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f625:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f62c:	89 c6                	mov    esi,eax
c001f62e:	89 d7                	mov    edi,edx
c001f630:	e8 dc f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f635:	57                   	push   edi
c001f636:	56                   	push   esi
c001f637:	52                   	push   edx
c001f638:	50                   	push   eax
c001f639:	e8 73 f9 ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f63e:	83 c4 1c             	add    esp,0x1c
c001f641:	52                   	push   edx
c001f642:	50                   	push   eax
c001f643:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f647:	2d e0 00 00 00       	sub    eax,0xe0
c001f64c:	e9 5c 01 00 00       	jmp    c001f7ad <Vm::x87Handler(regs*)+0x65f>
c001f651:	8d 50 18             	lea    edx,[eax+0x18]
c001f654:	80 fa 07             	cmp    dl,0x7
c001f657:	77 3b                	ja     c001f694 <Vm::x87Handler(regs*)+0x546>
c001f659:	83 ec 0c             	sub    esp,0xc
c001f65c:	6a 00                	push   0x0
c001f65e:	e8 ae f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f663:	89 c6                	mov    esi,eax
c001f665:	89 d7                	mov    edi,edx
c001f667:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f66b:	2d e8 00 00 00       	sub    eax,0xe8
c001f670:	89 04 24             	mov    DWORD PTR [esp],eax
c001f673:	e8 99 f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f678:	57                   	push   edi
c001f679:	56                   	push   esi
c001f67a:	52                   	push   edx
c001f67b:	50                   	push   eax
c001f67c:	e8 30 f9 ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f681:	83 c4 1c             	add    esp,0x1c
c001f684:	52                   	push   edx
c001f685:	50                   	push   eax
c001f686:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f68a:	2d e8 00 00 00       	sub    eax,0xe8
c001f68f:	e9 19 01 00 00       	jmp    c001f7ad <Vm::x87Handler(regs*)+0x65f>
c001f694:	8d 50 38             	lea    edx,[eax+0x38]
c001f697:	80 fa 07             	cmp    dl,0x7
c001f69a:	77 37                	ja     c001f6d3 <Vm::x87Handler(regs*)+0x585>
c001f69c:	83 ec 0c             	sub    esp,0xc
c001f69f:	2d c8 00 00 00       	sub    eax,0xc8
c001f6a4:	50                   	push   eax
c001f6a5:	e8 67 f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f6aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6b1:	89 c6                	mov    esi,eax
c001f6b3:	89 d7                	mov    edi,edx
c001f6b5:	e8 57 f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f6ba:	57                   	push   edi
c001f6bb:	56                   	push   esi
c001f6bc:	52                   	push   edx
c001f6bd:	50                   	push   eax
c001f6be:	e8 fd f8 ff ff       	call   c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6c3:	83 c4 1c             	add    esp,0x1c
c001f6c6:	52                   	push   edx
c001f6c7:	50                   	push   eax
c001f6c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6cc:	2d c8 00 00 00       	sub    eax,0xc8
c001f6d1:	eb 7d                	jmp    c001f750 <Vm::x87Handler(regs*)+0x602>
c001f6d3:	3c f7                	cmp    al,0xf7
c001f6d5:	76 38                	jbe    c001f70f <Vm::x87Handler(regs*)+0x5c1>
c001f6d7:	83 ec 0c             	sub    esp,0xc
c001f6da:	6a 00                	push   0x0
c001f6dc:	e8 30 f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f6e1:	89 c6                	mov    esi,eax
c001f6e3:	89 d7                	mov    edi,edx
c001f6e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e9:	2d f8 00 00 00       	sub    eax,0xf8
c001f6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f1:	e8 1b f9 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f6f6:	57                   	push   edi
c001f6f7:	56                   	push   esi
c001f6f8:	52                   	push   edx
c001f6f9:	50                   	push   eax
c001f6fa:	e8 e0 f8 ff ff       	call   c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f6ff:	83 c4 1c             	add    esp,0x1c
c001f702:	52                   	push   edx
c001f703:	50                   	push   eax
c001f704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f708:	2d f8 00 00 00       	sub    eax,0xf8
c001f70d:	eb 41                	jmp    c001f750 <Vm::x87Handler(regs*)+0x602>
c001f70f:	8d 50 10             	lea    edx,[eax+0x10]
c001f712:	80 fa 07             	cmp    dl,0x7
c001f715:	0f 87 5a 01 00 00    	ja     c001f875 <Vm::x87Handler(regs*)+0x727>
c001f71b:	83 ec 0c             	sub    esp,0xc
c001f71e:	2d f0 00 00 00       	sub    eax,0xf0
c001f723:	50                   	push   eax
c001f724:	e8 e8 f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f729:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f730:	89 c6                	mov    esi,eax
c001f732:	89 d7                	mov    edi,edx
c001f734:	e8 d8 f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f739:	57                   	push   edi
c001f73a:	56                   	push   esi
c001f73b:	52                   	push   edx
c001f73c:	50                   	push   eax
c001f73d:	e8 9d f8 ff ff       	call   c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f742:	83 c4 1c             	add    esp,0x1c
c001f745:	52                   	push   edx
c001f746:	50                   	push   eax
c001f747:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f74b:	2d f0 00 00 00       	sub    eax,0xf0
c001f750:	50                   	push   eax
c001f751:	e8 fe f8 ff ff       	call   c001f054 <Vm::fpuSetReg(int, unsigned long long)>
c001f756:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f75a:	e8 9d f9 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f75f:	e9 5e fa ff ff       	jmp    c001f1c2 <Vm::x87Handler(regs*)+0x74>
c001f764:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f768:	8d 50 30             	lea    edx,[eax+0x30]
c001f76b:	80 fa 07             	cmp    dl,0x7
c001f76e:	77 1d                	ja     c001f78d <Vm::x87Handler(regs*)+0x63f>
c001f770:	83 ec 0c             	sub    esp,0xc
c001f773:	6a 00                	push   0x0
c001f775:	e8 97 f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f77a:	83 c4 0c             	add    esp,0xc
c001f77d:	52                   	push   edx
c001f77e:	50                   	push   eax
c001f77f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f783:	2d d0 00 00 00       	sub    eax,0xd0
c001f788:	e9 f3 fd ff ff       	jmp    c001f580 <Vm::x87Handler(regs*)+0x432>
c001f78d:	8d 50 28             	lea    edx,[eax+0x28]
c001f790:	80 fa 07             	cmp    dl,0x7
c001f793:	77 28                	ja     c001f7bd <Vm::x87Handler(regs*)+0x66f>
c001f795:	83 ec 0c             	sub    esp,0xc
c001f798:	6a 00                	push   0x0
c001f79a:	e8 72 f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f79f:	83 c4 0c             	add    esp,0xc
c001f7a2:	52                   	push   edx
c001f7a3:	50                   	push   eax
c001f7a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a8:	2d d8 00 00 00       	sub    eax,0xd8
c001f7ad:	50                   	push   eax
c001f7ae:	e8 a1 f8 ff ff       	call   c001f054 <Vm::fpuSetReg(int, unsigned long long)>
c001f7b3:	e8 44 f9 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f7b8:	e9 01 fa ff ff       	jmp    c001f1be <Vm::x87Handler(regs*)+0x70>
c001f7bd:	8d 50 20             	lea    edx,[eax+0x20]
c001f7c0:	80 fa 07             	cmp    dl,0x7
c001f7c3:	77 30                	ja     c001f7f5 <Vm::x87Handler(regs*)+0x6a7>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	2d e0 00 00 00       	sub    eax,0xe0
c001f7cd:	50                   	push   eax
c001f7ce:	e8 3e f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f7d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7da:	89 c6                	mov    esi,eax
c001f7dc:	89 d7                	mov    edi,edx
c001f7de:	e8 2e f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f7e3:	57                   	push   edi
c001f7e4:	56                   	push   esi
c001f7e5:	52                   	push   edx
c001f7e6:	50                   	push   eax
c001f7e7:	e8 48 f7 ff ff       	call   c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7f0:	e9 54 02 00 00       	jmp    c001fa49 <Vm::x87Handler(regs*)+0x8fb>
c001f7f5:	8d 50 18             	lea    edx,[eax+0x18]
c001f7f8:	80 fa 07             	cmp    dl,0x7
c001f7fb:	0f 87 43 fb ff ff    	ja     c001f344 <Vm::x87Handler(regs*)+0x1f6>
c001f801:	83 ec 0c             	sub    esp,0xc
c001f804:	2d e8 00 00 00       	sub    eax,0xe8
c001f809:	50                   	push   eax
c001f80a:	e8 02 f8 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f80f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f816:	89 c6                	mov    esi,eax
c001f818:	89 d7                	mov    edi,edx
c001f81a:	e8 f2 f7 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f81f:	57                   	push   edi
c001f820:	56                   	push   esi
c001f821:	52                   	push   edx
c001f822:	50                   	push   eax
c001f823:	e8 0c f7 ff ff       	call   c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f828:	83 c4 20             	add    esp,0x20
c001f82b:	e8 cc f8 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f830:	eb 62                	jmp    c001f894 <Vm::x87Handler(regs*)+0x746>
c001f832:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f836:	0f 85 0f 01 00 00    	jne    c001f94b <Vm::x87Handler(regs*)+0x7fd>
c001f83c:	83 ec 0c             	sub    esp,0xc
c001f83f:	6a 01                	push   0x1
c001f841:	e8 cb f7 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f846:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f84d:	89 c6                	mov    esi,eax
c001f84f:	89 d7                	mov    edi,edx
c001f851:	e8 bb f7 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f856:	57                   	push   edi
c001f857:	56                   	push   esi
c001f858:	52                   	push   edx
c001f859:	50                   	push   eax
c001f85a:	e8 d5 f6 ff ff       	call   c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f85f:	83 c4 20             	add    esp,0x20
c001f862:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f866:	e8 91 f8 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f86b:	e8 8c f8 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f870:	e9 50 f9 ff ff       	jmp    c001f1c5 <Vm::x87Handler(regs*)+0x77>
c001f875:	3c d9                	cmp    al,0xd9
c001f877:	0f 85 b5 02 00 00    	jne    c001fb32 <Vm::x87Handler(regs*)+0x9e4>
c001f87d:	eb bd                	jmp    c001f83c <Vm::x87Handler(regs*)+0x6ee>
c001f87f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f883:	0f 85 ea 02 00 00    	jne    c001fb73 <Vm::x87Handler(regs*)+0xa25>
c001f889:	0f b7 05 20 10 03 c0 	movzx  eax,WORD PTR ds:0xc0031020
c001f890:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f894:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f898:	e9 28 f9 ff ff       	jmp    c001f1c5 <Vm::x87Handler(regs*)+0x77>
c001f89d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8a1:	84 d2                	test   dl,dl
c001f8a3:	75 0f                	jne    c001f8b4 <Vm::x87Handler(regs*)+0x766>
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	ff 36                	push   DWORD PTR [esi]
c001f8aa:	e8 b1 f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f8af:	e9 2c 01 00 00       	jmp    c001f9e0 <Vm::x87Handler(regs*)+0x892>
c001f8b4:	80 fa 01             	cmp    dl,0x1
c001f8b7:	75 0f                	jne    c001f8c8 <Vm::x87Handler(regs*)+0x77a>
c001f8b9:	83 ec 0c             	sub    esp,0xc
c001f8bc:	ff 36                	push   DWORD PTR [esi]
c001f8be:	e8 9d f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f8c3:	e9 81 02 00 00       	jmp    c001fb49 <Vm::x87Handler(regs*)+0x9fb>
c001f8c8:	80 fa 04             	cmp    dl,0x4
c001f8cb:	75 0f                	jne    c001f8dc <Vm::x87Handler(regs*)+0x78e>
c001f8cd:	83 ec 0c             	sub    esp,0xc
c001f8d0:	ff 36                	push   DWORD PTR [esi]
c001f8d2:	e8 89 f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f8d7:	e9 86 01 00 00       	jmp    c001fa62 <Vm::x87Handler(regs*)+0x914>
c001f8dc:	80 fa 05             	cmp    dl,0x5
c001f8df:	75 1b                	jne    c001f8fc <Vm::x87Handler(regs*)+0x7ae>
c001f8e1:	83 ec 0c             	sub    esp,0xc
c001f8e4:	6a 00                	push   0x0
c001f8e6:	e8 26 f7 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f8eb:	89 c7                	mov    edi,eax
c001f8ed:	89 d5                	mov    ebp,edx
c001f8ef:	58                   	pop    eax
c001f8f0:	ff 36                	push   DWORD PTR [esi]
c001f8f2:	e8 69 f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f8f7:	e9 a3 01 00 00       	jmp    c001fa9f <Vm::x87Handler(regs*)+0x951>
c001f8fc:	80 fa 06             	cmp    dl,0x6
c001f8ff:	75 0f                	jne    c001f910 <Vm::x87Handler(regs*)+0x7c2>
c001f901:	83 ec 0c             	sub    esp,0xc
c001f904:	ff 36                	push   DWORD PTR [esi]
c001f906:	e8 55 f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f90b:	e9 ae 01 00 00       	jmp    c001fabe <Vm::x87Handler(regs*)+0x970>
c001f910:	31 c0                	xor    eax,eax
c001f912:	80 fa 07             	cmp    dl,0x7
c001f915:	0f 85 94 02 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f91b:	83 ec 0c             	sub    esp,0xc
c001f91e:	6a 00                	push   0x0
c001f920:	e8 ec f6 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f925:	89 c7                	mov    edi,eax
c001f927:	89 d5                	mov    ebp,edx
c001f929:	58                   	pop    eax
c001f92a:	ff 36                	push   DWORD PTR [esi]
c001f92c:	e8 2f f4 ff ff       	call   c001ed60 <Vm::fpu32ToInternal(unsigned int)>
c001f931:	e9 cb 01 00 00       	jmp    c001fb01 <Vm::x87Handler(regs*)+0x9b3>
c001f936:	80 fa 03             	cmp    dl,0x3
c001f939:	0f 85 d3 01 00 00    	jne    c001fb12 <Vm::x87Handler(regs*)+0x9c4>
c001f93f:	e8 b8 f7 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001f944:	51                   	push   ecx
c001f945:	51                   	push   ecx
c001f946:	e9 de 01 00 00       	jmp    c001fb29 <Vm::x87Handler(regs*)+0x9db>
c001f94b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f94f:	80 fa 01             	cmp    dl,0x1
c001f952:	75 09                	jne    c001f95d <Vm::x87Handler(regs*)+0x80f>
c001f954:	57                   	push   edi
c001f955:	57                   	push   edi
c001f956:	8b 06                	mov    eax,DWORD PTR [esi]
c001f958:	e9 e3 01 00 00       	jmp    c001fb40 <Vm::x87Handler(regs*)+0x9f2>
c001f95d:	80 fa 04             	cmp    dl,0x4
c001f960:	75 12                	jne    c001f974 <Vm::x87Handler(regs*)+0x826>
c001f962:	31 d2                	xor    edx,edx
c001f964:	51                   	push   ecx
c001f965:	51                   	push   ecx
c001f966:	8b 06                	mov    eax,DWORD PTR [esi]
c001f968:	52                   	push   edx
c001f969:	50                   	push   eax
c001f96a:	e8 d0 f4 ff ff       	call   c001ee3f <Vm::fpuLongToFloat(long long)>
c001f96f:	e9 ee 00 00 00       	jmp    c001fa62 <Vm::x87Handler(regs*)+0x914>
c001f974:	31 c0                	xor    eax,eax
c001f976:	80 fa 07             	cmp    dl,0x7
c001f979:	0f 85 30 02 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f97f:	83 ec 0c             	sub    esp,0xc
c001f982:	6a 00                	push   0x0
c001f984:	e8 88 f6 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f989:	89 c7                	mov    edi,eax
c001f98b:	89 d5                	mov    ebp,edx
c001f98d:	58                   	pop    eax
c001f98e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f990:	5a                   	pop    edx
c001f991:	31 d2                	xor    edx,edx
c001f993:	52                   	push   edx
c001f994:	50                   	push   eax
c001f995:	e8 a5 f4 ff ff       	call   c001ee3f <Vm::fpuLongToFloat(long long)>
c001f99a:	e9 62 01 00 00       	jmp    c001fb01 <Vm::x87Handler(regs*)+0x9b3>
c001f99f:	84 d2                	test   dl,dl
c001f9a1:	75 0d                	jne    c001f9b0 <Vm::x87Handler(regs*)+0x862>
c001f9a3:	31 d2                	xor    edx,edx
c001f9a5:	55                   	push   ebp
c001f9a6:	55                   	push   ebp
c001f9a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9a9:	52                   	push   edx
c001f9aa:	50                   	push   eax
c001f9ab:	e9 d3 01 00 00       	jmp    c001fb83 <Vm::x87Handler(regs*)+0xa35>
c001f9b0:	31 c0                	xor    eax,eax
c001f9b2:	80 fa 02             	cmp    dl,0x2
c001f9b5:	0f 85 f4 01 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001f9bb:	83 ec 0c             	sub    esp,0xc
c001f9be:	6a 00                	push   0x0
c001f9c0:	e8 4c f6 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f9c5:	59                   	pop    ecx
c001f9c6:	5f                   	pop    edi
c001f9c7:	e9 6a f9 ff ff       	jmp    c001f336 <Vm::x87Handler(regs*)+0x1e8>
c001f9cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9d0:	84 d2                	test   dl,dl
c001f9d2:	75 2a                	jne    c001f9fe <Vm::x87Handler(regs*)+0x8b0>
c001f9d4:	50                   	push   eax
c001f9d5:	50                   	push   eax
c001f9d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f9d9:	ff 36                	push   DWORD PTR [esi]
c001f9db:	e8 c5 f3 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001f9e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9e7:	89 c6                	mov    esi,eax
c001f9e9:	89 d7                	mov    edi,edx
c001f9eb:	e8 21 f6 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001f9f0:	57                   	push   edi
c001f9f1:	56                   	push   esi
c001f9f2:	52                   	push   edx
c001f9f3:	50                   	push   eax
c001f9f4:	e8 8e f5 ff ff       	call   c001ef87 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f9f9:	e9 64 01 00 00       	jmp    c001fb62 <Vm::x87Handler(regs*)+0xa14>
c001f9fe:	80 fa 01             	cmp    dl,0x1
c001fa01:	75 11                	jne    c001fa14 <Vm::x87Handler(regs*)+0x8c6>
c001fa03:	50                   	push   eax
c001fa04:	50                   	push   eax
c001fa05:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa08:	ff 36                	push   DWORD PTR [esi]
c001fa0a:	e8 96 f3 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa0f:	e9 35 01 00 00       	jmp    c001fb49 <Vm::x87Handler(regs*)+0x9fb>
c001fa14:	80 fa 02             	cmp    dl,0x2
c001fa17:	0f 85 54 f9 ff ff    	jne    c001f371 <Vm::x87Handler(regs*)+0x223>
c001fa1d:	55                   	push   ebp
c001fa1e:	55                   	push   ebp
c001fa1f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa22:	ff 36                	push   DWORD PTR [esi]
c001fa24:	e8 7c f3 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa30:	89 c6                	mov    esi,eax
c001fa32:	89 d7                	mov    edi,edx
c001fa34:	e8 d8 f5 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001fa39:	57                   	push   edi
c001fa3a:	56                   	push   esi
c001fa3b:	52                   	push   edx
c001fa3c:	50                   	push   eax
c001fa3d:	e8 f2 f4 ff ff       	call   c001ef34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fa46:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fa49:	83 c4 20             	add    esp,0x20
c001fa4c:	e9 74 f7 ff ff       	jmp    c001f1c5 <Vm::x87Handler(regs*)+0x77>
c001fa51:	80 fa 04             	cmp    dl,0x4
c001fa54:	75 2a                	jne    c001fa80 <Vm::x87Handler(regs*)+0x932>
c001fa56:	51                   	push   ecx
c001fa57:	51                   	push   ecx
c001fa58:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa5b:	ff 36                	push   DWORD PTR [esi]
c001fa5d:	e8 43 f3 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa69:	89 c6                	mov    esi,eax
c001fa6b:	89 d7                	mov    edi,edx
c001fa6d:	e8 9f f5 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001fa72:	57                   	push   edi
c001fa73:	56                   	push   esi
c001fa74:	52                   	push   edx
c001fa75:	50                   	push   eax
c001fa76:	e8 36 f5 ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa7b:	e9 e2 00 00 00       	jmp    c001fb62 <Vm::x87Handler(regs*)+0xa14>
c001fa80:	80 fa 05             	cmp    dl,0x5
c001fa83:	75 28                	jne    c001faad <Vm::x87Handler(regs*)+0x95f>
c001fa85:	83 ec 0c             	sub    esp,0xc
c001fa88:	6a 00                	push   0x0
c001fa8a:	e8 82 f5 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001fa8f:	89 c7                	mov    edi,eax
c001fa91:	89 d5                	mov    ebp,edx
c001fa93:	58                   	pop    eax
c001fa94:	5a                   	pop    edx
c001fa95:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa98:	ff 36                	push   DWORD PTR [esi]
c001fa9a:	e8 06 f3 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	55                   	push   ebp
c001faa3:	57                   	push   edi
c001faa4:	52                   	push   edx
c001faa5:	50                   	push   eax
c001faa6:	e8 06 f5 ff ff       	call   c001efb1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001faab:	eb 60                	jmp    c001fb0d <Vm::x87Handler(regs*)+0x9bf>
c001faad:	80 fa 06             	cmp    dl,0x6
c001fab0:	75 2a                	jne    c001fadc <Vm::x87Handler(regs*)+0x98e>
c001fab2:	51                   	push   ecx
c001fab3:	51                   	push   ecx
c001fab4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fab7:	ff 36                	push   DWORD PTR [esi]
c001fab9:	e8 e7 f2 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fabe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac5:	89 c6                	mov    esi,eax
c001fac7:	89 d7                	mov    edi,edx
c001fac9:	e8 43 f5 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001face:	57                   	push   edi
c001facf:	56                   	push   esi
c001fad0:	52                   	push   edx
c001fad1:	50                   	push   eax
c001fad2:	e8 08 f5 ff ff       	call   c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fad7:	e9 86 00 00 00       	jmp    c001fb62 <Vm::x87Handler(regs*)+0xa14>
c001fadc:	31 c0                	xor    eax,eax
c001fade:	80 fa 07             	cmp    dl,0x7
c001fae1:	0f 85 c8 00 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001fae7:	83 ec 0c             	sub    esp,0xc
c001faea:	6a 00                	push   0x0
c001faec:	e8 20 f5 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001faf1:	89 c7                	mov    edi,eax
c001faf3:	89 d5                	mov    ebp,edx
c001faf5:	58                   	pop    eax
c001faf6:	5a                   	pop    edx
c001faf7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fafa:	ff 36                	push   DWORD PTR [esi]
c001fafc:	e8 a4 f2 ff ff       	call   c001eda5 <Vm::fpu64ToInternal(unsigned long long)>
c001fb01:	83 c4 10             	add    esp,0x10
c001fb04:	55                   	push   ebp
c001fb05:	57                   	push   edi
c001fb06:	52                   	push   edx
c001fb07:	50                   	push   eax
c001fb08:	e8 d2 f4 ff ff       	call   c001efdf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb0d:	83 c4 0c             	add    esp,0xc
c001fb10:	eb 53                	jmp    c001fb65 <Vm::x87Handler(regs*)+0xa17>
c001fb12:	31 c0                	xor    eax,eax
c001fb14:	80 fa 02             	cmp    dl,0x2
c001fb17:	0f 85 92 00 00 00    	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001fb1d:	83 ec 0c             	sub    esp,0xc
c001fb20:	6a 00                	push   0x0
c001fb22:	e8 ea f4 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001fb27:	59                   	pop    ecx
c001fb28:	5f                   	pop    edi
c001fb29:	52                   	push   edx
c001fb2a:	50                   	push   eax
c001fb2b:	e8 27 f2 ff ff       	call   c001ed57 <Vm::fpuInternalTo64(unsigned long long)>
c001fb30:	eb 70                	jmp    c001fba2 <Vm::x87Handler(regs*)+0xa54>
c001fb32:	31 c0                	xor    eax,eax
c001fb34:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb39:	75 74                	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001fb3b:	50                   	push   eax
c001fb3c:	50                   	push   eax
c001fb3d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb40:	31 d2                	xor    edx,edx
c001fb42:	52                   	push   edx
c001fb43:	50                   	push   eax
c001fb44:	e8 f6 f2 ff ff       	call   c001ee3f <Vm::fpuLongToFloat(long long)>
c001fb49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb50:	89 c6                	mov    esi,eax
c001fb52:	89 d7                	mov    edi,edx
c001fb54:	e8 b8 f4 ff ff       	call   c001f011 <Vm::fpuGetReg(int)>
c001fb59:	57                   	push   edi
c001fb5a:	56                   	push   esi
c001fb5b:	52                   	push   edx
c001fb5c:	50                   	push   eax
c001fb5d:	e8 5e f4 ff ff       	call   c001efc0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb62:	83 c4 1c             	add    esp,0x1c
c001fb65:	52                   	push   edx
c001fb66:	50                   	push   eax
c001fb67:	6a 00                	push   0x0
c001fb69:	e8 e6 f4 ff ff       	call   c001f054 <Vm::fpuSetReg(int, unsigned long long)>
c001fb6e:	e9 f2 f7 ff ff       	jmp    c001f365 <Vm::x87Handler(regs*)+0x217>
c001fb73:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb77:	80 fa 05             	cmp    dl,0x5
c001fb7a:	75 11                	jne    c001fb8d <Vm::x87Handler(regs*)+0xa3f>
c001fb7c:	55                   	push   ebp
c001fb7d:	55                   	push   ebp
c001fb7e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb81:	ff 36                	push   DWORD PTR [esi]
c001fb83:	e8 81 f2 ff ff       	call   c001ee09 <Vm::fpuULongToFloat(unsigned long long)>
c001fb88:	e9 cf f7 ff ff       	jmp    c001f35c <Vm::x87Handler(regs*)+0x20e>
c001fb8d:	31 c0                	xor    eax,eax
c001fb8f:	80 fa 07             	cmp    dl,0x7
c001fb92:	75 1b                	jne    c001fbaf <Vm::x87Handler(regs*)+0xa61>
c001fb94:	e8 63 f5 ff ff       	call   c001f0fc <Vm::fpuPop()>
c001fb99:	51                   	push   ecx
c001fb9a:	51                   	push   ecx
c001fb9b:	52                   	push   edx
c001fb9c:	50                   	push   eax
c001fb9d:	e8 0c f2 ff ff       	call   c001edae <Vm::fpuFloatToLong(unsigned long long)>
c001fba2:	83 c4 10             	add    esp,0x10
c001fba5:	89 06                	mov    DWORD PTR [esi],eax
c001fba7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fbaa:	e9 f8 f7 ff ff       	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x259>
c001fbaf:	83 c4 1c             	add    esp,0x1c
c001fbb2:	5b                   	pop    ebx
c001fbb3:	5e                   	pop    esi
c001fbb4:	5f                   	pop    edi
c001fbb5:	5d                   	pop    ebp
c001fbb6:	c3                   	ret    

c001fbb7 <__static_initialization_and_destruction_0(int, int)>:
c001fbb7:	83 ec 0c             	sub    esp,0xc
c001fbba:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fbbf:	75 1a                	jne    c001fbdb <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbc1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fbc9:	75 10                	jne    c001fbdb <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbcb:	83 ec 0c             	sub    esp,0xc
c001fbce:	68 20 10 03 c0       	push   0xc0031020
c001fbd3:	e8 88 88 00 00       	call   c0028460 <Vm::_FPUState::_FPUState()>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	90                   	nop
c001fbdc:	83 c4 0c             	add    esp,0xc
c001fbdf:	c3                   	ret    

c001fbe0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	83 ec 08             	sub    esp,0x8
c001fbe6:	68 ff ff 00 00       	push   0xffff
c001fbeb:	6a 01                	push   0x1
c001fbed:	e8 c5 ff ff ff       	call   c001fbb7 <__static_initialization_and_destruction_0(int, int)>
c001fbf2:	83 c4 10             	add    esp,0x10
c001fbf5:	83 c4 0c             	add    esp,0xc
c001fbf8:	c3                   	ret    
c001fbf9:	90                   	nop

c001fbfa <FAT::getName()>:
c001fbfa:	b8 f4 bd 02 c0       	mov    eax,0xc002bdf4
c001fbff:	c3                   	ret    

c001fc00 <FAT::tell(void*, unsigned long long*)>:
c001fc00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc05:	75 06                	jne    c001fc0d <FAT::tell(void*, unsigned long long*)+0xd>
c001fc07:	b8 04 00 00 00       	mov    eax,0x4
c001fc0c:	c3                   	ret    
c001fc0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc12:	75 06                	jne    c001fc1a <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc14:	b8 04 00 00 00       	mov    eax,0x4
c001fc19:	c3                   	ret    
c001fc1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc1e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc21:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc28:	89 01                	mov    DWORD PTR [ecx],eax
c001fc2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc2d:	b8 00 00 00 00       	mov    eax,0x0
c001fc32:	c3                   	ret    
c001fc33:	90                   	nop

c001fc34 <FAT::stat(void*, unsigned long long*)>:
c001fc34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc39:	75 06                	jne    c001fc41 <FAT::stat(void*, unsigned long long*)+0xd>
c001fc3b:	b8 04 00 00 00       	mov    eax,0x4
c001fc40:	c3                   	ret    
c001fc41:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc46:	75 06                	jne    c001fc4e <FAT::stat(void*, unsigned long long*)+0x1a>
c001fc48:	b8 04 00 00 00       	mov    eax,0x4
c001fc4d:	c3                   	ret    
c001fc4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc52:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fc55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc5c:	89 01                	mov    DWORD PTR [ecx],eax
c001fc5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc61:	b8 00 00 00 00       	mov    eax,0x0
c001fc66:	c3                   	ret    
c001fc67:	90                   	nop

c001fc68 <FAT::~FAT()>:
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	ba 78 be 02 c0       	mov    edx,0xc002be78
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	89 10                	mov    DWORD PTR [eax],edx
c001fc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7a:	83 ec 0c             	sub    esp,0xc
c001fc7d:	50                   	push   eax
c001fc7e:	e8 91 2f ff ff       	call   c0012c14 <Filesystem::~Filesystem()>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	90                   	nop
c001fc87:	83 c4 0c             	add    esp,0xc
c001fc8a:	c3                   	ret    
c001fc8b:	90                   	nop

c001fc8c <FAT::~FAT()>:
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	83 ec 0c             	sub    esp,0xc
c001fc92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc96:	e8 cd ff ff ff       	call   c001fc68 <FAT::~FAT()>
c001fc9b:	83 c4 10             	add    esp,0x10
c001fc9e:	83 ec 08             	sub    esp,0x8
c001fca1:	6a 08                	push   0x8
c001fca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca7:	e8 5f 2b ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c001fcac:	83 c4 10             	add    esp,0x10
c001fcaf:	83 c4 0c             	add    esp,0xc
c001fcb2:	c3                   	ret    
c001fcb3:	90                   	nop

c001fcb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fcb4:	83 ec 1c             	sub    esp,0x1c
c001fcb7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fcbe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fcc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcc7:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001fcce:	83 f8 ff             	cmp    eax,0xffffffff
c001fcd1:	75 34                	jne    c001fd07 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fcd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fcd7:	88 c2                	mov    dl,al
c001fcd9:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001fcde:	01 d0                	add    eax,edx
c001fce0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fce4:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c001fcea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcee:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c001fcf5:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001fcfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fcfe:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fd05:	eb 17                	jmp    c001fd1e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd0b:	88 c2                	mov    dl,al
c001fd0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd11:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001fd18:	01 d0                	add    eax,edx
c001fd1a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd1e:	83 ec 04             	sub    esp,0x4
c001fd21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd29:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd2d:	50                   	push   eax
c001fd2e:	e8 e6 6d fe ff       	call   c0006b19 <f_getlabel>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd3a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd3f:	75 07                	jne    c001fd48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd41:	b8 00 00 00 00       	mov    eax,0x0
c001fd46:	eb 05                	jmp    c001fd4d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fd48:	b8 01 00 00 00       	mov    eax,0x1
c001fd4d:	83 c4 1c             	add    esp,0x1c
c001fd50:	c3                   	ret    
c001fd51:	90                   	nop

c001fd52 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fd52:	57                   	push   edi
c001fd53:	83 ec 58             	sub    esp,0x58
c001fd56:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fd5e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fd62:	b9 0f 00 00 00       	mov    ecx,0xf
c001fd67:	b8 00 00 00 00       	mov    eax,0x0
c001fd6c:	fc                   	cld    
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd71:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fd75:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001fd7c:	83 f8 ff             	cmp    eax,0xffffffff
c001fd7f:	75 34                	jne    c001fdb5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fd81:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fd85:	88 c2                	mov    dl,al
c001fd87:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001fd8c:	01 d0                	add    eax,edx
c001fd8e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd92:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c001fd98:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fd9c:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c001fda3:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001fda8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fdac:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fdb3:	eb 17                	jmp    c001fdcc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fdb5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdb9:	88 c2                	mov    dl,al
c001fdbb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdbf:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001fdc6:	01 d0                	add    eax,edx
c001fdc8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdcc:	83 ec 08             	sub    esp,0x8
c001fdcf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fdd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fdd7:	50                   	push   eax
c001fdd8:	e8 35 0a fe ff       	call   c0000812 <strcat>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fde7:	50                   	push   eax
c001fde8:	e8 1a 6f fe ff       	call   c0006d07 <f_setlabel>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fdf4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fdf9:	75 07                	jne    c001fe02 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fdfb:	b8 00 00 00 00       	mov    eax,0x0
c001fe00:	eb 05                	jmp    c001fe07 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe02:	b8 01 00 00 00       	mov    eax,0x1
c001fe07:	83 c4 58             	add    esp,0x58
c001fe0a:	5f                   	pop    edi
c001fe0b:	c3                   	ret    

c001fe0c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe0c:	83 ec 2c             	sub    esp,0x2c
c001fe0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe17:	83 ec 08             	sub    esp,0x8
c001fe1a:	68 18 be 02 c0       	push   0xc002be18
c001fe1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe23:	e8 84 09 fe ff       	call   c00007ac <strcmp>
c001fe28:	83 c4 10             	add    esp,0x10
c001fe2b:	85 c0                	test   eax,eax
c001fe2d:	0f 94 c0             	sete   al
c001fe30:	84 c0                	test   al,al
c001fe32:	74 0d                	je     c001fe41 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe3c:	e9 a6 00 00 00       	jmp    c001fee7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe41:	83 ec 08             	sub    esp,0x8
c001fe44:	68 0a be 02 c0       	push   0xc002be0a
c001fe49:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe4d:	e8 5a 09 fe ff       	call   c00007ac <strcmp>
c001fe52:	83 c4 10             	add    esp,0x10
c001fe55:	85 c0                	test   eax,eax
c001fe57:	0f 94 c0             	sete   al
c001fe5a:	84 c0                	test   al,al
c001fe5c:	74 0a                	je     c001fe68 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fe5e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe66:	eb 7f                	jmp    c001fee7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe68:	83 ec 08             	sub    esp,0x8
c001fe6b:	68 10 be 02 c0       	push   0xc002be10
c001fe70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe74:	e8 33 09 fe ff       	call   c00007ac <strcmp>
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	85 c0                	test   eax,eax
c001fe7e:	0f 94 c0             	sete   al
c001fe81:	84 c0                	test   al,al
c001fe83:	74 0a                	je     c001fe8f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fe85:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe8d:	eb 58                	jmp    c001fee7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe8f:	83 ec 08             	sub    esp,0x8
c001fe92:	68 cc 8b 02 c0       	push   0xc0028bcc
c001fe97:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe9b:	e8 0c 09 fe ff       	call   c00007ac <strcmp>
c001fea0:	83 c4 10             	add    esp,0x10
c001fea3:	85 c0                	test   eax,eax
c001fea5:	0f 94 c0             	sete   al
c001fea8:	84 c0                	test   al,al
c001feaa:	74 0a                	je     c001feb6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001feac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001feb4:	eb 31                	jmp    c001fee7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001feb6:	83 ec 08             	sub    esp,0x8
c001feb9:	68 16 be 02 c0       	push   0xc002be16
c001febe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fec2:	e8 e5 08 fe ff       	call   c00007ac <strcmp>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	85 c0                	test   eax,eax
c001fecc:	0f 94 c0             	sete   al
c001fecf:	84 c0                	test   al,al
c001fed1:	74 0a                	je     c001fedd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fed3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fedb:	eb 0a                	jmp    c001fee7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fedd:	b8 08 00 00 00       	mov    eax,0x8
c001fee2:	e9 04 01 00 00       	jmp    c001ffeb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fee7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001feee:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fef3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fef7:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001fefe:	83 f8 ff             	cmp    eax,0xffffffff
c001ff01:	75 34                	jne    c001ff37 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff03:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff07:	88 c2                	mov    dl,al
c001ff09:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001ff0e:	01 d0                	add    eax,edx
c001ff10:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff14:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c001ff1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff1e:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c001ff25:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001ff2a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff2e:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001ff35:	eb 17                	jmp    c001ff4e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff37:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff3b:	88 c2                	mov    dl,al
c001ff3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff41:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001ff48:	01 d0                	add    eax,edx
c001ff4a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff52:	88 04 24             	mov    BYTE PTR [esp],al
c001ff55:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ff59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff5d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ff65:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ff6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ff72:	83 ec 0c             	sub    esp,0xc
c001ff75:	68 00 20 00 00       	push   0x2000
c001ff7a:	e8 9d f6 fe ff       	call   c000f61c <malloc>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff86:	68 00 20 00 00       	push   0x2000
c001ff8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff93:	50                   	push   eax
c001ff94:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ff98:	50                   	push   eax
c001ff99:	e8 b4 71 fe ff       	call   c0007152 <f_mkfs>
c001ff9e:	83 c4 10             	add    esp,0x10
c001ffa1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffa5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffaa:	75 07                	jne    c001ffb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ffac:	b8 00 00 00 00       	mov    eax,0x0
c001ffb1:	eb 38                	jmp    c001ffeb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffb3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ffb8:	75 17                	jne    c001ffd1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001ffba:	83 ec 0c             	sub    esp,0xc
c001ffbd:	68 48 be 02 c0       	push   0xc002be48
c001ffc2:	e8 24 29 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	b8 09 00 00 00       	mov    eax,0x9
c001ffcf:	eb 1a                	jmp    c001ffeb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ffd5:	83 ec 08             	sub    esp,0x8
c001ffd8:	50                   	push   eax
c001ffd9:	68 1c be 02 c0       	push   0xc002be1c
c001ffde:	e8 08 29 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	b8 01 00 00 00       	mov    eax,0x1
c001ffeb:	83 c4 2c             	add    esp,0x2c
c001ffee:	c3                   	ret    
c001ffef:	90                   	nop

c001fff0 <FAT::tryMount(LogicalDisk*, int)>:
c001fff0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fff6:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001fffb:	83 f8 14             	cmp    eax,0x14
c001fffe:	75 17                	jne    c0020017 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	68 2e be 02 c0       	push   0xc002be2e
c0020008:	e8 52 9e ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	b0 00                	mov    al,0x0
c0020012:	e9 d7 01 00 00       	jmp    c00201ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020017:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002001e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020024:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002002a:	3d 00 02 00 00       	cmp    eax,0x200
c002002f:	74 07                	je     c0020038 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020031:	b0 00                	mov    al,0x0
c0020033:	e9 b6 01 00 00       	jmp    c00201ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020038:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020040:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020047:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c002004e:	83 f8 ff             	cmp    eax,0xffffffff
c0020051:	74 07                	je     c002005a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020053:	b0 01                	mov    al,0x1
c0020055:	e9 94 01 00 00       	jmp    c00201ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002005a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020064:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002006c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020073:	88 c2                	mov    dl,al
c0020075:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c002007a:	01 d0                	add    eax,edx
c002007c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020083:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c0020089:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020090:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c0020097:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c002009c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200a3:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c00200aa:	83 ec 0c             	sub    esp,0xc
c00200ad:	68 54 02 00 00       	push   0x254
c00200b2:	e8 65 f5 fe ff       	call   c000f61c <malloc>
c00200b7:	83 c4 10             	add    esp,0x10
c00200ba:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200c1:	83 ec 04             	sub    esp,0x4
c00200c4:	6a 00                	push   0x0
c00200c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00200cd:	50                   	push   eax
c00200ce:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200d5:	e8 36 4c fe ff       	call   c0004d10 <f_mount>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00200e4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00200ec:	74 19                	je     c0020107 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200f8:	e8 3f f5 fe ff       	call   c000f63c <rfree>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	b0 00                	mov    al,0x0
c0020102:	e9 e7 00 00 00       	jmp    c00201ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020107:	83 ec 04             	sub    esp,0x4
c002010a:	68 00 01 00 00       	push   0x100
c002010f:	6a 00                	push   0x0
c0020111:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020118:	50                   	push   eax
c0020119:	e8 9e 05 fe ff       	call   c00006bc <memset>
c002011e:	83 c4 10             	add    esp,0x10
c0020121:	83 ec 08             	sub    esp,0x8
c0020124:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002012b:	50                   	push   eax
c002012c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020133:	50                   	push   eax
c0020134:	e8 d9 06 fe ff       	call   c0000812 <strcat>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	83 ec 08             	sub    esp,0x8
c002013f:	68 3c be 02 c0       	push   0xc002be3c
c0020144:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002014b:	50                   	push   eax
c002014c:	e8 c1 06 fe ff       	call   c0000812 <strcat>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	83 ec 04             	sub    esp,0x4
c0020157:	6a 01                	push   0x1
c0020159:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020160:	50                   	push   eax
c0020161:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020165:	50                   	push   eax
c0020166:	e8 07 4c fe ff       	call   c0004d72 <f_open>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020175:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002017c:	85 c0                	test   eax,eax
c002017e:	74 0a                	je     c002018a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020180:	78 2d                	js     c00201af <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020182:	83 e8 04             	sub    eax,0x4
c0020185:	83 f8 01             	cmp    eax,0x1
c0020188:	77 25                	ja     c00201af <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002018a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020192:	83 ec 0c             	sub    esp,0xc
c0020195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020199:	50                   	push   eax
c002019a:	e8 25 57 fe ff       	call   c00058c4 <f_close>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	90                   	nop
c00201a3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201ab:	74 3a                	je     c00201e7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201ad:	eb 2d                	jmp    c00201dc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201af:	83 ec 0c             	sub    esp,0xc
c00201b2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201b9:	e8 7e f4 fe ff       	call   c000f63c <rfree>
c00201be:	83 c4 10             	add    esp,0x10
c00201c1:	83 ec 04             	sub    esp,0x4
c00201c4:	6a 00                	push   0x0
c00201c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201cd:	50                   	push   eax
c00201ce:	6a 00                	push   0x0
c00201d0:	e8 3b 4b fe ff       	call   c0004d10 <f_mount>
c00201d5:	83 c4 10             	add    esp,0x10
c00201d8:	b0 00                	mov    al,0x0
c00201da:	eb 12                	jmp    c00201ee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201dc:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c00201e1:	40                   	inc    eax
c00201e2:	a3 80 10 03 c0       	mov    ds:0xc0031080,eax
c00201e7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00201ee:	81 c4 6c 03 00 00    	add    esp,0x36c
c00201f4:	c3                   	ret    
c00201f5:	90                   	nop

c00201f6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00201f6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00201fc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020204:	74 0a                	je     c0020210 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020206:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c002020e:	75 0a                	jne    c002021a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020210:	b8 04 00 00 00       	mov    eax,0x4
c0020215:	e9 db 00 00 00       	jmp    c00202f5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002021a:	83 ec 08             	sub    esp,0x8
c002021d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020224:	50                   	push   eax
c0020225:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c002022c:	e8 9d 5c fe ff       	call   c0005ece <f_readdir>
c0020231:	83 c4 10             	add    esp,0x10
c0020234:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c002023b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020241:	83 ec 0c             	sub    esp,0xc
c0020244:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002024b:	83 c0 1a             	add    eax,0x1a
c002024e:	50                   	push   eax
c002024f:	e8 85 04 fe ff       	call   c00006d9 <strlen>
c0020254:	83 c4 10             	add    esp,0x10
c0020257:	ba 00 00 00 00       	mov    edx,0x0
c002025c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020260:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020264:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c002026b:	0f b6 c0             	movzx  eax,al
c002026e:	83 e0 10             	and    eax,0x10
c0020271:	74 07                	je     c002027a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020273:	b8 02 00 00 00       	mov    eax,0x2
c0020278:	eb 05                	jmp    c002027f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c002027a:	b8 01 00 00 00       	mov    eax,0x1
c002027f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020283:	83 ec 08             	sub    esp,0x8
c0020286:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002028d:	83 c0 1a             	add    eax,0x1a
c0020290:	50                   	push   eax
c0020291:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020295:	83 c0 10             	add    eax,0x10
c0020298:	50                   	push   eax
c0020299:	e8 bd 04 fe ff       	call   c000075b <strcpy>
c002029e:	83 c4 10             	add    esp,0x10
c00202a1:	83 ec 04             	sub    esp,0x4
c00202a4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00202ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c00202af:	50                   	push   eax
c00202b0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00202b7:	e8 e4 03 fe ff       	call   c00006a0 <memcpy>
c00202bc:	83 c4 10             	add    esp,0x10
c00202bf:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00202c6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00202cc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00202d3:	84 c0                	test   al,al
c00202d5:	75 07                	jne    c00202de <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00202d7:	b8 07 00 00 00       	mov    eax,0x7
c00202dc:	eb 17                	jmp    c00202f5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202de:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00202e5:	85 c0                	test   eax,eax
c00202e7:	75 07                	jne    c00202f0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00202e9:	b8 00 00 00 00       	mov    eax,0x0
c00202ee:	eb 05                	jmp    c00202f5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202f0:	b8 01 00 00 00       	mov    eax,0x1
c00202f5:	81 c4 3c 02 00 00    	add    esp,0x23c
c00202fb:	c3                   	ret    

c00202fc <FAT::read(void*, unsigned long, void*, int*)>:
c00202fc:	83 ec 1c             	sub    esp,0x1c
c00202ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020304:	74 07                	je     c002030d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020306:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002030b:	75 07                	jne    c0020314 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002030d:	b8 04 00 00 00       	mov    eax,0x4
c0020312:	eb 3d                	jmp    c0020351 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020314:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020318:	50                   	push   eax
c0020319:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002031d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020321:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020325:	e8 84 4e fe ff       	call   c00051ae <f_read>
c002032a:	83 c4 10             	add    esp,0x10
c002032d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020335:	89 c2                	mov    edx,eax
c0020337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002033b:	89 10                	mov    DWORD PTR [eax],edx
c002033d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020341:	85 c0                	test   eax,eax
c0020343:	75 07                	jne    c002034c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020345:	b8 00 00 00 00       	mov    eax,0x0
c002034a:	eb 05                	jmp    c0020351 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002034c:	b8 01 00 00 00       	mov    eax,0x1
c0020351:	83 c4 1c             	add    esp,0x1c
c0020354:	c3                   	ret    
c0020355:	90                   	nop

c0020356 <FAT::write(void*, unsigned long, void*, int*)>:
c0020356:	83 ec 1c             	sub    esp,0x1c
c0020359:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002035e:	74 07                	je     c0020367 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020360:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020365:	75 07                	jne    c002036e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020367:	b8 04 00 00 00       	mov    eax,0x4
c002036c:	eb 3d                	jmp    c00203ab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002036e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020372:	50                   	push   eax
c0020373:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020377:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002037b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002037f:	e8 aa 50 fe ff       	call   c000542e <f_write>
c0020384:	83 c4 10             	add    esp,0x10
c0020387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002038b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002038f:	89 c2                	mov    edx,eax
c0020391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020395:	89 10                	mov    DWORD PTR [eax],edx
c0020397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002039b:	85 c0                	test   eax,eax
c002039d:	75 07                	jne    c00203a6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002039f:	b8 00 00 00 00       	mov    eax,0x0
c00203a4:	eb 05                	jmp    c00203ab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00203a6:	b8 01 00 00 00       	mov    eax,0x1
c00203ab:	83 c4 1c             	add    esp,0x1c
c00203ae:	c3                   	ret    
c00203af:	90                   	nop

c00203b0 <FAT::close(void*)>:
c00203b0:	83 ec 1c             	sub    esp,0x1c
c00203b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00203b8:	75 07                	jne    c00203c1 <FAT::close(void*)+0x11>
c00203ba:	b8 04 00 00 00       	mov    eax,0x4
c00203bf:	eb 36                	jmp    c00203f7 <FAT::close(void*)+0x47>
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203c8:	e8 f7 54 fe ff       	call   c00058c4 <f_close>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203d4:	83 ec 0c             	sub    esp,0xc
c00203d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203db:	e8 4c f2 fe ff       	call   c000f62c <free>
c00203e0:	83 c4 10             	add    esp,0x10
c00203e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203e7:	85 c0                	test   eax,eax
c00203e9:	75 07                	jne    c00203f2 <FAT::close(void*)+0x42>
c00203eb:	b8 00 00 00 00       	mov    eax,0x0
c00203f0:	eb 05                	jmp    c00203f7 <FAT::close(void*)+0x47>
c00203f2:	b8 01 00 00 00       	mov    eax,0x1
c00203f7:	83 c4 1c             	add    esp,0x1c
c00203fa:	c3                   	ret    
c00203fb:	90                   	nop

c00203fc <FAT::closeDir(void*)>:
c00203fc:	83 ec 1c             	sub    esp,0x1c
c00203ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020404:	75 07                	jne    c002040d <FAT::closeDir(void*)+0x11>
c0020406:	b8 04 00 00 00       	mov    eax,0x4
c002040b:	eb 36                	jmp    c0020443 <FAT::closeDir(void*)+0x47>
c002040d:	83 ec 0c             	sub    esp,0xc
c0020410:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020414:	e8 93 5a fe ff       	call   c0005eac <f_closedir>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020427:	e8 00 f2 fe ff       	call   c000f62c <free>
c002042c:	83 c4 10             	add    esp,0x10
c002042f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020433:	85 c0                	test   eax,eax
c0020435:	75 07                	jne    c002043e <FAT::closeDir(void*)+0x42>
c0020437:	b8 00 00 00 00       	mov    eax,0x0
c002043c:	eb 05                	jmp    c0020443 <FAT::closeDir(void*)+0x47>
c002043e:	b8 01 00 00 00       	mov    eax,0x1
c0020443:	83 c4 1c             	add    esp,0x1c
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <FAT::seek(void*, unsigned long long)>:
c0020448:	83 ec 2c             	sub    esp,0x2c
c002044b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002044f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002045b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020460:	75 07                	jne    c0020469 <FAT::seek(void*, unsigned long long)+0x21>
c0020462:	b8 04 00 00 00       	mov    eax,0x4
c0020467:	eb 2f                	jmp    c0020498 <FAT::seek(void*, unsigned long long)+0x50>
c0020469:	83 ec 04             	sub    esp,0x4
c002046c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020470:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020474:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020478:	e8 76 54 fe ff       	call   c00058f3 <f_lseek>
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020488:	85 c0                	test   eax,eax
c002048a:	75 07                	jne    c0020493 <FAT::seek(void*, unsigned long long)+0x4b>
c002048c:	b8 00 00 00 00       	mov    eax,0x0
c0020491:	eb 05                	jmp    c0020498 <FAT::seek(void*, unsigned long long)+0x50>
c0020493:	b8 01 00 00 00       	mov    eax,0x1
c0020498:	83 c4 2c             	add    esp,0x2c
c002049b:	c3                   	ret    

c002049c <fatWrapperReadDisk>:
c002049c:	83 ec 1c             	sub    esp,0x1c
c002049f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00204ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204bb:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c00204c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00204c6:	83 ec 0c             	sub    esp,0xc
c00204c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204cd:	52                   	push   edx
c00204ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204d6:	50                   	push   eax
c00204d7:	e8 cc 5b ff ff       	call   c00160a8 <LogicalDisk::read(unsigned long long, int, void*)>
c00204dc:	83 c4 20             	add    esp,0x20
c00204df:	83 c4 1c             	add    esp,0x1c
c00204e2:	c3                   	ret    

c00204e3 <fatWrapperWriteDisk>:
c00204e3:	83 ec 1c             	sub    esp,0x1c
c00204e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00204f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204fd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020502:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0020509:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002050d:	83 ec 0c             	sub    esp,0xc
c0020510:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020514:	52                   	push   edx
c0020515:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020519:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002051d:	50                   	push   eax
c002051e:	e8 f1 5b ff ff       	call   c0016114 <LogicalDisk::write(unsigned long long, int, void*)>
c0020523:	83 c4 20             	add    esp,0x20
c0020526:	83 c4 1c             	add    esp,0x1c
c0020529:	c3                   	ret    

c002052a <fatWrapperIoctl>:
c002052a:	53                   	push   ebx
c002052b:	83 ec 28             	sub    esp,0x28
c002052e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020532:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020536:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002053a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002053e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020543:	75 31                	jne    c0020576 <fatWrapperIoctl+0x4c>
c0020545:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020549:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002054d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020552:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0020559:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002055f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020565:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020569:	66 89 02             	mov    WORD PTR [edx],ax
c002056c:	b8 00 00 00 00       	mov    eax,0x0
c0020571:	e9 b2 00 00 00       	jmp    c0020628 <fatWrapperIoctl+0xfe>
c0020576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002057b:	75 6a                	jne    c00205e7 <fatWrapperIoctl+0xbd>
c002057d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020585:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002058a:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0020591:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020597:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002059d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00205a3:	89 c8                	mov    eax,ecx
c00205a5:	89 da                	mov    edx,ebx
c00205a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00205ab:	c1 e0 0a             	shl    eax,0xa
c00205ae:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00205b3:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00205ba:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00205c0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00205c6:	89 cb                	mov    ebx,ecx
c00205c8:	c1 fb 1f             	sar    ebx,0x1f
c00205cb:	53                   	push   ebx
c00205cc:	51                   	push   ecx
c00205cd:	52                   	push   edx
c00205ce:	50                   	push   eax
c00205cf:	e8 38 5b 00 00       	call   c002610c <__udivdi3>
c00205d4:	83 c4 10             	add    esp,0x10
c00205d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00205db:	89 01                	mov    DWORD PTR [ecx],eax
c00205dd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205e0:	b8 00 00 00 00       	mov    eax,0x0
c00205e5:	eb 41                	jmp    c0020628 <fatWrapperIoctl+0xfe>
c00205e7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00205ec:	75 07                	jne    c00205f5 <fatWrapperIoctl+0xcb>
c00205ee:	b8 00 00 00 00       	mov    eax,0x0
c00205f3:	eb 33                	jmp    c0020628 <fatWrapperIoctl+0xfe>
c00205f5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00205fa:	75 19                	jne    c0020615 <fatWrapperIoctl+0xeb>
c00205fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020600:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020604:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020608:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002060e:	b8 00 00 00 00       	mov    eax,0x0
c0020613:	eb 13                	jmp    c0020628 <fatWrapperIoctl+0xfe>
c0020615:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002061a:	75 07                	jne    c0020623 <fatWrapperIoctl+0xf9>
c002061c:	b8 00 00 00 00       	mov    eax,0x0
c0020621:	eb 05                	jmp    c0020628 <fatWrapperIoctl+0xfe>
c0020623:	b8 04 00 00 00       	mov    eax,0x4
c0020628:	83 c4 28             	add    esp,0x28
c002062b:	5b                   	pop    ebx
c002062c:	c3                   	ret    
c002062d:	90                   	nop

c002062e <FAT::FAT()>:
c002062e:	83 ec 1c             	sub    esp,0x1c
c0020631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020635:	83 ec 0c             	sub    esp,0xc
c0020638:	50                   	push   eax
c0020639:	e8 b2 25 ff ff       	call   c0012bf0 <Filesystem::Filesystem()>
c002063e:	83 c4 10             	add    esp,0x10
c0020641:	ba 78 be 02 c0       	mov    edx,0xc002be78
c0020646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002064a:	89 10                	mov    DWORD PTR [eax],edx
c002064c:	c7 05 80 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031080,0x0
c0020656:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002065e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020663:	7f 15                	jg     c002067a <FAT::FAT()+0x4c>
c0020665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020669:	c7 04 85 a0 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcef60],0xffffffff
c0020674:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020678:	eb e4                	jmp    c002065e <FAT::FAT()+0x30>
c002067a:	90                   	nop
c002067b:	83 c4 1c             	add    esp,0x1c
c002067e:	c3                   	ret    
c002067f:	90                   	nop

c0020680 <FAT::fixFilepath(char*)>:
c0020680:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020684:	8a 00                	mov    al,BYTE PTR [eax]
c0020686:	3c 40                	cmp    al,0x40
c0020688:	7e 2c                	jle    c00206b6 <FAT::fixFilepath(char*)+0x36>
c002068a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002068e:	8a 00                	mov    al,BYTE PTR [eax]
c0020690:	83 e8 41             	sub    eax,0x41
c0020693:	88 c2                	mov    dl,al
c0020695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020699:	88 10                	mov    BYTE PTR [eax],dl
c002069b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002069f:	8a 00                	mov    al,BYTE PTR [eax]
c00206a1:	0f be c0             	movsx  eax,al
c00206a4:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c00206ab:	83 c0 30             	add    eax,0x30
c00206ae:	88 c2                	mov    dl,al
c00206b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206b4:	88 10                	mov    BYTE PTR [eax],dl
c00206b6:	90                   	nop
c00206b7:	c3                   	ret    

c00206b8 <FAT::open(char const*, void**, FileOpenMode)>:
c00206b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206c6:	74 0a                	je     c00206d2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00206c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00206d0:	75 0a                	jne    c00206dc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00206d2:	b8 04 00 00 00       	mov    eax,0x4
c00206d7:	e9 fd 00 00 00       	jmp    c00207d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00206dc:	83 ec 08             	sub    esp,0x8
c00206df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00206e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00206ea:	50                   	push   eax
c00206eb:	e8 6b 00 fe ff       	call   c000075b <strcpy>
c00206f0:	83 c4 10             	add    esp,0x10
c00206f3:	83 ec 08             	sub    esp,0x8
c00206f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00206fa:	50                   	push   eax
c00206fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020702:	e8 79 ff ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020712:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020719:	83 e0 01             	and    eax,0x1
c002071c:	74 08                	je     c0020726 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002071e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020726:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002072d:	83 e0 04             	and    eax,0x4
c0020730:	74 10                	je     c0020742 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020732:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002073a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020742:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020749:	83 e0 02             	and    eax,0x2
c002074c:	74 08                	je     c0020756 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002074e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020756:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002075d:	83 e0 08             	and    eax,0x8
c0020760:	74 08                	je     c002076a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020762:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002076a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020771:	83 e0 10             	and    eax,0x10
c0020774:	74 08                	je     c002077e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020776:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	68 50 02 00 00       	push   0x250
c0020786:	e8 91 ee fe ff       	call   c000f61c <malloc>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	89 c2                	mov    edx,eax
c0020790:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020797:	89 10                	mov    DWORD PTR [eax],edx
c0020799:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00207a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00207a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00207aa:	83 ec 04             	sub    esp,0x4
c00207ad:	52                   	push   edx
c00207ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207b2:	52                   	push   edx
c00207b3:	50                   	push   eax
c00207b4:	e8 b9 45 fe ff       	call   c0004d72 <f_open>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00207c3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00207cb:	74 07                	je     c00207d4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00207cd:	b8 01 00 00 00       	mov    eax,0x1
c00207d2:	eb 05                	jmp    c00207d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00207d4:	b8 00 00 00 00       	mov    eax,0x0
c00207d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00207df:	c3                   	ret    

c00207e0 <FAT::openDir(char const*, void**)>:
c00207e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207ee:	74 0a                	je     c00207fa <FAT::openDir(char const*, void**)+0x1a>
c00207f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00207f8:	75 07                	jne    c0020801 <FAT::openDir(char const*, void**)+0x21>
c00207fa:	b8 04 00 00 00       	mov    eax,0x4
c00207ff:	eb 7d                	jmp    c002087e <FAT::openDir(char const*, void**)+0x9e>
c0020801:	83 ec 08             	sub    esp,0x8
c0020804:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002080b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002080f:	50                   	push   eax
c0020810:	e8 46 ff fd ff       	call   c000075b <strcpy>
c0020815:	83 c4 10             	add    esp,0x10
c0020818:	83 ec 08             	sub    esp,0x8
c002081b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002081f:	50                   	push   eax
c0020820:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020827:	e8 54 fe ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	83 ec 0c             	sub    esp,0xc
c0020832:	6a 4c                	push   0x4c
c0020834:	e8 e3 ed fe ff       	call   c000f61c <malloc>
c0020839:	83 c4 10             	add    esp,0x10
c002083c:	89 c2                	mov    edx,eax
c002083e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020845:	89 10                	mov    DWORD PTR [eax],edx
c0020847:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002084e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020850:	83 ec 08             	sub    esp,0x8
c0020853:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020857:	52                   	push   edx
c0020858:	50                   	push   eax
c0020859:	e8 4c 55 fe ff       	call   c0005daa <f_opendir>
c002085e:	83 c4 10             	add    esp,0x10
c0020861:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020868:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020870:	74 07                	je     c0020879 <FAT::openDir(char const*, void**)+0x99>
c0020872:	b8 01 00 00 00       	mov    eax,0x1
c0020877:	eb 05                	jmp    c002087e <FAT::openDir(char const*, void**)+0x9e>
c0020879:	b8 00 00 00 00       	mov    eax,0x0
c002087e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020884:	c3                   	ret    
c0020885:	90                   	nop

c0020886 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020886:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002088c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020894:	75 0a                	jne    c00208a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020896:	b8 04 00 00 00       	mov    eax,0x4
c002089b:	e9 c9 00 00 00       	jmp    c0020969 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208a0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00208a8:	75 0a                	jne    c00208b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00208aa:	b8 04 00 00 00       	mov    eax,0x4
c00208af:	e9 b5 00 00 00       	jmp    c0020969 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208b4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00208bc:	75 0a                	jne    c00208c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00208be:	b8 04 00 00 00       	mov    eax,0x4
c00208c3:	e9 a1 00 00 00       	jmp    c0020969 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208c8:	83 ec 08             	sub    esp,0x8
c00208cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00208d9:	50                   	push   eax
c00208da:	e8 7c fe fd ff       	call   c000075b <strcpy>
c00208df:	83 c4 10             	add    esp,0x10
c00208e2:	83 ec 08             	sub    esp,0x8
c00208e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00208ec:	50                   	push   eax
c00208ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208f4:	e8 87 fd ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c00208f9:	83 c4 10             	add    esp,0x10
c00208fc:	83 ec 08             	sub    esp,0x8
c00208ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020903:	50                   	push   eax
c0020904:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002090b:	50                   	push   eax
c002090c:	e8 58 56 fe ff       	call   c0005f69 <f_stat>
c0020911:	83 c4 10             	add    esp,0x10
c0020914:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002091b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020922:	85 c0                	test   eax,eax
c0020924:	74 07                	je     c002092d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020926:	83 f8 04             	cmp    eax,0x4
c0020929:	74 32                	je     c002095d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002092b:	eb 37                	jmp    c0020964 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002092d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020931:	0f b6 c0             	movzx  eax,al
c0020934:	83 e0 10             	and    eax,0x10
c0020937:	0f 95 c2             	setne  dl
c002093a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020941:	88 10                	mov    BYTE PTR [eax],dl
c0020943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002094a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020951:	89 01                	mov    DWORD PTR [ecx],eax
c0020953:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020956:	b8 00 00 00 00       	mov    eax,0x0
c002095b:	eb 0c                	jmp    c0020969 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002095d:	b8 02 00 00 00       	mov    eax,0x2
c0020962:	eb 05                	jmp    c0020969 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020964:	b8 01 00 00 00       	mov    eax,0x1
c0020969:	81 c4 2c 02 00 00    	add    esp,0x22c
c002096f:	c3                   	ret    

c0020970 <FAT::unlink(char const*)>:
c0020970:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020976:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002097e:	75 07                	jne    c0020987 <FAT::unlink(char const*)+0x17>
c0020980:	b8 04 00 00 00       	mov    eax,0x4
c0020985:	eb 5c                	jmp    c00209e3 <FAT::unlink(char const*)+0x73>
c0020987:	83 ec 08             	sub    esp,0x8
c002098a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020991:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020995:	50                   	push   eax
c0020996:	e8 c0 fd fd ff       	call   c000075b <strcpy>
c002099b:	83 c4 10             	add    esp,0x10
c002099e:	83 ec 08             	sub    esp,0x8
c00209a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209a5:	50                   	push   eax
c00209a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209ad:	e8 ce fc ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c00209b2:	83 c4 10             	add    esp,0x10
c00209b5:	83 ec 0c             	sub    esp,0xc
c00209b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209bc:	50                   	push   eax
c00209bd:	e8 f9 58 fe ff       	call   c00062bb <f_unlink>
c00209c2:	83 c4 10             	add    esp,0x10
c00209c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209cc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00209d3:	85 c0                	test   eax,eax
c00209d5:	75 07                	jne    c00209de <FAT::unlink(char const*)+0x6e>
c00209d7:	b8 00 00 00 00       	mov    eax,0x0
c00209dc:	eb 05                	jmp    c00209e3 <FAT::unlink(char const*)+0x73>
c00209de:	b8 01 00 00 00       	mov    eax,0x1
c00209e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209e9:	c3                   	ret    

c00209ea <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00209ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00209f0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00209f7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00209fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020a02:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020a06:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020a0e:	75 0a                	jne    c0020a1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020a10:	b8 04 00 00 00       	mov    eax,0x4
c0020a15:	e9 1c 01 00 00       	jmp    c0020b36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020a1a:	83 ec 08             	sub    esp,0x8
c0020a1d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a24:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020a28:	50                   	push   eax
c0020a29:	e8 2d fd fd ff       	call   c000075b <strcpy>
c0020a2e:	83 c4 10             	add    esp,0x10
c0020a31:	83 ec 08             	sub    esp,0x8
c0020a34:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020a38:	50                   	push   eax
c0020a39:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a40:	e8 3b fc ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020a50:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020a58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a5d:	83 e0 01             	and    eax,0x1
c0020a60:	74 08                	je     c0020a6a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020a62:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020a6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a6f:	83 e0 02             	and    eax,0x2
c0020a72:	74 08                	je     c0020a7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020a74:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020a7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a81:	83 e0 04             	and    eax,0x4
c0020a84:	74 08                	je     c0020a8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020a86:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a93:	83 e0 08             	and    eax,0x8
c0020a96:	74 08                	je     c0020aa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020a98:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020aa0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020aa5:	83 e0 01             	and    eax,0x1
c0020aa8:	74 08                	je     c0020ab2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020aaa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020ab2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ab7:	83 e0 02             	and    eax,0x2
c0020aba:	74 08                	je     c0020ac4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020abc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020ac4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ac9:	83 e0 04             	and    eax,0x4
c0020acc:	74 08                	je     c0020ad6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020ace:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020ad6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020adb:	83 e0 08             	and    eax,0x8
c0020ade:	74 08                	je     c0020ae8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020ae0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020ae8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020aef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020af6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020afe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020b06:	83 ec 04             	sub    esp,0x4
c0020b09:	52                   	push   edx
c0020b0a:	50                   	push   eax
c0020b0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b0f:	50                   	push   eax
c0020b10:	e8 48 5e fe ff       	call   c000695d <f_chmod>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020b1f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020b26:	85 c0                	test   eax,eax
c0020b28:	75 07                	jne    c0020b31 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020b2a:	b8 00 00 00 00       	mov    eax,0x0
c0020b2f:	eb 05                	jmp    c0020b36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b31:	b8 01 00 00 00       	mov    eax,0x1
c0020b36:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020b3c:	c3                   	ret    
c0020b3d:	90                   	nop

c0020b3e <FAT::rename(char const*, char const*)>:
c0020b3e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020b44:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020b4c:	74 0a                	je     c0020b58 <FAT::rename(char const*, char const*)+0x1a>
c0020b4e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020b56:	75 0a                	jne    c0020b62 <FAT::rename(char const*, char const*)+0x24>
c0020b58:	b8 04 00 00 00       	mov    eax,0x4
c0020b5d:	e9 98 00 00 00       	jmp    c0020bfa <FAT::rename(char const*, char const*)+0xbc>
c0020b62:	83 ec 08             	sub    esp,0x8
c0020b65:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b6c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b73:	50                   	push   eax
c0020b74:	e8 e2 fb fd ff       	call   c000075b <strcpy>
c0020b79:	83 c4 10             	add    esp,0x10
c0020b7c:	83 ec 08             	sub    esp,0x8
c0020b7f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020b86:	50                   	push   eax
c0020b87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b8e:	e8 ed fa ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020b93:	83 c4 10             	add    esp,0x10
c0020b96:	83 ec 08             	sub    esp,0x8
c0020b99:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ba0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ba4:	50                   	push   eax
c0020ba5:	e8 b1 fb fd ff       	call   c000075b <strcpy>
c0020baa:	83 c4 10             	add    esp,0x10
c0020bad:	83 ec 08             	sub    esp,0x8
c0020bb0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bb4:	50                   	push   eax
c0020bb5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020bbc:	e8 bf fa ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020bc1:	83 c4 10             	add    esp,0x10
c0020bc4:	83 ec 08             	sub    esp,0x8
c0020bc7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bcb:	50                   	push   eax
c0020bcc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bd3:	50                   	push   eax
c0020bd4:	e8 91 5a fe ff       	call   c000666a <f_rename>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020be3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020bea:	85 c0                	test   eax,eax
c0020bec:	75 07                	jne    c0020bf5 <FAT::rename(char const*, char const*)+0xb7>
c0020bee:	b8 00 00 00 00       	mov    eax,0x0
c0020bf3:	eb 05                	jmp    c0020bfa <FAT::rename(char const*, char const*)+0xbc>
c0020bf5:	b8 01 00 00 00       	mov    eax,0x1
c0020bfa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020c00:	c3                   	ret    
c0020c01:	90                   	nop

c0020c02 <FAT::mkdir(char const*)>:
c0020c02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c08:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c10:	75 07                	jne    c0020c19 <FAT::mkdir(char const*)+0x17>
c0020c12:	b8 04 00 00 00       	mov    eax,0x4
c0020c17:	eb 5c                	jmp    c0020c75 <FAT::mkdir(char const*)+0x73>
c0020c19:	83 ec 08             	sub    esp,0x8
c0020c1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c27:	50                   	push   eax
c0020c28:	e8 2e fb fd ff       	call   c000075b <strcpy>
c0020c2d:	83 c4 10             	add    esp,0x10
c0020c30:	83 ec 08             	sub    esp,0x8
c0020c33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c37:	50                   	push   eax
c0020c38:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c3f:	e8 3c fa ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020c44:	83 c4 10             	add    esp,0x10
c0020c47:	83 ec 0c             	sub    esp,0xc
c0020c4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c4e:	50                   	push   eax
c0020c4f:	e8 ea 57 fe ff       	call   c000643e <f_mkdir>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c5e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c65:	85 c0                	test   eax,eax
c0020c67:	75 07                	jne    c0020c70 <FAT::mkdir(char const*)+0x6e>
c0020c69:	b8 00 00 00 00       	mov    eax,0x0
c0020c6e:	eb 05                	jmp    c0020c75 <FAT::mkdir(char const*)+0x73>
c0020c70:	b8 01 00 00 00       	mov    eax,0x1
c0020c75:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c7b:	c3                   	ret    

c0020c7c <FAT::exists(char const*)>:
c0020c7c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c82:	83 ec 08             	sub    esp,0x8
c0020c85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c90:	50                   	push   eax
c0020c91:	e8 c5 fa fd ff       	call   c000075b <strcpy>
c0020c96:	83 c4 10             	add    esp,0x10
c0020c99:	83 ec 08             	sub    esp,0x8
c0020c9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ca0:	50                   	push   eax
c0020ca1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ca8:	e8 d3 f9 ff ff       	call   c0020680 <FAT::fixFilepath(char*)>
c0020cad:	83 c4 10             	add    esp,0x10
c0020cb0:	83 ec 08             	sub    esp,0x8
c0020cb3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020cba:	50                   	push   eax
c0020cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cbf:	50                   	push   eax
c0020cc0:	e8 a4 52 fe ff       	call   c0005f69 <f_stat>
c0020cc5:	83 c4 10             	add    esp,0x10
c0020cc8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ccf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cd6:	85 c0                	test   eax,eax
c0020cd8:	75 04                	jne    c0020cde <FAT::exists(char const*)+0x62>
c0020cda:	b0 01                	mov    al,0x1
c0020cdc:	eb 02                	jmp    c0020ce0 <FAT::exists(char const*)+0x64>
c0020cde:	b0 00                	mov    al,0x0
c0020ce0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ce6:	c3                   	ret    
c0020ce7:	90                   	nop

c0020ce8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020ce8:	b8 08 00 00 00       	mov    eax,0x8
c0020ced:	c3                   	ret    

c0020cee <ISO9660::seek(void*, unsigned long long)>:
c0020cee:	53                   	push   ebx
c0020cef:	b8 04 00 00 00       	mov    eax,0x4
c0020cf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020cf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020cfc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d00:	85 d2                	test   edx,edx
c0020d02:	74 17                	je     c0020d1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d04:	89 c8                	mov    eax,ecx
c0020d06:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020d09:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020d0c:	b8 01 00 00 00       	mov    eax,0x1
c0020d11:	73 08                	jae    c0020d1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d13:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020d16:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020d19:	31 c0                	xor    eax,eax
c0020d1b:	5b                   	pop    ebx
c0020d1c:	c3                   	ret    
c0020d1d:	90                   	nop

c0020d1e <ISO9660::tell(void*, unsigned long long*)>:
c0020d1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d26:	85 d2                	test   edx,edx
c0020d28:	74 12                	je     c0020d3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d2a:	85 c0                	test   eax,eax
c0020d2c:	74 0e                	je     c0020d3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d2e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020d31:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020d34:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d37:	89 10                	mov    DWORD PTR [eax],edx
c0020d39:	31 c0                	xor    eax,eax
c0020d3b:	c3                   	ret    
c0020d3c:	b8 04 00 00 00       	mov    eax,0x4
c0020d41:	c3                   	ret    

c0020d42 <ISO9660::getName()>:
c0020d42:	b8 d4 be 02 c0       	mov    eax,0xc002bed4
c0020d47:	c3                   	ret    

c0020d48 <ISO9660::stat(void*, unsigned long long*)>:
c0020d48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d50:	85 d2                	test   edx,edx
c0020d52:	74 12                	je     c0020d66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d54:	85 c0                	test   eax,eax
c0020d56:	74 0e                	je     c0020d66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d58:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020d5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020d5e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d61:	89 10                	mov    DWORD PTR [eax],edx
c0020d63:	31 c0                	xor    eax,eax
c0020d65:	c3                   	ret    
c0020d66:	b8 04 00 00 00       	mov    eax,0x4
c0020d6b:	c3                   	ret    

c0020d6c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d6c:	b8 01 00 00 00       	mov    eax,0x1
c0020d71:	c3                   	ret    

c0020d72 <ISO9660::unlink(char const*)>:
c0020d72:	b8 01 00 00 00       	mov    eax,0x1
c0020d77:	c3                   	ret    

c0020d78 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020d78:	b8 01 00 00 00       	mov    eax,0x1
c0020d7d:	c3                   	ret    

c0020d7e <ISO9660::rename(char const*, char const*)>:
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	c3                   	ret    

c0020d84 <ISO9660::mkdir(char const*)>:
c0020d84:	b8 01 00 00 00       	mov    eax,0x1
c0020d89:	c3                   	ret    

c0020d8a <ISO9660::close(void*)>:
c0020d8a:	83 ec 0c             	sub    esp,0xc
c0020d8d:	b8 04 00 00 00       	mov    eax,0x4
c0020d92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d96:	85 d2                	test   edx,edx
c0020d98:	74 0e                	je     c0020da8 <ISO9660::close(void*)+0x1e>
c0020d9a:	83 ec 0c             	sub    esp,0xc
c0020d9d:	52                   	push   edx
c0020d9e:	e8 89 e8 fe ff       	call   c000f62c <free>
c0020da3:	83 c4 10             	add    esp,0x10
c0020da6:	31 c0                	xor    eax,eax
c0020da8:	83 c4 0c             	add    esp,0xc
c0020dab:	c3                   	ret    

c0020dac <ISO9660::closeDir(void*)>:
c0020dac:	83 ec 0c             	sub    esp,0xc
c0020daf:	b8 04 00 00 00       	mov    eax,0x4
c0020db4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020db8:	85 d2                	test   edx,edx
c0020dba:	74 0e                	je     c0020dca <ISO9660::closeDir(void*)+0x1e>
c0020dbc:	83 ec 0c             	sub    esp,0xc
c0020dbf:	52                   	push   edx
c0020dc0:	e8 67 e8 fe ff       	call   c000f62c <free>
c0020dc5:	83 c4 10             	add    esp,0x10
c0020dc8:	31 c0                	xor    eax,eax
c0020dca:	83 c4 0c             	add    esp,0xc
c0020dcd:	c3                   	ret    

c0020dce <ISO9660::~ISO9660()>:
c0020dce:	83 ec 0c             	sub    esp,0xc
c0020dd1:	ba 38 bf 02 c0       	mov    edx,0xc002bf38
c0020dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dda:	89 10                	mov    DWORD PTR [eax],edx
c0020ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de0:	83 ec 0c             	sub    esp,0xc
c0020de3:	50                   	push   eax
c0020de4:	e8 2b 1e ff ff       	call   c0012c14 <Filesystem::~Filesystem()>
c0020de9:	83 c4 10             	add    esp,0x10
c0020dec:	90                   	nop
c0020ded:	83 c4 0c             	add    esp,0xc
c0020df0:	c3                   	ret    
c0020df1:	90                   	nop

c0020df2 <ISO9660::~ISO9660()>:
c0020df2:	83 ec 0c             	sub    esp,0xc
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dfc:	e8 cd ff ff ff       	call   c0020dce <ISO9660::~ISO9660()>
c0020e01:	83 c4 10             	add    esp,0x10
c0020e04:	83 ec 08             	sub    esp,0x8
c0020e07:	6a 08                	push   0x8
c0020e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e0d:	e8 f9 19 ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0020e12:	83 c4 10             	add    esp,0x10
c0020e15:	83 c4 0c             	add    esp,0xc
c0020e18:	c3                   	ret    

c0020e19 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020e19:	55                   	push   ebp
c0020e1a:	31 c9                	xor    ecx,ecx
c0020e1c:	57                   	push   edi
c0020e1d:	56                   	push   esi
c0020e1e:	53                   	push   ebx
c0020e1f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020e23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020e27:	89 eb                	mov    ebx,ebp
c0020e29:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020e2d:	39 ce                	cmp    esi,ecx
c0020e2f:	7e 17                	jle    c0020e48 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020e31:	31 d2                	xor    edx,edx
c0020e33:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020e37:	7d 13                	jge    c0020e4c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020e39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e3d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020e40:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020e43:	75 0d                	jne    c0020e52 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020e45:	42                   	inc    edx
c0020e46:	eb eb                	jmp    c0020e33 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020e48:	31 c0                	xor    eax,eax
c0020e4a:	eb 0a                	jmp    c0020e56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e4c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020e50:	eb 04                	jmp    c0020e56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e52:	41                   	inc    ecx
c0020e53:	43                   	inc    ebx
c0020e54:	eb d7                	jmp    c0020e2d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020e56:	5b                   	pop    ebx
c0020e57:	5e                   	pop    esi
c0020e58:	5f                   	pop    edi
c0020e59:	5d                   	pop    ebp
c0020e5a:	c3                   	ret    

c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020e5b:	56                   	push   esi
c0020e5c:	53                   	push   ebx
c0020e5d:	52                   	push   edx
c0020e5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020e66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e6a:	39 0d 80 11 03 c0    	cmp    DWORD PTR ds:0xc0031180,ecx
c0020e70:	75 08                	jne    c0020e7a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020e72:	38 05 d4 cf 02 c0    	cmp    BYTE PTR ds:0xc002cfd4,al
c0020e78:	74 2b                	je     c0020ea5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020e7a:	83 ec 0c             	sub    esp,0xc
c0020e7d:	a2 d4 cf 02 c0       	mov    ds:0xc002cfd4,al
c0020e82:	68 a0 11 03 c0       	push   0xc00311a0
c0020e87:	0f be c0             	movsx  eax,al
c0020e8a:	6a 01                	push   0x1
c0020e8c:	89 0d 80 11 03 c0    	mov    DWORD PTR ds:0xc0031180,ecx
c0020e92:	31 db                	xor    ebx,ebx
c0020e94:	53                   	push   ebx
c0020e95:	51                   	push   ecx
c0020e96:	ff 34 85 5c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20a4]
c0020e9d:	e8 06 52 ff ff       	call   c00160a8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020ea2:	83 c4 20             	add    esp,0x20
c0020ea5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020ead:	c7 44 24 14 a0 11 03 c0 	mov    DWORD PTR [esp+0x14],0xc00311a0
c0020eb5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020eb9:	58                   	pop    eax
c0020eba:	5b                   	pop    ebx
c0020ebb:	5e                   	pop    esi
c0020ebc:	e9 df f7 fd ff       	jmp    c00006a0 <memcpy>
c0020ec1:	90                   	nop

c0020ec2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020ec2:	81 ec 10 08 00 00    	sub    esp,0x810
c0020ec8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020ecf:	83 c0 41             	add    eax,0x41
c0020ed2:	0f be c0             	movsx  eax,al
c0020ed5:	50                   	push   eax
c0020ed6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eda:	50                   	push   eax
c0020edb:	6a 10                	push   0x10
c0020edd:	e8 79 ff ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ee2:	83 c4 10             	add    esp,0x10
c0020ee5:	31 c0                	xor    eax,eax
c0020ee7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020eec:	75 1d                	jne    c0020f0b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020eee:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020ef3:	75 16                	jne    c0020f0b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ef5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020efa:	75 0f                	jne    c0020f0b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020efc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020f01:	75 08                	jne    c0020f0b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f03:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020f08:	0f 94 c0             	sete   al
c0020f0b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020f11:	c3                   	ret    

c0020f12 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020f12:	55                   	push   ebp
c0020f13:	57                   	push   edi
c0020f14:	56                   	push   esi
c0020f15:	53                   	push   ebx
c0020f16:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020f1c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020f23:	85 ed                	test   ebp,ebp
c0020f25:	0f 84 d6 01 00 00    	je     c0021101 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f2b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020f33:	0f 84 c8 01 00 00    	je     c0021101 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f39:	b8 01 00 00 00       	mov    eax,0x1
c0020f3e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020f42:	0f 85 be 01 00 00    	jne    c0021106 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020f48:	31 d2                	xor    edx,edx
c0020f4a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020f51:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020f54:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020f57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f5b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f61:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f65:	01 f0                	add    eax,esi
c0020f67:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020f6a:	11 fa                	adc    edx,edi
c0020f6c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020f70:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020f74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020f78:	19 d1                	sbb    ecx,edx
c0020f7a:	72 0a                	jb     c0020f86 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f84:	eb 13                	jmp    c0020f99 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020f86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f8e:	29 f0                	sub    eax,esi
c0020f90:	19 fa                	sbb    edx,edi
c0020f92:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020f9c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020f9f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020fa3:	51                   	push   ecx
c0020fa4:	c1 e0 0b             	shl    eax,0xb
c0020fa7:	01 c6                	add    esi,eax
c0020fa9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020fad:	11 d7                	adc    edi,edx
c0020faf:	50                   	push   eax
c0020fb0:	89 fa                	mov    edx,edi
c0020fb2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020fb6:	89 f0                	mov    eax,esi
c0020fb8:	53                   	push   ebx
c0020fb9:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020fbd:	50                   	push   eax
c0020fbe:	e8 98 fe ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020fc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020fc7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020fca:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020fce:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	b8 00 08 00 00       	mov    eax,0x800
c0020fdc:	29 d0                	sub    eax,edx
c0020fde:	39 c1                	cmp    ecx,eax
c0020fe0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020fe4:	83 d9 00             	sbb    ecx,0x0
c0020fe7:	7d 1c                	jge    c0021005 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020fe9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020fee:	75 12                	jne    c0021002 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020ff0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ff7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ffd:	e9 fb 00 00 00       	jmp    c00210fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021002:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021005:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021008:	31 d2                	xor    edx,edx
c002100a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002100e:	39 c2                	cmp    edx,eax
c0021010:	7d 14                	jge    c0021026 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021012:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021019:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002101d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021020:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021023:	42                   	inc    edx
c0021024:	eb e8                	jmp    c002100e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021026:	89 c3                	mov    ebx,eax
c0021028:	85 c0                	test   eax,eax
c002102a:	79 02                	jns    c002102e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002102c:	31 db                	xor    ebx,ebx
c002102e:	99                   	cdq    
c002102f:	01 c3                	add    ebx,eax
c0021031:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021038:	01 c6                	add    esi,eax
c002103a:	11 d7                	adc    edi,edx
c002103c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021040:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021044:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021047:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002104b:	29 c6                	sub    esi,eax
c002104d:	19 d7                	sbb    edi,edx
c002104f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021052:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021056:	b8 ff 07 00 00       	mov    eax,0x7ff
c002105b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002105e:	b8 00 00 00 00       	mov    eax,0x0
c0021063:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021067:	7d 3e                	jge    c00210a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021069:	52                   	push   edx
c002106a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002106e:	50                   	push   eax
c002106f:	53                   	push   ebx
c0021070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021074:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021078:	0f ac d0 0b          	shrd   eax,edx,0xb
c002107c:	50                   	push   eax
c002107d:	e8 d9 fd ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021082:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002108a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002108f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021095:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002109d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00210a2:	83 c4 10             	add    esp,0x10
c00210a5:	eb af                	jmp    c0021056 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00210a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210ab:	0b 04 24             	or     eax,DWORD PTR [esp]
c00210ae:	74 32                	je     c00210e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00210b0:	50                   	push   eax
c00210b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210b5:	50                   	push   eax
c00210b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210ba:	50                   	push   eax
c00210bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00210bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00210c3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00210c7:	56                   	push   esi
c00210c8:	e8 8e fd ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210cd:	83 c4 0c             	add    esp,0xc
c00210d0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00210d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210d8:	50                   	push   eax
c00210d9:	53                   	push   ebx
c00210da:	e8 c1 f5 fd ff       	call   c00006a0 <memcpy>
c00210df:	83 c4 10             	add    esp,0x10
c00210e2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00210e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00210ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00210f1:	89 38                	mov    DWORD PTR [eax],edi
c00210f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210f7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00210fa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00210fd:	31 c0                	xor    eax,eax
c00210ff:	eb 05                	jmp    c0021106 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021101:	b8 04 00 00 00       	mov    eax,0x4
c0021106:	81 c4 2c 08 00 00    	add    esp,0x82c
c002110c:	5b                   	pop    ebx
c002110d:	5e                   	pop    esi
c002110e:	5f                   	pop    edi
c002110f:	5d                   	pop    ebp
c0021110:	c3                   	ret    
c0021111:	90                   	nop

c0021112 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021112:	55                   	push   ebp
c0021113:	57                   	push   edi
c0021114:	56                   	push   esi
c0021115:	53                   	push   ebx
c0021116:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002111c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021123:	85 f6                	test   esi,esi
c0021125:	0f 84 64 02 00 00    	je     c002138f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002112b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021133:	0f 84 56 02 00 00    	je     c002138f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021139:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002113c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002113f:	75 0a                	jne    c002114b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021141:	b8 07 00 00 00       	mov    eax,0x7
c0021146:	e9 49 02 00 00       	jmp    c0021394 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002114b:	50                   	push   eax
c002114c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021150:	50                   	push   eax
c0021151:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021158:	53                   	push   ebx
c0021159:	8b 06                	mov    eax,DWORD PTR [esi]
c002115b:	c1 e0 0b             	shl    eax,0xb
c002115e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021161:	c1 e8 0b             	shr    eax,0xb
c0021164:	50                   	push   eax
c0021165:	e8 f1 fc ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002116a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002116d:	83 c4 10             	add    esp,0x10
c0021170:	89 c1                	mov    ecx,eax
c0021172:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021175:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002117b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002117e:	84 db                	test   bl,bl
c0021180:	0f 85 90 00 00 00    	jne    c0021216 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021186:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002118c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021192:	29 c7                	sub    edi,eax
c0021194:	89 fb                	mov    ebx,edi
c0021196:	c1 fb 1f             	sar    ebx,0x1f
c0021199:	01 f8                	add    eax,edi
c002119b:	11 da                	adc    edx,ebx
c002119d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211a5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00211a8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00211ab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00211ae:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00211b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00211b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211b8:	89 d8                	mov    eax,ebx
c00211ba:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00211bd:	ba 00 00 00 00       	mov    edx,0x0
c00211c2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00211c6:	b8 00 00 00 00       	mov    eax,0x0
c00211cb:	73 0b                	jae    c00211d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00211cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211d4:	29 f8                	sub    eax,edi
c00211d6:	19 da                	sbb    edx,ebx
c00211d8:	89 d3                	mov    ebx,edx
c00211da:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00211dd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00211e0:	09 c3                	or     ebx,eax
c00211e2:	0f 84 59 ff ff ff    	je     c0021141 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00211e8:	55                   	push   ebp
c00211e9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00211ed:	50                   	push   eax
c00211ee:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00211f5:	53                   	push   ebx
c00211f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00211f8:	c1 e0 0b             	shl    eax,0xb
c00211fb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00211ff:	c1 e8 0b             	shr    eax,0xb
c0021202:	50                   	push   eax
c0021203:	e8 53 fc ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021208:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002120b:	83 c4 10             	add    esp,0x10
c002120e:	25 ff 07 00 00       	and    eax,0x7ff
c0021213:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021216:	57                   	push   edi
c0021217:	6a 28                	push   0x28
c0021219:	6a 00                	push   0x0
c002121b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002121f:	50                   	push   eax
c0021220:	e8 97 f4 fd ff       	call   c00006bc <memset>
c0021225:	31 d2                	xor    edx,edx
c0021227:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c002122a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021230:	89 f8                	mov    eax,edi
c0021232:	83 c0 21             	add    eax,0x21
c0021235:	83 d2 00             	adc    edx,0x0
c0021238:	89 c7                	mov    edi,eax
c002123a:	89 d5                	mov    ebp,edx
c002123c:	83 c4 10             	add    esp,0x10
c002123f:	31 c9                	xor    ecx,ecx
c0021241:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021248:	83 f9 28             	cmp    ecx,0x28
c002124b:	88 04 24             	mov    BYTE PTR [esp],al
c002124e:	0f 94 c2             	sete   dl
c0021251:	88 d0                	mov    al,dl
c0021253:	ba ff 07 00 00       	mov    edx,0x7ff
c0021258:	39 fa                	cmp    edx,edi
c002125a:	ba 00 00 00 00       	mov    edx,0x0
c002125f:	19 ea                	sbb    edx,ebp
c0021261:	0f 92 c2             	setb   dl
c0021264:	09 c2                	or     edx,eax
c0021266:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002126a:	0f 94 c0             	sete   al
c002126d:	08 d0                	or     al,dl
c002126f:	75 16                	jne    c0021287 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021271:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021275:	74 10                	je     c0021287 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021277:	8a 04 24             	mov    al,BYTE PTR [esp]
c002127a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002127e:	41                   	inc    ecx
c002127f:	83 c7 01             	add    edi,0x1
c0021282:	83 d5 00             	adc    ebp,0x0
c0021285:	eb ba                	jmp    c0021241 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021287:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002128e:	83 ec 0c             	sub    esp,0xc
c0021291:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021295:	57                   	push   edi
c0021296:	e8 3e f4 fd ff       	call   c00006d9 <strlen>
c002129b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00212a3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212a7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00212ae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00212b1:	5a                   	pop    edx
c00212b2:	25 ff 07 00 00       	and    eax,0x7ff
c00212b7:	01 c8                	add    eax,ecx
c00212b9:	59                   	pop    ecx
c00212ba:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00212c0:	83 e0 02             	and    eax,0x2
c00212c3:	3c 01                	cmp    al,0x1
c00212c5:	19 c0                	sbb    eax,eax
c00212c7:	83 c0 02             	add    eax,0x2
c00212ca:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212ce:	57                   	push   edi
c00212cf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00212d3:	50                   	push   eax
c00212d4:	e8 82 f4 fd ff       	call   c000075b <strcpy>
c00212d9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00212dd:	83 c4 10             	add    esp,0x10
c00212e0:	84 c0                	test   al,al
c00212e2:	75 21                	jne    c0021305 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00212e4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00212ec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00212f4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00212fc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021303:	eb 28                	jmp    c002132d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021305:	fe c8                	dec    al
c0021307:	75 24                	jne    c002132d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021309:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021311:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021319:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021321:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021328:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002132d:	0f b6 fb             	movzx  edi,bl
c0021330:	31 db                	xor    ebx,ebx
c0021332:	50                   	push   eax
c0021333:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c002133a:	8d 44 24 48          	lea    eax,[esp+0x48]
c002133e:	50                   	push   eax
c002133f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021346:	e8 55 f3 fd ff       	call   c00006a0 <memcpy>
c002134b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021352:	89 f9                	mov    ecx,edi
c0021354:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002135a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c002135d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021360:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021363:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	39 c7                	cmp    edi,eax
c002136b:	89 df                	mov    edi,ebx
c002136d:	19 d7                	sbb    edi,edx
c002136f:	72 10                	jb     c0021381 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021371:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021378:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002137f:	eb 0a                	jmp    c002138b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021381:	29 c8                	sub    eax,ecx
c0021383:	19 da                	sbb    edx,ebx
c0021385:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021388:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002138b:	31 c0                	xor    eax,eax
c002138d:	eb 05                	jmp    c0021394 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002138f:	b8 04 00 00 00       	mov    eax,0x4
c0021394:	81 c4 5c 09 00 00    	add    esp,0x95c
c002139a:	5b                   	pop    ebx
c002139b:	5e                   	pop    esi
c002139c:	5f                   	pop    edi
c002139d:	5d                   	pop    ebp
c002139e:	c3                   	ret    

c002139f <readRoot(unsigned int*, unsigned int*, char)>:
c002139f:	81 ec 40 08 00 00    	sub    esp,0x840
c00213a5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00213ad:	50                   	push   eax
c00213ae:	8d 44 24 38          	lea    eax,[esp+0x38]
c00213b2:	50                   	push   eax
c00213b3:	6a 10                	push   0x10
c00213b5:	e8 a1 fa ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213ba:	83 c4 0c             	add    esp,0xc
c00213bd:	6a 22                	push   0x22
c00213bf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00213c6:	50                   	push   eax
c00213c7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00213cb:	50                   	push   eax
c00213cc:	e8 cf f2 fd ff       	call   c00006a0 <memcpy>
c00213d1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213dc:	89 10                	mov    DWORD PTR [eax],edx
c00213de:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00213e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00213e9:	89 10                	mov    DWORD PTR [eax],edx
c00213eb:	b0 01                	mov    al,0x1
c00213ed:	81 c4 4c 08 00 00    	add    esp,0x84c
c00213f3:	c3                   	ret    

c00213f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00213f4:	55                   	push   ebp
c00213f5:	57                   	push   edi
c00213f6:	56                   	push   esi
c00213f7:	53                   	push   ebx
c00213f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213fe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021405:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002140c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021410:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021414:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021418:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002141c:	75 03                	jne    c0021421 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002141e:	83 c3 02             	add    ebx,0x2
c0021421:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021424:	75 03                	jne    c0021429 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021426:	43                   	inc    ebx
c0021427:	eb f8                	jmp    c0021421 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021429:	51                   	push   ecx
c002142a:	68 00 01 00 00       	push   0x100
c002142f:	6a 00                	push   0x0
c0021431:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021435:	50                   	push   eax
c0021436:	e8 81 f2 fd ff       	call   c00006bc <memset>
c002143b:	83 c4 10             	add    esp,0x10
c002143e:	31 d2                	xor    edx,edx
c0021440:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021443:	84 c0                	test   al,al
c0021445:	74 21                	je     c0021468 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021447:	3c 2f                	cmp    al,0x2f
c0021449:	75 0b                	jne    c0021456 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002144b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002144f:	bd 01 00 00 00       	mov    ebp,0x1
c0021454:	eb 14                	jmp    c002146a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021456:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021459:	80 f9 19             	cmp    cl,0x19
c002145c:	77 03                	ja     c0021461 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002145e:	83 e8 20             	sub    eax,0x20
c0021461:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021465:	42                   	inc    edx
c0021466:	eb d8                	jmp    c0021440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021468:	31 ed                	xor    ebp,ebp
c002146a:	83 ec 0c             	sub    esp,0xc
c002146d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021474:	e8 a3 e1 fe ff       	call   c000f61c <malloc>
c0021479:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021480:	89 c6                	mov    esi,eax
c0021482:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021488:	c1 ef 0b             	shr    edi,0xb
c002148b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021492:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021496:	83 c4 10             	add    esp,0x10
c0021499:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002149e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214a2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00214a9:	74 28                	je     c00214d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00214ab:	52                   	push   edx
c00214ac:	57                   	push   edi
c00214ad:	50                   	push   eax
c00214ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214b2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00214b9:	e8 9d f9 ff ff       	call   c0020e5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214c2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00214c9:	05 00 08 00 00       	add    eax,0x800
c00214ce:	83 c4 10             	add    esp,0x10
c00214d1:	eb cb                	jmp    c002149e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00214d3:	83 ec 0c             	sub    esp,0xc
c00214d6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00214da:	57                   	push   edi
c00214db:	e8 f9 f1 fd ff       	call   c00006d9 <strlen>
c00214e0:	50                   	push   eax
c00214e1:	57                   	push   edi
c00214e2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00214e9:	56                   	push   esi
c00214ea:	e8 2a f9 ff ff       	call   c0020e19 <__memmem(unsigned char*, int, unsigned char*, int)>
c00214ef:	83 c4 20             	add    esp,0x20
c00214f2:	85 c0                	test   eax,eax
c00214f4:	75 13                	jne    c0021509 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00214f6:	83 ec 0c             	sub    esp,0xc
c00214f9:	56                   	push   esi
c00214fa:	e8 2d e1 fe ff       	call   c000f62c <free>
c00214ff:	83 c4 10             	add    esp,0x10
c0021502:	31 c0                	xor    eax,eax
c0021504:	e9 b3 00 00 00       	jmp    c00215bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021509:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002150d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021511:	c1 e7 08             	shl    edi,0x8
c0021514:	c1 e2 10             	shl    edx,0x10
c0021517:	09 d7                	or     edi,edx
c0021519:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002151d:	09 d7                	or     edi,edx
c002151f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021523:	c1 e2 18             	shl    edx,0x18
c0021526:	09 d7                	or     edi,edx
c0021528:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002152c:	89 d1                	mov    ecx,edx
c002152e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021532:	c1 e1 08             	shl    ecx,0x8
c0021535:	c1 e2 10             	shl    edx,0x10
c0021538:	09 ca                	or     edx,ecx
c002153a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002153e:	09 ca                	or     edx,ecx
c0021540:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021544:	c1 e1 18             	shl    ecx,0x18
c0021547:	09 ca                	or     edx,ecx
c0021549:	89 e9                	mov    ecx,ebp
c002154b:	84 c9                	test   cl,cl
c002154d:	74 3c                	je     c002158b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002154f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021553:	83 ec 0c             	sub    esp,0xc
c0021556:	56                   	push   esi
c0021557:	e8 d0 e0 fe ff       	call   c000f62c <free>
c002155c:	83 c4 0c             	add    esp,0xc
c002155f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021566:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002156b:	50                   	push   eax
c002156c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021573:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002157a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002157e:	52                   	push   edx
c002157f:	57                   	push   edi
c0021580:	53                   	push   ebx
c0021581:	e8 6e fe ff ff       	call   c00213f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021586:	83 c4 20             	add    esp,0x20
c0021589:	eb 31                	jmp    c00215bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002158b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002158e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021595:	d0 e8                	shr    al,1
c0021597:	89 3b                	mov    DWORD PTR [ebx],edi
c0021599:	83 e0 01             	and    eax,0x1
c002159c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00215a3:	83 ec 0c             	sub    esp,0xc
c00215a6:	89 13                	mov    DWORD PTR [ebx],edx
c00215a8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00215af:	89 03                	mov    DWORD PTR [ebx],eax
c00215b1:	56                   	push   esi
c00215b2:	e8 75 e0 fe ff       	call   c000f62c <free>
c00215b7:	83 c4 10             	add    esp,0x10
c00215ba:	b0 01                	mov    al,0x1
c00215bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215c2:	5b                   	pop    ebx
c00215c3:	5e                   	pop    esi
c00215c4:	5f                   	pop    edi
c00215c5:	5d                   	pop    ebp
c00215c6:	c3                   	ret    

c00215c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00215c7:	55                   	push   ebp
c00215c8:	57                   	push   edi
c00215c9:	56                   	push   esi
c00215ca:	53                   	push   ebx
c00215cb:	83 ec 20             	sub    esp,0x20
c00215ce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00215d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00215d6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00215da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00215e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00215ea:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00215ef:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00215f5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00215fb:	57                   	push   edi
c00215fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021600:	50                   	push   eax
c0021601:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021605:	50                   	push   eax
c0021606:	e8 94 fd ff ff       	call   c002139f <readRoot(unsigned int*, unsigned int*, char)>
c002160b:	5a                   	pop    edx
c002160c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021610:	e8 c4 f0 fd ff       	call   c00006d9 <strlen>
c0021615:	83 c4 10             	add    esp,0x10
c0021618:	83 f8 03             	cmp    eax,0x3
c002161b:	77 17                	ja     c0021634 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002161d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021621:	89 03                	mov    DWORD PTR [ebx],eax
c0021623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021627:	89 06                	mov    DWORD PTR [esi],eax
c0021629:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021630:	b0 01                	mov    al,0x1
c0021632:	eb 19                	jmp    c002164d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021634:	50                   	push   eax
c0021635:	55                   	push   ebp
c0021636:	57                   	push   edi
c0021637:	56                   	push   esi
c0021638:	53                   	push   ebx
c0021639:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002163d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021641:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021645:	e8 aa fd ff ff       	call   c00213f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002164a:	83 c4 20             	add    esp,0x20
c002164d:	83 c4 1c             	add    esp,0x1c
c0021650:	5b                   	pop    ebx
c0021651:	5e                   	pop    esi
c0021652:	5f                   	pop    edi
c0021653:	5d                   	pop    ebp
c0021654:	c3                   	ret    
c0021655:	90                   	nop

c0021656 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021656:	57                   	push   edi
c0021657:	56                   	push   esi
c0021658:	53                   	push   ebx
c0021659:	83 ec 10             	sub    esp,0x10
c002165c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021660:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021664:	85 ff                	test   edi,edi
c0021666:	0f 84 9d 00 00 00    	je     c0021709 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002166c:	85 f6                	test   esi,esi
c002166e:	0f 84 95 00 00 00    	je     c0021709 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021674:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021679:	74 17                	je     c0021692 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002167b:	83 ec 0c             	sub    esp,0xc
c002167e:	68 ef be 02 c0       	push   0xc002beef
c0021683:	e8 63 12 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0021688:	83 c4 10             	add    esp,0x10
c002168b:	b8 03 00 00 00       	mov    eax,0x3
c0021690:	eb 7c                	jmp    c002170e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021692:	83 ec 0c             	sub    esp,0xc
c0021695:	6a 1c                	push   0x1c
c0021697:	e8 80 df fe ff       	call   c000f61c <malloc>
c002169c:	89 07                	mov    DWORD PTR [edi],eax
c002169e:	89 c3                	mov    ebx,eax
c00216a0:	58                   	pop    eax
c00216a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216a5:	50                   	push   eax
c00216a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00216a9:	50                   	push   eax
c00216aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216ae:	50                   	push   eax
c00216af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216b3:	50                   	push   eax
c00216b4:	56                   	push   esi
c00216b5:	e8 0d ff ff ff       	call   c00215c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00216ba:	83 c4 20             	add    esp,0x20
c00216bd:	84 c0                	test   al,al
c00216bf:	74 07                	je     c00216c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00216c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00216c6:	74 0b                	je     c00216d3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00216c8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00216cc:	b8 01 00 00 00       	mov    eax,0x1
c00216d1:	eb 3b                	jmp    c002170e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00216d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216d7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00216db:	89 03                	mov    DWORD PTR [ebx],eax
c00216dd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00216e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00216ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00216f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00216f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021700:	8a 06                	mov    al,BYTE PTR [esi]
c0021702:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021705:	31 c0                	xor    eax,eax
c0021707:	eb 05                	jmp    c002170e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021709:	b8 04 00 00 00       	mov    eax,0x4
c002170e:	83 c4 10             	add    esp,0x10
c0021711:	5b                   	pop    ebx
c0021712:	5e                   	pop    esi
c0021713:	5f                   	pop    edi
c0021714:	c3                   	ret    
c0021715:	90                   	nop

c0021716 <ISO9660::exists(char const*)>:
c0021716:	83 ec 28             	sub    esp,0x28
c0021719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002171d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021721:	52                   	push   edx
c0021722:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021725:	52                   	push   edx
c0021726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002172a:	52                   	push   edx
c002172b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002172f:	52                   	push   edx
c0021730:	50                   	push   eax
c0021731:	e8 91 fe ff ff       	call   c00215c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021736:	83 c4 3c             	add    esp,0x3c
c0021739:	c3                   	ret    

c002173a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002173a:	56                   	push   esi
c002173b:	53                   	push   ebx
c002173c:	83 ec 14             	sub    esp,0x14
c002173f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021743:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021747:	85 db                	test   ebx,ebx
c0021749:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002174d:	0f 94 c2             	sete   dl
c0021750:	85 f6                	test   esi,esi
c0021752:	0f 94 c0             	sete   al
c0021755:	08 c2                	or     dl,al
c0021757:	75 68                	jne    c00217c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021759:	85 c9                	test   ecx,ecx
c002175b:	74 64                	je     c00217c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002175d:	83 ec 0c             	sub    esp,0xc
c0021760:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021763:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021767:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002176d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021774:	50                   	push   eax
c0021775:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021778:	50                   	push   eax
c0021779:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002177d:	50                   	push   eax
c002177e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021782:	50                   	push   eax
c0021783:	51                   	push   ecx
c0021784:	e8 3e fe ff ff       	call   c00215c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021789:	83 c4 20             	add    esp,0x20
c002178c:	ba 01 00 00 00       	mov    edx,0x1
c0021791:	84 c0                	test   al,al
c0021793:	74 31                	je     c00217c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021795:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021799:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217a0:	89 03                	mov    DWORD PTR [ebx],eax
c00217a2:	ba 00 00 00 00       	mov    edx,0x0
c00217a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217ab:	85 c0                	test   eax,eax
c00217ad:	0f 95 06             	setne  BYTE PTR [esi]
c00217b0:	74 14                	je     c00217c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217b2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00217b8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217bf:	eb 05                	jmp    c00217c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217c1:	ba 04 00 00 00       	mov    edx,0x4
c00217c6:	83 c4 14             	add    esp,0x14
c00217c9:	89 d0                	mov    eax,edx
c00217cb:	5b                   	pop    ebx
c00217cc:	5e                   	pop    esi
c00217cd:	c3                   	ret    

c00217ce <ISO9660::openDir(char const*, void**)>:
c00217ce:	57                   	push   edi
c00217cf:	56                   	push   esi
c00217d0:	53                   	push   ebx
c00217d1:	83 ec 10             	sub    esp,0x10
c00217d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00217dc:	85 ff                	test   edi,edi
c00217de:	0f 84 95 00 00 00    	je     c0021879 <ISO9660::openDir(char const*, void**)+0xab>
c00217e4:	85 f6                	test   esi,esi
c00217e6:	0f 84 8d 00 00 00    	je     c0021879 <ISO9660::openDir(char const*, void**)+0xab>
c00217ec:	83 ec 0c             	sub    esp,0xc
c00217ef:	6a 1c                	push   0x1c
c00217f1:	e8 26 de fe ff       	call   c000f61c <malloc>
c00217f6:	89 07                	mov    DWORD PTR [edi],eax
c00217f8:	89 c3                	mov    ebx,eax
c00217fa:	59                   	pop    ecx
c00217fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217ff:	50                   	push   eax
c0021800:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021803:	50                   	push   eax
c0021804:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021808:	50                   	push   eax
c0021809:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002180d:	50                   	push   eax
c002180e:	56                   	push   esi
c002180f:	e8 b3 fd ff ff       	call   c00215c7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021814:	83 c4 20             	add    esp,0x20
c0021817:	84 c0                	test   al,al
c0021819:	74 07                	je     c0021822 <ISO9660::openDir(char const*, void**)+0x54>
c002181b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021820:	75 21                	jne    c0021843 <ISO9660::openDir(char const*, void**)+0x75>
c0021822:	0f b6 c0             	movzx  eax,al
c0021825:	52                   	push   edx
c0021826:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002182a:	50                   	push   eax
c002182b:	68 15 bf 02 c0       	push   0xc002bf15
c0021830:	e8 b6 10 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0021835:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021839:	83 c4 10             	add    esp,0x10
c002183c:	b8 01 00 00 00       	mov    eax,0x1
c0021841:	eb 3b                	jmp    c002187e <ISO9660::openDir(char const*, void**)+0xb0>
c0021843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021847:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002184b:	89 03                	mov    DWORD PTR [ebx],eax
c002184d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021858:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002185f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021866:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021869:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021870:	8a 06                	mov    al,BYTE PTR [esi]
c0021872:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021875:	31 c0                	xor    eax,eax
c0021877:	eb 05                	jmp    c002187e <ISO9660::openDir(char const*, void**)+0xb0>
c0021879:	b8 04 00 00 00       	mov    eax,0x4
c002187e:	83 c4 10             	add    esp,0x10
c0021881:	5b                   	pop    ebx
c0021882:	5e                   	pop    esi
c0021883:	5f                   	pop    edi
c0021884:	c3                   	ret    
c0021885:	90                   	nop

c0021886 <ISO9660::ISO9660()>:
c0021886:	83 ec 0c             	sub    esp,0xc
c0021889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	50                   	push   eax
c0021891:	e8 5a 13 ff ff       	call   c0012bf0 <Filesystem::Filesystem()>
c0021896:	83 c4 10             	add    esp,0x10
c0021899:	ba 38 bf 02 c0       	mov    edx,0xc002bf38
c002189e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a2:	89 10                	mov    DWORD PTR [eax],edx
c00218a4:	90                   	nop
c00218a5:	83 c4 0c             	add    esp,0xc
c00218a8:	c3                   	ret    
c00218a9:	90                   	nop

c00218aa <SoundChannel::~SoundChannel()>:
c00218aa:	83 ec 0c             	sub    esp,0xc
c00218ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00218b4:	83 ec 0c             	sub    esp,0xc
c00218b7:	50                   	push   eax
c00218b8:	e8 6f dd fe ff       	call   c000f62c <free>
c00218bd:	83 c4 10             	add    esp,0x10
c00218c0:	90                   	nop
c00218c1:	83 c4 0c             	add    esp,0xc
c00218c4:	c3                   	ret    
c00218c5:	90                   	nop

c00218c6 <SoundChannel::setSpeed(float)>:
c00218c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00218d1:	c3                   	ret    

c00218d2 <SoundChannel::getSpeed()>:
c00218d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00218d9:	c3                   	ret    

c00218da <SoundChannel::setVolume(int)>:
c00218da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218de:	83 f8 64             	cmp    eax,0x64
c00218e1:	7e 05                	jle    c00218e8 <SoundChannel::setVolume(int)+0xe>
c00218e3:	b8 64 00 00 00       	mov    eax,0x64
c00218e8:	85 c0                	test   eax,eax
c00218ea:	79 02                	jns    c00218ee <SoundChannel::setVolume(int)+0x14>
c00218ec:	31 c0                	xor    eax,eax
c00218ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218f2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00218f5:	c3                   	ret    

c00218f6 <SoundChannel::getVolume()>:
c00218f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00218fd:	c3                   	ret    

c00218fe <SoundChannel::pause()>:
c00218fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021902:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021906:	c3                   	ret    
c0021907:	90                   	nop

c0021908 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021908:	83 ec 1c             	sub    esp,0x1c
c002190b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002190f:	e8 ea ff ff ff       	call   c00218fe <SoundChannel::pause()>
c0021914:	83 c4 04             	add    esp,0x4
c0021917:	6a 50                	push   0x50
c0021919:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002191d:	e8 b8 ff ff ff       	call   c00218da <SoundChannel::setVolume(int)>
c0021922:	83 c4 08             	add    esp,0x8
c0021925:	a1 b0 bf 02 c0       	mov    eax,ds:0xc002bfb0
c002192a:	50                   	push   eax
c002192b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002192f:	e8 92 ff ff ff       	call   c00218c6 <SoundChannel::setSpeed(float)>
c0021934:	83 c4 08             	add    esp,0x8
c0021937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002193b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002193f:	89 10                	mov    DWORD PTR [eax],edx
c0021941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021945:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021949:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021950:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021954:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021957:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002195c:	75 23                	jne    c0021981 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002195e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021962:	8b 10                	mov    edx,DWORD PTR [eax]
c0021964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002196b:	0f af c2             	imul   eax,edx
c002196e:	85 c0                	test   eax,eax
c0021970:	79 03                	jns    c0021975 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021972:	83 c0 03             	add    eax,0x3
c0021975:	c1 f8 02             	sar    eax,0x2
c0021978:	05 a0 0f 00 00       	add    eax,0xfa0
c002197d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021985:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021989:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002198c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021990:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002199b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00219a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00219a9:	c1 e0 02             	shl    eax,0x2
c00219ac:	83 ec 0c             	sub    esp,0xc
c00219af:	50                   	push   eax
c00219b0:	e8 67 dc fe ff       	call   c000f61c <malloc>
c00219b5:	83 c4 10             	add    esp,0x10
c00219b8:	89 c2                	mov    edx,eax
c00219ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00219c1:	83 ec 04             	sub    esp,0x4
c00219c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219c8:	50                   	push   eax
c00219c9:	6a 01                	push   0x1
c00219cb:	6a 04                	push   0x4
c00219cd:	e8 ae 6f fe ff       	call   c0008980 <src_new>
c00219d2:	83 c4 10             	add    esp,0x10
c00219d5:	89 c2                	mov    edx,eax
c00219d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00219de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e2:	85 c0                	test   eax,eax
c00219e4:	74 10                	je     c00219f6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00219e6:	83 ec 0c             	sub    esp,0xc
c00219e9:	68 94 bf 02 c0       	push   0xc002bf94
c00219ee:	e8 6c 84 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00219f3:	83 c4 10             	add    esp,0x10
c00219f6:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c00219fb:	83 f0 01             	xor    eax,0x1
c00219fe:	84 c0                	test   al,al
c0021a00:	74 57                	je     c0021a59 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021a02:	a1 b4 bf 02 c0       	mov    eax,ds:0xc002bfb4
c0021a07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a13:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a1b:	7f 35                	jg     c0021a52 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021a1d:	83 ec 0c             	sub    esp,0xc
c0021a20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a24:	e8 0e 50 00 00       	call   c0026a37 <__floatsisf>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	8b 15 b4 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bfb4
c0021a32:	83 ec 08             	sub    esp,0x8
c0021a35:	52                   	push   edx
c0021a36:	50                   	push   eax
c0021a37:	e8 0d 4c 00 00       	call   c0026649 <__mulsf3>
c0021a3c:	83 c4 10             	add    esp,0x10
c0021a3f:	89 c2                	mov    edx,eax
c0021a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a45:	89 14 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],edx
c0021a4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a50:	eb c1                	jmp    c0021a13 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021a52:	c6 05 a0 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031da0,0x1
c0021a59:	90                   	nop
c0021a5a:	83 c4 1c             	add    esp,0x1c
c0021a5d:	c3                   	ret    

c0021a5e <SoundChannel::play()>:
c0021a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a62:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021a66:	c3                   	ret    
c0021a67:	90                   	nop

c0021a68 <SoundChannel::paused()>:
c0021a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a6c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021a6f:	c3                   	ret    

c0021a70 <SoundChannel::getSampleRate()>:
c0021a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a76:	c3                   	ret    
c0021a77:	90                   	nop

c0021a78 <SoundChannel::getBits()>:
c0021a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a7f:	c3                   	ret    

c0021a80 <SoundChannel::getBufferUsed()>:
c0021a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a84:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021a87:	c3                   	ret    

c0021a88 <SoundChannel::getBufferSize()>:
c0021a88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a8f:	c3                   	ret    

c0021a90 <SoundChannel::unbuffer(float*, int, int)>:
c0021a90:	56                   	push   esi
c0021a91:	53                   	push   ebx
c0021a92:	83 ec 40             	sub    esp,0x40
c0021a95:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021a99:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021a9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021aa0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021aa3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021aa7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021aab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021aaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ab3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021abb:	e8 77 4f 00 00       	call   c0026a37 <__floatsisf>
c0021ac0:	5a                   	pop    edx
c0021ac1:	89 c6                	mov    esi,eax
c0021ac3:	ff 33                	push   DWORD PTR [ebx]
c0021ac5:	e8 6d 4f 00 00       	call   c0026a37 <__floatsisf>
c0021aca:	59                   	pop    ecx
c0021acb:	5a                   	pop    edx
c0021acc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021acf:	50                   	push   eax
c0021ad0:	e8 74 4b 00 00       	call   c0026649 <__mulsf3>
c0021ad5:	59                   	pop    ecx
c0021ad6:	5a                   	pop    edx
c0021ad7:	50                   	push   eax
c0021ad8:	56                   	push   esi
c0021ad9:	e8 2e 4d 00 00       	call   c002680c <__divsf3>
c0021ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ae1:	e8 21 62 00 00       	call   c0027d07 <__extendsfdf2>
c0021ae6:	59                   	pop    ecx
c0021ae7:	5e                   	pop    esi
c0021ae8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021aec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021af8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021afc:	50                   	push   eax
c0021afd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b00:	e8 70 6a fe ff       	call   c0008575 <src_process>
c0021b05:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b09:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b0c:	83 c4 0c             	add    esp,0xc
c0021b0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b12:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b15:	29 d0                	sub    eax,edx
c0021b17:	c1 e0 02             	shl    eax,0x2
c0021b1a:	50                   	push   eax
c0021b1b:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b1e:	50                   	push   eax
c0021b1f:	51                   	push   ecx
c0021b20:	e8 43 eb fd ff       	call   c0000668 <memmove>
c0021b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b29:	83 c4 44             	add    esp,0x44
c0021b2c:	5b                   	pop    ebx
c0021b2d:	5e                   	pop    esi
c0021b2e:	c3                   	ret    
c0021b2f:	90                   	nop

c0021b30 <SoundChannel::buffer8(unsigned char*, int)>:
c0021b30:	55                   	push   ebp
c0021b31:	57                   	push   edi
c0021b32:	56                   	push   esi
c0021b33:	53                   	push   ebx
c0021b34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b38:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021b3c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b43:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b46:	74 7a                	je     c0021bc2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b48:	85 ff                	test   edi,edi
c0021b4a:	7e 76                	jle    c0021bc2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b4c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021b50:	8d 70 01             	lea    esi,[eax+0x1]
c0021b53:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b56:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b59:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021b60:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b63:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b66:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b69:	74 5e                	je     c0021bc9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021b6b:	83 ff 01             	cmp    edi,0x1
c0021b6e:	74 4b                	je     c0021bbb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021b70:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021b74:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b77:	8d 70 01             	lea    esi,[eax+0x1]
c0021b7a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b7d:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021b84:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b87:	b8 02 00 00 00       	mov    eax,0x2
c0021b8c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021b8f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021b92:	75 23                	jne    c0021bb7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021b94:	eb 27                	jmp    c0021bbd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021b96:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021b9b:	8d 71 01             	lea    esi,[ecx+0x1]
c0021b9e:	40                   	inc    eax
c0021b9f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ba2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ba5:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021bac:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021baf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021bb2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021bb5:	74 06                	je     c0021bbd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021bb7:	39 c7                	cmp    edi,eax
c0021bb9:	75 db                	jne    c0021b96 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021bbb:	89 f8                	mov    eax,edi
c0021bbd:	5b                   	pop    ebx
c0021bbe:	5e                   	pop    esi
c0021bbf:	5f                   	pop    edi
c0021bc0:	5d                   	pop    ebp
c0021bc1:	c3                   	ret    
c0021bc2:	5b                   	pop    ebx
c0021bc3:	31 c0                	xor    eax,eax
c0021bc5:	5e                   	pop    esi
c0021bc6:	5f                   	pop    edi
c0021bc7:	5d                   	pop    ebp
c0021bc8:	c3                   	ret    
c0021bc9:	b8 01 00 00 00       	mov    eax,0x1
c0021bce:	eb ed                	jmp    c0021bbd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021bd0 <SoundDevice::SoundDevice(char const*)>:
c0021bd0:	83 ec 1c             	sub    esp,0x1c
c0021bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd7:	83 ec 08             	sub    esp,0x8
c0021bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021bde:	50                   	push   eax
c0021bdf:	e8 1e 23 ff ff       	call   c0013f02 <Device::Device(char const*)>
c0021be4:	83 c4 10             	add    esp,0x10
c0021be7:	ba c0 bf 02 c0       	mov    edx,0xc002bfc0
c0021bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf0:	89 10                	mov    DWORD PTR [eax],edx
c0021bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c04:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021c0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c16:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c1b:	7f 19                	jg     c0021c36 <SoundDevice::SoundDevice(char const*)+0x66>
c0021c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c25:	83 c2 54             	add    edx,0x54
c0021c28:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021c30:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c34:	eb e0                	jmp    c0021c16 <SoundDevice::SoundDevice(char const*)+0x46>
c0021c36:	90                   	nop
c0021c37:	83 c4 1c             	add    esp,0x1c
c0021c3a:	c3                   	ret    
c0021c3b:	90                   	nop

c0021c3c <SoundDevice::~SoundDevice()>:
c0021c3c:	53                   	push   ebx
c0021c3d:	83 ec 18             	sub    esp,0x18
c0021c40:	ba c0 bf 02 c0       	mov    edx,0xc002bfc0
c0021c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c49:	89 10                	mov    DWORD PTR [eax],edx
c0021c4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c53:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c58:	7f 46                	jg     c0021ca0 <SoundDevice::~SoundDevice()+0x64>
c0021c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c62:	83 c2 54             	add    edx,0x54
c0021c65:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021c69:	85 c0                	test   eax,eax
c0021c6b:	74 2d                	je     c0021c9a <SoundDevice::~SoundDevice()+0x5e>
c0021c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c75:	83 c2 54             	add    edx,0x54
c0021c78:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021c7c:	85 db                	test   ebx,ebx
c0021c7e:	74 1a                	je     c0021c9a <SoundDevice::~SoundDevice()+0x5e>
c0021c80:	83 ec 0c             	sub    esp,0xc
c0021c83:	53                   	push   ebx
c0021c84:	e8 21 fc ff ff       	call   c00218aa <SoundChannel::~SoundChannel()>
c0021c89:	83 c4 10             	add    esp,0x10
c0021c8c:	83 ec 08             	sub    esp,0x8
c0021c8f:	6a 2c                	push   0x2c
c0021c91:	53                   	push   ebx
c0021c92:	e8 74 0b ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0021c97:	83 c4 10             	add    esp,0x10
c0021c9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c9e:	eb b3                	jmp    c0021c53 <SoundDevice::~SoundDevice()+0x17>
c0021ca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca4:	83 ec 0c             	sub    esp,0xc
c0021ca7:	50                   	push   eax
c0021ca8:	e8 37 1f ff ff       	call   c0013be4 <Device::~Device()>
c0021cad:	83 c4 10             	add    esp,0x10
c0021cb0:	90                   	nop
c0021cb1:	83 c4 18             	add    esp,0x18
c0021cb4:	5b                   	pop    ebx
c0021cb5:	c3                   	ret    

c0021cb6 <SoundDevice::~SoundDevice()>:
c0021cb6:	83 ec 0c             	sub    esp,0xc
c0021cb9:	83 ec 0c             	sub    esp,0xc
c0021cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc0:	e8 77 ff ff ff       	call   c0021c3c <SoundDevice::~SoundDevice()>
c0021cc5:	83 c4 10             	add    esp,0x10
c0021cc8:	83 ec 08             	sub    esp,0x8
c0021ccb:	68 e4 01 00 00       	push   0x1e4
c0021cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd4:	e8 32 0b ff ff       	call   c001280b <operator delete(void*, unsigned long)>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	83 c4 0c             	add    esp,0xc
c0021cdf:	c3                   	ret    

c0021ce0 <SoundDevice::getFreeChannelNum()>:
c0021ce0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ce4:	31 c0                	xor    eax,eax
c0021ce6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021cee:	74 09                	je     c0021cf9 <SoundDevice::getFreeChannelNum()+0x19>
c0021cf0:	40                   	inc    eax
c0021cf1:	83 f8 20             	cmp    eax,0x20
c0021cf4:	75 f0                	jne    c0021ce6 <SoundDevice::getFreeChannelNum()+0x6>
c0021cf6:	83 c8 ff             	or     eax,0xffffffff
c0021cf9:	c3                   	ret    

c0021cfa <SoundDevice::addChannel(SoundChannel*)>:
c0021cfa:	56                   	push   esi
c0021cfb:	53                   	push   ebx
c0021cfc:	51                   	push   ecx
c0021cfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021d05:	53                   	push   ebx
c0021d06:	e8 d5 ff ff ff       	call   c0021ce0 <SoundDevice::getFreeChannelNum()>
c0021d0b:	5a                   	pop    edx
c0021d0c:	83 f8 ff             	cmp    eax,0xffffffff
c0021d0f:	74 51                	je     c0021d62 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d11:	85 f6                	test   esi,esi
c0021d13:	74 4d                	je     c0021d62 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d15:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021d1c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021d23:	75 30                	jne    c0021d55 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021d25:	83 ec 0c             	sub    esp,0xc
c0021d28:	56                   	push   esi
c0021d29:	e8 42 fd ff ff       	call   c0021a70 <SoundChannel::getSampleRate()>
c0021d2e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021d34:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d37:	e8 3c fd ff ff       	call   c0021a78 <SoundChannel::getBits()>
c0021d3c:	83 c4 0c             	add    esp,0xc
c0021d3f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021d45:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d47:	50                   	push   eax
c0021d48:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021d4e:	53                   	push   ebx
c0021d4f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021d52:	83 c4 10             	add    esp,0x10
c0021d55:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021d5b:	b8 01 00 00 00       	mov    eax,0x1
c0021d60:	eb 03                	jmp    c0021d65 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021d62:	83 c8 ff             	or     eax,0xffffffff
c0021d65:	5a                   	pop    edx
c0021d66:	5b                   	pop    ebx
c0021d67:	5e                   	pop    esi
c0021d68:	c3                   	ret    
c0021d69:	90                   	nop

c0021d6a <SoundDevice::removeChannel(int)>:
c0021d6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d72:	83 fa 1f             	cmp    edx,0x1f
c0021d75:	77 23                	ja     c0021d9a <SoundDevice::removeChannel(int)+0x30>
c0021d77:	8d 14 90             	lea    edx,[eax+edx*4]
c0021d7a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021d81:	74 17                	je     c0021d9a <SoundDevice::removeChannel(int)+0x30>
c0021d83:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021d8d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021d93:	75 05                	jne    c0021d9a <SoundDevice::removeChannel(int)+0x30>
c0021d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d97:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021d9a:	c3                   	ret    
c0021d9b:	90                   	nop

c0021d9c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021d9c:	57                   	push   edi
c0021d9d:	56                   	push   esi
c0021d9e:	53                   	push   ebx
c0021d9f:	31 db                	xor    ebx,ebx
c0021da1:	83 ec 10             	sub    esp,0x10
c0021da4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021da8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021dac:	0f 8d cb 00 00 00    	jge    c0021e7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021db2:	83 ec 0c             	sub    esp,0xc
c0021db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021db9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021dbc:	e8 46 5f 00 00       	call   c0027d07 <__extendsfdf2>
c0021dc1:	83 c4 10             	add    esp,0x10
c0021dc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021dc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021dcc:	68 00 00 f0 3f       	push   0x3ff00000
c0021dd1:	6a 00                	push   0x0
c0021dd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ddb:	e8 b3 4e 00 00       	call   c0026c93 <__adddf3>
c0021de0:	83 c4 10             	add    esp,0x10
c0021de3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021de7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021deb:	68 00 00 e0 3f       	push   0x3fe00000
c0021df0:	6a 00                	push   0x0
c0021df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dfa:	e8 11 55 00 00       	call   c0027310 <__muldf3>
c0021dff:	83 c4 10             	add    esp,0x10
c0021e02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e0a:	68 00 00 60 40       	push   0x40600000
c0021e0f:	6a 00                	push   0x0
c0021e11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e19:	e8 f2 54 00 00       	call   c0027310 <__muldf3>
c0021e1e:	59                   	pop    ecx
c0021e1f:	5f                   	pop    edi
c0021e20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021e24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021e28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e30:	e8 ae 5d 00 00       	call   c0027be3 <__truncdfsf2>
c0021e35:	5a                   	pop    edx
c0021e36:	89 c7                	mov    edi,eax
c0021e38:	59                   	pop    ecx
c0021e39:	68 00 00 fe 42       	push   0x42fe0000
c0021e3e:	50                   	push   eax
c0021e3f:	e8 49 4e 00 00       	call   c0026c8d <__gesf2>
c0021e44:	83 c4 10             	add    esp,0x10
c0021e47:	85 c0                	test   eax,eax
c0021e49:	78 06                	js     c0021e51 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021e4b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021e4f:	eb 26                	jmp    c0021e77 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e51:	50                   	push   eax
c0021e52:	50                   	push   eax
c0021e53:	6a 00                	push   0x0
c0021e55:	57                   	push   edi
c0021e56:	e8 36 4e 00 00       	call   c0026c91 <__lesf2>
c0021e5b:	83 c4 10             	add    esp,0x10
c0021e5e:	85 c0                	test   eax,eax
c0021e60:	7f 06                	jg     c0021e68 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021e62:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021e66:	eb 0f                	jmp    c0021e77 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e68:	83 ec 0c             	sub    esp,0xc
c0021e6b:	57                   	push   edi
c0021e6c:	e8 2b 5f 00 00       	call   c0027d9c <lrintf>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021e77:	43                   	inc    ebx
c0021e78:	e9 2b ff ff ff       	jmp    c0021da8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021e7d:	83 c4 10             	add    esp,0x10
c0021e80:	5b                   	pop    ebx
c0021e81:	5e                   	pop    esi
c0021e82:	5f                   	pop    edi
c0021e83:	c3                   	ret    

c0021e84 <SoundDevice::getAudio(int, float*, float*)>:
c0021e84:	55                   	push   ebp
c0021e85:	57                   	push   edi
c0021e86:	56                   	push   esi
c0021e87:	53                   	push   ebx
c0021e88:	31 db                	xor    ebx,ebx
c0021e8a:	83 ec 20             	sub    esp,0x20
c0021e8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021e91:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e95:	c1 e0 02             	shl    eax,0x2
c0021e98:	50                   	push   eax
c0021e99:	6a 00                	push   0x0
c0021e9b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021e9f:	e8 18 e8 fd ff       	call   c00006bc <memset>
c0021ea4:	83 c4 10             	add    esp,0x10
c0021ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021eab:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021eb2:	85 c0                	test   eax,eax
c0021eb4:	0f 84 d7 00 00 00    	je     c0021f91 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021eba:	83 ec 0c             	sub    esp,0xc
c0021ebd:	50                   	push   eax
c0021ebe:	e8 a5 fb ff ff       	call   c0021a68 <SoundChannel::paused()>
c0021ec3:	83 c4 10             	add    esp,0x10
c0021ec6:	84 c0                	test   al,al
c0021ec8:	0f 85 c3 00 00 00    	jne    c0021f91 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021ece:	83 ec 0c             	sub    esp,0xc
c0021ed1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ed8:	e8 19 fa ff ff       	call   c00218f6 <SoundChannel::getVolume()>
c0021edd:	83 c4 10             	add    esp,0x10
c0021ee0:	85 c0                	test   eax,eax
c0021ee2:	0f 84 a9 00 00 00    	je     c0021f91 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021ee8:	83 ec 0c             	sub    esp,0xc
c0021eeb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ef2:	e8 ff f9 ff ff       	call   c00218f6 <SoundChannel::getVolume()>
c0021ef7:	83 ec 0c             	sub    esp,0xc
c0021efa:	50                   	push   eax
c0021efb:	e8 37 4b 00 00       	call   c0026a37 <__floatsisf>
c0021f00:	59                   	pop    ecx
c0021f01:	5d                   	pop    ebp
c0021f02:	31 ed                	xor    ebp,ebp
c0021f04:	68 00 00 c8 42       	push   0x42c80000
c0021f09:	50                   	push   eax
c0021f0a:	e8 fd 48 00 00       	call   c002680c <__divsf3>
c0021f0f:	83 c4 10             	add    esp,0x10
c0021f12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021f1a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021f20:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021f24:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f2b:	e8 60 fb ff ff       	call   c0021a90 <SoundChannel::unbuffer(float*, int, int)>
c0021f30:	83 c4 20             	add    esp,0x20
c0021f33:	89 c1                	mov    ecx,eax
c0021f35:	39 cd                	cmp    ebp,ecx
c0021f37:	7d 52                	jge    c0021f8b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021f39:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021f3d:	50                   	push   eax
c0021f3e:	50                   	push   eax
c0021f3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021f43:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f4a:	e8 fa 46 00 00       	call   c0026649 <__mulsf3>
c0021f4f:	5a                   	pop    edx
c0021f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f54:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021f5a:	e8 d8 4a 00 00       	call   c0026a37 <__floatsisf>
c0021f5f:	59                   	pop    ecx
c0021f60:	5a                   	pop    edx
c0021f61:	50                   	push   eax
c0021f62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f66:	e8 a1 48 00 00       	call   c002680c <__divsf3>
c0021f6b:	59                   	pop    ecx
c0021f6c:	5a                   	pop    edx
c0021f6d:	50                   	push   eax
c0021f6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021f72:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f75:	e8 ac 43 00 00       	call   c0026326 <__addsf3>
c0021f7a:	83 c4 10             	add    esp,0x10
c0021f7d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021f85:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021f88:	45                   	inc    ebp
c0021f89:	eb aa                	jmp    c0021f35 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021f8b:	39 cf                	cmp    edi,ecx
c0021f8d:	7e 02                	jle    c0021f91 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021f8f:	89 cf                	mov    edi,ecx
c0021f91:	43                   	inc    ebx
c0021f92:	83 fb 20             	cmp    ebx,0x20
c0021f95:	0f 85 10 ff ff ff    	jne    c0021eab <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021f9b:	83 c4 1c             	add    esp,0x1c
c0021f9e:	89 f8                	mov    eax,edi
c0021fa0:	5b                   	pop    ebx
c0021fa1:	5e                   	pop    esi
c0021fa2:	5f                   	pop    edi
c0021fa3:	5d                   	pop    ebp
c0021fa4:	c3                   	ret    
c0021fa5:	90                   	nop

c0021fa6 <PCI::open(int, int, void*)>:
c0021fa6:	83 ec 18             	sub    esp,0x18
c0021fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0021faf:	50                   	push   eax
c0021fb0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021fb3:	31 c0                	xor    eax,eax
c0021fb5:	83 c4 1c             	add    esp,0x1c
c0021fb8:	c3                   	ret    
c0021fb9:	90                   	nop

c0021fba <PCI::close(int, int, void*)>:
c0021fba:	31 c0                	xor    eax,eax
c0021fbc:	c3                   	ret    
c0021fbd:	90                   	nop

c0021fbe <PCI::PCI()>:
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc5:	83 ec 08             	sub    esp,0x8
c0021fc8:	68 f0 bf 02 c0       	push   0xc002bff0
c0021fcd:	50                   	push   eax
c0021fce:	e8 b3 15 ff ff       	call   c0013586 <Bus::Bus(char const*)>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	ba 5c c0 02 c0       	mov    edx,0xc002c05c
c0021fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdf:	89 10                	mov    DWORD PTR [eax],edx
c0021fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021feb:	0f b6 d0             	movzx  edx,al
c0021fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022003:	0f b6 d0             	movzx  edx,al
c0022006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002200f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022013:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022019:	8d 50 01             	lea    edx,[eax+0x1]
c002201c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022020:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022026:	0f b6 d0             	movzx  edx,al
c0022029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022031:	83 c9 c0             	or     ecx,0xffffffc0
c0022034:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022038:	90                   	nop
c0022039:	83 c4 0c             	add    esp,0xc
c002203c:	c3                   	ret    
c002203d:	90                   	nop

c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002203e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022042:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022047:	89 ca                	mov    edx,ecx
c0022049:	c1 e0 10             	shl    eax,0x10
c002204c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022052:	09 d0                	or     eax,edx
c0022054:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022059:	c1 e2 08             	shl    edx,0x8
c002205c:	09 d0                	or     eax,edx
c002205e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022063:	c1 e2 0b             	shl    edx,0xb
c0022066:	09 d0                	or     eax,edx
c0022068:	ba f8 0c 00 00       	mov    edx,0xcf8
c002206d:	0d 00 00 00 80       	or     eax,0x80000000
c0022072:	ef                   	out    dx,eax
c0022073:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022078:	ed                   	in     eax,dx
c0022079:	83 e1 02             	and    ecx,0x2
c002207c:	0f b6 c9             	movzx  ecx,cl
c002207f:	c1 e1 03             	shl    ecx,0x3
c0022082:	d3 e8                	shr    eax,cl
c0022084:	c3                   	ret    
c0022085:	90                   	nop

c0022086 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022086:	6a 00                	push   0x0
c0022088:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002208d:	50                   	push   eax
c002208e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022093:	50                   	push   eax
c0022094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022099:	50                   	push   eax
c002209a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002209e:	e8 9b ff ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220a3:	83 c4 14             	add    esp,0x14
c00220a6:	c3                   	ret    
c00220a7:	90                   	nop

c00220a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00220a8:	6a 0e                	push   0xe
c00220aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220af:	50                   	push   eax
c00220b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220b5:	50                   	push   eax
c00220b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220bb:	50                   	push   eax
c00220bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220c0:	e8 79 ff ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220c5:	83 c4 14             	add    esp,0x14
c00220c8:	0f b6 c0             	movzx  eax,al
c00220cb:	c3                   	ret    

c00220cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00220cc:	55                   	push   ebp
c00220cd:	57                   	push   edi
c00220ce:	56                   	push   esi
c00220cf:	53                   	push   ebx
c00220d0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00220d5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00220da:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00220df:	6a 0a                	push   0xa
c00220e1:	56                   	push   esi
c00220e2:	55                   	push   ebp
c00220e3:	57                   	push   edi
c00220e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220e8:	e8 51 ff ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220ed:	6a 0a                	push   0xa
c00220ef:	89 c3                	mov    ebx,eax
c00220f1:	56                   	push   esi
c00220f2:	0f b6 db             	movzx  ebx,bl
c00220f5:	55                   	push   ebp
c00220f6:	57                   	push   edi
c00220f7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00220fb:	e8 3e ff ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022100:	83 c4 28             	add    esp,0x28
c0022103:	25 00 ff 00 00       	and    eax,0xff00
c0022108:	09 d8                	or     eax,ebx
c002210a:	5b                   	pop    ebx
c002210b:	5e                   	pop    esi
c002210c:	5f                   	pop    edi
c002210d:	5d                   	pop    ebp
c002210e:	c3                   	ret    
c002210f:	90                   	nop

c0022110 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022110:	6a 08                	push   0x8
c0022112:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022117:	50                   	push   eax
c0022118:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002211d:	50                   	push   eax
c002211e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022123:	50                   	push   eax
c0022124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022128:	e8 11 ff ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002212d:	83 c4 14             	add    esp,0x14
c0022130:	0f b6 c4             	movzx  eax,ah
c0022133:	c3                   	ret    

c0022134 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022134:	6a 08                	push   0x8
c0022136:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002213b:	50                   	push   eax
c002213c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022141:	50                   	push   eax
c0022142:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022147:	50                   	push   eax
c0022148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002214c:	e8 ed fe ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022151:	83 c4 14             	add    esp,0x14
c0022154:	c3                   	ret    
c0022155:	90                   	nop

c0022156 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022156:	6a 3c                	push   0x3c
c0022158:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002215d:	50                   	push   eax
c002215e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022163:	50                   	push   eax
c0022164:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022169:	50                   	push   eax
c002216a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216e:	e8 cb fe ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022173:	83 c4 14             	add    esp,0x14
c0022176:	c3                   	ret    
c0022177:	90                   	nop

c0022178 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022178:	6a 18                	push   0x18
c002217a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002217f:	50                   	push   eax
c0022180:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022185:	50                   	push   eax
c0022186:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002218b:	50                   	push   eax
c002218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022190:	e8 a9 fe ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022195:	83 c4 14             	add    esp,0x14
c0022198:	0f b6 c4             	movzx  eax,ah
c002219b:	c3                   	ret    

c002219c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002219c:	55                   	push   ebp
c002219d:	57                   	push   edi
c002219e:	56                   	push   esi
c002219f:	53                   	push   ebx
c00221a0:	50                   	push   eax
c00221a1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00221a5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00221aa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00221af:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00221b4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00221bb:	8d 43 12             	lea    eax,[ebx+0x12]
c00221be:	83 c3 10             	add    ebx,0x10
c00221c1:	0f b6 c0             	movzx  eax,al
c00221c4:	0f b6 db             	movzx  ebx,bl
c00221c7:	50                   	push   eax
c00221c8:	51                   	push   ecx
c00221c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00221cd:	57                   	push   edi
c00221ce:	55                   	push   ebp
c00221cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00221d3:	e8 66 fe ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221d8:	53                   	push   ebx
c00221d9:	89 c6                	mov    esi,eax
c00221db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00221df:	c1 e6 10             	shl    esi,0x10
c00221e2:	51                   	push   ecx
c00221e3:	57                   	push   edi
c00221e4:	55                   	push   ebp
c00221e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221e9:	e8 50 fe ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221ee:	83 c4 2c             	add    esp,0x2c
c00221f1:	0f b7 c0             	movzx  eax,ax
c00221f4:	5b                   	pop    ebx
c00221f5:	09 f0                	or     eax,esi
c00221f7:	5e                   	pop    esi
c00221f8:	5f                   	pop    edi
c00221f9:	5d                   	pop    ebp
c00221fa:	c3                   	ret    
c00221fb:	90                   	nop

c00221fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00221fc:	53                   	push   ebx
c00221fd:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022202:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022207:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002220b:	c1 e1 10             	shl    ecx,0x10
c002220e:	25 fc 00 00 00       	and    eax,0xfc
c0022213:	09 c1                	or     ecx,eax
c0022215:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002221a:	c1 e0 08             	shl    eax,0x8
c002221d:	09 c1                	or     ecx,eax
c002221f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022224:	c1 e0 0b             	shl    eax,0xb
c0022227:	09 c1                	or     ecx,eax
c0022229:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002222f:	89 c8                	mov    eax,ecx
c0022231:	ef                   	out    dx,eax
c0022232:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022237:	ed                   	in     eax,dx
c0022238:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002223d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022242:	74 0a                	je     c002224e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022244:	0f b7 d8             	movzx  ebx,ax
c0022247:	89 d0                	mov    eax,edx
c0022249:	c1 e0 10             	shl    eax,0x10
c002224c:	eb 05                	jmp    c0022253 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002224e:	66 31 c0             	xor    ax,ax
c0022251:	89 d3                	mov    ebx,edx
c0022253:	09 c3                	or     ebx,eax
c0022255:	ba f8 0c 00 00       	mov    edx,0xcf8
c002225a:	89 c8                	mov    eax,ecx
c002225c:	ef                   	out    dx,eax
c002225d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022262:	89 d8                	mov    eax,ebx
c0022264:	ef                   	out    dx,eax
c0022265:	5b                   	pop    ebx
c0022266:	c3                   	ret    
c0022267:	90                   	nop

c0022268 <PCI::checkBus(unsigned char)>:
c0022268:	56                   	push   esi
c0022269:	53                   	push   ebx
c002226a:	31 db                	xor    ebx,ebx
c002226c:	51                   	push   ecx
c002226d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022272:	52                   	push   edx
c0022273:	53                   	push   ebx
c0022274:	43                   	inc    ebx
c0022275:	56                   	push   esi
c0022276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002227a:	e8 2b 03 00 00       	call   c00225aa <PCI::checkDevice(unsigned char, unsigned char)>
c002227f:	83 c4 10             	add    esp,0x10
c0022282:	83 fb 20             	cmp    ebx,0x20
c0022285:	75 eb                	jne    c0022272 <PCI::checkBus(unsigned char)+0xa>
c0022287:	58                   	pop    eax
c0022288:	5b                   	pop    ebx
c0022289:	5e                   	pop    esi
c002228a:	c3                   	ret    
c002228b:	90                   	nop

c002228c <PCI::foundDevice(PCIDeviceInfo)>:
c002228c:	55                   	push   ebp
c002228d:	57                   	push   edi
c002228e:	56                   	push   esi
c002228f:	53                   	push   ebx
c0022290:	83 ec 1c             	sub    esp,0x1c
c0022293:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022297:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002229d:	0f 84 52 01 00 00    	je     c00223f5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00222a3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00222a7:	66 81 f9 06 04       	cmp    cx,0x406
c00222ac:	75 2c                	jne    c00222da <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00222ae:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00222b3:	50                   	push   eax
c00222b4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00222b9:	50                   	push   eax
c00222ba:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00222bf:	50                   	push   eax
c00222c0:	56                   	push   esi
c00222c1:	e8 b2 fe ff ff       	call   c0022178 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00222c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00222ca:	0f b6 c0             	movzx  eax,al
c00222cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00222d1:	83 c4 2c             	add    esp,0x2c
c00222d4:	5b                   	pop    ebx
c00222d5:	5e                   	pop    esi
c00222d6:	5f                   	pop    edi
c00222d7:	5d                   	pop    ebp
c00222d8:	eb 8e                	jmp    c0022268 <PCI::checkBus(unsigned char)>
c00222da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00222de:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00222e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00222ec:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00222f0:	88 d3                	mov    bl,dl
c00222f2:	85 c0                	test   eax,eax
c00222f4:	74 33                	je     c0022329 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00222f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00222f9:	85 d2                	test   edx,edx
c00222fb:	74 28                	je     c0022325 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00222fd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022303:	31 ef                	xor    edi,ebp
c0022305:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002230b:	75 18                	jne    c0022325 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002230d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022311:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022317:	75 0c                	jne    c0022325 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022319:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002231f:	0f 84 d0 00 00 00    	je     c00223f5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022325:	8b 00                	mov    eax,DWORD PTR [eax]
c0022327:	eb c9                	jmp    c00222f2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022329:	66 81 f9 01 06       	cmp    cx,0x601
c002232e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022332:	75 19                	jne    c002234d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022334:	83 ec 0c             	sub    esp,0xc
c0022337:	68 64 01 00 00       	push   0x164
c002233c:	e8 db d2 fe ff       	call   c000f61c <malloc>
c0022341:	89 c5                	mov    ebp,eax
c0022343:	89 04 24             	mov    DWORD PTR [esp],eax
c0022346:	e8 95 0f 00 00       	call   c00232e0 <SATABus::SATABus()>
c002234b:	eb 1e                	jmp    c002236b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002234d:	66 81 f9 01 01       	cmp    cx,0x101
c0022352:	75 60                	jne    c00223b4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022354:	83 ec 0c             	sub    esp,0xc
c0022357:	68 70 02 00 00       	push   0x270
c002235c:	e8 bb d2 fe ff       	call   c000f61c <malloc>
c0022361:	89 c5                	mov    ebp,eax
c0022363:	89 04 24             	mov    DWORD PTR [esp],eax
c0022366:	e8 03 03 00 00       	call   c002266e <IDE::IDE()>
c002236b:	58                   	pop    eax
c002236c:	5a                   	pop    edx
c002236d:	55                   	push   ebp
c002236e:	56                   	push   esi
c002236f:	e8 9e 19 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c0022374:	83 ec 1c             	sub    esp,0x1c
c0022377:	b9 09 00 00 00       	mov    ecx,0x9
c002237c:	fc                   	cld    
c002237d:	89 e7                	mov    edi,esp
c002237f:	89 de                	mov    esi,ebx
c0022381:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022383:	55                   	push   ebp
c0022384:	e8 93 18 ff ff       	call   c0013c1c <Device::preOpenPCI(PCIDeviceInfo)>
c0022389:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002238c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022390:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022398:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00223a0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00223a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223ab:	83 c4 4c             	add    esp,0x4c
c00223ae:	5b                   	pop    ebx
c00223af:	5e                   	pop    esi
c00223b0:	5f                   	pop    edi
c00223b1:	5d                   	pop    ebp
c00223b2:	ff e0                	jmp    eax
c00223b4:	83 ec 0c             	sub    esp,0xc
c00223b7:	68 58 01 00 00       	push   0x158
c00223bc:	e8 5b d2 fe ff       	call   c000f61c <malloc>
c00223c1:	89 c5                	mov    ebp,eax
c00223c3:	58                   	pop    eax
c00223c4:	5a                   	pop    edx
c00223c5:	68 f8 bf 02 c0       	push   0xc002bff8
c00223ca:	55                   	push   ebp
c00223cb:	e8 38 1c ff ff       	call   c0014008 <DriverlessDevice::DriverlessDevice(char const*)>
c00223d0:	59                   	pop    ecx
c00223d1:	5f                   	pop    edi
c00223d2:	55                   	push   ebp
c00223d3:	56                   	push   esi
c00223d4:	e8 39 19 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c00223d9:	b9 09 00 00 00       	mov    ecx,0x9
c00223de:	fc                   	cld    
c00223df:	89 df                	mov    edi,ebx
c00223e1:	89 de                	mov    esi,ebx
c00223e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00223e5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00223e9:	83 c4 2c             	add    esp,0x2c
c00223ec:	5b                   	pop    ebx
c00223ed:	5e                   	pop    esi
c00223ee:	5f                   	pop    edi
c00223ef:	5d                   	pop    ebp
c00223f0:	e9 27 18 ff ff       	jmp    c0013c1c <Device::preOpenPCI(PCIDeviceInfo)>
c00223f5:	83 c4 1c             	add    esp,0x1c
c00223f8:	5b                   	pop    ebx
c00223f9:	5e                   	pop    esi
c00223fa:	5f                   	pop    edi
c00223fb:	5d                   	pop    ebp
c00223fc:	c3                   	ret    
c00223fd:	90                   	nop

c00223fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00223fe:	55                   	push   ebp
c00223ff:	57                   	push   edi
c0022400:	56                   	push   esi
c0022401:	53                   	push   ebx
c0022402:	83 ec 5c             	sub    esp,0x5c
c0022405:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022409:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002240d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022411:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022416:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002241a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002241e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022423:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022427:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002242c:	6a 0c                	push   0xc
c002242e:	55                   	push   ebp
c002242f:	53                   	push   ebx
c0022430:	57                   	push   edi
c0022431:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022438:	e8 01 fc ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002243d:	55                   	push   ebp
c002243e:	53                   	push   ebx
c002243f:	57                   	push   edi
c0022440:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022447:	e8 80 fc ff ff       	call   c00220cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002244c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022451:	83 c4 24             	add    esp,0x24
c0022454:	55                   	push   ebp
c0022455:	53                   	push   ebx
c0022456:	57                   	push   edi
c0022457:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002245b:	e8 f6 fc ff ff       	call   c0022156 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022460:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022464:	6a 3c                	push   0x3c
c0022466:	55                   	push   ebp
c0022467:	53                   	push   ebx
c0022468:	57                   	push   edi
c0022469:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022470:	e8 c9 fb ff ff       	call   c002203e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022475:	0f b6 c4             	movzx  eax,ah
c0022478:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002247c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022480:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022484:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0022489:	83 c4 24             	add    esp,0x24
c002248c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022492:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022499:	74 6c                	je     c0022507 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002249b:	31 f6                	xor    esi,esi
c002249d:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c00224a3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224a9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00224af:	7e 56                	jle    c0022507 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224b1:	8d 14 f2             	lea    edx,[edx+esi*8]
c00224b4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00224bb:	39 cb                	cmp    ebx,ecx
c00224bd:	75 45                	jne    c0022504 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224bf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00224c6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00224ca:	75 38                	jne    c0022504 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224cc:	83 ec 0c             	sub    esp,0xc
c00224cf:	68 12 c0 02 c0       	push   0xc002c012
c00224d4:	e8 12 04 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00224d9:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c00224df:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224e5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00224ed:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00224f1:	52                   	push   edx
c00224f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224f6:	53                   	push   ebx
c00224f7:	68 37 c0 02 c0       	push   0xc002c037
c00224fc:	e8 ea 03 ff ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022501:	83 c4 20             	add    esp,0x20
c0022504:	46                   	inc    esi
c0022505:	eb 96                	jmp    c002249d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022507:	31 d2                	xor    edx,edx
c0022509:	83 ec 0c             	sub    esp,0xc
c002250c:	55                   	push   ebp
c002250d:	53                   	push   ebx
c002250e:	57                   	push   edi
c002250f:	52                   	push   edx
c0022510:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022514:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002251b:	e8 7c fc ff ff       	call   c002219c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022520:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022524:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022528:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002252c:	42                   	inc    edx
c002252d:	83 c4 20             	add    esp,0x20
c0022530:	83 fa 06             	cmp    edx,0x6
c0022533:	75 d4                	jne    c0022509 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022535:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022539:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002253d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022541:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022545:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022549:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002254d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022552:	86 e0                	xchg   al,ah
c0022554:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022559:	55                   	push   ebp
c002255a:	53                   	push   ebx
c002255b:	57                   	push   edi
c002255c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022560:	e8 ab fb ff ff       	call   c0022110 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022565:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022569:	55                   	push   ebp
c002256a:	53                   	push   ebx
c002256b:	57                   	push   edi
c002256c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022573:	e8 0e fb ff ff       	call   c0022086 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022578:	83 ec 0c             	sub    esp,0xc
c002257b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022580:	b9 09 00 00 00       	mov    ecx,0x9
c0022585:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022589:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002258d:	fc                   	cld    
c002258e:	89 e7                	mov    edi,esp
c0022590:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022592:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022599:	e8 ee fc ff ff       	call   c002228c <PCI::foundDevice(PCIDeviceInfo)>
c002259e:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225a4:	5b                   	pop    ebx
c00225a5:	5e                   	pop    esi
c00225a6:	5f                   	pop    edi
c00225a7:	5d                   	pop    ebp
c00225a8:	c3                   	ret    
c00225a9:	90                   	nop

c00225aa <PCI::checkDevice(unsigned char, unsigned char)>:
c00225aa:	55                   	push   ebp
c00225ab:	57                   	push   edi
c00225ac:	56                   	push   esi
c00225ad:	53                   	push   ebx
c00225ae:	83 ec 0c             	sub    esp,0xc
c00225b1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00225b5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00225ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00225bf:	6a 00                	push   0x0
c00225c1:	56                   	push   esi
c00225c2:	57                   	push   edi
c00225c3:	55                   	push   ebp
c00225c4:	e8 bd fa ff ff       	call   c0022086 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225c9:	6a 00                	push   0x0
c00225cb:	56                   	push   esi
c00225cc:	57                   	push   edi
c00225cd:	55                   	push   ebp
c00225ce:	e8 2b fe ff ff       	call   c00223fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00225d3:	83 c4 20             	add    esp,0x20
c00225d6:	6a 00                	push   0x0
c00225d8:	56                   	push   esi
c00225d9:	57                   	push   edi
c00225da:	55                   	push   ebp
c00225db:	e8 c8 fa ff ff       	call   c00220a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00225e0:	83 c4 10             	add    esp,0x10
c00225e3:	84 c0                	test   al,al
c00225e5:	79 27                	jns    c002260e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00225e7:	bb 01 00 00 00       	mov    ebx,0x1
c00225ec:	53                   	push   ebx
c00225ed:	56                   	push   esi
c00225ee:	57                   	push   edi
c00225ef:	55                   	push   ebp
c00225f0:	e8 91 fa ff ff       	call   c0022086 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225f5:	83 c4 10             	add    esp,0x10
c00225f8:	66 40                	inc    ax
c00225fa:	74 0c                	je     c0022608 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00225fc:	53                   	push   ebx
c00225fd:	56                   	push   esi
c00225fe:	57                   	push   edi
c00225ff:	55                   	push   ebp
c0022600:	e8 f9 fd ff ff       	call   c00223fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	43                   	inc    ebx
c0022609:	83 fb 08             	cmp    ebx,0x8
c002260c:	75 de                	jne    c00225ec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002260e:	83 c4 0c             	add    esp,0xc
c0022611:	5b                   	pop    ebx
c0022612:	5e                   	pop    esi
c0022613:	5f                   	pop    edi
c0022614:	5d                   	pop    ebp
c0022615:	c3                   	ret    

c0022616 <PCI::detect()>:
c0022616:	56                   	push   esi
c0022617:	53                   	push   ebx
c0022618:	53                   	push   ebx
c0022619:	31 db                	xor    ebx,ebx
c002261b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002261f:	6a 00                	push   0x0
c0022621:	6a 00                	push   0x0
c0022623:	6a 00                	push   0x0
c0022625:	56                   	push   esi
c0022626:	e8 7d fa ff ff       	call   c00220a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002262b:	83 c4 10             	add    esp,0x10
c002262e:	a8 80                	test   al,0x80
c0022630:	75 21                	jne    c0022653 <PCI::detect()+0x3d>
c0022632:	51                   	push   ecx
c0022633:	51                   	push   ecx
c0022634:	6a 00                	push   0x0
c0022636:	56                   	push   esi
c0022637:	e8 2c fc ff ff       	call   c0022268 <PCI::checkBus(unsigned char)>
c002263c:	83 c4 10             	add    esp,0x10
c002263f:	eb 24                	jmp    c0022665 <PCI::detect()+0x4f>
c0022641:	52                   	push   edx
c0022642:	52                   	push   edx
c0022643:	53                   	push   ebx
c0022644:	43                   	inc    ebx
c0022645:	56                   	push   esi
c0022646:	e8 1d fc ff ff       	call   c0022268 <PCI::checkBus(unsigned char)>
c002264b:	83 c4 10             	add    esp,0x10
c002264e:	83 fb 08             	cmp    ebx,0x8
c0022651:	74 12                	je     c0022665 <PCI::detect()+0x4f>
c0022653:	53                   	push   ebx
c0022654:	6a 00                	push   0x0
c0022656:	6a 00                	push   0x0
c0022658:	56                   	push   esi
c0022659:	e8 28 fa ff ff       	call   c0022086 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002265e:	83 c4 10             	add    esp,0x10
c0022661:	66 40                	inc    ax
c0022663:	74 dc                	je     c0022641 <PCI::detect()+0x2b>
c0022665:	58                   	pop    eax
c0022666:	5b                   	pop    ebx
c0022667:	5e                   	pop    esi
c0022668:	c3                   	ret    
c0022669:	90                   	nop

c002266a <IDE::close(int, int, void*)>:
c002266a:	83 c8 ff             	or     eax,0xffffffff
c002266d:	c3                   	ret    

c002266e <IDE::IDE()>:
c002266e:	83 ec 0c             	sub    esp,0xc
c0022671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022675:	83 ec 08             	sub    esp,0x8
c0022678:	68 80 c0 02 c0       	push   0xc002c080
c002267d:	50                   	push   eax
c002267e:	e8 1b 1a ff ff       	call   c001409e <HardDiskController::HardDiskController(char const*)>
c0022683:	83 c4 10             	add    esp,0x10
c0022686:	ba c0 c2 02 c0       	mov    edx,0xc002c2c0
c002268b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002268f:	89 10                	mov    DWORD PTR [eax],edx
c0022691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022695:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002269c:	90                   	nop
c002269d:	83 c4 0c             	add    esp,0xc
c00226a0:	c3                   	ret    
c00226a1:	90                   	nop

c00226a2 <IDE::prepareInterrupt(unsigned char)>:
c00226a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00226a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226ab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00226b3:	c3                   	ret    

c00226b4 <selectDrive(unsigned char, unsigned char)>:
c00226b4:	c3                   	ret    
c00226b5:	90                   	nop

c00226b6 <IDE::getBase(unsigned char)>:
c00226b6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00226bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226bf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00226c7:	c3                   	ret    

c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00226c8:	55                   	push   ebp
c00226c9:	57                   	push   edi
c00226ca:	56                   	push   esi
c00226cb:	53                   	push   ebx
c00226cc:	83 ec 1c             	sub    esp,0x1c
c00226cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00226d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00226d7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00226da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00226de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00226e2:	80 f9 03             	cmp    cl,0x3
c00226e5:	77 51                	ja     c0022738 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00226e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226eb:	0f b6 f2             	movzx  esi,dl
c00226ee:	0f b6 db             	movzx  ebx,bl
c00226f1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00226f4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00226f8:	83 ca 80             	or     edx,0xffffff80
c00226fb:	0f b6 d2             	movzx  edx,dl
c00226fe:	52                   	push   edx
c00226ff:	6a 0c                	push   0xc
c0022701:	56                   	push   esi
c0022702:	57                   	push   edi
c0022703:	e8 c0 ff ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022708:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002270d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022711:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022715:	ee                   	out    dx,al
c0022716:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002271b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002271f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022723:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022727:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002272f:	83 c4 2c             	add    esp,0x2c
c0022732:	5b                   	pop    ebx
c0022733:	5e                   	pop    esi
c0022734:	5f                   	pop    edi
c0022735:	5d                   	pop    ebp
c0022736:	eb 90                	jmp    c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022738:	80 fb 07             	cmp    bl,0x7
c002273b:	77 12                	ja     c002274f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002273d:	0f b6 d2             	movzx  edx,dl
c0022740:	0f b6 db             	movzx  ebx,bl
c0022743:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002274b:	89 da                	mov    edx,ebx
c002274d:	eb 2f                	jmp    c002277e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002274f:	80 fb 0d             	cmp    bl,0xd
c0022752:	77 13                	ja     c0022767 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022754:	0f b6 d2             	movzx  edx,dl
c0022757:	0f b6 db             	movzx  ebx,bl
c002275a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022761:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022765:	eb 17                	jmp    c002277e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022767:	80 fb 15             	cmp    bl,0x15
c002276a:	77 13                	ja     c002277f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002276c:	0f b6 d2             	movzx  edx,dl
c002276f:	0f b6 db             	movzx  ebx,bl
c0022772:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002277a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002277e:	ee                   	out    dx,al
c002277f:	83 c4 1c             	add    esp,0x1c
c0022782:	5b                   	pop    ebx
c0022783:	5e                   	pop    esi
c0022784:	5f                   	pop    edi
c0022785:	5d                   	pop    ebp
c0022786:	c3                   	ret    
c0022787:	90                   	nop

c0022788 <IDE::read(unsigned char, unsigned char)>:
c0022788:	55                   	push   ebp
c0022789:	57                   	push   edi
c002278a:	56                   	push   esi
c002278b:	53                   	push   ebx
c002278c:	83 ec 1c             	sub    esp,0x1c
c002278f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022793:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022797:	8d 43 f8             	lea    eax,[ebx-0x8]
c002279a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002279e:	3c 03                	cmp    al,0x3
c00227a0:	77 43                	ja     c00227e5 <IDE::read(unsigned char, unsigned char)+0x5d>
c00227a2:	0f b6 f2             	movzx  esi,dl
c00227a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00227a8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00227ac:	83 c8 80             	or     eax,0xffffff80
c00227af:	0f b6 c0             	movzx  eax,al
c00227b2:	50                   	push   eax
c00227b3:	6a 0c                	push   0xc
c00227b5:	56                   	push   esi
c00227b6:	57                   	push   edi
c00227b7:	e8 0c ff ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227bc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00227c1:	0f b6 c3             	movzx  eax,bl
c00227c4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00227c8:	ec                   	in     al,dx
c00227c9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00227cd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00227d2:	52                   	push   edx
c00227d3:	6a 0c                	push   0xc
c00227d5:	56                   	push   esi
c00227d6:	57                   	push   edi
c00227d7:	e8 ec fe ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227dc:	83 c4 20             	add    esp,0x20
c00227df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00227e3:	eb 49                	jmp    c002282e <IDE::read(unsigned char, unsigned char)+0xa6>
c00227e5:	80 fb 07             	cmp    bl,0x7
c00227e8:	77 12                	ja     c00227fc <IDE::read(unsigned char, unsigned char)+0x74>
c00227ea:	0f b6 d2             	movzx  edx,dl
c00227ed:	0f b6 c3             	movzx  eax,bl
c00227f0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00227f8:	89 c2                	mov    edx,eax
c00227fa:	eb 31                	jmp    c002282d <IDE::read(unsigned char, unsigned char)+0xa5>
c00227fc:	80 fb 0d             	cmp    bl,0xd
c00227ff:	77 13                	ja     c0022814 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022801:	0f b6 d2             	movzx  edx,dl
c0022804:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002280b:	0f b6 d3             	movzx  edx,bl
c002280e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022812:	eb 19                	jmp    c002282d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022814:	31 c0                	xor    eax,eax
c0022816:	80 fb 15             	cmp    bl,0x15
c0022819:	77 13                	ja     c002282e <IDE::read(unsigned char, unsigned char)+0xa6>
c002281b:	0f b6 d2             	movzx  edx,dl
c002281e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022826:	0f b6 d3             	movzx  edx,bl
c0022829:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002282d:	ec                   	in     al,dx
c002282e:	83 c4 1c             	add    esp,0x1c
c0022831:	5b                   	pop    ebx
c0022832:	5e                   	pop    esi
c0022833:	5f                   	pop    edi
c0022834:	5d                   	pop    ebp
c0022835:	c3                   	ret    

c0022836 <IDE::waitInterrupt(unsigned char)>:
c0022836:	55                   	push   ebp
c0022837:	57                   	push   edi
c0022838:	56                   	push   esi
c0022839:	53                   	push   ebx
c002283a:	31 db                	xor    ebx,ebx
c002283c:	83 ec 0c             	sub    esp,0xc
c002283f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022843:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022848:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022850:	89 e8                	mov    eax,ebp
c0022852:	84 c0                	test   al,al
c0022854:	75 34                	jne    c002288a <IDE::waitInterrupt(unsigned char)+0x54>
c0022856:	52                   	push   edx
c0022857:	6a 0c                	push   0xc
c0022859:	56                   	push   esi
c002285a:	57                   	push   edi
c002285b:	e8 28 ff ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022860:	83 c4 10             	add    esp,0x10
c0022863:	a8 01                	test   al,0x1
c0022865:	75 2b                	jne    c0022892 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022867:	f6 c3 04             	test   bl,0x4
c002286a:	75 16                	jne    c0022882 <IDE::waitInterrupt(unsigned char)+0x4c>
c002286c:	83 fb 32             	cmp    ebx,0x32
c002286f:	7e 11                	jle    c0022882 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022871:	50                   	push   eax
c0022872:	50                   	push   eax
c0022873:	6a 00                	push   0x0
c0022875:	68 80 96 98 00       	push   0x989680
c002287a:	e8 8b b1 ff ff       	call   c001da0a <nanoSleep(unsigned long long)>
c002287f:	83 c4 10             	add    esp,0x10
c0022882:	83 fb 3c             	cmp    ebx,0x3c
c0022885:	74 0b                	je     c0022892 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022887:	43                   	inc    ebx
c0022888:	eb be                	jmp    c0022848 <IDE::waitInterrupt(unsigned char)+0x12>
c002288a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022892:	83 c4 0c             	add    esp,0xc
c0022895:	89 e8                	mov    eax,ebp
c0022897:	5b                   	pop    ebx
c0022898:	5e                   	pop    esi
c0022899:	5f                   	pop    edi
c002289a:	5d                   	pop    ebp
c002289b:	c3                   	ret    

c002289c <ideChannel0IRQHandler(regs*, void*)>:
c002289c:	83 ec 10             	sub    esp,0x10
c002289f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228a3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00228aa:	6a 07                	push   0x7
c00228ac:	6a 00                	push   0x0
c00228ae:	50                   	push   eax
c00228af:	e8 d4 fe ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c00228b4:	83 c4 1c             	add    esp,0x1c
c00228b7:	c3                   	ret    

c00228b8 <ideChannel1IRQHandler(regs*, void*)>:
c00228b8:	83 ec 10             	sub    esp,0x10
c00228bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228bf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00228c6:	6a 07                	push   0x7
c00228c8:	6a 01                	push   0x1
c00228ca:	50                   	push   eax
c00228cb:	e8 b8 fe ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c00228d0:	83 c4 1c             	add    esp,0x1c
c00228d3:	c3                   	ret    

c00228d4 <IDE::enableIRQs(unsigned char, bool)>:
c00228d4:	57                   	push   edi
c00228d5:	56                   	push   esi
c00228d6:	be 04 00 00 00       	mov    esi,0x4
c00228db:	53                   	push   ebx
c00228dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00228e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228e5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00228ea:	0f 94 c0             	sete   al
c00228ed:	d1 e0                	shl    eax,1
c00228ef:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00228f6:	0f b6 c0             	movzx  eax,al
c00228f9:	50                   	push   eax
c00228fa:	6a 0c                	push   0xc
c00228fc:	57                   	push   edi
c00228fd:	53                   	push   ebx
c00228fe:	e8 c5 fd ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022903:	83 c4 10             	add    esp,0x10
c0022906:	50                   	push   eax
c0022907:	6a 0c                	push   0xc
c0022909:	57                   	push   edi
c002290a:	53                   	push   ebx
c002290b:	e8 78 fe ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022910:	83 c4 10             	add    esp,0x10
c0022913:	4e                   	dec    esi
c0022914:	75 f0                	jne    c0022906 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022916:	5b                   	pop    ebx
c0022917:	5e                   	pop    esi
c0022918:	5f                   	pop    edi
c0022919:	c3                   	ret    

c002291a <IDE::open(int, int, void*)>:
c002291a:	55                   	push   ebp
c002291b:	57                   	push   edi
c002291c:	56                   	push   esi
c002291d:	53                   	push   ebx
c002291e:	83 ec 1c             	sub    esp,0x1c
c0022921:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022925:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002292e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022937:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002293e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022945:	0f 85 b0 02 00 00    	jne    c0022bfb <IDE::open(int, int, void*)+0x2e1>
c002294b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022951:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022955:	83 e0 7f             	and    eax,0x7f
c0022958:	3c 05                	cmp    al,0x5
c002295a:	74 04                	je     c0022960 <IDE::open(int, int, void*)+0x46>
c002295c:	3c 0f                	cmp    al,0xf
c002295e:	75 32                	jne    c0022992 <IDE::open(int, int, void*)+0x78>
c0022960:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022966:	83 e0 fc             	and    eax,0xfffffffc
c0022969:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022970:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022976:	83 e0 fc             	and    eax,0xfffffffc
c0022979:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022980:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022986:	83 e0 fc             	and    eax,0xfffffffc
c0022989:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022990:	eb 14                	jmp    c00229a6 <IDE::open(int, int, void*)+0x8c>
c0022992:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002299c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00229a6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00229ad:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00229b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00229b8:	89 c6                	mov    esi,eax
c00229ba:	bf f8 0c 00 00       	mov    edi,0xcf8
c00229bf:	c1 e6 10             	shl    esi,0x10
c00229c2:	89 e8                	mov    eax,ebp
c00229c4:	89 fa                	mov    edx,edi
c00229c6:	c1 e0 0b             	shl    eax,0xb
c00229c9:	09 f0                	or     eax,esi
c00229cb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00229d2:	c1 e6 08             	shl    esi,0x8
c00229d5:	09 c6                	or     esi,eax
c00229d7:	89 f0                	mov    eax,esi
c00229d9:	0d 08 00 00 80       	or     eax,0x80000008
c00229de:	ef                   	out    dx,eax
c00229df:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00229e4:	89 ca                	mov    edx,ecx
c00229e6:	ed                   	in     eax,dx
c00229e7:	c1 e8 10             	shr    eax,0x10
c00229ea:	3d ff ff 00 00       	cmp    eax,0xffff
c00229ef:	0f 84 f5 00 00 00    	je     c0022aea <IDE::open(int, int, void*)+0x1d0>
c00229f5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00229fb:	89 fa                	mov    edx,edi
c00229fd:	89 f0                	mov    eax,esi
c00229ff:	ef                   	out    dx,eax
c0022a00:	b0 fe                	mov    al,0xfe
c0022a02:	89 ca                	mov    edx,ecx
c0022a04:	ee                   	out    dx,al
c0022a05:	89 f0                	mov    eax,esi
c0022a07:	89 fa                	mov    edx,edi
c0022a09:	ef                   	out    dx,eax
c0022a0a:	89 ca                	mov    edx,ecx
c0022a0c:	ed                   	in     eax,dx
c0022a0d:	3c fe                	cmp    al,0xfe
c0022a0f:	0f 85 a9 00 00 00    	jne    c0022abe <IDE::open(int, int, void*)+0x1a4>
c0022a15:	8b 15 48 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da48
c0022a1b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022a22:	74 33                	je     c0022a57 <IDE::open(int, int, void*)+0x13d>
c0022a24:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022a2a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022a2e:	40                   	inc    eax
c0022a2f:	83 ec 0c             	sub    esp,0xc
c0022a32:	0f b6 c0             	movzx  eax,al
c0022a35:	50                   	push   eax
c0022a36:	55                   	push   ebp
c0022a37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a3b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022a41:	51                   	push   ecx
c0022a42:	e8 db 51 ff ff       	call   c0017c22 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022a47:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022a4c:	83 c4 1c             	add    esp,0x1c
c0022a4f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022a55:	eb 0a                	jmp    c0022a61 <IDE::open(int, int, void*)+0x147>
c0022a57:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022a61:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022a68:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022a6f:	c1 e1 10             	shl    ecx,0x10
c0022a72:	c1 e0 08             	shl    eax,0x8
c0022a75:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022a7a:	09 c1                	or     ecx,eax
c0022a7c:	89 fa                	mov    edx,edi
c0022a7e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022a85:	c1 e0 0b             	shl    eax,0xb
c0022a88:	09 c1                	or     ecx,eax
c0022a8a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022a90:	89 c8                	mov    eax,ecx
c0022a92:	ef                   	out    dx,eax
c0022a93:	be fc 0c 00 00       	mov    esi,0xcfc
c0022a98:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022a9e:	89 f2                	mov    edx,esi
c0022aa0:	ee                   	out    dx,al
c0022aa1:	89 c8                	mov    eax,ecx
c0022aa3:	89 fa                	mov    edx,edi
c0022aa5:	ef                   	out    dx,eax
c0022aa6:	89 f2                	mov    edx,esi
c0022aa8:	ed                   	in     eax,dx
c0022aa9:	0f b6 c0             	movzx  eax,al
c0022aac:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022ab2:	74 46                	je     c0022afa <IDE::open(int, int, void*)+0x1e0>
c0022ab4:	83 ec 0c             	sub    esp,0xc
c0022ab7:	68 98 c0 02 c0       	push   0xc002c098
c0022abc:	eb 34                	jmp    c0022af2 <IDE::open(int, int, void*)+0x1d8>
c0022abe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022ac7:	75 17                	jne    c0022ae0 <IDE::open(int, int, void*)+0x1c6>
c0022ac9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022ace:	74 07                	je     c0022ad7 <IDE::open(int, int, void*)+0x1bd>
c0022ad0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022ad5:	75 09                	jne    c0022ae0 <IDE::open(int, int, void*)+0x1c6>
c0022ad7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022ade:	eb 1a                	jmp    c0022afa <IDE::open(int, int, void*)+0x1e0>
c0022ae0:	83 ec 0c             	sub    esp,0xc
c0022ae3:	68 a0 c0 02 c0       	push   0xc002c0a0
c0022ae8:	eb 08                	jmp    c0022af2 <IDE::open(int, int, void*)+0x1d8>
c0022aea:	83 ec 0c             	sub    esp,0xc
c0022aed:	68 d1 c0 02 c0       	push   0xc002c0d1
c0022af2:	e8 68 73 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0022af7:	83 c4 10             	add    esp,0x10
c0022afa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022b01:	79 1a                	jns    c0022b1d <IDE::open(int, int, void*)+0x203>
c0022b03:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022b09:	83 e0 fc             	and    eax,0xfffffffc
c0022b0c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022b13:	83 c0 08             	add    eax,0x8
c0022b16:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022b1d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022b23:	89 c2                	mov    edx,eax
c0022b25:	83 e2 0f             	and    edx,0xf
c0022b28:	66 83 fa 08          	cmp    dx,0x8
c0022b2c:	75 0a                	jne    c0022b38 <IDE::open(int, int, void*)+0x21e>
c0022b2e:	83 e8 02             	sub    eax,0x2
c0022b31:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b38:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022b3e:	89 c2                	mov    edx,eax
c0022b40:	83 e2 0f             	and    edx,0xf
c0022b43:	66 83 fa 08          	cmp    dx,0x8
c0022b47:	75 0a                	jne    c0022b53 <IDE::open(int, int, void*)+0x239>
c0022b49:	83 e8 02             	sub    eax,0x2
c0022b4c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022b53:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022b5a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022b61:	89 d0                	mov    eax,edx
c0022b63:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b66:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022b6a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022b6e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022b71:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022b76:	0f b6 c9             	movzx  ecx,cl
c0022b79:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022b80:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022b83:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022b87:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0022b8e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022b93:	0f b6 d2             	movzx  edx,dl
c0022b96:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022b9c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b9f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022ba3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022ba7:	8d 48 03             	lea    ecx,[eax+0x3]
c0022baa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022baf:	0f b6 c9             	movzx  ecx,cl
c0022bb2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022bb8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022bbb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022bbf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022bc3:	8d 50 04             	lea    edx,[eax+0x4]
c0022bc6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022bcc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022bd1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022bd8:	66 85 f6             	test   si,si
c0022bdb:	74 3e                	je     c0022c1b <IDE::open(int, int, void*)+0x301>
c0022bdd:	0f b6 d2             	movzx  edx,dl
c0022be0:	83 c0 05             	add    eax,0x5
c0022be3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022be6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022bea:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022bee:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022bf4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bf9:	eb 20                	jmp    c0022c1b <IDE::open(int, int, void*)+0x301>
c0022bfb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022c05:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022c0f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022c16:	e9 02 ff ff ff       	jmp    c0022b1d <IDE::open(int, int, void*)+0x203>
c0022c1b:	52                   	push   edx
c0022c1c:	52                   	push   edx
c0022c1d:	6a 00                	push   0x0
c0022c1f:	53                   	push   ebx
c0022c20:	e8 7d fa ff ff       	call   c00226a2 <IDE::prepareInterrupt(unsigned char)>
c0022c25:	59                   	pop    ecx
c0022c26:	5e                   	pop    esi
c0022c27:	6a 01                	push   0x1
c0022c29:	53                   	push   ebx
c0022c2a:	e8 73 fa ff ff       	call   c00226a2 <IDE::prepareInterrupt(unsigned char)>
c0022c2f:	83 c4 0c             	add    esp,0xc
c0022c32:	6a 00                	push   0x0
c0022c34:	6a 00                	push   0x0
c0022c36:	53                   	push   ebx
c0022c37:	e8 98 fc ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0022c3c:	83 c4 0c             	add    esp,0xc
c0022c3f:	6a 00                	push   0x0
c0022c41:	6a 01                	push   0x1
c0022c43:	53                   	push   ebx
c0022c44:	e8 8b fc ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0022c49:	83 c4 10             	add    esp,0x10
c0022c4c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022c53:	74 40                	je     c0022c95 <IDE::open(int, int, void*)+0x37b>
c0022c55:	83 ec 0c             	sub    esp,0xc
c0022c58:	68 fb c0 02 c0       	push   0xc002c0fb
c0022c5d:	e8 89 fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c65:	6a 01                	push   0x1
c0022c67:	68 9c 28 02 c0       	push   0xc002289c
c0022c6c:	6a 0e                	push   0xe
c0022c6e:	53                   	push   ebx
c0022c6f:	e8 22 10 ff ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c74:	83 c4 14             	add    esp,0x14
c0022c77:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022c7d:	53                   	push   ebx
c0022c7e:	6a 01                	push   0x1
c0022c80:	68 b8 28 02 c0       	push   0xc00228b8
c0022c85:	6a 0f                	push   0xf
c0022c87:	53                   	push   ebx
c0022c88:	e8 09 10 ff ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c8d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022c93:	eb 4a                	jmp    c0022cdf <IDE::open(int, int, void*)+0x3c5>
c0022c95:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022c9f:	50                   	push   eax
c0022ca0:	6a 0f                	push   0xf
c0022ca2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022ca8:	68 17 c1 02 c0       	push   0xc002c117
c0022cad:	e8 39 fc fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0022cb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022cb5:	6a 00                	push   0x0
c0022cb7:	68 9c 28 02 c0       	push   0xc002289c
c0022cbc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cc2:	53                   	push   ebx
c0022cc3:	e8 ce 0f ff ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cc8:	83 c4 14             	add    esp,0x14
c0022ccb:	53                   	push   ebx
c0022ccc:	6a 00                	push   0x0
c0022cce:	68 b8 28 02 c0       	push   0xc00228b8
c0022cd3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022cd9:	53                   	push   ebx
c0022cda:	e8 b7 0f ff ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ce1:	83 c4 20             	add    esp,0x20
c0022ce4:	83 ec 0c             	sub    esp,0xc
c0022ce7:	53                   	push   ebx
c0022ce8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022ceb:	83 c4 0c             	add    esp,0xc
c0022cee:	6a 07                	push   0x7
c0022cf0:	6a 00                	push   0x0
c0022cf2:	53                   	push   ebx
c0022cf3:	e8 90 fa ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022cf8:	83 c4 0c             	add    esp,0xc
c0022cfb:	6a 07                	push   0x7
c0022cfd:	6a 01                	push   0x1
c0022cff:	53                   	push   ebx
c0022d00:	e8 83 fa ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022d05:	83 c4 0c             	add    esp,0xc
c0022d08:	6a 01                	push   0x1
c0022d0a:	6a 00                	push   0x0
c0022d0c:	53                   	push   ebx
c0022d0d:	e8 c2 fb ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0022d12:	83 c4 0c             	add    esp,0xc
c0022d15:	6a 01                	push   0x1
c0022d17:	6a 01                	push   0x1
c0022d19:	53                   	push   ebx
c0022d1a:	e8 b5 fb ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0022d1f:	83 c4 2c             	add    esp,0x2c
c0022d22:	31 c0                	xor    eax,eax
c0022d24:	5b                   	pop    ebx
c0022d25:	5e                   	pop    esi
c0022d26:	5f                   	pop    edi
c0022d27:	5d                   	pop    ebp
c0022d28:	c3                   	ret    
c0022d29:	90                   	nop

c0022d2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022d2a:	55                   	push   ebp
c0022d2b:	57                   	push   edi
c0022d2c:	56                   	push   esi
c0022d2d:	53                   	push   ebx
c0022d2e:	83 ec 1c             	sub    esp,0x1c
c0022d31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d39:	8d 50 f8             	lea    edx,[eax-0x8]
c0022d3c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d40:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022d44:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022d48:	80 fa 03             	cmp    dl,0x3
c0022d4b:	77 5d                	ja     c0022daa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022d4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022d51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d55:	0f b6 db             	movzx  ebx,bl
c0022d58:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022d5b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022d5f:	83 ca 80             	or     edx,0xffffff80
c0022d62:	0f b6 d2             	movzx  edx,dl
c0022d65:	52                   	push   edx
c0022d66:	6a 0c                	push   0xc
c0022d68:	53                   	push   ebx
c0022d69:	56                   	push   esi
c0022d6a:	e8 59 f9 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d6f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022d74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d7c:	0f b6 c0             	movzx  eax,al
c0022d7f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022d83:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022d85:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022d8a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022d8e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022d92:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022d96:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022d9e:	83 c4 2c             	add    esp,0x2c
c0022da1:	5b                   	pop    ebx
c0022da2:	5e                   	pop    esi
c0022da3:	5f                   	pop    edi
c0022da4:	5d                   	pop    ebp
c0022da5:	e9 1e f9 ff ff       	jmp    c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022daa:	3c 07                	cmp    al,0x7
c0022dac:	77 10                	ja     c0022dbe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022dae:	0f b6 db             	movzx  ebx,bl
c0022db1:	0f b6 d0             	movzx  edx,al
c0022db4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022dbc:	eb 2d                	jmp    c0022deb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dbe:	3c 0d                	cmp    al,0xd
c0022dc0:	77 13                	ja     c0022dd5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022dc2:	0f b6 db             	movzx  ebx,bl
c0022dc5:	0f b6 c0             	movzx  eax,al
c0022dc8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022dcf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022dd3:	eb 16                	jmp    c0022deb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dd5:	3c 15                	cmp    al,0x15
c0022dd7:	77 14                	ja     c0022ded <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022dd9:	0f b6 db             	movzx  ebx,bl
c0022ddc:	0f b6 c0             	movzx  eax,al
c0022ddf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022de7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022deb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022ded:	83 c4 1c             	add    esp,0x1c
c0022df0:	5b                   	pop    ebx
c0022df1:	5e                   	pop    esi
c0022df2:	5f                   	pop    edi
c0022df3:	5d                   	pop    ebp
c0022df4:	c3                   	ret    
c0022df5:	90                   	nop

c0022df6 <IDE::detect()>:
c0022df6:	55                   	push   ebp
c0022df7:	57                   	push   edi
c0022df8:	56                   	push   esi
c0022df9:	53                   	push   ebx
c0022dfa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022e00:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022e07:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022e0e:	0f 85 be 02 00 00    	jne    c00230d2 <IDE::detect()+0x2dc>
c0022e14:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022e1b:	31 f6                	xor    esi,esi
c0022e1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022e25:	31 ed                	xor    ebp,ebp
c0022e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e2b:	c1 e0 06             	shl    eax,0x6
c0022e2e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022e36:	89 e8                	mov    eax,ebp
c0022e38:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022e3c:	c1 e0 04             	shl    eax,0x4
c0022e3f:	83 c8 a0             	or     eax,0xffffffa0
c0022e42:	0f b6 c0             	movzx  eax,al
c0022e45:	50                   	push   eax
c0022e46:	6a 06                	push   0x6
c0022e48:	56                   	push   esi
c0022e49:	53                   	push   ebx
c0022e4a:	e8 79 f8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e4f:	83 c4 0c             	add    esp,0xc
c0022e52:	6a 0c                	push   0xc
c0022e54:	56                   	push   esi
c0022e55:	53                   	push   ebx
c0022e56:	e8 2d f9 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022e5b:	83 c4 0c             	add    esp,0xc
c0022e5e:	6a 0c                	push   0xc
c0022e60:	56                   	push   esi
c0022e61:	53                   	push   ebx
c0022e62:	e8 21 f9 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022e67:	83 c4 0c             	add    esp,0xc
c0022e6a:	6a 0c                	push   0xc
c0022e6c:	56                   	push   esi
c0022e6d:	53                   	push   ebx
c0022e6e:	e8 15 f9 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022e73:	83 c4 0c             	add    esp,0xc
c0022e76:	6a 0c                	push   0xc
c0022e78:	56                   	push   esi
c0022e79:	53                   	push   ebx
c0022e7a:	e8 09 f9 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022e7f:	68 ec 00 00 00       	push   0xec
c0022e84:	6a 07                	push   0x7
c0022e86:	56                   	push   esi
c0022e87:	53                   	push   ebx
c0022e88:	e8 3b f8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e8d:	83 c4 1c             	add    esp,0x1c
c0022e90:	6a 0c                	push   0xc
c0022e92:	56                   	push   esi
c0022e93:	53                   	push   ebx
c0022e94:	e8 ef f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022e99:	83 c4 0c             	add    esp,0xc
c0022e9c:	6a 0c                	push   0xc
c0022e9e:	56                   	push   esi
c0022e9f:	53                   	push   ebx
c0022ea0:	e8 e3 f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022ea5:	83 c4 0c             	add    esp,0xc
c0022ea8:	6a 0c                	push   0xc
c0022eaa:	56                   	push   esi
c0022eab:	53                   	push   ebx
c0022eac:	e8 d7 f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022eb1:	83 c4 0c             	add    esp,0xc
c0022eb4:	6a 0c                	push   0xc
c0022eb6:	56                   	push   esi
c0022eb7:	53                   	push   ebx
c0022eb8:	e8 cb f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022ebd:	83 c4 0c             	add    esp,0xc
c0022ec0:	6a 0c                	push   0xc
c0022ec2:	56                   	push   esi
c0022ec3:	53                   	push   ebx
c0022ec4:	e8 bf f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022ec9:	83 c4 10             	add    esp,0x10
c0022ecc:	84 c0                	test   al,al
c0022ece:	0f 84 8b 01 00 00    	je     c002305f <IDE::detect()+0x269>
c0022ed4:	31 ff                	xor    edi,edi
c0022ed6:	50                   	push   eax
c0022ed7:	6a 0c                	push   0xc
c0022ed9:	56                   	push   esi
c0022eda:	53                   	push   ebx
c0022edb:	e8 a8 f8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0022ee0:	83 c4 10             	add    esp,0x10
c0022ee3:	a8 01                	test   al,0x1
c0022ee5:	0f 85 8e 01 00 00    	jne    c0023079 <IDE::detect()+0x283>
c0022eeb:	84 c0                	test   al,al
c0022eed:	78 04                	js     c0022ef3 <IDE::detect()+0xfd>
c0022eef:	a8 08                	test   al,0x8
c0022ef1:	75 27                	jne    c0022f1a <IDE::detect()+0x124>
c0022ef3:	47                   	inc    edi
c0022ef4:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022efa:	7e da                	jle    c0022ed6 <IDE::detect()+0xe0>
c0022efc:	50                   	push   eax
c0022efd:	50                   	push   eax
c0022efe:	6a 00                	push   0x0
c0022f00:	68 40 4b 4c 00       	push   0x4c4b40
c0022f05:	e8 00 ab ff ff       	call   c001da0a <nanoSleep(unsigned long long)>
c0022f0a:	83 c4 10             	add    esp,0x10
c0022f0d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022f13:	75 c1                	jne    c0022ed6 <IDE::detect()+0xe0>
c0022f15:	e9 5f 01 00 00       	jmp    c0023079 <IDE::detect()+0x283>
c0022f1a:	31 c9                	xor    ecx,ecx
c0022f1c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022f20:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022f24:	83 ec 0c             	sub    esp,0xc
c0022f27:	68 80 00 00 00       	push   0x80
c0022f2c:	57                   	push   edi
c0022f2d:	6a 00                	push   0x0
c0022f2f:	56                   	push   esi
c0022f30:	53                   	push   ebx
c0022f31:	e8 f4 fd ff ff       	call   c0022d2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022f36:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022f3f:	89 d1                	mov    ecx,edx
c0022f41:	c1 e0 06             	shl    eax,0x6
c0022f44:	01 d8                	add    eax,ebx
c0022f46:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022f4d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022f54:	89 f2                	mov    edx,esi
c0022f56:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022f5c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022f60:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022f66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f6a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022f71:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022f79:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022f80:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022f88:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022f8e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022f95:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022f9b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022f9f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022fa3:	83 c4 20             	add    esp,0x20
c0022fa6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022fa9:	83 c0 02             	add    eax,0x2
c0022fac:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022fb2:	83 c7 02             	add    edi,0x2
c0022fb5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022fb8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022fbe:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022fc2:	75 e2                	jne    c0022fa6 <IDE::detect()+0x1b0>
c0022fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc8:	c1 e0 06             	shl    eax,0x6
c0022fcb:	01 d8                	add    eax,ebx
c0022fcd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022fd3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022fda:	66 c1 ea 09          	shr    dx,0x9
c0022fde:	83 e2 01             	and    edx,0x1
c0022fe1:	84 c9                	test   cl,cl
c0022fe3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022fe9:	75 2f                	jne    c002301a <IDE::detect()+0x224>
c0022feb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022ff1:	85 c0                	test   eax,eax
c0022ff3:	74 66                	je     c002305b <IDE::detect()+0x265>
c0022ff5:	50                   	push   eax
c0022ff6:	55                   	push   ebp
c0022ff7:	56                   	push   esi
c0022ff8:	68 33 c1 02 c0       	push   0xc002c133
c0022ffd:	e8 e9 f8 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023002:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023009:	e8 0e c6 fe ff       	call   c000f61c <malloc>
c002300e:	89 c7                	mov    edi,eax
c0023010:	89 04 24             	mov    DWORD PTR [esp],eax
c0023013:	e8 78 06 00 00       	call   c0023690 <ATA::ATA()>
c0023018:	eb 28                	jmp    c0023042 <IDE::detect()+0x24c>
c002301a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023020:	55                   	push   ebp
c0023021:	56                   	push   esi
c0023022:	68 62 c1 02 c0       	push   0xc002c162
c0023027:	e8 bf f8 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002302c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023033:	e8 e4 c5 fe ff       	call   c000f61c <malloc>
c0023038:	89 c7                	mov    edi,eax
c002303a:	89 04 24             	mov    DWORD PTR [esp],eax
c002303d:	e8 d6 0c 00 00       	call   c0023d18 <ATAPI::ATAPI()>
c0023042:	5a                   	pop    edx
c0023043:	59                   	pop    ecx
c0023044:	57                   	push   edi
c0023045:	53                   	push   ebx
c0023046:	e8 c7 0c ff ff       	call   c0013d12 <Device::addChild(Device*)>
c002304b:	8b 07                	mov    eax,DWORD PTR [edi]
c002304d:	53                   	push   ebx
c002304e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023052:	6a 00                	push   0x0
c0023054:	57                   	push   edi
c0023055:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023058:	83 c4 20             	add    esp,0x20
c002305b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002305f:	4d                   	dec    ebp
c0023060:	74 0a                	je     c002306c <IDE::detect()+0x276>
c0023062:	bd 01 00 00 00       	mov    ebp,0x1
c0023067:	e9 bb fd ff ff       	jmp    c0022e27 <IDE::detect()+0x31>
c002306c:	4e                   	dec    esi
c002306d:	74 63                	je     c00230d2 <IDE::detect()+0x2dc>
c002306f:	be 01 00 00 00       	mov    esi,0x1
c0023074:	e9 ac fd ff ff       	jmp    c0022e25 <IDE::detect()+0x2f>
c0023079:	50                   	push   eax
c002307a:	6a 04                	push   0x4
c002307c:	56                   	push   esi
c002307d:	53                   	push   ebx
c002307e:	e8 05 f7 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023083:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023087:	83 c4 0c             	add    esp,0xc
c002308a:	6a 05                	push   0x5
c002308c:	56                   	push   esi
c002308d:	53                   	push   ebx
c002308e:	e8 f5 f6 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023093:	83 c4 10             	add    esp,0x10
c0023096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002309a:	80 fa 14             	cmp    dl,0x14
c002309d:	75 04                	jne    c00230a3 <IDE::detect()+0x2ad>
c002309f:	3c eb                	cmp    al,0xeb
c00230a1:	eb 07                	jmp    c00230aa <IDE::detect()+0x2b4>
c00230a3:	3c 96                	cmp    al,0x96
c00230a5:	75 b8                	jne    c002305f <IDE::detect()+0x269>
c00230a7:	80 fa 69             	cmp    dl,0x69
c00230aa:	75 b3                	jne    c002305f <IDE::detect()+0x269>
c00230ac:	68 a1 00 00 00       	push   0xa1
c00230b1:	6a 07                	push   0x7
c00230b3:	56                   	push   esi
c00230b4:	53                   	push   ebx
c00230b5:	e8 0e f6 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ba:	5f                   	pop    edi
c00230bb:	58                   	pop    eax
c00230bc:	6a 00                	push   0x0
c00230be:	68 40 42 0f 00       	push   0xf4240
c00230c3:	e8 42 a9 ff ff       	call   c001da0a <nanoSleep(unsigned long long)>
c00230c8:	83 c4 10             	add    esp,0x10
c00230cb:	b1 01                	mov    cl,0x1
c00230cd:	e9 4a fe ff ff       	jmp    c0022f1c <IDE::detect()+0x126>
c00230d2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00230d8:	5b                   	pop    ebx
c00230d9:	5e                   	pop    esi
c00230da:	5f                   	pop    edi
c00230db:	5d                   	pop    ebp
c00230dc:	c3                   	ret    
c00230dd:	90                   	nop

c00230de <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00230de:	55                   	push   ebp
c00230df:	57                   	push   edi
c00230e0:	56                   	push   esi
c00230e1:	53                   	push   ebx
c00230e2:	83 ec 1c             	sub    esp,0x1c
c00230e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00230f1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00230f5:	88 c3                	mov    bl,al
c00230f7:	84 c0                	test   al,al
c00230f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230fd:	0f 84 67 01 00 00    	je     c002326a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023103:	83 ec 0c             	sub    esp,0xc
c0023106:	68 93 c1 02 c0       	push   0xc002c193
c002310b:	e8 db f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023110:	83 c4 10             	add    esp,0x10
c0023113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023117:	3c 01                	cmp    al,0x1
c0023119:	75 17                	jne    c0023132 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002311b:	83 ec 0c             	sub    esp,0xc
c002311e:	b3 13                	mov    bl,0x13
c0023120:	68 9f c1 02 c0       	push   0xc002c19f
c0023125:	e8 c1 f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002312a:	83 c4 10             	add    esp,0x10
c002312d:	e9 25 01 00 00       	jmp    c0023257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023132:	3c 02                	cmp    al,0x2
c0023134:	0f 85 ef 00 00 00    	jne    c0023229 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002313a:	d1 e6                	shl    esi,1
c002313c:	09 ee                	or     esi,ebp
c002313e:	52                   	push   edx
c002313f:	89 f0                	mov    eax,esi
c0023141:	6a 01                	push   0x1
c0023143:	0f b6 f0             	movzx  esi,al
c0023146:	c1 e6 06             	shl    esi,0x6
c0023149:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023151:	50                   	push   eax
c0023152:	57                   	push   edi
c0023153:	e8 30 f6 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023158:	83 c4 10             	add    esp,0x10
c002315b:	89 c6                	mov    esi,eax
c002315d:	a8 01                	test   al,0x1
c002315f:	74 12                	je     c0023173 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023161:	83 ec 0c             	sub    esp,0xc
c0023164:	b3 07                	mov    bl,0x7
c0023166:	68 b4 c1 02 c0       	push   0xc002c1b4
c002316b:	e8 7b f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023170:	83 c4 10             	add    esp,0x10
c0023173:	f7 c6 02 00 00 00    	test   esi,0x2
c0023179:	74 12                	je     c002318d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002317b:	83 ec 0c             	sub    esp,0xc
c002317e:	b3 03                	mov    bl,0x3
c0023180:	68 d2 c1 02 c0       	push   0xc002c1d2
c0023185:	e8 61 f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002318a:	83 c4 10             	add    esp,0x10
c002318d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023193:	74 12                	je     c00231a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023195:	83 ec 0c             	sub    esp,0xc
c0023198:	b3 14                	mov    bl,0x14
c002319a:	68 f2 c1 02 c0       	push   0xc002c1f2
c002319f:	e8 47 f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00231a4:	83 c4 10             	add    esp,0x10
c00231a7:	f7 c6 08 00 00 00    	test   esi,0x8
c00231ad:	74 12                	je     c00231c1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00231af:	83 ec 0c             	sub    esp,0xc
c00231b2:	b3 03                	mov    bl,0x3
c00231b4:	68 d2 c1 02 c0       	push   0xc002c1d2
c00231b9:	e8 2d f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00231be:	83 c4 10             	add    esp,0x10
c00231c1:	f7 c6 10 00 00 00    	test   esi,0x10
c00231c7:	74 12                	je     c00231db <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00231c9:	83 ec 0c             	sub    esp,0xc
c00231cc:	b3 15                	mov    bl,0x15
c00231ce:	68 0a c2 02 c0       	push   0xc002c20a
c00231d3:	e8 13 f7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00231d8:	83 c4 10             	add    esp,0x10
c00231db:	f7 c6 20 00 00 00    	test   esi,0x20
c00231e1:	74 12                	je     c00231f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00231e3:	83 ec 0c             	sub    esp,0xc
c00231e6:	b3 03                	mov    bl,0x3
c00231e8:	68 d2 c1 02 c0       	push   0xc002c1d2
c00231ed:	e8 f9 f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00231f2:	83 c4 10             	add    esp,0x10
c00231f5:	f7 c6 40 00 00 00    	test   esi,0x40
c00231fb:	74 12                	je     c002320f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00231fd:	83 ec 0c             	sub    esp,0xc
c0023200:	b3 16                	mov    bl,0x16
c0023202:	68 24 c2 02 c0       	push   0xc002c224
c0023207:	e8 df f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002320c:	83 c4 10             	add    esp,0x10
c002320f:	89 f0                	mov    eax,esi
c0023211:	84 c0                	test   al,al
c0023213:	79 42                	jns    c0023257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023215:	83 ec 0c             	sub    esp,0xc
c0023218:	b3 0d                	mov    bl,0xd
c002321a:	68 45 c2 02 c0       	push   0xc002c245
c002321f:	e8 c7 f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023224:	83 c4 10             	add    esp,0x10
c0023227:	eb 2e                	jmp    c0023257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023229:	3c 03                	cmp    al,0x3
c002322b:	75 14                	jne    c0023241 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002322d:	83 ec 0c             	sub    esp,0xc
c0023230:	b3 17                	mov    bl,0x17
c0023232:	68 59 c2 02 c0       	push   0xc002c259
c0023237:	e8 af f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002323c:	83 c4 10             	add    esp,0x10
c002323f:	eb 16                	jmp    c0023257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023241:	3c 04                	cmp    al,0x4
c0023243:	75 12                	jne    c0023257 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023245:	83 ec 0c             	sub    esp,0xc
c0023248:	b3 08                	mov    bl,0x8
c002324a:	68 6f c2 02 c0       	push   0xc002c26f
c002324f:	e8 97 f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023254:	83 c4 10             	add    esp,0x10
c0023257:	50                   	push   eax
c0023258:	50                   	push   eax
c0023259:	0f b6 c3             	movzx  eax,bl
c002325c:	50                   	push   eax
c002325d:	68 87 c2 02 c0       	push   0xc002c287
c0023262:	e8 84 f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	83 c4 1c             	add    esp,0x1c
c002326d:	88 d8                	mov    al,bl
c002326f:	5b                   	pop    ebx
c0023270:	5e                   	pop    esi
c0023271:	5f                   	pop    edi
c0023272:	5d                   	pop    ebp
c0023273:	c3                   	ret    

c0023274 <IDE::polling(unsigned char, unsigned int)>:
c0023274:	57                   	push   edi
c0023275:	56                   	push   esi
c0023276:	53                   	push   ebx
c0023277:	bb 04 00 00 00       	mov    ebx,0x4
c002327c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023280:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023285:	52                   	push   edx
c0023286:	6a 0c                	push   0xc
c0023288:	56                   	push   esi
c0023289:	57                   	push   edi
c002328a:	e8 f9 f4 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c002328f:	83 c4 10             	add    esp,0x10
c0023292:	4b                   	dec    ebx
c0023293:	75 f0                	jne    c0023285 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023295:	bb a0 86 01 00       	mov    ebx,0x186a0
c002329a:	50                   	push   eax
c002329b:	6a 0c                	push   0xc
c002329d:	56                   	push   esi
c002329e:	57                   	push   edi
c002329f:	e8 e4 f4 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c00232a4:	83 c4 10             	add    esp,0x10
c00232a7:	a8 01                	test   al,0x1
c00232a9:	74 12                	je     c00232bd <IDE::polling(unsigned char, unsigned int)+0x49>
c00232ab:	83 ec 0c             	sub    esp,0xc
c00232ae:	68 a1 c2 02 c0       	push   0xc002c2a1
c00232b3:	e8 33 f6 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00232b8:	83 c4 10             	add    esp,0x10
c00232bb:	eb 17                	jmp    c00232d4 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232bd:	a8 20                	test   al,0x20
c00232bf:	75 0f                	jne    c00232d0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00232c1:	4b                   	dec    ebx
c00232c2:	74 10                	je     c00232d4 <IDE::polling(unsigned char, unsigned int)+0x60>
c00232c4:	84 c0                	test   al,al
c00232c6:	78 d2                	js     c002329a <IDE::polling(unsigned char, unsigned int)+0x26>
c00232c8:	a8 08                	test   al,0x8
c00232ca:	74 ce                	je     c002329a <IDE::polling(unsigned char, unsigned int)+0x26>
c00232cc:	31 c0                	xor    eax,eax
c00232ce:	eb 06                	jmp    c00232d6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00232d0:	b0 01                	mov    al,0x1
c00232d2:	eb 02                	jmp    c00232d6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00232d4:	b0 02                	mov    al,0x2
c00232d6:	5b                   	pop    ebx
c00232d7:	5e                   	pop    esi
c00232d8:	5f                   	pop    edi
c00232d9:	c3                   	ret    

c00232da <SATABus::close(int, int, void*)>:
c00232da:	31 c0                	xor    eax,eax
c00232dc:	c3                   	ret    
c00232dd:	90                   	nop

c00232de <SATABus::detect()>:
c00232de:	c3                   	ret    
c00232df:	90                   	nop

c00232e0 <SATABus::SATABus()>:
c00232e0:	83 ec 0c             	sub    esp,0xc
c00232e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e7:	83 ec 08             	sub    esp,0x8
c00232ea:	68 e4 c2 02 c0       	push   0xc002c2e4
c00232ef:	50                   	push   eax
c00232f0:	e8 a9 0d ff ff       	call   c001409e <HardDiskController::HardDiskController(char const*)>
c00232f5:	83 c4 10             	add    esp,0x10
c00232f8:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c00232fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023301:	89 10                	mov    DWORD PTR [eax],edx
c0023303:	83 ec 0c             	sub    esp,0xc
c0023306:	6a 50                	push   0x50
c0023308:	e8 74 ca fe ff       	call   c000fd81 <Phys::allocateContiguousPages(int)>
c002330d:	83 c4 10             	add    esp,0x10
c0023310:	89 c2                	mov    edx,eax
c0023312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023316:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002331c:	83 ec 0c             	sub    esp,0xc
c002331f:	6a 50                	push   0x50
c0023321:	e8 d5 e5 fe ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0023326:	83 c4 10             	add    esp,0x10
c0023329:	89 c2                	mov    edx,eax
c002332b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023335:	e8 51 e7 fe ff       	call   c0011a8b <Virt::getAKernelVAS()>
c002333a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002333e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023348:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002334e:	83 ec 0c             	sub    esp,0xc
c0023351:	6a 03                	push   0x3
c0023353:	6a 50                	push   0x50
c0023355:	51                   	push   ecx
c0023356:	52                   	push   edx
c0023357:	50                   	push   eax
c0023358:	e8 5d ef fe ff       	call   c00122ba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002335d:	83 c4 20             	add    esp,0x20
c0023360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023364:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002336a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023374:	83 ec 04             	sub    esp,0x4
c0023377:	52                   	push   edx
c0023378:	50                   	push   eax
c0023379:	68 08 c3 02 c0       	push   0xc002c308
c002337e:	e8 68 f5 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023383:	83 c4 10             	add    esp,0x10
c0023386:	90                   	nop
c0023387:	83 c4 0c             	add    esp,0xc
c002338a:	c3                   	ret    
c002338b:	90                   	nop

c002338c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002338c:	83 ec 0c             	sub    esp,0xc
c002338f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023393:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023396:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023399:	09 c2                	or     edx,eax
c002339b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002339f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00233a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00233a7:	31 c0                	xor    eax,eax
c00233a9:	c1 e9 08             	shr    ecx,0x8
c00233ac:	83 e1 0f             	and    ecx,0xf
c00233af:	39 c8                	cmp    eax,ecx
c00233b1:	74 0a                	je     c00233bd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00233b3:	f6 c2 01             	test   dl,0x1
c00233b6:	74 18                	je     c00233d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00233b8:	d1 ea                	shr    edx,1
c00233ba:	40                   	inc    eax
c00233bb:	eb f2                	jmp    c00233af <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00233bd:	83 ec 0c             	sub    esp,0xc
c00233c0:	68 2c c3 02 c0       	push   0xc002c32c
c00233c5:	e8 95 6a ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00233ca:	83 c4 10             	add    esp,0x10
c00233cd:	83 c8 ff             	or     eax,0xffffffff
c00233d0:	83 c4 0c             	add    esp,0xc
c00233d3:	c3                   	ret    

c00233d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00233d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00233d8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00233db:	89 c2                	mov    edx,eax
c00233dd:	c1 ea 08             	shr    edx,0x8
c00233e0:	83 e2 0f             	and    edx,0xf
c00233e3:	fe ca                	dec    dl
c00233e5:	75 31                	jne    c0023418 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233e7:	83 e0 0f             	and    eax,0xf
c00233ea:	3c 03                	cmp    al,0x3
c00233ec:	75 2a                	jne    c0023418 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233ee:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00233f1:	b8 02 00 00 00       	mov    eax,0x2
c00233f6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00233fc:	74 1c                	je     c002341a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00233fe:	b8 04 00 00 00       	mov    eax,0x4
c0023403:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023409:	74 0f                	je     c002341a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002340b:	31 c0                	xor    eax,eax
c002340d:	83 fa 03             	cmp    edx,0x3
c0023410:	0f 94 c0             	sete   al
c0023413:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023417:	c3                   	ret    
c0023418:	31 c0                	xor    eax,eax
c002341a:	c3                   	ret    
c002341b:	90                   	nop

c002341c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002341c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023420:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023423:	0f ba e2 0f          	bt     edx,0xf
c0023427:	72 f7                	jb     c0023420 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023429:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002342c:	83 ca 10             	or     edx,0x10
c002342f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023432:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023435:	83 ca 01             	or     edx,0x1
c0023438:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002343b:	c3                   	ret    

c002343c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002343c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023440:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023443:	83 e2 fe             	and    edx,0xfffffffe
c0023446:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023449:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002344c:	83 e2 ef             	and    edx,0xffffffef
c002344f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023452:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023455:	0f ba e2 0e          	bt     edx,0xe
c0023459:	72 f7                	jb     c0023452 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002345b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002345e:	0f ba e2 0f          	bt     edx,0xf
c0023462:	72 ee                	jb     c0023452 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023464:	c3                   	ret    
c0023465:	90                   	nop

c0023466 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023466:	55                   	push   ebp
c0023467:	57                   	push   edi
c0023468:	56                   	push   esi
c0023469:	53                   	push   ebx
c002346a:	83 ec 1c             	sub    esp,0x1c
c002346d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023471:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023475:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023479:	53                   	push   ebx
c002347a:	89 fd                	mov    ebp,edi
c002347c:	56                   	push   esi
c002347d:	c1 e5 0a             	shl    ebp,0xa
c0023480:	e8 b7 ff ff ff       	call   c002343c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023485:	83 ec 0c             	sub    esp,0xc
c0023488:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002348e:	01 e8                	add    eax,ebp
c0023490:	89 03                	mov    DWORD PTR [ebx],eax
c0023492:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023494:	68 00 04 00 00       	push   0x400
c0023499:	6a 00                	push   0x0
c002349b:	50                   	push   eax
c002349c:	e8 1b d2 fd ff       	call   c00006bc <memset>
c00234a1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00234a7:	89 fa                	mov    edx,edi
c00234a9:	01 e8                	add    eax,ebp
c00234ab:	c1 e7 0d             	shl    edi,0xd
c00234ae:	89 03                	mov    DWORD PTR [ebx],eax
c00234b0:	c1 e2 08             	shl    edx,0x8
c00234b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00234ba:	81 c2 00 80 00 00    	add    edx,0x8000
c00234c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00234c4:	89 d0                	mov    eax,edx
c00234c6:	83 c4 1c             	add    esp,0x1c
c00234c9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00234cf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00234d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00234d5:	68 00 01 00 00       	push   0x100
c00234da:	6a 00                	push   0x0
c00234dc:	50                   	push   eax
c00234dd:	e8 da d1 fd ff       	call   c00006bc <memset>
c00234e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00234e6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00234ec:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00234f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00234f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00234f9:	83 c4 10             	add    esp,0x10
c00234fc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023503:	31 ff                	xor    edi,edi
c0023505:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002350b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023515:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002351b:	83 c5 20             	add    ebp,0x20
c002351e:	01 f8                	add    eax,edi
c0023520:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023523:	52                   	push   edx
c0023524:	68 00 01 00 00       	push   0x100
c0023529:	6a 00                	push   0x0
c002352b:	50                   	push   eax
c002352c:	e8 8b d1 fd ff       	call   c00006bc <memset>
c0023531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023535:	83 c4 10             	add    esp,0x10
c0023538:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002353e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023545:	01 f8                	add    eax,edi
c0023547:	81 c7 00 01 00 00    	add    edi,0x100
c002354d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023550:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023556:	75 b3                	jne    c002350b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023558:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002355c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023560:	83 c4 1c             	add    esp,0x1c
c0023563:	5b                   	pop    ebx
c0023564:	5e                   	pop    esi
c0023565:	5f                   	pop    edi
c0023566:	5d                   	pop    ebp
c0023567:	e9 b0 fe ff ff       	jmp    c002341c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002356c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002356c:	55                   	push   ebp
c002356d:	57                   	push   edi
c002356e:	56                   	push   esi
c002356f:	53                   	push   ebx
c0023570:	31 db                	xor    ebx,ebx
c0023572:	83 ec 0c             	sub    esp,0xc
c0023575:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023579:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002357d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023580:	f7 c7 01 00 00 00    	test   edi,0x1
c0023586:	0f 84 aa 00 00 00    	je     c0023636 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002358c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023590:	89 d8                	mov    eax,ebx
c0023592:	c1 e0 07             	shl    eax,0x7
c0023595:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002359c:	55                   	push   ebp
c002359d:	56                   	push   esi
c002359e:	e8 31 fe ff ff       	call   c00233d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00235a3:	5a                   	pop    edx
c00235a4:	83 f8 01             	cmp    eax,0x1
c00235a7:	59                   	pop    ecx
c00235a8:	75 30                	jne    c00235da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00235aa:	50                   	push   eax
c00235ab:	50                   	push   eax
c00235ac:	53                   	push   ebx
c00235ad:	68 51 c3 02 c0       	push   0xc002c351
c00235b2:	e8 34 f3 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00235b7:	83 c4 0c             	add    esp,0xc
c00235ba:	53                   	push   ebx
c00235bb:	55                   	push   ebp
c00235bc:	56                   	push   esi
c00235bd:	e8 a4 fe ff ff       	call   c0023466 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235c2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00235c9:	e8 4e c0 fe ff       	call   c000f61c <malloc>
c00235ce:	89 c5                	mov    ebp,eax
c00235d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00235d3:	e8 a8 0d 00 00       	call   c0024380 <SATA::SATA()>
c00235d8:	eb 33                	jmp    c002360d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00235da:	83 f8 04             	cmp    eax,0x4
c00235dd:	75 47                	jne    c0023626 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00235df:	50                   	push   eax
c00235e0:	50                   	push   eax
c00235e1:	53                   	push   ebx
c00235e2:	68 68 c3 02 c0       	push   0xc002c368
c00235e7:	e8 ff f2 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00235ec:	83 c4 0c             	add    esp,0xc
c00235ef:	53                   	push   ebx
c00235f0:	55                   	push   ebp
c00235f1:	56                   	push   esi
c00235f2:	e8 6f fe ff ff       	call   c0023466 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235f7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00235fe:	e8 19 c0 fe ff       	call   c000f61c <malloc>
c0023603:	89 c5                	mov    ebp,eax
c0023605:	89 04 24             	mov    DWORD PTR [esp],eax
c0023608:	e8 4b 11 00 00       	call   c0024758 <SATAPI::SATAPI()>
c002360d:	5a                   	pop    edx
c002360e:	59                   	pop    ecx
c002360f:	55                   	push   ebp
c0023610:	56                   	push   esi
c0023611:	e8 fc 06 ff ff       	call   c0013d12 <Device::addChild(Device*)>
c0023616:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023619:	56                   	push   esi
c002361a:	6a 00                	push   0x0
c002361c:	53                   	push   ebx
c002361d:	55                   	push   ebp
c002361e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023621:	83 c4 20             	add    esp,0x20
c0023624:	eb 10                	jmp    c0023636 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023626:	50                   	push   eax
c0023627:	50                   	push   eax
c0023628:	53                   	push   ebx
c0023629:	68 81 c3 02 c0       	push   0xc002c381
c002362e:	e8 b8 f2 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023633:	83 c4 10             	add    esp,0x10
c0023636:	d1 ef                	shr    edi,1
c0023638:	43                   	inc    ebx
c0023639:	83 fb 20             	cmp    ebx,0x20
c002363c:	0f 85 3e ff ff ff    	jne    c0023580 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023642:	83 c4 0c             	add    esp,0xc
c0023645:	5b                   	pop    ebx
c0023646:	5e                   	pop    esi
c0023647:	5f                   	pop    edi
c0023648:	5d                   	pop    ebp
c0023649:	c3                   	ret    

c002364a <SATABus::open(int, int, void*)>:
c002364a:	83 ec 14             	sub    esp,0x14
c002364d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023651:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023657:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002365d:	52                   	push   edx
c002365e:	50                   	push   eax
c002365f:	e8 08 ff ff ff       	call   c002356c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023664:	31 c0                	xor    eax,eax
c0023666:	83 c4 1c             	add    esp,0x1c
c0023669:	c3                   	ret    

c002366a <ATA::close(int, int, void*)>:
c002366a:	83 ec 0c             	sub    esp,0xc
c002366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023671:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023677:	85 c0                	test   eax,eax
c0023679:	74 0c                	je     c0023687 <ATA::close(int, int, void*)+0x1d>
c002367b:	83 ec 0c             	sub    esp,0xc
c002367e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023680:	50                   	push   eax
c0023681:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023684:	83 c4 10             	add    esp,0x10
c0023687:	31 c0                	xor    eax,eax
c0023689:	83 c4 0c             	add    esp,0xc
c002368c:	c3                   	ret    
c002368d:	90                   	nop

c002368e <ATA::powerSaving(PowerSavingLevel)>:
c002368e:	c3                   	ret    
c002368f:	90                   	nop

c0023690 <ATA::ATA()>:
c0023690:	83 ec 0c             	sub    esp,0xc
c0023693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023697:	83 ec 04             	sub    esp,0x4
c002369a:	68 00 02 00 00       	push   0x200
c002369f:	68 d9 c4 02 c0       	push   0xc002c4d9
c00236a4:	50                   	push   eax
c00236a5:	e8 8c 0a ff ff       	call   c0014136 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00236aa:	83 c4 10             	add    esp,0x10
c00236ad:	ba 5c c4 02 c0       	mov    edx,0xc002c45c
c00236b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b6:	89 10                	mov    DWORD PTR [eax],edx
c00236b8:	90                   	nop
c00236b9:	83 c4 0c             	add    esp,0xc
c00236bc:	c3                   	ret    
c00236bd:	90                   	nop

c00236be <ATA::flush(bool)>:
c00236be:	53                   	push   ebx
c00236bf:	83 ec 08             	sub    esp,0x8
c00236c2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00236c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00236cb:	19 c0                	sbb    eax,eax
c00236cd:	83 e0 fd             	and    eax,0xfffffffd
c00236d0:	05 ea 00 00 00       	add    eax,0xea
c00236d5:	50                   	push   eax
c00236d6:	6a 07                	push   0x7
c00236d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236df:	50                   	push   eax
c00236e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236e6:	e8 dd ef ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236eb:	83 c4 0c             	add    esp,0xc
c00236ee:	6a 00                	push   0x0
c00236f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236f7:	50                   	push   eax
c00236f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236fe:	e8 71 fb ff ff       	call   c0023274 <IDE::polling(unsigned char, unsigned int)>
c0023703:	83 c4 18             	add    esp,0x18
c0023706:	5b                   	pop    ebx
c0023707:	c3                   	ret    

c0023708 <ATA::readyForCommand()>:
c0023708:	56                   	push   esi
c0023709:	53                   	push   ebx
c002370a:	31 db                	xor    ebx,ebx
c002370c:	50                   	push   eax
c002370d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023711:	50                   	push   eax
c0023712:	6a 0c                	push   0xc
c0023714:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002371b:	50                   	push   eax
c002371c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023722:	e8 61 f0 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023727:	83 c4 10             	add    esp,0x10
c002372a:	a8 88                	test   al,0x88
c002372c:	74 23                	je     c0023751 <ATA::readyForCommand()+0x49>
c002372e:	43                   	inc    ebx
c002372f:	83 fb 63             	cmp    ebx,0x63
c0023732:	7e dd                	jle    c0023711 <ATA::readyForCommand()+0x9>
c0023734:	51                   	push   ecx
c0023735:	51                   	push   ecx
c0023736:	6a 00                	push   0x0
c0023738:	68 40 42 0f 00       	push   0xf4240
c002373d:	e8 c8 a2 ff ff       	call   c001da0a <nanoSleep(unsigned long long)>
c0023742:	83 c4 10             	add    esp,0x10
c0023745:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002374b:	75 c4                	jne    c0023711 <ATA::readyForCommand()+0x9>
c002374d:	31 c0                	xor    eax,eax
c002374f:	eb 02                	jmp    c0023753 <ATA::readyForCommand()+0x4b>
c0023751:	b0 01                	mov    al,0x1
c0023753:	5a                   	pop    edx
c0023754:	5b                   	pop    ebx
c0023755:	5e                   	pop    esi
c0023756:	c3                   	ret    
c0023757:	90                   	nop

c0023758 <ATA::access(unsigned long long, int, void*, bool)>:
c0023758:	55                   	push   ebp
c0023759:	57                   	push   edi
c002375a:	56                   	push   esi
c002375b:	53                   	push   ebx
c002375c:	83 ec 30             	sub    esp,0x30
c002375f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0023763:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023767:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c002376b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002376f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0023773:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0023777:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c002377b:	56                   	push   esi
c002377c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023780:	68 c4 c3 02 c0       	push   0xc002c3c4
c0023785:	e8 61 f1 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c002378a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023790:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023794:	83 c4 10             	add    esp,0x10
c0023797:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002379d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00237a1:	c1 e0 06             	shl    eax,0x6
c00237a4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00237ac:	74 5d                	je     c002380b <ATA::access(unsigned long long, int, void*, bool)+0xb3>
c00237ae:	89 fa                	mov    edx,edi
c00237b0:	89 f0                	mov    eax,esi
c00237b2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00237b6:	c1 ea 1c             	shr    edx,0x1c
c00237b9:	89 d1                	mov    ecx,edx
c00237bb:	09 c1                	or     ecx,eax
c00237bd:	74 25                	je     c00237e4 <ATA::access(unsigned long long, int, void*, bool)+0x8c>
c00237bf:	31 ed                	xor    ebp,ebp
c00237c1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00237c8:	89 fa                	mov    edx,edi
c00237ca:	89 f0                	mov    eax,esi
c00237cc:	0f ad d0             	shrd   eax,edx,cl
c00237cf:	d3 ea                	shr    edx,cl
c00237d1:	f6 c1 20             	test   cl,0x20
c00237d4:	74 02                	je     c00237d8 <ATA::access(unsigned long long, int, void*, bool)+0x80>
c00237d6:	89 d0                	mov    eax,edx
c00237d8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00237dc:	45                   	inc    ebp
c00237dd:	83 fd 06             	cmp    ebp,0x6
c00237e0:	75 df                	jne    c00237c1 <ATA::access(unsigned long long, int, void*, bool)+0x69>
c00237e2:	eb 76                	jmp    c002385a <ATA::access(unsigned long long, int, void*, bool)+0x102>
c00237e4:	89 f0                	mov    eax,esi
c00237e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00237eb:	89 fa                	mov    edx,edi
c00237ed:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00237f4:	0f ac d0 10          	shrd   eax,edx,0x10
c00237f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00237fd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023801:	c1 ee 18             	shr    esi,0x18
c0023804:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023809:	eb 56                	jmp    c0023861 <ATA::access(unsigned long long, int, void*, bool)+0x109>
c002380b:	6a 00                	push   0x0
c002380d:	6a 3f                	push   0x3f
c002380f:	57                   	push   edi
c0023810:	56                   	push   esi
c0023811:	e8 f6 29 00 00       	call   c002620c <__umoddi3>
c0023816:	83 c4 10             	add    esp,0x10
c0023819:	40                   	inc    eax
c002381a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002381e:	6a 00                	push   0x0
c0023820:	68 f0 03 00 00       	push   0x3f0
c0023825:	57                   	push   edi
c0023826:	56                   	push   esi
c0023827:	e8 e0 28 00 00       	call   c002610c <__udivdi3>
c002382c:	83 c4 10             	add    esp,0x10
c002382f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023834:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002383b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023840:	6a 00                	push   0x0
c0023842:	6a 3f                	push   0x3f
c0023844:	57                   	push   edi
c0023845:	56                   	push   esi
c0023846:	e8 c1 28 00 00       	call   c002610c <__udivdi3>
c002384b:	83 c4 10             	add    esp,0x10
c002384e:	89 c6                	mov    esi,eax
c0023850:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023855:	83 e6 0f             	and    esi,0xf
c0023858:	eb 07                	jmp    c0023861 <ATA::access(unsigned long long, int, void*, bool)+0x109>
c002385a:	31 f6                	xor    esi,esi
c002385c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023861:	51                   	push   ecx
c0023862:	6a 00                	push   0x0
c0023864:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002386b:	50                   	push   eax
c002386c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023870:	e8 5f f0 ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0023875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023878:	e8 8b fe ff ff       	call   c0023708 <ATA::readyForCommand()>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	84 c0                	test   al,al
c0023882:	75 1a                	jne    c002389e <ATA::access(unsigned long long, int, void*, bool)+0x146>
c0023884:	83 ec 0c             	sub    esp,0xc
c0023887:	be 01 00 00 00       	mov    esi,0x1
c002388c:	68 ef c3 02 c0       	push   0xc002c3ef
c0023891:	e8 55 f0 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023896:	83 c4 10             	add    esp,0x10
c0023899:	e9 80 02 00 00       	jmp    c0023b1e <ATA::access(unsigned long long, int, void*, bool)+0x3c6>
c002389e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00238a4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238aa:	c1 e0 04             	shl    eax,0x4
c00238ad:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00238b4:	09 c6                	or     esi,eax
c00238b6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00238bb:	75 05                	jne    c00238c2 <ATA::access(unsigned long long, int, void*, bool)+0x16a>
c00238bd:	83 ce a0             	or     esi,0xffffffa0
c00238c0:	eb 03                	jmp    c00238c5 <ATA::access(unsigned long long, int, void*, bool)+0x16d>
c00238c2:	83 ce e0             	or     esi,0xffffffe0
c00238c5:	89 f0                	mov    eax,esi
c00238c7:	0f b6 f0             	movzx  esi,al
c00238ca:	56                   	push   esi
c00238cb:	6a 06                	push   0x6
c00238cd:	51                   	push   ecx
c00238ce:	52                   	push   edx
c00238cf:	e8 f4 ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d4:	83 c4 10             	add    esp,0x10
c00238d7:	6a 00                	push   0x0
c00238d9:	6a 01                	push   0x1
c00238db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238e2:	50                   	push   eax
c00238e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00238e9:	e8 da ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ee:	83 c4 10             	add    esp,0x10
c00238f1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00238f6:	75 6e                	jne    c0023966 <ATA::access(unsigned long long, int, void*, bool)+0x20e>
c00238f8:	6a 00                	push   0x0
c00238fa:	6a 08                	push   0x8
c00238fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023903:	50                   	push   eax
c0023904:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002390a:	e8 b9 ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002390f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023914:	50                   	push   eax
c0023915:	6a 09                	push   0x9
c0023917:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002391e:	50                   	push   eax
c002391f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023925:	e8 9e ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002392a:	83 c4 20             	add    esp,0x20
c002392d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023932:	50                   	push   eax
c0023933:	6a 0a                	push   0xa
c0023935:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002393c:	50                   	push   eax
c002393d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023943:	e8 80 ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023948:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002394d:	50                   	push   eax
c002394e:	6a 0b                	push   0xb
c0023950:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023957:	50                   	push   eax
c0023958:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002395e:	e8 65 ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023963:	83 c4 20             	add    esp,0x20
c0023966:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002396b:	50                   	push   eax
c002396c:	6a 02                	push   0x2
c002396e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023975:	50                   	push   eax
c0023976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002397c:	e8 47 ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023981:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023986:	50                   	push   eax
c0023987:	6a 03                	push   0x3
c0023989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023990:	50                   	push   eax
c0023991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023997:	e8 2c ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002399c:	83 c4 20             	add    esp,0x20
c002399f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00239a4:	50                   	push   eax
c00239a5:	6a 04                	push   0x4
c00239a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239ae:	50                   	push   eax
c00239af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239b5:	e8 0e ed ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239ba:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00239bf:	50                   	push   eax
c00239c0:	6a 05                	push   0x5
c00239c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239c9:	50                   	push   eax
c00239ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239d0:	e8 f3 ec ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d5:	83 c4 20             	add    esp,0x20
c00239d8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00239dd:	0f 94 c0             	sete   al
c00239e0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00239e5:	74 09                	je     c00239f0 <ATA::access(unsigned long long, int, void*, bool)+0x298>
c00239e7:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00239ee:	eb 07                	jmp    c00239f7 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c00239f0:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00239f7:	0f b6 c0             	movzx  eax,al
c00239fa:	50                   	push   eax
c00239fb:	6a 07                	push   0x7
c00239fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a04:	50                   	push   eax
c0023a05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a0b:	e8 b8 ec ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a10:	58                   	pop    eax
c0023a11:	5a                   	pop    edx
c0023a12:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a16:	68 fe c3 02 c0       	push   0xc002c3fe
c0023a1b:	e8 cb ee fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023a20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0023a24:	83 c4 10             	add    esp,0x10
c0023a27:	8d 70 ff             	lea    esi,[eax-0x1]
c0023a2a:	83 fe ff             	cmp    esi,0xffffffff
c0023a2d:	0f 84 cc 00 00 00    	je     c0023aff <ATA::access(unsigned long long, int, void*, bool)+0x3a7>
c0023a33:	50                   	push   eax
c0023a34:	56                   	push   esi
c0023a35:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0023a39:	68 0a c4 02 c0       	push   0xc002c40a
c0023a3e:	e8 a8 ee fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023a43:	83 c4 0c             	add    esp,0xc
c0023a46:	6a 01                	push   0x1
c0023a48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a4f:	50                   	push   eax
c0023a50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a56:	e8 19 f8 ff ff       	call   c0023274 <IDE::polling(unsigned char, unsigned int)>
c0023a5b:	83 c4 10             	add    esp,0x10
c0023a5e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023a64:	84 c0                	test   al,al
c0023a66:	74 2c                	je     c0023a94 <ATA::access(unsigned long long, int, void*, bool)+0x33c>
c0023a68:	0f b6 f0             	movzx  esi,al
c0023a6b:	0f b6 d2             	movzx  edx,dl
c0023a6e:	56                   	push   esi
c0023a6f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023a76:	50                   	push   eax
c0023a77:	52                   	push   edx
c0023a78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a7e:	e8 5b f6 ff ff       	call   c00230de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023a83:	c7 04 24 37 c4 02 c0 	mov    DWORD PTR [esp],0xc002c437
c0023a8a:	e8 5c ee fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0023a8f:	e9 87 00 00 00       	jmp    c0023b1b <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0023a94:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023a99:	74 3f                	je     c0023ada <ATA::access(unsigned long long, int, void*, bool)+0x382>
c0023a9b:	31 ed                	xor    ebp,ebp
c0023a9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023aa1:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023aa5:	50                   	push   eax
c0023aa6:	50                   	push   eax
c0023aa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023aae:	50                   	push   eax
c0023aaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ab5:	e8 fc eb ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0023aba:	89 c2                	mov    edx,eax
c0023abc:	89 f8                	mov    eax,edi
c0023abe:	66 ef                	out    dx,ax
c0023ac0:	45                   	inc    ebp
c0023ac1:	83 c4 10             	add    esp,0x10
c0023ac4:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023aca:	75 d1                	jne    c0023a9d <ATA::access(unsigned long long, int, void*, bool)+0x345>
c0023acc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023ad4:	4e                   	dec    esi
c0023ad5:	e9 50 ff ff ff       	jmp    c0023a2a <ATA::access(unsigned long long, int, void*, bool)+0x2d2>
c0023ada:	0f b6 d2             	movzx  edx,dl
c0023add:	51                   	push   ecx
c0023ade:	51                   	push   ecx
c0023adf:	52                   	push   edx
c0023ae0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ae6:	e8 cb eb ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0023aeb:	b9 00 01 00 00       	mov    ecx,0x100
c0023af0:	89 c2                	mov    edx,eax
c0023af2:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023af6:	fc                   	cld    
c0023af7:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023afa:	83 c4 10             	add    esp,0x10
c0023afd:	eb d5                	jmp    c0023ad4 <ATA::access(unsigned long long, int, void*, bool)+0x37c>
c0023aff:	31 f6                	xor    esi,esi
c0023b01:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023b06:	74 16                	je     c0023b1e <ATA::access(unsigned long long, int, void*, bool)+0x3c6>
c0023b08:	50                   	push   eax
c0023b09:	50                   	push   eax
c0023b0a:	31 c0                	xor    eax,eax
c0023b0c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023b11:	0f 94 c0             	sete   al
c0023b14:	50                   	push   eax
c0023b15:	53                   	push   ebx
c0023b16:	e8 a3 fb ff ff       	call   c00236be <ATA::flush(bool)>
c0023b1b:	83 c4 10             	add    esp,0x10
c0023b1e:	83 c4 2c             	add    esp,0x2c
c0023b21:	89 f0                	mov    eax,esi
c0023b23:	5b                   	pop    ebx
c0023b24:	5e                   	pop    esi
c0023b25:	5f                   	pop    edi
c0023b26:	5d                   	pop    ebp
c0023b27:	c3                   	ret    

c0023b28 <ATA::read(unsigned long long, int, void*)>:
c0023b28:	57                   	push   edi
c0023b29:	b8 04 00 00 00       	mov    eax,0x4
c0023b2e:	56                   	push   esi
c0023b2f:	53                   	push   ebx
c0023b30:	83 ec 10             	sub    esp,0x10
c0023b33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023b3b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023b3e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023b42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b46:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023b4c:	77 3b                	ja     c0023b89 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b4e:	b8 06 00 00 00       	mov    eax,0x6
c0023b53:	85 d2                	test   edx,edx
c0023b55:	74 32                	je     c0023b89 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b57:	50                   	push   eax
c0023b58:	50                   	push   eax
c0023b59:	6a 00                	push   0x0
c0023b5b:	52                   	push   edx
c0023b5c:	53                   	push   ebx
c0023b5d:	57                   	push   edi
c0023b5e:	56                   	push   esi
c0023b5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023b63:	e8 f0 fb ff ff       	call   c0023758 <ATA::access(unsigned long long, int, void*, bool)>
c0023b68:	83 c4 20             	add    esp,0x20
c0023b6b:	85 c0                	test   eax,eax
c0023b6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b71:	75 11                	jne    c0023b84 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023b73:	01 1d a8 1d 03 c0    	add    DWORD PTR ds:0xc0031da8,ebx
c0023b79:	e8 d2 cb fe ff       	call   c0010750 <VgaText::updateDiskUsage()>
c0023b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b82:	eb 05                	jmp    c0023b89 <ATA::read(unsigned long long, int, void*)+0x61>
c0023b84:	b8 01 00 00 00       	mov    eax,0x1
c0023b89:	83 c4 10             	add    esp,0x10
c0023b8c:	5b                   	pop    ebx
c0023b8d:	5e                   	pop    esi
c0023b8e:	5f                   	pop    edi
c0023b8f:	c3                   	ret    

c0023b90 <ATA::write(unsigned long long, int, void*)>:
c0023b90:	57                   	push   edi
c0023b91:	b8 04 00 00 00       	mov    eax,0x4
c0023b96:	56                   	push   esi
c0023b97:	53                   	push   ebx
c0023b98:	83 ec 10             	sub    esp,0x10
c0023b9b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023ba3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023ba6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023baa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023bae:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023bb4:	77 3b                	ja     c0023bf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0023bb6:	b8 06 00 00 00       	mov    eax,0x6
c0023bbb:	85 d2                	test   edx,edx
c0023bbd:	74 32                	je     c0023bf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0023bbf:	50                   	push   eax
c0023bc0:	50                   	push   eax
c0023bc1:	6a 01                	push   0x1
c0023bc3:	52                   	push   edx
c0023bc4:	53                   	push   ebx
c0023bc5:	57                   	push   edi
c0023bc6:	56                   	push   esi
c0023bc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023bcb:	e8 88 fb ff ff       	call   c0023758 <ATA::access(unsigned long long, int, void*, bool)>
c0023bd0:	83 c4 20             	add    esp,0x20
c0023bd3:	85 c0                	test   eax,eax
c0023bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023bd9:	75 11                	jne    c0023bec <ATA::write(unsigned long long, int, void*)+0x5c>
c0023bdb:	01 1d a4 1d 03 c0    	add    DWORD PTR ds:0xc0031da4,ebx
c0023be1:	e8 6a cb fe ff       	call   c0010750 <VgaText::updateDiskUsage()>
c0023be6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bea:	eb 05                	jmp    c0023bf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0023bec:	b8 01 00 00 00       	mov    eax,0x1
c0023bf1:	83 c4 10             	add    esp,0x10
c0023bf4:	5b                   	pop    ebx
c0023bf5:	5e                   	pop    esi
c0023bf6:	5f                   	pop    edi
c0023bf7:	c3                   	ret    

c0023bf8 <ATA::detectCHS()>:
c0023bf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023bfc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023c02:	c1 e0 06             	shl    eax,0x6
c0023c05:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023c0b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023c15:	c7 44 24 04 42 c4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c442
c0023c1d:	e9 3d 62 ff ff       	jmp    c0019e5f <Krnl::panic(char const*)>

c0023c22 <ATA::open(int, int, void*)>:
c0023c22:	53                   	push   ebx
c0023c23:	83 ec 08             	sub    esp,0x8
c0023c26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c32:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023c38:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023c3e:	c1 e0 06             	shl    eax,0x6
c0023c41:	01 d0                	add    eax,edx
c0023c43:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023c4a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023c50:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023c57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023c61:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023c67:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023c6e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023c75:	75 0c                	jne    c0023c83 <ATA::open(int, int, void*)+0x61>
c0023c77:	83 ec 0c             	sub    esp,0xc
c0023c7a:	53                   	push   ebx
c0023c7b:	e8 78 ff ff ff       	call   c0023bf8 <ATA::detectCHS()>
c0023c80:	83 c4 10             	add    esp,0x10
c0023c83:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023c89:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023c8f:	c1 e0 06             	shl    eax,0x6
c0023c92:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023c99:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023ca3:	d1 e8                	shr    eax,1
c0023ca5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023cab:	6a 04                	push   0x4
c0023cad:	6a 0c                	push   0xc
c0023caf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cb6:	50                   	push   eax
c0023cb7:	52                   	push   edx
c0023cb8:	e8 0b ea ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cbd:	90                   	nop
c0023cbe:	90                   	nop
c0023cbf:	6a 00                	push   0x0
c0023cc1:	6a 0c                	push   0xc
c0023cc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cca:	50                   	push   eax
c0023ccb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cd1:	e8 f2 e9 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cd6:	83 c4 14             	add    esp,0x14
c0023cd9:	53                   	push   ebx
c0023cda:	e8 bf 04 ff ff       	call   c001419e <PhysicalDisk::startCache()>
c0023cdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ce2:	e8 d9 25 ff ff       	call   c00162c0 <createPartitionsForDisk(PhysicalDisk*)>
c0023ce7:	31 c0                	xor    eax,eax
c0023ce9:	83 c4 18             	add    esp,0x18
c0023cec:	5b                   	pop    ebx
c0023ced:	c3                   	ret    

c0023cee <ATAPI::write(unsigned long long, int, void*)>:
c0023cee:	b8 03 00 00 00       	mov    eax,0x3
c0023cf3:	c3                   	ret    

c0023cf4 <ATAPI::close(int, int, void*)>:
c0023cf4:	83 ec 0c             	sub    esp,0xc
c0023cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d01:	85 c0                	test   eax,eax
c0023d03:	74 0c                	je     c0023d11 <ATAPI::close(int, int, void*)+0x1d>
c0023d05:	83 ec 0c             	sub    esp,0xc
c0023d08:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d0a:	50                   	push   eax
c0023d0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d0e:	83 c4 10             	add    esp,0x10
c0023d11:	31 c0                	xor    eax,eax
c0023d13:	83 c4 0c             	add    esp,0xc
c0023d16:	c3                   	ret    
c0023d17:	90                   	nop

c0023d18 <ATAPI::ATAPI()>:
c0023d18:	83 ec 0c             	sub    esp,0xc
c0023d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1f:	83 ec 04             	sub    esp,0x4
c0023d22:	68 00 08 00 00       	push   0x800
c0023d27:	68 41 c5 02 c0       	push   0xc002c541
c0023d2c:	50                   	push   eax
c0023d2d:	e8 04 04 ff ff       	call   c0014136 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d32:	83 c4 10             	add    esp,0x10
c0023d35:	ba 94 c4 02 c0       	mov    edx,0xc002c494
c0023d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3e:	89 10                	mov    DWORD PTR [eax],edx
c0023d40:	90                   	nop
c0023d41:	83 c4 0c             	add    esp,0xc
c0023d44:	c3                   	ret    
c0023d45:	90                   	nop

c0023d46 <ATAPI::readyForCommand()>:
c0023d46:	56                   	push   esi
c0023d47:	53                   	push   ebx
c0023d48:	31 db                	xor    ebx,ebx
c0023d4a:	50                   	push   eax
c0023d4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d4f:	50                   	push   eax
c0023d50:	6a 0c                	push   0xc
c0023d52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d59:	50                   	push   eax
c0023d5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d60:	e8 23 ea ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023d65:	83 c4 10             	add    esp,0x10
c0023d68:	a8 88                	test   al,0x88
c0023d6a:	74 23                	je     c0023d8f <ATAPI::readyForCommand()+0x49>
c0023d6c:	43                   	inc    ebx
c0023d6d:	83 fb 63             	cmp    ebx,0x63
c0023d70:	7e dd                	jle    c0023d4f <ATAPI::readyForCommand()+0x9>
c0023d72:	51                   	push   ecx
c0023d73:	51                   	push   ecx
c0023d74:	6a 00                	push   0x0
c0023d76:	68 40 42 0f 00       	push   0xf4240
c0023d7b:	e8 8a 9c ff ff       	call   c001da0a <nanoSleep(unsigned long long)>
c0023d80:	83 c4 10             	add    esp,0x10
c0023d83:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d89:	75 c4                	jne    c0023d4f <ATAPI::readyForCommand()+0x9>
c0023d8b:	31 c0                	xor    eax,eax
c0023d8d:	eb 02                	jmp    c0023d91 <ATAPI::readyForCommand()+0x4b>
c0023d8f:	b0 01                	mov    al,0x1
c0023d91:	5a                   	pop    edx
c0023d92:	5b                   	pop    ebx
c0023d93:	5e                   	pop    esi
c0023d94:	c3                   	ret    
c0023d95:	90                   	nop

c0023d96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023d96:	55                   	push   ebp
c0023d97:	57                   	push   edi
c0023d98:	56                   	push   esi
c0023d99:	53                   	push   ebx
c0023d9a:	83 ec 20             	sub    esp,0x20
c0023d9d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023da1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023da5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023da9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023dad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023db1:	6a 01                	push   0x1
c0023db3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023dba:	50                   	push   eax
c0023dbb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023dc1:	e8 0e eb ff ff       	call   c00228d4 <IDE::enableIRQs(unsigned char, bool)>
c0023dc6:	5e                   	pop    esi
c0023dc7:	58                   	pop    eax
c0023dc8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023dcf:	50                   	push   eax
c0023dd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023dd6:	e8 c7 e8 ff ff       	call   c00226a2 <IDE::prepareInterrupt(unsigned char)>
c0023ddb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023dde:	e8 63 ff ff ff       	call   c0023d46 <ATAPI::readyForCommand()>
c0023de3:	83 c4 10             	add    esp,0x10
c0023de6:	84 c0                	test   al,al
c0023de8:	75 0a                	jne    c0023df4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023dea:	bb 01 00 00 00       	mov    ebx,0x1
c0023def:	e9 57 02 00 00       	jmp    c002404b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023df4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023dfa:	c1 e0 04             	shl    eax,0x4
c0023dfd:	0f b6 c0             	movzx  eax,al
c0023e00:	50                   	push   eax
c0023e01:	6a 06                	push   0x6
c0023e03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e0a:	50                   	push   eax
c0023e0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e11:	e8 b2 e8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e16:	6a 00                	push   0x0
c0023e18:	6a 01                	push   0x1
c0023e1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e21:	50                   	push   eax
c0023e22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e28:	e8 9b e8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2d:	83 c4 20             	add    esp,0x20
c0023e30:	0f b6 c3             	movzx  eax,bl
c0023e33:	0f b6 df             	movzx  ebx,bh
c0023e36:	50                   	push   eax
c0023e37:	6a 04                	push   0x4
c0023e39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e40:	50                   	push   eax
c0023e41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e47:	e8 7c e8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e4c:	53                   	push   ebx
c0023e4d:	6a 05                	push   0x5
c0023e4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e56:	50                   	push   eax
c0023e57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e5d:	e8 66 e8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e62:	83 c4 20             	add    esp,0x20
c0023e65:	68 a0 00 00 00       	push   0xa0
c0023e6a:	6a 07                	push   0x7
c0023e6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e73:	50                   	push   eax
c0023e74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e7a:	e8 49 e8 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e7f:	83 c4 0c             	add    esp,0xc
c0023e82:	6a 01                	push   0x1
c0023e84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e8b:	50                   	push   eax
c0023e8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e92:	e8 dd f3 ff ff       	call   c0023274 <IDE::polling(unsigned char, unsigned int)>
c0023e97:	83 c4 10             	add    esp,0x10
c0023e9a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023ea0:	84 c0                	test   al,al
c0023ea2:	74 23                	je     c0023ec7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023ea4:	0f b6 d8             	movzx  ebx,al
c0023ea7:	0f b6 d2             	movzx  edx,dl
c0023eaa:	53                   	push   ebx
c0023eab:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023eb2:	50                   	push   eax
c0023eb3:	52                   	push   edx
c0023eb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023eba:	e8 1f f2 ff ff       	call   c00230de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023ebf:	83 c4 10             	add    esp,0x10
c0023ec2:	e9 84 01 00 00       	jmp    c002404b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023ec7:	0f b6 d2             	movzx  edx,dl
c0023eca:	53                   	push   ebx
c0023ecb:	53                   	push   ebx
c0023ecc:	52                   	push   edx
c0023ecd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ed3:	e8 de e7 ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0023ed8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023edc:	b9 06 00 00 00       	mov    ecx,0x6
c0023ee1:	89 c2                	mov    edx,eax
c0023ee3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023ee6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023eea:	83 c4 10             	add    esp,0x10
c0023eed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023ef3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023efa:	85 db                	test   ebx,ebx
c0023efc:	0f 84 ec 00 00 00    	je     c0023fee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023f02:	51                   	push   ecx
c0023f03:	51                   	push   ecx
c0023f04:	52                   	push   edx
c0023f05:	50                   	push   eax
c0023f06:	e8 2b e9 ff ff       	call   c0022836 <IDE::waitInterrupt(unsigned char)>
c0023f0b:	83 c4 10             	add    esp,0x10
c0023f0e:	84 c0                	test   al,al
c0023f10:	0f 84 d4 fe ff ff    	je     c0023dea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023f16:	56                   	push   esi
c0023f17:	56                   	push   esi
c0023f18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f1f:	50                   	push   eax
c0023f20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f26:	e8 77 e7 ff ff       	call   c00226a2 <IDE::prepareInterrupt(unsigned char)>
c0023f2b:	83 c4 0c             	add    esp,0xc
c0023f2e:	6a 04                	push   0x4
c0023f30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f37:	50                   	push   eax
c0023f38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f3e:	e8 45 e8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023f43:	83 c4 0c             	add    esp,0xc
c0023f46:	89 c6                	mov    esi,eax
c0023f48:	6a 05                	push   0x5
c0023f4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f51:	50                   	push   eax
c0023f52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f58:	e8 2b e8 ff ff       	call   c0022788 <IDE::read(unsigned char, unsigned char)>
c0023f5d:	89 f1                	mov    ecx,esi
c0023f5f:	0f b6 c0             	movzx  eax,al
c0023f62:	0f b6 f1             	movzx  esi,cl
c0023f65:	c1 e0 08             	shl    eax,0x8
c0023f68:	09 c6                	or     esi,eax
c0023f6a:	d1 fe                	sar    esi,1
c0023f6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023f70:	83 c4 10             	add    esp,0x10
c0023f73:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023f78:	74 41                	je     c0023fbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023f7a:	31 c9                	xor    ecx,ecx
c0023f7c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023f82:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023f89:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023f8d:	75 0a                	jne    c0023f99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023f8f:	01 c9                	add    ecx,ecx
c0023f91:	01 cd                	add    ebp,ecx
c0023f93:	4b                   	dec    ebx
c0023f94:	e9 54 ff ff ff       	jmp    c0023eed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023f99:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023f9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023fa2:	51                   	push   ecx
c0023fa3:	51                   	push   ecx
c0023fa4:	52                   	push   edx
c0023fa5:	50                   	push   eax
c0023fa6:	e8 0b e7 ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0023fab:	89 c2                	mov    edx,eax
c0023fad:	89 f0                	mov    eax,esi
c0023faf:	66 ef                	out    dx,ax
c0023fb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023fb5:	83 c4 10             	add    esp,0x10
c0023fb8:	41                   	inc    ecx
c0023fb9:	eb c1                	jmp    c0023f7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023fbb:	31 f6                	xor    esi,esi
c0023fbd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023fc3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023fca:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023fce:	75 06                	jne    c0023fd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023fd0:	01 f6                	add    esi,esi
c0023fd2:	01 f5                	add    ebp,esi
c0023fd4:	eb bd                	jmp    c0023f93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023fd6:	51                   	push   ecx
c0023fd7:	51                   	push   ecx
c0023fd8:	52                   	push   edx
c0023fd9:	50                   	push   eax
c0023fda:	e8 d7 e6 ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0023fdf:	89 c2                	mov    edx,eax
c0023fe1:	66 ed                	in     ax,dx
c0023fe3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	46                   	inc    esi
c0023fec:	eb cf                	jmp    c0023fbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023fee:	51                   	push   ecx
c0023fef:	51                   	push   ecx
c0023ff0:	52                   	push   edx
c0023ff1:	50                   	push   eax
c0023ff2:	e8 3f e8 ff ff       	call   c0022836 <IDE::waitInterrupt(unsigned char)>
c0023ff7:	83 c4 10             	add    esp,0x10
c0023ffa:	84 c0                	test   al,al
c0023ffc:	0f 84 e8 fd ff ff    	je     c0023dea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024002:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024007:	52                   	push   edx
c0024008:	52                   	push   edx
c0024009:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024010:	50                   	push   eax
c0024011:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024017:	e8 86 e6 ff ff       	call   c00226a2 <IDE::prepareInterrupt(unsigned char)>
c002401c:	83 c4 10             	add    esp,0x10
c002401f:	50                   	push   eax
c0024020:	50                   	push   eax
c0024021:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024028:	50                   	push   eax
c0024029:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002402f:	e8 82 e6 ff ff       	call   c00226b6 <IDE::getBase(unsigned char)>
c0024034:	8d 50 07             	lea    edx,[eax+0x7]
c0024037:	ec                   	in     al,dx
c0024038:	83 c4 10             	add    esp,0x10
c002403b:	a8 88                	test   al,0x88
c002403d:	74 0a                	je     c0024049 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002403f:	4b                   	dec    ebx
c0024040:	75 dd                	jne    c002401f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024042:	bb 02 00 00 00       	mov    ebx,0x2
c0024047:	eb 02                	jmp    c002404b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024049:	31 db                	xor    ebx,ebx
c002404b:	83 c4 1c             	add    esp,0x1c
c002404e:	89 d8                	mov    eax,ebx
c0024050:	5b                   	pop    ebx
c0024051:	5e                   	pop    esi
c0024052:	5f                   	pop    edi
c0024053:	5d                   	pop    ebp
c0024054:	c3                   	ret    
c0024055:	90                   	nop

c0024056 <ATAPI::diskRemoved()>:
c0024056:	83 ec 18             	sub    esp,0x18
c0024059:	68 4d c5 02 c0       	push   0xc002c54d
c002405e:	e8 88 e8 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024067:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002406e:	83 c4 1c             	add    esp,0x1c
c0024071:	c3                   	ret    

c0024072 <ATAPI::eject()>:
c0024072:	57                   	push   edi
c0024073:	b9 03 00 00 00       	mov    ecx,0x3
c0024078:	53                   	push   ebx
c0024079:	83 ec 14             	sub    esp,0x14
c002407c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024080:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024084:	fc                   	cld    
c0024085:	31 c0                	xor    eax,eax
c0024087:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024089:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002408e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024093:	50                   	push   eax
c0024094:	50                   	push   eax
c0024095:	6a 00                	push   0x0
c0024097:	6a 00                	push   0x0
c0024099:	6a 00                	push   0x0
c002409b:	6a 02                	push   0x2
c002409d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00240a1:	50                   	push   eax
c00240a2:	53                   	push   ebx
c00240a3:	e8 ee fc ff ff       	call   c0023d96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00240a8:	83 c4 14             	add    esp,0x14
c00240ab:	53                   	push   ebx
c00240ac:	e8 a5 ff ff ff       	call   c0024056 <ATAPI::diskRemoved()>
c00240b1:	83 c4 24             	add    esp,0x24
c00240b4:	31 c0                	xor    eax,eax
c00240b6:	5b                   	pop    ebx
c00240b7:	5f                   	pop    edi
c00240b8:	c3                   	ret    
c00240b9:	90                   	nop

c00240ba <ATAPI::diskInserted()>:
c00240ba:	53                   	push   ebx
c00240bb:	83 ec 14             	sub    esp,0x14
c00240be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00240c2:	68 64 c5 02 c0       	push   0xc002c564
c00240c7:	e8 1f e8 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00240cc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00240d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240d6:	e8 c3 00 ff ff       	call   c001419e <PhysicalDisk::startCache()>
c00240db:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00240df:	83 c4 18             	add    esp,0x18
c00240e2:	5b                   	pop    ebx
c00240e3:	e9 d8 21 ff ff       	jmp    c00162c0 <createPartitionsForDisk(PhysicalDisk*)>

c00240e8 <ATAPI::detectMedia()>:
c00240e8:	56                   	push   esi
c00240e9:	53                   	push   ebx
c00240ea:	83 ec 28             	sub    esp,0x28
c00240ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00240f1:	6a 0c                	push   0xc
c00240f3:	6a 00                	push   0x0
c00240f5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00240f9:	56                   	push   esi
c00240fa:	e8 bd c5 fd ff       	call   c00006bc <memset>
c00240ff:	58                   	pop    eax
c0024100:	5a                   	pop    edx
c0024101:	6a 00                	push   0x0
c0024103:	6a 00                	push   0x0
c0024105:	6a 00                	push   0x0
c0024107:	6a 00                	push   0x0
c0024109:	56                   	push   esi
c002410a:	53                   	push   ebx
c002410b:	e8 86 fc ff ff       	call   c0023d96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024110:	83 c4 1c             	add    esp,0x1c
c0024113:	6a 0c                	push   0xc
c0024115:	6a 00                	push   0x0
c0024117:	56                   	push   esi
c0024118:	e8 9f c5 fd ff       	call   c00006bc <memset>
c002411d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024122:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024127:	59                   	pop    ecx
c0024128:	58                   	pop    eax
c0024129:	6a 01                	push   0x1
c002412b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002412f:	50                   	push   eax
c0024130:	6a 00                	push   0x0
c0024132:	6a 12                	push   0x12
c0024134:	56                   	push   esi
c0024135:	53                   	push   ebx
c0024136:	e8 5b fc ff ff       	call   c0023d96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002413b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002413f:	83 c4 20             	add    esp,0x20
c0024142:	83 e0 7f             	and    eax,0x7f
c0024145:	3c 70                	cmp    al,0x70
c0024147:	74 15                	je     c002415e <ATAPI::detectMedia()+0x76>
c0024149:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024150:	75 0c                	jne    c002415e <ATAPI::detectMedia()+0x76>
c0024152:	83 ec 0c             	sub    esp,0xc
c0024155:	53                   	push   ebx
c0024156:	e8 5f ff ff ff       	call   c00240ba <ATAPI::diskInserted()>
c002415b:	83 c4 10             	add    esp,0x10
c002415e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024162:	83 e0 0f             	and    eax,0xf
c0024165:	3c 02                	cmp    al,0x2
c0024167:	75 1b                	jne    c0024184 <ATAPI::detectMedia()+0x9c>
c0024169:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002416e:	75 2d                	jne    c002419d <ATAPI::detectMedia()+0xb5>
c0024170:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024177:	74 24                	je     c002419d <ATAPI::detectMedia()+0xb5>
c0024179:	83 ec 0c             	sub    esp,0xc
c002417c:	53                   	push   ebx
c002417d:	e8 d4 fe ff ff       	call   c0024056 <ATAPI::diskRemoved()>
c0024182:	eb 16                	jmp    c002419a <ATAPI::detectMedia()+0xb2>
c0024184:	84 c0                	test   al,al
c0024186:	75 15                	jne    c002419d <ATAPI::detectMedia()+0xb5>
c0024188:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002418f:	75 0c                	jne    c002419d <ATAPI::detectMedia()+0xb5>
c0024191:	83 ec 0c             	sub    esp,0xc
c0024194:	53                   	push   ebx
c0024195:	e8 20 ff ff ff       	call   c00240ba <ATAPI::diskInserted()>
c002419a:	83 c4 10             	add    esp,0x10
c002419d:	83 c4 24             	add    esp,0x24
c00241a0:	5b                   	pop    ebx
c00241a1:	5e                   	pop    esi
c00241a2:	c3                   	ret    
c00241a3:	90                   	nop

c00241a4 <ATAPI::open(int, int, void*)>:
c00241a4:	53                   	push   ebx
c00241a5:	83 ec 08             	sub    esp,0x8
c00241a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00241ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00241ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00241c0:	c1 e0 06             	shl    eax,0x6
c00241c3:	01 d0                	add    eax,edx
c00241c5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00241cc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00241d2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00241d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00241e3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00241e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00241f0:	6a 04                	push   0x4
c00241f2:	6a 0c                	push   0xc
c00241f4:	51                   	push   ecx
c00241f5:	52                   	push   edx
c00241f6:	e8 cd e4 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241fb:	90                   	nop
c00241fc:	90                   	nop
c00241fd:	6a 00                	push   0x0
c00241ff:	6a 0c                	push   0xc
c0024201:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024208:	50                   	push   eax
c0024209:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420f:	e8 b4 e4 ff ff       	call   c00226c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024214:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002421b:	83 c4 14             	add    esp,0x14
c002421e:	53                   	push   ebx
c002421f:	e8 c4 fe ff ff       	call   c00240e8 <ATAPI::detectMedia()>
c0024224:	31 c0                	xor    eax,eax
c0024226:	83 c4 18             	add    esp,0x18
c0024229:	5b                   	pop    ebx
c002422a:	c3                   	ret    
c002422b:	90                   	nop

c002422c <ATAPI::read(unsigned long long, int, void*)>:
c002422c:	55                   	push   ebp
c002422d:	57                   	push   edi
c002422e:	56                   	push   esi
c002422f:	53                   	push   ebx
c0024230:	83 ec 1c             	sub    esp,0x1c
c0024233:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024237:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002423b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002423f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024246:	74 41                	je     c0024289 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024248:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002424c:	b9 03 00 00 00       	mov    ecx,0x3
c0024251:	fc                   	cld    
c0024252:	31 c0                	xor    eax,eax
c0024254:	86 fb                	xchg   bl,bh
c0024256:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024258:	c1 c3 10             	rol    ebx,0x10
c002425b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024260:	89 e8                	mov    eax,ebp
c0024262:	86 fb                	xchg   bl,bh
c0024264:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024268:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002426c:	50                   	push   eax
c002426d:	50                   	push   eax
c002426e:	55                   	push   ebp
c002426f:	c1 e5 0b             	shl    ebp,0xb
c0024272:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024276:	6a 00                	push   0x0
c0024278:	55                   	push   ebp
c0024279:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002427d:	50                   	push   eax
c002427e:	56                   	push   esi
c002427f:	e8 12 fb ff ff       	call   c0023d96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024284:	83 c4 20             	add    esp,0x20
c0024287:	eb 1a                	jmp    c00242a3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024289:	83 ec 0c             	sub    esp,0xc
c002428c:	56                   	push   esi
c002428d:	e8 56 fe ff ff       	call   c00240e8 <ATAPI::detectMedia()>
c0024292:	83 c4 10             	add    esp,0x10
c0024295:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002429c:	75 aa                	jne    c0024248 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002429e:	b8 02 00 00 00       	mov    eax,0x2
c00242a3:	83 c4 1c             	add    esp,0x1c
c00242a6:	5b                   	pop    ebx
c00242a7:	5e                   	pop    esi
c00242a8:	5f                   	pop    edi
c00242a9:	5d                   	pop    ebp
c00242aa:	c3                   	ret    
c00242ab:	90                   	nop

c00242ac <SATA::close(int, int, void*)>:
c00242ac:	83 ec 0c             	sub    esp,0xc
c00242af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00242b9:	85 c0                	test   eax,eax
c00242bb:	74 0c                	je     c00242c9 <SATA::close(int, int, void*)+0x1d>
c00242bd:	83 ec 0c             	sub    esp,0xc
c00242c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00242c2:	50                   	push   eax
c00242c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00242c6:	83 c4 10             	add    esp,0x10
c00242c9:	31 c0                	xor    eax,eax
c00242cb:	83 c4 0c             	add    esp,0xc
c00242ce:	c3                   	ret    
c00242cf:	90                   	nop

c00242d0 <SATA::powerSaving(PowerSavingLevel)>:
c00242d0:	c3                   	ret    
c00242d1:	90                   	nop

c00242d2 <SATA::open(int, int, void*)>:
c00242d2:	56                   	push   esi
c00242d3:	53                   	push   ebx
c00242d4:	50                   	push   eax
c00242d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00242d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00242dd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00242ed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00242f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024305:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002430b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024312:	e8 a2 b9 fe ff       	call   c000fcb9 <Phys::allocatePage()>
c0024317:	89 c6                	mov    esi,eax
c0024319:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002431f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024325:	e8 8f b9 fe ff       	call   c000fcb9 <Phys::allocatePage()>
c002432a:	39 c6                	cmp    esi,eax
c002432c:	74 10                	je     c002433e <SATA::open(int, int, void*)+0x6c>
c002432e:	83 ec 0c             	sub    esp,0xc
c0024331:	68 c4 c4 02 c0       	push   0xc002c4c4
c0024336:	e8 24 5b ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002433b:	83 c4 10             	add    esp,0x10
c002433e:	83 ec 0c             	sub    esp,0xc
c0024341:	6a 02                	push   0x2
c0024343:	e8 b3 d5 fe ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0024348:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002434e:	e8 38 d7 fe ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0024353:	6a 03                	push   0x3
c0024355:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002435b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024361:	50                   	push   eax
c0024362:	e8 5f dc fe ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024367:	83 c4 14             	add    esp,0x14
c002436a:	53                   	push   ebx
c002436b:	e8 2e fe fe ff       	call   c001419e <PhysicalDisk::startCache()>
c0024370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024373:	e8 48 1f ff ff       	call   c00162c0 <createPartitionsForDisk(PhysicalDisk*)>
c0024378:	83 c4 14             	add    esp,0x14
c002437b:	31 c0                	xor    eax,eax
c002437d:	5b                   	pop    ebx
c002437e:	5e                   	pop    esi
c002437f:	c3                   	ret    

c0024380 <SATA::SATA()>:
c0024380:	83 ec 0c             	sub    esp,0xc
c0024383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024387:	83 ec 04             	sub    esp,0x4
c002438a:	68 00 02 00 00       	push   0x200
c002438f:	68 d8 c4 02 c0       	push   0xc002c4d8
c0024394:	50                   	push   eax
c0024395:	e8 9c fd fe ff       	call   c0014136 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002439a:	83 c4 10             	add    esp,0x10
c002439d:	ba 10 c5 02 c0       	mov    edx,0xc002c510
c00243a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a6:	89 10                	mov    DWORD PTR [eax],edx
c00243a8:	90                   	nop
c00243a9:	83 c4 0c             	add    esp,0xc
c00243ac:	c3                   	ret    
c00243ad:	90                   	nop

c00243ae <SATA::access(unsigned long long, int, void*, bool)>:
c00243ae:	55                   	push   ebp
c00243af:	57                   	push   edi
c00243b0:	56                   	push   esi
c00243b1:	53                   	push   ebx
c00243b2:	83 ec 2c             	sub    esp,0x2c
c00243b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00243b9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00243bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00243c0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00243c4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00243c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00243cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243d0:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c00243d5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00243da:	7e 33                	jle    c002440f <SATA::access(unsigned long long, int, void*, bool)+0x61>
c00243dc:	57                   	push   edi
c00243dd:	57                   	push   edi
c00243de:	53                   	push   ebx
c00243df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00243e3:	6a 10                	push   0x10
c00243e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243ed:	55                   	push   ebp
c00243ee:	e8 bb ff ff ff       	call   c00243ae <SATA::access(unsigned long long, int, void*, bool)>
c00243f3:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c00243f8:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c00243fd:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0024402:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c002440a:	83 c4 20             	add    esp,0x20
c002440d:	eb c6                	jmp    c00243d5 <SATA::access(unsigned long long, int, void*, bool)+0x27>
c002440f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024412:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c0024418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002441c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024420:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024424:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002442a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024430:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024434:	89 d8                	mov    eax,ebx
c0024436:	c1 e0 07             	shl    eax,0x7
c0024439:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002443d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024447:	56                   	push   esi
c0024448:	8d 43 02             	lea    eax,[ebx+0x2]
c002444b:	56                   	push   esi
c002444c:	c1 e0 07             	shl    eax,0x7
c002444f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024453:	50                   	push   eax
c0024454:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002445a:	e8 2d ef ff ff       	call   c002338c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002445f:	ba 01 00 00 00       	mov    edx,0x1
c0024464:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024468:	83 c4 10             	add    esp,0x10
c002446b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024470:	0f 84 dd 01 00 00    	je     c0024653 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024476:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002447a:	c1 e0 09             	shl    eax,0x9
c002447d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024482:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024486:	74 17                	je     c002449f <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c0024488:	51                   	push   ecx
c0024489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002448d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024491:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024497:	e8 04 c2 fd ff       	call   c00006a0 <memcpy>
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00244a5:	8d 43 02             	lea    eax,[ebx+0x2]
c00244a8:	c1 e0 07             	shl    eax,0x7
c00244ab:	89 de                	mov    esi,ebx
c00244ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00244b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00244b3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00244b9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00244bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00244c3:	c1 e1 05             	shl    ecx,0x5
c00244c6:	01 c8                	add    eax,ecx
c00244c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00244cc:	8b 38                	mov    edi,DWORD PTR [eax]
c00244ce:	83 e1 01             	and    ecx,0x1
c00244d1:	83 e7 bf             	and    edi,0xffffffbf
c00244d4:	c1 e1 06             	shl    ecx,0x6
c00244d7:	09 f9                	or     ecx,edi
c00244d9:	88 08                	mov    BYTE PTR [eax],cl
c00244db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244dd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00244e3:	81 c9 05 00 01 00    	or     ecx,0x10005
c00244e9:	89 08                	mov    DWORD PTR [eax],ecx
c00244eb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00244f1:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c00244f7:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c00244fd:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c0024500:	52                   	push   edx
c0024501:	68 90 00 00 00       	push   0x90
c0024506:	6a 00                	push   0x0
c0024508:	57                   	push   edi
c0024509:	e8 ae c1 fd ff       	call   c00006bc <memset>
c002450e:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024514:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c0024518:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c002451e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024522:	83 c4 10             	add    esp,0x10
c0024525:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024528:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c002452e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024534:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024539:	09 c8                	or     eax,ecx
c002453b:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c0024541:	66 8b 07             	mov    ax,WORD PTR [edi]
c0024544:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c002454b:	66 25 00 7f          	and    ax,0x7f00
c002454f:	66 0d 27 80          	or     ax,0x8027
c0024553:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024558:	66 89 07             	mov    WORD PTR [edi],ax
c002455b:	19 c0                	sbb    eax,eax
c002455d:	c1 e6 07             	shl    esi,0x7
c0024560:	83 e0 f0             	and    eax,0xfffffff0
c0024563:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024567:	83 c0 35             	add    eax,0x35
c002456a:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c002456d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024570:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c0024574:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024578:	c1 e8 10             	shr    eax,0x10
c002457b:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c002457e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024582:	c1 e8 18             	shr    eax,0x18
c0024585:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c0024588:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002458c:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c002458f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024593:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c0024596:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002459a:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c002459e:	31 c0                	xor    eax,eax
c00245a0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00245a6:	80 e1 88             	and    cl,0x88
c00245a9:	74 0a                	je     c00245b5 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c00245ab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00245b0:	74 0a                	je     c00245bc <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c00245b2:	40                   	inc    eax
c00245b3:	eb eb                	jmp    c00245a0 <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c00245b5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00245ba:	75 0a                	jne    c00245c6 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c00245bc:	83 ec 0c             	sub    esp,0xc
c00245bf:	68 e8 c4 02 c0       	push   0xc002c4e8
c00245c4:	eb 56                	jmp    c002461c <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c00245c6:	b8 01 00 00 00       	mov    eax,0x1
c00245cb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00245cf:	c1 e3 07             	shl    ebx,0x7
c00245d2:	d3 e0                	shl    eax,cl
c00245d4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00245d8:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00245de:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c00245e4:	85 c8                	test   eax,ecx
c00245e6:	74 20                	je     c0024608 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c00245e8:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c00245ee:	0f ba e1 1e          	bt     ecx,0x1e
c00245f2:	73 ea                	jae    c00245de <SATA::access(unsigned long long, int, void*, bool)+0x230>
c00245f4:	83 ec 0c             	sub    esp,0xc
c00245f7:	68 f6 c4 02 c0       	push   0xc002c4f6
c00245fc:	e8 5e 58 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0024601:	83 c4 10             	add    esp,0x10
c0024604:	31 d2                	xor    edx,edx
c0024606:	eb 4b                	jmp    c0024653 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024608:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002460e:	0f ba e0 1e          	bt     eax,0x1e
c0024612:	73 17                	jae    c002462b <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c0024614:	83 ec 0c             	sub    esp,0xc
c0024617:	68 f6 c4 02 c0       	push   0xc002c4f6
c002461c:	e8 3e 58 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0024621:	83 c4 10             	add    esp,0x10
c0024624:	ba 01 00 00 00       	mov    edx,0x1
c0024629:	eb 28                	jmp    c0024653 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c002462b:	31 d2                	xor    edx,edx
c002462d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024632:	75 1f                	jne    c0024653 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024634:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024638:	50                   	push   eax
c0024639:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002463d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024643:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024647:	e8 54 c0 fd ff       	call   c00006a0 <memcpy>
c002464c:	83 c4 10             	add    esp,0x10
c002464f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024653:	83 c4 2c             	add    esp,0x2c
c0024656:	89 d0                	mov    eax,edx
c0024658:	5b                   	pop    ebx
c0024659:	5e                   	pop    esi
c002465a:	5f                   	pop    edi
c002465b:	5d                   	pop    ebp
c002465c:	c3                   	ret    
c002465d:	90                   	nop

c002465e <SATA::read(unsigned long long, int, void*)>:
c002465e:	57                   	push   edi
c002465f:	b8 04 00 00 00       	mov    eax,0x4
c0024664:	56                   	push   esi
c0024665:	53                   	push   ebx
c0024666:	83 ec 10             	sub    esp,0x10
c0024669:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002466d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024671:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024674:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024678:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002467c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024682:	77 3b                	ja     c00246bf <SATA::read(unsigned long long, int, void*)+0x61>
c0024684:	b8 06 00 00 00       	mov    eax,0x6
c0024689:	85 d2                	test   edx,edx
c002468b:	74 32                	je     c00246bf <SATA::read(unsigned long long, int, void*)+0x61>
c002468d:	50                   	push   eax
c002468e:	50                   	push   eax
c002468f:	6a 00                	push   0x0
c0024691:	52                   	push   edx
c0024692:	53                   	push   ebx
c0024693:	57                   	push   edi
c0024694:	56                   	push   esi
c0024695:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024699:	e8 10 fd ff ff       	call   c00243ae <SATA::access(unsigned long long, int, void*, bool)>
c002469e:	83 c4 20             	add    esp,0x20
c00246a1:	85 c0                	test   eax,eax
c00246a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246a7:	75 11                	jne    c00246ba <SATA::read(unsigned long long, int, void*)+0x5c>
c00246a9:	01 1d a8 1d 03 c0    	add    DWORD PTR ds:0xc0031da8,ebx
c00246af:	e8 9c c0 fe ff       	call   c0010750 <VgaText::updateDiskUsage()>
c00246b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246b8:	eb 05                	jmp    c00246bf <SATA::read(unsigned long long, int, void*)+0x61>
c00246ba:	b8 01 00 00 00       	mov    eax,0x1
c00246bf:	83 c4 10             	add    esp,0x10
c00246c2:	5b                   	pop    ebx
c00246c3:	5e                   	pop    esi
c00246c4:	5f                   	pop    edi
c00246c5:	c3                   	ret    

c00246c6 <SATA::write(unsigned long long, int, void*)>:
c00246c6:	57                   	push   edi
c00246c7:	b8 04 00 00 00       	mov    eax,0x4
c00246cc:	56                   	push   esi
c00246cd:	53                   	push   ebx
c00246ce:	83 ec 10             	sub    esp,0x10
c00246d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00246d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00246d9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00246dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00246e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00246e4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00246ea:	77 3b                	ja     c0024727 <SATA::write(unsigned long long, int, void*)+0x61>
c00246ec:	b8 06 00 00 00       	mov    eax,0x6
c00246f1:	85 d2                	test   edx,edx
c00246f3:	74 32                	je     c0024727 <SATA::write(unsigned long long, int, void*)+0x61>
c00246f5:	50                   	push   eax
c00246f6:	50                   	push   eax
c00246f7:	6a 01                	push   0x1
c00246f9:	52                   	push   edx
c00246fa:	53                   	push   ebx
c00246fb:	57                   	push   edi
c00246fc:	56                   	push   esi
c00246fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024701:	e8 a8 fc ff ff       	call   c00243ae <SATA::access(unsigned long long, int, void*, bool)>
c0024706:	83 c4 20             	add    esp,0x20
c0024709:	85 c0                	test   eax,eax
c002470b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002470f:	75 11                	jne    c0024722 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024711:	01 1d a4 1d 03 c0    	add    DWORD PTR ds:0xc0031da4,ebx
c0024717:	e8 34 c0 fe ff       	call   c0010750 <VgaText::updateDiskUsage()>
c002471c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024720:	eb 05                	jmp    c0024727 <SATA::write(unsigned long long, int, void*)+0x61>
c0024722:	b8 01 00 00 00       	mov    eax,0x1
c0024727:	83 c4 10             	add    esp,0x10
c002472a:	5b                   	pop    ebx
c002472b:	5e                   	pop    esi
c002472c:	5f                   	pop    edi
c002472d:	c3                   	ret    

c002472e <SATAPI::write(unsigned long long, int, void*)>:
c002472e:	b8 03 00 00 00       	mov    eax,0x3
c0024733:	c3                   	ret    

c0024734 <SATAPI::close(int, int, void*)>:
c0024734:	83 ec 0c             	sub    esp,0xc
c0024737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024741:	85 c0                	test   eax,eax
c0024743:	74 0c                	je     c0024751 <SATAPI::close(int, int, void*)+0x1d>
c0024745:	83 ec 0c             	sub    esp,0xc
c0024748:	8b 10                	mov    edx,DWORD PTR [eax]
c002474a:	50                   	push   eax
c002474b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002474e:	83 c4 10             	add    esp,0x10
c0024751:	31 c0                	xor    eax,eax
c0024753:	83 c4 0c             	add    esp,0xc
c0024756:	c3                   	ret    
c0024757:	90                   	nop

c0024758 <SATAPI::SATAPI()>:
c0024758:	83 ec 0c             	sub    esp,0xc
c002475b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002475f:	83 ec 04             	sub    esp,0x4
c0024762:	68 00 08 00 00       	push   0x800
c0024767:	68 40 c5 02 c0       	push   0xc002c540
c002476c:	50                   	push   eax
c002476d:	e8 c4 f9 fe ff       	call   c0014136 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024772:	83 c4 10             	add    esp,0x10
c0024775:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c002477a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002477e:	89 10                	mov    DWORD PTR [eax],edx
c0024780:	90                   	nop
c0024781:	83 c4 0c             	add    esp,0xc
c0024784:	c3                   	ret    
c0024785:	90                   	nop

c0024786 <SATAPI::diskRemoved()>:
c0024786:	83 ec 18             	sub    esp,0x18
c0024789:	68 4c c5 02 c0       	push   0xc002c54c
c002478e:	e8 58 e1 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024797:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002479e:	83 c4 1c             	add    esp,0x1c
c00247a1:	c3                   	ret    

c00247a2 <SATAPI::diskInserted()>:
c00247a2:	53                   	push   ebx
c00247a3:	83 ec 14             	sub    esp,0x14
c00247a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247aa:	68 63 c5 02 c0       	push   0xc002c563
c00247af:	e8 37 e1 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00247b4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00247bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247be:	e8 db f9 fe ff       	call   c001419e <PhysicalDisk::startCache()>
c00247c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00247c7:	83 c4 18             	add    esp,0x18
c00247ca:	5b                   	pop    ebx
c00247cb:	e9 f0 1a ff ff       	jmp    c00162c0 <createPartitionsForDisk(PhysicalDisk*)>

c00247d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00247d0:	55                   	push   ebp
c00247d1:	57                   	push   edi
c00247d2:	56                   	push   esi
c00247d3:	53                   	push   ebx
c00247d4:	83 ec 24             	sub    esp,0x24
c00247d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00247db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00247df:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00247e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00247e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00247ed:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00247f3:	8d 5f 02             	lea    ebx,[edi+0x2]
c00247f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00247fc:	c1 e3 07             	shl    ebx,0x7
c00247ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024803:	89 f8                	mov    eax,edi
c0024805:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024809:	c1 e0 07             	shl    eax,0x7
c002480c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024810:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024814:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002481e:	53                   	push   ebx
c002481f:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024825:	e8 62 eb ff ff       	call   c002338c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002482a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002482e:	83 c4 10             	add    esp,0x10
c0024831:	b8 01 00 00 00       	mov    eax,0x1
c0024836:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002483b:	0f 84 8a 01 00 00    	je     c00249cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024841:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024847:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024849:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002484f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024855:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024859:	c1 e1 05             	shl    ecx,0x5
c002485c:	01 c8                	add    eax,ecx
c002485e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024860:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024866:	81 c9 25 00 01 00    	or     ecx,0x10025
c002486c:	89 08                	mov    DWORD PTR [eax],ecx
c002486e:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024874:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002487a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024880:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024883:	52                   	push   edx
c0024884:	68 90 00 00 00       	push   0x90
c0024889:	6a 00                	push   0x0
c002488b:	53                   	push   ebx
c002488c:	e8 2b be fd ff       	call   c00006bc <memset>
c0024891:	83 c4 0c             	add    esp,0xc
c0024894:	8d 43 40             	lea    eax,[ebx+0x40]
c0024897:	6a 0c                	push   0xc
c0024899:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002489d:	50                   	push   eax
c002489e:	e8 fd bd fd ff       	call   c00006a0 <memcpy>
c00248a3:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00248a9:	89 ea                	mov    edx,ebp
c00248ab:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00248b1:	c1 ea 18             	shr    edx,0x18
c00248b4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00248b8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00248bb:	8d 48 ff             	lea    ecx,[eax-0x1]
c00248be:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00248c2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00248c8:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00248ce:	25 00 00 c0 ff       	and    eax,0xffc00000
c00248d3:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00248d7:	09 c8                	or     eax,ecx
c00248d9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00248dd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00248e3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00248e6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00248ed:	66 25 00 7f          	and    ax,0x7f00
c00248f1:	66 0d 27 80          	or     ax,0x8027
c00248f5:	66 89 03             	mov    WORD PTR [ebx],ax
c00248f8:	89 e8                	mov    eax,ebp
c00248fa:	c1 e8 10             	shr    eax,0x10
c00248fd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024900:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024904:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024907:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002490b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002490e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024912:	83 c4 10             	add    esp,0x10
c0024915:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024919:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002491d:	31 c0                	xor    eax,eax
c002491f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024925:	80 e1 88             	and    cl,0x88
c0024928:	74 0a                	je     c0024934 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002492a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002492f:	74 0a                	je     c002493b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024931:	40                   	inc    eax
c0024932:	eb eb                	jmp    c002491f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024934:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024939:	75 0f                	jne    c002494a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002493b:	83 ec 0c             	sub    esp,0xc
c002493e:	68 e8 c4 02 c0       	push   0xc002c4e8
c0024943:	e8 17 55 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0024948:	eb 3a                	jmp    c0024984 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c002494a:	b8 01 00 00 00       	mov    eax,0x1
c002494f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024953:	c1 e7 07             	shl    edi,0x7
c0024956:	d3 e0                	shl    eax,cl
c0024958:	03 3c 24             	add    edi,DWORD PTR [esp]
c002495b:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024961:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024967:	85 d0                	test   eax,edx
c0024969:	74 23                	je     c002498e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002496b:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024971:	0f ba e2 1e          	bt     edx,0x1e
c0024975:	73 ea                	jae    c0024961 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024977:	83 ec 0c             	sub    esp,0xc
c002497a:	68 7b c5 02 c0       	push   0xc002c57b
c002497f:	e8 67 df fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0024984:	83 c4 10             	add    esp,0x10
c0024987:	b8 01 00 00 00       	mov    eax,0x1
c002498c:	eb 3d                	jmp    c00249cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002498e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024994:	0f ba e0 1e          	bt     eax,0x1e
c0024998:	73 0a                	jae    c00249a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002499a:	83 ec 0c             	sub    esp,0xc
c002499d:	68 8e c5 02 c0       	push   0xc002c58e
c00249a2:	eb db                	jmp    c002497f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00249a4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00249a9:	74 1e                	je     c00249c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249ab:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00249b0:	74 17                	je     c00249c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249b2:	50                   	push   eax
c00249b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00249b7:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00249bd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00249c1:	e8 da bc fd ff       	call   c00006a0 <memcpy>
c00249c6:	83 c4 10             	add    esp,0x10
c00249c9:	31 c0                	xor    eax,eax
c00249cb:	83 c4 1c             	add    esp,0x1c
c00249ce:	5b                   	pop    ebx
c00249cf:	5e                   	pop    esi
c00249d0:	5f                   	pop    edi
c00249d1:	5d                   	pop    ebp
c00249d2:	c3                   	ret    
c00249d3:	90                   	nop

c00249d4 <SATAPI::eject()>:
c00249d4:	57                   	push   edi
c00249d5:	b9 03 00 00 00       	mov    ecx,0x3
c00249da:	53                   	push   ebx
c00249db:	83 ec 14             	sub    esp,0x14
c00249de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249e6:	fc                   	cld    
c00249e7:	31 c0                	xor    eax,eax
c00249e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249eb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249f0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249f5:	50                   	push   eax
c00249f6:	6a 00                	push   0x0
c00249f8:	6a 00                	push   0x0
c00249fa:	6a 00                	push   0x0
c00249fc:	6a 00                	push   0x0
c00249fe:	6a 02                	push   0x2
c0024a00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a04:	50                   	push   eax
c0024a05:	53                   	push   ebx
c0024a06:	e8 c5 fd ff ff       	call   c00247d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a0b:	83 c4 14             	add    esp,0x14
c0024a0e:	53                   	push   ebx
c0024a0f:	e8 72 fd ff ff       	call   c0024786 <SATAPI::diskRemoved()>
c0024a14:	83 c4 24             	add    esp,0x24
c0024a17:	31 c0                	xor    eax,eax
c0024a19:	5b                   	pop    ebx
c0024a1a:	5f                   	pop    edi
c0024a1b:	c3                   	ret    

c0024a1c <SATAPI::detectMedia()>:
c0024a1c:	56                   	push   esi
c0024a1d:	53                   	push   ebx
c0024a1e:	83 ec 28             	sub    esp,0x28
c0024a21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a25:	6a 0c                	push   0xc
c0024a27:	6a 00                	push   0x0
c0024a29:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a2d:	56                   	push   esi
c0024a2e:	e8 89 bc fd ff       	call   c00006bc <memset>
c0024a33:	83 c4 0c             	add    esp,0xc
c0024a36:	6a 00                	push   0x0
c0024a38:	6a 00                	push   0x0
c0024a3a:	6a 00                	push   0x0
c0024a3c:	6a 00                	push   0x0
c0024a3e:	6a 00                	push   0x0
c0024a40:	56                   	push   esi
c0024a41:	53                   	push   ebx
c0024a42:	e8 89 fd ff ff       	call   c00247d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a47:	83 c4 1c             	add    esp,0x1c
c0024a4a:	6a 0c                	push   0xc
c0024a4c:	6a 00                	push   0x0
c0024a4e:	56                   	push   esi
c0024a4f:	e8 68 bc fd ff       	call   c00006bc <memset>
c0024a54:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a59:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a5e:	83 c4 0c             	add    esp,0xc
c0024a61:	6a 01                	push   0x1
c0024a63:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024a67:	50                   	push   eax
c0024a68:	6a 00                	push   0x0
c0024a6a:	6a 00                	push   0x0
c0024a6c:	6a 12                	push   0x12
c0024a6e:	56                   	push   esi
c0024a6f:	53                   	push   ebx
c0024a70:	e8 5b fd ff ff       	call   c00247d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a75:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a79:	83 c4 20             	add    esp,0x20
c0024a7c:	83 e0 7f             	and    eax,0x7f
c0024a7f:	3c 70                	cmp    al,0x70
c0024a81:	74 15                	je     c0024a98 <SATAPI::detectMedia()+0x7c>
c0024a83:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024a8a:	75 0c                	jne    c0024a98 <SATAPI::detectMedia()+0x7c>
c0024a8c:	83 ec 0c             	sub    esp,0xc
c0024a8f:	53                   	push   ebx
c0024a90:	e8 0d fd ff ff       	call   c00247a2 <SATAPI::diskInserted()>
c0024a95:	83 c4 10             	add    esp,0x10
c0024a98:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a9c:	83 e0 0f             	and    eax,0xf
c0024a9f:	3c 02                	cmp    al,0x2
c0024aa1:	75 1b                	jne    c0024abe <SATAPI::detectMedia()+0xa2>
c0024aa3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024aa8:	75 2d                	jne    c0024ad7 <SATAPI::detectMedia()+0xbb>
c0024aaa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ab1:	74 24                	je     c0024ad7 <SATAPI::detectMedia()+0xbb>
c0024ab3:	83 ec 0c             	sub    esp,0xc
c0024ab6:	53                   	push   ebx
c0024ab7:	e8 ca fc ff ff       	call   c0024786 <SATAPI::diskRemoved()>
c0024abc:	eb 16                	jmp    c0024ad4 <SATAPI::detectMedia()+0xb8>
c0024abe:	84 c0                	test   al,al
c0024ac0:	75 15                	jne    c0024ad7 <SATAPI::detectMedia()+0xbb>
c0024ac2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ac9:	75 0c                	jne    c0024ad7 <SATAPI::detectMedia()+0xbb>
c0024acb:	83 ec 0c             	sub    esp,0xc
c0024ace:	53                   	push   ebx
c0024acf:	e8 ce fc ff ff       	call   c00247a2 <SATAPI::diskInserted()>
c0024ad4:	83 c4 10             	add    esp,0x10
c0024ad7:	83 c4 24             	add    esp,0x24
c0024ada:	5b                   	pop    ebx
c0024adb:	5e                   	pop    esi
c0024adc:	c3                   	ret    
c0024add:	90                   	nop

c0024ade <SATAPI::open(int, int, void*)>:
c0024ade:	56                   	push   esi
c0024adf:	53                   	push   ebx
c0024ae0:	50                   	push   eax
c0024ae1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ae5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ae9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024af3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024af9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b07:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b11:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b17:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b1e:	e8 96 b1 fe ff       	call   c000fcb9 <Phys::allocatePage()>
c0024b23:	89 c6                	mov    esi,eax
c0024b25:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b2b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b31:	e8 83 b1 fe ff       	call   c000fcb9 <Phys::allocatePage()>
c0024b36:	39 c6                	cmp    esi,eax
c0024b38:	74 10                	je     c0024b4a <SATAPI::open(int, int, void*)+0x6c>
c0024b3a:	83 ec 0c             	sub    esp,0xc
c0024b3d:	68 a3 c5 02 c0       	push   0xc002c5a3
c0024b42:	e8 18 53 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0024b47:	83 c4 10             	add    esp,0x10
c0024b4a:	83 ec 0c             	sub    esp,0xc
c0024b4d:	6a 02                	push   0x2
c0024b4f:	e8 a7 cd fe ff       	call   c00118fb <Virt::allocateKernelVirtualPages(int)>
c0024b54:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024b5a:	e8 2c cf fe ff       	call   c0011a8b <Virt::getAKernelVAS()>
c0024b5f:	6a 03                	push   0x3
c0024b61:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024b67:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024b6d:	50                   	push   eax
c0024b6e:	e8 53 d4 fe ff       	call   c0011fc6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b73:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024b7a:	83 c4 14             	add    esp,0x14
c0024b7d:	53                   	push   ebx
c0024b7e:	e8 99 fe ff ff       	call   c0024a1c <SATAPI::detectMedia()>
c0024b83:	83 c4 14             	add    esp,0x14
c0024b86:	31 c0                	xor    eax,eax
c0024b88:	5b                   	pop    ebx
c0024b89:	5e                   	pop    esi
c0024b8a:	c3                   	ret    
c0024b8b:	90                   	nop

c0024b8c <SATAPI::read(unsigned long long, int, void*)>:
c0024b8c:	55                   	push   ebp
c0024b8d:	57                   	push   edi
c0024b8e:	56                   	push   esi
c0024b8f:	53                   	push   ebx
c0024b90:	83 ec 1c             	sub    esp,0x1c
c0024b93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024b9f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024ba6:	74 19                	je     c0024bc1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024ba8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024bad:	7e 2e                	jle    c0024bdd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024baf:	83 ec 0c             	sub    esp,0xc
c0024bb2:	68 b9 c5 02 c0       	push   0xc002c5b9
c0024bb7:	e8 a3 52 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0024bbc:	83 c4 10             	add    esp,0x10
c0024bbf:	eb 1c                	jmp    c0024bdd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024bc1:	83 ec 0c             	sub    esp,0xc
c0024bc4:	55                   	push   ebp
c0024bc5:	e8 52 fe ff ff       	call   c0024a1c <SATAPI::detectMedia()>
c0024bca:	83 c4 10             	add    esp,0x10
c0024bcd:	b8 02 00 00 00       	mov    eax,0x2
c0024bd2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024bd9:	75 cd                	jne    c0024ba8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bdb:	eb 49                	jmp    c0024c26 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024bdd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024be1:	b9 03 00 00 00       	mov    ecx,0x3
c0024be6:	fc                   	cld    
c0024be7:	31 c0                	xor    eax,eax
c0024be9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024beb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bf0:	89 d8                	mov    eax,ebx
c0024bf2:	86 e0                	xchg   al,ah
c0024bf4:	c1 c0 10             	rol    eax,0x10
c0024bf7:	86 e0                	xchg   al,ah
c0024bf9:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024bfd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024c01:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c05:	50                   	push   eax
c0024c06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024c0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024c0e:	56                   	push   esi
c0024c0f:	53                   	push   ebx
c0024c10:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c14:	c1 e0 0b             	shl    eax,0xb
c0024c17:	50                   	push   eax
c0024c18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c1c:	50                   	push   eax
c0024c1d:	55                   	push   ebp
c0024c1e:	e8 ad fb ff ff       	call   c00247d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c23:	83 c4 20             	add    esp,0x20
c0024c26:	83 c4 1c             	add    esp,0x1c
c0024c29:	5b                   	pop    ebx
c0024c2a:	5e                   	pop    esi
c0024c2b:	5f                   	pop    edi
c0024c2c:	5d                   	pop    ebp
c0024c2d:	c3                   	ret    

c0024c2e <AVX::open(int, int, void*)>:
c0024c2e:	83 ec 0c             	sub    esp,0xc
c0024c31:	e8 42 11 00 00       	call   c0025d78 <avxInit>
c0024c36:	b8 00 00 00 00       	mov    eax,0x0
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	c3                   	ret    
c0024c3f:	90                   	nop

c0024c40 <AVX::close(int, int, void*)>:
c0024c40:	83 ec 0c             	sub    esp,0xc
c0024c43:	e8 31 11 00 00       	call   c0025d79 <avxClose>
c0024c48:	b8 00 00 00 00       	mov    eax,0x0
c0024c4d:	83 c4 0c             	add    esp,0xc
c0024c50:	c3                   	ret    
c0024c51:	90                   	nop

c0024c52 <AVX::available()>:
c0024c52:	83 ec 0c             	sub    esp,0xc
c0024c55:	e8 16 11 00 00       	call   c0025d70 <avxDetect>
c0024c5a:	85 c0                	test   eax,eax
c0024c5c:	0f 95 c0             	setne  al
c0024c5f:	83 c4 0c             	add    esp,0xc
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <AVX::save(void*)>:
c0024c64:	83 ec 0c             	sub    esp,0xc
c0024c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c6b:	83 ec 0c             	sub    esp,0xc
c0024c6e:	50                   	push   eax
c0024c6f:	e8 02 11 00 00       	call   c0025d76 <avxSave>
c0024c74:	83 c4 10             	add    esp,0x10
c0024c77:	90                   	nop
c0024c78:	83 c4 0c             	add    esp,0xc
c0024c7b:	c3                   	ret    

c0024c7c <AVX::load(void*)>:
c0024c7c:	83 ec 0c             	sub    esp,0xc
c0024c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c83:	83 ec 0c             	sub    esp,0xc
c0024c86:	50                   	push   eax
c0024c87:	e8 eb 10 00 00       	call   c0025d77 <avxLoad>
c0024c8c:	83 c4 10             	add    esp,0x10
c0024c8f:	90                   	nop
c0024c90:	83 c4 0c             	add    esp,0xc
c0024c93:	c3                   	ret    

c0024c94 <AVX::AVX()>:
c0024c94:	83 ec 0c             	sub    esp,0xc
c0024c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c9b:	83 ec 08             	sub    esp,0x8
c0024c9e:	68 1c c6 02 c0       	push   0xc002c61c
c0024ca3:	50                   	push   eax
c0024ca4:	e8 6b f5 fe ff       	call   c0014214 <FPU::FPU(char const*)>
c0024ca9:	83 c4 10             	add    esp,0x10
c0024cac:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0024cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cb5:	89 10                	mov    DWORD PTR [eax],edx
c0024cb7:	90                   	nop
c0024cb8:	83 c4 0c             	add    esp,0xc
c0024cbb:	c3                   	ret    

c0024cbc <MMX::available()>:
c0024cbc:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0024cc1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024cc7:	83 e0 20             	and    eax,0x20
c0024cca:	84 c0                	test   al,al
c0024ccc:	0f 95 c0             	setne  al
c0024ccf:	c3                   	ret    

c0024cd0 <MMX::open(int, int, void*)>:
c0024cd0:	83 ec 0c             	sub    esp,0xc
c0024cd3:	e8 24 11 00 00       	call   c0025dfc <x87Init>
c0024cd8:	b8 00 00 00 00       	mov    eax,0x0
c0024cdd:	83 c4 0c             	add    esp,0xc
c0024ce0:	c3                   	ret    
c0024ce1:	90                   	nop

c0024ce2 <MMX::close(int, int, void*)>:
c0024ce2:	83 ec 0c             	sub    esp,0xc
c0024ce5:	e8 2c 11 00 00       	call   c0025e16 <x87Close>
c0024cea:	b8 00 00 00 00       	mov    eax,0x0
c0024cef:	83 c4 0c             	add    esp,0xc
c0024cf2:	c3                   	ret    
c0024cf3:	90                   	nop

c0024cf4 <MMX::save(void*)>:
c0024cf4:	83 ec 0c             	sub    esp,0xc
c0024cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cfb:	83 ec 0c             	sub    esp,0xc
c0024cfe:	50                   	push   eax
c0024cff:	e8 ed 10 00 00       	call   c0025df1 <x87Save>
c0024d04:	83 c4 10             	add    esp,0x10
c0024d07:	90                   	nop
c0024d08:	83 c4 0c             	add    esp,0xc
c0024d0b:	c3                   	ret    

c0024d0c <MMX::load(void*)>:
c0024d0c:	83 ec 0c             	sub    esp,0xc
c0024d0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d13:	83 ec 0c             	sub    esp,0xc
c0024d16:	50                   	push   eax
c0024d17:	e8 db 10 00 00       	call   c0025df7 <x87Load>
c0024d1c:	83 c4 10             	add    esp,0x10
c0024d1f:	90                   	nop
c0024d20:	83 c4 0c             	add    esp,0xc
c0024d23:	c3                   	ret    

c0024d24 <MMX::MMX()>:
c0024d24:	83 ec 0c             	sub    esp,0xc
c0024d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d2b:	83 ec 08             	sub    esp,0x8
c0024d2e:	68 5c c6 02 c0       	push   0xc002c65c
c0024d33:	50                   	push   eax
c0024d34:	e8 db f4 fe ff       	call   c0014214 <FPU::FPU(char const*)>
c0024d39:	83 c4 10             	add    esp,0x10
c0024d3c:	ba 6c c6 02 c0       	mov    edx,0xc002c66c
c0024d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d45:	89 10                	mov    DWORD PTR [eax],edx
c0024d47:	90                   	nop
c0024d48:	83 c4 0c             	add    esp,0xc
c0024d4b:	c3                   	ret    

c0024d4c <SSE::open(int, int, void*)>:
c0024d4c:	83 ec 0c             	sub    esp,0xc
c0024d4f:	e8 60 10 00 00       	call   c0025db4 <sseInit>
c0024d54:	b8 00 00 00 00       	mov    eax,0x0
c0024d59:	83 c4 0c             	add    esp,0xc
c0024d5c:	c3                   	ret    
c0024d5d:	90                   	nop

c0024d5e <SSE::close(int, int, void*)>:
c0024d5e:	83 ec 0c             	sub    esp,0xc
c0024d61:	e8 5e 10 00 00       	call   c0025dc4 <sseClose>
c0024d66:	b8 00 00 00 00       	mov    eax,0x0
c0024d6b:	83 c4 0c             	add    esp,0xc
c0024d6e:	c3                   	ret    
c0024d6f:	90                   	nop

c0024d70 <SSE::available()>:
c0024d70:	83 ec 1c             	sub    esp,0x1c
c0024d73:	e8 18 10 00 00       	call   c0025d90 <absolutelyNoChanceInHell>
c0024d78:	85 c0                	test   eax,eax
c0024d7a:	0f 95 c0             	setne  al
c0024d7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024d81:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024d85:	83 c4 1c             	add    esp,0x1c
c0024d88:	c3                   	ret    
c0024d89:	90                   	nop

c0024d8a <SSE::save(void*)>:
c0024d8a:	83 ec 0c             	sub    esp,0xc
c0024d8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d91:	83 ec 0c             	sub    esp,0xc
c0024d94:	50                   	push   eax
c0024d95:	e8 0e 10 00 00       	call   c0025da8 <sseSave>
c0024d9a:	83 c4 10             	add    esp,0x10
c0024d9d:	90                   	nop
c0024d9e:	83 c4 0c             	add    esp,0xc
c0024da1:	c3                   	ret    

c0024da2 <SSE::load(void*)>:
c0024da2:	83 ec 0c             	sub    esp,0xc
c0024da5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024da9:	83 ec 0c             	sub    esp,0xc
c0024dac:	50                   	push   eax
c0024dad:	e8 fc 0f 00 00       	call   c0025dae <sseLoad>
c0024db2:	83 c4 10             	add    esp,0x10
c0024db5:	90                   	nop
c0024db6:	83 c4 0c             	add    esp,0xc
c0024db9:	c3                   	ret    

c0024dba <SSE::SSE()>:
c0024dba:	83 ec 0c             	sub    esp,0xc
c0024dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc1:	83 ec 08             	sub    esp,0x8
c0024dc4:	68 9c c6 02 c0       	push   0xc002c69c
c0024dc9:	50                   	push   eax
c0024dca:	e8 45 f4 fe ff       	call   c0014214 <FPU::FPU(char const*)>
c0024dcf:	83 c4 10             	add    esp,0x10
c0024dd2:	ba ac c6 02 c0       	mov    edx,0xc002c6ac
c0024dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ddb:	89 10                	mov    DWORD PTR [eax],edx
c0024ddd:	90                   	nop
c0024dde:	83 c4 0c             	add    esp,0xc
c0024de1:	c3                   	ret    

c0024de2 <x87::open(int, int, void*)>:
c0024de2:	83 ec 0c             	sub    esp,0xc
c0024de5:	e8 12 10 00 00       	call   c0025dfc <x87Init>
c0024dea:	b8 00 00 00 00       	mov    eax,0x0
c0024def:	83 c4 0c             	add    esp,0xc
c0024df2:	c3                   	ret    
c0024df3:	90                   	nop

c0024df4 <x87::close(int, int, void*)>:
c0024df4:	83 ec 0c             	sub    esp,0xc
c0024df7:	e8 1a 10 00 00       	call   c0025e16 <x87Close>
c0024dfc:	b8 00 00 00 00       	mov    eax,0x0
c0024e01:	83 c4 0c             	add    esp,0xc
c0024e04:	c3                   	ret    
c0024e05:	90                   	nop

c0024e06 <x87::available()>:
c0024e06:	83 ec 0c             	sub    esp,0xc
c0024e09:	e8 c8 0f 00 00       	call   c0025dd6 <x87Detect>
c0024e0e:	85 c0                	test   eax,eax
c0024e10:	0f 95 c0             	setne  al
c0024e13:	83 c4 0c             	add    esp,0xc
c0024e16:	c3                   	ret    
c0024e17:	90                   	nop

c0024e18 <x87::save(void*)>:
c0024e18:	83 ec 0c             	sub    esp,0xc
c0024e1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e1f:	83 ec 0c             	sub    esp,0xc
c0024e22:	50                   	push   eax
c0024e23:	e8 c9 0f 00 00       	call   c0025df1 <x87Save>
c0024e28:	83 c4 10             	add    esp,0x10
c0024e2b:	90                   	nop
c0024e2c:	83 c4 0c             	add    esp,0xc
c0024e2f:	c3                   	ret    

c0024e30 <x87::load(void*)>:
c0024e30:	83 ec 0c             	sub    esp,0xc
c0024e33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e37:	83 ec 0c             	sub    esp,0xc
c0024e3a:	50                   	push   eax
c0024e3b:	e8 b7 0f 00 00       	call   c0025df7 <x87Load>
c0024e40:	83 c4 10             	add    esp,0x10
c0024e43:	90                   	nop
c0024e44:	83 c4 0c             	add    esp,0xc
c0024e47:	c3                   	ret    

c0024e48 <x87::x87()>:
c0024e48:	83 ec 0c             	sub    esp,0xc
c0024e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4f:	83 ec 08             	sub    esp,0x8
c0024e52:	68 dc c6 02 c0       	push   0xc002c6dc
c0024e57:	50                   	push   eax
c0024e58:	e8 b7 f3 fe ff       	call   c0014214 <FPU::FPU(char const*)>
c0024e5d:	83 c4 10             	add    esp,0x10
c0024e60:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0024e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e69:	89 10                	mov    DWORD PTR [eax],edx
c0024e6b:	90                   	nop
c0024e6c:	83 c4 0c             	add    esp,0xc
c0024e6f:	c3                   	ret    

c0024e70 <APIC::disable()>:
c0024e70:	90                   	nop
c0024e71:	c3                   	ret    

c0024e72 <APIC::close(int, int, void*)>:
c0024e72:	55                   	push   ebp
c0024e73:	89 e5                	mov    ebp,esp
c0024e75:	83 ec 08             	sub    esp,0x8
c0024e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e7d:	83 c0 3c             	add    eax,0x3c
c0024e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e82:	83 ec 0c             	sub    esp,0xc
c0024e85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e88:	ff d0                	call   eax
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	b8 00 00 00 00       	mov    eax,0x0
c0024e92:	c9                   	leave  
c0024e93:	c3                   	ret    

c0024e94 <IOAPIC::close(int, int, void*)>:
c0024e94:	b8 00 00 00 00       	mov    eax,0x0
c0024e99:	c3                   	ret    

c0024e9a <APIC::io_wait()>:
c0024e9a:	eb 00                	jmp    c0024e9c <APIC::io_wait()+0x2>
c0024e9c:	eb 00                	jmp    c0024e9e <APIC::io_wait()+0x4>
c0024e9e:	90                   	nop
c0024e9f:	c3                   	ret    

c0024ea0 <APIC::getBase()>:
c0024ea0:	55                   	push   ebp
c0024ea1:	89 e5                	mov    ebp,esp
c0024ea3:	83 ec 18             	sub    esp,0x18
c0024ea6:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0024eab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024eb1:	83 e0 08             	and    eax,0x8
c0024eb4:	84 c0                	test   al,al
c0024eb6:	75 07                	jne    c0024ebf <APIC::getBase()+0x1f>
c0024eb8:	b8 00 00 00 00       	mov    eax,0x0
c0024ebd:	eb 21                	jmp    c0024ee0 <APIC::getBase()+0x40>
c0024ebf:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0024ec4:	83 ec 08             	sub    esp,0x8
c0024ec7:	6a 1b                	push   0x1b
c0024ec9:	50                   	push   eax
c0024eca:	e8 f5 9c fe ff       	call   c000ebc4 <Computer::rdmsr(unsigned int)>
c0024ecf:	83 c4 10             	add    esp,0x10
c0024ed2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024ed5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024ed8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024edb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024ee0:	c9                   	leave  
c0024ee1:	c3                   	ret    

c0024ee2 <APIC::eoi(unsigned char)>:
c0024ee2:	55                   	push   ebp
c0024ee3:	89 e5                	mov    ebp,esp
c0024ee5:	83 ec 28             	sub    esp,0x28
c0024ee8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024eeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024eee:	83 ec 0c             	sub    esp,0xc
c0024ef1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ef4:	e8 a7 ff ff ff       	call   c0024ea0 <APIC::getBase()>
c0024ef9:	83 c4 10             	add    esp,0x10
c0024efc:	05 b0 00 00 00       	add    eax,0xb0
c0024f01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024f04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024f07:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024f0d:	90                   	nop
c0024f0e:	c9                   	leave  
c0024f0f:	c3                   	ret    

c0024f10 <APIC::open(int, int, void*)>:
c0024f10:	55                   	push   ebp
c0024f11:	89 e5                	mov    ebp,esp
c0024f13:	57                   	push   edi
c0024f14:	56                   	push   esi
c0024f15:	53                   	push   ebx
c0024f16:	83 ec 2c             	sub    esp,0x2c
c0024f19:	83 ec 0c             	sub    esp,0xc
c0024f1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f1f:	e8 7c ff ff ff       	call   c0024ea0 <APIC::getBase()>
c0024f24:	83 c4 10             	add    esp,0x10
c0024f27:	89 c2                	mov    edx,eax
c0024f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f2c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f32:	0f b6 f8             	movzx  edi,al
c0024f35:	89 d0                	mov    eax,edx
c0024f37:	ba 00 00 00 00       	mov    edx,0x0
c0024f3c:	89 c1                	mov    ecx,eax
c0024f3e:	80 e5 ff             	and    ch,0xff
c0024f41:	89 cb                	mov    ebx,ecx
c0024f43:	0f b6 f2             	movzx  esi,dl
c0024f46:	89 d8                	mov    eax,ebx
c0024f48:	89 f2                	mov    edx,esi
c0024f4a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f4d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f50:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f54:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f58:	83 e0 00             	and    eax,0x0
c0024f5b:	09 d0                	or     eax,edx
c0024f5d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f64:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f6a:	8d 50 01             	lea    edx,[eax+0x1]
c0024f6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f70:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024f76:	0f b6 d0             	movzx  edx,al
c0024f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f7c:	83 c2 08             	add    edx,0x8
c0024f7f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024f83:	0f b6 c9             	movzx  ecx,cl
c0024f86:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024f8c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024f90:	83 ec 0c             	sub    esp,0xc
c0024f93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f96:	e8 05 ff ff ff       	call   c0024ea0 <APIC::getBase()>
c0024f9b:	83 c4 10             	add    esp,0x10
c0024f9e:	05 f0 00 00 00       	add    eax,0xf0
c0024fa3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024fa6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0024fab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024fae:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024fb5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024fbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024fbf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024fc2:	89 10                	mov    DWORD PTR [eax],edx
c0024fc4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024fcb:	a1 30 03 03 c0       	mov    eax,ds:0xc0030330
c0024fd0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024fd3:	7d 7c                	jge    c0025051 <APIC::open(int, int, void*)+0x141>
c0024fd5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024fd8:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0024fdf:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024fe2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024fe5:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0024fec:	c1 e8 08             	shr    eax,0x8
c0024fef:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024ff3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024ff6:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0024ffd:	c1 e8 18             	shr    eax,0x18
c0025000:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025003:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025007:	75 40                	jne    c0025049 <APIC::open(int, int, void*)+0x139>
c0025009:	83 ec 0c             	sub    esp,0xc
c002500c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002500f:	e8 8c fe ff ff       	call   c0024ea0 <APIC::getBase()>
c0025014:	83 c4 10             	add    esp,0x10
c0025017:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002501b:	75 07                	jne    c0025024 <APIC::open(int, int, void*)+0x114>
c002501d:	ba 60 03 00 00       	mov    edx,0x360
c0025022:	eb 05                	jmp    c0025029 <APIC::open(int, int, void*)+0x119>
c0025024:	ba 50 03 00 00       	mov    edx,0x350
c0025029:	01 d0                	add    eax,edx
c002502b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002502e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025031:	8b 00                	mov    eax,DWORD PTR [eax]
c0025033:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025036:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002503d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025041:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025044:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025047:	89 10                	mov    DWORD PTR [eax],edx
c0025049:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002504c:	e9 7a ff ff ff       	jmp    c0024fcb <APIC::open(int, int, void*)+0xbb>
c0025051:	b8 00 00 00 00       	mov    eax,0x0
c0025056:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025059:	5b                   	pop    ebx
c002505a:	5e                   	pop    esi
c002505b:	5f                   	pop    edi
c002505c:	5d                   	pop    ebp
c002505d:	c3                   	ret    

c002505e <IOAPIC::IOAPIC()>:
c002505e:	83 ec 0c             	sub    esp,0xc
c0025061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025065:	83 ec 08             	sub    esp,0x8
c0025068:	68 1c c7 02 c0       	push   0xc002c71c
c002506d:	50                   	push   eax
c002506e:	e8 8f ee fe ff       	call   c0013f02 <Device::Device(char const*)>
c0025073:	83 c4 10             	add    esp,0x10
c0025076:	ba 44 c8 02 c0       	mov    edx,0xc002c844
c002507b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002507f:	89 10                	mov    DWORD PTR [eax],edx
c0025081:	90                   	nop
c0025082:	83 c4 0c             	add    esp,0xc
c0025085:	c3                   	ret    

c0025086 <APIC::APIC()>:
c0025086:	53                   	push   ebx
c0025087:	83 ec 18             	sub    esp,0x18
c002508a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002508e:	83 ec 08             	sub    esp,0x8
c0025091:	68 24 c7 02 c0       	push   0xc002c724
c0025096:	50                   	push   eax
c0025097:	e8 d2 f5 fe ff       	call   c001466e <InterruptController::InterruptController(char const*)>
c002509c:	83 c4 10             	add    esp,0x10
c002509f:	ba fc c7 02 c0       	mov    edx,0xc002c7fc
c00250a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250a8:	89 10                	mov    DWORD PTR [eax],edx
c00250aa:	a0 00 1e 03 c0       	mov    al,ds:0xc0031e00
c00250af:	83 f0 01             	xor    eax,0x1
c00250b2:	84 c0                	test   al,al
c00250b4:	0f 84 a1 00 00 00    	je     c002515b <APIC::APIC()+0xd5>
c00250ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00250bf:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c00250c4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00250c8:	0f 83 86 00 00 00    	jae    c0025154 <APIC::APIC()+0xce>
c00250ce:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00250d6:	83 ec 0c             	sub    esp,0xc
c00250d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00250dd:	e8 3a a5 fe ff       	call   c000f61c <malloc>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	89 c3                	mov    ebx,eax
c00250e7:	83 ec 0c             	sub    esp,0xc
c00250ea:	53                   	push   ebx
c00250eb:	e8 6e ff ff ff       	call   c002505e <IOAPIC::IOAPIC()>
c00250f0:	83 c4 10             	add    esp,0x10
c00250f3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00250f7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00250fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025100:	89 14 85 e0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce220],edx
c0025107:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c002510c:	40                   	inc    eax
c002510d:	a3 c0 1d 03 c0       	mov    ds:0xc0031dc0,eax
c0025112:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0025117:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002511d:	83 ec 08             	sub    esp,0x8
c0025120:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025124:	50                   	push   eax
c0025125:	e8 e8 eb fe ff       	call   c0013d12 <Device::addChild(Device*)>
c002512a:	83 c4 10             	add    esp,0x10
c002512d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025131:	8b 00                	mov    eax,DWORD PTR [eax]
c0025133:	83 c0 08             	add    eax,0x8
c0025136:	8b 00                	mov    eax,DWORD PTR [eax]
c0025138:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002513d:	6a 00                	push   0x0
c002513f:	6a 00                	push   0x0
c0025141:	52                   	push   edx
c0025142:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025146:	ff d0                	call   eax
c0025148:	83 c4 10             	add    esp,0x10
c002514b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002514f:	e9 6b ff ff ff       	jmp    c00250bf <APIC::APIC()+0x39>
c0025154:	c6 05 00 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e00,0x1
c002515b:	90                   	nop
c002515c:	83 c4 18             	add    esp,0x18
c002515f:	5b                   	pop    ebx
c0025160:	c3                   	ret    
c0025161:	90                   	nop

c0025162 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025162:	55                   	push   ebp
c0025163:	89 e5                	mov    ebp,esp
c0025165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025168:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002516e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025171:	72 1d                	jb     c0025190 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025176:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002517c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002517f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025185:	01 d0                	add    eax,edx
c0025187:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002518a:	73 04                	jae    c0025190 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002518c:	b0 01                	mov    al,0x1
c002518e:	eb 02                	jmp    c0025192 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025190:	b0 00                	mov    al,0x0
c0025192:	5d                   	pop    ebp
c0025193:	c3                   	ret    

c0025194 <IOAPIC::read(int)>:
c0025194:	55                   	push   ebp
c0025195:	89 e5                	mov    ebp,esp
c0025197:	83 ec 10             	sub    esp,0x10
c002519a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002519d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00251a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00251a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251a9:	0f b6 d0             	movzx  edx,al
c00251ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251af:	89 10                	mov    DWORD PTR [eax],edx
c00251b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251b4:	83 c0 10             	add    eax,0x10
c00251b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00251b9:	c9                   	leave  
c00251ba:	c3                   	ret    
c00251bb:	90                   	nop

c00251bc <IOAPIC::open(int, int, void*)>:
c00251bc:	55                   	push   ebp
c00251bd:	89 e5                	mov    ebp,esp
c00251bf:	57                   	push   edi
c00251c0:	56                   	push   esi
c00251c1:	53                   	push   ebx
c00251c2:	83 ec 0c             	sub    esp,0xc
c00251c5:	83 ec 0c             	sub    esp,0xc
c00251c8:	68 4f c7 02 c0       	push   0xc002c74f
c00251cd:	e8 19 d7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c00251d2:	83 c4 10             	add    esp,0x10
c00251d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00251db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00251e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00251ea:	8b 14 85 20 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbe0]
c00251f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00251fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025203:	8b 14 85 a0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb60]
c002520a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002520d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025216:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002521c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002521f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025225:	0f b6 f8             	movzx  edi,al
c0025228:	89 d0                	mov    eax,edx
c002522a:	ba 00 00 00 00       	mov    edx,0x0
c002522f:	89 c1                	mov    ecx,eax
c0025231:	80 e5 ff             	and    ch,0xff
c0025234:	89 cb                	mov    ebx,ecx
c0025236:	0f b6 f2             	movzx  esi,dl
c0025239:	89 d8                	mov    eax,ebx
c002523b:	89 f2                	mov    edx,esi
c002523d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025240:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025243:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025247:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002524b:	83 e0 00             	and    eax,0x0
c002524e:	09 d0                	or     eax,edx
c0025250:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025257:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002525d:	8d 50 01             	lea    edx,[eax+0x1]
c0025260:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025263:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025269:	0f b6 d0             	movzx  edx,al
c002526c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002526f:	83 c2 08             	add    edx,0x8
c0025272:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025276:	0f b6 c9             	movzx  ecx,cl
c0025279:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002527f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025283:	83 ec 08             	sub    esp,0x8
c0025286:	6a 01                	push   0x1
c0025288:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002528b:	e8 04 ff ff ff       	call   c0025194 <IOAPIC::read(int)>
c0025290:	83 c4 10             	add    esp,0x10
c0025293:	c1 f8 10             	sar    eax,0x10
c0025296:	0f b6 c0             	movzx  eax,al
c0025299:	8d 50 01             	lea    edx,[eax+0x1]
c002529c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002529f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00252a5:	b8 00 00 00 00       	mov    eax,0x0
c00252aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00252ad:	5b                   	pop    ebx
c00252ae:	5e                   	pop    esi
c00252af:	5f                   	pop    edi
c00252b0:	5d                   	pop    ebp
c00252b1:	c3                   	ret    

c00252b2 <IOAPIC::write(int, int)>:
c00252b2:	55                   	push   ebp
c00252b3:	89 e5                	mov    ebp,esp
c00252b5:	83 ec 10             	sub    esp,0x10
c00252b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00252c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00252c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252c7:	0f b6 d0             	movzx  edx,al
c00252ca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00252cd:	89 10                	mov    DWORD PTR [eax],edx
c00252cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00252d2:	8d 50 10             	lea    edx,[eax+0x10]
c00252d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00252d8:	89 02                	mov    DWORD PTR [edx],eax
c00252da:	90                   	nop
c00252db:	c9                   	leave  
c00252dc:	c3                   	ret    
c00252dd:	90                   	nop

c00252de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00252de:	55                   	push   ebp
c00252df:	89 e5                	mov    ebp,esp
c00252e1:	53                   	push   ebx
c00252e2:	83 ec 2c             	sub    esp,0x2c
c00252e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252e8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00252eb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00252ee:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00252f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00252f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00252f7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00252fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00252fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025300:	88 d8                	mov    al,bl
c0025302:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025305:	88 c8                	mov    al,cl
c0025307:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002530a:	88 d0                	mov    al,dl
c002530c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002530f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025313:	83 c0 08             	add    eax,0x8
c0025316:	01 c0                	add    eax,eax
c0025318:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002531b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002531f:	83 c0 08             	add    eax,0x8
c0025322:	01 c0                	add    eax,eax
c0025324:	40                   	inc    eax
c0025325:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025328:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002532b:	50                   	push   eax
c002532c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002532f:	e8 60 fe ff ff       	call   c0025194 <IOAPIC::read(int)>
c0025334:	83 c4 08             	add    esp,0x8
c0025337:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002533a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025341:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025344:	c1 e0 18             	shl    eax,0x18
c0025347:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002534a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002534d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025350:	52                   	push   edx
c0025351:	50                   	push   eax
c0025352:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025355:	e8 58 ff ff ff       	call   c00252b2 <IOAPIC::write(int, int)>
c002535a:	83 c4 0c             	add    esp,0xc
c002535d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025360:	50                   	push   eax
c0025361:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025364:	e8 2b fe ff ff       	call   c0025194 <IOAPIC::read(int)>
c0025369:	83 c4 08             	add    esp,0x8
c002536c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002536f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025376:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002537d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025384:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025388:	74 09                	je     c0025393 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002538a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025391:	eb 07                	jmp    c002539a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025393:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002539a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002539e:	74 09                	je     c00253a9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00253a0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00253a7:	eb 07                	jmp    c00253b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00253a9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00253b0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00253b7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00253bb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00253be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00253c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253c4:	52                   	push   edx
c00253c5:	50                   	push   eax
c00253c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253c9:	e8 e4 fe ff ff       	call   c00252b2 <IOAPIC::write(int, int)>
c00253ce:	83 c4 0c             	add    esp,0xc
c00253d1:	90                   	nop
c00253d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00253d5:	c9                   	leave  
c00253d6:	c3                   	ret    
c00253d7:	90                   	nop

c00253d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00253d8:	55                   	push   ebp
c00253d9:	89 e5                	mov    ebp,esp
c00253db:	57                   	push   edi
c00253dc:	56                   	push   esi
c00253dd:	53                   	push   ebx
c00253de:	83 ec 2c             	sub    esp,0x2c
c00253e1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00253e4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00253e7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00253eb:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00253ef:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00253f3:	74 5a                	je     c002544f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00253f5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00253f9:	7f 44                	jg     c002543f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00253fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253fe:	05 a0 cc 02 c0       	add    eax,0xc002cca0
c0025403:	8a 00                	mov    al,BYTE PTR [eax]
c0025405:	0f b6 c0             	movzx  eax,al
c0025408:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002540b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002540e:	66 8b 84 00 c0 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc40]
c0025416:	0f b7 c0             	movzx  eax,ax
c0025419:	83 e0 02             	and    eax,0x2
c002541c:	85 c0                	test   eax,eax
c002541e:	74 04                	je     c0025424 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025420:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025427:	66 8b 84 00 c0 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc40]
c002542f:	0f b7 c0             	movzx  eax,ax
c0025432:	83 e0 08             	and    eax,0x8
c0025435:	85 c0                	test   eax,eax
c0025437:	74 16                	je     c002544f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025439:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002543d:	eb 10                	jmp    c002544f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002543f:	83 ec 0c             	sub    esp,0xc
c0025442:	68 60 c7 02 c0       	push   0xc002c760
c0025447:	e8 13 4a ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002544c:	83 c4 10             	add    esp,0x10
c002544f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025453:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c0025458:	83 ec 08             	sub    esp,0x8
c002545b:	50                   	push   eax
c002545c:	68 98 c7 02 c0       	push   0xc002c798
c0025461:	e8 85 d4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025470:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c0025475:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025478:	7d 67                	jge    c00254e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002547a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002547d:	8b 04 85 e0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce220]
c0025484:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025487:	83 ec 08             	sub    esp,0x8
c002548a:	52                   	push   edx
c002548b:	50                   	push   eax
c002548c:	e8 d1 fc ff ff       	call   c0025162 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025491:	83 c4 10             	add    esp,0x10
c0025494:	84 c0                	test   al,al
c0025496:	74 44                	je     c00254dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025498:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002549b:	8b 1c 85 e0 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce220]
c00254a2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00254a6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00254a9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00254ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254b0:	83 c0 20             	add    eax,0x20
c00254b3:	0f b6 f0             	movzx  esi,al
c00254b6:	b8 00 00 00 00       	mov    eax,0x0
c00254bb:	99                   	cdq    
c00254bc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00254bf:	0f b6 c9             	movzx  ecx,cl
c00254c2:	83 ec 04             	sub    esp,0x4
c00254c5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00254c8:	57                   	push   edi
c00254c9:	56                   	push   esi
c00254ca:	52                   	push   edx
c00254cb:	50                   	push   eax
c00254cc:	51                   	push   ecx
c00254cd:	53                   	push   ebx
c00254ce:	e8 0b fe ff ff       	call   c00252de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00254d3:	83 c4 20             	add    esp,0x20
c00254d6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00254da:	eb 05                	jmp    c00254e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00254dc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00254df:	eb 8f                	jmp    c0025470 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00254e1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00254e4:	83 f0 01             	xor    eax,0x1
c00254e7:	84 c0                	test   al,al
c00254e9:	74 10                	je     c00254fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00254eb:	83 ec 0c             	sub    esp,0xc
c00254ee:	68 af c7 02 c0       	push   0xc002c7af
c00254f3:	e8 67 49 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00254f8:	83 c4 10             	add    esp,0x10
c00254fb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00254ff:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025506:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002550a:	7f 65                	jg     c0025571 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002550c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002550f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025512:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025519:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002551c:	01 ca                	add    edx,ecx
c002551e:	83 c2 54             	add    edx,0x54
c0025521:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025525:	85 c0                	test   eax,eax
c0025527:	75 43                	jne    c002556c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002552c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002552f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025536:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025539:	01 ca                	add    edx,ecx
c002553b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002553e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025541:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025548:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002554b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025552:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025555:	01 ca                	add    edx,ecx
c0025557:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002555d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025560:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025567:	83 e8 20             	sub    eax,0x20
c002556a:	eb 1a                	jmp    c0025586 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002556c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002556f:	eb 95                	jmp    c0025506 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025571:	83 ec 0c             	sub    esp,0xc
c0025574:	68 bc c7 02 c0       	push   0xc002c7bc
c0025579:	e8 e1 48 ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002557e:	83 c4 10             	add    esp,0x10
c0025581:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025586:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025589:	5b                   	pop    ebx
c002558a:	5e                   	pop    esi
c002558b:	5f                   	pop    edi
c002558c:	5d                   	pop    ebp
c002558d:	c3                   	ret    

c002558e <PIC::disable()>:
c002558e:	55                   	push   ebp
c002558f:	89 e5                	mov    ebp,esp
c0025591:	83 ec 10             	sub    esp,0x10
c0025594:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002559a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002559e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00255a1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00255a5:	ee                   	out    dx,al
c00255a6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00255ac:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00255b0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00255b3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00255b7:	ee                   	out    dx,al
c00255b8:	90                   	nop
c00255b9:	c9                   	leave  
c00255ba:	c3                   	ret    
c00255bb:	90                   	nop

c00255bc <PIC::close(int, int, void*)>:
c00255bc:	55                   	push   ebp
c00255bd:	89 e5                	mov    ebp,esp
c00255bf:	83 ec 08             	sub    esp,0x8
c00255c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c7:	83 c0 3c             	add    eax,0x3c
c00255ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00255cc:	83 ec 0c             	sub    esp,0xc
c00255cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255d2:	ff d0                	call   eax
c00255d4:	83 c4 10             	add    esp,0x10
c00255d7:	b8 00 00 00 00       	mov    eax,0x0
c00255dc:	c9                   	leave  
c00255dd:	c3                   	ret    

c00255de <PIC::PIC()>:
c00255de:	83 ec 0c             	sub    esp,0xc
c00255e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e5:	83 ec 08             	sub    esp,0x8
c00255e8:	68 68 c8 02 c0       	push   0xc002c868
c00255ed:	50                   	push   eax
c00255ee:	e8 7b f0 fe ff       	call   c001466e <InterruptController::InterruptController(char const*)>
c00255f3:	83 c4 10             	add    esp,0x10
c00255f6:	ba 94 c8 02 c0       	mov    edx,0xc002c894
c00255fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ff:	89 10                	mov    DWORD PTR [eax],edx
c0025601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025605:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002560b:	0f b6 d0             	movzx  edx,al
c002560e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025612:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025623:	0f b6 d0             	movzx  edx,al
c0025626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002562f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025633:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025639:	8d 50 01             	lea    edx,[eax+0x1]
c002563c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025640:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025646:	0f b6 d0             	movzx  edx,al
c0025649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025651:	83 e1 3f             	and    ecx,0x3f
c0025654:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025662:	0f b6 d0             	movzx  edx,al
c0025665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025669:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025674:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002567a:	0f b6 d0             	movzx  edx,al
c002567d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025681:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025690:	8d 50 01             	lea    edx,[eax+0x1]
c0025693:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025697:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002569d:	0f b6 d0             	movzx  edx,al
c00256a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00256a8:	83 e1 3f             	and    ecx,0x3f
c00256ab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00256af:	90                   	nop
c00256b0:	83 c4 0c             	add    esp,0xc
c00256b3:	c3                   	ret    

c00256b4 <PIC::ioWait()>:
c00256b4:	eb 00                	jmp    c00256b6 <PIC::ioWait()+0x2>
c00256b6:	eb 00                	jmp    c00256b8 <PIC::ioWait()+0x4>
c00256b8:	90                   	nop
c00256b9:	c3                   	ret    

c00256ba <PIC::getIRQReg(int)>:
c00256ba:	55                   	push   ebp
c00256bb:	89 e5                	mov    ebp,esp
c00256bd:	83 ec 10             	sub    esp,0x10
c00256c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256c3:	0f b6 c0             	movzx  eax,al
c00256c6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00256cc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00256cf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00256d2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00256d6:	ee                   	out    dx,al
c00256d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256da:	0f b6 c0             	movzx  eax,al
c00256dd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00256e3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00256e6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00256e9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00256ed:	ee                   	out    dx,al
c00256ee:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00256f4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00256f8:	89 c2                	mov    edx,eax
c00256fa:	ec                   	in     al,dx
c00256fb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00256fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025701:	0f b6 c0             	movzx  eax,al
c0025704:	c1 e0 08             	shl    eax,0x8
c0025707:	89 c1                	mov    ecx,eax
c0025709:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002570f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025713:	89 c2                	mov    edx,eax
c0025715:	ec                   	in     al,dx
c0025716:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025719:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002571c:	0f b6 c0             	movzx  eax,al
c002571f:	09 c8                	or     eax,ecx
c0025721:	c9                   	leave  
c0025722:	c3                   	ret    
c0025723:	90                   	nop

c0025724 <PIC::eoi(unsigned char)>:
c0025724:	55                   	push   ebp
c0025725:	89 e5                	mov    ebp,esp
c0025727:	83 ec 14             	sub    esp,0x14
c002572a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002572d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025730:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025734:	75 1e                	jne    c0025754 <PIC::eoi(unsigned char)+0x30>
c0025736:	6a 0b                	push   0xb
c0025738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002573b:	e8 7a ff ff ff       	call   c00256ba <PIC::getIRQReg(int)>
c0025740:	83 c4 08             	add    esp,0x8
c0025743:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025747:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002574b:	25 80 00 00 00       	and    eax,0x80
c0025750:	85 c0                	test   eax,eax
c0025752:	74 5f                	je     c00257b3 <PIC::eoi(unsigned char)+0x8f>
c0025754:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025758:	75 2d                	jne    c0025787 <PIC::eoi(unsigned char)+0x63>
c002575a:	6a 0b                	push   0xb
c002575c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002575f:	e8 56 ff ff ff       	call   c00256ba <PIC::getIRQReg(int)>
c0025764:	83 c4 08             	add    esp,0x8
c0025767:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002576b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002576e:	66 85 c0             	test   ax,ax
c0025771:	78 14                	js     c0025787 <PIC::eoi(unsigned char)+0x63>
c0025773:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025779:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002577d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025780:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025784:	ee                   	out    dx,al
c0025785:	eb 2d                	jmp    c00257b4 <PIC::eoi(unsigned char)+0x90>
c0025787:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002578b:	76 12                	jbe    c002579f <PIC::eoi(unsigned char)+0x7b>
c002578d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025793:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025797:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002579a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002579e:	ee                   	out    dx,al
c002579f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00257a5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00257a9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00257ac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00257b0:	ee                   	out    dx,al
c00257b1:	eb 01                	jmp    c00257b4 <PIC::eoi(unsigned char)+0x90>
c00257b3:	90                   	nop
c00257b4:	c9                   	leave  
c00257b5:	c3                   	ret    

c00257b6 <PIC::remap()>:
c00257b6:	55                   	push   ebp
c00257b7:	89 e5                	mov    ebp,esp
c00257b9:	83 ec 48             	sub    esp,0x48
c00257bc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00257c3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00257ca:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00257d0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00257d3:	89 c2                	mov    edx,eax
c00257d5:	ec                   	in     al,dx
c00257d6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00257d9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00257dc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00257df:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00257e5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00257e8:	89 c2                	mov    edx,eax
c00257ea:	ec                   	in     al,dx
c00257eb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00257ee:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00257f1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00257f4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00257fa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00257fe:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025801:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025804:	ee                   	out    dx,al
c0025805:	83 ec 0c             	sub    esp,0xc
c0025808:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002580b:	e8 a4 fe ff ff       	call   c00256b4 <PIC::ioWait()>
c0025810:	83 c4 10             	add    esp,0x10
c0025813:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025819:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002581d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025820:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025823:	ee                   	out    dx,al
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002582a:	e8 85 fe ff ff       	call   c00256b4 <PIC::ioWait()>
c002582f:	83 c4 10             	add    esp,0x10
c0025832:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025835:	0f b6 c0             	movzx  eax,al
c0025838:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002583e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025841:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025844:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025847:	ee                   	out    dx,al
c0025848:	83 ec 0c             	sub    esp,0xc
c002584b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002584e:	e8 61 fe ff ff       	call   c00256b4 <PIC::ioWait()>
c0025853:	83 c4 10             	add    esp,0x10
c0025856:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025859:	0f b6 c0             	movzx  eax,al
c002585c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025862:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025865:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025868:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002586b:	ee                   	out    dx,al
c002586c:	83 ec 0c             	sub    esp,0xc
c002586f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025872:	e8 3d fe ff ff       	call   c00256b4 <PIC::ioWait()>
c0025877:	83 c4 10             	add    esp,0x10
c002587a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025880:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025884:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025887:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002588a:	ee                   	out    dx,al
c002588b:	83 ec 0c             	sub    esp,0xc
c002588e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025891:	e8 1e fe ff ff       	call   c00256b4 <PIC::ioWait()>
c0025896:	83 c4 10             	add    esp,0x10
c0025899:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002589f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00258a3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00258a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258a9:	ee                   	out    dx,al
c00258aa:	83 ec 0c             	sub    esp,0xc
c00258ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b0:	e8 ff fd ff ff       	call   c00256b4 <PIC::ioWait()>
c00258b5:	83 c4 10             	add    esp,0x10
c00258b8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00258be:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00258c2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00258c5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00258c8:	ee                   	out    dx,al
c00258c9:	83 ec 0c             	sub    esp,0xc
c00258cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cf:	e8 e0 fd ff ff       	call   c00256b4 <PIC::ioWait()>
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00258dd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00258e1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00258e4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00258e7:	ee                   	out    dx,al
c00258e8:	83 ec 0c             	sub    esp,0xc
c00258eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ee:	e8 c1 fd ff ff       	call   c00256b4 <PIC::ioWait()>
c00258f3:	83 c4 10             	add    esp,0x10
c00258f6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00258fa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025900:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025903:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025906:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025909:	ee                   	out    dx,al
c002590a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002590e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025914:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025917:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002591a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002591d:	ee                   	out    dx,al
c002591e:	90                   	nop
c002591f:	c9                   	leave  
c0025920:	c3                   	ret    
c0025921:	90                   	nop

c0025922 <PIC::open(int, int, void*)>:
c0025922:	55                   	push   ebp
c0025923:	89 e5                	mov    ebp,esp
c0025925:	83 ec 18             	sub    esp,0x18
c0025928:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002592e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025932:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025935:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025939:	ee                   	out    dx,al
c002593a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025940:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025944:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025947:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002594b:	ee                   	out    dx,al
c002594c:	83 ec 0c             	sub    esp,0xc
c002594f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025952:	e8 5f fe ff ff       	call   c00257b6 <PIC::remap()>
c0025957:	83 c4 10             	add    esp,0x10
c002595a:	b8 00 00 00 00       	mov    eax,0x0
c002595f:	c9                   	leave  
c0025960:	c3                   	ret    
c0025961:	90                   	nop

c0025962 <APICTimer::close(int, int, void*)>:
c0025962:	b8 00 00 00 00       	mov    eax,0x0
c0025967:	c3                   	ret    

c0025968 <apicTimerHandler(regs*, void*)>:
c0025968:	83 ec 0c             	sub    esp,0xc
c002596b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002596f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025971:	99                   	cdq    
c0025972:	52                   	push   edx
c0025973:	50                   	push   eax
c0025974:	6a 00                	push   0x0
c0025976:	68 00 ca 9a 3b       	push   0x3b9aca00
c002597b:	e8 8c 07 00 00       	call   c002610c <__udivdi3>
c0025980:	83 c4 10             	add    esp,0x10
c0025983:	83 ec 08             	sub    esp,0x8
c0025986:	52                   	push   edx
c0025987:	50                   	push   eax
c0025988:	e8 d8 0c ff ff       	call   c0016665 <timerHandler(unsigned long long)>
c002598d:	83 c4 10             	add    esp,0x10
c0025990:	90                   	nop
c0025991:	83 c4 0c             	add    esp,0xc
c0025994:	c3                   	ret    
c0025995:	90                   	nop

c0025996 <APICTimer::write(int)>:
c0025996:	53                   	push   ebx
c0025997:	83 ec 28             	sub    esp,0x28
c002599a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002599e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00259a2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259a8:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c00259ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259b3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00259b9:	83 ec 0c             	sub    esp,0xc
c00259bc:	50                   	push   eax
c00259bd:	e8 de f4 ff ff       	call   c0024ea0 <APIC::getBase()>
c00259c2:	83 c4 10             	add    esp,0x10
c00259c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00259c9:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c00259ce:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c00259d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00259d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00259dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259e0:	05 e0 03 00 00       	add    eax,0x3e0
c00259e5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00259eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259ef:	05 80 03 00 00       	add    eax,0x380
c00259f4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00259fa:	fb                   	sti    
c00259fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a03:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025a08:	83 d2 00             	adc    edx,0x0
c0025a0b:	89 c1                	mov    ecx,eax
c0025a0d:	89 d3                	mov    ebx,edx
c0025a0f:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c0025a14:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c0025a1a:	39 c8                	cmp    eax,ecx
c0025a1c:	89 d0                	mov    eax,edx
c0025a1e:	19 d8                	sbb    eax,ebx
c0025a20:	73 02                	jae    c0025a24 <APICTimer::write(int)+0x8e>
c0025a22:	eb d7                	jmp    c00259fb <APICTimer::write(int)+0x65>
c0025a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a28:	05 20 03 00 00       	add    eax,0x320
c0025a2d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025a33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a37:	05 90 03 00 00       	add    eax,0x390
c0025a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a3e:	f7 d0                	not    eax
c0025a40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a4c:	ba 00 00 00 00       	mov    edx,0x0
c0025a51:	f7 f3                	div    ebx
c0025a53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025a5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a61:	0d 00 00 02 00       	or     eax,0x20000
c0025a66:	89 c2                	mov    edx,eax
c0025a68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a6c:	05 20 03 00 00       	add    eax,0x320
c0025a71:	89 10                	mov    DWORD PTR [eax],edx
c0025a73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a77:	05 e0 03 00 00       	add    eax,0x3e0
c0025a7c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a86:	05 80 03 00 00       	add    eax,0x380
c0025a8b:	89 c2                	mov    edx,eax
c0025a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a91:	89 02                	mov    DWORD PTR [edx],eax
c0025a93:	90                   	nop
c0025a94:	83 c4 28             	add    esp,0x28
c0025a97:	5b                   	pop    ebx
c0025a98:	c3                   	ret    
c0025a99:	90                   	nop

c0025a9a <APICTimer::open(int, int, void*)>:
c0025a9a:	57                   	push   edi
c0025a9b:	56                   	push   esi
c0025a9c:	53                   	push   ebx
c0025a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa3:	83 c0 24             	add    eax,0x24
c0025aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa8:	83 ec 08             	sub    esp,0x8
c0025aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab3:	ff d0                	call   eax
c0025ab5:	83 c4 10             	add    esp,0x10
c0025ab8:	a1 48 da 02 c0       	mov    eax,ds:0xc002da48
c0025abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ac3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ac9:	83 ec 0c             	sub    esp,0xc
c0025acc:	50                   	push   eax
c0025acd:	e8 ce f3 ff ff       	call   c0024ea0 <APIC::getBase()>
c0025ad2:	83 c4 10             	add    esp,0x10
c0025ad5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ae5:	0f b6 f8             	movzx  edi,al
c0025ae8:	89 d0                	mov    eax,edx
c0025aea:	ba 00 00 00 00       	mov    edx,0x0
c0025aef:	89 c1                	mov    ecx,eax
c0025af1:	80 e5 ff             	and    ch,0xff
c0025af4:	89 cb                	mov    ebx,ecx
c0025af6:	0f b6 f2             	movzx  esi,dl
c0025af9:	89 d8                	mov    eax,ebx
c0025afb:	89 f2                	mov    edx,esi
c0025afd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b01:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b04:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b08:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b0c:	83 e0 00             	and    eax,0x0
c0025b0f:	09 d0                	or     eax,edx
c0025b11:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b19:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b1f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b26:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b2c:	0f b6 d0             	movzx  edx,al
c0025b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b33:	83 c2 08             	add    edx,0x8
c0025b36:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b3a:	0f b6 c9             	movzx  ecx,cl
c0025b3d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025b43:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025b4f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025b5d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025b63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025b67:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025b6d:	83 ec 0c             	sub    esp,0xc
c0025b70:	51                   	push   ecx
c0025b71:	6a 01                	push   0x1
c0025b73:	68 68 59 02 c0       	push   0xc0025968
c0025b78:	52                   	push   edx
c0025b79:	50                   	push   eax
c0025b7a:	e8 17 e1 fe ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025b7f:	83 c4 20             	add    esp,0x20
c0025b82:	89 c2                	mov    edx,eax
c0025b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b88:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025b8e:	b8 00 00 00 00       	mov    eax,0x0
c0025b93:	5b                   	pop    ebx
c0025b94:	5e                   	pop    esi
c0025b95:	5f                   	pop    edi
c0025b96:	c3                   	ret    
c0025b97:	90                   	nop

c0025b98 <APICTimer::APICTimer()>:
c0025b98:	83 ec 0c             	sub    esp,0xc
c0025b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9f:	83 ec 08             	sub    esp,0x8
c0025ba2:	68 d4 c8 02 c0       	push   0xc002c8d4
c0025ba7:	50                   	push   eax
c0025ba8:	e8 29 0a ff ff       	call   c00165d6 <Timer::Timer(char const*)>
c0025bad:	83 c4 10             	add    esp,0x10
c0025bb0:	ba e8 c8 02 c0       	mov    edx,0xc002c8e8
c0025bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb9:	89 10                	mov    DWORD PTR [eax],edx
c0025bbb:	90                   	nop
c0025bbc:	83 c4 0c             	add    esp,0xc
c0025bbf:	c3                   	ret    

c0025bc0 <PIT::write(int)>:
c0025bc0:	83 ec 10             	sub    esp,0x10
c0025bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025bcb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025bd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025bd5:	a3 04 1e 03 c0       	mov    ds:0xc0031e04,eax
c0025bda:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025bdf:	99                   	cdq    
c0025be0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025be4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025be8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025bef:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025bf4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025bf8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025bfd:	ee                   	out    dx,al
c0025bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c02:	0f b6 c0             	movzx  eax,al
c0025c05:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025c0c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025c10:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025c14:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025c19:	ee                   	out    dx,al
c0025c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c1e:	c1 f8 08             	sar    eax,0x8
c0025c21:	0f b6 c0             	movzx  eax,al
c0025c24:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025c2b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025c2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025c33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025c38:	ee                   	out    dx,al
c0025c39:	90                   	nop
c0025c3a:	83 c4 10             	add    esp,0x10
c0025c3d:	c3                   	ret    

c0025c3e <pitHandler(regs*, void*)>:
c0025c3e:	83 ec 0c             	sub    esp,0xc
c0025c41:	a1 04 1e 03 c0       	mov    eax,ds:0xc0031e04
c0025c46:	99                   	cdq    
c0025c47:	52                   	push   edx
c0025c48:	50                   	push   eax
c0025c49:	6a 00                	push   0x0
c0025c4b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025c50:	e8 b7 04 00 00       	call   c002610c <__udivdi3>
c0025c55:	83 c4 10             	add    esp,0x10
c0025c58:	83 ec 08             	sub    esp,0x8
c0025c5b:	52                   	push   edx
c0025c5c:	50                   	push   eax
c0025c5d:	e8 03 0a ff ff       	call   c0016665 <timerHandler(unsigned long long)>
c0025c62:	83 c4 10             	add    esp,0x10
c0025c65:	90                   	nop
c0025c66:	83 c4 0c             	add    esp,0xc
c0025c69:	c3                   	ret    

c0025c6a <PIT::open(int, int, void*)>:
c0025c6a:	83 ec 0c             	sub    esp,0xc
c0025c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c73:	83 c0 24             	add    eax,0x24
c0025c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c78:	83 ec 08             	sub    esp,0x8
c0025c7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c83:	ff d0                	call   eax
c0025c85:	83 c4 10             	add    esp,0x10
c0025c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c8c:	83 ec 0c             	sub    esp,0xc
c0025c8f:	6a 00                	push   0x0
c0025c91:	6a 01                	push   0x1
c0025c93:	68 3e 5c 02 c0       	push   0xc0025c3e
c0025c98:	6a 00                	push   0x0
c0025c9a:	50                   	push   eax
c0025c9b:	e8 f6 df fe ff       	call   c0013c96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025ca0:	83 c4 20             	add    esp,0x20
c0025ca3:	89 c2                	mov    edx,eax
c0025ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025caf:	b8 00 00 00 00       	mov    eax,0x0
c0025cb4:	83 c4 0c             	add    esp,0xc
c0025cb7:	c3                   	ret    

c0025cb8 <PIT::close(int, int, void*)>:
c0025cb8:	83 ec 0c             	sub    esp,0xc
c0025cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ccd:	6a 01                	push   0x1
c0025ccf:	68 3e 5c 02 c0       	push   0xc0025c3e
c0025cd4:	6a 00                	push   0x0
c0025cd6:	50                   	push   eax
c0025cd7:	e8 f8 df fe ff       	call   c0013cd4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025cdc:	83 c4 10             	add    esp,0x10
c0025cdf:	b8 00 00 00 00       	mov    eax,0x0
c0025ce4:	83 c4 0c             	add    esp,0xc
c0025ce7:	c3                   	ret    

c0025ce8 <PIT::PIT()>:
c0025ce8:	83 ec 0c             	sub    esp,0xc
c0025ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cef:	83 ec 08             	sub    esp,0x8
c0025cf2:	68 10 c9 02 c0       	push   0xc002c910
c0025cf7:	50                   	push   eax
c0025cf8:	e8 d9 08 ff ff       	call   c00165d6 <Timer::Timer(char const*)>
c0025cfd:	83 c4 10             	add    esp,0x10
c0025d00:	ba 38 c9 02 c0       	mov    edx,0xc002c938
c0025d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d09:	89 10                	mov    DWORD PTR [eax],edx
c0025d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d15:	0f b6 d0             	movzx  edx,al
c0025d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d2d:	0f b6 d0             	movzx  edx,al
c0025d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d34:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d43:	8d 50 01             	lea    edx,[eax+0x1]
c0025d46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d4a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d50:	0f b6 d0             	movzx  edx,al
c0025d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d57:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d5b:	83 e1 3f             	and    ecx,0x3f
c0025d5e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d62:	90                   	nop
c0025d63:	83 c4 0c             	add    esp,0xc
c0025d66:	c3                   	ret    
c0025d67:	66 90                	xchg   ax,ax
c0025d69:	66 90                	xchg   ax,ax
c0025d6b:	66 90                	xchg   ax,ax
c0025d6d:	66 90                	xchg   ax,ax
c0025d6f:	90                   	nop

c0025d70 <avxDetect>:
c0025d70:	b8 00 00 00 00       	mov    eax,0x0
c0025d75:	c3                   	ret    

c0025d76 <avxSave>:
c0025d76:	c3                   	ret    

c0025d77 <avxLoad>:
c0025d77:	c3                   	ret    

c0025d78 <avxInit>:
c0025d78:	c3                   	ret    

c0025d79 <avxClose>:
c0025d79:	c3                   	ret    

c0025d7a <wouldSheSayYes>:
c0025d7a:	c3                   	ret    
c0025d7b:	49                   	dec    ecx
c0025d7c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025d80:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025d84:	75 20                	jne    c0025da6 <sseDetect.noSSE+0x1>
c0025d86:	4e                   	dec    esi
c0025d87:	79 61                	jns    c0025dea <x87Detect+0x14>
c0025d89:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025d8e:	66 90                	xchg   ax,ax

c0025d90 <absolutelyNoChanceInHell>:
c0025d90:	b8 01 00 00 00       	mov    eax,0x1
c0025d95:	0f a2                	cpuid  
c0025d97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025d9d:	74 06                	je     c0025da5 <sseDetect.noSSE>
c0025d9f:	b8 01 00 00 00       	mov    eax,0x1
c0025da4:	c3                   	ret    

c0025da5 <sseDetect.noSSE>:
c0025da5:	31 c0                	xor    eax,eax
c0025da7:	c3                   	ret    

c0025da8 <sseSave>:
c0025da8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025dad:	c3                   	ret    

c0025dae <sseLoad>:
c0025dae:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025db3:	c3                   	ret    

c0025db4 <sseInit>:
c0025db4:	e8 43 00 00 00       	call   c0025dfc <x87Init>
c0025db9:	0f 20 e0             	mov    eax,cr4
c0025dbc:	66 0d 00 06          	or     ax,0x600
c0025dc0:	0f 22 e0             	mov    cr4,eax
c0025dc3:	c3                   	ret    

c0025dc4 <sseClose>:
c0025dc4:	c3                   	ret    
c0025dc5:	66 90                	xchg   ax,ax
c0025dc7:	66 90                	xchg   ax,ax
c0025dc9:	66 90                	xchg   ax,ax
c0025dcb:	66 90                	xchg   ax,ax
c0025dcd:	66 90                	xchg   ax,ax
c0025dcf:	90                   	nop

c0025dd0 <value_37F>:
c0025dd0:	7f 03                	jg     c0025dd5 <value_37A+0x1>

c0025dd2 <value_37E>:
c0025dd2:	7e 03                	jle    c0025dd7 <x87Detect+0x1>

c0025dd4 <value_37A>:
c0025dd4:	7a 03                	jp     c0025dd9 <x87Detect+0x3>

c0025dd6 <x87Detect>:
c0025dd6:	b8 01 00 00 00       	mov    eax,0x1
c0025ddb:	0f a2                	cpuid  
c0025ddd:	f7 c2 01 00 00 00    	test   edx,0x1
c0025de3:	74 06                	je     c0025deb <x87Detect.nox87>
c0025de5:	b8 01 00 00 00       	mov    eax,0x1
c0025dea:	c3                   	ret    

c0025deb <x87Detect.nox87>:
c0025deb:	b8 00 00 00 00       	mov    eax,0x0
c0025df0:	c3                   	ret    

c0025df1 <x87Save>:
c0025df1:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025df6:	c3                   	ret    

c0025df7 <x87Load>:
c0025df7:	dd 64 24 08          	frstor [esp+0x8]
c0025dfb:	c3                   	ret    

c0025dfc <x87Init>:
c0025dfc:	9b db e3             	finit  
c0025dff:	0f 20 c0             	mov    eax,cr0
c0025e02:	66 25 fb ff          	and    ax,0xfffb
c0025e06:	66 0d 22 00          	or     ax,0x22
c0025e0a:	0f 22 c0             	mov    cr0,eax
c0025e0d:	0f 06                	clts   
c0025e0f:	d9 2d d4 5d 02 c0    	fldcw  WORD PTR ds:0xc0025dd4
c0025e15:	c3                   	ret    

c0025e16 <x87Close>:
c0025e16:	c3                   	ret    
c0025e17:	90                   	nop

c0025e18 <__do_global_ctors_aux>:
c0025e18:	a1 5c 89 02 c0       	mov    eax,ds:0xc002895c
c0025e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0025e20:	74 1a                	je     c0025e3c <__do_global_ctors_aux+0x24>
c0025e22:	55                   	push   ebp
c0025e23:	89 e5                	mov    ebp,esp
c0025e25:	53                   	push   ebx
c0025e26:	52                   	push   edx
c0025e27:	bb 5c 89 02 c0       	mov    ebx,0xc002895c
c0025e2c:	ff d0                	call   eax
c0025e2e:	83 eb 04             	sub    ebx,0x4
c0025e31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e33:	83 f8 ff             	cmp    eax,0xffffffff
c0025e36:	75 f4                	jne    c0025e2c <__do_global_ctors_aux+0x14>
c0025e38:	58                   	pop    eax
c0025e39:	5b                   	pop    ebx
c0025e3a:	5d                   	pop    ebp
c0025e3b:	c3                   	ret    
c0025e3c:	c3                   	ret    
c0025e3d:	66 90                	xchg   ax,ax
c0025e3f:	90                   	nop

c0025e40 <__divdi3>:
c0025e40:	55                   	push   ebp
c0025e41:	57                   	push   edi
c0025e42:	56                   	push   esi
c0025e43:	53                   	push   ebx
c0025e44:	83 ec 1c             	sub    esp,0x1c
c0025e47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025e4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025e52:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025e56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025e5a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025e5e:	85 db                	test   ebx,ebx
c0025e60:	0f 88 8e 00 00 00    	js     c0025ef4 <__divdi3+0xb4>
c0025e66:	89 dd                	mov    ebp,ebx
c0025e68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025e70:	89 d3                	mov    ebx,edx
c0025e72:	85 d2                	test   edx,edx
c0025e74:	79 0d                	jns    c0025e83 <__divdi3+0x43>
c0025e76:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025e7a:	f7 d8                	neg    eax
c0025e7c:	83 d2 00             	adc    edx,0x0
c0025e7f:	f7 da                	neg    edx
c0025e81:	89 d3                	mov    ebx,edx
c0025e83:	89 c7                	mov    edi,eax
c0025e85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025e88:	85 db                	test   ebx,ebx
c0025e8a:	75 48                	jne    c0025ed4 <__divdi3+0x94>
c0025e8c:	39 ef                	cmp    edi,ebp
c0025e8e:	76 24                	jbe    c0025eb4 <__divdi3+0x74>
c0025e90:	89 ea                	mov    edx,ebp
c0025e92:	f7 f7                	div    edi
c0025e94:	89 c1                	mov    ecx,eax
c0025e96:	31 f6                	xor    esi,esi
c0025e98:	89 c8                	mov    eax,ecx
c0025e9a:	89 f2                	mov    edx,esi
c0025e9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ea0:	85 c9                	test   ecx,ecx
c0025ea2:	74 07                	je     c0025eab <__divdi3+0x6b>
c0025ea4:	f7 d8                	neg    eax
c0025ea6:	83 d2 00             	adc    edx,0x0
c0025ea9:	f7 da                	neg    edx
c0025eab:	83 c4 1c             	add    esp,0x1c
c0025eae:	5b                   	pop    ebx
c0025eaf:	5e                   	pop    esi
c0025eb0:	5f                   	pop    edi
c0025eb1:	5d                   	pop    ebp
c0025eb2:	c3                   	ret    
c0025eb3:	90                   	nop
c0025eb4:	85 ff                	test   edi,edi
c0025eb6:	75 0b                	jne    c0025ec3 <__divdi3+0x83>
c0025eb8:	b8 01 00 00 00       	mov    eax,0x1
c0025ebd:	31 d2                	xor    edx,edx
c0025ebf:	f7 f3                	div    ebx
c0025ec1:	89 c7                	mov    edi,eax
c0025ec3:	31 d2                	xor    edx,edx
c0025ec5:	89 e8                	mov    eax,ebp
c0025ec7:	f7 f7                	div    edi
c0025ec9:	89 c6                	mov    esi,eax
c0025ecb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025ece:	f7 f7                	div    edi
c0025ed0:	89 c1                	mov    ecx,eax
c0025ed2:	eb c4                	jmp    c0025e98 <__divdi3+0x58>
c0025ed4:	39 eb                	cmp    ebx,ebp
c0025ed6:	77 3c                	ja     c0025f14 <__divdi3+0xd4>
c0025ed8:	0f bd f3             	bsr    esi,ebx
c0025edb:	83 f6 1f             	xor    esi,0x1f
c0025ede:	75 40                	jne    c0025f20 <__divdi3+0xe0>
c0025ee0:	39 eb                	cmp    ebx,ebp
c0025ee2:	72 09                	jb     c0025eed <__divdi3+0xad>
c0025ee4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025ee7:	0f 87 97 00 00 00    	ja     c0025f84 <__divdi3+0x144>
c0025eed:	b9 01 00 00 00       	mov    ecx,0x1
c0025ef2:	eb a4                	jmp    c0025e98 <__divdi3+0x58>
c0025ef4:	f7 d9                	neg    ecx
c0025ef6:	83 d3 00             	adc    ebx,0x0
c0025ef9:	f7 db                	neg    ebx
c0025efb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025efe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025f02:	89 dd                	mov    ebp,ebx
c0025f04:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025f0c:	e9 5f ff ff ff       	jmp    c0025e70 <__divdi3+0x30>
c0025f11:	8d 76 00             	lea    esi,[esi+0x0]
c0025f14:	31 f6                	xor    esi,esi
c0025f16:	31 c9                	xor    ecx,ecx
c0025f18:	e9 7b ff ff ff       	jmp    c0025e98 <__divdi3+0x58>
c0025f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f20:	b8 20 00 00 00       	mov    eax,0x20
c0025f25:	29 f0                	sub    eax,esi
c0025f27:	89 f1                	mov    ecx,esi
c0025f29:	d3 e3                	shl    ebx,cl
c0025f2b:	89 fa                	mov    edx,edi
c0025f2d:	88 c1                	mov    cl,al
c0025f2f:	d3 ea                	shr    edx,cl
c0025f31:	09 da                	or     edx,ebx
c0025f33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025f37:	89 f1                	mov    ecx,esi
c0025f39:	d3 e7                	shl    edi,cl
c0025f3b:	89 eb                	mov    ebx,ebp
c0025f3d:	88 c1                	mov    cl,al
c0025f3f:	d3 eb                	shr    ebx,cl
c0025f41:	89 f1                	mov    ecx,esi
c0025f43:	d3 e5                	shl    ebp,cl
c0025f45:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025f48:	88 c1                	mov    cl,al
c0025f4a:	d3 ea                	shr    edx,cl
c0025f4c:	09 d5                	or     ebp,edx
c0025f4e:	89 e8                	mov    eax,ebp
c0025f50:	89 da                	mov    edx,ebx
c0025f52:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025f56:	89 d3                	mov    ebx,edx
c0025f58:	89 c5                	mov    ebp,eax
c0025f5a:	f7 e7                	mul    edi
c0025f5c:	39 d3                	cmp    ebx,edx
c0025f5e:	72 18                	jb     c0025f78 <__divdi3+0x138>
c0025f60:	74 0a                	je     c0025f6c <__divdi3+0x12c>
c0025f62:	89 e9                	mov    ecx,ebp
c0025f64:	31 f6                	xor    esi,esi
c0025f66:	e9 2d ff ff ff       	jmp    c0025e98 <__divdi3+0x58>
c0025f6b:	90                   	nop
c0025f6c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025f6f:	89 f1                	mov    ecx,esi
c0025f71:	d3 e7                	shl    edi,cl
c0025f73:	39 c7                	cmp    edi,eax
c0025f75:	73 eb                	jae    c0025f62 <__divdi3+0x122>
c0025f77:	90                   	nop
c0025f78:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025f7b:	31 f6                	xor    esi,esi
c0025f7d:	e9 16 ff ff ff       	jmp    c0025e98 <__divdi3+0x58>
c0025f82:	66 90                	xchg   ax,ax
c0025f84:	31 c9                	xor    ecx,ecx
c0025f86:	e9 0d ff ff ff       	jmp    c0025e98 <__divdi3+0x58>
c0025f8b:	90                   	nop

c0025f8c <__moddi3>:
c0025f8c:	55                   	push   ebp
c0025f8d:	57                   	push   edi
c0025f8e:	56                   	push   esi
c0025f8f:	53                   	push   ebx
c0025f90:	83 ec 2c             	sub    esp,0x2c
c0025f93:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025f97:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025f9b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025f9f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025fa3:	85 db                	test   ebx,ebx
c0025fa5:	0f 88 85 00 00 00    	js     c0026030 <__moddi3+0xa4>
c0025fab:	89 de                	mov    esi,ebx
c0025fad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025fb5:	89 d7                	mov    edi,edx
c0025fb7:	85 d2                	test   edx,edx
c0025fb9:	79 09                	jns    c0025fc4 <__moddi3+0x38>
c0025fbb:	f7 d8                	neg    eax
c0025fbd:	83 d2 00             	adc    edx,0x0
c0025fc0:	f7 da                	neg    edx
c0025fc2:	89 d7                	mov    edi,edx
c0025fc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025fc8:	89 cd                	mov    ebp,ecx
c0025fca:	85 ff                	test   edi,edi
c0025fcc:	75 52                	jne    c0026020 <__moddi3+0x94>
c0025fce:	89 c3                	mov    ebx,eax
c0025fd0:	39 f0                	cmp    eax,esi
c0025fd2:	76 24                	jbe    c0025ff8 <__moddi3+0x6c>
c0025fd4:	89 c8                	mov    eax,ecx
c0025fd6:	89 f2                	mov    edx,esi
c0025fd8:	f7 f3                	div    ebx
c0025fda:	89 d6                	mov    esi,edx
c0025fdc:	89 f0                	mov    eax,esi
c0025fde:	31 d2                	xor    edx,edx
c0025fe0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fe4:	85 c9                	test   ecx,ecx
c0025fe6:	74 07                	je     c0025fef <__moddi3+0x63>
c0025fe8:	f7 d8                	neg    eax
c0025fea:	83 d2 00             	adc    edx,0x0
c0025fed:	f7 da                	neg    edx
c0025fef:	83 c4 2c             	add    esp,0x2c
c0025ff2:	5b                   	pop    ebx
c0025ff3:	5e                   	pop    esi
c0025ff4:	5f                   	pop    edi
c0025ff5:	5d                   	pop    ebp
c0025ff6:	c3                   	ret    
c0025ff7:	90                   	nop
c0025ff8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0025ffc:	85 db                	test   ebx,ebx
c0025ffe:	75 0d                	jne    c002600d <__moddi3+0x81>
c0026000:	b8 01 00 00 00       	mov    eax,0x1
c0026005:	31 d2                	xor    edx,edx
c0026007:	f7 f7                	div    edi
c0026009:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002600d:	89 f0                	mov    eax,esi
c002600f:	31 d2                	xor    edx,edx
c0026011:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026015:	f7 f7                	div    edi
c0026017:	89 e8                	mov    eax,ebp
c0026019:	f7 f7                	div    edi
c002601b:	89 d6                	mov    esi,edx
c002601d:	eb bd                	jmp    c0025fdc <__moddi3+0x50>
c002601f:	90                   	nop
c0026020:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026024:	39 f7                	cmp    edi,esi
c0026026:	76 20                	jbe    c0026048 <__moddi3+0xbc>
c0026028:	89 c8                	mov    eax,ecx
c002602a:	89 f2                	mov    edx,esi
c002602c:	eb b2                	jmp    c0025fe0 <__moddi3+0x54>
c002602e:	66 90                	xchg   ax,ax
c0026030:	f7 d9                	neg    ecx
c0026032:	83 d3 00             	adc    ebx,0x0
c0026035:	f7 db                	neg    ebx
c0026037:	89 de                	mov    esi,ebx
c0026039:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026041:	e9 6f ff ff ff       	jmp    c0025fb5 <__moddi3+0x29>
c0026046:	66 90                	xchg   ax,ax
c0026048:	0f bd c7             	bsr    eax,edi
c002604b:	83 f0 1f             	xor    eax,0x1f
c002604e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026052:	75 24                	jne    c0026078 <__moddi3+0xec>
c0026054:	39 f7                	cmp    edi,esi
c0026056:	72 06                	jb     c002605e <__moddi3+0xd2>
c0026058:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002605c:	77 0c                	ja     c002606a <__moddi3+0xde>
c002605e:	89 e9                	mov    ecx,ebp
c0026060:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026064:	19 fe                	sbb    esi,edi
c0026066:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002606a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002606e:	89 f2                	mov    edx,esi
c0026070:	e9 6b ff ff ff       	jmp    c0025fe0 <__moddi3+0x54>
c0026075:	8d 76 00             	lea    esi,[esi+0x0]
c0026078:	b8 20 00 00 00       	mov    eax,0x20
c002607d:	89 c2                	mov    edx,eax
c002607f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026083:	29 da                	sub    edx,ebx
c0026085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026089:	88 d9                	mov    cl,bl
c002608b:	d3 e7                	shl    edi,cl
c002608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026091:	88 d1                	mov    cl,dl
c0026093:	d3 e8                	shr    eax,cl
c0026095:	09 c7                	or     edi,eax
c0026097:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002609b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002609f:	89 d8                	mov    eax,ebx
c00260a1:	88 d9                	mov    cl,bl
c00260a3:	d3 e7                	shl    edi,cl
c00260a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00260a9:	89 f3                	mov    ebx,esi
c00260ab:	88 d1                	mov    cl,dl
c00260ad:	d3 eb                	shr    ebx,cl
c00260af:	89 c7                	mov    edi,eax
c00260b1:	88 c1                	mov    cl,al
c00260b3:	d3 e6                	shl    esi,cl
c00260b5:	89 e8                	mov    eax,ebp
c00260b7:	88 d1                	mov    cl,dl
c00260b9:	d3 e8                	shr    eax,cl
c00260bb:	09 f0                	or     eax,esi
c00260bd:	89 f9                	mov    ecx,edi
c00260bf:	d3 e5                	shl    ebp,cl
c00260c1:	89 da                	mov    edx,ebx
c00260c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00260c7:	89 d3                	mov    ebx,edx
c00260c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00260cd:	89 c6                	mov    esi,eax
c00260cf:	89 d1                	mov    ecx,edx
c00260d1:	39 d3                	cmp    ebx,edx
c00260d3:	72 27                	jb     c00260fc <__moddi3+0x170>
c00260d5:	74 21                	je     c00260f8 <__moddi3+0x16c>
c00260d7:	29 f5                	sub    ebp,esi
c00260d9:	19 cb                	sbb    ebx,ecx
c00260db:	89 de                	mov    esi,ebx
c00260dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00260e1:	d3 e6                	shl    esi,cl
c00260e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00260e7:	89 f9                	mov    ecx,edi
c00260e9:	d3 ed                	shr    ebp,cl
c00260eb:	09 ee                	or     esi,ebp
c00260ed:	89 f0                	mov    eax,esi
c00260ef:	d3 eb                	shr    ebx,cl
c00260f1:	89 da                	mov    edx,ebx
c00260f3:	e9 e8 fe ff ff       	jmp    c0025fe0 <__moddi3+0x54>
c00260f8:	39 c5                	cmp    ebp,eax
c00260fa:	73 db                	jae    c00260d7 <__moddi3+0x14b>
c00260fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026100:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026104:	89 d1                	mov    ecx,edx
c0026106:	89 c6                	mov    esi,eax
c0026108:	eb cd                	jmp    c00260d7 <__moddi3+0x14b>
c002610a:	66 90                	xchg   ax,ax

c002610c <__udivdi3>:
c002610c:	55                   	push   ebp
c002610d:	57                   	push   edi
c002610e:	56                   	push   esi
c002610f:	53                   	push   ebx
c0026110:	83 ec 1c             	sub    esp,0x1c
c0026113:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026117:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002611b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002611f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026123:	85 d2                	test   edx,edx
c0026125:	75 41                	jne    c0026168 <__udivdi3+0x5c>
c0026127:	39 f7                	cmp    edi,esi
c0026129:	76 15                	jbe    c0026140 <__udivdi3+0x34>
c002612b:	89 e8                	mov    eax,ebp
c002612d:	89 f2                	mov    edx,esi
c002612f:	f7 f7                	div    edi
c0026131:	31 db                	xor    ebx,ebx
c0026133:	89 da                	mov    edx,ebx
c0026135:	83 c4 1c             	add    esp,0x1c
c0026138:	5b                   	pop    ebx
c0026139:	5e                   	pop    esi
c002613a:	5f                   	pop    edi
c002613b:	5d                   	pop    ebp
c002613c:	c3                   	ret    
c002613d:	8d 76 00             	lea    esi,[esi+0x0]
c0026140:	89 f9                	mov    ecx,edi
c0026142:	85 ff                	test   edi,edi
c0026144:	75 0b                	jne    c0026151 <__udivdi3+0x45>
c0026146:	b8 01 00 00 00       	mov    eax,0x1
c002614b:	31 d2                	xor    edx,edx
c002614d:	f7 f7                	div    edi
c002614f:	89 c1                	mov    ecx,eax
c0026151:	31 d2                	xor    edx,edx
c0026153:	89 f0                	mov    eax,esi
c0026155:	f7 f1                	div    ecx
c0026157:	89 c3                	mov    ebx,eax
c0026159:	89 e8                	mov    eax,ebp
c002615b:	f7 f1                	div    ecx
c002615d:	89 da                	mov    edx,ebx
c002615f:	83 c4 1c             	add    esp,0x1c
c0026162:	5b                   	pop    ebx
c0026163:	5e                   	pop    esi
c0026164:	5f                   	pop    edi
c0026165:	5d                   	pop    ebp
c0026166:	c3                   	ret    
c0026167:	90                   	nop
c0026168:	39 f2                	cmp    edx,esi
c002616a:	77 1c                	ja     c0026188 <__udivdi3+0x7c>
c002616c:	0f bd da             	bsr    ebx,edx
c002616f:	83 f3 1f             	xor    ebx,0x1f
c0026172:	75 24                	jne    c0026198 <__udivdi3+0x8c>
c0026174:	39 f2                	cmp    edx,esi
c0026176:	72 08                	jb     c0026180 <__udivdi3+0x74>
c0026178:	39 ef                	cmp    edi,ebp
c002617a:	0f 87 84 00 00 00    	ja     c0026204 <__udivdi3+0xf8>
c0026180:	b8 01 00 00 00       	mov    eax,0x1
c0026185:	eb ac                	jmp    c0026133 <__udivdi3+0x27>
c0026187:	90                   	nop
c0026188:	31 db                	xor    ebx,ebx
c002618a:	31 c0                	xor    eax,eax
c002618c:	89 da                	mov    edx,ebx
c002618e:	83 c4 1c             	add    esp,0x1c
c0026191:	5b                   	pop    ebx
c0026192:	5e                   	pop    esi
c0026193:	5f                   	pop    edi
c0026194:	5d                   	pop    ebp
c0026195:	c3                   	ret    
c0026196:	66 90                	xchg   ax,ax
c0026198:	b8 20 00 00 00       	mov    eax,0x20
c002619d:	29 d8                	sub    eax,ebx
c002619f:	88 d9                	mov    cl,bl
c00261a1:	d3 e2                	shl    edx,cl
c00261a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00261a7:	89 fa                	mov    edx,edi
c00261a9:	88 c1                	mov    cl,al
c00261ab:	d3 ea                	shr    edx,cl
c00261ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00261b1:	09 d1                	or     ecx,edx
c00261b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00261b7:	88 d9                	mov    cl,bl
c00261b9:	d3 e7                	shl    edi,cl
c00261bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00261bf:	89 f7                	mov    edi,esi
c00261c1:	88 c1                	mov    cl,al
c00261c3:	d3 ef                	shr    edi,cl
c00261c5:	88 d9                	mov    cl,bl
c00261c7:	d3 e6                	shl    esi,cl
c00261c9:	89 ea                	mov    edx,ebp
c00261cb:	88 c1                	mov    cl,al
c00261cd:	d3 ea                	shr    edx,cl
c00261cf:	09 d6                	or     esi,edx
c00261d1:	89 f0                	mov    eax,esi
c00261d3:	89 fa                	mov    edx,edi
c00261d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00261d9:	89 d7                	mov    edi,edx
c00261db:	89 c6                	mov    esi,eax
c00261dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00261e1:	39 d7                	cmp    edi,edx
c00261e3:	72 13                	jb     c00261f8 <__udivdi3+0xec>
c00261e5:	74 09                	je     c00261f0 <__udivdi3+0xe4>
c00261e7:	89 f0                	mov    eax,esi
c00261e9:	31 db                	xor    ebx,ebx
c00261eb:	e9 43 ff ff ff       	jmp    c0026133 <__udivdi3+0x27>
c00261f0:	88 d9                	mov    cl,bl
c00261f2:	d3 e5                	shl    ebp,cl
c00261f4:	39 c5                	cmp    ebp,eax
c00261f6:	73 ef                	jae    c00261e7 <__udivdi3+0xdb>
c00261f8:	8d 46 ff             	lea    eax,[esi-0x1]
c00261fb:	31 db                	xor    ebx,ebx
c00261fd:	e9 31 ff ff ff       	jmp    c0026133 <__udivdi3+0x27>
c0026202:	66 90                	xchg   ax,ax
c0026204:	31 c0                	xor    eax,eax
c0026206:	e9 28 ff ff ff       	jmp    c0026133 <__udivdi3+0x27>
c002620b:	90                   	nop

c002620c <__umoddi3>:
c002620c:	55                   	push   ebp
c002620d:	57                   	push   edi
c002620e:	56                   	push   esi
c002620f:	53                   	push   ebx
c0026210:	83 ec 1c             	sub    esp,0x1c
c0026213:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026217:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002621b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002621f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026223:	89 da                	mov    edx,ebx
c0026225:	85 c0                	test   eax,eax
c0026227:	75 37                	jne    c0026260 <__umoddi3+0x54>
c0026229:	39 df                	cmp    edi,ebx
c002622b:	76 13                	jbe    c0026240 <__umoddi3+0x34>
c002622d:	89 f0                	mov    eax,esi
c002622f:	f7 f7                	div    edi
c0026231:	89 d0                	mov    eax,edx
c0026233:	31 d2                	xor    edx,edx
c0026235:	83 c4 1c             	add    esp,0x1c
c0026238:	5b                   	pop    ebx
c0026239:	5e                   	pop    esi
c002623a:	5f                   	pop    edi
c002623b:	5d                   	pop    ebp
c002623c:	c3                   	ret    
c002623d:	8d 76 00             	lea    esi,[esi+0x0]
c0026240:	89 fd                	mov    ebp,edi
c0026242:	85 ff                	test   edi,edi
c0026244:	75 0b                	jne    c0026251 <__umoddi3+0x45>
c0026246:	b8 01 00 00 00       	mov    eax,0x1
c002624b:	31 d2                	xor    edx,edx
c002624d:	f7 f7                	div    edi
c002624f:	89 c5                	mov    ebp,eax
c0026251:	89 d8                	mov    eax,ebx
c0026253:	31 d2                	xor    edx,edx
c0026255:	f7 f5                	div    ebp
c0026257:	89 f0                	mov    eax,esi
c0026259:	f7 f5                	div    ebp
c002625b:	89 d0                	mov    eax,edx
c002625d:	eb d4                	jmp    c0026233 <__umoddi3+0x27>
c002625f:	90                   	nop
c0026260:	89 f1                	mov    ecx,esi
c0026262:	39 d8                	cmp    eax,ebx
c0026264:	76 0a                	jbe    c0026270 <__umoddi3+0x64>
c0026266:	89 f0                	mov    eax,esi
c0026268:	83 c4 1c             	add    esp,0x1c
c002626b:	5b                   	pop    ebx
c002626c:	5e                   	pop    esi
c002626d:	5f                   	pop    edi
c002626e:	5d                   	pop    ebp
c002626f:	c3                   	ret    
c0026270:	0f bd e8             	bsr    ebp,eax
c0026273:	83 f5 1f             	xor    ebp,0x1f
c0026276:	75 1c                	jne    c0026294 <__umoddi3+0x88>
c0026278:	39 d8                	cmp    eax,ebx
c002627a:	72 04                	jb     c0026280 <__umoddi3+0x74>
c002627c:	39 f7                	cmp    edi,esi
c002627e:	77 08                	ja     c0026288 <__umoddi3+0x7c>
c0026280:	89 da                	mov    edx,ebx
c0026282:	29 fe                	sub    esi,edi
c0026284:	19 c2                	sbb    edx,eax
c0026286:	89 f1                	mov    ecx,esi
c0026288:	89 c8                	mov    eax,ecx
c002628a:	83 c4 1c             	add    esp,0x1c
c002628d:	5b                   	pop    ebx
c002628e:	5e                   	pop    esi
c002628f:	5f                   	pop    edi
c0026290:	5d                   	pop    ebp
c0026291:	c3                   	ret    
c0026292:	66 90                	xchg   ax,ax
c0026294:	ba 20 00 00 00       	mov    edx,0x20
c0026299:	29 ea                	sub    edx,ebp
c002629b:	89 e9                	mov    ecx,ebp
c002629d:	d3 e0                	shl    eax,cl
c002629f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262a3:	89 f8                	mov    eax,edi
c00262a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00262a9:	88 d1                	mov    cl,dl
c00262ab:	d3 e8                	shr    eax,cl
c00262ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262b1:	09 c1                	or     ecx,eax
c00262b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00262b7:	89 e9                	mov    ecx,ebp
c00262b9:	d3 e7                	shl    edi,cl
c00262bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00262bf:	89 d8                	mov    eax,ebx
c00262c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00262c5:	88 d1                	mov    cl,dl
c00262c7:	d3 e8                	shr    eax,cl
c00262c9:	89 c7                	mov    edi,eax
c00262cb:	89 e9                	mov    ecx,ebp
c00262cd:	d3 e3                	shl    ebx,cl
c00262cf:	89 f0                	mov    eax,esi
c00262d1:	88 d1                	mov    cl,dl
c00262d3:	d3 e8                	shr    eax,cl
c00262d5:	09 d8                	or     eax,ebx
c00262d7:	89 e9                	mov    ecx,ebp
c00262d9:	d3 e6                	shl    esi,cl
c00262db:	89 f3                	mov    ebx,esi
c00262dd:	89 fa                	mov    edx,edi
c00262df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00262e3:	89 d1                	mov    ecx,edx
c00262e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00262e9:	89 c6                	mov    esi,eax
c00262eb:	89 d7                	mov    edi,edx
c00262ed:	39 d1                	cmp    ecx,edx
c00262ef:	72 27                	jb     c0026318 <__umoddi3+0x10c>
c00262f1:	74 21                	je     c0026314 <__umoddi3+0x108>
c00262f3:	89 ca                	mov    edx,ecx
c00262f5:	29 f3                	sub    ebx,esi
c00262f7:	19 fa                	sbb    edx,edi
c00262f9:	89 d0                	mov    eax,edx
c00262fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00262ff:	d3 e0                	shl    eax,cl
c0026301:	89 e9                	mov    ecx,ebp
c0026303:	d3 eb                	shr    ebx,cl
c0026305:	09 d8                	or     eax,ebx
c0026307:	d3 ea                	shr    edx,cl
c0026309:	83 c4 1c             	add    esp,0x1c
c002630c:	5b                   	pop    ebx
c002630d:	5e                   	pop    esi
c002630e:	5f                   	pop    edi
c002630f:	5d                   	pop    ebp
c0026310:	c3                   	ret    
c0026311:	8d 76 00             	lea    esi,[esi+0x0]
c0026314:	39 c3                	cmp    ebx,eax
c0026316:	73 db                	jae    c00262f3 <__umoddi3+0xe7>
c0026318:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002631c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026320:	89 d7                	mov    edi,edx
c0026322:	89 c6                	mov    esi,eax
c0026324:	eb cd                	jmp    c00262f3 <__umoddi3+0xe7>

c0026326 <__addsf3>:
c0026326:	55                   	push   ebp
c0026327:	89 e5                	mov    ebp,esp
c0026329:	57                   	push   edi
c002632a:	56                   	push   esi
c002632b:	53                   	push   ebx
c002632c:	83 ec 08             	sub    esp,0x8
c002632f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026332:	89 fa                	mov    edx,edi
c0026334:	89 f8                	mov    eax,edi
c0026336:	c1 f8 17             	sar    eax,0x17
c0026339:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002633c:	c1 e2 08             	shl    edx,0x8
c002633f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026345:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026348:	89 de                	mov    esi,ebx
c002634a:	c1 fe 17             	sar    esi,0x17
c002634d:	c1 e3 08             	shl    ebx,0x8
c0026350:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026356:	31 f0                	xor    eax,esi
c0026358:	0f 88 3b 01 00 00    	js     c0026499 <__addsf3+0x173>
c002635e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026361:	29 f1                	sub    ecx,esi
c0026363:	85 c9                	test   ecx,ecx
c0026365:	7e 54                	jle    c00263bb <__addsf3+0x95>
c0026367:	89 f0                	mov    eax,esi
c0026369:	84 c0                	test   al,al
c002636b:	75 10                	jne    c002637d <__addsf3+0x57>
c002636d:	85 db                	test   ebx,ebx
c002636f:	0f 84 aa 02 00 00    	je     c002661f <__addsf3+0x2f9>
c0026375:	49                   	dec    ecx
c0026376:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026379:	74 38                	je     c00263b3 <__addsf3+0x8d>
c002637b:	eb 13                	jmp    c0026390 <__addsf3+0x6a>
c002637d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026380:	f7 d0                	not    eax
c0026382:	84 c0                	test   al,al
c0026384:	0f 84 95 02 00 00    	je     c002661f <__addsf3+0x2f9>
c002638a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026390:	83 f9 1f             	cmp    ecx,0x1f
c0026393:	0f 8f 86 02 00 00    	jg     c002661f <__addsf3+0x2f9>
c0026399:	89 de                	mov    esi,ebx
c002639b:	d3 ee                	shr    esi,cl
c002639d:	b8 20 00 00 00       	mov    eax,0x20
c00263a2:	29 c8                	sub    eax,ecx
c00263a4:	89 c1                	mov    ecx,eax
c00263a6:	d3 e3                	shl    ebx,cl
c00263a8:	31 c0                	xor    eax,eax
c00263aa:	85 db                	test   ebx,ebx
c00263ac:	0f 95 c0             	setne  al
c00263af:	09 f0                	or     eax,esi
c00263b1:	01 d0                	add    eax,edx
c00263b3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00263b6:	e9 b6 00 00 00       	jmp    c0026471 <__addsf3+0x14b>
c00263bb:	74 5c                	je     c0026419 <__addsf3+0xf3>
c00263bd:	89 f1                	mov    ecx,esi
c00263bf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00263c2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00263c5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00263c9:	75 14                	jne    c00263df <__addsf3+0xb9>
c00263cb:	85 d2                	test   edx,edx
c00263cd:	0f 84 4c 02 00 00    	je     c002661f <__addsf3+0x2f9>
c00263d3:	49                   	dec    ecx
c00263d4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00263d7:	0f 84 94 00 00 00    	je     c0026471 <__addsf3+0x14b>
c00263dd:	eb 12                	jmp    c00263f1 <__addsf3+0xcb>
c00263df:	89 f0                	mov    eax,esi
c00263e1:	f7 d0                	not    eax
c00263e3:	84 c0                	test   al,al
c00263e5:	0f 84 34 02 00 00    	je     c002661f <__addsf3+0x2f9>
c00263eb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00263f1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00263f4:	83 f9 1f             	cmp    ecx,0x1f
c00263f7:	0f 8f 22 02 00 00    	jg     c002661f <__addsf3+0x2f9>
c00263fd:	89 d7                	mov    edi,edx
c00263ff:	d3 ef                	shr    edi,cl
c0026401:	b8 20 00 00 00       	mov    eax,0x20
c0026406:	29 c8                	sub    eax,ecx
c0026408:	89 c1                	mov    ecx,eax
c002640a:	d3 e2                	shl    edx,cl
c002640c:	31 c0                	xor    eax,eax
c002640e:	85 d2                	test   edx,edx
c0026410:	0f 95 c0             	setne  al
c0026413:	09 f8                	or     eax,edi
c0026415:	01 d8                	add    eax,ebx
c0026417:	eb 58                	jmp    c0026471 <__addsf3+0x14b>
c0026419:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002641c:	8d 70 01             	lea    esi,[eax+0x1]
c002641f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026425:	75 32                	jne    c0026459 <__addsf3+0x133>
c0026427:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002642b:	75 1f                	jne    c002644c <__addsf3+0x126>
c002642d:	85 d2                	test   edx,edx
c002642f:	0f 84 e0 01 00 00    	je     c0026615 <__addsf3+0x2ef>
c0026435:	85 db                	test   ebx,ebx
c0026437:	0f 84 e2 01 00 00    	je     c002661f <__addsf3+0x2f9>
c002643d:	89 d0                	mov    eax,edx
c002643f:	01 d8                	add    eax,ebx
c0026441:	0f 89 a9 01 00 00    	jns    c00265f0 <__addsf3+0x2ca>
c0026447:	e9 9d 01 00 00       	jmp    c00265e9 <__addsf3+0x2c3>
c002644c:	85 d2                	test   edx,edx
c002644e:	0f 85 cb 01 00 00    	jne    c002661f <__addsf3+0x2f9>
c0026454:	e9 bc 01 00 00       	jmp    c0026615 <__addsf3+0x2ef>
c0026459:	31 c0                	xor    eax,eax
c002645b:	89 f1                	mov    ecx,esi
c002645d:	f7 d1                	not    ecx
c002645f:	84 c9                	test   cl,cl
c0026461:	0f 84 90 01 00 00    	je     c00265f7 <__addsf3+0x2d1>
c0026467:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002646a:	d1 e8                	shr    eax,1
c002646c:	e9 86 01 00 00       	jmp    c00265f7 <__addsf3+0x2d1>
c0026471:	85 c0                	test   eax,eax
c0026473:	0f 89 7e 01 00 00    	jns    c00265f7 <__addsf3+0x2d1>
c0026479:	46                   	inc    esi
c002647a:	89 f2                	mov    edx,esi
c002647c:	f7 d2                	not    edx
c002647e:	84 d2                	test   dl,dl
c0026480:	0f 84 6f 01 00 00    	je     c00265f5 <__addsf3+0x2cf>
c0026486:	89 c2                	mov    edx,eax
c0026488:	83 e2 01             	and    edx,0x1
c002648b:	d1 e8                	shr    eax,1
c002648d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026492:	09 d0                	or     eax,edx
c0026494:	e9 5e 01 00 00       	jmp    c00265f7 <__addsf3+0x2d1>
c0026499:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002649d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264a0:	89 f0                	mov    eax,esi
c00264a2:	0f b6 c0             	movzx  eax,al
c00264a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264a8:	29 c1                	sub    ecx,eax
c00264aa:	85 c9                	test   ecx,ecx
c00264ac:	7e 55                	jle    c0026503 <__addsf3+0x1dd>
c00264ae:	85 c0                	test   eax,eax
c00264b0:	75 11                	jne    c00264c3 <__addsf3+0x19d>
c00264b2:	85 db                	test   ebx,ebx
c00264b4:	0f 84 65 01 00 00    	je     c002661f <__addsf3+0x2f9>
c00264ba:	49                   	dec    ecx
c00264bb:	75 19                	jne    c00264d6 <__addsf3+0x1b0>
c00264bd:	89 d0                	mov    eax,edx
c00264bf:	29 d8                	sub    eax,ebx
c00264c1:	eb 38                	jmp    c00264fb <__addsf3+0x1d5>
c00264c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264c6:	f7 d0                	not    eax
c00264c8:	84 c0                	test   al,al
c00264ca:	0f 84 4f 01 00 00    	je     c002661f <__addsf3+0x2f9>
c00264d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00264d6:	83 f9 1f             	cmp    ecx,0x1f
c00264d9:	0f 8f 40 01 00 00    	jg     c002661f <__addsf3+0x2f9>
c00264df:	89 de                	mov    esi,ebx
c00264e1:	d3 ee                	shr    esi,cl
c00264e3:	b8 20 00 00 00       	mov    eax,0x20
c00264e8:	29 c8                	sub    eax,ecx
c00264ea:	89 c1                	mov    ecx,eax
c00264ec:	d3 e3                	shl    ebx,cl
c00264ee:	31 c0                	xor    eax,eax
c00264f0:	85 db                	test   ebx,ebx
c00264f2:	0f 95 c0             	setne  al
c00264f5:	09 f0                	or     eax,esi
c00264f7:	29 c2                	sub    edx,eax
c00264f9:	89 d0                	mov    eax,edx
c00264fb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00264fe:	e9 af 00 00 00       	jmp    c00265b2 <__addsf3+0x28c>
c0026503:	74 5c                	je     c0026561 <__addsf3+0x23b>
c0026505:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026508:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002650b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002650f:	75 14                	jne    c0026525 <__addsf3+0x1ff>
c0026511:	85 d2                	test   edx,edx
c0026513:	0f 84 06 01 00 00    	je     c002661f <__addsf3+0x2f9>
c0026519:	48                   	dec    eax
c002651a:	75 1b                	jne    c0026537 <__addsf3+0x211>
c002651c:	89 d8                	mov    eax,ebx
c002651e:	29 d0                	sub    eax,edx
c0026520:	e9 8d 00 00 00       	jmp    c00265b2 <__addsf3+0x28c>
c0026525:	89 f1                	mov    ecx,esi
c0026527:	f7 d1                	not    ecx
c0026529:	84 c9                	test   cl,cl
c002652b:	0f 84 ee 00 00 00    	je     c002661f <__addsf3+0x2f9>
c0026531:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026537:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002653a:	83 f8 1f             	cmp    eax,0x1f
c002653d:	0f 8f dc 00 00 00    	jg     c002661f <__addsf3+0x2f9>
c0026543:	89 d7                	mov    edi,edx
c0026545:	88 c1                	mov    cl,al
c0026547:	d3 ef                	shr    edi,cl
c0026549:	b9 20 00 00 00       	mov    ecx,0x20
c002654e:	29 c1                	sub    ecx,eax
c0026550:	d3 e2                	shl    edx,cl
c0026552:	31 c0                	xor    eax,eax
c0026554:	85 d2                	test   edx,edx
c0026556:	0f 95 c0             	setne  al
c0026559:	09 f8                	or     eax,edi
c002655b:	29 c3                	sub    ebx,eax
c002655d:	89 d8                	mov    eax,ebx
c002655f:	eb 51                	jmp    c00265b2 <__addsf3+0x28c>
c0026561:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026564:	40                   	inc    eax
c0026565:	a8 fe                	test   al,0xfe
c0026567:	75 3d                	jne    c00265a6 <__addsf3+0x280>
c0026569:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002656d:	0f 85 a7 00 00 00    	jne    c002661a <__addsf3+0x2f4>
c0026573:	85 d2                	test   edx,edx
c0026575:	75 12                	jne    c0026589 <__addsf3+0x263>
c0026577:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002657a:	85 db                	test   ebx,ebx
c002657c:	0f 85 9d 00 00 00    	jne    c002661f <__addsf3+0x2f9>
c0026582:	31 ff                	xor    edi,edi
c0026584:	e9 96 00 00 00       	jmp    c002661f <__addsf3+0x2f9>
c0026589:	85 db                	test   ebx,ebx
c002658b:	0f 84 8e 00 00 00    	je     c002661f <__addsf3+0x2f9>
c0026591:	89 d0                	mov    eax,edx
c0026593:	29 d8                	sub    eax,ebx
c0026595:	79 06                	jns    c002659d <__addsf3+0x277>
c0026597:	89 d8                	mov    eax,ebx
c0026599:	29 d0                	sub    eax,edx
c002659b:	eb 5a                	jmp    c00265f7 <__addsf3+0x2d1>
c002659d:	bf 00 00 00 00       	mov    edi,0x0
c00265a2:	74 7b                	je     c002661f <__addsf3+0x2f9>
c00265a4:	eb 4a                	jmp    c00265f0 <__addsf3+0x2ca>
c00265a6:	89 d0                	mov    eax,edx
c00265a8:	29 d8                	sub    eax,ebx
c00265aa:	79 12                	jns    c00265be <__addsf3+0x298>
c00265ac:	89 d8                	mov    eax,ebx
c00265ae:	29 d0                	sub    eax,edx
c00265b0:	eb 09                	jmp    c00265bb <__addsf3+0x295>
c00265b2:	85 c0                	test   eax,eax
c00265b4:	79 41                	jns    c00265f7 <__addsf3+0x2d1>
c00265b6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265bb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00265be:	31 f6                	xor    esi,esi
c00265c0:	85 c0                	test   eax,eax
c00265c2:	74 33                	je     c00265f7 <__addsf3+0x2d1>
c00265c4:	0f bd c8             	bsr    ecx,eax
c00265c7:	83 f1 1f             	xor    ecx,0x1f
c00265ca:	d3 e0                	shl    eax,cl
c00265cc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00265d0:	39 ca                	cmp    edx,ecx
c00265d2:	7f 10                	jg     c00265e4 <__addsf3+0x2be>
c00265d4:	29 d1                	sub    ecx,edx
c00265d6:	41                   	inc    ecx
c00265d7:	d3 e8                	shr    eax,cl
c00265d9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00265dc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00265e2:	eb 13                	jmp    c00265f7 <__addsf3+0x2d1>
c00265e4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00265e7:	29 ce                	sub    esi,ecx
c00265e9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265ee:	eb 07                	jmp    c00265f7 <__addsf3+0x2d1>
c00265f0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00265f3:	eb 02                	jmp    c00265f7 <__addsf3+0x2d1>
c00265f5:	31 c0                	xor    eax,eax
c00265f7:	89 c2                	mov    edx,eax
c00265f9:	c1 ea 08             	shr    edx,0x8
c00265fc:	a8 7f                	test   al,0x7f
c00265fe:	0f 95 c1             	setne  cl
c0026601:	09 d1                	or     ecx,edx
c0026603:	83 e1 01             	and    ecx,0x1
c0026606:	c1 e8 07             	shr    eax,0x7
c0026609:	21 c8                	and    eax,ecx
c002660b:	c1 e6 17             	shl    esi,0x17
c002660e:	09 d6                	or     esi,edx
c0026610:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026613:	eb 0a                	jmp    c002661f <__addsf3+0x2f9>
c0026615:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026618:	eb 05                	jmp    c002661f <__addsf3+0x2f9>
c002661a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002661f:	89 f8                	mov    eax,edi
c0026621:	5a                   	pop    edx
c0026622:	59                   	pop    ecx
c0026623:	5b                   	pop    ebx
c0026624:	5e                   	pop    esi
c0026625:	5f                   	pop    edi
c0026626:	5d                   	pop    ebp
c0026627:	c3                   	ret    

c0026628 <__subsf3>:
c0026628:	55                   	push   ebp
c0026629:	89 e5                	mov    ebp,esp
c002662b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002662e:	05 00 00 00 80       	add    eax,0x80000000
c0026633:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026636:	5d                   	pop    ebp
c0026637:	e9 ea fc ff ff       	jmp    c0026326 <__addsf3>

c002663c <__negsf2>:
c002663c:	55                   	push   ebp
c002663d:	89 e5                	mov    ebp,esp
c002663f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026642:	05 00 00 00 80       	add    eax,0x80000000
c0026647:	5d                   	pop    ebp
c0026648:	c3                   	ret    

c0026649 <__mulsf3>:
c0026649:	55                   	push   ebp
c002664a:	89 e5                	mov    ebp,esp
c002664c:	57                   	push   edi
c002664d:	56                   	push   esi
c002664e:	53                   	push   ebx
c002664f:	83 ec 1c             	sub    esp,0x1c
c0026652:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026655:	89 f0                	mov    eax,esi
c0026657:	89 f1                	mov    ecx,esi
c0026659:	c1 f9 17             	sar    ecx,0x17
c002665c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002665f:	c1 e0 08             	shl    eax,0x8
c0026662:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026667:	89 c1                	mov    ecx,eax
c0026669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002666f:	89 c7                	mov    edi,eax
c0026671:	c1 ff 17             	sar    edi,0x17
c0026674:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026678:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002667b:	89 f8                	mov    eax,edi
c002667d:	0f b6 c0             	movzx  eax,al
c0026680:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026683:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026687:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002668a:	42                   	inc    edx
c002668b:	80 e2 fe             	and    dl,0xfe
c002668e:	75 7b                	jne    c002670b <__mulsf3+0xc2>
c0026690:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026694:	74 54                	je     c00266ea <__mulsf3+0xa1>
c0026696:	85 c9                	test   ecx,ecx
c0026698:	0f 85 64 01 00 00    	jne    c0026802 <__mulsf3+0x1b9>
c002669e:	8d 57 01             	lea    edx,[edi+0x1]
c00266a1:	80 e2 fe             	and    dl,0xfe
c00266a4:	75 1f                	jne    c00266c5 <__mulsf3+0x7c>
c00266a6:	85 c0                	test   eax,eax
c00266a8:	b8 00 00 00 00       	mov    eax,0x0
c00266ad:	74 29                	je     c00266d8 <__mulsf3+0x8f>
c00266af:	53                   	push   ebx
c00266b0:	53                   	push   ebx
c00266b1:	50                   	push   eax
c00266b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266b5:	e8 96 05 00 00       	call   c0026c50 <__nesf2>
c00266ba:	83 c4 10             	add    esp,0x10
c00266bd:	85 c0                	test   eax,eax
c00266bf:	0f 85 3a 01 00 00    	jne    c00267ff <__mulsf3+0x1b6>
c00266c5:	85 ff                	test   edi,edi
c00266c7:	0f 89 35 01 00 00    	jns    c0026802 <__mulsf3+0x1b9>
c00266cd:	81 c6 00 00 00 80    	add    esi,0x80000000
c00266d3:	e9 2a 01 00 00       	jmp    c0026802 <__mulsf3+0x1b9>
c00266d8:	51                   	push   ecx
c00266d9:	51                   	push   ecx
c00266da:	50                   	push   eax
c00266db:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266de:	e8 6d 05 00 00       	call   c0026c50 <__nesf2>
c00266e3:	83 c4 10             	add    esp,0x10
c00266e6:	85 c0                	test   eax,eax
c00266e8:	eb 15                	jmp    c00266ff <__mulsf3+0xb6>
c00266ea:	85 c9                	test   ecx,ecx
c00266ec:	74 0b                	je     c00266f9 <__mulsf3+0xb0>
c00266ee:	8d 53 ff             	lea    edx,[ebx-0x1]
c00266f1:	01 c9                	add    ecx,ecx
c00266f3:	78 16                	js     c002670b <__mulsf3+0xc2>
c00266f5:	89 d3                	mov    ebx,edx
c00266f7:	eb f5                	jmp    c00266ee <__mulsf3+0xa5>
c00266f9:	89 f8                	mov    eax,edi
c00266fb:	f7 d0                	not    eax
c00266fd:	84 c0                	test   al,al
c00266ff:	75 c4                	jne    c00266c5 <__mulsf3+0x7c>
c0026701:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026706:	e9 f7 00 00 00       	jmp    c0026802 <__mulsf3+0x1b9>
c002670b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002670e:	c1 e6 08             	shl    esi,0x8
c0026711:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026717:	8d 57 01             	lea    edx,[edi+0x1]
c002671a:	80 e2 fe             	and    dl,0xfe
c002671d:	75 63                	jne    c0026782 <__mulsf3+0x139>
c002671f:	85 c0                	test   eax,eax
c0026721:	74 2f                	je     c0026752 <__mulsf3+0x109>
c0026723:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026727:	0f 89 d2 00 00 00    	jns    c00267ff <__mulsf3+0x1b6>
c002672d:	52                   	push   edx
c002672e:	52                   	push   edx
c002672f:	6a 00                	push   0x0
c0026731:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026734:	e8 dc 04 00 00       	call   c0026c15 <__eqsf2>
c0026739:	83 c4 10             	add    esp,0x10
c002673c:	85 c0                	test   eax,eax
c002673e:	0f 85 bb 00 00 00    	jne    c00267ff <__mulsf3+0x1b6>
c0026744:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026747:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002674d:	e9 b0 00 00 00       	jmp    c0026802 <__mulsf3+0x1b9>
c0026752:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026755:	50                   	push   eax
c0026756:	50                   	push   eax
c0026757:	6a 00                	push   0x0
c0026759:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002675c:	e8 b4 04 00 00       	call   c0026c15 <__eqsf2>
c0026761:	83 c4 10             	add    esp,0x10
c0026764:	85 c0                	test   eax,eax
c0026766:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026769:	75 0c                	jne    c0026777 <__mulsf3+0x12e>
c002676b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002676f:	0f 89 8a 00 00 00    	jns    c00267ff <__mulsf3+0x1b6>
c0026775:	eb cd                	jmp    c0026744 <__mulsf3+0xfb>
c0026777:	8d 43 ff             	lea    eax,[ebx-0x1]
c002677a:	01 f6                	add    esi,esi
c002677c:	78 04                	js     c0026782 <__mulsf3+0x139>
c002677e:	89 c3                	mov    ebx,eax
c0026780:	eb f5                	jmp    c0026777 <__mulsf3+0x12e>
c0026782:	89 c8                	mov    eax,ecx
c0026784:	0d 00 00 00 80       	or     eax,0x80000000
c0026789:	81 ce 00 00 00 80    	or     esi,0x80000000
c002678f:	f7 e6                	mul    esi
c0026791:	85 c0                	test   eax,eax
c0026793:	0f 95 c0             	setne  al
c0026796:	0f b6 c0             	movzx  eax,al
c0026799:	09 c2                	or     edx,eax
c002679b:	78 03                	js     c00267a0 <__mulsf3+0x157>
c002679d:	01 d2                	add    edx,edx
c002679f:	4b                   	dec    ebx
c00267a0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00267a6:	7f 22                	jg     c00267ca <__mulsf3+0x181>
c00267a8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00267ae:	85 db                	test   ebx,ebx
c00267b0:	7f 23                	jg     c00267d5 <__mulsf3+0x18c>
c00267b2:	83 fb e9             	cmp    ebx,0xffffffe9
c00267b5:	7c 1a                	jl     c00267d1 <__mulsf3+0x188>
c00267b7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267bd:	b9 01 00 00 00       	mov    ecx,0x1
c00267c2:	29 d9                	sub    ecx,ebx
c00267c4:	d3 ea                	shr    edx,cl
c00267c6:	31 db                	xor    ebx,ebx
c00267c8:	eb 0b                	jmp    c00267d5 <__mulsf3+0x18c>
c00267ca:	bb ff 00 00 00       	mov    ebx,0xff
c00267cf:	eb 02                	jmp    c00267d3 <__mulsf3+0x18a>
c00267d1:	31 db                	xor    ebx,ebx
c00267d3:	31 d2                	xor    edx,edx
c00267d5:	89 d0                	mov    eax,edx
c00267d7:	c1 e8 08             	shr    eax,0x8
c00267da:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00267dd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00267e3:	09 fb                	or     ebx,edi
c00267e5:	c1 e3 17             	shl    ebx,0x17
c00267e8:	09 c3                	or     ebx,eax
c00267ea:	f6 c2 7f             	test   dl,0x7f
c00267ed:	0f 95 c1             	setne  cl
c00267f0:	09 c8                	or     eax,ecx
c00267f2:	83 e0 01             	and    eax,0x1
c00267f5:	c1 ea 07             	shr    edx,0x7
c00267f8:	21 c2                	and    edx,eax
c00267fa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00267fd:	eb 03                	jmp    c0026802 <__mulsf3+0x1b9>
c00267ff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026802:	89 f0                	mov    eax,esi
c0026804:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026807:	5b                   	pop    ebx
c0026808:	5e                   	pop    esi
c0026809:	5f                   	pop    edi
c002680a:	5d                   	pop    ebp
c002680b:	c3                   	ret    

c002680c <__divsf3>:
c002680c:	55                   	push   ebp
c002680d:	89 e5                	mov    ebp,esp
c002680f:	57                   	push   edi
c0026810:	56                   	push   esi
c0026811:	53                   	push   ebx
c0026812:	83 ec 1c             	sub    esp,0x1c
c0026815:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026818:	89 d8                	mov    eax,ebx
c002681a:	89 d9                	mov    ecx,ebx
c002681c:	c1 f9 17             	sar    ecx,0x17
c002681f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026822:	c1 e0 08             	shl    eax,0x8
c0026825:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002682a:	89 c1                	mov    ecx,eax
c002682c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002682f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026832:	89 c7                	mov    edi,eax
c0026834:	c1 ff 17             	sar    edi,0x17
c0026837:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002683b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002683e:	89 f8                	mov    eax,edi
c0026840:	0f b6 c0             	movzx  eax,al
c0026843:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026846:	29 c6                	sub    esi,eax
c0026848:	83 c6 7f             	add    esi,0x7f
c002684b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002684e:	42                   	inc    edx
c002684f:	80 e2 fe             	and    dl,0xfe
c0026852:	0f 85 9c 00 00 00    	jne    c00268f4 <__divsf3+0xe8>
c0026858:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002685c:	74 33                	je     c0026891 <__divsf3+0x85>
c002685e:	85 c9                	test   ecx,ecx
c0026860:	0f 85 c7 01 00 00    	jne    c0026a2d <__divsf3+0x221>
c0026866:	8d 57 01             	lea    edx,[edi+0x1]
c0026869:	80 e2 fe             	and    dl,0xfe
c002686c:	75 2f                	jne    c002689d <__divsf3+0x91>
c002686e:	85 c0                	test   eax,eax
c0026870:	74 2b                	je     c002689d <__divsf3+0x91>
c0026872:	51                   	push   ecx
c0026873:	51                   	push   ecx
c0026874:	6a 00                	push   0x0
c0026876:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026879:	e8 d2 03 00 00       	call   c0026c50 <__nesf2>
c002687e:	83 c4 10             	add    esp,0x10
c0026881:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026884:	85 c0                	test   eax,eax
c0026886:	0f 85 a1 01 00 00    	jne    c0026a2d <__divsf3+0x221>
c002688c:	e9 92 01 00 00       	jmp    c0026a23 <__divsf3+0x217>
c0026891:	85 c9                	test   ecx,ecx
c0026893:	75 1b                	jne    c00268b0 <__divsf3+0xa4>
c0026895:	8d 57 01             	lea    edx,[edi+0x1]
c0026898:	80 e2 fe             	and    dl,0xfe
c002689b:	74 1e                	je     c00268bb <__divsf3+0xaf>
c002689d:	85 ff                	test   edi,edi
c002689f:	0f 89 88 01 00 00    	jns    c0026a2d <__divsf3+0x221>
c00268a5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00268ab:	e9 7d 01 00 00       	jmp    c0026a2d <__divsf3+0x221>
c00268b0:	8d 56 ff             	lea    edx,[esi-0x1]
c00268b3:	01 c9                	add    ecx,ecx
c00268b5:	78 3d                	js     c00268f4 <__divsf3+0xe8>
c00268b7:	89 d6                	mov    esi,edx
c00268b9:	eb f5                	jmp    c00268b0 <__divsf3+0xa4>
c00268bb:	85 c0                	test   eax,eax
c00268bd:	b8 00 00 00 00       	mov    eax,0x0
c00268c2:	74 18                	je     c00268dc <__divsf3+0xd0>
c00268c4:	52                   	push   edx
c00268c5:	52                   	push   edx
c00268c6:	50                   	push   eax
c00268c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268ca:	e8 81 03 00 00       	call   c0026c50 <__nesf2>
c00268cf:	83 c4 10             	add    esp,0x10
c00268d2:	85 c0                	test   eax,eax
c00268d4:	0f 85 50 01 00 00    	jne    c0026a2a <__divsf3+0x21e>
c00268da:	eb c1                	jmp    c002689d <__divsf3+0x91>
c00268dc:	56                   	push   esi
c00268dd:	56                   	push   esi
c00268de:	50                   	push   eax
c00268df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268e2:	e8 69 03 00 00       	call   c0026c50 <__nesf2>
c00268e7:	83 c4 10             	add    esp,0x10
c00268ea:	85 c0                	test   eax,eax
c00268ec:	0f 84 31 01 00 00    	je     c0026a23 <__divsf3+0x217>
c00268f2:	eb a9                	jmp    c002689d <__divsf3+0x91>
c00268f4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00268f7:	c1 e3 08             	shl    ebx,0x8
c00268fa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026900:	8d 57 01             	lea    edx,[edi+0x1]
c0026903:	80 e2 fe             	and    dl,0xfe
c0026906:	75 71                	jne    c0026979 <__divsf3+0x16d>
c0026908:	85 c0                	test   eax,eax
c002690a:	ba 00 00 00 00       	mov    edx,0x0
c002690f:	74 2f                	je     c0026940 <__divsf3+0x134>
c0026911:	51                   	push   ecx
c0026912:	51                   	push   ecx
c0026913:	52                   	push   edx
c0026914:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026917:	e8 f9 02 00 00       	call   c0026c15 <__eqsf2>
c002691c:	83 c4 10             	add    esp,0x10
c002691f:	85 c0                	test   eax,eax
c0026921:	0f 85 03 01 00 00    	jne    c0026a2a <__divsf3+0x21e>
c0026927:	31 d2                	xor    edx,edx
c0026929:	89 d3                	mov    ebx,edx
c002692b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002692e:	31 f8                	xor    eax,edi
c0026930:	0f 89 f7 00 00 00    	jns    c0026a2d <__divsf3+0x221>
c0026936:	bb 00 00 00 80       	mov    ebx,0x80000000
c002693b:	e9 ed 00 00 00       	jmp    c0026a2d <__divsf3+0x221>
c0026940:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026943:	50                   	push   eax
c0026944:	50                   	push   eax
c0026945:	52                   	push   edx
c0026946:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026949:	e8 c7 02 00 00       	call   c0026c15 <__eqsf2>
c002694e:	83 c4 10             	add    esp,0x10
c0026951:	85 c0                	test   eax,eax
c0026953:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026956:	75 16                	jne    c002696e <__divsf3+0x162>
c0026958:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002695b:	31 fb                	xor    ebx,edi
c002695d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026963:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026969:	e9 bf 00 00 00       	jmp    c0026a2d <__divsf3+0x221>
c002696e:	8d 46 01             	lea    eax,[esi+0x1]
c0026971:	01 db                	add    ebx,ebx
c0026973:	78 04                	js     c0026979 <__divsf3+0x16d>
c0026975:	89 c6                	mov    esi,eax
c0026977:	eb f5                	jmp    c002696e <__divsf3+0x162>
c0026979:	89 c8                	mov    eax,ecx
c002697b:	0d 00 00 00 80       	or     eax,0x80000000
c0026980:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026986:	31 d2                	xor    edx,edx
c0026988:	39 d8                	cmp    eax,ebx
c002698a:	72 07                	jb     c0026993 <__divsf3+0x187>
c002698c:	29 d8                	sub    eax,ebx
c002698e:	ba 01 00 00 00       	mov    edx,0x1
c0026993:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002699a:	01 d2                	add    edx,edx
c002699c:	89 c1                	mov    ecx,eax
c002699e:	01 c0                	add    eax,eax
c00269a0:	85 c9                	test   ecx,ecx
c00269a2:	78 04                	js     c00269a8 <__divsf3+0x19c>
c00269a4:	39 c3                	cmp    ebx,eax
c00269a6:	77 05                	ja     c00269ad <__divsf3+0x1a1>
c00269a8:	29 d8                	sub    eax,ebx
c00269aa:	83 ca 01             	or     edx,0x1
c00269ad:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00269b0:	75 e8                	jne    c002699a <__divsf3+0x18e>
c00269b2:	85 c0                	test   eax,eax
c00269b4:	0f 95 c0             	setne  al
c00269b7:	0f b6 c0             	movzx  eax,al
c00269ba:	c1 e2 06             	shl    edx,0x6
c00269bd:	09 c2                	or     edx,eax
c00269bf:	78 03                	js     c00269c4 <__divsf3+0x1b8>
c00269c1:	01 d2                	add    edx,edx
c00269c3:	4e                   	dec    esi
c00269c4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00269ca:	7f 22                	jg     c00269ee <__divsf3+0x1e2>
c00269cc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00269d2:	85 f6                	test   esi,esi
c00269d4:	7f 23                	jg     c00269f9 <__divsf3+0x1ed>
c00269d6:	83 fe e9             	cmp    esi,0xffffffe9
c00269d9:	7c 1a                	jl     c00269f5 <__divsf3+0x1e9>
c00269db:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269e1:	b9 01 00 00 00       	mov    ecx,0x1
c00269e6:	29 f1                	sub    ecx,esi
c00269e8:	d3 ea                	shr    edx,cl
c00269ea:	31 f6                	xor    esi,esi
c00269ec:	eb 0b                	jmp    c00269f9 <__divsf3+0x1ed>
c00269ee:	be ff 00 00 00       	mov    esi,0xff
c00269f3:	eb 02                	jmp    c00269f7 <__divsf3+0x1eb>
c00269f5:	31 f6                	xor    esi,esi
c00269f7:	31 d2                	xor    edx,edx
c00269f9:	89 d0                	mov    eax,edx
c00269fb:	c1 e8 08             	shr    eax,0x8
c00269fe:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026a01:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026a07:	09 fe                	or     esi,edi
c0026a09:	c1 e6 17             	shl    esi,0x17
c0026a0c:	09 c6                	or     esi,eax
c0026a0e:	f6 c2 7f             	test   dl,0x7f
c0026a11:	0f 95 c1             	setne  cl
c0026a14:	09 c8                	or     eax,ecx
c0026a16:	83 e0 01             	and    eax,0x1
c0026a19:	c1 ea 07             	shr    edx,0x7
c0026a1c:	21 c2                	and    edx,eax
c0026a1e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026a21:	eb 0a                	jmp    c0026a2d <__divsf3+0x221>
c0026a23:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026a28:	eb 03                	jmp    c0026a2d <__divsf3+0x221>
c0026a2a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a2d:	89 d8                	mov    eax,ebx
c0026a2f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a32:	5b                   	pop    ebx
c0026a33:	5e                   	pop    esi
c0026a34:	5f                   	pop    edi
c0026a35:	5d                   	pop    ebp
c0026a36:	c3                   	ret    

c0026a37 <__floatsisf>:
c0026a37:	55                   	push   ebp
c0026a38:	89 e5                	mov    ebp,esp
c0026a3a:	53                   	push   ebx
c0026a3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026a3e:	85 d2                	test   edx,edx
c0026a40:	7e 2b                	jle    c0026a6d <__floatsisf+0x36>
c0026a42:	0f bd ca             	bsr    ecx,edx
c0026a45:	83 f1 1f             	xor    ecx,0x1f
c0026a48:	d3 e2                	shl    edx,cl
c0026a4a:	89 d0                	mov    eax,edx
c0026a4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a51:	89 c3                	mov    ebx,eax
c0026a53:	c1 eb 08             	shr    ebx,0x8
c0026a56:	80 e2 7f             	and    dl,0x7f
c0026a59:	0f 95 c2             	setne  dl
c0026a5c:	09 da                	or     edx,ebx
c0026a5e:	83 e2 01             	and    edx,0x1
c0026a61:	c1 e8 07             	shr    eax,0x7
c0026a64:	21 c2                	and    edx,eax
c0026a66:	b8 9e 00 00 00       	mov    eax,0x9e
c0026a6b:	eb 32                	jmp    c0026a9f <__floatsisf+0x68>
c0026a6d:	b8 00 00 00 00       	mov    eax,0x0
c0026a72:	74 34                	je     c0026aa8 <__floatsisf+0x71>
c0026a74:	f7 da                	neg    edx
c0026a76:	0f bd ca             	bsr    ecx,edx
c0026a79:	83 f1 1f             	xor    ecx,0x1f
c0026a7c:	d3 e2                	shl    edx,cl
c0026a7e:	89 d0                	mov    eax,edx
c0026a80:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a85:	89 c3                	mov    ebx,eax
c0026a87:	c1 eb 08             	shr    ebx,0x8
c0026a8a:	80 e2 7f             	and    dl,0x7f
c0026a8d:	0f 95 c2             	setne  dl
c0026a90:	09 da                	or     edx,ebx
c0026a92:	83 e2 01             	and    edx,0x1
c0026a95:	c1 e8 07             	shr    eax,0x7
c0026a98:	21 c2                	and    edx,eax
c0026a9a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026a9f:	29 c8                	sub    eax,ecx
c0026aa1:	c1 e0 17             	shl    eax,0x17
c0026aa4:	09 d8                	or     eax,ebx
c0026aa6:	01 d0                	add    eax,edx
c0026aa8:	5b                   	pop    ebx
c0026aa9:	5d                   	pop    ebp
c0026aaa:	c3                   	ret    

c0026aab <__floatunsisf>:
c0026aab:	55                   	push   ebp
c0026aac:	89 e5                	mov    ebp,esp
c0026aae:	53                   	push   ebx
c0026aaf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ab2:	31 c0                	xor    eax,eax
c0026ab4:	85 d2                	test   edx,edx
c0026ab6:	74 32                	je     c0026aea <__floatunsisf+0x3f>
c0026ab8:	0f bd ca             	bsr    ecx,edx
c0026abb:	83 f1 1f             	xor    ecx,0x1f
c0026abe:	d3 e2                	shl    edx,cl
c0026ac0:	89 d0                	mov    eax,edx
c0026ac2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ac7:	89 c3                	mov    ebx,eax
c0026ac9:	c1 eb 08             	shr    ebx,0x8
c0026acc:	80 e2 7f             	and    dl,0x7f
c0026acf:	0f 95 c2             	setne  dl
c0026ad2:	09 da                	or     edx,ebx
c0026ad4:	83 e2 01             	and    edx,0x1
c0026ad7:	c1 e8 07             	shr    eax,0x7
c0026ada:	21 c2                	and    edx,eax
c0026adc:	b8 9e 00 00 00       	mov    eax,0x9e
c0026ae1:	29 c8                	sub    eax,ecx
c0026ae3:	c1 e0 17             	shl    eax,0x17
c0026ae6:	09 d8                	or     eax,ebx
c0026ae8:	01 d0                	add    eax,edx
c0026aea:	5b                   	pop    ebx
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    

c0026aed <__fixsfsi>:
c0026aed:	55                   	push   ebp
c0026aee:	89 e5                	mov    ebp,esp
c0026af0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026af3:	89 d1                	mov    ecx,edx
c0026af5:	c1 e1 08             	shl    ecx,0x8
c0026af8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026afe:	c1 fa 17             	sar    edx,0x17
c0026b01:	78 1c                	js     c0026b1f <__fixsfsi+0x32>
c0026b03:	83 ea 7f             	sub    edx,0x7f
c0026b06:	31 c0                	xor    eax,eax
c0026b08:	83 fa 1e             	cmp    edx,0x1e
c0026b0b:	77 40                	ja     c0026b4d <__fixsfsi+0x60>
c0026b0d:	89 c8                	mov    eax,ecx
c0026b0f:	0d 00 00 00 80       	or     eax,0x80000000
c0026b14:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b19:	29 d1                	sub    ecx,edx
c0026b1b:	d3 e8                	shr    eax,cl
c0026b1d:	eb 2e                	jmp    c0026b4d <__fixsfsi+0x60>
c0026b1f:	31 c0                	xor    eax,eax
c0026b21:	81 c2 81 00 00 00    	add    edx,0x81
c0026b27:	78 24                	js     c0026b4d <__fixsfsi+0x60>
c0026b29:	83 fa 1e             	cmp    edx,0x1e
c0026b2c:	7e 09                	jle    c0026b37 <__fixsfsi+0x4a>
c0026b2e:	83 fa 1f             	cmp    edx,0x1f
c0026b31:	75 18                	jne    c0026b4b <__fixsfsi+0x5e>
c0026b33:	85 c9                	test   ecx,ecx
c0026b35:	75 14                	jne    c0026b4b <__fixsfsi+0x5e>
c0026b37:	89 c8                	mov    eax,ecx
c0026b39:	0d 00 00 00 80       	or     eax,0x80000000
c0026b3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b43:	29 d1                	sub    ecx,edx
c0026b45:	d3 e8                	shr    eax,cl
c0026b47:	f7 d8                	neg    eax
c0026b49:	eb 02                	jmp    c0026b4d <__fixsfsi+0x60>
c0026b4b:	31 c0                	xor    eax,eax
c0026b4d:	5d                   	pop    ebp
c0026b4e:	c3                   	ret    

c0026b4f <__fixunssfsi>:
c0026b4f:	55                   	push   ebp
c0026b50:	89 e5                	mov    ebp,esp
c0026b52:	53                   	push   ebx
c0026b53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b56:	89 d3                	mov    ebx,edx
c0026b58:	c1 fb 17             	sar    ebx,0x17
c0026b5b:	83 eb 7f             	sub    ebx,0x7f
c0026b5e:	31 c0                	xor    eax,eax
c0026b60:	83 fb 1f             	cmp    ebx,0x1f
c0026b63:	77 18                	ja     c0026b7d <__fixunssfsi+0x2e>
c0026b65:	89 d0                	mov    eax,edx
c0026b67:	c1 e0 08             	shl    eax,0x8
c0026b6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b6f:	0d 00 00 00 80       	or     eax,0x80000000
c0026b74:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b79:	29 d9                	sub    ecx,ebx
c0026b7b:	d3 e8                	shr    eax,cl
c0026b7d:	5b                   	pop    ebx
c0026b7e:	5d                   	pop    ebp
c0026b7f:	c3                   	ret    

c0026b80 <__cmpsf2>:
c0026b80:	55                   	push   ebp
c0026b81:	89 e5                	mov    ebp,esp
c0026b83:	57                   	push   edi
c0026b84:	56                   	push   esi
c0026b85:	53                   	push   ebx
c0026b86:	83 ec 24             	sub    esp,0x24
c0026b89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b8f:	e8 4f 10 00 00       	call   c0027be3 <__truncdfsf2>
c0026b94:	5a                   	pop    edx
c0026b95:	59                   	pop    ecx
c0026b96:	89 c3                	mov    ebx,eax
c0026b98:	c1 e8 17             	shr    eax,0x17
c0026b9b:	0f b6 f0             	movzx  esi,al
c0026b9e:	89 d8                	mov    eax,ebx
c0026ba0:	c1 e8 1f             	shr    eax,0x1f
c0026ba3:	31 c6                	xor    esi,eax
c0026ba5:	c1 e3 08             	shl    ebx,0x8
c0026ba8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026bab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026bae:	e8 30 10 00 00       	call   c0027be3 <__truncdfsf2>
c0026bb3:	83 c4 10             	add    esp,0x10
c0026bb6:	89 c1                	mov    ecx,eax
c0026bb8:	c1 e9 17             	shr    ecx,0x17
c0026bbb:	0f b6 c9             	movzx  ecx,cl
c0026bbe:	89 c7                	mov    edi,eax
c0026bc0:	c1 ef 1f             	shr    edi,0x1f
c0026bc3:	89 ca                	mov    edx,ecx
c0026bc5:	31 fa                	xor    edx,edi
c0026bc7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026bca:	c1 e0 08             	shl    eax,0x8
c0026bcd:	89 c2                	mov    edx,eax
c0026bcf:	89 d8                	mov    eax,ebx
c0026bd1:	09 d0                	or     eax,edx
c0026bd3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026bd8:	09 f0                	or     eax,esi
c0026bda:	75 08                	jne    c0026be4 <__cmpsf2+0x64>
c0026bdc:	31 c0                	xor    eax,eax
c0026bde:	39 f9                	cmp    ecx,edi
c0026be0:	75 0c                	jne    c0026bee <__cmpsf2+0x6e>
c0026be2:	eb 29                	jmp    c0026c0d <__cmpsf2+0x8d>
c0026be4:	b8 01 00 00 00       	mov    eax,0x1
c0026be9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026bec:	7f 1f                	jg     c0026c0d <__cmpsf2+0x8d>
c0026bee:	83 c8 ff             	or     eax,0xffffffff
c0026bf1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026bf4:	7c 17                	jl     c0026c0d <__cmpsf2+0x8d>
c0026bf6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bfc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c02:	b8 01 00 00 00       	mov    eax,0x1
c0026c07:	39 d3                	cmp    ebx,edx
c0026c09:	77 02                	ja     c0026c0d <__cmpsf2+0x8d>
c0026c0b:	19 c0                	sbb    eax,eax
c0026c0d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c10:	5b                   	pop    ebx
c0026c11:	5e                   	pop    esi
c0026c12:	5f                   	pop    edi
c0026c13:	5d                   	pop    ebp
c0026c14:	c3                   	ret    

c0026c15 <__eqsf2>:
c0026c15:	55                   	push   ebp
c0026c16:	89 e5                	mov    ebp,esp
c0026c18:	83 ec 24             	sub    esp,0x24
c0026c1b:	6a 01                	push   0x1
c0026c1d:	83 ec 0c             	sub    esp,0xc
c0026c20:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c23:	e8 df 10 00 00       	call   c0027d07 <__extendsfdf2>
c0026c28:	83 c4 10             	add    esp,0x10
c0026c2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c31:	52                   	push   edx
c0026c32:	50                   	push   eax
c0026c33:	50                   	push   eax
c0026c34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c37:	e8 cb 10 00 00       	call   c0027d07 <__extendsfdf2>
c0026c3c:	59                   	pop    ecx
c0026c3d:	59                   	pop    ecx
c0026c3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c44:	52                   	push   edx
c0026c45:	50                   	push   eax
c0026c46:	e8 35 ff ff ff       	call   c0026b80 <__cmpsf2>
c0026c4b:	83 c4 20             	add    esp,0x20
c0026c4e:	c9                   	leave  
c0026c4f:	c3                   	ret    

c0026c50 <__nesf2>:
c0026c50:	eb c3                	jmp    c0026c15 <__eqsf2>

c0026c52 <__gtsf2>:
c0026c52:	55                   	push   ebp
c0026c53:	89 e5                	mov    ebp,esp
c0026c55:	83 ec 24             	sub    esp,0x24
c0026c58:	6a ff                	push   0xffffffff
c0026c5a:	83 ec 0c             	sub    esp,0xc
c0026c5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c60:	e8 a2 10 00 00       	call   c0027d07 <__extendsfdf2>
c0026c65:	83 c4 10             	add    esp,0x10
c0026c68:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c6b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c6e:	52                   	push   edx
c0026c6f:	50                   	push   eax
c0026c70:	50                   	push   eax
c0026c71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c74:	e8 8e 10 00 00       	call   c0027d07 <__extendsfdf2>
c0026c79:	59                   	pop    ecx
c0026c7a:	59                   	pop    ecx
c0026c7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c81:	52                   	push   edx
c0026c82:	50                   	push   eax
c0026c83:	e8 f8 fe ff ff       	call   c0026b80 <__cmpsf2>
c0026c88:	83 c4 20             	add    esp,0x20
c0026c8b:	c9                   	leave  
c0026c8c:	c3                   	ret    

c0026c8d <__gesf2>:
c0026c8d:	eb c3                	jmp    c0026c52 <__gtsf2>

c0026c8f <__ltsf2>:
c0026c8f:	eb 84                	jmp    c0026c15 <__eqsf2>

c0026c91 <__lesf2>:
c0026c91:	eb 82                	jmp    c0026c15 <__eqsf2>

c0026c93 <__adddf3>:
c0026c93:	55                   	push   ebp
c0026c94:	89 e5                	mov    ebp,esp
c0026c96:	57                   	push   edi
c0026c97:	56                   	push   esi
c0026c98:	53                   	push   ebx
c0026c99:	83 ec 24             	sub    esp,0x24
c0026c9c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c9f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ca2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ca5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ca8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026cab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026cae:	89 c8                	mov    eax,ecx
c0026cb0:	89 ce                	mov    esi,ecx
c0026cb2:	c1 fe 14             	sar    esi,0x14
c0026cb5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026cb8:	89 fb                	mov    ebx,edi
c0026cba:	89 fa                	mov    edx,edi
c0026cbc:	c1 e2 0b             	shl    edx,0xb
c0026cbf:	c1 e0 0b             	shl    eax,0xb
c0026cc2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026cc7:	c1 eb 15             	shr    ebx,0x15
c0026cca:	09 d8                	or     eax,ebx
c0026ccc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026ccf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026cd2:	c1 fe 14             	sar    esi,0x14
c0026cd5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026cd8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026cdb:	89 f3                	mov    ebx,esi
c0026cdd:	c1 e3 0b             	shl    ebx,0xb
c0026ce0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026ce3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026ce6:	c1 e3 0b             	shl    ebx,0xb
c0026ce9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026cef:	c1 ee 15             	shr    esi,0x15
c0026cf2:	09 f3                	or     ebx,esi
c0026cf4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026cf7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026cfa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026cfd:	0f 88 5f 02 00 00    	js     c0026f62 <__adddf3+0x2cf>
c0026d03:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d06:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026d09:	85 db                	test   ebx,ebx
c0026d0b:	0f 8e c7 00 00 00    	jle    c0026dd8 <__adddf3+0x145>
c0026d11:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026d18:	75 1a                	jne    c0026d34 <__adddf3+0xa1>
c0026d1a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d1d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026d20:	0f 84 b2 05 00 00    	je     c00272d8 <__adddf3+0x645>
c0026d26:	4b                   	dec    ebx
c0026d27:	75 23                	jne    c0026d4c <__adddf3+0xb9>
c0026d29:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d2c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d2f:	e9 99 00 00 00       	jmp    c0026dcd <__adddf3+0x13a>
c0026d34:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d37:	f7 d6                	not    esi
c0026d39:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d3f:	0f 84 93 05 00 00    	je     c00272d8 <__adddf3+0x645>
c0026d45:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026d4c:	83 fb 1f             	cmp    ebx,0x1f
c0026d4f:	7e 42                	jle    c0026d93 <__adddf3+0x100>
c0026d51:	83 fb 3f             	cmp    ebx,0x3f
c0026d54:	0f 8f 7e 05 00 00    	jg     c00272d8 <__adddf3+0x645>
c0026d5a:	83 e3 1f             	and    ebx,0x1f
c0026d5d:	89 d9                	mov    ecx,ebx
c0026d5f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026d62:	d3 ef                	shr    edi,cl
c0026d64:	31 db                	xor    ebx,ebx
c0026d66:	85 c9                	test   ecx,ecx
c0026d68:	74 15                	je     c0026d7f <__adddf3+0xec>
c0026d6a:	be 20 00 00 00       	mov    esi,0x20
c0026d6f:	29 ce                	sub    esi,ecx
c0026d71:	89 f1                	mov    ecx,esi
c0026d73:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026d76:	d3 e6                	shl    esi,cl
c0026d78:	31 db                	xor    ebx,ebx
c0026d7a:	85 f6                	test   esi,esi
c0026d7c:	0f 95 c3             	setne  bl
c0026d7f:	31 c9                	xor    ecx,ecx
c0026d81:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d85:	0f 95 c1             	setne  cl
c0026d88:	09 cf                	or     edi,ecx
c0026d8a:	09 fb                	or     ebx,edi
c0026d8c:	01 da                	add    edx,ebx
c0026d8e:	83 d0 00             	adc    eax,0x0
c0026d91:	eb 3a                	jmp    c0026dcd <__adddf3+0x13a>
c0026d93:	bf 20 00 00 00       	mov    edi,0x20
c0026d98:	29 df                	sub    edi,ebx
c0026d9a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d9d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026da0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026da3:	d3 e6                	shl    esi,cl
c0026da5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026da8:	88 d9                	mov    cl,bl
c0026daa:	d3 ef                	shr    edi,cl
c0026dac:	09 fe                	or     esi,edi
c0026dae:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026db1:	88 d9                	mov    cl,bl
c0026db3:	d3 ef                	shr    edi,cl
c0026db5:	89 fb                	mov    ebx,edi
c0026db7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026dba:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026dbd:	d3 e7                	shl    edi,cl
c0026dbf:	85 ff                	test   edi,edi
c0026dc1:	0f 95 c1             	setne  cl
c0026dc4:	0f b6 c9             	movzx  ecx,cl
c0026dc7:	09 ce                	or     esi,ecx
c0026dc9:	01 f2                	add    edx,esi
c0026dcb:	11 d8                	adc    eax,ebx
c0026dcd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026dd0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026dd3:	e9 52 01 00 00       	jmp    c0026f2a <__adddf3+0x297>
c0026dd8:	0f 84 d5 00 00 00    	je     c0026eb3 <__adddf3+0x220>
c0026dde:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026de1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026de4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026de7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026dea:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026df1:	75 20                	jne    c0026e13 <__adddf3+0x180>
c0026df3:	89 d6                	mov    esi,edx
c0026df5:	09 c6                	or     esi,eax
c0026df7:	0f 84 db 04 00 00    	je     c00272d8 <__adddf3+0x645>
c0026dfd:	4b                   	dec    ebx
c0026dfe:	75 29                	jne    c0026e29 <__adddf3+0x196>
c0026e00:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e03:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e06:	01 d1                	add    ecx,edx
c0026e08:	11 c6                	adc    esi,eax
c0026e0a:	89 f0                	mov    eax,esi
c0026e0c:	89 ca                	mov    edx,ecx
c0026e0e:	e9 17 01 00 00       	jmp    c0026f2a <__adddf3+0x297>
c0026e13:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026e16:	f7 d6                	not    esi
c0026e18:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e1e:	0f 84 b4 04 00 00    	je     c00272d8 <__adddf3+0x645>
c0026e24:	0d 00 00 00 80       	or     eax,0x80000000
c0026e29:	83 fb 1f             	cmp    ebx,0x1f
c0026e2c:	7e 48                	jle    c0026e76 <__adddf3+0x1e3>
c0026e2e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e31:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e34:	83 fb 3f             	cmp    ebx,0x3f
c0026e37:	0f 8f 9b 04 00 00    	jg     c00272d8 <__adddf3+0x645>
c0026e3d:	83 e3 1f             	and    ebx,0x1f
c0026e40:	89 d9                	mov    ecx,ebx
c0026e42:	89 c7                	mov    edi,eax
c0026e44:	d3 ef                	shr    edi,cl
c0026e46:	31 db                	xor    ebx,ebx
c0026e48:	85 c9                	test   ecx,ecx
c0026e4a:	74 12                	je     c0026e5e <__adddf3+0x1cb>
c0026e4c:	be 20 00 00 00       	mov    esi,0x20
c0026e51:	29 ce                	sub    esi,ecx
c0026e53:	89 f1                	mov    ecx,esi
c0026e55:	d3 e0                	shl    eax,cl
c0026e57:	31 db                	xor    ebx,ebx
c0026e59:	85 c0                	test   eax,eax
c0026e5b:	0f 95 c3             	setne  bl
c0026e5e:	31 c0                	xor    eax,eax
c0026e60:	85 d2                	test   edx,edx
c0026e62:	0f 95 c0             	setne  al
c0026e65:	09 c7                	or     edi,eax
c0026e67:	09 fb                	or     ebx,edi
c0026e69:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e6c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026e6f:	01 da                	add    edx,ebx
c0026e71:	83 d6 00             	adc    esi,0x0
c0026e74:	eb 39                	jmp    c0026eaf <__adddf3+0x21c>
c0026e76:	be 20 00 00 00       	mov    esi,0x20
c0026e7b:	29 de                	sub    esi,ebx
c0026e7d:	89 c7                	mov    edi,eax
c0026e7f:	89 f1                	mov    ecx,esi
c0026e81:	d3 e7                	shl    edi,cl
c0026e83:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026e86:	89 d7                	mov    edi,edx
c0026e88:	88 d9                	mov    cl,bl
c0026e8a:	d3 ef                	shr    edi,cl
c0026e8c:	89 f9                	mov    ecx,edi
c0026e8e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e91:	09 cf                	or     edi,ecx
c0026e93:	88 d9                	mov    cl,bl
c0026e95:	d3 e8                	shr    eax,cl
c0026e97:	89 f1                	mov    ecx,esi
c0026e99:	d3 e2                	shl    edx,cl
c0026e9b:	85 d2                	test   edx,edx
c0026e9d:	0f 95 c2             	setne  dl
c0026ea0:	0f b6 d2             	movzx  edx,dl
c0026ea3:	09 d7                	or     edi,edx
c0026ea5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ea8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eab:	01 fa                	add    edx,edi
c0026ead:	11 c6                	adc    esi,eax
c0026eaf:	89 f0                	mov    eax,esi
c0026eb1:	eb 77                	jmp    c0026f2a <__adddf3+0x297>
c0026eb3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026eb6:	46                   	inc    esi
c0026eb7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026eba:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026ec0:	75 41                	jne    c0026f03 <__adddf3+0x270>
c0026ec2:	89 d3                	mov    ebx,edx
c0026ec4:	09 c3                	or     ebx,eax
c0026ec6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026ecd:	75 27                	jne    c0026ef6 <__adddf3+0x263>
c0026ecf:	85 db                	test   ebx,ebx
c0026ed1:	0f 84 fb 03 00 00    	je     c00272d2 <__adddf3+0x63f>
c0026ed7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026eda:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026edd:	0f 84 f5 03 00 00    	je     c00272d8 <__adddf3+0x645>
c0026ee3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026ee6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026ee9:	85 c0                	test   eax,eax
c0026eeb:	0f 89 91 03 00 00    	jns    c0027282 <__adddf3+0x5ef>
c0026ef1:	e9 85 03 00 00       	jmp    c002727b <__adddf3+0x5e8>
c0026ef6:	85 db                	test   ebx,ebx
c0026ef8:	0f 85 da 03 00 00    	jne    c00272d8 <__adddf3+0x645>
c0026efe:	e9 cf 03 00 00       	jmp    c00272d2 <__adddf3+0x63f>
c0026f03:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f06:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f0c:	f7 d1                	not    ecx
c0026f0e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f14:	0f 84 70 03 00 00    	je     c002728a <__adddf3+0x5f7>
c0026f1a:	d1 ea                	shr    edx,1
c0026f1c:	89 c1                	mov    ecx,eax
c0026f1e:	c1 e1 1f             	shl    ecx,0x1f
c0026f21:	09 ca                	or     edx,ecx
c0026f23:	d1 e8                	shr    eax,1
c0026f25:	e9 6f 03 00 00       	jmp    c0027299 <__adddf3+0x606>
c0026f2a:	85 c0                	test   eax,eax
c0026f2c:	0f 89 67 03 00 00    	jns    c0027299 <__adddf3+0x606>
c0026f32:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026f35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f38:	f7 d1                	not    ecx
c0026f3a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f40:	0f 84 44 03 00 00    	je     c002728a <__adddf3+0x5f7>
c0026f46:	89 d1                	mov    ecx,edx
c0026f48:	d1 e9                	shr    ecx,1
c0026f4a:	83 e2 01             	and    edx,0x1
c0026f4d:	09 ca                	or     edx,ecx
c0026f4f:	89 c1                	mov    ecx,eax
c0026f51:	c1 e1 1f             	shl    ecx,0x1f
c0026f54:	09 ca                	or     edx,ecx
c0026f56:	d1 e8                	shr    eax,1
c0026f58:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026f5d:	e9 37 03 00 00       	jmp    c0027299 <__adddf3+0x606>
c0026f62:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026f65:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026f6b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026f6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f71:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026f77:	29 de                	sub    esi,ebx
c0026f79:	85 f6                	test   esi,esi
c0026f7b:	0f 8e bd 00 00 00    	jle    c002703e <__adddf3+0x3ab>
c0026f81:	85 db                	test   ebx,ebx
c0026f83:	75 17                	jne    c0026f9c <__adddf3+0x309>
c0026f85:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f88:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026f8b:	0f 84 47 03 00 00    	je     c00272d8 <__adddf3+0x645>
c0026f91:	4e                   	dec    esi
c0026f92:	75 20                	jne    c0026fb4 <__adddf3+0x321>
c0026f94:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026f97:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026f9a:	eb 5b                	jmp    c0026ff7 <__adddf3+0x364>
c0026f9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f9f:	f7 d3                	not    ebx
c0026fa1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fa7:	0f 84 2b 03 00 00    	je     c00272d8 <__adddf3+0x645>
c0026fad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026fb4:	83 fe 1f             	cmp    esi,0x1f
c0026fb7:	7e 49                	jle    c0027002 <__adddf3+0x36f>
c0026fb9:	83 fe 3f             	cmp    esi,0x3f
c0026fbc:	0f 8f 16 03 00 00    	jg     c00272d8 <__adddf3+0x645>
c0026fc2:	83 e6 1f             	and    esi,0x1f
c0026fc5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026fc8:	89 f1                	mov    ecx,esi
c0026fca:	d3 ef                	shr    edi,cl
c0026fcc:	31 db                	xor    ebx,ebx
c0026fce:	85 f6                	test   esi,esi
c0026fd0:	74 13                	je     c0026fe5 <__adddf3+0x352>
c0026fd2:	b9 20 00 00 00       	mov    ecx,0x20
c0026fd7:	29 f1                	sub    ecx,esi
c0026fd9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026fdc:	d3 e6                	shl    esi,cl
c0026fde:	31 db                	xor    ebx,ebx
c0026fe0:	85 f6                	test   esi,esi
c0026fe2:	0f 95 c3             	setne  bl
c0026fe5:	31 c9                	xor    ecx,ecx
c0026fe7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026feb:	0f 95 c1             	setne  cl
c0026fee:	09 cf                	or     edi,ecx
c0026ff0:	09 fb                	or     ebx,edi
c0026ff2:	29 da                	sub    edx,ebx
c0026ff4:	83 d8 00             	sbb    eax,0x0
c0026ff7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026ffa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ffd:	e9 aa 01 00 00       	jmp    c00271ac <__adddf3+0x519>
c0027002:	bf 20 00 00 00       	mov    edi,0x20
c0027007:	29 f7                	sub    edi,esi
c0027009:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002700c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002700f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027012:	d3 e3                	shl    ebx,cl
c0027014:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027017:	89 f1                	mov    ecx,esi
c0027019:	d3 ef                	shr    edi,cl
c002701b:	09 fb                	or     ebx,edi
c002701d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027020:	89 f1                	mov    ecx,esi
c0027022:	d3 ef                	shr    edi,cl
c0027024:	89 fe                	mov    esi,edi
c0027026:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027029:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002702c:	d3 e7                	shl    edi,cl
c002702e:	85 ff                	test   edi,edi
c0027030:	0f 95 c1             	setne  cl
c0027033:	0f b6 c9             	movzx  ecx,cl
c0027036:	09 cb                	or     ebx,ecx
c0027038:	29 da                	sub    edx,ebx
c002703a:	19 f0                	sbb    eax,esi
c002703c:	eb b9                	jmp    c0026ff7 <__adddf3+0x364>
c002703e:	0f 84 cd 00 00 00    	je     c0027111 <__adddf3+0x47e>
c0027044:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027047:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002704a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002704d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027051:	75 1b                	jne    c002706e <__adddf3+0x3db>
c0027053:	89 d6                	mov    esi,edx
c0027055:	09 c6                	or     esi,eax
c0027057:	0f 84 7b 02 00 00    	je     c00272d8 <__adddf3+0x645>
c002705d:	4b                   	dec    ebx
c002705e:	75 24                	jne    c0027084 <__adddf3+0x3f1>
c0027060:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027063:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027066:	29 d1                	sub    ecx,edx
c0027068:	19 c6                	sbb    esi,eax
c002706a:	89 ca                	mov    edx,ecx
c002706c:	eb 61                	jmp    c00270cf <__adddf3+0x43c>
c002706e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027071:	f7 d6                	not    esi
c0027073:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027079:	0f 84 59 02 00 00    	je     c00272d8 <__adddf3+0x645>
c002707f:	0d 00 00 00 80       	or     eax,0x80000000
c0027084:	83 fb 1f             	cmp    ebx,0x1f
c0027087:	7e 4d                	jle    c00270d6 <__adddf3+0x443>
c0027089:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002708c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002708f:	83 fb 3f             	cmp    ebx,0x3f
c0027092:	0f 8f 40 02 00 00    	jg     c00272d8 <__adddf3+0x645>
c0027098:	83 e3 1f             	and    ebx,0x1f
c002709b:	89 d9                	mov    ecx,ebx
c002709d:	89 c7                	mov    edi,eax
c002709f:	d3 ef                	shr    edi,cl
c00270a1:	31 db                	xor    ebx,ebx
c00270a3:	85 c9                	test   ecx,ecx
c00270a5:	74 12                	je     c00270b9 <__adddf3+0x426>
c00270a7:	be 20 00 00 00       	mov    esi,0x20
c00270ac:	29 ce                	sub    esi,ecx
c00270ae:	89 f1                	mov    ecx,esi
c00270b0:	d3 e0                	shl    eax,cl
c00270b2:	31 db                	xor    ebx,ebx
c00270b4:	85 c0                	test   eax,eax
c00270b6:	0f 95 c3             	setne  bl
c00270b9:	31 c0                	xor    eax,eax
c00270bb:	85 d2                	test   edx,edx
c00270bd:	0f 95 c0             	setne  al
c00270c0:	09 c7                	or     edi,eax
c00270c2:	09 fb                	or     ebx,edi
c00270c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00270c7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00270ca:	29 da                	sub    edx,ebx
c00270cc:	83 de 00             	sbb    esi,0x0
c00270cf:	89 f0                	mov    eax,esi
c00270d1:	e9 d6 00 00 00       	jmp    c00271ac <__adddf3+0x519>
c00270d6:	be 20 00 00 00       	mov    esi,0x20
c00270db:	29 de                	sub    esi,ebx
c00270dd:	89 c7                	mov    edi,eax
c00270df:	89 f1                	mov    ecx,esi
c00270e1:	d3 e7                	shl    edi,cl
c00270e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00270e6:	89 d7                	mov    edi,edx
c00270e8:	88 d9                	mov    cl,bl
c00270ea:	d3 ef                	shr    edi,cl
c00270ec:	89 f9                	mov    ecx,edi
c00270ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00270f1:	09 cf                	or     edi,ecx
c00270f3:	88 d9                	mov    cl,bl
c00270f5:	d3 e8                	shr    eax,cl
c00270f7:	89 f1                	mov    ecx,esi
c00270f9:	d3 e2                	shl    edx,cl
c00270fb:	85 d2                	test   edx,edx
c00270fd:	0f 95 c2             	setne  dl
c0027100:	0f b6 d2             	movzx  edx,dl
c0027103:	09 d7                	or     edi,edx
c0027105:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027108:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002710b:	29 fa                	sub    edx,edi
c002710d:	19 c6                	sbb    esi,eax
c002710f:	eb be                	jmp    c00270cf <__adddf3+0x43c>
c0027111:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027114:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027117:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002711d:	75 6a                	jne    c0027189 <__adddf3+0x4f6>
c002711f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027123:	75 58                	jne    c002717d <__adddf3+0x4ea>
c0027125:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027128:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002712b:	89 d6                	mov    esi,edx
c002712d:	09 c6                	or     esi,eax
c002712f:	75 17                	jne    c0027148 <__adddf3+0x4b5>
c0027131:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027134:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027137:	85 db                	test   ebx,ebx
c0027139:	0f 85 99 01 00 00    	jne    c00272d8 <__adddf3+0x645>
c002713f:	31 ff                	xor    edi,edi
c0027141:	31 c9                	xor    ecx,ecx
c0027143:	e9 90 01 00 00       	jmp    c00272d8 <__adddf3+0x645>
c0027148:	85 db                	test   ebx,ebx
c002714a:	0f 84 88 01 00 00    	je     c00272d8 <__adddf3+0x645>
c0027150:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027153:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027156:	85 c0                	test   eax,eax
c0027158:	79 10                	jns    c002716a <__adddf3+0x4d7>
c002715a:	31 c9                	xor    ecx,ecx
c002715c:	f7 da                	neg    edx
c002715e:	0f 95 c1             	setne  cl
c0027161:	01 c8                	add    eax,ecx
c0027163:	f7 d8                	neg    eax
c0027165:	e9 2f 01 00 00       	jmp    c0027299 <__adddf3+0x606>
c002716a:	31 ff                	xor    edi,edi
c002716c:	31 c9                	xor    ecx,ecx
c002716e:	89 c3                	mov    ebx,eax
c0027170:	09 d3                	or     ebx,edx
c0027172:	0f 84 60 01 00 00    	je     c00272d8 <__adddf3+0x645>
c0027178:	e9 05 01 00 00       	jmp    c0027282 <__adddf3+0x5ef>
c002717d:	31 ff                	xor    edi,edi
c002717f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027184:	e9 4f 01 00 00       	jmp    c00272d8 <__adddf3+0x645>
c0027189:	89 c1                	mov    ecx,eax
c002718b:	89 d0                	mov    eax,edx
c002718d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027190:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027193:	89 ca                	mov    edx,ecx
c0027195:	85 c9                	test   ecx,ecx
c0027197:	79 2c                	jns    c00271c5 <__adddf3+0x532>
c0027199:	31 c9                	xor    ecx,ecx
c002719b:	f7 d8                	neg    eax
c002719d:	0f 95 c1             	setne  cl
c00271a0:	01 ca                	add    edx,ecx
c00271a2:	f7 da                	neg    edx
c00271a4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00271a7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00271aa:	eb 19                	jmp    c00271c5 <__adddf3+0x532>
c00271ac:	85 c0                	test   eax,eax
c00271ae:	0f 89 e5 00 00 00    	jns    c0027299 <__adddf3+0x606>
c00271b4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271b9:	89 c1                	mov    ecx,eax
c00271bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00271be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00271c1:	89 d0                	mov    eax,edx
c00271c3:	89 ca                	mov    edx,ecx
c00271c5:	85 d2                	test   edx,edx
c00271c7:	74 59                	je     c0027222 <__adddf3+0x58f>
c00271c9:	0f bd da             	bsr    ebx,edx
c00271cc:	83 f3 1f             	xor    ebx,0x1f
c00271cf:	88 d9                	mov    cl,bl
c00271d1:	d3 e2                	shl    edx,cl
c00271d3:	bf 20 00 00 00       	mov    edi,0x20
c00271d8:	89 f9                	mov    ecx,edi
c00271da:	29 d9                	sub    ecx,ebx
c00271dc:	89 c6                	mov    esi,eax
c00271de:	d3 ee                	shr    esi,cl
c00271e0:	09 d6                	or     esi,edx
c00271e2:	88 d9                	mov    cl,bl
c00271e4:	d3 e0                	shl    eax,cl
c00271e6:	89 c2                	mov    edx,eax
c00271e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271eb:	25 ff 07 00 00       	and    eax,0x7ff
c00271f0:	39 d8                	cmp    eax,ebx
c00271f2:	7f 22                	jg     c0027216 <__adddf3+0x583>
c00271f4:	29 c3                	sub    ebx,eax
c00271f6:	43                   	inc    ebx
c00271f7:	88 d9                	mov    cl,bl
c00271f9:	d3 ea                	shr    edx,cl
c00271fb:	29 df                	sub    edi,ebx
c00271fd:	89 f9                	mov    ecx,edi
c00271ff:	89 f0                	mov    eax,esi
c0027201:	d3 e0                	shl    eax,cl
c0027203:	09 c2                	or     edx,eax
c0027205:	89 f0                	mov    eax,esi
c0027207:	88 d9                	mov    cl,bl
c0027209:	d3 e8                	shr    eax,cl
c002720b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002720e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027214:	eb 6f                	jmp    c0027285 <__adddf3+0x5f2>
c0027216:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027219:	29 d8                	sub    eax,ebx
c002721b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002721e:	89 f0                	mov    eax,esi
c0027220:	eb 59                	jmp    c002727b <__adddf3+0x5e8>
c0027222:	85 c0                	test   eax,eax
c0027224:	74 6a                	je     c0027290 <__adddf3+0x5fd>
c0027226:	0f bd c8             	bsr    ecx,eax
c0027229:	83 f1 1f             	xor    ecx,0x1f
c002722c:	d3 e0                	shl    eax,cl
c002722e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027231:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027237:	83 c1 20             	add    ecx,0x20
c002723a:	39 cb                	cmp    ebx,ecx
c002723c:	7f 35                	jg     c0027273 <__adddf3+0x5e0>
c002723e:	29 d9                	sub    ecx,ebx
c0027240:	8d 71 01             	lea    esi,[ecx+0x1]
c0027243:	83 fe 1f             	cmp    esi,0x1f
c0027246:	7e 09                	jle    c0027251 <__adddf3+0x5be>
c0027248:	83 e9 1f             	sub    ecx,0x1f
c002724b:	d3 e8                	shr    eax,cl
c002724d:	89 c3                	mov    ebx,eax
c002724f:	eb 11                	jmp    c0027262 <__adddf3+0x5cf>
c0027251:	b9 20 00 00 00       	mov    ecx,0x20
c0027256:	29 f1                	sub    ecx,esi
c0027258:	89 c3                	mov    ebx,eax
c002725a:	d3 e3                	shl    ebx,cl
c002725c:	89 f1                	mov    ecx,esi
c002725e:	d3 e8                	shr    eax,cl
c0027260:	89 c2                	mov    edx,eax
c0027262:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027265:	25 00 f8 ff ff       	and    eax,0xfffff800
c002726a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002726d:	89 d0                	mov    eax,edx
c002726f:	89 da                	mov    edx,ebx
c0027271:	eb 26                	jmp    c0027299 <__adddf3+0x606>
c0027273:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027276:	29 cf                	sub    edi,ecx
c0027278:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002727b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027280:	eb 17                	jmp    c0027299 <__adddf3+0x606>
c0027282:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027285:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027288:	eb 0f                	jmp    c0027299 <__adddf3+0x606>
c002728a:	31 d2                	xor    edx,edx
c002728c:	31 c0                	xor    eax,eax
c002728e:	eb 09                	jmp    c0027299 <__adddf3+0x606>
c0027290:	89 c2                	mov    edx,eax
c0027292:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027299:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002729c:	c1 e1 14             	shl    ecx,0x14
c002729f:	89 c3                	mov    ebx,eax
c00272a1:	c1 eb 0b             	shr    ebx,0xb
c00272a4:	09 d9                	or     ecx,ebx
c00272a6:	89 d3                	mov    ebx,edx
c00272a8:	c1 eb 0b             	shr    ebx,0xb
c00272ab:	c1 e0 15             	shl    eax,0x15
c00272ae:	09 d8                	or     eax,ebx
c00272b0:	89 c7                	mov    edi,eax
c00272b2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00272b8:	0f 95 c0             	setne  al
c00272bb:	89 c6                	mov    esi,eax
c00272bd:	09 f3                	or     ebx,esi
c00272bf:	83 e3 01             	and    ebx,0x1
c00272c2:	c1 ea 0a             	shr    edx,0xa
c00272c5:	21 da                	and    edx,ebx
c00272c7:	89 f8                	mov    eax,edi
c00272c9:	01 d0                	add    eax,edx
c00272cb:	83 d1 00             	adc    ecx,0x0
c00272ce:	89 c7                	mov    edi,eax
c00272d0:	eb 06                	jmp    c00272d8 <__adddf3+0x645>
c00272d2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272d5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272d8:	89 f8                	mov    eax,edi
c00272da:	89 ca                	mov    edx,ecx
c00272dc:	83 c4 24             	add    esp,0x24
c00272df:	5b                   	pop    ebx
c00272e0:	5e                   	pop    esi
c00272e1:	5f                   	pop    edi
c00272e2:	5d                   	pop    ebp
c00272e3:	c3                   	ret    

c00272e4 <__subdf3>:
c00272e4:	55                   	push   ebp
c00272e5:	89 e5                	mov    ebp,esp
c00272e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00272ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00272ed:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00272f3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00272f6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00272f9:	5d                   	pop    ebp
c00272fa:	e9 94 f9 ff ff       	jmp    c0026c93 <__adddf3>

c00272ff <__negdf2>:
c00272ff:	55                   	push   ebp
c0027300:	89 e5                	mov    ebp,esp
c0027302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027305:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027308:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002730e:	5d                   	pop    ebp
c002730f:	c3                   	ret    

c0027310 <__muldf3>:
c0027310:	55                   	push   ebp
c0027311:	89 e5                	mov    ebp,esp
c0027313:	57                   	push   edi
c0027314:	56                   	push   esi
c0027315:	53                   	push   ebx
c0027316:	83 ec 24             	sub    esp,0x24
c0027319:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002731c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002731f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027322:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027325:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027328:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002732b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002732e:	89 c8                	mov    eax,ecx
c0027330:	c1 f8 14             	sar    eax,0x14
c0027333:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027336:	89 f8                	mov    eax,edi
c0027338:	89 fb                	mov    ebx,edi
c002733a:	c1 e3 0b             	shl    ebx,0xb
c002733d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027340:	c1 e1 0b             	shl    ecx,0xb
c0027343:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027349:	c1 e8 15             	shr    eax,0x15
c002734c:	09 c1                	or     ecx,eax
c002734e:	89 d6                	mov    esi,edx
c0027350:	89 d0                	mov    eax,edx
c0027352:	c1 f8 14             	sar    eax,0x14
c0027355:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027358:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002735b:	89 c3                	mov    ebx,eax
c002735d:	c1 e3 0b             	shl    ebx,0xb
c0027360:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027363:	c1 e6 0b             	shl    esi,0xb
c0027366:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002736c:	c1 e8 15             	shr    eax,0x15
c002736f:	09 c6                	or     esi,eax
c0027371:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027374:	25 ff 07 00 00       	and    eax,0x7ff
c0027379:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002737c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002737f:	25 ff 07 00 00       	and    eax,0x7ff
c0027384:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027387:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002738a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002738d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027394:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027397:	40                   	inc    eax
c0027398:	a9 fe 07 00 00       	test   eax,0x7fe
c002739d:	0f 85 8d 00 00 00    	jne    c0027430 <__muldf3+0x120>
c00273a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273a6:	09 c8                	or     eax,ecx
c00273a8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00273ac:	74 44                	je     c00273f2 <__muldf3+0xe2>
c00273ae:	85 c0                	test   eax,eax
c00273b0:	0f 85 31 02 00 00    	jne    c00275e7 <__muldf3+0x2d7>
c00273b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273b9:	40                   	inc    eax
c00273ba:	a9 fe 07 00 00       	test   eax,0x7fe
c00273bf:	75 13                	jne    c00273d4 <__muldf3+0xc4>
c00273c1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273c4:	09 f1                	or     ecx,esi
c00273c6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00273ca:	74 22                	je     c00273ee <__muldf3+0xde>
c00273cc:	85 c9                	test   ecx,ecx
c00273ce:	0f 85 0d 02 00 00    	jne    c00275e1 <__muldf3+0x2d1>
c00273d4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00273d8:	0f 89 09 02 00 00    	jns    c00275e7 <__muldf3+0x2d7>
c00273de:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00273e1:	05 00 00 00 80       	add    eax,0x80000000
c00273e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273e9:	e9 f9 01 00 00       	jmp    c00275e7 <__muldf3+0x2d7>
c00273ee:	85 c9                	test   ecx,ecx
c00273f0:	eb 2e                	jmp    c0027420 <__muldf3+0x110>
c00273f2:	85 c0                	test   eax,eax
c00273f4:	74 20                	je     c0027416 <__muldf3+0x106>
c00273f6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00273f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273fc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273ff:	c1 ef 1f             	shr    edi,0x1f
c0027402:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027405:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027408:	8d 43 ff             	lea    eax,[ebx-0x1]
c002740b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002740e:	09 f9                	or     ecx,edi
c0027410:	78 1e                	js     c0027430 <__muldf3+0x120>
c0027412:	89 c3                	mov    ebx,eax
c0027414:	eb e0                	jmp    c00273f6 <__muldf3+0xe6>
c0027416:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027419:	f7 d0                	not    eax
c002741b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027420:	75 b2                	jne    c00273d4 <__muldf3+0xc4>
c0027422:	31 ff                	xor    edi,edi
c0027424:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002742b:	e9 b7 01 00 00       	jmp    c00275e7 <__muldf3+0x2d7>
c0027430:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027433:	40                   	inc    eax
c0027434:	a9 fe 07 00 00       	test   eax,0x7fe
c0027439:	75 57                	jne    c0027492 <__muldf3+0x182>
c002743b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002743e:	09 f0                	or     eax,esi
c0027440:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027444:	74 23                	je     c0027469 <__muldf3+0x159>
c0027446:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002744a:	0f 89 91 01 00 00    	jns    c00275e1 <__muldf3+0x2d1>
c0027450:	85 c0                	test   eax,eax
c0027452:	0f 85 89 01 00 00    	jne    c00275e1 <__muldf3+0x2d1>
c0027458:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002745b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027461:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027464:	e9 7e 01 00 00       	jmp    c00275e7 <__muldf3+0x2d7>
c0027469:	85 c0                	test   eax,eax
c002746b:	75 0c                	jne    c0027479 <__muldf3+0x169>
c002746d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027471:	0f 89 6a 01 00 00    	jns    c00275e1 <__muldf3+0x2d1>
c0027477:	eb df                	jmp    c0027458 <__muldf3+0x148>
c0027479:	01 f6                	add    esi,esi
c002747b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002747e:	c1 ea 1f             	shr    edx,0x1f
c0027481:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027484:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027487:	8d 43 ff             	lea    eax,[ebx-0x1]
c002748a:	09 d6                	or     esi,edx
c002748c:	78 04                	js     c0027492 <__muldf3+0x182>
c002748e:	89 c3                	mov    ebx,eax
c0027490:	eb e7                	jmp    c0027479 <__muldf3+0x169>
c0027492:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027498:	81 ce 00 00 00 80    	or     esi,0x80000000
c002749e:	89 c8                	mov    eax,ecx
c00274a0:	f7 e6                	mul    esi
c00274a2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00274a5:	89 c7                	mov    edi,eax
c00274a7:	89 c8                	mov    eax,ecx
c00274a9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00274ac:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00274af:	89 c1                	mov    ecx,eax
c00274b1:	89 f0                	mov    eax,esi
c00274b3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00274b6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00274b9:	89 c6                	mov    esi,eax
c00274bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274be:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00274c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00274c4:	31 c0                	xor    eax,eax
c00274c6:	01 f1                	add    ecx,esi
c00274c8:	0f 92 c0             	setb   al
c00274cb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00274ce:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00274d1:	83 d6 00             	adc    esi,0x0
c00274d4:	01 c7                	add    edi,eax
c00274d6:	83 d6 00             	adc    esi,0x0
c00274d9:	01 ca                	add    edx,ecx
c00274db:	0f 92 c1             	setb   cl
c00274de:	0f b6 c9             	movzx  ecx,cl
c00274e1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00274e4:	83 d6 00             	adc    esi,0x0
c00274e7:	01 cf                	add    edi,ecx
c00274e9:	83 d6 00             	adc    esi,0x0
c00274ec:	31 c9                	xor    ecx,ecx
c00274ee:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00274f1:	0f 95 c1             	setne  cl
c00274f4:	09 cf                	or     edi,ecx
c00274f6:	85 f6                	test   esi,esi
c00274f8:	78 0c                	js     c0027506 <__muldf3+0x1f6>
c00274fa:	01 f6                	add    esi,esi
c00274fc:	89 f8                	mov    eax,edi
c00274fe:	c1 e8 1f             	shr    eax,0x1f
c0027501:	09 c6                	or     esi,eax
c0027503:	01 ff                	add    edi,edi
c0027505:	4b                   	dec    ebx
c0027506:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002750c:	0f 8f 85 00 00 00    	jg     c0027597 <__muldf3+0x287>
c0027512:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027518:	85 db                	test   ebx,ebx
c002751a:	0f 8f 84 00 00 00    	jg     c00275a4 <__muldf3+0x294>
c0027520:	83 fb cc             	cmp    ebx,0xffffffcc
c0027523:	7c 79                	jl     c002759e <__muldf3+0x28e>
c0027525:	ba 01 00 00 00       	mov    edx,0x1
c002752a:	29 da                	sub    edx,ebx
c002752c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027532:	83 fa 1f             	cmp    edx,0x1f
c0027535:	7e 30                	jle    c0027567 <__muldf3+0x257>
c0027537:	83 fa 20             	cmp    edx,0x20
c002753a:	75 0b                	jne    c0027547 <__muldf3+0x237>
c002753c:	31 c0                	xor    eax,eax
c002753e:	85 ff                	test   edi,edi
c0027540:	0f 95 c0             	setne  al
c0027543:	89 c7                	mov    edi,eax
c0027545:	eb 1a                	jmp    c0027561 <__muldf3+0x251>
c0027547:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002754a:	89 f0                	mov    eax,esi
c002754c:	d3 e0                	shl    eax,cl
c002754e:	09 f8                	or     eax,edi
c0027550:	0f 95 c0             	setne  al
c0027553:	0f b6 c0             	movzx  eax,al
c0027556:	89 c7                	mov    edi,eax
c0027558:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002755d:	29 d9                	sub    ecx,ebx
c002755f:	d3 ee                	shr    esi,cl
c0027561:	09 f7                	or     edi,esi
c0027563:	31 db                	xor    ebx,ebx
c0027565:	eb 3b                	jmp    c00275a2 <__muldf3+0x292>
c0027567:	83 c3 1f             	add    ebx,0x1f
c002756a:	89 f0                	mov    eax,esi
c002756c:	88 d9                	mov    cl,bl
c002756e:	d3 e0                	shl    eax,cl
c0027570:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027573:	89 f8                	mov    eax,edi
c0027575:	88 d1                	mov    cl,dl
c0027577:	d3 e8                	shr    eax,cl
c0027579:	89 c1                	mov    ecx,eax
c002757b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002757e:	09 c8                	or     eax,ecx
c0027580:	88 d9                	mov    cl,bl
c0027582:	d3 e7                	shl    edi,cl
c0027584:	31 db                	xor    ebx,ebx
c0027586:	85 ff                	test   edi,edi
c0027588:	0f 95 c3             	setne  bl
c002758b:	89 df                	mov    edi,ebx
c002758d:	09 c7                	or     edi,eax
c002758f:	88 d1                	mov    cl,dl
c0027591:	d3 ee                	shr    esi,cl
c0027593:	31 db                	xor    ebx,ebx
c0027595:	eb 0d                	jmp    c00275a4 <__muldf3+0x294>
c0027597:	bb ff 07 00 00       	mov    ebx,0x7ff
c002759c:	eb 02                	jmp    c00275a0 <__muldf3+0x290>
c002759e:	31 db                	xor    ebx,ebx
c00275a0:	31 ff                	xor    edi,edi
c00275a2:	31 f6                	xor    esi,esi
c00275a4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00275a7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00275aa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00275af:	09 c3                	or     ebx,eax
c00275b1:	c1 e3 14             	shl    ebx,0x14
c00275b4:	89 f0                	mov    eax,esi
c00275b6:	c1 e8 0b             	shr    eax,0xb
c00275b9:	09 c3                	or     ebx,eax
c00275bb:	89 f8                	mov    eax,edi
c00275bd:	c1 e8 0b             	shr    eax,0xb
c00275c0:	c1 e6 15             	shl    esi,0x15
c00275c3:	09 c6                	or     esi,eax
c00275c5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00275cb:	0f 95 c1             	setne  cl
c00275ce:	09 c8                	or     eax,ecx
c00275d0:	83 e0 01             	and    eax,0x1
c00275d3:	c1 ef 0a             	shr    edi,0xa
c00275d6:	21 c7                	and    edi,eax
c00275d8:	01 f7                	add    edi,esi
c00275da:	83 d3 00             	adc    ebx,0x0
c00275dd:	89 da                	mov    edx,ebx
c00275df:	eb 03                	jmp    c00275e4 <__muldf3+0x2d4>
c00275e1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00275e4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00275e7:	89 f8                	mov    eax,edi
c00275e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00275ec:	83 c4 24             	add    esp,0x24
c00275ef:	5b                   	pop    ebx
c00275f0:	5e                   	pop    esi
c00275f1:	5f                   	pop    edi
c00275f2:	5d                   	pop    ebp
c00275f3:	c3                   	ret    

c00275f4 <__divdf3>:
c00275f4:	55                   	push   ebp
c00275f5:	89 e5                	mov    ebp,esp
c00275f7:	57                   	push   edi
c00275f8:	56                   	push   esi
c00275f9:	53                   	push   ebx
c00275fa:	83 ec 2c             	sub    esp,0x2c
c00275fd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027600:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027603:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027606:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027609:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002760c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002760f:	89 ce                	mov    esi,ecx
c0027611:	89 c8                	mov    eax,ecx
c0027613:	c1 f8 14             	sar    eax,0x14
c0027616:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027619:	89 f8                	mov    eax,edi
c002761b:	89 fb                	mov    ebx,edi
c002761d:	c1 e3 0b             	shl    ebx,0xb
c0027620:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027623:	c1 e6 0b             	shl    esi,0xb
c0027626:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002762c:	c1 e8 15             	shr    eax,0x15
c002762f:	09 c6                	or     esi,eax
c0027631:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027634:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027637:	89 c2                	mov    edx,eax
c0027639:	c1 fa 14             	sar    edx,0x14
c002763c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002763f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027642:	89 de                	mov    esi,ebx
c0027644:	c1 e6 0b             	shl    esi,0xb
c0027647:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002764a:	c1 e0 0b             	shl    eax,0xb
c002764d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027652:	c1 eb 15             	shr    ebx,0x15
c0027655:	09 d8                	or     eax,ebx
c0027657:	89 c2                	mov    edx,eax
c0027659:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002765c:	25 ff 07 00 00       	and    eax,0x7ff
c0027661:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027664:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027667:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002766d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027670:	29 d8                	sub    eax,ebx
c0027672:	05 ff 03 00 00       	add    eax,0x3ff
c0027677:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002767a:	46                   	inc    esi
c002767b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027681:	0f 85 a5 00 00 00    	jne    c002772c <__divdf3+0x138>
c0027687:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002768a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002768d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027691:	74 2a                	je     c00276bd <__divdf3+0xc9>
c0027693:	85 f6                	test   esi,esi
c0027695:	0f 85 cc 02 00 00    	jne    c0027967 <__divdf3+0x373>
c002769b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002769e:	40                   	inc    eax
c002769f:	a9 fe 07 00 00       	test   eax,0x7fe
c00276a4:	75 26                	jne    c00276cc <__divdf3+0xd8>
c00276a6:	85 db                	test   ebx,ebx
c00276a8:	74 22                	je     c00276cc <__divdf3+0xd8>
c00276aa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00276ad:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00276b0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00276b3:	09 d0                	or     eax,edx
c00276b5:	0f 85 ac 02 00 00    	jne    c0027967 <__divdf3+0x373>
c00276bb:	eb 63                	jmp    c0027720 <__divdf3+0x12c>
c00276bd:	85 f6                	test   esi,esi
c00276bf:	75 22                	jne    c00276e3 <__divdf3+0xef>
c00276c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276c4:	40                   	inc    eax
c00276c5:	a9 fe 07 00 00       	test   eax,0x7fe
c00276ca:	74 36                	je     c0027702 <__divdf3+0x10e>
c00276cc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00276d0:	0f 89 91 02 00 00    	jns    c0027967 <__divdf3+0x373>
c00276d6:	89 f8                	mov    eax,edi
c00276d8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00276de:	e9 80 02 00 00       	jmp    c0027963 <__divdf3+0x36f>
c00276e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276e6:	01 f6                	add    esi,esi
c00276e8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00276eb:	c1 ef 1f             	shr    edi,0x1f
c00276ee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276f1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00276f4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00276f7:	09 f7                	or     edi,esi
c00276f9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00276fc:	78 2e                	js     c002772c <__divdf3+0x138>
c00276fe:	89 c8                	mov    eax,ecx
c0027700:	eb e1                	jmp    c00276e3 <__divdf3+0xef>
c0027702:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027705:	09 d0                	or     eax,edx
c0027707:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002770b:	74 0f                	je     c002771c <__divdf3+0x128>
c002770d:	85 c0                	test   eax,eax
c002770f:	74 bb                	je     c00276cc <__divdf3+0xd8>
c0027711:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027714:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027717:	e9 4b 02 00 00       	jmp    c0027967 <__divdf3+0x373>
c002771c:	85 c0                	test   eax,eax
c002771e:	75 ac                	jne    c00276cc <__divdf3+0xd8>
c0027720:	31 ff                	xor    edi,edi
c0027722:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027727:	e9 3b 02 00 00       	jmp    c0027967 <__divdf3+0x373>
c002772c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002772f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027732:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027738:	75 6b                	jne    c00277a5 <__divdf3+0x1b1>
c002773a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002773d:	09 d6                	or     esi,edx
c002773f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027743:	74 28                	je     c002776d <__divdf3+0x179>
c0027745:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027748:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002774b:	85 f6                	test   esi,esi
c002774d:	0f 85 14 02 00 00    	jne    c0027967 <__divdf3+0x373>
c0027753:	31 ff                	xor    edi,edi
c0027755:	31 c9                	xor    ecx,ecx
c0027757:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002775a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002775d:	0f 89 04 02 00 00    	jns    c0027967 <__divdf3+0x373>
c0027763:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027768:	e9 fa 01 00 00       	jmp    c0027967 <__divdf3+0x373>
c002776d:	85 f6                	test   esi,esi
c002776f:	75 1b                	jne    c002778c <__divdf3+0x198>
c0027771:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027774:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027777:	25 00 00 00 80       	and    eax,0x80000000
c002777c:	31 c9                	xor    ecx,ecx
c002777e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027783:	89 cf                	mov    edi,ecx
c0027785:	89 c1                	mov    ecx,eax
c0027787:	e9 db 01 00 00       	jmp    c0027967 <__divdf3+0x373>
c002778c:	01 d2                	add    edx,edx
c002778e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027791:	c1 eb 1f             	shr    ebx,0x1f
c0027794:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027797:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002779a:	8d 48 01             	lea    ecx,[eax+0x1]
c002779d:	09 da                	or     edx,ebx
c002779f:	78 04                	js     c00277a5 <__divdf3+0x1b1>
c00277a1:	89 c8                	mov    eax,ecx
c00277a3:	eb e7                	jmp    c002778c <__divdf3+0x198>
c00277a5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277a8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00277ae:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277b4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00277b7:	39 d6                	cmp    esi,edx
c00277b9:	77 0d                	ja     c00277c8 <__divdf3+0x1d4>
c00277bb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00277be:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00277c1:	72 1b                	jb     c00277de <__divdf3+0x1ea>
c00277c3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00277c6:	75 16                	jne    c00277de <__divdf3+0x1ea>
c00277c8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00277cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277ce:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00277d1:	83 de 00             	sbb    esi,0x0
c00277d4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00277d7:	ba 01 00 00 00       	mov    edx,0x1
c00277dc:	eb 02                	jmp    c00277e0 <__divdf3+0x1ec>
c00277de:	31 d2                	xor    edx,edx
c00277e0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00277e7:	31 ff                	xor    edi,edi
c00277e9:	01 ff                	add    edi,edi
c00277eb:	89 d1                	mov    ecx,edx
c00277ed:	c1 e9 1f             	shr    ecx,0x1f
c00277f0:	09 cf                	or     edi,ecx
c00277f2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00277f5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00277f8:	89 da                	mov    edx,ebx
c00277fa:	89 f3                	mov    ebx,esi
c00277fc:	8d 34 36             	lea    esi,[esi+esi*1]
c00277ff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027802:	c1 e9 1f             	shr    ecx,0x1f
c0027805:	09 ce                	or     esi,ecx
c0027807:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002780a:	01 c9                	add    ecx,ecx
c002780c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002780f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027812:	85 db                	test   ebx,ebx
c0027814:	78 29                	js     c002783f <__divdf3+0x24b>
c0027816:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027819:	72 07                	jb     c0027822 <__divdf3+0x22e>
c002781b:	75 3c                	jne    c0027859 <__divdf3+0x265>
c002781d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027820:	77 37                	ja     c0027859 <__divdf3+0x265>
c0027822:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027825:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027828:	31 d2                	xor    edx,edx
c002782a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002782d:	0f 97 c2             	seta   dl
c0027830:	29 d6                	sub    esi,edx
c0027832:	89 d9                	mov    ecx,ebx
c0027834:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027837:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002783a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002783d:	eb 17                	jmp    c0027856 <__divdf3+0x262>
c002783f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027842:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027845:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027848:	0f 97 c1             	seta   cl
c002784b:	0f b6 c9             	movzx  ecx,cl
c002784e:	29 ce                	sub    esi,ecx
c0027850:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027853:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027856:	83 ca 01             	or     edx,0x1
c0027859:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002785c:	75 8b                	jne    c00277e9 <__divdf3+0x1f5>
c002785e:	c1 e7 09             	shl    edi,0x9
c0027861:	89 d1                	mov    ecx,edx
c0027863:	c1 e9 17             	shr    ecx,0x17
c0027866:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027869:	09 f3                	or     ebx,esi
c002786b:	0f 95 c3             	setne  bl
c002786e:	0f b6 db             	movzx  ebx,bl
c0027871:	c1 e2 09             	shl    edx,0x9
c0027874:	09 d3                	or     ebx,edx
c0027876:	89 ca                	mov    edx,ecx
c0027878:	09 fa                	or     edx,edi
c002787a:	78 0c                	js     c0027888 <__divdf3+0x294>
c002787c:	01 d2                	add    edx,edx
c002787e:	89 d9                	mov    ecx,ebx
c0027880:	c1 e9 1f             	shr    ecx,0x1f
c0027883:	09 ca                	or     edx,ecx
c0027885:	01 db                	add    ebx,ebx
c0027887:	48                   	dec    eax
c0027888:	3d fe 07 00 00       	cmp    eax,0x7fe
c002788d:	0f 8f 83 00 00 00    	jg     c0027916 <__divdf3+0x322>
c0027893:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027899:	85 c0                	test   eax,eax
c002789b:	0f 8f 82 00 00 00    	jg     c0027923 <__divdf3+0x32f>
c00278a1:	83 f8 cc             	cmp    eax,0xffffffcc
c00278a4:	7c 77                	jl     c002791d <__divdf3+0x329>
c00278a6:	be 01 00 00 00       	mov    esi,0x1
c00278ab:	29 c6                	sub    esi,eax
c00278ad:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278b3:	83 fe 1f             	cmp    esi,0x1f
c00278b6:	7e 2f                	jle    c00278e7 <__divdf3+0x2f3>
c00278b8:	83 fe 20             	cmp    esi,0x20
c00278bb:	75 0a                	jne    c00278c7 <__divdf3+0x2d3>
c00278bd:	85 db                	test   ebx,ebx
c00278bf:	0f 95 c3             	setne  bl
c00278c2:	0f b6 db             	movzx  ebx,bl
c00278c5:	eb 1a                	jmp    c00278e1 <__divdf3+0x2ed>
c00278c7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00278ca:	89 d7                	mov    edi,edx
c00278cc:	d3 e7                	shl    edi,cl
c00278ce:	89 f9                	mov    ecx,edi
c00278d0:	09 d9                	or     ecx,ebx
c00278d2:	0f 95 c3             	setne  bl
c00278d5:	0f b6 db             	movzx  ebx,bl
c00278d8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00278dd:	29 c1                	sub    ecx,eax
c00278df:	d3 ea                	shr    edx,cl
c00278e1:	09 d3                	or     ebx,edx
c00278e3:	31 c0                	xor    eax,eax
c00278e5:	eb 3a                	jmp    c0027921 <__divdf3+0x32d>
c00278e7:	83 c0 1f             	add    eax,0x1f
c00278ea:	89 d7                	mov    edi,edx
c00278ec:	88 c1                	mov    cl,al
c00278ee:	d3 e7                	shl    edi,cl
c00278f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278f3:	89 df                	mov    edi,ebx
c00278f5:	89 f1                	mov    ecx,esi
c00278f7:	d3 ef                	shr    edi,cl
c00278f9:	89 f9                	mov    ecx,edi
c00278fb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00278fe:	09 cf                	or     edi,ecx
c0027900:	88 c1                	mov    cl,al
c0027902:	d3 e3                	shl    ebx,cl
c0027904:	85 db                	test   ebx,ebx
c0027906:	0f 95 c3             	setne  bl
c0027909:	0f b6 db             	movzx  ebx,bl
c002790c:	09 fb                	or     ebx,edi
c002790e:	89 f1                	mov    ecx,esi
c0027910:	d3 ea                	shr    edx,cl
c0027912:	31 c0                	xor    eax,eax
c0027914:	eb 0d                	jmp    c0027923 <__divdf3+0x32f>
c0027916:	b8 ff 07 00 00       	mov    eax,0x7ff
c002791b:	eb 02                	jmp    c002791f <__divdf3+0x32b>
c002791d:	31 c0                	xor    eax,eax
c002791f:	31 db                	xor    ebx,ebx
c0027921:	31 d2                	xor    edx,edx
c0027923:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027926:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027929:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002792f:	09 c8                	or     eax,ecx
c0027931:	c1 e0 14             	shl    eax,0x14
c0027934:	89 d1                	mov    ecx,edx
c0027936:	c1 e9 0b             	shr    ecx,0xb
c0027939:	09 c8                	or     eax,ecx
c002793b:	89 c6                	mov    esi,eax
c002793d:	89 d9                	mov    ecx,ebx
c002793f:	c1 e9 0b             	shr    ecx,0xb
c0027942:	c1 e2 15             	shl    edx,0x15
c0027945:	09 ca                	or     edx,ecx
c0027947:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002794d:	0f 95 c0             	setne  al
c0027950:	09 c1                	or     ecx,eax
c0027952:	83 e1 01             	and    ecx,0x1
c0027955:	c1 eb 0a             	shr    ebx,0xa
c0027958:	21 cb                	and    ebx,ecx
c002795a:	01 d3                	add    ebx,edx
c002795c:	89 d8                	mov    eax,ebx
c002795e:	83 d6 00             	adc    esi,0x0
c0027961:	89 f2                	mov    edx,esi
c0027963:	89 c7                	mov    edi,eax
c0027965:	89 d1                	mov    ecx,edx
c0027967:	89 f8                	mov    eax,edi
c0027969:	89 ca                	mov    edx,ecx
c002796b:	83 c4 2c             	add    esp,0x2c
c002796e:	5b                   	pop    ebx
c002796f:	5e                   	pop    esi
c0027970:	5f                   	pop    edi
c0027971:	5d                   	pop    ebp
c0027972:	c3                   	ret    

c0027973 <__floatsidf>:
c0027973:	55                   	push   ebp
c0027974:	89 e5                	mov    ebp,esp
c0027976:	56                   	push   esi
c0027977:	53                   	push   ebx
c0027978:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002797b:	85 db                	test   ebx,ebx
c002797d:	7e 15                	jle    c0027994 <__floatsidf+0x21>
c002797f:	0f bd cb             	bsr    ecx,ebx
c0027982:	83 f1 1f             	xor    ecx,0x1f
c0027985:	d3 e3                	shl    ebx,cl
c0027987:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002798d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027992:	eb 21                	jmp    c00279b5 <__floatsidf+0x42>
c0027994:	b8 00 00 00 00       	mov    eax,0x0
c0027999:	ba 00 00 00 00       	mov    edx,0x0
c002799e:	74 2a                	je     c00279ca <__floatsidf+0x57>
c00279a0:	f7 db                	neg    ebx
c00279a2:	0f bd cb             	bsr    ecx,ebx
c00279a5:	83 f1 1f             	xor    ecx,0x1f
c00279a8:	d3 e3                	shl    ebx,cl
c00279aa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279b0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00279b5:	29 c8                	sub    eax,ecx
c00279b7:	c1 e0 14             	shl    eax,0x14
c00279ba:	89 c1                	mov    ecx,eax
c00279bc:	89 de                	mov    esi,ebx
c00279be:	c1 ee 0b             	shr    esi,0xb
c00279c1:	09 f1                	or     ecx,esi
c00279c3:	89 ca                	mov    edx,ecx
c00279c5:	c1 e3 15             	shl    ebx,0x15
c00279c8:	89 d8                	mov    eax,ebx
c00279ca:	5b                   	pop    ebx
c00279cb:	5e                   	pop    esi
c00279cc:	5d                   	pop    ebp
c00279cd:	c3                   	ret    

c00279ce <__floatunsidf>:
c00279ce:	55                   	push   ebp
c00279cf:	89 e5                	mov    ebp,esp
c00279d1:	56                   	push   esi
c00279d2:	53                   	push   ebx
c00279d3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279d6:	85 db                	test   ebx,ebx
c00279d8:	74 2a                	je     c0027a04 <__floatunsidf+0x36>
c00279da:	0f bd cb             	bsr    ecx,ebx
c00279dd:	83 f1 1f             	xor    ecx,0x1f
c00279e0:	d3 e3                	shl    ebx,cl
c00279e2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279e8:	b8 1e 04 00 00       	mov    eax,0x41e
c00279ed:	29 c8                	sub    eax,ecx
c00279ef:	c1 e0 14             	shl    eax,0x14
c00279f2:	89 c1                	mov    ecx,eax
c00279f4:	89 de                	mov    esi,ebx
c00279f6:	c1 ee 0b             	shr    esi,0xb
c00279f9:	09 f1                	or     ecx,esi
c00279fb:	89 ca                	mov    edx,ecx
c00279fd:	c1 e3 15             	shl    ebx,0x15
c0027a00:	89 d8                	mov    eax,ebx
c0027a02:	eb 04                	jmp    c0027a08 <__floatunsidf+0x3a>
c0027a04:	31 c0                	xor    eax,eax
c0027a06:	31 d2                	xor    edx,edx
c0027a08:	5b                   	pop    ebx
c0027a09:	5e                   	pop    esi
c0027a0a:	5d                   	pop    ebp
c0027a0b:	c3                   	ret    

c0027a0c <__fixdfsi>:
c0027a0c:	55                   	push   ebp
c0027a0d:	89 e5                	mov    ebp,esp
c0027a0f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a12:	89 d1                	mov    ecx,edx
c0027a14:	c1 e1 0b             	shl    ecx,0xb
c0027a17:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a20:	c1 e8 15             	shr    eax,0x15
c0027a23:	09 c1                	or     ecx,eax
c0027a25:	c1 fa 14             	sar    edx,0x14
c0027a28:	78 1f                	js     c0027a49 <__fixdfsi+0x3d>
c0027a2a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027a30:	31 c0                	xor    eax,eax
c0027a32:	83 fa 1e             	cmp    edx,0x1e
c0027a35:	77 40                	ja     c0027a77 <__fixdfsi+0x6b>
c0027a37:	89 c8                	mov    eax,ecx
c0027a39:	0d 00 00 00 80       	or     eax,0x80000000
c0027a3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a43:	29 d1                	sub    ecx,edx
c0027a45:	d3 e8                	shr    eax,cl
c0027a47:	eb 2e                	jmp    c0027a77 <__fixdfsi+0x6b>
c0027a49:	31 c0                	xor    eax,eax
c0027a4b:	81 c2 01 04 00 00    	add    edx,0x401
c0027a51:	78 24                	js     c0027a77 <__fixdfsi+0x6b>
c0027a53:	83 fa 1e             	cmp    edx,0x1e
c0027a56:	7e 09                	jle    c0027a61 <__fixdfsi+0x55>
c0027a58:	83 fa 1f             	cmp    edx,0x1f
c0027a5b:	75 18                	jne    c0027a75 <__fixdfsi+0x69>
c0027a5d:	85 c9                	test   ecx,ecx
c0027a5f:	75 14                	jne    c0027a75 <__fixdfsi+0x69>
c0027a61:	89 c8                	mov    eax,ecx
c0027a63:	0d 00 00 00 80       	or     eax,0x80000000
c0027a68:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a6d:	29 d1                	sub    ecx,edx
c0027a6f:	d3 e8                	shr    eax,cl
c0027a71:	f7 d8                	neg    eax
c0027a73:	eb 02                	jmp    c0027a77 <__fixdfsi+0x6b>
c0027a75:	31 c0                	xor    eax,eax
c0027a77:	5d                   	pop    ebp
c0027a78:	c3                   	ret    

c0027a79 <__fixunsdfsi>:
c0027a79:	55                   	push   ebp
c0027a7a:	89 e5                	mov    ebp,esp
c0027a7c:	53                   	push   ebx
c0027a7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027a80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a83:	89 d3                	mov    ebx,edx
c0027a85:	c1 fb 14             	sar    ebx,0x14
c0027a88:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027a8e:	31 c0                	xor    eax,eax
c0027a90:	83 fb 1f             	cmp    ebx,0x1f
c0027a93:	77 1d                	ja     c0027ab2 <__fixunsdfsi+0x39>
c0027a95:	89 d0                	mov    eax,edx
c0027a97:	c1 e0 0b             	shl    eax,0xb
c0027a9a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a9f:	c1 e9 15             	shr    ecx,0x15
c0027aa2:	09 c8                	or     eax,ecx
c0027aa4:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aae:	29 d9                	sub    ecx,ebx
c0027ab0:	d3 e8                	shr    eax,cl
c0027ab2:	5b                   	pop    ebx
c0027ab3:	5d                   	pop    ebp
c0027ab4:	c3                   	ret    

c0027ab5 <__cmpdf2>:
c0027ab5:	55                   	push   ebp
c0027ab6:	89 e5                	mov    ebp,esp
c0027ab8:	57                   	push   edi
c0027ab9:	56                   	push   esi
c0027aba:	53                   	push   ebx
c0027abb:	83 ec 0c             	sub    esp,0xc
c0027abe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ac1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ac4:	89 ca                	mov    edx,ecx
c0027ac6:	c1 ea 14             	shr    edx,0x14
c0027ac9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027acf:	89 cb                	mov    ebx,ecx
c0027ad1:	c1 fb 1f             	sar    ebx,0x1f
c0027ad4:	31 da                	xor    edx,ebx
c0027ad6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ad9:	89 df                	mov    edi,ebx
c0027adb:	c1 e7 0b             	shl    edi,0xb
c0027ade:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ae1:	c1 e1 0b             	shl    ecx,0xb
c0027ae4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027aea:	c1 eb 15             	shr    ebx,0x15
c0027aed:	09 d9                	or     ecx,ebx
c0027aef:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027af2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027af5:	89 ce                	mov    esi,ecx
c0027af7:	c1 ee 14             	shr    esi,0x14
c0027afa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b00:	89 cb                	mov    ebx,ecx
c0027b02:	c1 fb 1f             	sar    ebx,0x1f
c0027b05:	31 de                	xor    esi,ebx
c0027b07:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027b0a:	89 df                	mov    edi,ebx
c0027b0c:	c1 e7 0b             	shl    edi,0xb
c0027b0f:	c1 e1 0b             	shl    ecx,0xb
c0027b12:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b18:	c1 eb 15             	shr    ebx,0x15
c0027b1b:	09 d9                	or     ecx,ebx
c0027b1d:	89 d3                	mov    ebx,edx
c0027b1f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b25:	43                   	inc    ebx
c0027b26:	83 fb 01             	cmp    ebx,0x1
c0027b29:	77 08                	ja     c0027b33 <__cmpdf2+0x7e>
c0027b2b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b2e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b31:	75 68                	jne    c0027b9b <__cmpdf2+0xe6>
c0027b33:	89 f3                	mov    ebx,esi
c0027b35:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b3b:	43                   	inc    ebx
c0027b3c:	83 fb 01             	cmp    ebx,0x1
c0027b3f:	77 06                	ja     c0027b47 <__cmpdf2+0x92>
c0027b41:	89 fb                	mov    ebx,edi
c0027b43:	09 cb                	or     ebx,ecx
c0027b45:	75 54                	jne    c0027b9b <__cmpdf2+0xe6>
c0027b47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b4a:	09 f8                	or     eax,edi
c0027b4c:	09 c8                	or     eax,ecx
c0027b4e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027b51:	75 12                	jne    c0027b65 <__cmpdf2+0xb0>
c0027b53:	8d 42 01             	lea    eax,[edx+0x1]
c0027b56:	83 f8 01             	cmp    eax,0x1
c0027b59:	77 0a                	ja     c0027b65 <__cmpdf2+0xb0>
c0027b5b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b5e:	31 c0                	xor    eax,eax
c0027b60:	83 fb 01             	cmp    ebx,0x1
c0027b63:	76 36                	jbe    c0027b9b <__cmpdf2+0xe6>
c0027b65:	b8 01 00 00 00       	mov    eax,0x1
c0027b6a:	39 f2                	cmp    edx,esi
c0027b6c:	7f 2d                	jg     c0027b9b <__cmpdf2+0xe6>
c0027b6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027b73:	7c 26                	jl     c0027b9b <__cmpdf2+0xe6>
c0027b75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027b78:	77 07                	ja     c0027b81 <__cmpdf2+0xcc>
c0027b7a:	72 16                	jb     c0027b92 <__cmpdf2+0xdd>
c0027b7c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027b7f:	76 0a                	jbe    c0027b8b <__cmpdf2+0xd6>
c0027b81:	89 d0                	mov    eax,edx
c0027b83:	c1 f8 1f             	sar    eax,0x1f
c0027b86:	83 c8 01             	or     eax,0x1
c0027b89:	eb 10                	jmp    c0027b9b <__cmpdf2+0xe6>
c0027b8b:	b8 00 00 00 00       	mov    eax,0x0
c0027b90:	73 09                	jae    c0027b9b <__cmpdf2+0xe6>
c0027b92:	89 d0                	mov    eax,edx
c0027b94:	c1 f8 1f             	sar    eax,0x1f
c0027b97:	83 e0 02             	and    eax,0x2
c0027b9a:	48                   	dec    eax
c0027b9b:	83 c4 0c             	add    esp,0xc
c0027b9e:	5b                   	pop    ebx
c0027b9f:	5e                   	pop    esi
c0027ba0:	5f                   	pop    edi
c0027ba1:	5d                   	pop    ebp
c0027ba2:	c3                   	ret    

c0027ba3 <__eqdf2>:
c0027ba3:	55                   	push   ebp
c0027ba4:	89 e5                	mov    ebp,esp
c0027ba6:	50                   	push   eax
c0027ba7:	6a 01                	push   0x1
c0027ba9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027baf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bb5:	e8 fb fe ff ff       	call   c0027ab5 <__cmpdf2>
c0027bba:	83 c4 18             	add    esp,0x18
c0027bbd:	c9                   	leave  
c0027bbe:	c3                   	ret    

c0027bbf <__nedf2>:
c0027bbf:	eb e2                	jmp    c0027ba3 <__eqdf2>

c0027bc1 <__gtdf2>:
c0027bc1:	55                   	push   ebp
c0027bc2:	89 e5                	mov    ebp,esp
c0027bc4:	50                   	push   eax
c0027bc5:	6a ff                	push   0xffffffff
c0027bc7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027bcd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bd3:	e8 dd fe ff ff       	call   c0027ab5 <__cmpdf2>
c0027bd8:	83 c4 18             	add    esp,0x18
c0027bdb:	c9                   	leave  
c0027bdc:	c3                   	ret    

c0027bdd <__gedf2>:
c0027bdd:	eb e2                	jmp    c0027bc1 <__gtdf2>

c0027bdf <__ltdf2>:
c0027bdf:	eb c2                	jmp    c0027ba3 <__eqdf2>

c0027be1 <__ledf2>:
c0027be1:	eb c0                	jmp    c0027ba3 <__eqdf2>

c0027be3 <__truncdfsf2>:
c0027be3:	55                   	push   ebp
c0027be4:	89 e5                	mov    ebp,esp
c0027be6:	57                   	push   edi
c0027be7:	56                   	push   esi
c0027be8:	53                   	push   ebx
c0027be9:	83 ec 0c             	sub    esp,0xc
c0027bec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027bef:	89 d1                	mov    ecx,edx
c0027bf1:	c1 f9 14             	sar    ecx,0x14
c0027bf4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027bf7:	89 df                	mov    edi,ebx
c0027bf9:	c1 e7 0b             	shl    edi,0xb
c0027bfc:	89 d0                	mov    eax,edx
c0027bfe:	c1 e0 0b             	shl    eax,0xb
c0027c01:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c06:	c1 eb 15             	shr    ebx,0x15
c0027c09:	09 d8                	or     eax,ebx
c0027c0b:	89 cb                	mov    ebx,ecx
c0027c0d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c13:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027c19:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027c1f:	0f 86 9e 00 00 00    	jbe    c0027cc3 <__truncdfsf2+0xe0>
c0027c25:	85 db                	test   ebx,ebx
c0027c27:	75 0a                	jne    c0027c33 <__truncdfsf2+0x50>
c0027c29:	c1 fa 17             	sar    edx,0x17
c0027c2c:	30 d2                	xor    dl,dl
c0027c2e:	e9 84 00 00 00       	jmp    c0027cb7 <__truncdfsf2+0xd4>
c0027c33:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027c39:	83 fe 83             	cmp    esi,0xffffff83
c0027c3c:	7d 4b                	jge    c0027c89 <__truncdfsf2+0xa6>
c0027c3e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027c43:	29 f1                	sub    ecx,esi
c0027c45:	83 f9 1f             	cmp    ecx,0x1f
c0027c48:	7f 6b                	jg     c0027cb5 <__truncdfsf2+0xd2>
c0027c4a:	0d 00 00 00 80       	or     eax,0x80000000
c0027c4f:	89 c3                	mov    ebx,eax
c0027c51:	d3 eb                	shr    ebx,cl
c0027c53:	be 01 00 00 00       	mov    esi,0x1
c0027c58:	d3 e6                	shl    esi,cl
c0027c5a:	4e                   	dec    esi
c0027c5b:	21 f0                	and    eax,esi
c0027c5d:	09 f8                	or     eax,edi
c0027c5f:	0f 95 c0             	setne  al
c0027c62:	0f b6 c0             	movzx  eax,al
c0027c65:	09 c3                	or     ebx,eax
c0027c67:	89 d9                	mov    ecx,ebx
c0027c69:	c1 e9 08             	shr    ecx,0x8
c0027c6c:	f6 c3 7f             	test   bl,0x7f
c0027c6f:	0f 95 c0             	setne  al
c0027c72:	09 c8                	or     eax,ecx
c0027c74:	83 e0 01             	and    eax,0x1
c0027c77:	c1 eb 07             	shr    ebx,0x7
c0027c7a:	21 c3                	and    ebx,eax
c0027c7c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027c82:	09 d1                	or     ecx,edx
c0027c84:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027c87:	eb 76                	jmp    c0027cff <__truncdfsf2+0x11c>
c0027c89:	83 c6 80             	add    esi,0xffffff80
c0027c8c:	7e 1d                	jle    c0027cab <__truncdfsf2+0xc8>
c0027c8e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027c94:	75 0b                	jne    c0027ca1 <__truncdfsf2+0xbe>
c0027c96:	09 f8                	or     eax,edi
c0027c98:	74 09                	je     c0027ca3 <__truncdfsf2+0xc0>
c0027c9a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027c9f:	eb 02                	jmp    c0027ca3 <__truncdfsf2+0xc0>
c0027ca1:	31 c0                	xor    eax,eax
c0027ca3:	c1 fa 17             	sar    edx,0x17
c0027ca6:	80 ca ff             	or     dl,0xff
c0027ca9:	eb 0e                	jmp    c0027cb9 <__truncdfsf2+0xd6>
c0027cab:	c1 fa 1f             	sar    edx,0x1f
c0027cae:	c1 e2 08             	shl    edx,0x8
c0027cb1:	09 ca                	or     edx,ecx
c0027cb3:	eb 04                	jmp    c0027cb9 <__truncdfsf2+0xd6>
c0027cb5:	31 d2                	xor    edx,edx
c0027cb7:	31 c0                	xor    eax,eax
c0027cb9:	c1 e2 17             	shl    edx,0x17
c0027cbc:	c1 e8 08             	shr    eax,0x8
c0027cbf:	09 d0                	or     eax,edx
c0027cc1:	eb 3c                	jmp    c0027cff <__truncdfsf2+0x11c>
c0027cc3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027cc9:	89 ca                	mov    edx,ecx
c0027ccb:	c1 fa 0b             	sar    edx,0xb
c0027cce:	c1 e2 08             	shl    edx,0x8
c0027cd1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027cd4:	31 db                	xor    ebx,ebx
c0027cd6:	85 ff                	test   edi,edi
c0027cd8:	0f 95 c3             	setne  bl
c0027cdb:	09 d8                	or     eax,ebx
c0027cdd:	89 c3                	mov    ebx,eax
c0027cdf:	c1 eb 08             	shr    ebx,0x8
c0027ce2:	a8 7f                	test   al,0x7f
c0027ce4:	0f 95 c2             	setne  dl
c0027ce7:	89 d6                	mov    esi,edx
c0027ce9:	09 de                	or     esi,ebx
c0027ceb:	83 e6 01             	and    esi,0x1
c0027cee:	c1 e8 07             	shr    eax,0x7
c0027cf1:	21 f0                	and    eax,esi
c0027cf3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027cf6:	09 ca                	or     edx,ecx
c0027cf8:	c1 e2 17             	shl    edx,0x17
c0027cfb:	09 da                	or     edx,ebx
c0027cfd:	01 d0                	add    eax,edx
c0027cff:	83 c4 0c             	add    esp,0xc
c0027d02:	5b                   	pop    ebx
c0027d03:	5e                   	pop    esi
c0027d04:	5f                   	pop    edi
c0027d05:	5d                   	pop    ebp
c0027d06:	c3                   	ret    

c0027d07 <__extendsfdf2>:
c0027d07:	55                   	push   ebp
c0027d08:	89 e5                	mov    ebp,esp
c0027d0a:	57                   	push   edi
c0027d0b:	56                   	push   esi
c0027d0c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d0f:	89 d1                	mov    ecx,edx
c0027d11:	c1 f9 17             	sar    ecx,0x17
c0027d14:	c1 e2 08             	shl    edx,0x8
c0027d17:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d1d:	89 c8                	mov    eax,ecx
c0027d1f:	80 e4 f8             	and    ah,0xf8
c0027d22:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d25:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027d2b:	75 27                	jne    c0027d54 <__extendsfdf2+0x4d>
c0027d2d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027d33:	75 18                	jne    c0027d4d <__extendsfdf2+0x46>
c0027d35:	85 d2                	test   edx,edx
c0027d37:	74 20                	je     c0027d59 <__extendsfdf2+0x52>
c0027d39:	41                   	inc    ecx
c0027d3a:	01 d2                	add    edx,edx
c0027d3c:	79 fb                	jns    c0027d39 <__extendsfdf2+0x32>
c0027d3e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d44:	29 c8                	sub    eax,ecx
c0027d46:	05 81 03 00 00       	add    eax,0x381
c0027d4b:	eb 0c                	jmp    c0027d59 <__extendsfdf2+0x52>
c0027d4d:	05 00 07 00 00       	add    eax,0x700
c0027d52:	eb 05                	jmp    c0027d59 <__extendsfdf2+0x52>
c0027d54:	05 80 03 00 00       	add    eax,0x380
c0027d59:	c1 e0 14             	shl    eax,0x14
c0027d5c:	89 c1                	mov    ecx,eax
c0027d5e:	89 d0                	mov    eax,edx
c0027d60:	c1 e8 0b             	shr    eax,0xb
c0027d63:	09 c1                	or     ecx,eax
c0027d65:	c1 e2 15             	shl    edx,0x15
c0027d68:	89 d0                	mov    eax,edx
c0027d6a:	89 ca                	mov    edx,ecx
c0027d6c:	5e                   	pop    esi
c0027d6d:	5f                   	pop    edi
c0027d6e:	5d                   	pop    ebp
c0027d6f:	c3                   	ret    

c0027d70 <fabs>:
c0027d70:	83 ec 0c             	sub    esp,0xc
c0027d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0027d7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027d7e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027d87:	dd 04 24             	fld    QWORD PTR [esp]
c0027d8a:	83 c4 0c             	add    esp,0xc
c0027d8d:	c3                   	ret    
c0027d8e:	66 90                	xchg   ax,ax

c0027d90 <lrint>:
c0027d90:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027d94:	83 ec 04             	sub    esp,0x4
c0027d97:	db 1c 24             	fistp  DWORD PTR [esp]
c0027d9a:	58                   	pop    eax
c0027d9b:	c3                   	ret    

c0027d9c <lrintf>:
c0027d9c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027da0:	83 ec 04             	sub    esp,0x4
c0027da3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027da6:	58                   	pop    eax
c0027da7:	c3                   	ret    

Disassembly of section .init:

c0027da8 <_init>:
c0027da8:	55                   	push   ebp
c0027da9:	89 e5                	mov    ebp,esp
c0027dab:	e8 68 83 fd ff       	call   c0000118 <frame_dummy>
c0027db0:	e8 63 e0 ff ff       	call   c0025e18 <__do_global_ctors_aux>
c0027db5:	5d                   	pop    ebp
c0027db6:	c3                   	ret    

Disassembly of section .fini:

c0027db7 <_fini>:
c0027db7:	55                   	push   ebp
c0027db8:	89 e5                	mov    ebp,esp
c0027dba:	e8 e9 82 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027dbf:	5d                   	pop    ebp
c0027dc0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027dc2 <Computer::~Computer()>:
c0027dc2:	83 ec 0c             	sub    esp,0xc
c0027dc5:	ba 08 99 02 c0       	mov    edx,0xc0029908
c0027dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dce:	89 10                	mov    DWORD PTR [eax],edx
c0027dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dd4:	83 ec 0c             	sub    esp,0xc
c0027dd7:	50                   	push   eax
c0027dd8:	e8 07 be fe ff       	call   c0013be4 <Device::~Device()>
c0027ddd:	83 c4 10             	add    esp,0x10
c0027de0:	90                   	nop
c0027de1:	83 c4 0c             	add    esp,0xc
c0027de4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027de6 <Computer::~Computer()>:
c0027de6:	83 ec 0c             	sub    esp,0xc
c0027de9:	83 ec 0c             	sub    esp,0xc
c0027dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027df0:	e8 cd ff ff ff       	call   c0027dc2 <Computer::~Computer()>
c0027df5:	83 c4 10             	add    esp,0x10
c0027df8:	83 ec 08             	sub    esp,0x8
c0027dfb:	68 ec 01 00 00       	push   0x1ec
c0027e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e04:	e8 02 aa fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0027e09:	83 c4 10             	add    esp,0x10
c0027e0c:	83 c4 0c             	add    esp,0xc
c0027e0f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027e10 <idleCommon()>:
c0027e10:	83 ec 0c             	sub    esp,0xc
c0027e13:	e8 a2 56 ff ff       	call   c001d4ba <lockScheduler()>
c0027e18:	e8 d9 59 ff ff       	call   c001d7f6 <schedule()>
c0027e1d:	83 c4 0c             	add    esp,0xc
c0027e20:	e9 97 56 ff ff       	jmp    c001d4bc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027e26 <LinkedList<UnixFile>::~LinkedList()>:
c0027e26:	90                   	nop
c0027e27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027e28 <LinkedList<UnixFile>::LinkedList()>:
c0027e28:	83 ec 0c             	sub    esp,0xc
c0027e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e6b:	83 ec 0c             	sub    esp,0xc
c0027e6e:	68 c6 9b 02 c0       	push   0xc0029bc6
c0027e73:	e8 73 aa fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0027e78:	83 c4 10             	add    esp,0x10
c0027e7b:	90                   	nop
c0027e7c:	83 c4 0c             	add    esp,0xc
c0027e7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027e80 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027e80:	83 ec 0c             	sub    esp,0xc
c0027e83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027e88:	75 10                	jne    c0027e9a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027e8a:	83 ec 0c             	sub    esp,0xc
c0027e8d:	68 e0 9b 02 c0       	push   0xc0029be0
c0027e92:	e8 c8 1f ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027e97:	83 c4 10             	add    esp,0x10
c0027e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ea0:	85 c0                	test   eax,eax
c0027ea2:	74 34                	je     c0027ed8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eab:	85 c0                	test   eax,eax
c0027ead:	74 29                	je     c0027ed8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027eba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ec1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ec5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ecf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ed6:	eb 65                	jmp    c0027f3d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ede:	85 c0                	test   eax,eax
c0027ee0:	75 4b                	jne    c0027f2d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ee9:	85 c0                	test   eax,eax
c0027eeb:	75 40                	jne    c0027f2d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ef5:	89 10                	mov    DWORD PTR [eax],edx
c0027ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027efb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027eff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f17:	85 c0                	test   eax,eax
c0027f19:	74 22                	je     c0027f3d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f1b:	83 ec 0c             	sub    esp,0xc
c0027f1e:	68 02 9c 02 c0       	push   0xc0029c02
c0027f23:	e8 37 1f ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027f28:	83 c4 10             	add    esp,0x10
c0027f2b:	eb 10                	jmp    c0027f3d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f2d:	83 ec 0c             	sub    esp,0xc
c0027f30:	68 0c 9c 02 c0       	push   0xc0029c0c
c0027f35:	e8 25 1f ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027f3a:	83 c4 10             	add    esp,0x10
c0027f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f44:	8d 50 01             	lea    edx,[eax+0x1]
c0027f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f4e:	90                   	nop
c0027f4f:	83 c4 0c             	add    esp,0xc
c0027f52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027f54 <LinkedList<UnixFile>::getFirstElement()>:
c0027f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f58:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f5a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027f5c <LinkedList<UnixFile>::removeFirst()>:
c0027f5c:	83 ec 0c             	sub    esp,0xc
c0027f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f65:	85 c0                	test   eax,eax
c0027f67:	75 12                	jne    c0027f7b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027f69:	83 ec 0c             	sub    esp,0xc
c0027f6c:	68 18 9c 02 c0       	push   0xc0029c18
c0027f71:	e8 e9 1e ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027f76:	83 c4 10             	add    esp,0x10
c0027f79:	eb 7e                	jmp    c0027ff9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f85:	85 c0                	test   eax,eax
c0027f87:	74 10                	je     c0027f99 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027f89:	83 ec 0c             	sub    esp,0xc
c0027f8c:	68 63 9c 02 c0       	push   0xc0029c63
c0027f91:	e8 c9 1e ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027f96:	83 c4 10             	add    esp,0x10
c0027f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fa2:	85 c0                	test   eax,eax
c0027fa4:	75 33                	jne    c0027fd9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027faa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fc2:	83 f8 01             	cmp    eax,0x1
c0027fc5:	74 21                	je     c0027fe8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027fc7:	83 ec 0c             	sub    esp,0xc
c0027fca:	68 3c 9c 02 c0       	push   0xc0029c3c
c0027fcf:	e8 8b 1e ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0027fd4:	83 c4 10             	add    esp,0x10
c0027fd7:	eb 0f                	jmp    c0027fe8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fdf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe6:	89 10                	mov    DWORD PTR [eax],edx
c0027fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fef:	8d 50 ff             	lea    edx,[eax-0x1]
c0027ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027ff9:	83 c4 0c             	add    esp,0xc
c0027ffc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0027ffe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0027ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028002:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028005:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028006 <DriverlessDevice::~DriverlessDevice()>:
c0028006:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c002800b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002800f:	89 10                	mov    DWORD PTR [eax],edx
c0028011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028015:	50                   	push   eax
c0028016:	e8 c9 bb fe ff       	call   c0013be4 <Device::~Device()>
c002801b:	83 c4 04             	add    esp,0x4
c002801e:	90                   	nop
c002801f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028020 <DriverlessDevice::~DriverlessDevice()>:
c0028020:	83 ec 0c             	sub    esp,0xc
c0028023:	83 ec 0c             	sub    esp,0xc
c0028026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002802a:	e8 d7 ff ff ff       	call   c0028006 <DriverlessDevice::~DriverlessDevice()>
c002802f:	83 c4 10             	add    esp,0x10
c0028032:	83 ec 08             	sub    esp,0x8
c0028035:	68 58 01 00 00       	push   0x158
c002803a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002803e:	e8 c8 a7 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028043:	83 c4 10             	add    esp,0x10
c0028046:	83 c4 0c             	add    esp,0xc
c0028049:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002804a <LinkedList<Device>::addElement(Device*)>:
c002804a:	83 ec 0c             	sub    esp,0xc
c002804d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028052:	75 10                	jne    c0028064 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028054:	83 ec 0c             	sub    esp,0xc
c0028057:	68 e0 9b 02 c0       	push   0xc0029be0
c002805c:	e8 fe 1d ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0028061:	83 c4 10             	add    esp,0x10
c0028064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028068:	8b 00                	mov    eax,DWORD PTR [eax]
c002806a:	85 c0                	test   eax,eax
c002806c:	74 3a                	je     c00280a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002806e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028075:	85 c0                	test   eax,eax
c0028077:	74 2f                	je     c00280a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002807d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028080:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028084:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002808a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002808e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028092:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028099:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002809c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00280a6:	eb 68                	jmp    c0028110 <LinkedList<Device>::addElement(Device*)+0xc6>
c00280a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ae:	85 c0                	test   eax,eax
c00280b0:	75 4e                	jne    c0028100 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280b9:	85 c0                	test   eax,eax
c00280bb:	75 43                	jne    c0028100 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280c5:	89 10                	mov    DWORD PTR [eax],edx
c00280c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280d9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00280e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280ea:	85 c0                	test   eax,eax
c00280ec:	74 22                	je     c0028110 <LinkedList<Device>::addElement(Device*)+0xc6>
c00280ee:	83 ec 0c             	sub    esp,0xc
c00280f1:	68 02 9c 02 c0       	push   0xc0029c02
c00280f6:	e8 64 1d ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00280fb:	83 c4 10             	add    esp,0x10
c00280fe:	eb 10                	jmp    c0028110 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028100:	83 ec 0c             	sub    esp,0xc
c0028103:	68 0c 9c 02 c0       	push   0xc0029c0c
c0028108:	e8 52 1d ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002810d:	83 c4 10             	add    esp,0x10
c0028110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028114:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028117:	8d 50 01             	lea    edx,[eax+0x1]
c002811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002811e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028121:	90                   	nop
c0028122:	83 c4 0c             	add    esp,0xc
c0028125:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028126 <LinkedList<Device>::LinkedList()>:
c0028126:	83 ec 0c             	sub    esp,0xc
c0028129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002812d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028137:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002813e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028142:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002814d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028157:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002815e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028162:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028169:	83 ec 0c             	sub    esp,0xc
c002816c:	68 c6 9b 02 c0       	push   0xc0029bc6
c0028171:	e8 75 a7 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0028176:	83 c4 10             	add    esp,0x10
c0028179:	90                   	nop
c002817a:	83 c4 0c             	add    esp,0xc
c002817d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002817e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002817e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028182:	8b 00                	mov    eax,DWORD PTR [eax]
c0028184:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028186 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002818a:	8b 00                	mov    eax,DWORD PTR [eax]
c002818c:	85 c0                	test   eax,eax
c002818e:	75 0e                	jne    c002819e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028197:	85 c0                	test   eax,eax
c0028199:	75 03                	jne    c002819e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002819b:	b0 01                	mov    al,0x1
c002819d:	c3                   	ret    
c002819e:	b0 00                	mov    al,0x0
c00281a0:	90                   	nop
c00281a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00281a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00281a2:	83 ec 0c             	sub    esp,0xc
c00281a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00281ab:	85 c0                	test   eax,eax
c00281ad:	75 15                	jne    c00281c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00281af:	83 ec 0c             	sub    esp,0xc
c00281b2:	68 18 9c 02 c0       	push   0xc0029c18
c00281b7:	e8 a3 1c ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00281bc:	83 c4 10             	add    esp,0x10
c00281bf:	e9 88 00 00 00       	jmp    c002824c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00281c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00281ce:	85 c0                	test   eax,eax
c00281d0:	0f 95 c0             	setne  al
c00281d3:	84 c0                	test   al,al
c00281d5:	74 10                	je     c00281e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00281d7:	83 ec 0c             	sub    esp,0xc
c00281da:	68 63 9c 02 c0       	push   0xc0029c63
c00281df:	e8 7b 1c ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00281e4:	83 c4 10             	add    esp,0x10
c00281e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00281ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00281f0:	85 c0                	test   eax,eax
c00281f2:	0f 94 c0             	sete   al
c00281f5:	84 c0                	test   al,al
c00281f7:	74 33                	je     c002822c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00281f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028207:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028212:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028215:	83 f8 01             	cmp    eax,0x1
c0028218:	74 21                	je     c002823b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002821a:	83 ec 0c             	sub    esp,0xc
c002821d:	68 3c 9c 02 c0       	push   0xc0029c3c
c0028222:	e8 38 1c ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0028227:	83 c4 10             	add    esp,0x10
c002822a:	eb 0f                	jmp    c002823b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002822c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028230:	8b 00                	mov    eax,DWORD PTR [eax]
c0028232:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028239:	89 10                	mov    DWORD PTR [eax],edx
c002823b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002823f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028242:	8d 50 ff             	lea    edx,[eax-0x1]
c0028245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028249:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002824c:	83 c4 0c             	add    esp,0xc
c002824f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028250 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028250:	83 ec 0c             	sub    esp,0xc
c0028253:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028258:	75 10                	jne    c002826a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002825a:	83 ec 0c             	sub    esp,0xc
c002825d:	68 e0 9b 02 c0       	push   0xc0029be0
c0028262:	e8 f8 1b ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c0028267:	83 c4 10             	add    esp,0x10
c002826a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002826e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028270:	85 c0                	test   eax,eax
c0028272:	74 34                	je     c00282a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002827b:	85 c0                	test   eax,eax
c002827d:	74 29                	je     c00282a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028283:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028286:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002828a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002828d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028291:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028295:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002829c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002829f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00282a6:	eb 65                	jmp    c002830d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00282ae:	85 c0                	test   eax,eax
c00282b0:	75 4b                	jne    c00282fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282b9:	85 c0                	test   eax,eax
c00282bb:	75 40                	jne    c00282fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282c5:	89 10                	mov    DWORD PTR [eax],edx
c00282c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00282e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282e7:	85 c0                	test   eax,eax
c00282e9:	74 22                	je     c002830d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282eb:	83 ec 0c             	sub    esp,0xc
c00282ee:	68 02 9c 02 c0       	push   0xc0029c02
c00282f3:	e8 67 1b ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c00282f8:	83 c4 10             	add    esp,0x10
c00282fb:	eb 10                	jmp    c002830d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282fd:	83 ec 0c             	sub    esp,0xc
c0028300:	68 0c 9c 02 c0       	push   0xc0029c0c
c0028305:	e8 55 1b ff ff       	call   c0019e5f <Krnl::panic(char const*)>
c002830a:	83 c4 10             	add    esp,0x10
c002830d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028311:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028314:	8d 50 01             	lea    edx,[eax+0x1]
c0028317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002831b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002831e:	90                   	nop
c002831f:	83 c4 0c             	add    esp,0xc
c0028322:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028324 <ACPI::~ACPI()>:
c0028324:	83 ec 0c             	sub    esp,0xc
c0028327:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c002832c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028330:	89 10                	mov    DWORD PTR [eax],edx
c0028332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028336:	83 ec 0c             	sub    esp,0xc
c0028339:	50                   	push   eax
c002833a:	e8 a5 b8 fe ff       	call   c0013be4 <Device::~Device()>
c002833f:	83 c4 10             	add    esp,0x10
c0028342:	90                   	nop
c0028343:	83 c4 0c             	add    esp,0xc
c0028346:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028348 <ACPI::~ACPI()>:
c0028348:	83 ec 0c             	sub    esp,0xc
c002834b:	83 ec 0c             	sub    esp,0xc
c002834e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028352:	e8 cd ff ff ff       	call   c0028324 <ACPI::~ACPI()>
c0028357:	83 c4 10             	add    esp,0x10
c002835a:	83 ec 08             	sub    esp,0x8
c002835d:	68 68 12 00 00       	push   0x1268
c0028362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028366:	e8 a0 a4 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002836b:	83 c4 10             	add    esp,0x10
c002836e:	83 c4 0c             	add    esp,0xc
c0028371:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028372 <CPU::~CPU()>:
c0028372:	83 ec 0c             	sub    esp,0xc
c0028375:	ba f8 b0 02 c0       	mov    edx,0xc002b0f8
c002837a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837e:	89 10                	mov    DWORD PTR [eax],edx
c0028380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028384:	83 ec 0c             	sub    esp,0xc
c0028387:	50                   	push   eax
c0028388:	e8 57 b8 fe ff       	call   c0013be4 <Device::~Device()>
c002838d:	83 c4 10             	add    esp,0x10
c0028390:	90                   	nop
c0028391:	83 c4 0c             	add    esp,0xc
c0028394:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028396 <CPU::~CPU()>:
c0028396:	83 ec 0c             	sub    esp,0xc
c0028399:	83 ec 0c             	sub    esp,0xc
c002839c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283a0:	e8 cd ff ff ff       	call   c0028372 <CPU::~CPU()>
c00283a5:	83 c4 10             	add    esp,0x10
c00283a8:	83 ec 08             	sub    esp,0x8
c00283ab:	68 98 11 00 00       	push   0x1198
c00283b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283b4:	e8 52 a4 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00283b9:	83 c4 10             	add    esp,0x10
c00283bc:	83 c4 0c             	add    esp,0xc
c00283bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00283c0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00283c0:	90                   	nop
c00283c1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00283c2 <ThreadControlBlock::ThreadControlBlock()>:
c00283c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00283cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00283d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283dc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00283e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283e7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00283ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283f2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00283f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283fa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00283fe:	90                   	nop
c00283ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028400 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028400:	83 ec 0c             	sub    esp,0xc
c0028403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028407:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002840d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028411:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028427:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002842d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028431:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028443:	83 ec 0c             	sub    esp,0xc
c0028446:	68 c6 9b 02 c0       	push   0xc0029bc6
c002844b:	e8 9b a4 fe ff       	call   c00128eb <Dbg::kprintf(char const*, ...)>
c0028450:	83 c4 10             	add    esp,0x10
c0028453:	90                   	nop
c0028454:	83 c4 0c             	add    esp,0xc
c0028457:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028458 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002845c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002845f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028460 <Vm::_FPUState::_FPUState()>:
c0028460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028464:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002846b:	90                   	nop
c002846c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002846e <PCI::~PCI()>:
c002846e:	83 ec 0c             	sub    esp,0xc
c0028471:	ba 5c c0 02 c0       	mov    edx,0xc002c05c
c0028476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847a:	89 10                	mov    DWORD PTR [eax],edx
c002847c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028480:	83 ec 0c             	sub    esp,0xc
c0028483:	50                   	push   eax
c0028484:	e8 33 b1 fe ff       	call   c00135bc <Bus::~Bus()>
c0028489:	83 c4 10             	add    esp,0x10
c002848c:	90                   	nop
c002848d:	83 c4 0c             	add    esp,0xc
c0028490:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028492 <PCI::~PCI()>:
c0028492:	83 ec 0c             	sub    esp,0xc
c0028495:	83 ec 0c             	sub    esp,0xc
c0028498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002849c:	e8 cd ff ff ff       	call   c002846e <PCI::~PCI()>
c00284a1:	83 c4 10             	add    esp,0x10
c00284a4:	83 ec 08             	sub    esp,0x8
c00284a7:	68 58 01 00 00       	push   0x158
c00284ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284b0:	e8 56 a3 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00284b5:	83 c4 10             	add    esp,0x10
c00284b8:	83 c4 0c             	add    esp,0xc
c00284bb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00284bc <IDE::~IDE()>:
c00284bc:	83 ec 0c             	sub    esp,0xc
c00284bf:	ba c0 c2 02 c0       	mov    edx,0xc002c2c0
c00284c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c8:	89 10                	mov    DWORD PTR [eax],edx
c00284ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ce:	83 ec 0c             	sub    esp,0xc
c00284d1:	50                   	push   eax
c00284d2:	e8 fd bb fe ff       	call   c00140d4 <HardDiskController::~HardDiskController()>
c00284d7:	83 c4 10             	add    esp,0x10
c00284da:	90                   	nop
c00284db:	83 c4 0c             	add    esp,0xc
c00284de:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00284e0 <IDE::~IDE()>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	83 ec 0c             	sub    esp,0xc
c00284e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284ea:	e8 cd ff ff ff       	call   c00284bc <IDE::~IDE()>
c00284ef:	83 c4 10             	add    esp,0x10
c00284f2:	83 ec 08             	sub    esp,0x8
c00284f5:	68 70 02 00 00       	push   0x270
c00284fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284fe:	e8 08 a3 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028503:	83 c4 10             	add    esp,0x10
c0028506:	83 c4 0c             	add    esp,0xc
c0028509:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002850a <SATABus::~SATABus()>:
c002850a:	83 ec 0c             	sub    esp,0xc
c002850d:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c0028512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028516:	89 10                	mov    DWORD PTR [eax],edx
c0028518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851c:	83 ec 0c             	sub    esp,0xc
c002851f:	50                   	push   eax
c0028520:	e8 af bb fe ff       	call   c00140d4 <HardDiskController::~HardDiskController()>
c0028525:	83 c4 10             	add    esp,0x10
c0028528:	90                   	nop
c0028529:	83 c4 0c             	add    esp,0xc
c002852c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002852e <SATABus::~SATABus()>:
c002852e:	83 ec 0c             	sub    esp,0xc
c0028531:	83 ec 0c             	sub    esp,0xc
c0028534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028538:	e8 cd ff ff ff       	call   c002850a <SATABus::~SATABus()>
c002853d:	83 c4 10             	add    esp,0x10
c0028540:	83 ec 08             	sub    esp,0x8
c0028543:	68 64 01 00 00       	push   0x164
c0028548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002854c:	e8 ba a2 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028551:	83 c4 10             	add    esp,0x10
c0028554:	83 c4 0c             	add    esp,0xc
c0028557:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028558 <ATA::~ATA()>:
c0028558:	83 ec 0c             	sub    esp,0xc
c002855b:	ba 5c c4 02 c0       	mov    edx,0xc002c45c
c0028560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028564:	89 10                	mov    DWORD PTR [eax],edx
c0028566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856a:	83 ec 0c             	sub    esp,0xc
c002856d:	50                   	push   eax
c002856e:	e8 53 bc fe ff       	call   c00141c6 <PhysicalDisk::~PhysicalDisk()>
c0028573:	83 c4 10             	add    esp,0x10
c0028576:	90                   	nop
c0028577:	83 c4 0c             	add    esp,0xc
c002857a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002857c <ATA::~ATA()>:
c002857c:	83 ec 0c             	sub    esp,0xc
c002857f:	83 ec 0c             	sub    esp,0xc
c0028582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028586:	e8 cd ff ff ff       	call   c0028558 <ATA::~ATA()>
c002858b:	83 c4 10             	add    esp,0x10
c002858e:	83 ec 08             	sub    esp,0x8
c0028591:	68 7c 01 00 00       	push   0x17c
c0028596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002859a:	e8 6c a2 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002859f:	83 c4 10             	add    esp,0x10
c00285a2:	83 c4 0c             	add    esp,0xc
c00285a5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00285a6 <ATAPI::~ATAPI()>:
c00285a6:	83 ec 0c             	sub    esp,0xc
c00285a9:	ba 94 c4 02 c0       	mov    edx,0xc002c494
c00285ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b2:	89 10                	mov    DWORD PTR [eax],edx
c00285b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b8:	83 ec 0c             	sub    esp,0xc
c00285bb:	50                   	push   eax
c00285bc:	e8 05 bc fe ff       	call   c00141c6 <PhysicalDisk::~PhysicalDisk()>
c00285c1:	83 c4 10             	add    esp,0x10
c00285c4:	90                   	nop
c00285c5:	83 c4 0c             	add    esp,0xc
c00285c8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00285ca <ATAPI::~ATAPI()>:
c00285ca:	83 ec 0c             	sub    esp,0xc
c00285cd:	83 ec 0c             	sub    esp,0xc
c00285d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285d4:	e8 cd ff ff ff       	call   c00285a6 <ATAPI::~ATAPI()>
c00285d9:	83 c4 10             	add    esp,0x10
c00285dc:	83 ec 08             	sub    esp,0x8
c00285df:	68 80 01 00 00       	push   0x180
c00285e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285e8:	e8 1e a2 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00285ed:	83 c4 10             	add    esp,0x10
c00285f0:	83 c4 0c             	add    esp,0xc
c00285f3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00285f4 <SATA::~SATA()>:
c00285f4:	83 ec 0c             	sub    esp,0xc
c00285f7:	ba 10 c5 02 c0       	mov    edx,0xc002c510
c00285fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028600:	89 10                	mov    DWORD PTR [eax],edx
c0028602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028606:	83 ec 0c             	sub    esp,0xc
c0028609:	50                   	push   eax
c002860a:	e8 b7 bb fe ff       	call   c00141c6 <PhysicalDisk::~PhysicalDisk()>
c002860f:	83 c4 10             	add    esp,0x10
c0028612:	90                   	nop
c0028613:	83 c4 0c             	add    esp,0xc
c0028616:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028618 <SATA::~SATA()>:
c0028618:	83 ec 0c             	sub    esp,0xc
c002861b:	83 ec 0c             	sub    esp,0xc
c002861e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028622:	e8 cd ff ff ff       	call   c00285f4 <SATA::~SATA()>
c0028627:	83 c4 10             	add    esp,0x10
c002862a:	83 ec 08             	sub    esp,0x8
c002862d:	68 7c 01 00 00       	push   0x17c
c0028632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028636:	e8 d0 a1 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002863b:	83 c4 10             	add    esp,0x10
c002863e:	83 c4 0c             	add    esp,0xc
c0028641:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028642 <SATAPI::~SATAPI()>:
c0028642:	83 ec 0c             	sub    esp,0xc
c0028645:	ba ec c5 02 c0       	mov    edx,0xc002c5ec
c002864a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864e:	89 10                	mov    DWORD PTR [eax],edx
c0028650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028654:	83 ec 0c             	sub    esp,0xc
c0028657:	50                   	push   eax
c0028658:	e8 69 bb fe ff       	call   c00141c6 <PhysicalDisk::~PhysicalDisk()>
c002865d:	83 c4 10             	add    esp,0x10
c0028660:	90                   	nop
c0028661:	83 c4 0c             	add    esp,0xc
c0028664:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028666 <SATAPI::~SATAPI()>:
c0028666:	83 ec 0c             	sub    esp,0xc
c0028669:	83 ec 0c             	sub    esp,0xc
c002866c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028670:	e8 cd ff ff ff       	call   c0028642 <SATAPI::~SATAPI()>
c0028675:	83 c4 10             	add    esp,0x10
c0028678:	83 ec 08             	sub    esp,0x8
c002867b:	68 80 01 00 00       	push   0x180
c0028680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028684:	e8 82 a1 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028689:	83 c4 10             	add    esp,0x10
c002868c:	83 c4 0c             	add    esp,0xc
c002868f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028690 <AVX::~AVX()>:
c0028690:	83 ec 0c             	sub    esp,0xc
c0028693:	ba 2c c6 02 c0       	mov    edx,0xc002c62c
c0028698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869c:	89 10                	mov    DWORD PTR [eax],edx
c002869e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a2:	83 ec 0c             	sub    esp,0xc
c00286a5:	50                   	push   eax
c00286a6:	e8 9f bb fe ff       	call   c001424a <FPU::~FPU()>
c00286ab:	83 c4 10             	add    esp,0x10
c00286ae:	90                   	nop
c00286af:	83 c4 0c             	add    esp,0xc
c00286b2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00286b4 <AVX::~AVX()>:
c00286b4:	83 ec 0c             	sub    esp,0xc
c00286b7:	83 ec 0c             	sub    esp,0xc
c00286ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286be:	e8 cd ff ff ff       	call   c0028690 <AVX::~AVX()>
c00286c3:	83 c4 10             	add    esp,0x10
c00286c6:	83 ec 08             	sub    esp,0x8
c00286c9:	68 58 01 00 00       	push   0x158
c00286ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d2:	e8 34 a1 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00286d7:	83 c4 10             	add    esp,0x10
c00286da:	83 c4 0c             	add    esp,0xc
c00286dd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00286de <MMX::~MMX()>:
c00286de:	83 ec 0c             	sub    esp,0xc
c00286e1:	ba 6c c6 02 c0       	mov    edx,0xc002c66c
c00286e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ea:	89 10                	mov    DWORD PTR [eax],edx
c00286ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f0:	83 ec 0c             	sub    esp,0xc
c00286f3:	50                   	push   eax
c00286f4:	e8 51 bb fe ff       	call   c001424a <FPU::~FPU()>
c00286f9:	83 c4 10             	add    esp,0x10
c00286fc:	90                   	nop
c00286fd:	83 c4 0c             	add    esp,0xc
c0028700:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028702 <MMX::~MMX()>:
c0028702:	83 ec 0c             	sub    esp,0xc
c0028705:	83 ec 0c             	sub    esp,0xc
c0028708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002870c:	e8 cd ff ff ff       	call   c00286de <MMX::~MMX()>
c0028711:	83 c4 10             	add    esp,0x10
c0028714:	83 ec 08             	sub    esp,0x8
c0028717:	68 58 01 00 00       	push   0x158
c002871c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028720:	e8 e6 a0 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028725:	83 c4 10             	add    esp,0x10
c0028728:	83 c4 0c             	add    esp,0xc
c002872b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002872c <SSE::~SSE()>:
c002872c:	83 ec 0c             	sub    esp,0xc
c002872f:	ba ac c6 02 c0       	mov    edx,0xc002c6ac
c0028734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028738:	89 10                	mov    DWORD PTR [eax],edx
c002873a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873e:	83 ec 0c             	sub    esp,0xc
c0028741:	50                   	push   eax
c0028742:	e8 03 bb fe ff       	call   c001424a <FPU::~FPU()>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	90                   	nop
c002874b:	83 c4 0c             	add    esp,0xc
c002874e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028750 <SSE::~SSE()>:
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	83 ec 0c             	sub    esp,0xc
c0028756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002875a:	e8 cd ff ff ff       	call   c002872c <SSE::~SSE()>
c002875f:	83 c4 10             	add    esp,0x10
c0028762:	83 ec 08             	sub    esp,0x8
c0028765:	68 58 01 00 00       	push   0x158
c002876a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002876e:	e8 98 a0 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028773:	83 c4 10             	add    esp,0x10
c0028776:	83 c4 0c             	add    esp,0xc
c0028779:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002877a <x87::~x87()>:
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	ba ec c6 02 c0       	mov    edx,0xc002c6ec
c0028782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028786:	89 10                	mov    DWORD PTR [eax],edx
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	83 ec 0c             	sub    esp,0xc
c002878f:	50                   	push   eax
c0028790:	e8 b5 ba fe ff       	call   c001424a <FPU::~FPU()>
c0028795:	83 c4 10             	add    esp,0x10
c0028798:	90                   	nop
c0028799:	83 c4 0c             	add    esp,0xc
c002879c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002879e <x87::~x87()>:
c002879e:	83 ec 0c             	sub    esp,0xc
c00287a1:	83 ec 0c             	sub    esp,0xc
c00287a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287a8:	e8 cd ff ff ff       	call   c002877a <x87::~x87()>
c00287ad:	83 c4 10             	add    esp,0x10
c00287b0:	83 ec 08             	sub    esp,0x8
c00287b3:	68 58 01 00 00       	push   0x158
c00287b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287bc:	e8 4a a0 fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00287c1:	83 c4 10             	add    esp,0x10
c00287c4:	83 c4 0c             	add    esp,0xc
c00287c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00287c8 <IOAPIC::~IOAPIC()>:
c00287c8:	83 ec 0c             	sub    esp,0xc
c00287cb:	ba 44 c8 02 c0       	mov    edx,0xc002c844
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	89 10                	mov    DWORD PTR [eax],edx
c00287d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287da:	83 ec 0c             	sub    esp,0xc
c00287dd:	50                   	push   eax
c00287de:	e8 01 b4 fe ff       	call   c0013be4 <Device::~Device()>
c00287e3:	83 c4 10             	add    esp,0x10
c00287e6:	90                   	nop
c00287e7:	83 c4 0c             	add    esp,0xc
c00287ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00287ec <IOAPIC::~IOAPIC()>:
c00287ec:	83 ec 0c             	sub    esp,0xc
c00287ef:	83 ec 0c             	sub    esp,0xc
c00287f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287f6:	e8 cd ff ff ff       	call   c00287c8 <IOAPIC::~IOAPIC()>
c00287fb:	83 c4 10             	add    esp,0x10
c00287fe:	83 ec 08             	sub    esp,0x8
c0028801:	68 68 01 00 00       	push   0x168
c0028806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002880a:	e8 fc 9f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002880f:	83 c4 10             	add    esp,0x10
c0028812:	83 c4 0c             	add    esp,0xc
c0028815:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028816 <APIC::~APIC()>:
c0028816:	83 ec 0c             	sub    esp,0xc
c0028819:	ba fc c7 02 c0       	mov    edx,0xc002c7fc
c002881e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028822:	89 10                	mov    DWORD PTR [eax],edx
c0028824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	50                   	push   eax
c002882c:	e8 e3 be fe ff       	call   c0014714 <InterruptController::~InterruptController()>
c0028831:	83 c4 10             	add    esp,0x10
c0028834:	90                   	nop
c0028835:	83 c4 0c             	add    esp,0xc
c0028838:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002883a <APIC::~APIC()>:
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	83 ec 0c             	sub    esp,0xc
c0028840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028844:	e8 cd ff ff ff       	call   c0028816 <APIC::~APIC()>
c0028849:	83 c4 10             	add    esp,0x10
c002884c:	83 ec 08             	sub    esp,0x8
c002884f:	68 58 21 00 00       	push   0x2158
c0028854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028858:	e8 ae 9f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c002885d:	83 c4 10             	add    esp,0x10
c0028860:	83 c4 0c             	add    esp,0xc
c0028863:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028864 <PIC::~PIC()>:
c0028864:	83 ec 0c             	sub    esp,0xc
c0028867:	ba 94 c8 02 c0       	mov    edx,0xc002c894
c002886c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028870:	89 10                	mov    DWORD PTR [eax],edx
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	83 ec 0c             	sub    esp,0xc
c0028879:	50                   	push   eax
c002887a:	e8 95 be fe ff       	call   c0014714 <InterruptController::~InterruptController()>
c002887f:	83 c4 10             	add    esp,0x10
c0028882:	90                   	nop
c0028883:	83 c4 0c             	add    esp,0xc
c0028886:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028888 <PIC::~PIC()>:
c0028888:	83 ec 0c             	sub    esp,0xc
c002888b:	83 ec 0c             	sub    esp,0xc
c002888e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028892:	e8 cd ff ff ff       	call   c0028864 <PIC::~PIC()>
c0028897:	83 c4 10             	add    esp,0x10
c002889a:	83 ec 08             	sub    esp,0x8
c002889d:	68 58 21 00 00       	push   0x2158
c00288a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288a6:	e8 60 9f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00288ab:	83 c4 10             	add    esp,0x10
c00288ae:	83 c4 0c             	add    esp,0xc
c00288b1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00288b2 <APICTimer::~APICTimer()>:
c00288b2:	83 ec 0c             	sub    esp,0xc
c00288b5:	ba e8 c8 02 c0       	mov    edx,0xc002c8e8
c00288ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288be:	89 10                	mov    DWORD PTR [eax],edx
c00288c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c4:	83 ec 0c             	sub    esp,0xc
c00288c7:	50                   	push   eax
c00288c8:	e8 3f dd fe ff       	call   c001660c <Timer::~Timer()>
c00288cd:	83 c4 10             	add    esp,0x10
c00288d0:	90                   	nop
c00288d1:	83 c4 0c             	add    esp,0xc
c00288d4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00288d6 <APICTimer::~APICTimer()>:
c00288d6:	83 ec 0c             	sub    esp,0xc
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e0:	e8 cd ff ff ff       	call   c00288b2 <APICTimer::~APICTimer()>
c00288e5:	83 c4 10             	add    esp,0x10
c00288e8:	83 ec 08             	sub    esp,0x8
c00288eb:	68 60 01 00 00       	push   0x160
c00288f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288f4:	e8 12 9f fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c00288f9:	83 c4 10             	add    esp,0x10
c00288fc:	83 c4 0c             	add    esp,0xc
c00288ff:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028900 <PIT::~PIT()>:
c0028900:	83 ec 0c             	sub    esp,0xc
c0028903:	ba 38 c9 02 c0       	mov    edx,0xc002c938
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	89 10                	mov    DWORD PTR [eax],edx
c002890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	50                   	push   eax
c0028916:	e8 f1 dc fe ff       	call   c001660c <Timer::~Timer()>
c002891b:	83 c4 10             	add    esp,0x10
c002891e:	90                   	nop
c002891f:	83 c4 0c             	add    esp,0xc
c0028922:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028924 <PIT::~PIT()>:
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	83 ec 0c             	sub    esp,0xc
c002892a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892e:	e8 cd ff ff ff       	call   c0028900 <PIT::~PIT()>
c0028933:	83 c4 10             	add    esp,0x10
c0028936:	83 ec 08             	sub    esp,0x8
c0028939:	68 5c 01 00 00       	push   0x15c
c002893e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028942:	e8 c4 9e fe ff       	call   c001280b <operator delete(void*, unsigned long)>
c0028947:	83 c4 10             	add    esp,0x10
c002894a:	83 c4 0c             	add    esp,0xc
c002894d:	c3                   	ret    
